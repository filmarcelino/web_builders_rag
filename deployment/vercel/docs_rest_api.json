{
  "url": "https://vercel.com/docs/rest-api",
  "title": "Using the REST API - Vercel API Docs",
  "description": "",
  "text": "Using the REST API - Vercel API Docs\nVercel API Docs\nhome page\nSearch...\n⌘\nK\nAsk AI\nSearch...\nNavigation\nUsing the REST API\nGet Started\nEndpoints\nUsing the REST API\nUsing the Vercel SDK\nErrors\nExamples\nDeployment Automation\nDomain Management\nEnvironment Variables\nIntegrations\nLogs and Monitoring\nProject Management\nTeam and User Management\nVercel WAF Management\nRolling Releases Management\nOn this page\nAPI Basics\nServer Specs\nHTTP and TLS\nContent Type\nAuthentication\nCreating an Access Token\nExpiration\nAccessing Resources Owned by a Team\nFailed Authentication\nTypes\nPagination\nRate Limits\nVersioning\nTo view all endpoints, and explore code examples with the SDK and direct API calls, see the\nreference endpoints documentation\n.\nYou can deploy new versions of web applications, manage custom domains, retrieve information about deployments, and manage secrets and environment variables for projects.\nThe API supports any programming language or framework that can send HTTP requests.\nTo interact with the API, you can:\nUse the Vercel SDK\nby first instantiating with your token\nUse the language of your choice by calling the endpoints directly and\nproviding your token\n​\nAPI Basics\nOur API is exposed as an HTTP/1 and HTTP/2 service over SSL. All endpoints live under the URL\nhttps://api.vercel.com\nand then generally follow the REST architecture.\n​\nServer Specs\n​\nHTTP and TLS\nThe API supports HTTP versions 1, 1.1, and 2, although HTTP/2 is preferred.\nTLS versions 1.2 and 1.3 are supported, with resumption.\nFor more information on TLS support, refer to the SSL Labs report.\n​\nContent Type\nAll requests must be encoded as JSON with the Content-Type: application/json header. If not otherwise specified, responses from the Vercel API, including errors, are encoded exclusively as JSON as well.\n​\nAuthentication\nVercel Access Tokens are required to authenticate and use the Vercel API.\nCopy\nAsk AI\nAuthorization\n:\nBearer\n<\nTOKEN\n>\n​\nCreating an Access Token\nAccess Tokens can be created and managed from inside your\naccount settings\n.\nIn the upper-right corner of your\ndashboard\n, click your profile picture, then select\nSettings\nSelect\nTokens\nfrom the sidebar\nEnter a descriptive name for the token\nChoose the scope from the list of Teams in the drop-down menu. The scope ensures that only your specified Team(s) can use an Access Token\nFrom the drop-down, select an expiration date for the Token\nClick\nCreate Token\nOnce you’ve created an Access Token, securely store the value as it will not be shown again.\n​\nExpiration\nSetting an expiration date on an Access Token is highly recommended and is considered one of the standard security practices that helps keep your information secure. You can select from a default list of expiration dates ranging from 1 day to 1 year. You can view the expiration date of your Access Tokens on the\ntokens page.\n​\nAccessing Resources Owned by a Team\nBy default, you can access resources contained within your own user account (personal).\nTo access resources owned by a team, or create a project for a\nspecific\nteam, you must first find the\nTeam ID\n.\nAfter you obtained the Team ID, append it as a query string at the end of the API endpoint URL:\nCopy\nAsk AI\nhttps\n:\n//api.vercel.com/v6/deployments?teamId=[teamID]\n​\nFailed Authentication\nIf authentication is unsuccessful for a request, the\nerror status code\n403\nis returned.\n​\nTypes\nThe following is a list of the types of data used within the Vercel API:\nName\nDefinition\nExample\nID\nA unique value used to identify resources.\n\"V0fra8eEgQwEpFhYG2vTzC3K\"\nString\nA string is a sequence of characters used to represent text.\n\"value\"\nInteger\nAn integer is a number without decimals.\n1234\nFloat\nA float is a number with decimals.\n12.34\nMap\nA data structure with a list of values assigned to a unique key.\n{ \"key\": \"value\" }\nList\nA data structure with only a list of values separated by a comma.\n[\"value\", 1234, 12.34]\nEnum\nAn Enum is a String with only a few possible valid values.\nA\nor\nB\nDate\nAn Integer representing a date in milliseconds since the UNIX epoch.\n1540095775941\nIsoDate\nA String representing a date in the 8601 format.\nYYYY-MM-DDTHH:mm:ssZ\nBoolean\nA Boolean is a type of two possible values representing true or false.\ntrue\n​\nPagination\nWhen the API response includes an array of records, a pagination object is returned when the total number of records present is greater than the limit per request. The default value of this limit is 20 but it can be changed by passing a value to the query parameter\nlimit\nwhen the request is made. The maximum possible value of\nlimit\nis 100.\nYou can then use the pagination object to make additional requests and obtain all the records.\nThe pagination object is structured as shown in the example below:\npagination-structure\nCopy\nAsk AI\n{\n\"pagination\"\n: {\n\"count\"\n:\n20\n,\n//Amount of items in the current page.\n\"next\"\n:\n1555072968396\n,\n//Timestamp that must be used to request the next page.\n\"prev\"\n:\n1555413045188\n//Timestamp that must be used to request the previous page.\n}\n}\nIn order to obtain the records for the next batch, perform the following actions:\nSend a request to the same API endpoint\nInclude the query parameter\nuntil\nwith a value equal to the timestamp value of\nnext\nreturned in the previous request\nRepeat this sequence until the pagination object has a\nnext\nvalue of\nnull\nThis is an example of applying this sequence with\nNode.js\nto save all the projects in your personal account to a\njson\nfile:\npagination-example.js\nCopy\nAsk AI\nconst\naxios\n=\nrequire\n(\n'axios'\n);\nconst\nfs\n=\nrequire\n(\n'fs'\n);\nconst\nvercelToken\n=\n'yourtokenvalue'\n;\n//Replace with your token\nconst\napiEndPt\n=\n'https://api.vercel.com/v9/projects'\n;\nlet\nconfig\n=\n{\nmethod:\n'get'\n,\nurl:\napiEndPt\n,\nheaders:\n{\nAuthorization:\n'Bearer '\n+\nvercelToken\n,\n},\n};\nlet\nresults\n=\n[];\n(\nfunction\nloop\n() {\naxios\n(\nconfig\n)\n.\nthen\n(\nfunction\n(\nresponse\n) {\nresults\n.\npush\n(\n...\nresponse\n.\ndata\n.\nprojects\n);\nif\n(\nresponse\n.\ndata\n.\npagination\n.\nnext\n!==\nnull\n) {\nconfig\n.\nurl\n=\n`\n${\napiEndPt\n}\n?until=\n${\nresponse\n.\ndata\n.\npagination\n.\nnext\n}\n`\n;\nloop\n();\n}\nelse\n{\n//you can use the final results object and for example save it to a json file\nfs\n.\nwriteFileSync\n(\n'projects.json'\n,\nJSON\n.\nstringify\n(\nresults\n));\n}\n})\n.\ncatch\n(\nfunction\n(\nerror\n) {\nconsole\n.\nlog\n(\nerror\n);\n});\n})();\n​\nRate Limits\nWe limit the number of calls you can make over a certain period of time.\nRate limits vary and are specified by the following header in all responses:\nHeader\nDescription\nX-RateLimit-Limit\nThe maximum number of requests that the consumer is permitted to make.\nX-RateLimit-Remaining\nThe number of requests remaining in the current rate limit window.\nX-RateLimit-Reset\nThe time at which the current rate limit window resets in UTC epoch seconds.\nWhen the rate limit is\nexceeded\n, an error is returned with the status “\n429 Too Many Requests\n”:\nerror-response\nCopy\nAsk AI\n{\n\"error\"\n: {\n\"code\"\n:\n\"too_many_requests\"\n,\n\"message\"\n:\n\"Rate limit exceeded\"\n}\n}\nYou can find the complete list of rate limits in the\nlimits\ndocumentation\n.\n​\nVersioning\nAll endpoints and examples are designated with a specific version. Versions vary per endpoint and are not global.\nThe response shape of a certain endpoint is not guaranteed to be fixed over time. In particular, we might add new keys to responses without bumping a version endpoint, which will be noted in the changelog.\nTo ensure the security and correctness of your application, make sure to only read the keys from the response that your application needs. Don’t proxy entire responses to third-parties without validation.\nOld versions of each endpoint are supported for as long as possible. When we intend to deprecate, we will notify users in the changelog section.\nEndpoint versions follow the base URL and come before the endpoint. For example:\nversion-endpoint\nCopy\nAsk AI\nhttps\n:\n//api.vercel.com/v6/deployments`\nThis examples uses version\n6\nof the\ndeployments\nendpoint\n.\nUsing the Vercel SDK\nAssistant\nResponses are generated using AI and may contain mistakes.",
  "source_name": "Vercel",
  "source_category": "deployment",
  "vibe_relevance": 0.85,
  "content_length": 8012,
  "token_count": 1944,
  "collection_timestamp": "2025-09-03T03:39:05.725288"
}