{
  "url": "https://www.figma.com/plugin-docs/",
  "title": "Introduction | Plugin API",
  "description": "",
  "text": "Introduction | Plugin API\nOn this page\nWelcome to the Plugin API!\nPlugins are programs or applications\ncreated by the Community\nthat extend the functionality of Figma's editors. Plugins run in files and perform one or more actions. Users and organizations take advantage of plugins to customize their experience and create more efficient workflows.\nPlugins are created using two common languages of web development: JavaScript and HTML. You’ll need an understanding of these languages to develop plugins. You’ll write the functionality of your plugins in\nJavaScript\nand build your user interface (UI) using\nHTML\n.\nExplore required knowledge →\nPlugins interact with Figma's editors using the dedicated\nPlugin API\n. They can also leverage the external web APIs available in most modern browsers. You can build plugins that run immediately when invoked by the user, or that require users to input information via custom UI.\nExplore how plugins are run →\nThe\nAPI reference\nand this accompanying documentation has the information you need to build plugins. To ask questions, give feedback, or connect with other plugin developers:\nJoin our community-driven Discord server →\nOur quickstart guide takes you through the process of setting up your environment and running a sample plugin.\nGet started with the Plugin API →\nPlugin API access\nThe Plugin API supports both\nread\nand\nwrite\naccess to Figma’s editors, allowing developers to view, create, and modify the contents of files. You can access most of the plugin API through the\nfigma\nglobal object.\nPlugins interact with, first and foremost, the content of files. That's anything that exists in the layers panel and any properties associated with those layers in the properties panel. Plugins can view and modify aspects of these layers (or nodes), like the color, position, hierarchy, text, etc.\nFigma files are\nloaded dynamically\n. This means that\npages\nare only loaded by the editor as needed (for example, when a user navigates to a page). Plugins must use asynchronous APIs to access parts of the file that are outside of the currently-viewed page.\nThere are some limitations to what plugins can access:\nStyles and components from any team or organization libraries. The Plugin API can only access styles, components, and instances that are currently in the file, or have been imported into the file via a function like\nimportComponentByKeyAsync()\n.\nExternal fonts or web fonts accessed via a URL. Plugins can only access fonts that are accessible in the editor, which includes Figma's default fonts,\nshared organization fonts\n, or\nfonts stored locally on your computer\n. The Plugin API can only access editor fonts that have been\nloaded via\nloadFontAsync()\n. This doesn't apply to fonts that you use in your plugin's UI.\nOther file metadata like the file's team or location, permissions, or any comments associated with that file. The includes the version history of that file. You can get read access to these aspects of a file via\nFigma's REST API\n.\nPlugins can behave differently depending on what the user is doing, such as whether they're in Figma Design Mode, Dev Mode, FigJam, or Figma Slides. Plugins running in Dev Mode have certain differences that are important to understand. Learn more in our\nWorking in Dev Mode →\nguide.\nDocument structure\nEvery file in Figma consists of a tree of nodes, and at the root of every file is a DocumentNode. The DocumentNode is how you access and explore the contents of a file.\nIn a Figma design or FigJam file, every DocumentNode will have PageNodes that represent each page in that Figma file. In the case of Figma Slides, there is only one PageNode, representing the slide deck. There is only one DocumentNode per browser tab and each of its children are PageNodes. Because Figma files are\nloaded dynamically\n, not all PageNodes are immediately loaded and available to a plugin. Developers can use the Plugin API to load and traverse additional PageNodes as needed.\nThe\nDocumentNode\ncan have any number of child nodes. Each subtree that stems from the DocumentNode represents a layer or object on the canvas. There are specific nodes or classes for different types of layers in Figma — like frames, components, vectors, and rectangles.\nNodes have a number of properties associated with them. Some of these are\nglobal properties\n, that exist on every node, whereas other properties will be specific to the type of node.\nYou can create plugins for a specific editor type, for multiple editors, or build plugins that perform different actions in different editors. While some node types can only be created in a specific file or editor type, you will generally be able to read and modify most nodes, regardless of the editor type, unless your plugin is running in Dev Mode.\nWorking in Dev Mode guide →\nAsynchronous\nThe Plugin API is designed to be used asynchronously, and Figma encourages plugin developers to utilize the asynchronous methods provided by the Plugin API. A number of critical operations for Figma plugins, like loading pages and working with fonts and images, are asynchronous.\nAsynchronous Tasks →\nBrowser based\nFigma is predominantly browser-based software, which means it can be run on all full desktop operating systems (MacOS, Windows, Linux, etc), as well as Chrome OS .\nLike Figma, plugins are powered by web technologies. Part of the Plugin API runs in an\n<iframe>\n, which means you can also access browser APIs. This includes making network requests, opening local files, and using functionality like\n<canvas>\n, WebGL, and WebAssembly, etc.\nHow Plugins Run →\nUser actions\nPlugins run in files and perform one or more user actions. These user actions are usually short-lived and must be initiated by the user.\nUsers can only run one plugin and one action at a time.\nIt’s not possible to build plugins that run in the background.\nYou can choose whether your plugin runs immediately, or if users can enter in\nparameters\n.\nPlugin UI\nA plugin can also open a modal as an\n<iframe>\nand write HTML, CSS and JavaScript inside that\n<iframe>\n. You're free to create any UI you want inside that modal.\nCreate a user interface →\nBeing able to pull from a library of components that match Figma's design system can significantly speed up plugin development and helps you create a UI that's mirrors Figma's own UI. While we don't provide these components as part of the core Figma Plugin API, Figma employee and plugin developer Tom Lowry has put together a library of React components which you can use to build the UI of your plugin.\nOpen the GitHub repo →\nPlugin parameters\nDevelopers can create plugins with parameters that allow plugins to accept input from users via\nthe quick actions menu\n.\nAdding parameters means that in many cases you don't need to build a custom UI. It also provides a streamlined experience for users of the plugin, who can run a plugin directly from the quick actions menu using their keyboard.\nRelaunch plugins\nWhen building a plugin, you have the option to create buttons in Figma's UI that allows users to relaunch your plugin. This makes it easier to run a plugin multiple times and allows collaborators to relaunch the plugin from the same file. You can do this using the\n[setRelaunchData()](/plugin-docs/api/properties/nodes-setrelaunchdata/)\nfunction.\nmanifest.json:\n\"relaunchButtons\": [\n{\"command\": \"edit\", \"name\": \"Edit shape\"},\n{\"command\": \"open\", \"name\": \"Open Shaper\", \"multipleSelection\": true}\n]\nIn Figma design files, the relaunch button will appear in the\nProperties\npanel. In Dev Mode, relaunch buttons appear in the Inspect panel.\nIn FigJam files, the relaunch button appears in the properties menu for a node. Relaunch buttons are not available on page or document nodes in FigJam.\nMultiple relaunch buttons can be added to the same node. If multiple relaunch buttons from the same plugin are added to the same node, they are grouped together into one button with submenus. The order of buttons is determined by the order of the elements in the manifest's\nrelaunchButtons\narray.\nLearn more in the plugin manifest documentation →\nPlugin management\nSupport\nFigma does not provide support for third-party applications. As the plugin's developer, it's your responsibility to assist your plugin's users with technical issues. You need to add a\nSupport contact\nwhen you submit your plugin for approval. This can be an email address users can contact, or a link to a website or help center.\nManage plugins as a developer →\nVersioning\nOnce Figma approves your plugin, you don't need to submit your plugin for further review. This means you can publish any updates immediately. You'll be able to added a detailed description of any changes or updates in the plugin's\nVersion history\n. You’ll also be able to update the plugin’s\nsecurity disclosure form\nif you’ve changed your plugin’s data practices. When you publish an update, Figma will update the plugin for every user. It's not possible for users to revert to a previous version of the plugin. If you need to roll back any changes, you can republish an earlier version of the plugin.\nAnalytics\nFigma doesn't currently provide any analytics or reporting around plugin usage or error/crash reporting. We recommend using your own analytics or crash reporting service to monitor your plugins performance. Figma will send plugin developers a notification each week about any engagement they've gotten from users in the\nFigma Community\n.\nOn this page\nPlugin API access\nUser actions\nPlugin management",
  "source_name": "Figma",
  "source_category": "design_tools",
  "vibe_relevance": 0.95,
  "content_length": 9496,
  "token_count": 1978,
  "collection_timestamp": "2025-09-03T03:39:07.312750"
}