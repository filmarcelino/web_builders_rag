{
  "title": "Modern-AI-Agents - PacktPublishing GitHub Repository",
  "content": "# Modern-AI-Agents - PacktPublishing\n\n## Acervo de Códigos de Referência\n\nRepositório GitHub com códigos de referência que acompanham livros sobre agentes. Excelente como base ou inspiração prática.\n\n## Estrutura do Repositório\n\n### Basic Agents\n```\nbasic-agents/\n├── simple-chatbot/\n├── task-oriented-agent/\n├── react-agent/\n└── tool-using-agent/\n```\n\n### Advanced Patterns\n```\nadvanced-patterns/\n├── multi-agent-systems/\n├── hierarchical-agents/\n├── collaborative-agents/\n└── self-improving-agents/\n```\n\n### Integration Examples\n```\nintegrations/\n├── langchain-examples/\n├── openai-integration/\n├── huggingface-models/\n└── custom-tools/\n```\n\n### Production Examples\n```\nproduction/\n├── docker-deployment/\n├── kubernetes-manifests/\n├── monitoring-setup/\n└── ci-cd-pipelines/\n```\n\n## Exemplos Práticos\n\n### Simple Chatbot\n```python\nclass SimpleChatbot:\n    def __init__(self, model_name=\"gpt-3.5-turbo\"):\n        self.client = OpenAI()\n        self.model = model_name\n        self.conversation_history = []\n    \n    def chat(self, message):\n        self.conversation_history.append({\"role\": \"user\", \"content\": message})\n        \n        response = self.client.chat.completions.create(\n            model=self.model,\n            messages=self.conversation_history\n        )\n        \n        assistant_message = response.choices[0].message.content\n        self.conversation_history.append({\"role\": \"assistant\", \"content\": assistant_message})\n        \n        return assistant_message\n```\n\n### Tool-Using Agent\n```python\nclass ToolAgent:\n    def __init__(self):\n        self.tools = {\n            \"calculator\": self.calculator,\n            \"web_search\": self.web_search,\n            \"file_reader\": self.file_reader\n        }\n    \n    def execute_task(self, task):\n        # Determine which tools are needed\n        required_tools = self.analyze_task(task)\n        \n        # Execute tools in sequence\n        results = []\n        for tool_name in required_tools:\n            if tool_name in self.tools:\n                result = self.tools[tool_name](task)\n                results.append(result)\n        \n        return self.synthesize_results(results)\n```\n\n### Multi-Agent System\n```python\nclass MultiAgentSystem:\n    def __init__(self):\n        self.agents = {\n            \"researcher\": ResearchAgent(),\n            \"writer\": WriterAgent(),\n            \"reviewer\": ReviewerAgent()\n        }\n        self.coordinator = CoordinatorAgent()\n    \n    def execute_collaborative_task(self, task):\n        # Coordinator assigns subtasks\n        assignments = self.coordinator.assign_tasks(task, self.agents)\n        \n        # Agents execute their parts\n        results = {}\n        for agent_name, subtask in assignments.items():\n            results[agent_name] = self.agents[agent_name].execute(subtask)\n        \n        # Coordinator synthesizes final result\n        return self.coordinator.synthesize(results)\n```\n\n## Deployment Examples\n\n### Docker Configuration\n```dockerfile\nFROM python:3.11-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\n\nCOPY . .\n\nEXPOSE 8000\n\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n```\n\n### Kubernetes Deployment\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: ai-agent\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: ai-agent\n  template:\n    metadata:\n      labels:\n        app: ai-agent\n    spec:\n      containers:\n      - name: ai-agent\n        image: ai-agent:latest\n        ports:\n        - containerPort: 8000\n        env:\n        - name: OPENAI_API_KEY\n          valueFrom:\n            secretKeyRef:\n              name: api-keys\n              key: openai\n```\n\n## Monitoramento\n\n### Metrics Collection\n```python\nclass AgentMetrics:\n    def __init__(self):\n        self.request_count = 0\n        self.response_times = []\n        self.error_count = 0\n    \n    def track_request(self, duration, success=True):\n        self.request_count += 1\n        self.response_times.append(duration)\n        if not success:\n            self.error_count += 1\n    \n    def get_stats(self):\n        return {\n            \"total_requests\": self.request_count,\n            \"avg_response_time\": sum(self.response_times) / len(self.response_times),\n            \"error_rate\": self.error_count / self.request_count\n        }\n```\n\n## Como Usar\n\n1. **Clone o repositório**\n2. **Explore os exemplos**\n3. **Adapte para seu caso de uso**\n4. **Teste localmente**\n5. **Deploy em produção**\n\n## Contribuições\n\n- Issues e pull requests são bem-vindos\n- Documentação detalhada\n- Exemplos práticos\n- Casos de uso reais",
  "metadata": {
    "source": "PacktPublishing GitHub",
    "type": "code_repository",
    "category": "agent_building",
    "difficulty": "all_levels",
    "format": "code",
    "topics": [
      "examples",
      "deployment",
      "monitoring",
      "best practices"
    ],
    "restricted": true,
    "access_level": "agent_builder",
    "repository": "https://github.com/PacktPublishing/Modern-AI-Agents"
  }
}