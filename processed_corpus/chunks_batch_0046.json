[
  {
    "id": "1134b766d01aa2b929e0dd87380c98fd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "as the key for the object access Remember that fn might not contain a lowercase string, so you'll need to convert it to a lowercase string --hints-- Your apply function should use an implicit return js assert notMatch(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 60
  },
  {
    "id": "76266360a526742bae26c3b384254fd4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the object access Remember that fn might not contain a lowercase string, so you'll need to convert it to a lowercase string --hints-- Your apply function should use an implicit return js assert notMatch(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 523,
    "chunk_index": 2,
    "total_chunks": 60
  },
  {
    "id": "093240feaf5d538b2104431c239538e5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the object access Remember that fn might not contain a lowercase string, so you'll need to convert it to a lowercase string --hints-- Your apply function should use an implicit return js assert notMatch(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 531,
    "chunk_index": 3,
    "total_chunks": 60
  },
  {
    "id": "f965e54dd4c1dee846d1d40aad77f3b0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "object access Remember that fn might not contain a lowercase string, so you'll need to convert it to a lowercase string --hints-- Your apply function should use an implicit return js assert notMatch(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 531,
    "chunk_index": 4,
    "total_chunks": 60
  },
  {
    "id": "17b139f4eb513e38bde4dad6a021a437",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "object access Remember that fn might not contain a lowercase string, so you'll need to convert it to a lowercase string --hints-- Your apply function should use an implicit return js assert notMatch(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 540,
    "chunk_index": 5,
    "total_chunks": 60
  },
  {
    "id": "4fd7cb33bb20e30a735ddd4f43d03404",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "object access Remember that fn might not contain a lowercase string, so you'll need to convert it to a lowercase string --hints-- Your apply function should use an implicit return js assert notMatch(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 553,
    "chunk_index": 6,
    "total_chunks": 60
  },
  {
    "id": "acd02013eb5a3fb40b4a0472e63c03be",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "object access Remember that fn might not contain a lowercase string, so you'll need to convert it to a lowercase string --hints-- Your apply function should use an implicit return js assert notMatch(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 572,
    "chunk_index": 7,
    "total_chunks": 60
  },
  {
    "id": "4ab980ab448377d13e1d59107356b322",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "object access Remember that fn might not contain a lowercase string, so you'll need to convert it to a lowercase string --hints-- Your apply function should use an implicit return js assert notMatch(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 586,
    "chunk_index": 8,
    "total_chunks": 60
  },
  {
    "id": "befb5f8fd9be3fbb3e9b73f0b5df003b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "object access Remember that fn might not contain a lowercase string, so you'll need to convert it to a lowercase string --hints-- Your apply function should use an implicit return js assert notMatch(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 598,
    "chunk_index": 9,
    "total_chunks": 60
  },
  {
    "id": "a606a6f62db42acb9e1abee285fdfe78",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "object access Remember that fn might not contain a lowercase string, so you'll need to convert it to a lowercase string --hints-- Your apply function should use an implicit return js assert notMatch(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/);\nYour apply function should access the property of the spreadsheetFunctions object that matches the fn value",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 650,
    "chunk_index": 10,
    "total_chunks": 60
  },
  {
    "id": "54defabede8839234ec23bb2cbb5ea03",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "it to a lowercase string --hints-- Your apply function should use an implicit return js assert notMatch(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 635,
    "chunk_index": 11,
    "total_chunks": 60
  },
  {
    "id": "40b9c505581bed6b2ad95c5dc8362b00",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to a lowercase string --hints-- Your apply function should use an implicit return js assert notMatch(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 647,
    "chunk_index": 12,
    "total_chunks": 60
  },
  {
    "id": "951eade0b732e36c294ec37569972e8e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a lowercase string --hints-- Your apply function should use an implicit return js assert notMatch(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 691,
    "chunk_index": 13,
    "total_chunks": 60
  },
  {
    "id": "d196fdca826799c825115223ad10922c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a lowercase string --hints-- Your apply function should use an implicit return js assert notMatch(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 707,
    "chunk_index": 14,
    "total_chunks": 60
  },
  {
    "id": "75d1a785c0acb57b7db112042b4ccea6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a lowercase string --hints-- Your apply function should use an implicit return js assert notMatch(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 711,
    "chunk_index": 15,
    "total_chunks": 60
  },
  {
    "id": "4caf8b859c3de8a20af9aaa16ec3d89e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a lowercase string --hints-- Your apply function should use an implicit return js assert notMatch(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 712,
    "chunk_index": 16,
    "total_chunks": 60
  },
  {
    "id": "85ffb29bb0c7d89c9bae6082cb5cae8f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a lowercase string --hints-- Your apply function should use an implicit return js assert notMatch(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 720,
    "chunk_index": 17,
    "total_chunks": 60
  },
  {
    "id": "4d6aa46aceb306a8bfd6bade2954be55",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a lowercase string --hints-- Your apply function should use an implicit return js assert notMatch(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 730,
    "chunk_index": 18,
    "total_chunks": 60
  },
  {
    "id": "b9e32fb099740783f8d758a4e5a83854",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a lowercase string --hints-- Your apply function should use an implicit return js assert notMatch(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 734,
    "chunk_index": 19,
    "total_chunks": 60
  },
  {
    "id": "eb9970e75e178c9f77074c4fccff5b03",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a lowercase string --hints-- Your apply function should use an implicit return js assert notMatch(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 735,
    "chunk_index": 20,
    "total_chunks": 60
  },
  {
    "id": "bf751506c50fdb939a0b35315b214b9e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a lowercase string --hints-- Your apply function should use an implicit return js assert notMatch(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 746,
    "chunk_index": 21,
    "total_chunks": 60
  },
  {
    "id": "0157c334c5b59c8aad59bed472ea8f4d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a lowercase string --hints-- Your apply function should use an implicit return js assert notMatch(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 780,
    "chunk_index": 22,
    "total_chunks": 60
  },
  {
    "id": "44f9cc691d1a42b4b4b11414471a3556",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a lowercase string --hints-- Your apply function should use an implicit return js assert notMatch(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 813,
    "chunk_index": 23,
    "total_chunks": 60
  },
  {
    "id": "886983d130186e6bd40c14ddbae29df6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a lowercase string --hints-- Your apply function should use an implicit return js assert notMatch(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 821,
    "chunk_index": 24,
    "total_chunks": 60
  },
  {
    "id": "3ff38307dba89b5590b7c045a0396f82",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "lowercase string --hints-- Your apply function should use an implicit return js assert notMatch(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 822,
    "chunk_index": 25,
    "total_chunks": 60
  },
  {
    "id": "34f20f2dfac4e5d49bb94a5e4f994dae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "lowercase string --hints-- Your apply function should use an implicit return js assert notMatch(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 831,
    "chunk_index": 26,
    "total_chunks": 60
  },
  {
    "id": "ea087480909f812885e2ee9d37924088",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "lowercase string --hints-- Your apply function should use an implicit return js assert notMatch(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 844,
    "chunk_index": 27,
    "total_chunks": 60
  },
  {
    "id": "57f78204af711e1cc86bffe64db46dd3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "lowercase string --hints-- Your apply function should use an implicit return js assert notMatch(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 863,
    "chunk_index": 28,
    "total_chunks": 60
  },
  {
    "id": "6b1741aaf676fd01e707c293355e101f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "lowercase string --hints-- Your apply function should use an implicit return js assert notMatch(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 877,
    "chunk_index": 29,
    "total_chunks": 60
  },
  {
    "id": "24a2b3487f7162bf80ff8595f7a30dd6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "lowercase string --hints-- Your apply function should use an implicit return js assert notMatch(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 889,
    "chunk_index": 30,
    "total_chunks": 60
  },
  {
    "id": "2c915a0f859aacf9c3fe8a923d5c48fe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "lowercase string --hints-- Your apply function should use an implicit return js assert notMatch(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn/);\nYour apply function should call the",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 936,
    "chunk_index": 31,
    "total_chunks": 60
  },
  {
    "id": "d57b48bedaf126854838af01ea7806d0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should use an implicit return js assert notMatch(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn/); Your apply function should call thetoLowerCase() method on fn in the property access",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 936,
    "chunk_index": 32,
    "total_chunks": 60
  },
  {
    "id": "bb68b446fd204ea76083e26c87e4e996",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "notMatch(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn/); Your apply function should call thetoLowerCase() method on fn in the property accessjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 932,
    "chunk_index": 33,
    "total_chunks": 60
  },
  {
    "id": "ac0a651cd892de8c3c9b216cb0a48377",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn/); Your apply function should call thetoLowerCase() method on fn in the property accessjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 941,
    "chunk_index": 34,
    "total_chunks": 60
  },
  {
    "id": "19326ae02f5427cf2c39bfe7bb7a65ae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn/); Your apply function should call thetoLowerCase() method on fn in the property accessjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 975,
    "chunk_index": 35,
    "total_chunks": 60
  },
  {
    "id": "02536459a2ce14e07c92b943f21b75e4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn/); Your apply function should call thetoLowerCase() method on fn in the property accessjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 991,
    "chunk_index": 36,
    "total_chunks": 60
  },
  {
    "id": "2ff472bc69074a67ea48ccadffeaf8b0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn/); Your apply function should call thetoLowerCase() method on fn in the property accessjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 995,
    "chunk_index": 37,
    "total_chunks": 60
  },
  {
    "id": "861c13746c2a71adb5132c2bf2700257",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn/); Your apply function should call thetoLowerCase() method on fn in the property accessjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 996,
    "chunk_index": 38,
    "total_chunks": 60
  },
  {
    "id": "dd5e5b5de8bae67e4b6924adf835890b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn/); Your apply function should call thetoLowerCase() method on fn in the property accessjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 1004,
    "chunk_index": 39,
    "total_chunks": 60
  },
  {
    "id": "f5891f707ed4a0cf54b3f6543c46a1bf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn/); Your apply function should call thetoLowerCase() method on fn in the property accessjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 1014,
    "chunk_index": 40,
    "total_chunks": 60
  },
  {
    "id": "c37ed235900e50d74c5d9e1dac3ac720",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn/); Your apply function should call thetoLowerCase() method on fn in the property accessjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 1018,
    "chunk_index": 41,
    "total_chunks": 60
  },
  {
    "id": "16575b8366ed57964154d765fb67255b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn/); Your apply function should call thetoLowerCase() method on fn in the property accessjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 1019,
    "chunk_index": 42,
    "total_chunks": 60
  },
  {
    "id": "bb55b9e3e189f23a07da823f69907c12",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn/); Your apply function should call thetoLowerCase() method on fn in the property accessjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 1030,
    "chunk_index": 43,
    "total_chunks": 60
  },
  {
    "id": "825bd353ebc4eafbc4c73c60b364c1d5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn/); Your apply function should call thetoLowerCase() method on fn in the property accessjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 1064,
    "chunk_index": 44,
    "total_chunks": 60
  },
  {
    "id": "b895458eacb83b9fdb917ee695f09bf1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn/); Your apply function should call thetoLowerCase() method on fn in the property accessjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 1097,
    "chunk_index": 45,
    "total_chunks": 60
  },
  {
    "id": "c3f13edd8ffd26895fc25395370f1b01",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn/); Your apply function should call thetoLowerCase() method on fn in the property accessjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 1105,
    "chunk_index": 46,
    "total_chunks": 60
  },
  {
    "id": "38597a073b253f599d7e33a38cbc0c52",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn/); Your apply function should call thetoLowerCase() method on fn in the property accessjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 1061,
    "chunk_index": 47,
    "total_chunks": 60
  },
  {
    "id": "df7435113e439dceee66a811bb10c1ed",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn/); Your apply function should call thetoLowerCase() method on fn in the property accessjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 1070,
    "chunk_index": 48,
    "total_chunks": 60
  },
  {
    "id": "4364aec8febce4d8a174419d6453cc40",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn/); Your apply function should call thetoLowerCase() method on fn in the property accessjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 1083,
    "chunk_index": 49,
    "total_chunks": 60
  },
  {
    "id": "4a3a267a76b9f328d1ff4100bd2afd4b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn/); Your apply function should call thetoLowerCase() method on fn in the property accessjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 1102,
    "chunk_index": 50,
    "total_chunks": 60
  },
  {
    "id": "1e3f1411bfcaed743696fd217092d8cc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn/); Your apply function should call thetoLowerCase() method on fn in the property accessjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 1116,
    "chunk_index": 51,
    "total_chunks": 60
  },
  {
    "id": "8b00a15c2b2d4664db4c1e2db407fca7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn/); Your apply function should call thetoLowerCase() method on fn in the property accessjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 1128,
    "chunk_index": 52,
    "total_chunks": 60
  },
  {
    "id": "ec87f449732be82e6015add90df5eae0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn/); Your apply function should call thetoLowerCase() method on fn in the property accessjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 1168,
    "chunk_index": 53,
    "total_chunks": 60
  },
  {
    "id": "4c40795424a943e77c68ccebce978e4c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn/); Your apply function should call thetoLowerCase() method on fn in the property accessjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 1233,
    "chunk_index": 54,
    "total_chunks": 60
  },
  {
    "id": "ae745a92ff31c20dac3aad9ebec15891",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "apply function should access the spreadsheetFunctions object js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions/); Your apply function should access the property of the spreadsheetFunctions object that matches the fn valuejs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn/); Your apply function should call thetoLowerCase() method on fn in the property accessjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n\"*\": (x, y) => x * y,\n\"/\": (x, y) => x / y,\n}\nconst infixEval = (str, regex) => str",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 1092,
    "chunk_index": 55,
    "total_chunks": 60
  },
  {
    "id": "83cc3b218fa5645e88eff43e6b5bc442",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "accessjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const infixToFunction = { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } const infixEval = (str, regex) => strreplace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator);\nconst highPrecedence = str => {\nconst regex = /([\\d ]+)([*\\/])([\\d",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 56,
    "total_chunks": 60
  },
  {
    "id": "7ffef736f830d2ad4675c86b43ef37ff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const infixToFunction = { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } const infixEval = (str, regex) => strreplace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator); const highPrecedence = str => { const regex = /([\\d ]+)([*\\/])([\\d]+)/;\nconst str2 = infixEval(str, regex);\nreturn str === str2 str : highPrecedence(str2);\n}\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\n--fcc-editable-region--\nconst applyFunction = str => {\nconst noHigh = highPrecedence(str);\nconst infix = /([\\d ]+)([+-])([\\d ]+)/;\nconst str2 = infixEval(noHigh, infix);\nconst functionCall = /([a-z0-9])(([0-9 , ]))( *()/i;\nconst toNumberList = args => args split(\",\") map(parseFloat);\nconst apply = (fn, args) => {}\n}\n--fcc-editable-region--\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 57,
    "total_chunks": 60
  },
  {
    "id": "7a27c14e7da4f05d9b7f6bf92f485343",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "]+)([+-])([\\d ]+)/; const str2 = infixEval(noHigh, infix); const functionCall = /([a-z0-9])(([0-9 , ]))( *()/i; const toNumberList = args => args split(\",\") map(parseFloat); const apply = (fn, args) => {} } --fcc-editable-region-- const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code)); const evalFormula = (x, cells) => { const idToText = id => cellsfind(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 58,
    "total_chunks": 60
  },
  {
    "id": "65ed569e8b41ee94e433ea8560a119f2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99) forEach(number => { createLabel(number); letters forEach(letter => { const input = document createElement(\"input\"); input type = \"text\"; input id = letter + number; input ariaLabel = letter + number; input onchange = update; container appendChild(input); }) }) } const update = event => { const element = event target; const value = element value replace(/\\s/g, \"\"); if ( value includes(elementid) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 130,
    "chunk_index": 59,
    "total_chunks": 60
  },
  {
    "id": "7da41c7951deee14e31406308572de12",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d45b739da5ecbf830c108\ntitle: Step 87\nchallengeType: 0\ndashedName: step-87\n--description--\nYour apply function is returning the spreadsheet function, but not actually applying it Update apply to call the function Pass in the result of calling toNumberList with args as an argument --hints--\nYour apply function should call the spreadsheetFunctions[fn toLowerCase()] function js\nassert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(/);\nYou should pass a toNumberList() call to your spreadsheetFunctions[fn toLowerCase()] call js\nassert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 509,
    "chunk_index": 0,
    "total_chunks": 40
  },
  {
    "id": "fd34fd22587793c5d60f987dc3bac81c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "not actually applying it Update apply to call the function Pass in the result of calling toNumberList with args as an argument --hints-- Your apply function should call the spreadsheetFunctions[fn toLowerCase()] function js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(/); You should pass a toNumberList() call to your spreadsheetFunctions[fn toLowerCase()] call js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 40
  },
  {
    "id": "57038b196a97b35932235be60d823439",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Update apply to call the function Pass in the result of calling toNumberList with args as an argument --hints-- Your apply function should call the spreadsheetFunctions[fn toLowerCase()] function js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(/); You should pass a toNumberList() call to your spreadsheetFunctions[fn toLowerCase()] call js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 521,
    "chunk_index": 2,
    "total_chunks": 40
  },
  {
    "id": "66da4eff7ae89aaaf3497257893ff93b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Update apply to call the function Pass in the result of calling toNumberList with args as an argument --hints-- Your apply function should call the spreadsheetFunctions[fn toLowerCase()] function js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(/); You should pass a toNumberList() call to your spreadsheetFunctions[fn toLowerCase()] call js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 554,
    "chunk_index": 3,
    "total_chunks": 40
  },
  {
    "id": "018189aa29cd48d55653b673d4548294",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Update apply to call the function Pass in the result of calling toNumberList with args as an argument --hints-- Your apply function should call the spreadsheetFunctions[fn toLowerCase()] function js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(/); You should pass a toNumberList() call to your spreadsheetFunctions[fn toLowerCase()] call js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 562,
    "chunk_index": 4,
    "total_chunks": 40
  },
  {
    "id": "6f87afb53495f1a62a30979fa5a6e9ba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "apply to call the function Pass in the result of calling toNumberList with args as an argument --hints-- Your apply function should call the spreadsheetFunctions[fn toLowerCase()] function js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(/); You should pass a toNumberList() call to your spreadsheetFunctions[fn toLowerCase()] call js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 562,
    "chunk_index": 5,
    "total_chunks": 40
  },
  {
    "id": "4a96c7ce932bafb7e3ba1dca3ed1f58d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "apply to call the function Pass in the result of calling toNumberList with args as an argument --hints-- Your apply function should call the spreadsheetFunctions[fn toLowerCase()] function js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(/); You should pass a toNumberList() call to your spreadsheetFunctions[fn toLowerCase()] call js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 571,
    "chunk_index": 6,
    "total_chunks": 40
  },
  {
    "id": "8b28db47c684c2694204a64cac42aa93",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "apply to call the function Pass in the result of calling toNumberList with args as an argument --hints-- Your apply function should call the spreadsheetFunctions[fn toLowerCase()] function js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(/); You should pass a toNumberList() call to your spreadsheetFunctions[fn toLowerCase()] call js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 584,
    "chunk_index": 7,
    "total_chunks": 40
  },
  {
    "id": "1d5faad450846650495e47e1c88d5505",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "apply to call the function Pass in the result of calling toNumberList with args as an argument --hints-- Your apply function should call the spreadsheetFunctions[fn toLowerCase()] function js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(/); You should pass a toNumberList() call to your spreadsheetFunctions[fn toLowerCase()] call js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 603,
    "chunk_index": 8,
    "total_chunks": 40
  },
  {
    "id": "2dd0d7ae635048399e68778e6d93d5e6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "apply to call the function Pass in the result of calling toNumberList with args as an argument --hints-- Your apply function should call the spreadsheetFunctions[fn toLowerCase()] function js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(/); You should pass a toNumberList() call to your spreadsheetFunctions[fn toLowerCase()] call js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 617,
    "chunk_index": 9,
    "total_chunks": 40
  },
  {
    "id": "9ffff98f8d3e90d8491236505bab3a5c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "apply to call the function Pass in the result of calling toNumberList with args as an argument --hints-- Your apply function should call the spreadsheetFunctions[fn toLowerCase()] function js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(/); You should pass a toNumberList() call to your spreadsheetFunctions[fn toLowerCase()] call js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 629,
    "chunk_index": 10,
    "total_chunks": 40
  },
  {
    "id": "58c94b99a2d612d41c7c8b604d6e6db8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "apply to call the function Pass in the result of calling toNumberList with args as an argument --hints-- Your apply function should call the spreadsheetFunctions[fn toLowerCase()] function js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(/); You should pass a toNumberList() call to your spreadsheetFunctions[fn toLowerCase()] call js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 669,
    "chunk_index": 11,
    "total_chunks": 40
  },
  {
    "id": "fc432afda91c00c50f4ddeee95518db1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "apply to call the function Pass in the result of calling toNumberList with args as an argument --hints-- Your apply function should call the spreadsheetFunctions[fn toLowerCase()] function js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(/); You should pass a toNumberList() call to your spreadsheetFunctions[fn toLowerCase()] call js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(/);\nYou should pass args to your toNumberList() call",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 700,
    "chunk_index": 12,
    "total_chunks": 40
  },
  {
    "id": "f093ac35648920d83999c03966d12fbb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "result of calling toNumberList with args as an argument --hints-- Your apply function should call the spreadsheetFunctions[fn toLowerCase()] function js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(/); You should pass a toNumberList() call to your spreadsheetFunctions[fn toLowerCase()] call js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(/); You should pass args to your toNumberList() calljs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 695,
    "chunk_index": 13,
    "total_chunks": 40
  },
  {
    "id": "6f3fa7b26af588b91ccb361a230cfb65",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of calling toNumberList with args as an argument --hints-- Your apply function should call the spreadsheetFunctions[fn toLowerCase()] function js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(/); You should pass a toNumberList() call to your spreadsheetFunctions[fn toLowerCase()] call js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(/); You should pass args to your toNumberList() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 707,
    "chunk_index": 14,
    "total_chunks": 40
  },
  {
    "id": "71222a70657204f961e11a4c593c4a1b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "calling toNumberList with args as an argument --hints-- Your apply function should call the spreadsheetFunctions[fn toLowerCase()] function js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(/); You should pass a toNumberList() call to your spreadsheetFunctions[fn toLowerCase()] call js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(/); You should pass args to your toNumberList() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 751,
    "chunk_index": 15,
    "total_chunks": 40
  },
  {
    "id": "a0c6568277d03a8d716f3c6493ccee54",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "calling toNumberList with args as an argument --hints-- Your apply function should call the spreadsheetFunctions[fn toLowerCase()] function js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(/); You should pass a toNumberList() call to your spreadsheetFunctions[fn toLowerCase()] call js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(/); You should pass args to your toNumberList() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 767,
    "chunk_index": 16,
    "total_chunks": 40
  },
  {
    "id": "78a768dbecab2f38c2d3a170b4fd79c0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "calling toNumberList with args as an argument --hints-- Your apply function should call the spreadsheetFunctions[fn toLowerCase()] function js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(/); You should pass a toNumberList() call to your spreadsheetFunctions[fn toLowerCase()] call js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(/); You should pass args to your toNumberList() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 771,
    "chunk_index": 17,
    "total_chunks": 40
  },
  {
    "id": "812a79cc901bc0828d0fe94b50097b5b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "calling toNumberList with args as an argument --hints-- Your apply function should call the spreadsheetFunctions[fn toLowerCase()] function js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(/); You should pass a toNumberList() call to your spreadsheetFunctions[fn toLowerCase()] call js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(/); You should pass args to your toNumberList() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 772,
    "chunk_index": 18,
    "total_chunks": 40
  },
  {
    "id": "aff666c43f3fb97b2b4d0da5c7aa102a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "calling toNumberList with args as an argument --hints-- Your apply function should call the spreadsheetFunctions[fn toLowerCase()] function js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(/); You should pass a toNumberList() call to your spreadsheetFunctions[fn toLowerCase()] call js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(/); You should pass args to your toNumberList() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 780,
    "chunk_index": 19,
    "total_chunks": 40
  },
  {
    "id": "0294be04fe3f0f798ea7bd93261eb99c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "calling toNumberList with args as an argument --hints-- Your apply function should call the spreadsheetFunctions[fn toLowerCase()] function js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(/); You should pass a toNumberList() call to your spreadsheetFunctions[fn toLowerCase()] call js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(/); You should pass args to your toNumberList() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 790,
    "chunk_index": 20,
    "total_chunks": 40
  },
  {
    "id": "6bc0a771cdbbce11705b55c7cd953f9a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "calling toNumberList with args as an argument --hints-- Your apply function should call the spreadsheetFunctions[fn toLowerCase()] function js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(/); You should pass a toNumberList() call to your spreadsheetFunctions[fn toLowerCase()] call js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(/); You should pass args to your toNumberList() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 794,
    "chunk_index": 21,
    "total_chunks": 40
  },
  {
    "id": "a0798514d3740a1fbb6d6247ff9bdd94",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "calling toNumberList with args as an argument --hints-- Your apply function should call the spreadsheetFunctions[fn toLowerCase()] function js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(/); You should pass a toNumberList() call to your spreadsheetFunctions[fn toLowerCase()] call js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(/); You should pass args to your toNumberList() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 795,
    "chunk_index": 22,
    "total_chunks": 40
  },
  {
    "id": "7a47bea008863a05ca738a9d6eac58fc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "calling toNumberList with args as an argument --hints-- Your apply function should call the spreadsheetFunctions[fn toLowerCase()] function js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(/); You should pass a toNumberList() call to your spreadsheetFunctions[fn toLowerCase()] call js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(/); You should pass args to your toNumberList() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 806,
    "chunk_index": 23,
    "total_chunks": 40
  },
  {
    "id": "4c956b3675f754d8a7a3c6d8a74b2713",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "calling toNumberList with args as an argument --hints-- Your apply function should call the spreadsheetFunctions[fn toLowerCase()] function js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(/); You should pass a toNumberList() call to your spreadsheetFunctions[fn toLowerCase()] call js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(/); You should pass args to your toNumberList() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 840,
    "chunk_index": 24,
    "total_chunks": 40
  },
  {
    "id": "48e108507964d97f07c7418ce174c15e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "calling toNumberList with args as an argument --hints-- Your apply function should call the spreadsheetFunctions[fn toLowerCase()] function js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(/); You should pass a toNumberList() call to your spreadsheetFunctions[fn toLowerCase()] call js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(/); You should pass args to your toNumberList() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 873,
    "chunk_index": 25,
    "total_chunks": 40
  },
  {
    "id": "ab5229c8581daa5939faaf7ee9ae6893",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "calling toNumberList with args as an argument --hints-- Your apply function should call the spreadsheetFunctions[fn toLowerCase()] function js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(/); You should pass a toNumberList() call to your spreadsheetFunctions[fn toLowerCase()] call js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(/); You should pass args to your toNumberList() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 881,
    "chunk_index": 26,
    "total_chunks": 40
  },
  {
    "id": "68da3460287976676bd72c14e0014493",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "toNumberList with args as an argument --hints-- Your apply function should call the spreadsheetFunctions[fn toLowerCase()] function js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(/); You should pass a toNumberList() call to your spreadsheetFunctions[fn toLowerCase()] call js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(/); You should pass args to your toNumberList() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 881,
    "chunk_index": 27,
    "total_chunks": 40
  },
  {
    "id": "c28231771a402271feb035cf1e43272f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "toNumberList with args as an argument --hints-- Your apply function should call the spreadsheetFunctions[fn toLowerCase()] function js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(/); You should pass a toNumberList() call to your spreadsheetFunctions[fn toLowerCase()] call js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(/); You should pass args to your toNumberList() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 890,
    "chunk_index": 28,
    "total_chunks": 40
  },
  {
    "id": "c5e47de57c71ebeb87402668cca67e99",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "toNumberList with args as an argument --hints-- Your apply function should call the spreadsheetFunctions[fn toLowerCase()] function js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(/); You should pass a toNumberList() call to your spreadsheetFunctions[fn toLowerCase()] call js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(/); You should pass args to your toNumberList() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 903,
    "chunk_index": 29,
    "total_chunks": 40
  },
  {
    "id": "5d5a19efee3e034370d7e3b6f848c833",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "toNumberList with args as an argument --hints-- Your apply function should call the spreadsheetFunctions[fn toLowerCase()] function js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(/); You should pass a toNumberList() call to your spreadsheetFunctions[fn toLowerCase()] call js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(/); You should pass args to your toNumberList() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 922,
    "chunk_index": 30,
    "total_chunks": 40
  },
  {
    "id": "0832eae491846f9743cfd50bc2065f67",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "toNumberList with args as an argument --hints-- Your apply function should call the spreadsheetFunctions[fn toLowerCase()] function js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(/); You should pass a toNumberList() call to your spreadsheetFunctions[fn toLowerCase()] call js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(/); You should pass args to your toNumberList() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 936,
    "chunk_index": 31,
    "total_chunks": 40
  },
  {
    "id": "4bd998a7061b28960d106f7ba234acdc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "toNumberList with args as an argument --hints-- Your apply function should call the spreadsheetFunctions[fn toLowerCase()] function js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(/); You should pass a toNumberList() call to your spreadsheetFunctions[fn toLowerCase()] call js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(/); You should pass args to your toNumberList() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 948,
    "chunk_index": 32,
    "total_chunks": 40
  },
  {
    "id": "8044b34066bb7b5836b1f50837205aff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "toNumberList with args as an argument --hints-- Your apply function should call the spreadsheetFunctions[fn toLowerCase()] function js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(/); You should pass a toNumberList() call to your spreadsheetFunctions[fn toLowerCase()] call js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(/); You should pass args to your toNumberList() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 988,
    "chunk_index": 33,
    "total_chunks": 40
  },
  {
    "id": "e2ecd58a4b524b7ba1d35d3f98e5e1e1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "toNumberList with args as an argument --hints-- Your apply function should call the spreadsheetFunctions[fn toLowerCase()] function js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(/); You should pass a toNumberList() call to your spreadsheetFunctions[fn toLowerCase()] call js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(/); You should pass args to your toNumberList() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 1069,
    "chunk_index": 34,
    "total_chunks": 40
  },
  {
    "id": "fbd052682a38d3acc5e06737780398e2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(/); You should pass a toNumberList() call to your spreadsheetFunctions[fn toLowerCase()] call js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(/); You should pass args to your toNumberList() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n\"*\": (x, y) => x * y,\n\"/\": (x, y) => x / y,\n}\nconst infixEval = (str, regex) => str",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 1121,
    "chunk_index": 35,
    "total_chunks": 40
  },
  {
    "id": "6385c520d161535e8e91bc6aab5a9791",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const infixToFunction = { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } const infixEval = (str, regex) => strreplace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator);\nconst highPrecedence = str => {\nconst regex = /([\\d",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 507,
    "chunk_index": 36,
    "total_chunks": 40
  },
  {
    "id": "48e68f1f7a800a3cb6532d5577c2db12",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const infixToFunction = { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } const infixEval = (str, regex) => strreplace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator); const highPrecedence = str => { const regex = /([\\d]+)([*\\/])([\\d ]+)/;\nconst str2 = infixEval(str, regex);\nreturn str === str2 str : highPrecedence(str2);\n}\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\n--fcc-editable-region--\nconst applyFunction = str => {\nconst noHigh = highPrecedence(str);\nconst infix = /([\\d ]+)([+-])([\\d ]+)/;\nconst str2 = infixEval(noHigh, infix);\nconst functionCall = /([a-z0-9])(([0-9 , ]))( *()/i;\nconst toNumberList = args => args split(\",\") map(parseFloat);\nconst apply = (fn, args) => spreadsheetFunctions[fn toLowerCase()];\n}\n--fcc-editable-region--\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 37,
    "total_chunks": 40
  },
  {
    "id": "7d144167ff105380e7c7120a9e78ef39",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "applyFunction = str => { const noHigh = highPrecedence(str); const infix = /([\\d ]+)([+-])([\\d ]+)/; const str2 = infixEval(noHigh, infix); const functionCall = /([a-z0-9])(([0-9 , ]))( *()/i; const toNumberList = args => args split(\",\") map(parseFloat); const apply = (fn, args) => spreadsheetFunctions[fn toLowerCase()]; } --fcc-editable-region-- const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => StringfromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 38,
    "total_chunks": 40
  },
  {
    "id": "32e6566a1c96e7574b43411f3d326168",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99) forEach(number => { createLabel(number); letters forEach(letter => { const input = document createElement(\"input\"); input type = \"text\"; input id = letter + number; input ariaLabel = letter + number; input onchange = update; containerappendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45b739da5ecbf830c108.md",
      "source_type": "git_repo"
    },
    "token_count": 167,
    "chunk_index": 39,
    "total_chunks": 40
  },
  {
    "id": "fc815f8a69c7f8c0f379fc7877080f64",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d45ee725632cca2555146\ntitle: Step 88\nchallengeType: 0\ndashedName: step-88\n--description--\nNow your applyFunction needs to return a result Return the result of calling the replace() method on str2 Pass your functionCall regex and an empty callback --hints--\nYour applyFunction function should return the result of calling the replace() method on str2 js\nassert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/);\nYou should pass functionCall as the first argument to your replace() call js\nassert match(code, /const\\s+applyFunction\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 0,
    "total_chunks": 48
  },
  {
    "id": "5958041a5a15f7a650809d08e6752fb7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Return the result of calling the replace() method on str2 Pass your functionCall regex and an empty callback --hints-- Your applyFunction function should return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 1,
    "total_chunks": 48
  },
  {
    "id": "83af97d254c16d840aad0a9354c17592",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the replace() method on str2 Pass your functionCall regex and an empty callback --hints-- Your applyFunction function should return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 2,
    "total_chunks": 48
  },
  {
    "id": "5d297aa9bcfb79ecc4f6986574a842ee",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the replace() method on str2 Pass your functionCall regex and an empty callback --hints-- Your applyFunction function should return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 3,
    "total_chunks": 48
  },
  {
    "id": "4f4430d1682231f59938601299642ff0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the replace() method on str2 Pass your functionCall regex and an empty callback --hints-- Your applyFunction function should return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 513,
    "chunk_index": 4,
    "total_chunks": 48
  },
  {
    "id": "45627a9951ea70bede635966c8d4e24e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the replace() method on str2 Pass your functionCall regex and an empty callback --hints-- Your applyFunction function should return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 547,
    "chunk_index": 5,
    "total_chunks": 48
  },
  {
    "id": "9bb8dbb840f77b4a5ee9c4e6fae095a3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the replace() method on str2 Pass your functionCall regex and an empty callback --hints-- Your applyFunction function should return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 580,
    "chunk_index": 6,
    "total_chunks": 48
  },
  {
    "id": "3b498fe4e3c36977a5d4c8b444eb31d4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the replace() method on str2 Pass your functionCall regex and an empty callback --hints-- Your applyFunction function should return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 588,
    "chunk_index": 7,
    "total_chunks": 48
  },
  {
    "id": "3fe0d3a8b5e52c601bd089b5bdb3f688",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "replace() method on str2 Pass your functionCall regex and an empty callback --hints-- Your applyFunction function should return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 588,
    "chunk_index": 8,
    "total_chunks": 48
  },
  {
    "id": "bf6909f7bf75ba16d94912104f0fc004",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "replace() method on str2 Pass your functionCall regex and an empty callback --hints-- Your applyFunction function should return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 597,
    "chunk_index": 9,
    "total_chunks": 48
  },
  {
    "id": "d9af180a7c7a906ea2b27b70f3ff668b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "replace() method on str2 Pass your functionCall regex and an empty callback --hints-- Your applyFunction function should return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 610,
    "chunk_index": 10,
    "total_chunks": 48
  },
  {
    "id": "da087b574882fb8665ef9ef037c9254d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "replace() method on str2 Pass your functionCall regex and an empty callback --hints-- Your applyFunction function should return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 629,
    "chunk_index": 11,
    "total_chunks": 48
  },
  {
    "id": "da8222c8c060d0ce4eccccd8d26f7e0f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "replace() method on str2 Pass your functionCall regex and an empty callback --hints-- Your applyFunction function should return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 643,
    "chunk_index": 12,
    "total_chunks": 48
  },
  {
    "id": "c127f3a4d31960651db143e28fbd2ff0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "replace() method on str2 Pass your functionCall regex and an empty callback --hints-- Your applyFunction function should return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 655,
    "chunk_index": 13,
    "total_chunks": 48
  },
  {
    "id": "048976d89a83d8249933830880c8c232",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "replace() method on str2 Pass your functionCall regex and an empty callback --hints-- Your applyFunction function should return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 695,
    "chunk_index": 14,
    "total_chunks": 48
  },
  {
    "id": "d707c5abfe9d0c381054fb65cb871d76",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "replace() method on str2 Pass your functionCall regex and an empty callback --hints-- Your applyFunction function should return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 726,
    "chunk_index": 15,
    "total_chunks": 48
  },
  {
    "id": "d3214f81249afc15b920671d249cdc8f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "replace() method on str2 Pass your functionCall regex and an empty callback --hints-- Your applyFunction function should return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 734,
    "chunk_index": 16,
    "total_chunks": 48
  },
  {
    "id": "1f2f75c7e661c32c0d49b237987f0bd0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "replace() method on str2 Pass your functionCall regex and an empty callback --hints-- Your applyFunction function should return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall/);\nYou should pass an empty arrow function as the second argument to your",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 756,
    "chunk_index": 17,
    "total_chunks": 48
  },
  {
    "id": "91af9422573273be44517f9974adbdc2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your applyFunction function should return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall/); You should pass an empty arrow function as the second argument to yourreplace() call",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 741,
    "chunk_index": 18,
    "total_chunks": 48
  },
  {
    "id": "bb112a945bcd4f64fcbb1c8047ab11a3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "applyFunction function should return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall/); You should pass an empty arrow function as the second argument to yourreplace() calljs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 743,
    "chunk_index": 19,
    "total_chunks": 48
  },
  {
    "id": "132c757f3da3a7596e2c4f331cdd23b4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "function should return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall/); You should pass an empty arrow function as the second argument to yourreplace() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 754,
    "chunk_index": 20,
    "total_chunks": 48
  },
  {
    "id": "f79ff7e8e341149efd5f25364e16a680",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall/); You should pass an empty arrow function as the second argument to yourreplace() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 798,
    "chunk_index": 21,
    "total_chunks": 48
  },
  {
    "id": "488add9436f3293ea218c855ff46b81e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall/); You should pass an empty arrow function as the second argument to yourreplace() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 814,
    "chunk_index": 22,
    "total_chunks": 48
  },
  {
    "id": "ccf3a8a89d590b5be5cc56b3cbea7e37",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall/); You should pass an empty arrow function as the second argument to yourreplace() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 818,
    "chunk_index": 23,
    "total_chunks": 48
  },
  {
    "id": "8062a077706999051c8a7c4ef91d665b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall/); You should pass an empty arrow function as the second argument to yourreplace() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 819,
    "chunk_index": 24,
    "total_chunks": 48
  },
  {
    "id": "f3fb30e82fafbbe19c3bd523e4dc5ec7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall/); You should pass an empty arrow function as the second argument to yourreplace() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 827,
    "chunk_index": 25,
    "total_chunks": 48
  },
  {
    "id": "f85fd86ca8b145d97886f0f253999c97",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall/); You should pass an empty arrow function as the second argument to yourreplace() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 837,
    "chunk_index": 26,
    "total_chunks": 48
  },
  {
    "id": "d18bb0b9c56f0338d9e47de29f8415f2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall/); You should pass an empty arrow function as the second argument to yourreplace() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 841,
    "chunk_index": 27,
    "total_chunks": 48
  },
  {
    "id": "c8c8846f146ee8738c736c4b3f6ed7b2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall/); You should pass an empty arrow function as the second argument to yourreplace() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 842,
    "chunk_index": 28,
    "total_chunks": 48
  },
  {
    "id": "9d9d300e2168a55efc5fe8d3a7923d42",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall/); You should pass an empty arrow function as the second argument to yourreplace() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 853,
    "chunk_index": 29,
    "total_chunks": 48
  },
  {
    "id": "1b179c2795b7c7c3c84b393eed87a511",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall/); You should pass an empty arrow function as the second argument to yourreplace() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 887,
    "chunk_index": 30,
    "total_chunks": 48
  },
  {
    "id": "fd979b1fa02d5500df573f22bc8d92df",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall/); You should pass an empty arrow function as the second argument to yourreplace() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 920,
    "chunk_index": 31,
    "total_chunks": 48
  },
  {
    "id": "e599f0909543223ba82b4aa84928ac06",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall/); You should pass an empty arrow function as the second argument to yourreplace() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 928,
    "chunk_index": 32,
    "total_chunks": 48
  },
  {
    "id": "dcdef56361bd69b5465db00512427c56",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall/); You should pass an empty arrow function as the second argument to yourreplace() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 928,
    "chunk_index": 33,
    "total_chunks": 48
  },
  {
    "id": "095a3890b134775a3e4f1683255eb19f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall/); You should pass an empty arrow function as the second argument to yourreplace() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 937,
    "chunk_index": 34,
    "total_chunks": 48
  },
  {
    "id": "99d59730743c6f5b13fb8563af63851a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall/); You should pass an empty arrow function as the second argument to yourreplace() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 950,
    "chunk_index": 35,
    "total_chunks": 48
  },
  {
    "id": "69bc31e3aad8caf69ff3b7a1353f3656",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall/); You should pass an empty arrow function as the second argument to yourreplace() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 969,
    "chunk_index": 36,
    "total_chunks": 48
  },
  {
    "id": "6a442aa67dceb3569868c27dee402849",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall/); You should pass an empty arrow function as the second argument to yourreplace() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 983,
    "chunk_index": 37,
    "total_chunks": 48
  },
  {
    "id": "444a640ed28e7a300943085d0a2d3106",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall/); You should pass an empty arrow function as the second argument to yourreplace() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 995,
    "chunk_index": 38,
    "total_chunks": 48
  },
  {
    "id": "f8ad0754047a1cd620fb95ee79681c9d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall/); You should pass an empty arrow function as the second argument to yourreplace() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 1035,
    "chunk_index": 39,
    "total_chunks": 48
  },
  {
    "id": "6998a883a126c0a22a7edb309ef23685",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall/); You should pass an empty arrow function as the second argument to yourreplace() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 1066,
    "chunk_index": 40,
    "total_chunks": 48
  },
  {
    "id": "8e992206d7889f06076cfa4b4215d921",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall/); You should pass an empty arrow function as the second argument to yourreplace() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 1074,
    "chunk_index": 41,
    "total_chunks": 48
  },
  {
    "id": "e35e16cfa9a4ebbce99e7dfb2f3e8367",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "return the result of calling the replace() method on str2 js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall/); You should pass an empty arrow function as the second argument to yourreplace() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 1156,
    "chunk_index": 42,
    "total_chunks": 48
  },
  {
    "id": "1111ef6fad2ac9814a75df0e4ee9419c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(/); You should pass functionCall as the first argument to your replace() call js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall/); You should pass an empty arrow function as the second argument to yourreplace() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*\\}/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n\"*\": (x, y) => x * y,\n\"/\": (x, y) => x / y,\n}\nconst infixEval = (str, regex) => str",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 1137,
    "chunk_index": 43,
    "total_chunks": 48
  },
  {
    "id": "d22023e1a1cea54fbe2e22954cbc2afe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*\\}/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const infixToFunction = { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } const infixEval = (str, regex) => strreplace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator);\nconst highPrecedence = str => {\nconst regex = /([\\d",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 547,
    "chunk_index": 44,
    "total_chunks": 48
  },
  {
    "id": "973ef6e891a7846ab82831db1e20b97b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const infixToFunction = { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } const infixEval = (str, regex) => strreplace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator); const highPrecedence = str => { const regex = /([\\d]+)([*\\/])([\\d ]+)/;\nconst str2 = infixEval(str, regex);\nreturn str === str2 str : highPrecedence(str2);\n}\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\n--fcc-editable-region--\nconst applyFunction = str => {\nconst noHigh = highPrecedence(str);\nconst infix = /([\\d ]+)([+-])([\\d ]+)/;\nconst str2 = infixEval(noHigh, infix);\nconst functionCall = /([a-z0-9])(([0-9 , ]))( *()/i;\nconst toNumberList = args => args split(\",\") map(parseFloat);\nconst apply = (fn, args) => spreadsheetFunctionsfn toLowerCase();\n}\n--fcc-editable-region--\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 45,
    "total_chunks": 48
  },
  {
    "id": "ed12ba2ae985fd50d0966906e79de0f3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "applyFunction = str => { const noHigh = highPrecedence(str); const infix = /([\\d ]+)([+-])([\\d ]+)/; const str2 = infixEval(noHigh, infix); const functionCall = /([a-z0-9])(([0-9 , ]))( *()/i; const toNumberList = args => args split(\",\") map(parseFloat); const apply = (fn, args) => spreadsheetFunctionsfn toLowerCase(); } --fcc-editable-region-- const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => StringfromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 46,
    "total_chunks": 48
  },
  {
    "id": "3aef853129e652ad7517ed705c570ec0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99) forEach(number => { createLabel(number); letters forEach(letter => { const input = document createElement(\"input\"); input type = \"text\"; input id = letter + number; input ariaLabel = letter + number; input onchange = update; containerappendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d45ee725632cca2555146.md",
      "source_type": "git_repo"
    },
    "token_count": 167,
    "chunk_index": 47,
    "total_chunks": 48
  },
  {
    "id": "2292e821b1427906a9da5361db8b78b7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d39c156fe94b7482c3ab6\ntitle: Step 61\nchallengeType: 0\ndashedName: step-61\n--description--\nDeclare a variable cellRegex to match cell references It should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints--\nYou should declare a cellRegex variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 142
  },
  {
    "id": "9551f569c8a3f2c94720626cf505650f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d39c156fe94b7482c3ab6\ntitle: Step 61\nchallengeType: 0\ndashedName: step-61\n--description--\nDeclare a variable cellRegex to match cell references It should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints--\nYou should declare a cellRegex variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 517,
    "chunk_index": 1,
    "total_chunks": 142
  },
  {
    "id": "b3a80c8d74621ee0341466277c69c7f0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d39c156fe94b7482c3ab6\ntitle: Step 61\nchallengeType: 0\ndashedName: step-61\n--description--\nDeclare a variable cellRegex to match cell references It should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints--\nYou should declare a cellRegex variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 530,
    "chunk_index": 2,
    "total_chunks": 142
  },
  {
    "id": "820ad0bbcb14d994648ad9bb634ca6cf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d39c156fe94b7482c3ab6\ntitle: Step 61\nchallengeType: 0\ndashedName: step-61\n--description--\nDeclare a variable cellRegex to match cell references It should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints--\nYou should declare a cellRegex variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 597,
    "chunk_index": 3,
    "total_chunks": 142
  },
  {
    "id": "6bbb8279e4cadbe2b0106b7b928f79e7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d39c156fe94b7482c3ab6\ntitle: Step 61\nchallengeType: 0\ndashedName: step-61\n--description--\nDeclare a variable cellRegex to match cell references It should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints--\nYou should declare a cellRegex variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 631,
    "chunk_index": 4,
    "total_chunks": 142
  },
  {
    "id": "938f732cfa789f10a1d334d858be0416",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d39c156fe94b7482c3ab6\ntitle: Step 61\nchallengeType: 0\ndashedName: step-61\n--description--\nDeclare a variable cellRegex to match cell references It should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints--\nYou should declare a cellRegex variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 633,
    "chunk_index": 5,
    "total_chunks": 142
  },
  {
    "id": "22fdd9302493e2313fe69ed2146c0370",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d39c156fe94b7482c3ab6\ntitle: Step 61\nchallengeType: 0\ndashedName: step-61\n--description--\nDeclare a variable cellRegex to match cell references It should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints--\nYou should declare a cellRegex variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/);\nYou should use const to declare your cellRegex variable",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 656,
    "chunk_index": 6,
    "total_chunks": 142
  },
  {
    "id": "dfd3874f591e231d49e824c338160928",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "challengeType: 0 dashedName: step-61 --description-- Declare a variable cellRegex to match cell references It should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 631,
    "chunk_index": 7,
    "total_chunks": 142
  },
  {
    "id": "49e6c03370c591498444fcd551c456f6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "0 dashedName: step-61 --description-- Declare a variable cellRegex to match cell references It should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 690,
    "chunk_index": 8,
    "total_chunks": 142
  },
  {
    "id": "e0ef533645cc7ee3da593aff2cd219b8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "dashedName: step-61 --description-- Declare a variable cellRegex to match cell references It should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 711,
    "chunk_index": 9,
    "total_chunks": 142
  },
  {
    "id": "51c64f38685798330e81050498dbf131",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "dashedName: step-61 --description-- Declare a variable cellRegex to match cell references It should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 714,
    "chunk_index": 10,
    "total_chunks": 142
  },
  {
    "id": "09be637ee642c10600b76f38e5c80763",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "dashedName: step-61 --description-- Declare a variable cellRegex to match cell references It should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 732,
    "chunk_index": 11,
    "total_chunks": 142
  },
  {
    "id": "b1912a41914010a8dc5322cd5a58bb9f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "dashedName: step-61 --description-- Declare a variable cellRegex to match cell references It should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 737,
    "chunk_index": 12,
    "total_chunks": 142
  },
  {
    "id": "ea989384561296c3c46acc7b100d7efc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "dashedName: step-61 --description-- Declare a variable cellRegex to match cell references It should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 741,
    "chunk_index": 13,
    "total_chunks": 142
  },
  {
    "id": "195f21d354b7427470e9017dde2da543",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "dashedName: step-61 --description-- Declare a variable cellRegex to match cell references It should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 775,
    "chunk_index": 14,
    "total_chunks": 142
  },
  {
    "id": "726d54de1f74b26a922ed8d115f8216e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "dashedName: step-61 --description-- Declare a variable cellRegex to match cell references It should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 796,
    "chunk_index": 15,
    "total_chunks": 142
  },
  {
    "id": "16a2962f19d4c1b913a1618e34557e1a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "dashedName: step-61 --description-- Declare a variable cellRegex to match cell references It should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 806,
    "chunk_index": 16,
    "total_chunks": 142
  },
  {
    "id": "ad40ea41bae2ca36caae84de56e53b88",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "dashedName: step-61 --description-- Declare a variable cellRegex to match cell references It should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 871,
    "chunk_index": 17,
    "total_chunks": 142
  },
  {
    "id": "979903d3149554ccfb7e4d2ef68b7831",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "dashedName: step-61 --description-- Declare a variable cellRegex to match cell references It should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 933,
    "chunk_index": 18,
    "total_chunks": 142
  },
  {
    "id": "f45cba44d9f51bef1a5b930529285c3e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "dashedName: step-61 --description-- Declare a variable cellRegex to match cell references It should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 1014,
    "chunk_index": 19,
    "total_chunks": 142
  },
  {
    "id": "563ff18e5d3b4a6e384ec65626200b2d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "dashedName: step-61 --description-- Declare a variable cellRegex to match cell references It should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 1034,
    "chunk_index": 20,
    "total_chunks": 142
  },
  {
    "id": "3c4cc005659e9ac71eb69fe5aeb1d671",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "dashedName: step-61 --description-- Declare a variable cellRegex to match cell references It should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 1047,
    "chunk_index": 21,
    "total_chunks": 142
  },
  {
    "id": "758eb899602b6e0efc36beb513f2d8cf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "dashedName: step-61 --description-- Declare a variable cellRegex to match cell references It should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 1114,
    "chunk_index": 22,
    "total_chunks": 142
  },
  {
    "id": "ecbc11dc199504912e7e8167e79a976f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "dashedName: step-61 --description-- Declare a variable cellRegex to match cell references It should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 1148,
    "chunk_index": 23,
    "total_chunks": 142
  },
  {
    "id": "83a8d9f604ff2859af84ff571b7070ea",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "dashedName: step-61 --description-- Declare a variable cellRegex to match cell references It should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/);\nYou should assign a regular expression to your cellRegex variable",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 1168,
    "chunk_index": 24,
    "total_chunks": 142
  },
  {
    "id": "e0c8b282661dacf4be3aeee757058080",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "references It should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 1153,
    "chunk_index": 25,
    "total_chunks": 142
  },
  {
    "id": "ab7989391386993ec98870288151bb3c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "It should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 1215,
    "chunk_index": 26,
    "total_chunks": 142
  },
  {
    "id": "6ace4df20abb8488ec3a134412a3c88e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 1235,
    "chunk_index": 27,
    "total_chunks": 142
  },
  {
    "id": "636abd85e49e159163628e88c42dda86",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 1238,
    "chunk_index": 28,
    "total_chunks": 142
  },
  {
    "id": "409d0709e63cec88d5804b97adb8518b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 1256,
    "chunk_index": 29,
    "total_chunks": 142
  },
  {
    "id": "26a419439f59ba30f621aa2fe517b52d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 1261,
    "chunk_index": 30,
    "total_chunks": 142
  },
  {
    "id": "e4d8f1dbebe1dc3840091ecbb27851f8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 1265,
    "chunk_index": 31,
    "total_chunks": 142
  },
  {
    "id": "3952a564c98a81fcc4a4ff098acbab92",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 1299,
    "chunk_index": 32,
    "total_chunks": 142
  },
  {
    "id": "8f156f5cfd6ba118d26e6c5a347819c8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 1320,
    "chunk_index": 33,
    "total_chunks": 142
  },
  {
    "id": "af2e7df0d04c07629dfb647268d6be0e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 1330,
    "chunk_index": 34,
    "total_chunks": 142
  },
  {
    "id": "b7303275ac39dd19b034de344581dc69",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 1395,
    "chunk_index": 35,
    "total_chunks": 142
  },
  {
    "id": "7ef82626cdb65e3b0c3bb29e11eca502",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 1457,
    "chunk_index": 36,
    "total_chunks": 142
  },
  {
    "id": "845f8a06a209cdc91ef80523c33517fd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 1538,
    "chunk_index": 37,
    "total_chunks": 142
  },
  {
    "id": "fcca1d198782abb8edd481d816cc1e45",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 1558,
    "chunk_index": 38,
    "total_chunks": 142
  },
  {
    "id": "c01c1799604ba19614aafb7a0b1be62e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 1571,
    "chunk_index": 39,
    "total_chunks": 142
  },
  {
    "id": "d4c2225c5c142c79c7ccf4431211fca4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 1638,
    "chunk_index": 40,
    "total_chunks": 142
  },
  {
    "id": "bc7694863a71f8b5ff2478b716054442",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 1672,
    "chunk_index": 41,
    "total_chunks": 142
  },
  {
    "id": "b71957d395b806076a4c6977c71cc379",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should match a letter from A to J, followed by a digit from 1 to 9, and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//);\nYour regular expression should use a character class to match the characters from A to J",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 1702,
    "chunk_index": 42,
    "total_chunks": 142
  },
  {
    "id": "b4c885228bfb0b42c1a455edc8b59883",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "and an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 1685,
    "chunk_index": 43,
    "total_chunks": 142
  },
  {
    "id": "a3ab4dbd66ca7140055d44764763525d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "an optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 1747,
    "chunk_index": 44,
    "total_chunks": 142
  },
  {
    "id": "1b313bfa6dff03bed767653d1cac56ca",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 1767,
    "chunk_index": 45,
    "total_chunks": 142
  },
  {
    "id": "eab05cc0515fe14037d4f4e52e85428c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 1770,
    "chunk_index": 46,
    "total_chunks": 142
  },
  {
    "id": "99d1d2cb54a3430e368129e496d1c14b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 1788,
    "chunk_index": 47,
    "total_chunks": 142
  },
  {
    "id": "9f75917a4884311f6e718cf133680871",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 1793,
    "chunk_index": 48,
    "total_chunks": 142
  },
  {
    "id": "f3e9a5367450c99d9772dde15777abfc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 1797,
    "chunk_index": 49,
    "total_chunks": 142
  },
  {
    "id": "11031c5936220ce5f1638a5de20d885f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 1831,
    "chunk_index": 50,
    "total_chunks": 142
  },
  {
    "id": "d2f36ce49167ba42a8b8a424bb41e378",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 1852,
    "chunk_index": 51,
    "total_chunks": 142
  },
  {
    "id": "68b62a3cd637f407db3b3460a9433f3f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 1862,
    "chunk_index": 52,
    "total_chunks": 142
  },
  {
    "id": "f0ef67c6961ab7ef4fe05af7d4a0c399",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 1927,
    "chunk_index": 53,
    "total_chunks": 142
  },
  {
    "id": "46e7f9dfdcdf723e76da58e69c9cc8cb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 1989,
    "chunk_index": 54,
    "total_chunks": 142
  },
  {
    "id": "c2e966be3db75d74f0d838e5d3e41a1b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2070,
    "chunk_index": 55,
    "total_chunks": 142
  },
  {
    "id": "57242bc07f97c21d475c1a1fae5429e5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2090,
    "chunk_index": 56,
    "total_chunks": 142
  },
  {
    "id": "e37a52477d2729acbf983971a1176fcb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2103,
    "chunk_index": 57,
    "total_chunks": 142
  },
  {
    "id": "3233313aadd2ade63e60b892340cf090",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2170,
    "chunk_index": 58,
    "total_chunks": 142
  },
  {
    "id": "e39adf34ff0c3b7e3a3c7818224e4bf8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2204,
    "chunk_index": 59,
    "total_chunks": 142
  },
  {
    "id": "24e09dd3374ff74d267ec0fba20ecafd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "optional digit from 0 to 9 Make the regular expression case-insensitive and global --hints-- You should declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/);\nYour regular expression should use a character class to match the digits from 1 to 9",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2241,
    "chunk_index": 60,
    "total_chunks": 142
  },
  {
    "id": "185a95784c8ce9fbd460f68900acfba0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "declare a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2222,
    "chunk_index": 61,
    "total_chunks": 142
  },
  {
    "id": "8c3ceddd1f0c047b526ab75d1ed63db0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2284,
    "chunk_index": 62,
    "total_chunks": 142
  },
  {
    "id": "dabbc6f13d23c5e04b3517127947dd50",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2304,
    "chunk_index": 63,
    "total_chunks": 142
  },
  {
    "id": "367a8619a221c9ace82180f22188fb6d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2307,
    "chunk_index": 64,
    "total_chunks": 142
  },
  {
    "id": "47be58d7e215664eb2ca8f11ba8d6c66",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2325,
    "chunk_index": 65,
    "total_chunks": 142
  },
  {
    "id": "7db7b9b8151a20a3f8602d03614cb79b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2330,
    "chunk_index": 66,
    "total_chunks": 142
  },
  {
    "id": "d1acb281c51c581f9dff3607e2916643",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2334,
    "chunk_index": 67,
    "total_chunks": 142
  },
  {
    "id": "0bd0843930ae437c5a2fbe27ac891102",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2368,
    "chunk_index": 68,
    "total_chunks": 142
  },
  {
    "id": "05c2d42a15096065a01d358d0c7489b5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2389,
    "chunk_index": 69,
    "total_chunks": 142
  },
  {
    "id": "3f2edac91df5b1e04fdd3aa6a60a8581",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2399,
    "chunk_index": 70,
    "total_chunks": 142
  },
  {
    "id": "02aaf81b3eeed91c09a2e12cda8eb77f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2464,
    "chunk_index": 71,
    "total_chunks": 142
  },
  {
    "id": "7b4d8e16ca55cf5a19365cf53330c3bb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2526,
    "chunk_index": 72,
    "total_chunks": 142
  },
  {
    "id": "eebac878f2406f6286ea34e6c8169c84",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2607,
    "chunk_index": 73,
    "total_chunks": 142
  },
  {
    "id": "996670e3b1cd3d5f1af5931facf3b5c4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2627,
    "chunk_index": 74,
    "total_chunks": 142
  },
  {
    "id": "2dcb5030f036af44ef1154df456e6ced",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2640,
    "chunk_index": 75,
    "total_chunks": 142
  },
  {
    "id": "62b17ae1e7af5aae8dfa86ebedb56f67",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2707,
    "chunk_index": 76,
    "total_chunks": 142
  },
  {
    "id": "888f4403e5635c52acd43800246b4945",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2741,
    "chunk_index": 77,
    "total_chunks": 142
  },
  {
    "id": "f74322500fa8317a864534419dfb82b9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "cellRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/);\nYour regular expression should use a character class to match the digits from 0 to 9",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2784,
    "chunk_index": 78,
    "total_chunks": 142
  },
  {
    "id": "9da6c6c7fc4a871a9a7b903009c9f66d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:var|let|const)\\s+cellRegex/); You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2469,
    "chunk_index": 79,
    "total_chunks": 142
  },
  {
    "id": "7d18d8152b2463f1f4e6f76f3f1e9c7e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "You should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2302,
    "chunk_index": 80,
    "total_chunks": 142
  },
  {
    "id": "bc58b1e44c81b8bc50645152fc941629",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2322,
    "chunk_index": 81,
    "total_chunks": 142
  },
  {
    "id": "b485c9793d0fcd89236f11dcd19d666d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2325,
    "chunk_index": 82,
    "total_chunks": 142
  },
  {
    "id": "9ab0fe84c6acfe4c6950422c5b2d28d7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2343,
    "chunk_index": 83,
    "total_chunks": 142
  },
  {
    "id": "7d4f2d4bc1921de66f92601105b27df1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2348,
    "chunk_index": 84,
    "total_chunks": 142
  },
  {
    "id": "be6cc17c517201fa9613c3adf1ba4607",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2352,
    "chunk_index": 85,
    "total_chunks": 142
  },
  {
    "id": "7c628e3ddcb9e3840cd436e2238c73a2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2386,
    "chunk_index": 86,
    "total_chunks": 142
  },
  {
    "id": "b5fef1a9461011dcc1d91802617298ff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2407,
    "chunk_index": 87,
    "total_chunks": 142
  },
  {
    "id": "ccb2f584c260b9bae2041067ea7d9963",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2417,
    "chunk_index": 88,
    "total_chunks": 142
  },
  {
    "id": "fb69854e5f0bc2c003d88e8d5c9acc3e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2482,
    "chunk_index": 89,
    "total_chunks": 142
  },
  {
    "id": "62c8e1a2dd0c2ba1f883dff0613faa10",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2544,
    "chunk_index": 90,
    "total_chunks": 142
  },
  {
    "id": "bff1737d7d68502396219b50a69974f4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2625,
    "chunk_index": 91,
    "total_chunks": 142
  },
  {
    "id": "70f53c7c1800c3dd10c94daa870b9ae7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2645,
    "chunk_index": 92,
    "total_chunks": 142
  },
  {
    "id": "837fe4cd1a7ee618be973d4e3d8d3ab4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2658,
    "chunk_index": 93,
    "total_chunks": 142
  },
  {
    "id": "bf5854fbf639e07bec1ede6a8f9508f5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2725,
    "chunk_index": 94,
    "total_chunks": 142
  },
  {
    "id": "ae43c252c1f10adadbc748e8dd3c70c1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2759,
    "chunk_index": 95,
    "total_chunks": 142
  },
  {
    "id": "53a2d4e84c5acac91e1281044a369d95",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should use const to declare your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/);\nYour third character class should be optional",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2797,
    "chunk_index": 96,
    "total_chunks": 142
  },
  {
    "id": "7b1033ca138130144e43f999c43eaf6c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2792,
    "chunk_index": 97,
    "total_chunks": 142
  },
  {
    "id": "589d9b90fd7a70f030e3f23c822d0037",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2853,
    "chunk_index": 98,
    "total_chunks": 142
  },
  {
    "id": "9a2c1d032d12dcaec0b3ae9fe0a8e967",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2870,
    "chunk_index": 99,
    "total_chunks": 142
  },
  {
    "id": "e5f0c38155e88eac4f7e91178165ae57",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2873,
    "chunk_index": 100,
    "total_chunks": 142
  },
  {
    "id": "0318d5e6b45aa0bf956514f9dd5a7c2d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2891,
    "chunk_index": 101,
    "total_chunks": 142
  },
  {
    "id": "c85a640816861b4416ea5b1699343d4a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2896,
    "chunk_index": 102,
    "total_chunks": 142
  },
  {
    "id": "bdfc6a00885e2c07697cfd1e15cf797d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2900,
    "chunk_index": 103,
    "total_chunks": 142
  },
  {
    "id": "cf25629e43fed71de18cfaa946f667a6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2934,
    "chunk_index": 104,
    "total_chunks": 142
  },
  {
    "id": "da2105cfadc3a76cc8ca2a1b37f6bdd9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2955,
    "chunk_index": 105,
    "total_chunks": 142
  },
  {
    "id": "9432f4ba962a22877cfaf4a7a87e0a1e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2965,
    "chunk_index": 106,
    "total_chunks": 142
  },
  {
    "id": "417b32270ee1f3aa3ecd86070c8af8b4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 3030,
    "chunk_index": 107,
    "total_chunks": 142
  },
  {
    "id": "2d3b862a9e560c7c1200828e440cd7c1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 3092,
    "chunk_index": 108,
    "total_chunks": 142
  },
  {
    "id": "5a7fe930a79bdcd42dc0203e6545e80d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 3173,
    "chunk_index": 109,
    "total_chunks": 142
  },
  {
    "id": "88707afff9bb7268321ee162e3bdfb47",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 3193,
    "chunk_index": 110,
    "total_chunks": 142
  },
  {
    "id": "2e17f1493f415a126fbb942a9fed5c28",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 3206,
    "chunk_index": 111,
    "total_chunks": 142
  },
  {
    "id": "629e0e018a939797e8e88a01c36aa190",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 3273,
    "chunk_index": 112,
    "total_chunks": 142
  },
  {
    "id": "ef659eb57911c97223e04f20852cd74f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 3307,
    "chunk_index": 113,
    "total_chunks": 142
  },
  {
    "id": "620150d242c96cbb544bc03c78208da5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 3337,
    "chunk_index": 114,
    "total_chunks": 142
  },
  {
    "id": "eb0e916e5304fe4d9c8d122487d00047",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex/); You should assign a regular expression to your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\/);\nYour regular expression should be case-insensitive and global",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 3349,
    "chunk_index": 115,
    "total_chunks": 142
  },
  {
    "id": "b705e9e60f4c06bd3e6d78dd4c377799",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\/); Your regular expression should be case-insensitive and globaljs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2817,
    "chunk_index": 116,
    "total_chunks": 142
  },
  {
    "id": "6d1264091c6232930f304e819f0e1b30",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "cellRegex variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\/); Your regular expression should be case-insensitive and globaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2879,
    "chunk_index": 117,
    "total_chunks": 142
  },
  {
    "id": "3fd0d4fc09fff83d875452f662b798f1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\/); Your regular expression should be case-insensitive and globaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2898,
    "chunk_index": 118,
    "total_chunks": 142
  },
  {
    "id": "8f8c3d5cc1309885b88f5dedc5fe713c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\/); Your regular expression should be case-insensitive and globaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2901,
    "chunk_index": 119,
    "total_chunks": 142
  },
  {
    "id": "34b026e0a388e23e247c130624fcf6b1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\/); Your regular expression should be case-insensitive and globaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2919,
    "chunk_index": 120,
    "total_chunks": 142
  },
  {
    "id": "9e33af64ca37de0f4148f0207962451e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\/); Your regular expression should be case-insensitive and globaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2924,
    "chunk_index": 121,
    "total_chunks": 142
  },
  {
    "id": "ac159d29506e4a5b892e0ac99a02a12d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\/); Your regular expression should be case-insensitive and globaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2928,
    "chunk_index": 122,
    "total_chunks": 142
  },
  {
    "id": "090694a4e34773b5ba662e4efdb43140",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\/); Your regular expression should be case-insensitive and globaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2962,
    "chunk_index": 123,
    "total_chunks": 142
  },
  {
    "id": "f79414d8f0c99e37cd2807b9c968a044",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\/); Your regular expression should be case-insensitive and globaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2983,
    "chunk_index": 124,
    "total_chunks": 142
  },
  {
    "id": "41a08462a2b579be1a6c434c746f7cd4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\/); Your regular expression should be case-insensitive and globaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2993,
    "chunk_index": 125,
    "total_chunks": 142
  },
  {
    "id": "809b784162e4f424746f57afb1542f80",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\/); Your regular expression should be case-insensitive and globaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 3058,
    "chunk_index": 126,
    "total_chunks": 142
  },
  {
    "id": "8ea8fa1aa254e2666c818d246bc9cd33",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\/); Your regular expression should be case-insensitive and globaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 3120,
    "chunk_index": 127,
    "total_chunks": 142
  },
  {
    "id": "dc314624895fe53d46e0737a2e75f709",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\/); Your regular expression should be case-insensitive and globaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 3201,
    "chunk_index": 128,
    "total_chunks": 142
  },
  {
    "id": "e2bc7e60333454c2fa7a2a279cd09977",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\/); Your regular expression should be case-insensitive and globaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 3221,
    "chunk_index": 129,
    "total_chunks": 142
  },
  {
    "id": "aab5bcc425f09fa068083af48db0fde4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\/); Your regular expression should be case-insensitive and globaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 3234,
    "chunk_index": 130,
    "total_chunks": 142
  },
  {
    "id": "fa00b5876aeaea5e6d3e89a215187b1a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\/); Your regular expression should be case-insensitive and globaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 3301,
    "chunk_index": 131,
    "total_chunks": 142
  },
  {
    "id": "4b58b91aadfa04bc79c8462010f520b3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\/); Your regular expression should be case-insensitive and globaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 3335,
    "chunk_index": 132,
    "total_chunks": 142
  },
  {
    "id": "7bbcae9c8cd8abf3a786406e643420a9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\/); Your regular expression should be case-insensitive and globaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 3365,
    "chunk_index": 133,
    "total_chunks": 142
  },
  {
    "id": "7663926fe26d959ff71b2dc12feba434",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\//); Your regular expression should use a character class to match the characters from A to Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\/); Your regular expression should be case-insensitive and globaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 3426,
    "chunk_index": 134,
    "total_chunks": 142
  },
  {
    "id": "8e5b6d61c9dd2e8a5f6372d5a1bd9086",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]/); Your regular expression should use a character class to match the digits from 1 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]/); Your regular expression should use a character class to match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\/); Your regular expression should be case-insensitive and globaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 2913,
    "chunk_index": 135,
    "total_chunks": 142
  },
  {
    "id": "bb44cb593c5e9ed11462e9626fb9a1f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "match the digits from 0 to 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]/); Your third character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\/); Your regular expression should be case-insensitive and globaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 1821,
    "chunk_index": 136,
    "total_chunks": 142
  },
  {
    "id": "5ecfec7b1035baa2ad14f2e6269ac6a6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\/); Your regular expression should be case-insensitive and globaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength;\nconst median = nums => {\nconst sorted = nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 1265,
    "chunk_index": 137,
    "total_chunks": 142
  },
  {
    "id": "92ba2a334d169eb43326035db73a6aec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "and globaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 702,
    "chunk_index": 138,
    "total_chunks": 142
  },
  {
    "id": "30d10076ae6042e3736a1285618027d7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "and globaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()sort((a, b) => a - b);\nconst length = sorted",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 717,
    "chunk_index": 139,
    "total_chunks": 142
  },
  {
    "id": "0489445074101ca4daddcc517a427395",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()sort((a, b) => a - b); const length = sortedlength;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\n--fcc-editable-region--\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\n}\n--fcc-editable-region--\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 140,
    "total_chunks": 142
  },
  {
    "id": "f7fb2c070a7b471b47a9bbd6cc336efa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "elemValue = num => character => idToText(character + num); const addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num)); const rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2))); } --fcc-editable-region-- window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); lettersforEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12897,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d39c156fe94b7482c3ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 256,
    "chunk_index": 141,
    "total_chunks": 142
  },
  {
    "id": "a8ad0bb47704eca37e785c18afbde1cb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d467c6994f4ce0dc416a4\ntitle: Step 90\nchallengeType: 0\ndashedName: step-90\n--description--\nUse the ternary operator to turn your hasOwnProperty() call into the condition If the object has the property, return the result of calling apply with fn and args as arguments Otherwise, return match --hints--\nYour callback function should use ternary syntax js\nassert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 114
  },
  {
    "id": "715455656b3076e42af0a6fe2f9f5ea2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "90 challengeType: 0 dashedName: step-90 --description-- Use the ternary operator to turn your hasOwnProperty() call into the condition If the object has the property, return the result of calling apply with fn and args as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/);\nIf the ternary condition is true, your callback function should return the result of calling apply() js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 114
  },
  {
    "id": "78dcd4a7055a8b583b90139479d02c5e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "If the object has the property, return the result of calling apply with fn and args as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 2,
    "total_chunks": 114
  },
  {
    "id": "e0ee578bbc0c8eaff65dea724f86c525",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the object has the property, return the result of calling apply with fn and args as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 519,
    "chunk_index": 3,
    "total_chunks": 114
  },
  {
    "id": "33b3a0f75623706ef0bbb92495aa55ef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the object has the property, return the result of calling apply with fn and args as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 535,
    "chunk_index": 4,
    "total_chunks": 114
  },
  {
    "id": "6f7b6c7e57bddef8c6706061aa2615b9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the object has the property, return the result of calling apply with fn and args as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 539,
    "chunk_index": 5,
    "total_chunks": 114
  },
  {
    "id": "af59017c3217ad9e1d84618ef4536a37",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the object has the property, return the result of calling apply with fn and args as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 540,
    "chunk_index": 6,
    "total_chunks": 114
  },
  {
    "id": "5db418d00559a4e9a666d358aa705490",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the object has the property, return the result of calling apply with fn and args as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 548,
    "chunk_index": 7,
    "total_chunks": 114
  },
  {
    "id": "4f46ed763d6813660bd11122378ffe85",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the object has the property, return the result of calling apply with fn and args as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 558,
    "chunk_index": 8,
    "total_chunks": 114
  },
  {
    "id": "e144991a87d68924a81bffbe567ed1ac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the object has the property, return the result of calling apply with fn and args as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 562,
    "chunk_index": 9,
    "total_chunks": 114
  },
  {
    "id": "d03039a1c1512f147a5ec49d9ed25776",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the object has the property, return the result of calling apply with fn and args as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 563,
    "chunk_index": 10,
    "total_chunks": 114
  },
  {
    "id": "6c45dd28b9f9826273d49f55c8cc08c3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the object has the property, return the result of calling apply with fn and args as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 574,
    "chunk_index": 11,
    "total_chunks": 114
  },
  {
    "id": "89dbf0ec50bb9d3fd4f9177b93839496",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the object has the property, return the result of calling apply with fn and args as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 608,
    "chunk_index": 12,
    "total_chunks": 114
  },
  {
    "id": "0273ac16cfb27e59c52e83cb769d4820",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the object has the property, return the result of calling apply with fn and args as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 643,
    "chunk_index": 13,
    "total_chunks": 114
  },
  {
    "id": "1498e99b2aede17e6cbfc7001db37b40",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the object has the property, return the result of calling apply with fn and args as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 651,
    "chunk_index": 14,
    "total_chunks": 114
  },
  {
    "id": "c9d3ddf72fb3ec8301ceb7b1de3a9c50",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "object has the property, return the result of calling apply with fn and args as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 651,
    "chunk_index": 15,
    "total_chunks": 114
  },
  {
    "id": "f299bdffe6d87ea96b9439f8661d627b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "object has the property, return the result of calling apply with fn and args as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 662,
    "chunk_index": 16,
    "total_chunks": 114
  },
  {
    "id": "4885711a2175b3d820f1168689e7547a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "object has the property, return the result of calling apply with fn and args as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 675,
    "chunk_index": 17,
    "total_chunks": 114
  },
  {
    "id": "580b82c6708ce9ddec2b935117ae09ed",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "object has the property, return the result of calling apply with fn and args as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 694,
    "chunk_index": 18,
    "total_chunks": 114
  },
  {
    "id": "8b1ce4797fa6f5756b47103770cc4b2d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "object has the property, return the result of calling apply with fn and args as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 708,
    "chunk_index": 19,
    "total_chunks": 114
  },
  {
    "id": "e0c1ae8b06fa4071eaea306615a0c2e9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "object has the property, return the result of calling apply with fn and args as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 720,
    "chunk_index": 20,
    "total_chunks": 114
  },
  {
    "id": "4631bb7fc4644778adcc19b9da8085e9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "object has the property, return the result of calling apply with fn and args as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 760,
    "chunk_index": 21,
    "total_chunks": 114
  },
  {
    "id": "fd08e0a3c4dc698c56dd22f5667b7bc2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "object has the property, return the result of calling apply with fn and args as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 791,
    "chunk_index": 22,
    "total_chunks": 114
  },
  {
    "id": "06266cd27dd049889acb32c6056949aa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "object has the property, return the result of calling apply with fn and args as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 799,
    "chunk_index": 23,
    "total_chunks": 114
  },
  {
    "id": "02254adf34908f7cfeb6cb82dd9e5c07",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "object has the property, return the result of calling apply with fn and args as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 840,
    "chunk_index": 24,
    "total_chunks": 114
  },
  {
    "id": "c1c1bedf5899b65ad5e3e12cb39f2f9c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "object has the property, return the result of calling apply with fn and args as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 848,
    "chunk_index": 25,
    "total_chunks": 114
  },
  {
    "id": "18e10d4d8a76418ff5194374524e3f35",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "object has the property, return the result of calling apply with fn and args as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 859,
    "chunk_index": 26,
    "total_chunks": 114
  },
  {
    "id": "3db352801b4d65a62c3512e52010b312",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "object has the property, return the result of calling apply with fn and args as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/);\nYou should pass fn as the first argument to your apply() call",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 879,
    "chunk_index": 27,
    "total_chunks": 114
  },
  {
    "id": "b0b034253eab4071da122528c9d9a731",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "and args as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 869,
    "chunk_index": 28,
    "total_chunks": 114
  },
  {
    "id": "69159718ab2658577195e8e1ec45fb7f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "args as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 881,
    "chunk_index": 29,
    "total_chunks": 114
  },
  {
    "id": "b4fa03bb8c6722a0298528934a2ff9d9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 925,
    "chunk_index": 30,
    "total_chunks": 114
  },
  {
    "id": "84fe75a3e8e0e9d91bcf58aea5176109",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 941,
    "chunk_index": 31,
    "total_chunks": 114
  },
  {
    "id": "78909176cc02b74b8f6245e8d775417b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 945,
    "chunk_index": 32,
    "total_chunks": 114
  },
  {
    "id": "fac07a6968274b27fc8592a057f27f38",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 946,
    "chunk_index": 33,
    "total_chunks": 114
  },
  {
    "id": "c91335b66c74abfbfac57712ea91fa9d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 954,
    "chunk_index": 34,
    "total_chunks": 114
  },
  {
    "id": "bfeb64c4ef2618b169dc900ed60d638e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 964,
    "chunk_index": 35,
    "total_chunks": 114
  },
  {
    "id": "ea154f90868908e86b42a0ebf024fdd5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 968,
    "chunk_index": 36,
    "total_chunks": 114
  },
  {
    "id": "b597c41ff76df101dbbc89adb12e2a1b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 969,
    "chunk_index": 37,
    "total_chunks": 114
  },
  {
    "id": "a177f0beb72753f2cf01e875c861ab83",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 980,
    "chunk_index": 38,
    "total_chunks": 114
  },
  {
    "id": "442f3b4576fe20c045db600bc3d3a4fd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1014,
    "chunk_index": 39,
    "total_chunks": 114
  },
  {
    "id": "c2ee486a9d2b609d6781793bd1b4880b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1047,
    "chunk_index": 40,
    "total_chunks": 114
  },
  {
    "id": "5cefc4ed66c24ad8628ed66cfd78134d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "as arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1055,
    "chunk_index": 41,
    "total_chunks": 114
  },
  {
    "id": "cf26c676f44aa99192c2ecc9af4300c5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1055,
    "chunk_index": 42,
    "total_chunks": 114
  },
  {
    "id": "07c9857c1f999938cc854a2a2d0a1c22",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1064,
    "chunk_index": 43,
    "total_chunks": 114
  },
  {
    "id": "4e5f5b18220b16bf368a3f3e1fe717e0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1077,
    "chunk_index": 44,
    "total_chunks": 114
  },
  {
    "id": "569d4fa420fbb266942acb97ba744abf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1096,
    "chunk_index": 45,
    "total_chunks": 114
  },
  {
    "id": "4a2261721e07f5fe9ee1113811f2ad85",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1110,
    "chunk_index": 46,
    "total_chunks": 114
  },
  {
    "id": "f625bc5cae69818dd8f048c0a20f21e4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1122,
    "chunk_index": 47,
    "total_chunks": 114
  },
  {
    "id": "dc4b72552c06f9134bc8597086c10a4b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1162,
    "chunk_index": 48,
    "total_chunks": 114
  },
  {
    "id": "c90bc78f1c204bbad41f0e077c26d623",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1193,
    "chunk_index": 49,
    "total_chunks": 114
  },
  {
    "id": "ae1670e2cb2f674da1f44caf3b6de1ae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1201,
    "chunk_index": 50,
    "total_chunks": 114
  },
  {
    "id": "86d16867a970d7a9afb4020e3254eb25",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1242,
    "chunk_index": 51,
    "total_chunks": 114
  },
  {
    "id": "d575893fe6f130fa1fd74cd0fb3ac432",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1250,
    "chunk_index": 52,
    "total_chunks": 114
  },
  {
    "id": "07d9ba56659659445f8ef3588b71c723",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1261,
    "chunk_index": 53,
    "total_chunks": 114
  },
  {
    "id": "05055085c2ed4d06404faf2581cd5b42",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "arguments Otherwise, return match --hints-- Your callback function should use ternary syntax js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/);\nYou should pass args as the second argument to your apply() call",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1285,
    "chunk_index": 54,
    "total_chunks": 114
  },
  {
    "id": "db5ae16a1a8b0db7fd038f24cfd9e68e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1272,
    "chunk_index": 55,
    "total_chunks": 114
  },
  {
    "id": "ebf0868c238347f73e39b38767f26eef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1284,
    "chunk_index": 56,
    "total_chunks": 114
  },
  {
    "id": "5e9efc759f37bf11948644a876ea1a72",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1328,
    "chunk_index": 57,
    "total_chunks": 114
  },
  {
    "id": "e9fac27aa1fc85de046d2ddb1895cc63",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1344,
    "chunk_index": 58,
    "total_chunks": 114
  },
  {
    "id": "4ada0281366d01217451fb7ecca05bc0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1348,
    "chunk_index": 59,
    "total_chunks": 114
  },
  {
    "id": "7ec083668c45dec0e488902965cf5ad2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1349,
    "chunk_index": 60,
    "total_chunks": 114
  },
  {
    "id": "00c29a73163795fb92d209756dc335c7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1357,
    "chunk_index": 61,
    "total_chunks": 114
  },
  {
    "id": "6c8dd7be88f99e432131d64f880df59b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1367,
    "chunk_index": 62,
    "total_chunks": 114
  },
  {
    "id": "7020fa1acf399350e9f9d853c5083c9c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1371,
    "chunk_index": 63,
    "total_chunks": 114
  },
  {
    "id": "fa9ebc821899edf0d578b5f620383536",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1372,
    "chunk_index": 64,
    "total_chunks": 114
  },
  {
    "id": "280e2c8e36cc86260e8d9f11e7894dd0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1383,
    "chunk_index": 65,
    "total_chunks": 114
  },
  {
    "id": "e51aabc61a714e3c7da7d614f0fd7f51",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1417,
    "chunk_index": 66,
    "total_chunks": 114
  },
  {
    "id": "6db4fc57cd708421e4d5b94b1108fb80",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1450,
    "chunk_index": 67,
    "total_chunks": 114
  },
  {
    "id": "20a2f23ce52995200208a6c41f659d2b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1458,
    "chunk_index": 68,
    "total_chunks": 114
  },
  {
    "id": "08804fa9afa2e19011f91fba613c506d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1456,
    "chunk_index": 69,
    "total_chunks": 114
  },
  {
    "id": "912f5d9875f8648f0c5f7576fe2a1299",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1465,
    "chunk_index": 70,
    "total_chunks": 114
  },
  {
    "id": "ace27745fffd4b74f9502c67be0c5743",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1478,
    "chunk_index": 71,
    "total_chunks": 114
  },
  {
    "id": "7177640a4e31894746980f91dbf6d133",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1497,
    "chunk_index": 72,
    "total_chunks": 114
  },
  {
    "id": "6d812edef308d722a145d7f9c42b5f56",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1511,
    "chunk_index": 73,
    "total_chunks": 114
  },
  {
    "id": "1a5ce0bf6118e3028f1741a56784661c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1523,
    "chunk_index": 74,
    "total_chunks": 114
  },
  {
    "id": "0e9fc3d63a921105c1ca99b3ea9e41a2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1563,
    "chunk_index": 75,
    "total_chunks": 114
  },
  {
    "id": "4efbf92398846d35647c373f37e56c1d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1594,
    "chunk_index": 76,
    "total_chunks": 114
  },
  {
    "id": "4a7a68b00e8ae65d24e1606b10449ef3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1602,
    "chunk_index": 77,
    "total_chunks": 114
  },
  {
    "id": "0c563a3727d297d14594a977a3d2ef6e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1643,
    "chunk_index": 78,
    "total_chunks": 114
  },
  {
    "id": "b49353c45d99d7621166d6a5ce97b423",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1651,
    "chunk_index": 79,
    "total_chunks": 114
  },
  {
    "id": "122ad12dfa7f11b00347cd44566f032a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1662,
    "chunk_index": 80,
    "total_chunks": 114
  },
  {
    "id": "bd115b35cb0b6e89ba4c047a763791cb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn\\s*,\\s*args\\s*\\)/);\nIf the ternary is false, you should return match",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1692,
    "chunk_index": 81,
    "total_chunks": 114
  },
  {
    "id": "330c54c751a80d170d9a079888e2bf38",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn\\s*,\\s*args\\s*\\)/); If the ternary is false, you should return matchjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1596,
    "chunk_index": 82,
    "total_chunks": 114
  },
  {
    "id": "4bd50961c23c2c1d8f486003ef337dfc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn\\s*,\\s*args\\s*\\)/); If the ternary is false, you should return matchjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1597,
    "chunk_index": 83,
    "total_chunks": 114
  },
  {
    "id": "395301d96234751b2059f947129ee6d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn\\s*,\\s*args\\s*\\)/); If the ternary is false, you should return matchjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1607,
    "chunk_index": 84,
    "total_chunks": 114
  },
  {
    "id": "dc9f650d6a04ccef662b721af9dd173d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn\\s*,\\s*args\\s*\\)/); If the ternary is false, you should return matchjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1623,
    "chunk_index": 85,
    "total_chunks": 114
  },
  {
    "id": "cda52ffcef243f2ff29df58a066a3868",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn\\s*,\\s*args\\s*\\)/); If the ternary is false, you should return matchjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1627,
    "chunk_index": 86,
    "total_chunks": 114
  },
  {
    "id": "2a1f92dea0fe3932c0e0b729398f2842",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn\\s*,\\s*args\\s*\\)/); If the ternary is false, you should return matchjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1628,
    "chunk_index": 87,
    "total_chunks": 114
  },
  {
    "id": "a618eb7d959f4273a2ee023235cbe6db",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn\\s*,\\s*args\\s*\\)/); If the ternary is false, you should return matchjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1636,
    "chunk_index": 88,
    "total_chunks": 114
  },
  {
    "id": "abe2748ac683f150278296a92b798f48",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn\\s*,\\s*args\\s*\\)/); If the ternary is false, you should return matchjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1646,
    "chunk_index": 89,
    "total_chunks": 114
  },
  {
    "id": "56552b6d06c9867c77355a6da66d7aa2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn\\s*,\\s*args\\s*\\)/); If the ternary is false, you should return matchjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1650,
    "chunk_index": 90,
    "total_chunks": 114
  },
  {
    "id": "534e495079d6e2dbe577939c463f64f1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn\\s*,\\s*args\\s*\\)/); If the ternary is false, you should return matchjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1651,
    "chunk_index": 91,
    "total_chunks": 114
  },
  {
    "id": "5f03ecb13fa363a8b839d68da55768f5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn\\s*,\\s*args\\s*\\)/); If the ternary is false, you should return matchjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1662,
    "chunk_index": 92,
    "total_chunks": 114
  },
  {
    "id": "f55a84fd56ed61e4efcc9cf25603f4e3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn\\s*,\\s*args\\s*\\)/); If the ternary is false, you should return matchjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1696,
    "chunk_index": 93,
    "total_chunks": 114
  },
  {
    "id": "16f7173cc63a653c9d9c1ba19e57c9d8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn\\s*,\\s*args\\s*\\)/); If the ternary is false, you should return matchjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1729,
    "chunk_index": 94,
    "total_chunks": 114
  },
  {
    "id": "4926f3bcd8f76cfbf835d93e8829debc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn\\s*,\\s*args\\s*\\)/); If the ternary is false, you should return matchjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1737,
    "chunk_index": 95,
    "total_chunks": 114
  },
  {
    "id": "4f9672c220d09bb444f1df7999f4fee4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ", \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn\\s*,\\s*args\\s*\\)/); If the ternary is false, you should return matchjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1705,
    "chunk_index": 96,
    "total_chunks": 114
  },
  {
    "id": "e5b4e1045745576f898afb89d6b823e1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ", \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn\\s*,\\s*args\\s*\\)/); If the ternary is false, you should return matchjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1714,
    "chunk_index": 97,
    "total_chunks": 114
  },
  {
    "id": "ffba3cd103c01dd6d7dba771571f7990",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ", \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn\\s*,\\s*args\\s*\\)/); If the ternary is false, you should return matchjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1727,
    "chunk_index": 98,
    "total_chunks": 114
  },
  {
    "id": "3840edcff26321ca2b7d6001029aec9f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ", \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn\\s*,\\s*args\\s*\\)/); If the ternary is false, you should return matchjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1746,
    "chunk_index": 99,
    "total_chunks": 114
  },
  {
    "id": "68c831e805cdb5d41dc53cc927d8bb6e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ", \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn\\s*,\\s*args\\s*\\)/); If the ternary is false, you should return matchjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1760,
    "chunk_index": 100,
    "total_chunks": 114
  },
  {
    "id": "835497626145fcf52785872e2128108f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ", \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn\\s*,\\s*args\\s*\\)/); If the ternary is false, you should return matchjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1772,
    "chunk_index": 101,
    "total_chunks": 114
  },
  {
    "id": "7c9d847618a372ce3aff69b1216dcc82",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ", \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn\\s*,\\s*args\\s*\\)/); If the ternary is false, you should return matchjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1812,
    "chunk_index": 102,
    "total_chunks": 114
  },
  {
    "id": "d70ce39a3a4a26d62a9edd9db3578c5b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ", \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn\\s*,\\s*args\\s*\\)/); If the ternary is false, you should return matchjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1843,
    "chunk_index": 103,
    "total_chunks": 114
  },
  {
    "id": "a2bd20ec14d61cb794666aebfcd5cebd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ", \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn\\s*,\\s*args\\s*\\)/); If the ternary is false, you should return matchjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1851,
    "chunk_index": 104,
    "total_chunks": 114
  },
  {
    "id": "c134e7ce67b4c59a47ef50111033c293",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ", \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn\\s*,\\s*args\\s*\\)/); If the ternary is false, you should return matchjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1892,
    "chunk_index": 105,
    "total_chunks": 114
  },
  {
    "id": "03fa20e2c2afffd2c1739d548b53a39e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ", \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn\\s*,\\s*args\\s*\\)/); If the ternary is false, you should return matchjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1900,
    "chunk_index": 106,
    "total_chunks": 114
  },
  {
    "id": "167c4c2e31b38e3f9323fdb431000ae3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ", \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn\\s*,\\s*args\\s*\\)/); If the ternary is false, you should return matchjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1911,
    "chunk_index": 107,
    "total_chunks": 114
  },
  {
    "id": "5ee924f34f5948ceaf1cfc520fd95733",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ", \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\ hasOwnProperty\\(\\s*fn\\ toLowerCase\\(\\s*\\)\\s*\\)\\s*\\/); If the ternary condition is true, your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn\\s*,\\s*args\\s*\\)/); If the ternary is false, you should return matchjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*:\\s*match/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1992,
    "chunk_index": 108,
    "total_chunks": 114
  },
  {
    "id": "e375980c1b3764d412c73e9834b37587",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your callback function should return the result of calling apply() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\s*\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\s*\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(/); You should pass fn as the first argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn/); You should pass args as the second argument to your apply() calljs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn\\s*,\\s*args\\s*\\)/); If the ternary is false, you should return matchjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*:\\s*match/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n\"*\": (x, y) => x * y,\n\"/\": (x, y) => x / y,\n}\nconst infixEval = (str, regex) => str",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 1855,
    "chunk_index": 109,
    "total_chunks": 114
  },
  {
    "id": "4b395dcfd82d324adff16ed576ada9b9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "matchjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)\\s*\\\\s*apply\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*:\\s*match/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const infixToFunction = { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } const infixEval = (str, regex) => strreplace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator);\nconst highPrecedence = str => {\nconst regex = /([\\d",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 606,
    "chunk_index": 110,
    "total_chunks": 114
  },
  {
    "id": "9b745f48d1e0f89ebd19033dc9e7d6ab",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const infixToFunction = { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } const infixEval = (str, regex) => strreplace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator); const highPrecedence = str => { const regex = /([\\d]+)([*\\/])([\\d ]+)/;\nconst str2 = infixEval(str, regex);\nreturn str === str2 str : highPrecedence(str2);\n}\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\n--fcc-editable-region--\nconst applyFunction = str => {\nconst noHigh = highPrecedence(str);\nconst infix = /([\\d ]+)([+-])([\\d ]+)/;\nconst str2 = infixEval(noHigh, infix);\nconst functionCall = /([a-z0-9])(([0-9 , ]))( *()/i;\nconst toNumberList = args => args split(\",\") map(parseFloat);\nconst apply = (fn, args) => spreadsheetFunctionsfn toLowerCase();\nreturn str2 replace(functionCall, (match, fn, args) => spreadsheetFunctions hasOwnProperty(fn toLowerCase()) );\n}\n--fcc-editable-region--\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 111,
    "total_chunks": 114
  },
  {
    "id": "c320f02d0fab9b17448fba1773eb53f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "= highPrecedence(str); const infix = /([\\d ]+)([+-])([\\d ]+)/; const str2 = infixEval(noHigh, infix); const functionCall = /([a-z0-9])(([0-9 , ]))( *()/i; const toNumberList = args => args split(\",\") map(parseFloat); const apply = (fn, args) => spreadsheetFunctionsfn toLowerCase(); return str2 replace(functionCall, (match, fn, args) => spreadsheetFunctions hasOwnProperty(fn toLowerCase()) ); } --fcc-editable-region-- const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), endcharCodeAt(0)) map(code => String fromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 112,
    "total_chunks": 114
  },
  {
    "id": "ec6ef0bcbbc0bbc03a58a9fbc657df0e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "=> idToText(match toUpperCase())); } window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99) forEach(number => { createLabel(number); letters forEach(letter => { const input = document createElement(\"input\"); input type = \"text\"; input id = letter + number; input ariaLabel = letter + number; inputonchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d467c6994f4ce0dc416a4.md",
      "source_type": "git_repo"
    },
    "token_count": 178,
    "chunk_index": 113,
    "total_chunks": 114
  },
  {
    "id": "e30e230b85e41027038d4808001d959e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d46c03e7d02cecb30f021\ntitle: Step 91\nchallengeType: 0\ndashedName: step-91\n--description--\nNow you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints--\nYou should declare a functionExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 88
  },
  {
    "id": "41d75f1c190691fb34f83a96b75cda83",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d46c03e7d02cecb30f021\ntitle: Step 91\nchallengeType: 0\ndashedName: step-91\n--description--\nNow you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints--\nYou should declare a functionExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 514,
    "chunk_index": 1,
    "total_chunks": 88
  },
  {
    "id": "35a63568ce0931a504218bb0e91bd12e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d46c03e7d02cecb30f021\ntitle: Step 91\nchallengeType: 0\ndashedName: step-91\n--description--\nNow you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints--\nYou should declare a functionExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 581,
    "chunk_index": 2,
    "total_chunks": 88
  },
  {
    "id": "f8545c8d976af7037247733b377a3c85",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d46c03e7d02cecb30f021\ntitle: Step 91\nchallengeType: 0\ndashedName: step-91\n--description--\nNow you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints--\nYou should declare a functionExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 615,
    "chunk_index": 3,
    "total_chunks": 88
  },
  {
    "id": "26deed4beece04bc56e1b4df3cf11798",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d46c03e7d02cecb30f021\ntitle: Step 91\nchallengeType: 0\ndashedName: step-91\n--description--\nNow you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints--\nYou should declare a functionExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 645,
    "chunk_index": 4,
    "total_chunks": 88
  },
  {
    "id": "a4f79dd67fddbea34d6d187990369871",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d46c03e7d02cecb30f021\ntitle: Step 91\nchallengeType: 0\ndashedName: step-91\n--description--\nNow you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints--\nYou should declare a functionExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 653,
    "chunk_index": 5,
    "total_chunks": 88
  },
  {
    "id": "6e128cc79b37ce7ce021f6aa1ccf24c4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d46c03e7d02cecb30f021\ntitle: Step 91\nchallengeType: 0\ndashedName: step-91\n--description--\nNow you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints--\nYou should declare a functionExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 668,
    "chunk_index": 6,
    "total_chunks": 88
  },
  {
    "id": "2051564ad9fb0e1dcc7770f6d00094c2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d46c03e7d02cecb30f021\ntitle: Step 91\nchallengeType: 0\ndashedName: step-91\n--description--\nNow you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints--\nYou should declare a functionExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 705,
    "chunk_index": 7,
    "total_chunks": 88
  },
  {
    "id": "b6bd3a44b16e72c81072bc2c25a0281e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d46c03e7d02cecb30f021\ntitle: Step 91\nchallengeType: 0\ndashedName: step-91\n--description--\nNow you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints--\nYou should declare a functionExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 720,
    "chunk_index": 8,
    "total_chunks": 88
  },
  {
    "id": "7b683f636f111186555a929c083563e7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d46c03e7d02cecb30f021\ntitle: Step 91\nchallengeType: 0\ndashedName: step-91\n--description--\nNow you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints--\nYou should declare a functionExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 722,
    "chunk_index": 9,
    "total_chunks": 88
  },
  {
    "id": "cfec5fa3c7fc19fb70b83b747d26563f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d46c03e7d02cecb30f021\ntitle: Step 91\nchallengeType: 0\ndashedName: step-91\n--description--\nNow you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints--\nYou should declare a functionExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/);\nYou should use const to declare your functionExpanded variable",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 749,
    "chunk_index": 10,
    "total_chunks": 88
  },
  {
    "id": "af013723137956ab2e2b255f78e2eeaf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d46c03e7d02cecb30f021\ntitle: Step 91\nchallengeType: 0\ndashedName: step-91\n--description--\nNow you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints--\nYou should declare a functionExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/);\nYou should use const to declare your functionExpanded variablejs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 752,
    "chunk_index": 11,
    "total_chunks": 88
  },
  {
    "id": "df0c6f42e0603b796c0cd6e44c791c92",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d46c03e7d02cecb30f021\ntitle: Step 91\nchallengeType: 0\ndashedName: step-91\n--description--\nNow you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints--\nYou should declare a functionExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/);\nYou should use const to declare your functionExpanded variablejs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 816,
    "chunk_index": 12,
    "total_chunks": 88
  },
  {
    "id": "07f4d1304ecbd734c225309916781fba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d46c03e7d02cecb30f021\ntitle: Step 91\nchallengeType: 0\ndashedName: step-91\n--description--\nNow you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints--\nYou should declare a functionExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/);\nYou should use const to declare your functionExpanded variablejs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 837,
    "chunk_index": 13,
    "total_chunks": 88
  },
  {
    "id": "9b194892675061ea2125e4506901da39",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d46c03e7d02cecb30f021\ntitle: Step 91\nchallengeType: 0\ndashedName: step-91\n--description--\nNow you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints--\nYou should declare a functionExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/);\nYou should use const to declare your functionExpanded variablejs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 840,
    "chunk_index": 14,
    "total_chunks": 88
  },
  {
    "id": "b43ad292e989b3d356605c37f8237b26",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d46c03e7d02cecb30f021\ntitle: Step 91\nchallengeType: 0\ndashedName: step-91\n--description--\nNow you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints--\nYou should declare a functionExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/);\nYou should use const to declare your functionExpanded variablejs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 858,
    "chunk_index": 15,
    "total_chunks": 88
  },
  {
    "id": "67a27086ddbcbd6b5cbc0b5560028782",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d46c03e7d02cecb30f021\ntitle: Step 91\nchallengeType: 0\ndashedName: step-91\n--description--\nNow you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints--\nYou should declare a functionExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/);\nYou should use const to declare your functionExpanded variablejs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 863,
    "chunk_index": 16,
    "total_chunks": 88
  },
  {
    "id": "711cae72b496abc09b3cbde921b83991",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d46c03e7d02cecb30f021\ntitle: Step 91\nchallengeType: 0\ndashedName: step-91\n--description--\nNow you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints--\nYou should declare a functionExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/);\nYou should use const to declare your functionExpanded variablejs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 867,
    "chunk_index": 17,
    "total_chunks": 88
  },
  {
    "id": "f121bfdf0cdee6ba15aef276b0e2ee92",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d46c03e7d02cecb30f021\ntitle: Step 91\nchallengeType: 0\ndashedName: step-91\n--description--\nNow you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints--\nYou should declare a functionExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/);\nYou should use const to declare your functionExpanded variablejs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 901,
    "chunk_index": 18,
    "total_chunks": 88
  },
  {
    "id": "9845261647b8734b1a07565ed0f5d90f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d46c03e7d02cecb30f021\ntitle: Step 91\nchallengeType: 0\ndashedName: step-91\n--description--\nNow you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints--\nYou should declare a functionExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/);\nYou should use const to declare your functionExpanded variablejs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 922,
    "chunk_index": 19,
    "total_chunks": 88
  },
  {
    "id": "d087ff866c1e6985fb67adae70f44632",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d46c03e7d02cecb30f021\ntitle: Step 91\nchallengeType: 0\ndashedName: step-91\n--description--\nNow you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints--\nYou should declare a functionExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/);\nYou should use const to declare your functionExpanded variablejs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 932,
    "chunk_index": 20,
    "total_chunks": 88
  },
  {
    "id": "2f7c2247296c4e25e74fdef448d08b6b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d46c03e7d02cecb30f021\ntitle: Step 91\nchallengeType: 0\ndashedName: step-91\n--description--\nNow you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints--\nYou should declare a functionExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/);\nYou should use const to declare your functionExpanded variablejs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 997,
    "chunk_index": 21,
    "total_chunks": 88
  },
  {
    "id": "c5a93219d930b6191688247b0ce41fe0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d46c03e7d02cecb30f021\ntitle: Step 91\nchallengeType: 0\ndashedName: step-91\n--description--\nNow you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints--\nYou should declare a functionExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/);\nYou should use const to declare your functionExpanded variablejs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 1059,
    "chunk_index": 22,
    "total_chunks": 88
  },
  {
    "id": "8c34d1450abef2200e4e195d6b617572",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d46c03e7d02cecb30f021\ntitle: Step 91\nchallengeType: 0\ndashedName: step-91\n--description--\nNow you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints--\nYou should declare a functionExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/);\nYou should use const to declare your functionExpanded variablejs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 1140,
    "chunk_index": 23,
    "total_chunks": 88
  },
  {
    "id": "d7f0fea12ccd7a7d2323df6988e7cfee",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d46c03e7d02cecb30f021\ntitle: Step 91\nchallengeType: 0\ndashedName: step-91\n--description--\nNow you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints--\nYou should declare a functionExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/);\nYou should use const to declare your functionExpanded variablejs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 1160,
    "chunk_index": 24,
    "total_chunks": 88
  },
  {
    "id": "2768f527116c350c084afb9ae2389257",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d46c03e7d02cecb30f021\ntitle: Step 91\nchallengeType: 0\ndashedName: step-91\n--description--\nNow you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints--\nYou should declare a functionExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/);\nYou should use const to declare your functionExpanded variablejs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 1173,
    "chunk_index": 25,
    "total_chunks": 88
  },
  {
    "id": "6a0ff5e29e63a6db67baf6036b68ea82",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d46c03e7d02cecb30f021\ntitle: Step 91\nchallengeType: 0\ndashedName: step-91\n--description--\nNow you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints--\nYou should declare a functionExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/);\nYou should use const to declare your functionExpanded variablejs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 1240,
    "chunk_index": 26,
    "total_chunks": 88
  },
  {
    "id": "cd78937877f866ebbfe8f911d76e8b41",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d46c03e7d02cecb30f021\ntitle: Step 91\nchallengeType: 0\ndashedName: step-91\n--description--\nNow you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints--\nYou should declare a functionExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/);\nYou should use const to declare your functionExpanded variablejs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 1274,
    "chunk_index": 27,
    "total_chunks": 88
  },
  {
    "id": "866b09ddd2161055096993e5c930b9d4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d46c03e7d02cecb30f021\ntitle: Step 91\nchallengeType: 0\ndashedName: step-91\n--description--\nNow you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints--\nYou should declare a functionExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/);\nYou should use const to declare your functionExpanded variablejs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 1304,
    "chunk_index": 28,
    "total_chunks": 88
  },
  {
    "id": "3c19bd06fe5f21ebf32bc75677cca8c5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d46c03e7d02cecb30f021\ntitle: Step 91\nchallengeType: 0\ndashedName: step-91\n--description--\nNow you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints--\nYou should declare a functionExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/);\nYou should use const to declare your functionExpanded variablejs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 1312,
    "chunk_index": 29,
    "total_chunks": 88
  },
  {
    "id": "98c5976d2f0433dfc680e3aad8fb3824",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d46c03e7d02cecb30f021\ntitle: Step 91\nchallengeType: 0\ndashedName: step-91\n--description--\nNow you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints--\nYou should declare a functionExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/);\nYou should use const to declare your functionExpanded variablejs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 1327,
    "chunk_index": 30,
    "total_chunks": 88
  },
  {
    "id": "ab19396b3267e746b0956dcd1113f0a1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d46c03e7d02cecb30f021\ntitle: Step 91\nchallengeType: 0\ndashedName: step-91\n--description--\nNow you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints--\nYou should declare a functionExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/);\nYou should use const to declare your functionExpanded variablejs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 1364,
    "chunk_index": 31,
    "total_chunks": 88
  },
  {
    "id": "fcca51bd2b3aeb31218b5a0e53a09239",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d46c03e7d02cecb30f021\ntitle: Step 91\nchallengeType: 0\ndashedName: step-91\n--description--\nNow you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints--\nYou should declare a functionExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/);\nYou should use const to declare your functionExpanded variablejs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 1379,
    "chunk_index": 32,
    "total_chunks": 88
  },
  {
    "id": "8d3d63a967729dd4d09faacac5937bc5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d46c03e7d02cecb30f021\ntitle: Step 91\nchallengeType: 0\ndashedName: step-91\n--description--\nNow you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints--\nYou should declare a functionExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/);\nYou should use const to declare your functionExpanded variablejs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/);\nYou should assign the functionExpanded variable the result of calling your applyFunction function",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 1407,
    "chunk_index": 33,
    "total_chunks": 88
  },
  {
    "id": "5da8fc7abf175635f54e5498b532d6e2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--description-- Now you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 1370,
    "chunk_index": 34,
    "total_chunks": 88
  },
  {
    "id": "dc789a3e7fe1849b160fde5770130257",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Now you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 1430,
    "chunk_index": 35,
    "total_chunks": 88
  },
  {
    "id": "0b4395f37d92610fe43b479c01f5332b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 1450,
    "chunk_index": 36,
    "total_chunks": 88
  },
  {
    "id": "8a88d1e3bb7124761828da158367c313",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 1453,
    "chunk_index": 37,
    "total_chunks": 88
  },
  {
    "id": "d9722073f491659d4375ba705681be3a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 1471,
    "chunk_index": 38,
    "total_chunks": 88
  },
  {
    "id": "eb2ef8c7a0bed0d3d3dd33ff456fa7ae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 1476,
    "chunk_index": 39,
    "total_chunks": 88
  },
  {
    "id": "3c4e9bcebc5f62a98065cfbcf4d4b665",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 1480,
    "chunk_index": 40,
    "total_chunks": 88
  },
  {
    "id": "aebe45c81daabbc762c67917aab6f849",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 1514,
    "chunk_index": 41,
    "total_chunks": 88
  },
  {
    "id": "9fee9727685bc19f6d5fc9e1b1b5ae8d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 1535,
    "chunk_index": 42,
    "total_chunks": 88
  },
  {
    "id": "0cc101bd7666fbc1c34c3e88e048f8ad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 1545,
    "chunk_index": 43,
    "total_chunks": 88
  },
  {
    "id": "7edfa3430224bb207d70de946bdcc212",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 1610,
    "chunk_index": 44,
    "total_chunks": 88
  },
  {
    "id": "f40a7cb94a06971f26a4e9a071475f77",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 1672,
    "chunk_index": 45,
    "total_chunks": 88
  },
  {
    "id": "c7e2f929a6a78159a0869b9cfaaba208",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 1753,
    "chunk_index": 46,
    "total_chunks": 88
  },
  {
    "id": "8c384f11d35a5fd667c2d16054faa66e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 1773,
    "chunk_index": 47,
    "total_chunks": 88
  },
  {
    "id": "de9cbc0b923ff8adea9603165d6c01c7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 1786,
    "chunk_index": 48,
    "total_chunks": 88
  },
  {
    "id": "984349b5164081ccc4089bf2aef3c035",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 1853,
    "chunk_index": 49,
    "total_chunks": 88
  },
  {
    "id": "10919440faa653f7d8c6976b73199773",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 1887,
    "chunk_index": 50,
    "total_chunks": 88
  },
  {
    "id": "9e9213602de2e086822da2116d56fb13",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 1917,
    "chunk_index": 51,
    "total_chunks": 88
  },
  {
    "id": "fba093e397c7d37644f6c66cbf2e5bc9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 1925,
    "chunk_index": 52,
    "total_chunks": 88
  },
  {
    "id": "7cf8a90ba12b57bdd0939699321d4591",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 1940,
    "chunk_index": 53,
    "total_chunks": 88
  },
  {
    "id": "46303ddc286fbfedde803ccd97a76c64",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 1977,
    "chunk_index": 54,
    "total_chunks": 88
  },
  {
    "id": "44e743cad917fc4cbb72746efbbba745",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 1992,
    "chunk_index": 55,
    "total_chunks": 88
  },
  {
    "id": "e621b226825afd2338f4232fe3e78ea5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 1994,
    "chunk_index": 56,
    "total_chunks": 88
  },
  {
    "id": "b182bf0406d69792ab29132e6fcc597f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "you can start applying your function parser to your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(/);\nYou should pass cellExpanded to your applyFunction call",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 2025,
    "chunk_index": 57,
    "total_chunks": 88
  },
  {
    "id": "18d996115a9133bcd01456c69c9c7850",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(/); You should pass cellExpanded to your applyFunction calljs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 2020,
    "chunk_index": 58,
    "total_chunks": 88
  },
  {
    "id": "be363b0bed91baba2d88fdc88d9d3794",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "evalFormula logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(/); You should pass cellExpanded to your applyFunction calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 2082,
    "chunk_index": 59,
    "total_chunks": 88
  },
  {
    "id": "7b977fa324f7f4a4cf7fe0d7e5b1fa11",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(/); You should pass cellExpanded to your applyFunction calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 2101,
    "chunk_index": 60,
    "total_chunks": 88
  },
  {
    "id": "9e93adbb613777d7950ad74e5a07dd43",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(/); You should pass cellExpanded to your applyFunction calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 2104,
    "chunk_index": 61,
    "total_chunks": 88
  },
  {
    "id": "b61932ff7398ee30b748ceb137563a0a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(/); You should pass cellExpanded to your applyFunction calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 2122,
    "chunk_index": 62,
    "total_chunks": 88
  },
  {
    "id": "23096715c932a4f27e47dcb6a674b61c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(/); You should pass cellExpanded to your applyFunction calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 2127,
    "chunk_index": 63,
    "total_chunks": 88
  },
  {
    "id": "a455c956b50a9de554c7a92a140c5fce",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(/); You should pass cellExpanded to your applyFunction calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 2131,
    "chunk_index": 64,
    "total_chunks": 88
  },
  {
    "id": "c539da430aa3b4d7c60ab67abac7ff91",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(/); You should pass cellExpanded to your applyFunction calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 2165,
    "chunk_index": 65,
    "total_chunks": 88
  },
  {
    "id": "37730b02b3d69537cece56ca5d7dfae8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(/); You should pass cellExpanded to your applyFunction calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 2186,
    "chunk_index": 66,
    "total_chunks": 88
  },
  {
    "id": "cf6ef4d5a26cce8afa8ac6141175059c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(/); You should pass cellExpanded to your applyFunction calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 2196,
    "chunk_index": 67,
    "total_chunks": 88
  },
  {
    "id": "489b3ca7857e7766c38656985ca8360f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(/); You should pass cellExpanded to your applyFunction calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 2261,
    "chunk_index": 68,
    "total_chunks": 88
  },
  {
    "id": "91450b682c17fd2e963dd559524bdf99",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(/); You should pass cellExpanded to your applyFunction calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 2323,
    "chunk_index": 69,
    "total_chunks": 88
  },
  {
    "id": "e4e9a7975fc538bb46751123a575dcc7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(/); You should pass cellExpanded to your applyFunction calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 2404,
    "chunk_index": 70,
    "total_chunks": 88
  },
  {
    "id": "2481112b0553652f66ca62f56e78e4c3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(/); You should pass cellExpanded to your applyFunction calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 2424,
    "chunk_index": 71,
    "total_chunks": 88
  },
  {
    "id": "19779b1aa49aace52fa03989af3b7c67",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(/); You should pass cellExpanded to your applyFunction calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 2437,
    "chunk_index": 72,
    "total_chunks": 88
  },
  {
    "id": "4ab91f1c29736c4cf80f9f5580ddd1fd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(/); You should pass cellExpanded to your applyFunction calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 2504,
    "chunk_index": 73,
    "total_chunks": 88
  },
  {
    "id": "42549f9ad0ac5d0a590f29064528b325",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(/); You should pass cellExpanded to your applyFunction calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 2538,
    "chunk_index": 74,
    "total_chunks": 88
  },
  {
    "id": "32d5798a91cba1079ae2e9e928642865",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(/); You should pass cellExpanded to your applyFunction calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 2568,
    "chunk_index": 75,
    "total_chunks": 88
  },
  {
    "id": "c11f7ef2af1b4d169a9b51ed7bc82faf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(/); You should pass cellExpanded to your applyFunction calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 2576,
    "chunk_index": 76,
    "total_chunks": 88
  },
  {
    "id": "8a9b8e25ea06dc8043367d58e943cc67",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(/); You should pass cellExpanded to your applyFunction calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 2591,
    "chunk_index": 77,
    "total_chunks": 88
  },
  {
    "id": "5b2652a09d465cd230ac090155826794",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(/); You should pass cellExpanded to your applyFunction calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 2628,
    "chunk_index": 78,
    "total_chunks": 88
  },
  {
    "id": "db123891aad625ffed3a89d85f2d5825",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(/); You should pass cellExpanded to your applyFunction calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 2643,
    "chunk_index": 79,
    "total_chunks": 88
  },
  {
    "id": "7d2ecee10fa310b6cd6b2ee3083955a9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(/); You should pass cellExpanded to your applyFunction calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 2645,
    "chunk_index": 80,
    "total_chunks": 88
  },
  {
    "id": "20ddafb053f93ee30ab12550c0f2e501",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(/); You should pass cellExpanded to your applyFunction calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 2675,
    "chunk_index": 81,
    "total_chunks": 88
  },
  {
    "id": "6ecb2212eed0ccaae71740fae12a1208",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "logic Declare a functionExpanded variable, and assign it the result of calling applyFunction with your cellExpanded string --hints-- You should declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(/); You should pass cellExpanded to your applyFunction calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 2731,
    "chunk_index": 82,
    "total_chunks": 88
  },
  {
    "id": "72d9d657a05e96339acb460caba58b3c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "declare a functionExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*/); You should use const to declare your functionExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+functionExpanded\\s*=\\s*/); You should assign the functionExpanded variable the result of calling your applyFunction functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(/); You should pass cellExpanded to your applyFunction calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n\"*\": (x, y) => x * y,\n\"/\": (x, y) => x / y,\n}\nconst infixEval = (str, regex) => str",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 2798,
    "chunk_index": 83,
    "total_chunks": 88
  },
  {
    "id": "226de18a8907cb4af803a7735f9dc834",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "applyFunction calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const infixToFunction = { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } const infixEval = (str, regex) => strreplace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator);\nconst highPrecedence = str => {\nconst regex = /([\\d",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 846,
    "chunk_index": 84,
    "total_chunks": 88
  },
  {
    "id": "a502d9947c23dc3f6e04eaaf1c8b9948",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const infixToFunction = { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } const infixEval = (str, regex) => strreplace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator); const highPrecedence = str => { const regex = /([\\d]+)([*\\/])([\\d ]+)/;\nconst str2 = infixEval(str, regex);\nreturn str === str2 str : highPrecedence(str2);\n}\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst applyFunction = str => {\nconst noHigh = highPrecedence(str);\nconst infix = /([\\d ]+)([+-])([\\d ]+)/;\nconst str2 = infixEval(noHigh, infix);\nconst functionCall = /([a-z0-9])(([0-9 , ]))( *()/i;\nconst toNumberList = args => args split(\",\") map(parseFloat);\nconst apply = (fn, args) => spreadsheetFunctionsfn toLowerCase();\nreturn str2 replace(functionCall, (match, fn, args) => spreadsheetFunctions hasOwnProperty(fn toLowerCase()) apply(fn, args) : match);\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 505,
    "chunk_index": 85,
    "total_chunks": 88
  },
  {
    "id": "340d577ad337e93e3896e366833b0481",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "]+)([+-])([\\d ]+)/; const str2 = infixEval(noHigh, infix); const functionCall = /([a-z0-9])(([0-9 , ]))( *()/i; const toNumberList = args => args split(\",\") map(parseFloat); const apply = (fn, args) => spreadsheetFunctionsfn toLowerCase(); return str2 replace(functionCall, (match, fn, args) => spreadsheetFunctions hasOwnProperty(fn toLowerCase()) apply(fn, args) : match); } const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => StringfromCharCode(code));\n--fcc-editable-region--\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\n}\n--fcc-editable-region--\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 86,
    "total_chunks": 88
  },
  {
    "id": "c529a67eb263e982c2de07cc6682a304",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "idToText(match toUpperCase())); } --fcc-editable-region-- window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99) forEach(number => { createLabel(number); letters forEach(letter => { const input = document createElement(\"input\"); input type = \"text\"; input id = letter + number; input ariaLabel = letter + number; inputonchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d46c03e7d02cecb30f021.md",
      "source_type": "git_repo"
    },
    "token_count": 183,
    "chunk_index": 87,
    "total_chunks": 88
  },
  {
    "id": "3b436325ca7fbc81eddae207631b17f0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d4769ba65f1d05ef6b634\ntitle: Step 93\nchallengeType: 0\ndashedName: step-93\n--description--\nNow your update() function can actually evaluate formulas Remember that you wrote the if condition to check that a function was called Inside your if statement, set the value of the element to be the result of your evalFormula() function Do not pass any arguments yet --hints--\nYou should update the value property of element in your if block js\nassert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value/);\nYou should assign the value property the result of calling your evalFormula() function js\nassert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
      "source_type": "git_repo"
    },
    "token_count": 509,
    "chunk_index": 0,
    "total_chunks": 37
  },
  {
    "id": "994006826fb637070d9aa0c222286b33",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of the element to be the result of your evalFormula() function Do not pass any arguments yet --hints-- You should update the value property of element in your if block js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value/); You should assign the value property the result of calling your evalFormula() function js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*(value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 1,
    "total_chunks": 37
  },
  {
    "id": "2abe2c9b9d78bf159de6de2046b15cd5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to be the result of your evalFormula() function Do not pass any arguments yet --hints-- You should update the value property of element in your if block js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value/); You should assign the value property the result of calling your evalFormula() function js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*(value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 2,
    "total_chunks": 37
  },
  {
    "id": "a9c91f2495b6550c8498604eee763731",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to be the result of your evalFormula() function Do not pass any arguments yet --hints-- You should update the value property of element in your if block js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value/); You should assign the value property the result of calling your evalFormula() function js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*(value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
      "source_type": "git_repo"
    },
    "token_count": 516,
    "chunk_index": 3,
    "total_chunks": 37
  },
  {
    "id": "8e5d39c0e511a6ff0af25fcb9ba7abd6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to be the result of your evalFormula() function Do not pass any arguments yet --hints-- You should update the value property of element in your if block js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value/); You should assign the value property the result of calling your evalFormula() function js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*(value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
      "source_type": "git_repo"
    },
    "token_count": 542,
    "chunk_index": 4,
    "total_chunks": 37
  },
  {
    "id": "6e11302ab483ccd6b5d38e7e326ce0ca",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to be the result of your evalFormula() function Do not pass any arguments yet --hints-- You should update the value property of element in your if block js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value/); You should assign the value property the result of calling your evalFormula() function js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*(value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
      "source_type": "git_repo"
    },
    "token_count": 566,
    "chunk_index": 5,
    "total_chunks": 37
  },
  {
    "id": "04a66acf41105f471ea7ff29c48f367d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to be the result of your evalFormula() function Do not pass any arguments yet --hints-- You should update the value property of element in your if block js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value/); You should assign the value property the result of calling your evalFormula() function js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*(value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
      "source_type": "git_repo"
    },
    "token_count": 587,
    "chunk_index": 6,
    "total_chunks": 37
  },
  {
    "id": "e3d8f0e0091bb9410e082b9e283bcfaa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to be the result of your evalFormula() function Do not pass any arguments yet --hints-- You should update the value property of element in your if block js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value/); You should assign the value property the result of calling your evalFormula() function js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*(value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
      "source_type": "git_repo"
    },
    "token_count": 589,
    "chunk_index": 7,
    "total_chunks": 37
  },
  {
    "id": "388281b137afc1ca57c2839f4874e12d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to be the result of your evalFormula() function Do not pass any arguments yet --hints-- You should update the value property of element in your if block js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value/); You should assign the value property the result of calling your evalFormula() function js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*(value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
      "source_type": "git_repo"
    },
    "token_count": 596,
    "chunk_index": 8,
    "total_chunks": 37
  },
  {
    "id": "154be1c42c09b7f18d4c059bc4f0364b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to be the result of your evalFormula() function Do not pass any arguments yet --hints-- You should update the value property of element in your if block js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value/); You should assign the value property the result of calling your evalFormula() function js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*(value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
      "source_type": "git_repo"
    },
    "token_count": 611,
    "chunk_index": 9,
    "total_chunks": 37
  },
  {
    "id": "ce7544185037fd409e533203ce176c7f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to be the result of your evalFormula() function Do not pass any arguments yet --hints-- You should update the value property of element in your if block js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value/); You should assign the value property the result of calling your evalFormula() function js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*(value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(/);\nYou should not pass any arguments to your evalFormula() call",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
      "source_type": "git_repo"
    },
    "token_count": 634,
    "chunk_index": 10,
    "total_chunks": 37
  },
  {
    "id": "d4c6a832edf63ecb8c07acf9de1d500d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "pass any arguments yet --hints-- You should update the value property of element in your if block js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value/); You should assign the value property the result of calling your evalFormula() function js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*(value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(/); You should not pass any arguments to your evalFormula() calljs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
      "source_type": "git_repo"
    },
    "token_count": 625,
    "chunk_index": 11,
    "total_chunks": 37
  },
  {
    "id": "d9bbc24b10fac65d73e730c752f7c1b1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "any arguments yet --hints-- You should update the value property of element in your if block js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value/); You should assign the value property the result of calling your evalFormula() function js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*(value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(/); You should not pass any arguments to your evalFormula() calljs assertmatch(code, /const\\s+update\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
      "source_type": "git_repo"
    },
    "token_count": 636,
    "chunk_index": 12,
    "total_chunks": 37
  },
  {
    "id": "5772e0bd10b76205fea7e97369adb2c7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "arguments yet --hints-- You should update the value property of element in your if block js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value/); You should assign the value property the result of calling your evalFormula() function js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*(value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(/); You should not pass any arguments to your evalFormula() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
      "source_type": "git_repo"
    },
    "token_count": 666,
    "chunk_index": 13,
    "total_chunks": 37
  },
  {
    "id": "92a59f3d62f4e12822a6b171e65c3386",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "arguments yet --hints-- You should update the value property of element in your if block js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value/); You should assign the value property the result of calling your evalFormula() function js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*(value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(/); You should not pass any arguments to your evalFormula() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
      "source_type": "git_repo"
    },
    "token_count": 670,
    "chunk_index": 14,
    "total_chunks": 37
  },
  {
    "id": "b6efd2f97503024246961a87f5f7e210",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "arguments yet --hints-- You should update the value property of element in your if block js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value/); You should assign the value property the result of calling your evalFormula() function js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*(value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(/); You should not pass any arguments to your evalFormula() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
      "source_type": "git_repo"
    },
    "token_count": 683,
    "chunk_index": 15,
    "total_chunks": 37
  },
  {
    "id": "d270a05a99836952045bd72ae9a8b797",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "arguments yet --hints-- You should update the value property of element in your if block js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value/); You should assign the value property the result of calling your evalFormula() function js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*(value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(/); You should not pass any arguments to your evalFormula() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
      "source_type": "git_repo"
    },
    "token_count": 685,
    "chunk_index": 16,
    "total_chunks": 37
  },
  {
    "id": "c2240c2eca003c5e91f032f049907b09",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "arguments yet --hints-- You should update the value property of element in your if block js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value/); You should assign the value property the result of calling your evalFormula() function js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*(value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(/); You should not pass any arguments to your evalFormula() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
      "source_type": "git_repo"
    },
    "token_count": 711,
    "chunk_index": 17,
    "total_chunks": 37
  },
  {
    "id": "1e9e6d0f041d416172e956ee6daad873",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "arguments yet --hints-- You should update the value property of element in your if block js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value/); You should assign the value property the result of calling your evalFormula() function js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*(value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(/); You should not pass any arguments to your evalFormula() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
      "source_type": "git_repo"
    },
    "token_count": 719,
    "chunk_index": 18,
    "total_chunks": 37
  },
  {
    "id": "321493e687a2c4ad3a0eea03714c181e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "arguments yet --hints-- You should update the value property of element in your if block js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value/); You should assign the value property the result of calling your evalFormula() function js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*(value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(/); You should not pass any arguments to your evalFormula() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
      "source_type": "git_repo"
    },
    "token_count": 721,
    "chunk_index": 19,
    "total_chunks": 37
  },
  {
    "id": "a3ad9b9455cbf63da75b36cb61978d96",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "arguments yet --hints-- You should update the value property of element in your if block js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value/); You should assign the value property the result of calling your evalFormula() function js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*(value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(/); You should not pass any arguments to your evalFormula() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
      "source_type": "git_repo"
    },
    "token_count": 728,
    "chunk_index": 20,
    "total_chunks": 37
  },
  {
    "id": "4fefe87f50c5a06205daf79836fd3292",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "arguments yet --hints-- You should update the value property of element in your if block js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value/); You should assign the value property the result of calling your evalFormula() function js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*(value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(/); You should not pass any arguments to your evalFormula() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
      "source_type": "git_repo"
    },
    "token_count": 738,
    "chunk_index": 21,
    "total_chunks": 37
  },
  {
    "id": "3b165b8e52d159d5f0e8f51628eda1d8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "arguments yet --hints-- You should update the value property of element in your if block js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value/); You should assign the value property the result of calling your evalFormula() function js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*(value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(/); You should not pass any arguments to your evalFormula() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
      "source_type": "git_repo"
    },
    "token_count": 764,
    "chunk_index": 22,
    "total_chunks": 37
  },
  {
    "id": "49d1a9b51b99516786f71eeed1ccdd9c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "arguments yet --hints-- You should update the value property of element in your if block js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value/); You should assign the value property the result of calling your evalFormula() function js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*(value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(/); You should not pass any arguments to your evalFormula() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
      "source_type": "git_repo"
    },
    "token_count": 788,
    "chunk_index": 23,
    "total_chunks": 37
  },
  {
    "id": "67dd174a001ae20ec4fd9b07d7565f05",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "arguments yet --hints-- You should update the value property of element in your if block js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value/); You should assign the value property the result of calling your evalFormula() function js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*(value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(/); You should not pass any arguments to your evalFormula() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
      "source_type": "git_repo"
    },
    "token_count": 803,
    "chunk_index": 24,
    "total_chunks": 37
  },
  {
    "id": "cf439e4039cb49f4a016b21e7ea2147a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "arguments yet --hints-- You should update the value property of element in your if block js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value/); You should assign the value property the result of calling your evalFormula() function js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*(value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(/); You should not pass any arguments to your evalFormula() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
      "source_type": "git_repo"
    },
    "token_count": 829,
    "chunk_index": 25,
    "total_chunks": 37
  },
  {
    "id": "8a55e0de5cff0fbdcf592e110508e364",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "arguments yet --hints-- You should update the value property of element in your if block js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value/); You should assign the value property the result of calling your evalFormula() function js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*(value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(/); You should not pass any arguments to your evalFormula() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
      "source_type": "git_repo"
    },
    "token_count": 853,
    "chunk_index": 26,
    "total_chunks": 37
  },
  {
    "id": "1f6f75d49de46d1a3136ec9151d51867",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "arguments yet --hints-- You should update the value property of element in your if block js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value/); You should assign the value property the result of calling your evalFormula() function js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*(value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(/); You should not pass any arguments to your evalFormula() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
      "source_type": "git_repo"
    },
    "token_count": 874,
    "chunk_index": 27,
    "total_chunks": 37
  },
  {
    "id": "b88bc4fcda6a8fc39e9f396ee9ae6b6c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "arguments yet --hints-- You should update the value property of element in your if block js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value/); You should assign the value property the result of calling your evalFormula() function js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*(value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(/); You should not pass any arguments to your evalFormula() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
      "source_type": "git_repo"
    },
    "token_count": 876,
    "chunk_index": 28,
    "total_chunks": 37
  },
  {
    "id": "c3e5676b4c4a550fb1445e7c2bd747e9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "arguments yet --hints-- You should update the value property of element in your if block js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value/); You should assign the value property the result of calling your evalFormula() function js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*(value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(/); You should not pass any arguments to your evalFormula() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
      "source_type": "git_repo"
    },
    "token_count": 883,
    "chunk_index": 29,
    "total_chunks": 37
  },
  {
    "id": "338c3b5536212b0a393e3d70b02a155a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "arguments yet --hints-- You should update the value property of element in your if block js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value/); You should assign the value property the result of calling your evalFormula() function js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*(value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(/); You should not pass any arguments to your evalFormula() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
      "source_type": "git_repo"
    },
    "token_count": 898,
    "chunk_index": 30,
    "total_chunks": 37
  },
  {
    "id": "49f80e9b9a0e37ecfa706fd8b794f057",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "arguments yet --hints-- You should update the value property of element in your if block js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value/); You should assign the value property the result of calling your evalFormula() function js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*(value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(/); You should not pass any arguments to your evalFormula() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
      "source_type": "git_repo"
    },
    "token_count": 967,
    "chunk_index": 31,
    "total_chunks": 37
  },
  {
    "id": "3bd333219beda9af02f84f76891013a1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value/); You should assign the value property the result of calling your evalFormula() function js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*(value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(/); You should not pass any arguments to your evalFormula() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n\"*\": (x, y) => x * y,\n\"/\": (x, y) => x / y,\n}\nconst infixEval = (str, regex) => str",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
      "source_type": "git_repo"
    },
    "token_count": 998,
    "chunk_index": 32,
    "total_chunks": 37
  },
  {
    "id": "b5d832a6e79d18330e50f7ee7ec4a5ba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "evalFormula() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const infixToFunction = { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } const infixEval = (str, regex) => strreplace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator);\nconst highPrecedence = str => {\nconst regex = /([\\d ]+)([*\\/])([\\d",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 33,
    "total_chunks": 37
  },
  {
    "id": "5571f6ec05bbdad65306fc8efb828ed9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const infixToFunction = { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } const infixEval = (str, regex) => strreplace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator); const highPrecedence = str => { const regex = /([\\d ]+)([*\\/])([\\d]+)/;\nconst str2 = infixEval(str, regex);\nreturn str === str2 str : highPrecedence(str2);\n}\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst applyFunction = str => {\nconst noHigh = highPrecedence(str);\nconst infix = /([\\d ]+)([+-])([\\d ]+)/;\nconst str2 = infixEval(noHigh, infix);\nconst functionCall = /([a-z0-9])(([0-9 , ]))( *()/i;\nconst toNumberList = args => args split(\",\") map(parseFloat);\nconst apply = (fn, args) => spreadsheetFunctionsfn toLowerCase();\nreturn str2 replace(functionCall, (match, fn, args) => spreadsheetFunctions hasOwnProperty(fn toLowerCase()) apply(fn, args) : match);\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 34,
    "total_chunks": 37
  },
  {
    "id": "c4eafeeb7898b233295dacec4dacdac7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "]+)([+-])([\\d ]+)/; const str2 = infixEval(noHigh, infix); const functionCall = /([a-z0-9])(([0-9 , ]))( *()/i; const toNumberList = args => args split(\",\") map(parseFloat); const apply = (fn, args) => spreadsheetFunctionsfn toLowerCase(); return str2 replace(functionCall, (match, fn, args) => spreadsheetFunctions hasOwnProperty(fn toLowerCase()) apply(fn, args) : match); } const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => StringfromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\nconst functionExpanded = applyFunction(cellExpanded);\nreturn functionExpanded === x functionExpanded : evalFormula(functionExpanded, cells);\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 35,
    "total_chunks": 37
  },
  {
    "id": "b9828880662d66bc71c7ac93c223a9d5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "=> idToText(match toUpperCase())); const functionExpanded = applyFunction(cellExpanded); return functionExpanded === x functionExpanded : evalFormula(functionExpanded, cells); } window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99) forEach(number => { createLabel(number); letters forEach(letter => { const input = document createElement(\"input\"); input type = \"text\"; inputid = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\n--fcc-editable-region--\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4769ba65f1d05ef6b634.md",
      "source_type": "git_repo"
    },
    "token_count": 213,
    "chunk_index": 36,
    "total_chunks": 37
  },
  {
    "id": "4db7226959451cc232f2afd5183f755c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d4626420eeecd51f241c2\ntitle: Step 89\nchallengeType: 0\ndashedName: step-89\n--description--\nUpdate the callback function to take match, fn, and args as parameters It should implicitly return the result of checking whether spreadsheetFunctions has its own property of fn Remember to make fn lower case To check if a property on a given object exists or not, you can use the hasOwnProperty() method The hasOwnProperty() method returns true or false depending on if the property is found on the object or not Here is an example of how to use the hasOwnProperty() method:\n```js\nconst developerObj = {\nname: 'John',\nage: 34,\n}\ndeveloperObj hasOwnProperty('name'); // true\ndeveloperObj hasOwnProperty('salary'); // false\n```\n--hints--\nYour callback function should have match as the first parameter js\nassert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 156
  },
  {
    "id": "4b7d017d5923cbb8b3b22beed39aa661",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "on if the property is found on the object or not Here is an example of how to use the hasOwnProperty() method: ```js const developerObj = { name: 'John', age: 34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/);\nYour callback function should have fn as the second parameter js\nassert match(code, /const\\s+applyFunction\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 462,
    "chunk_index": 1,
    "total_chunks": 156
  },
  {
    "id": "3b4f165596c8389ebac41fde042e74de",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "how to use the hasOwnProperty() method: ```js const developerObj = { name: 'John', age: 34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 2,
    "total_chunks": 156
  },
  {
    "id": "d620757c517239df56265e91412afe3e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "how to use the hasOwnProperty() method: ```js const developerObj = { name: 'John', age: 34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 3,
    "total_chunks": 156
  },
  {
    "id": "b6820aea2fb487a05f7c1e76161d4287",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "how to use the hasOwnProperty() method: ```js const developerObj = { name: 'John', age: 34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 510,
    "chunk_index": 4,
    "total_chunks": 156
  },
  {
    "id": "7fd450f192567816c167c38b40a91211",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "how to use the hasOwnProperty() method: ```js const developerObj = { name: 'John', age: 34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 511,
    "chunk_index": 5,
    "total_chunks": 156
  },
  {
    "id": "5206c362cc5d9d75c253161bd803826b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "how to use the hasOwnProperty() method: ```js const developerObj = { name: 'John', age: 34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 519,
    "chunk_index": 6,
    "total_chunks": 156
  },
  {
    "id": "b043276e9ef6049a2b3f9eb345fcb9e3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "how to use the hasOwnProperty() method: ```js const developerObj = { name: 'John', age: 34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 529,
    "chunk_index": 7,
    "total_chunks": 156
  },
  {
    "id": "6d643fd69e9c8cad106a3e2a8c4b623b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "how to use the hasOwnProperty() method: ```js const developerObj = { name: 'John', age: 34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 533,
    "chunk_index": 8,
    "total_chunks": 156
  },
  {
    "id": "613821069b354c81571ea7705b864ca5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "how to use the hasOwnProperty() method: ```js const developerObj = { name: 'John', age: 34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 534,
    "chunk_index": 9,
    "total_chunks": 156
  },
  {
    "id": "a903f6d1060a774ef6b0bb80dceed387",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "how to use the hasOwnProperty() method: ```js const developerObj = { name: 'John', age: 34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 545,
    "chunk_index": 10,
    "total_chunks": 156
  },
  {
    "id": "fb41d5f5c6c8a8e8864adad3a1cc134e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "how to use the hasOwnProperty() method: ```js const developerObj = { name: 'John', age: 34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 579,
    "chunk_index": 11,
    "total_chunks": 156
  },
  {
    "id": "c0a12a3bbd12d723adc2193096de502d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "how to use the hasOwnProperty() method: ```js const developerObj = { name: 'John', age: 34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 612,
    "chunk_index": 12,
    "total_chunks": 156
  },
  {
    "id": "043bd9b2ca149829ff249342ac04520e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "how to use the hasOwnProperty() method: ```js const developerObj = { name: 'John', age: 34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 620,
    "chunk_index": 13,
    "total_chunks": 156
  },
  {
    "id": "689b95d523a4d4a237151e42a8687ae8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to use the hasOwnProperty() method: ```js const developerObj = { name: 'John', age: 34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 620,
    "chunk_index": 14,
    "total_chunks": 156
  },
  {
    "id": "7eb66d156b8c697e615a6cf415df8265",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to use the hasOwnProperty() method: ```js const developerObj = { name: 'John', age: 34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 629,
    "chunk_index": 15,
    "total_chunks": 156
  },
  {
    "id": "17b414585e050767f1d8273b8e378ed2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to use the hasOwnProperty() method: ```js const developerObj = { name: 'John', age: 34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 642,
    "chunk_index": 16,
    "total_chunks": 156
  },
  {
    "id": "a5c7f094ed7fec0500d28ddc0842b45d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to use the hasOwnProperty() method: ```js const developerObj = { name: 'John', age: 34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 661,
    "chunk_index": 17,
    "total_chunks": 156
  },
  {
    "id": "655a671a703208744a238fa560d0d3d1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to use the hasOwnProperty() method: ```js const developerObj = { name: 'John', age: 34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 675,
    "chunk_index": 18,
    "total_chunks": 156
  },
  {
    "id": "243f4a075c4d6f1a857b27bbf10f5629",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to use the hasOwnProperty() method: ```js const developerObj = { name: 'John', age: 34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 687,
    "chunk_index": 19,
    "total_chunks": 156
  },
  {
    "id": "d75c2b0cea56c5cf88daeedc241f34b1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to use the hasOwnProperty() method: ```js const developerObj = { name: 'John', age: 34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 727,
    "chunk_index": 20,
    "total_chunks": 156
  },
  {
    "id": "6bf7296aff3293dc963389db9c4f21f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to use the hasOwnProperty() method: ```js const developerObj = { name: 'John', age: 34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 758,
    "chunk_index": 21,
    "total_chunks": 156
  },
  {
    "id": "31efe3479fc8cbd0012dfaea9e025d3a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to use the hasOwnProperty() method: ```js const developerObj = { name: 'John', age: 34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 766,
    "chunk_index": 22,
    "total_chunks": 156
  },
  {
    "id": "3c2aeeeda00b016c94a42823f2f9e4d1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to use the hasOwnProperty() method: ```js const developerObj = { name: 'John', age: 34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/);\nYour callback function should have args as the third parameter",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 800,
    "chunk_index": 23,
    "total_chunks": 156
  },
  {
    "id": "7128f6081cf39e4d8c5276c427b5cd7e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "name: 'John', age: 34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 788,
    "chunk_index": 24,
    "total_chunks": 156
  },
  {
    "id": "08f98b3588768e3e4caa334523d03618",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "'John', age: 34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 799,
    "chunk_index": 25,
    "total_chunks": 156
  },
  {
    "id": "1ec28cdd299549a4f0cd7ddd11367b34",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "age: 34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 841,
    "chunk_index": 26,
    "total_chunks": 156
  },
  {
    "id": "a77ac0ba92dbd2e89c628786013ad052",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "age: 34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 857,
    "chunk_index": 27,
    "total_chunks": 156
  },
  {
    "id": "077e3ab183ccf3c4089cfa7c575b174f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "age: 34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 861,
    "chunk_index": 28,
    "total_chunks": 156
  },
  {
    "id": "7e1e67fe901ae9ede6d7954b15d80a04",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "age: 34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 862,
    "chunk_index": 29,
    "total_chunks": 156
  },
  {
    "id": "f54d498b71c80b318c1f7ce659af694d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "age: 34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 870,
    "chunk_index": 30,
    "total_chunks": 156
  },
  {
    "id": "9ad0811c072db4906e43a0aa9ecb1a71",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "age: 34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 880,
    "chunk_index": 31,
    "total_chunks": 156
  },
  {
    "id": "0d57d065a43d5dbf2f909123c2355b57",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "age: 34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 884,
    "chunk_index": 32,
    "total_chunks": 156
  },
  {
    "id": "242cba38ae41ff5468804212c1c26999",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "age: 34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 885,
    "chunk_index": 33,
    "total_chunks": 156
  },
  {
    "id": "5a343f6f78248320e42f21e1d6784545",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "age: 34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 896,
    "chunk_index": 34,
    "total_chunks": 156
  },
  {
    "id": "3a0fbe47915742260f208a21adfe7c41",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "age: 34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 930,
    "chunk_index": 35,
    "total_chunks": 156
  },
  {
    "id": "fcb884e7d1b49ce4c1b2ba9c30694910",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "age: 34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 963,
    "chunk_index": 36,
    "total_chunks": 156
  },
  {
    "id": "885275cb8ef552f31461705c92381e2f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "age: 34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 971,
    "chunk_index": 37,
    "total_chunks": 156
  },
  {
    "id": "f93989d9891a60340adf21c109702a4d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 969,
    "chunk_index": 38,
    "total_chunks": 156
  },
  {
    "id": "d0477e0f9715ff6f9014b8cacb601ca1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 978,
    "chunk_index": 39,
    "total_chunks": 156
  },
  {
    "id": "e2c400148931658cbbc51f39f66947a3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 991,
    "chunk_index": 40,
    "total_chunks": 156
  },
  {
    "id": "085024747d0ab982750713322ad5ec27",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1010,
    "chunk_index": 41,
    "total_chunks": 156
  },
  {
    "id": "8fe2f0d0ba75a7d1bb252d7fc793964f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1024,
    "chunk_index": 42,
    "total_chunks": 156
  },
  {
    "id": "3c62848889c5f65a21098d7a7cfdcb6b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1036,
    "chunk_index": 43,
    "total_chunks": 156
  },
  {
    "id": "e264f62ee4d3b7ccdd4b3f74656b3bb2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1076,
    "chunk_index": 44,
    "total_chunks": 156
  },
  {
    "id": "f4454310e35404f9d3e36f92550eeaae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1107,
    "chunk_index": 45,
    "total_chunks": 156
  },
  {
    "id": "a5b4df941307658b4cdba0bc883408f1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1115,
    "chunk_index": 46,
    "total_chunks": 156
  },
  {
    "id": "2950ff32b5d46b5fa97a68cf3a91ea81",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "34, } developerObj hasOwnProperty('name'); // true developerObj hasOwnProperty('salary'); // false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/);\nYour callback function should use an implicit return",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1159,
    "chunk_index": 47,
    "total_chunks": 156
  },
  {
    "id": "baaa42cf3614a113ea2fa782ed374eca",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "// false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1143,
    "chunk_index": 48,
    "total_chunks": 156
  },
  {
    "id": "3c0abd2bcc4f2afc527384b72db71ac4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "false ``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1156,
    "chunk_index": 49,
    "total_chunks": 156
  },
  {
    "id": "6af96429555a55871b6d8f46af9a4980",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1200,
    "chunk_index": 50,
    "total_chunks": 156
  },
  {
    "id": "a713d04ab2cf6a6502ebeace7ddf4175",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1216,
    "chunk_index": 51,
    "total_chunks": 156
  },
  {
    "id": "c0cfad52dfab4b9380e71de20350495c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1220,
    "chunk_index": 52,
    "total_chunks": 156
  },
  {
    "id": "4fb5dee0b7d178d8123b8c624c942c1b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1221,
    "chunk_index": 53,
    "total_chunks": 156
  },
  {
    "id": "72a15e80b2ab38a57c78d39752f9a19b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1229,
    "chunk_index": 54,
    "total_chunks": 156
  },
  {
    "id": "3894cdc0ef0067ac8f47716eb59eb803",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1239,
    "chunk_index": 55,
    "total_chunks": 156
  },
  {
    "id": "793c288e0ff4498775430907cc3575b0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1243,
    "chunk_index": 56,
    "total_chunks": 156
  },
  {
    "id": "66b6d233c727f3a4194577085451873a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1244,
    "chunk_index": 57,
    "total_chunks": 156
  },
  {
    "id": "a68ccb50d7f82d18c5a759efbcd8bdbd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1255,
    "chunk_index": 58,
    "total_chunks": 156
  },
  {
    "id": "ab73defc88c0612b4f6bdfcac4b46ba7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1289,
    "chunk_index": 59,
    "total_chunks": 156
  },
  {
    "id": "4e692a268a63c83be15364b6346a1228",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1322,
    "chunk_index": 60,
    "total_chunks": 156
  },
  {
    "id": "b79ed7f1df29a4a03bedba5c746fca0b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "``` --hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1330,
    "chunk_index": 61,
    "total_chunks": 156
  },
  {
    "id": "939d36ac483ea1669e64cc33a77a5cf9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1330,
    "chunk_index": 62,
    "total_chunks": 156
  },
  {
    "id": "0f647070940ba8c1000676faab463c79",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1339,
    "chunk_index": 63,
    "total_chunks": 156
  },
  {
    "id": "db81803b96ed00a3ab32c349a4211ec5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1352,
    "chunk_index": 64,
    "total_chunks": 156
  },
  {
    "id": "a9e1ac766b72e0ab597508e288794de7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1371,
    "chunk_index": 65,
    "total_chunks": 156
  },
  {
    "id": "259d56139b92ebd1b9e775a7e6dddde0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1385,
    "chunk_index": 66,
    "total_chunks": 156
  },
  {
    "id": "87206a83da97c30efadb4b3529c142e5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1397,
    "chunk_index": 67,
    "total_chunks": 156
  },
  {
    "id": "3ad4443de9150341b081d127c20f70bd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1437,
    "chunk_index": 68,
    "total_chunks": 156
  },
  {
    "id": "c66c5271c6c55bf51a3e58655d39e3a6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1468,
    "chunk_index": 69,
    "total_chunks": 156
  },
  {
    "id": "a72a9855ba37fe1b9b4ebdcd564831f3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1476,
    "chunk_index": 70,
    "total_chunks": 156
  },
  {
    "id": "eb1b30e79ac2eaa957a11234cb5ada4b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--hints-- Your callback function should have match as the first parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/);\nYour callback function should return the result of calling the",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1525,
    "chunk_index": 71,
    "total_chunks": 156
  },
  {
    "id": "982fa1268c6c38b8de5f08b60c796dc3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions object",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1522,
    "chunk_index": 72,
    "total_chunks": 156
  },
  {
    "id": "2752482c4c1a41063e9cec8e547255ee",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1508,
    "chunk_index": 73,
    "total_chunks": 156
  },
  {
    "id": "36edc0a768434f87795a7899a201db4a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1476,
    "chunk_index": 74,
    "total_chunks": 156
  },
  {
    "id": "d5bf6f258a379fe15d11e32deed68af3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1504,
    "chunk_index": 75,
    "total_chunks": 156
  },
  {
    "id": "f29bf19f20f01c0f2889aa4ab046f055",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1520,
    "chunk_index": 76,
    "total_chunks": 156
  },
  {
    "id": "5a799a797eb19ac593f462fc35b9b320",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1524,
    "chunk_index": 77,
    "total_chunks": 156
  },
  {
    "id": "36fe24d0e854217bafe1e4e6b08c3a92",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1525,
    "chunk_index": 78,
    "total_chunks": 156
  },
  {
    "id": "ca81be8ea577fb576f2434d9c47a2474",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1533,
    "chunk_index": 79,
    "total_chunks": 156
  },
  {
    "id": "9c93dc7962d8130320dd0f3b15f3d088",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1543,
    "chunk_index": 80,
    "total_chunks": 156
  },
  {
    "id": "753208f10acb8d65e5766bb8f2c5b320",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1547,
    "chunk_index": 81,
    "total_chunks": 156
  },
  {
    "id": "222654fdffa7b51e52e8e011cd152961",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1548,
    "chunk_index": 82,
    "total_chunks": 156
  },
  {
    "id": "6e82009f35e58474332b81124cb4435b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1559,
    "chunk_index": 83,
    "total_chunks": 156
  },
  {
    "id": "641e207de8029c40380609ac679ac6c2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1593,
    "chunk_index": 84,
    "total_chunks": 156
  },
  {
    "id": "3a757cc4fc93129b072af21226dc28fe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1626,
    "chunk_index": 85,
    "total_chunks": 156
  },
  {
    "id": "a9403c593fd894bf5d229444210a5706",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1634,
    "chunk_index": 86,
    "total_chunks": 156
  },
  {
    "id": "26fbddfa2f5a2c34fe7cda876caca2e6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "|\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1632,
    "chunk_index": 87,
    "total_chunks": 156
  },
  {
    "id": "197ee68ceaae5df50521d54db13e181e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "|\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1641,
    "chunk_index": 88,
    "total_chunks": 156
  },
  {
    "id": "1ffc1eff22b999bfdb3a970c22477b9c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "|\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1654,
    "chunk_index": 89,
    "total_chunks": 156
  },
  {
    "id": "836d091225e9b3a3920a54369601c33d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "|\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1673,
    "chunk_index": 90,
    "total_chunks": 156
  },
  {
    "id": "62fbc172552cf8fd2a971bd3b3b608d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "|\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1687,
    "chunk_index": 91,
    "total_chunks": 156
  },
  {
    "id": "6c961fa49fefe62f1ba05297c47d0b3e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "|\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1699,
    "chunk_index": 92,
    "total_chunks": 156
  },
  {
    "id": "c591dcdbffa85327b8c88f6d5a797525",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "|\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1739,
    "chunk_index": 93,
    "total_chunks": 156
  },
  {
    "id": "a44f1051956e0dc0577177c8efb231ce",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "|\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1770,
    "chunk_index": 94,
    "total_chunks": 156
  },
  {
    "id": "72ece1914678e4a320e41242c45adb9b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "|\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1778,
    "chunk_index": 95,
    "total_chunks": 156
  },
  {
    "id": "cd0d6f26612afef6056d95b5ad991da0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "|\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1819,
    "chunk_index": 96,
    "total_chunks": 156
  },
  {
    "id": "057032a8d69201a217e2ed8c46ebd26a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "|\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/);\nYou should pass fn to the",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1830,
    "chunk_index": 97,
    "total_chunks": 156
  },
  {
    "id": "07707fc911574e400f1dd534a51cc4d9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() method",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1799,
    "chunk_index": 98,
    "total_chunks": 156
  },
  {
    "id": "32a4db0115a271634dc559a417809c9e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1767,
    "chunk_index": 99,
    "total_chunks": 156
  },
  {
    "id": "8f2a339314bb34e1eeb7f2bbc892fdfb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ", \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1747,
    "chunk_index": 100,
    "total_chunks": 156
  },
  {
    "id": "4261c954f6e73d6c2bc07d4bab817432",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1791,
    "chunk_index": 101,
    "total_chunks": 156
  },
  {
    "id": "1cbe7a00fd1fe3be678caa300bb1a922",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1807,
    "chunk_index": 102,
    "total_chunks": 156
  },
  {
    "id": "dbd4b08c97f9c1a8ea59050be85e9f4c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1811,
    "chunk_index": 103,
    "total_chunks": 156
  },
  {
    "id": "7aee0e8dff3ae23e959b8ba9384bb148",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1812,
    "chunk_index": 104,
    "total_chunks": 156
  },
  {
    "id": "cec6499a010225795524b6791fac28e2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1820,
    "chunk_index": 105,
    "total_chunks": 156
  },
  {
    "id": "84a388855115e8c7f31eb9210190ced6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1830,
    "chunk_index": 106,
    "total_chunks": 156
  },
  {
    "id": "d077853326ffa96ccabe21ab94539b2b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1834,
    "chunk_index": 107,
    "total_chunks": 156
  },
  {
    "id": "f88f69843d3ace8474e20456d5c274f8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1835,
    "chunk_index": 108,
    "total_chunks": 156
  },
  {
    "id": "40416ce9387981fb1bffaaf6c52d2a03",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1846,
    "chunk_index": 109,
    "total_chunks": 156
  },
  {
    "id": "7b61454bb0ded29b6e47db168fae6fe5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1880,
    "chunk_index": 110,
    "total_chunks": 156
  },
  {
    "id": "8bb27ec8521754848ad66d667f494758",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1913,
    "chunk_index": 111,
    "total_chunks": 156
  },
  {
    "id": "45fd4071f0070b343d3695dd017b3501",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1921,
    "chunk_index": 112,
    "total_chunks": 156
  },
  {
    "id": "45490f9dc8d62a3c56ef68304129a5e5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1915,
    "chunk_index": 113,
    "total_chunks": 156
  },
  {
    "id": "b0b06042887a214d1dc6bf69a5dee583",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1924,
    "chunk_index": 114,
    "total_chunks": 156
  },
  {
    "id": "1fe071b2b1d3efb6ceaba4678d2f275b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1937,
    "chunk_index": 115,
    "total_chunks": 156
  },
  {
    "id": "18c6e01924bac7191f121a30a13fbbea",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1956,
    "chunk_index": 116,
    "total_chunks": 156
  },
  {
    "id": "d2f9d34e692fbe4eba9b60dd038c3d14",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1970,
    "chunk_index": 117,
    "total_chunks": 156
  },
  {
    "id": "98c1fdb8b13c5d7713455fd3e21daa38",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1982,
    "chunk_index": 118,
    "total_chunks": 156
  },
  {
    "id": "87018db53eaac554bd0adfcbbecdc59f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 2022,
    "chunk_index": 119,
    "total_chunks": 156
  },
  {
    "id": "ff60272c64d693d672cd269084d9d321",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 2053,
    "chunk_index": 120,
    "total_chunks": 156
  },
  {
    "id": "ab74a2abf438eb6e6a0a186bde10ae62",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 2061,
    "chunk_index": 121,
    "total_chunks": 156
  },
  {
    "id": "ce074ce386cba78e40db9a18b5e08a65",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 2102,
    "chunk_index": 122,
    "total_chunks": 156
  },
  {
    "id": "d4d71c52db5eda511932fc8fdd580c83",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn/);\nYou should call the",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 2115,
    "chunk_index": 123,
    "total_chunks": 156
  },
  {
    "id": "55eec3aab933a030bec1b4e5cafead97",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*; \\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn/); You should call thetoLowerCase() method on fn",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 2077,
    "chunk_index": 124,
    "total_chunks": 156
  },
  {
    "id": "4b86deddfc186b4f74fb90c2514eb0b0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*return\\s+str2\\ replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn/); You should call thetoLowerCase() method on fnjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1981,
    "chunk_index": 125,
    "total_chunks": 156
  },
  {
    "id": "2e935b03c286b0a15de4a87e34504032",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match/); Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn/); You should call thetoLowerCase() method on fnjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 1986,
    "chunk_index": 126,
    "total_chunks": 156
  },
  {
    "id": "9ac692596dbfda12e6a27e4d9b7554a4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn/); You should call thetoLowerCase() method on fnjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 2013,
    "chunk_index": 127,
    "total_chunks": 156
  },
  {
    "id": "7c9914e39db5c6d0d26da04e49bfb02a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn/); You should call thetoLowerCase() method on fnjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 2029,
    "chunk_index": 128,
    "total_chunks": 156
  },
  {
    "id": "14ed86ef02a91ffdb44ddf38640cac68",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn/); You should call thetoLowerCase() method on fnjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 2033,
    "chunk_index": 129,
    "total_chunks": 156
  },
  {
    "id": "c9736dc3966c35a5815bedea90bfe4fd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn/); You should call thetoLowerCase() method on fnjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 2034,
    "chunk_index": 130,
    "total_chunks": 156
  },
  {
    "id": "68cbd210a25c14c970dd947ca1058614",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn/); You should call thetoLowerCase() method on fnjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 2042,
    "chunk_index": 131,
    "total_chunks": 156
  },
  {
    "id": "1f5b2c0d9d6e6695c6222557d228b9a1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn/); You should call thetoLowerCase() method on fnjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 2052,
    "chunk_index": 132,
    "total_chunks": 156
  },
  {
    "id": "fb5a4acf19be836fe8eb38a2c4fc4c02",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn/); You should call thetoLowerCase() method on fnjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 2056,
    "chunk_index": 133,
    "total_chunks": 156
  },
  {
    "id": "e91423e55cffa6838306379ae9370929",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn/); You should call thetoLowerCase() method on fnjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 2057,
    "chunk_index": 134,
    "total_chunks": 156
  },
  {
    "id": "9205c2b42f2fa9cfd70a5b4f6d0840c2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn/); You should call thetoLowerCase() method on fnjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 2068,
    "chunk_index": 135,
    "total_chunks": 156
  },
  {
    "id": "d5cf1cf9306aa7af22b083b7da31d084",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn/); You should call thetoLowerCase() method on fnjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 2102,
    "chunk_index": 136,
    "total_chunks": 156
  },
  {
    "id": "83001cd0440eed160aa5bff7c4b11d9b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn/); You should call thetoLowerCase() method on fnjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 2135,
    "chunk_index": 137,
    "total_chunks": 156
  },
  {
    "id": "b61ab7dea95fe14faba2489fbd8c2ac6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn/); You should call thetoLowerCase() method on fnjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 2143,
    "chunk_index": 138,
    "total_chunks": 156
  },
  {
    "id": "0b1ce0034919482791acf5ad6715aa03",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn/); You should call thetoLowerCase() method on fnjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 2143,
    "chunk_index": 139,
    "total_chunks": 156
  },
  {
    "id": "ad4d3191f966c2701c34e585fb9d6346",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn/); You should call thetoLowerCase() method on fnjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 2152,
    "chunk_index": 140,
    "total_chunks": 156
  },
  {
    "id": "43cca9a0a7b7ae9df2a39f075edf73f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn/); You should call thetoLowerCase() method on fnjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 2165,
    "chunk_index": 141,
    "total_chunks": 156
  },
  {
    "id": "aa327dde6f045f5e46567d37eea9f19c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn/); You should call thetoLowerCase() method on fnjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 2184,
    "chunk_index": 142,
    "total_chunks": 156
  },
  {
    "id": "5f7d6ea64f34ccd8ee709b27da8d40a1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn/); You should call thetoLowerCase() method on fnjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 2198,
    "chunk_index": 143,
    "total_chunks": 156
  },
  {
    "id": "d15372abdad58302d8e0ba5de8f3123b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn/); You should call thetoLowerCase() method on fnjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 2210,
    "chunk_index": 144,
    "total_chunks": 156
  },
  {
    "id": "75fce48673a3cd5168fed13f30498eb5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn/); You should call thetoLowerCase() method on fnjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 2250,
    "chunk_index": 145,
    "total_chunks": 156
  },
  {
    "id": "75dbb90caed4e16c7e130c67c0ada1c9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn/); You should call thetoLowerCase() method on fnjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 2281,
    "chunk_index": 146,
    "total_chunks": 156
  },
  {
    "id": "8a988be78bd7afbc08374107ce6c2e7b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn/); You should call thetoLowerCase() method on fnjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 2289,
    "chunk_index": 147,
    "total_chunks": 156
  },
  {
    "id": "a3e46b5ce09126f5517b5ef459006156",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn/); You should call thetoLowerCase() method on fnjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 2330,
    "chunk_index": 148,
    "total_chunks": 156
  },
  {
    "id": "eabcc5d1acec4f9358f67c7d23a53c29",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn/); You should call thetoLowerCase() method on fnjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 2338,
    "chunk_index": 149,
    "total_chunks": 156
  },
  {
    "id": "577c5d89d72a24173b769b8393b4ad80",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "callback function should have fn as the second parameter js assert match(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn/); Your callback function should have args as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn/); You should call thetoLowerCase() method on fnjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 2403,
    "chunk_index": 150,
    "total_chunks": 156
  },
  {
    "id": "fcc553406a9eda803ae51baa42a53e77",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "as the third parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>/); Your callback function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/); Your callback function should return the result of calling thehasOwnProperty() method on the spreadsheetFunctions objectjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(/); You should pass fn to thehasOwnProperty() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn/); You should call thetoLowerCase() method on fnjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n\"*\": (x, y) => x * y,\n\"/\": (x, y) => x / y,\n}\nconst infixEval = (str, regex) => str",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 2119,
    "chunk_index": 151,
    "total_chunks": 156
  },
  {
    "id": "c82158d97f7fbf9e804f16f77f2a5acd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "fnjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\s*\\[\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\]\\s*\\(\\s*toNumberList\\(\\s*args\\s*\\)\\s*\\)\\s*;\\s*return\\s+str2\\replace\\(\\s*functionCall\\s*,\\s*\\(\\s*match\\s*,\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*spreadsheetFunctions\\hasOwnProperty\\(\\s*fn\\toLowerCase\\(\\s*\\)\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const infixToFunction = { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } const infixEval = (str, regex) => strreplace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator);\nconst highPrecedence = str => {\nconst regex = /([\\d",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 579,
    "chunk_index": 152,
    "total_chunks": 156
  },
  {
    "id": "91969e3758cb960f271306d91afd87c8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const infixToFunction = { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } const infixEval = (str, regex) => strreplace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator); const highPrecedence = str => { const regex = /([\\d]+)([*\\/])([\\d ]+)/;\nconst str2 = infixEval(str, regex);\nreturn str === str2 str : highPrecedence(str2);\n}\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\n--fcc-editable-region--\nconst applyFunction = str => {\nconst noHigh = highPrecedence(str);\nconst infix = /([\\d ]+)([+-])([\\d ]+)/;\nconst str2 = infixEval(noHigh, infix);\nconst functionCall = /([a-z0-9])(([0-9 , ]))( *()/i;\nconst toNumberList = args => args split(\",\") map(parseFloat);\nconst apply = (fn, args) => spreadsheetFunctionsfn toLowerCase();\nreturn str2 replace(functionCall, () => {})\n}\n--fcc-editable-region--\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 153,
    "total_chunks": 156
  },
  {
    "id": "c6d776e04b0eeb91a04f2fea01034c6f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "noHigh = highPrecedence(str); const infix = /([\\d ]+)([+-])([\\d ]+)/; const str2 = infixEval(noHigh, infix); const functionCall = /([a-z0-9])(([0-9 , ]))( *()/i; const toNumberList = args => args split(\",\") map(parseFloat); const apply = (fn, args) => spreadsheetFunctionsfn toLowerCase(); return str2 replace(functionCall, () => {}) } --fcc-editable-region-- const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => StringfromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 154,
    "total_chunks": 156
  },
  {
    "id": "c86b42ae627f63f3065d2fdb05a0db5e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99) forEach(number => { createLabel(number); letters forEach(letter => { const input = document createElement(\"input\"); input type = \"text\"; input id = letter + number; input ariaLabel = letter + number; input onchange = update; containerappendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4626420eeecd51f241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 167,
    "chunk_index": 155,
    "total_chunks": 156
  },
  {
    "id": "63591ca59b4736302ac44b26dca10a12",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d47c8f58107d10f1e5106\ntitle: Step 94\nchallengeType: 0\ndashedName: step-94\n--description--\nThe first argument for your evalFormula call needs to be the contents of the cell (which you stored in value) However, the contents start with an = character to trigger the function, so you need to pass the substring of value starting at index 1 --hints--\nYou should pass value as the first argument to your evalFormula() call js\nassert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value/);\nYou should call the slice() method on the value argument js\nassert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 43
  },
  {
    "id": "cd5b0a702ee844d15c7c67f73421073b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "start with an = character to trigger the function, so you need to pass the substring of value starting at index 1 --hints-- You should pass value as the first argument to your evalFormula() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value/); You should call the slice() method on the value argument js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 43
  },
  {
    "id": "05df8b51a9b2262e11e400f2f9e0b2f6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to trigger the function, so you need to pass the substring of value starting at index 1 --hints-- You should pass value as the first argument to your evalFormula() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value/); You should call the slice() method on the value argument js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 514,
    "chunk_index": 2,
    "total_chunks": 43
  },
  {
    "id": "0a7c854c86401615aa1680f34e99c8db",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to trigger the function, so you need to pass the substring of value starting at index 1 --hints-- You should pass value as the first argument to your evalFormula() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value/); You should call the slice() method on the value argument js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 529,
    "chunk_index": 3,
    "total_chunks": 43
  },
  {
    "id": "de37accafe408c30049cd8e6dcde83aa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to trigger the function, so you need to pass the substring of value starting at index 1 --hints-- You should pass value as the first argument to your evalFormula() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value/); You should call the slice() method on the value argument js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 555,
    "chunk_index": 4,
    "total_chunks": 43
  },
  {
    "id": "4c0f4d87451c1081bf98b218a2ce5868",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to trigger the function, so you need to pass the substring of value starting at index 1 --hints-- You should pass value as the first argument to your evalFormula() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value/); You should call the slice() method on the value argument js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 579,
    "chunk_index": 5,
    "total_chunks": 43
  },
  {
    "id": "d061b0a28c83c1689082ebe6fb125cce",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to trigger the function, so you need to pass the substring of value starting at index 1 --hints-- You should pass value as the first argument to your evalFormula() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value/); You should call the slice() method on the value argument js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 600,
    "chunk_index": 6,
    "total_chunks": 43
  },
  {
    "id": "34d1b22c9e75fddead76dee94901f84f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to trigger the function, so you need to pass the substring of value starting at index 1 --hints-- You should pass value as the first argument to your evalFormula() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value/); You should call the slice() method on the value argument js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 602,
    "chunk_index": 7,
    "total_chunks": 43
  },
  {
    "id": "0445b44793bb19ef1d16370852d3b693",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to trigger the function, so you need to pass the substring of value starting at index 1 --hints-- You should pass value as the first argument to your evalFormula() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value/); You should call the slice() method on the value argument js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 609,
    "chunk_index": 8,
    "total_chunks": 43
  },
  {
    "id": "195a7cd0247d0cfadc5e4d3cb2992c31",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to trigger the function, so you need to pass the substring of value starting at index 1 --hints-- You should pass value as the first argument to your evalFormula() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value/); You should call the slice() method on the value argument js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 624,
    "chunk_index": 9,
    "total_chunks": 43
  },
  {
    "id": "1d961048c4e7ce31b55c763420658b5e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to trigger the function, so you need to pass the substring of value starting at index 1 --hints-- You should pass value as the first argument to your evalFormula() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value/); You should call the slice() method on the value argument js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 638,
    "chunk_index": 10,
    "total_chunks": 43
  },
  {
    "id": "4cce7016be673f0c6a51c2731e795d59",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to trigger the function, so you need to pass the substring of value starting at index 1 --hints-- You should pass value as the first argument to your evalFormula() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value/); You should call the slice() method on the value argument js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 638,
    "chunk_index": 11,
    "total_chunks": 43
  },
  {
    "id": "aa916a5c0362366f83a52bb0fbb8e0e7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to trigger the function, so you need to pass the substring of value starting at index 1 --hints-- You should pass value as the first argument to your evalFormula() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value/); You should call the slice() method on the value argument js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\(:slice|substring)\\(/);\nYou should pass the number 1 as the argument to your",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 657,
    "chunk_index": 12,
    "total_chunks": 43
  },
  {
    "id": "b15b0817e1ceab220c1d4bccc8cf1e05",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of value starting at index 1 --hints-- You should pass value as the first argument to your evalFormula() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value/); You should call the slice() method on the value argument js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\(:slice|substring)\\(/); You should pass the number 1 as the argument to yourslice() call",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 648,
    "chunk_index": 13,
    "total_chunks": 43
  },
  {
    "id": "ff15671b38741882ad7091669dd4bda8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "value starting at index 1 --hints-- You should pass value as the first argument to your evalFormula() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value/); You should call the slice() method on the value argument js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\(:slice|substring)\\(/); You should pass the number 1 as the argument to yourslice() calljs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 650,
    "chunk_index": 14,
    "total_chunks": 43
  },
  {
    "id": "9c0fd7aaaf023adc4e83889a5ba0b62f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "starting at index 1 --hints-- You should pass value as the first argument to your evalFormula() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value/); You should call the slice() method on the value argument js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\(:slice|substring)\\(/); You should pass the number 1 as the argument to yourslice() calljs assertmatch(code, /const\\s+update\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 661,
    "chunk_index": 15,
    "total_chunks": 43
  },
  {
    "id": "9dea28e427eb5ee92d2473340b05b7f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "at index 1 --hints-- You should pass value as the first argument to your evalFormula() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value/); You should call the slice() method on the value argument js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\(:slice|substring)\\(/); You should pass the number 1 as the argument to yourslice() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 691,
    "chunk_index": 16,
    "total_chunks": 43
  },
  {
    "id": "e2296bdbb5fb39ce0d9347c0ad0bf4d2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "at index 1 --hints-- You should pass value as the first argument to your evalFormula() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value/); You should call the slice() method on the value argument js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\(:slice|substring)\\(/); You should pass the number 1 as the argument to yourslice() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 695,
    "chunk_index": 17,
    "total_chunks": 43
  },
  {
    "id": "4673c7acf44bd986fb196663981cfaaa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "at index 1 --hints-- You should pass value as the first argument to your evalFormula() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value/); You should call the slice() method on the value argument js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\(:slice|substring)\\(/); You should pass the number 1 as the argument to yourslice() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 708,
    "chunk_index": 18,
    "total_chunks": 43
  },
  {
    "id": "b9e30b00905e1ac8ade29fa42d30083d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "at index 1 --hints-- You should pass value as the first argument to your evalFormula() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value/); You should call the slice() method on the value argument js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\(:slice|substring)\\(/); You should pass the number 1 as the argument to yourslice() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 710,
    "chunk_index": 19,
    "total_chunks": 43
  },
  {
    "id": "da7555610e1c218cf5b48045d3cec31f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "at index 1 --hints-- You should pass value as the first argument to your evalFormula() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value/); You should call the slice() method on the value argument js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\(:slice|substring)\\(/); You should pass the number 1 as the argument to yourslice() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 736,
    "chunk_index": 20,
    "total_chunks": 43
  },
  {
    "id": "dbe6f2e337340e811f3a9bc87d97a0e0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "at index 1 --hints-- You should pass value as the first argument to your evalFormula() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value/); You should call the slice() method on the value argument js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\(:slice|substring)\\(/); You should pass the number 1 as the argument to yourslice() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 744,
    "chunk_index": 21,
    "total_chunks": 43
  },
  {
    "id": "b0320fbf3592bae582dcf5e42e1c2aa6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "at index 1 --hints-- You should pass value as the first argument to your evalFormula() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value/); You should call the slice() method on the value argument js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\(:slice|substring)\\(/); You should pass the number 1 as the argument to yourslice() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 746,
    "chunk_index": 22,
    "total_chunks": 43
  },
  {
    "id": "0d1d4c370f5a66d37b02d0889f01b751",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "at index 1 --hints-- You should pass value as the first argument to your evalFormula() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value/); You should call the slice() method on the value argument js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\(:slice|substring)\\(/); You should pass the number 1 as the argument to yourslice() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 753,
    "chunk_index": 23,
    "total_chunks": 43
  },
  {
    "id": "563dfd2ddc7aa5d1b52dcbf65e1a7882",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "at index 1 --hints-- You should pass value as the first argument to your evalFormula() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value/); You should call the slice() method on the value argument js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\(:slice|substring)\\(/); You should pass the number 1 as the argument to yourslice() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 763,
    "chunk_index": 24,
    "total_chunks": 43
  },
  {
    "id": "4a6be67cf0ff354694214a72d548da8c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "at index 1 --hints-- You should pass value as the first argument to your evalFormula() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value/); You should call the slice() method on the value argument js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\(:slice|substring)\\(/); You should pass the number 1 as the argument to yourslice() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 789,
    "chunk_index": 25,
    "total_chunks": 43
  },
  {
    "id": "179c1edf4d029c4012d92bc592508f55",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "at index 1 --hints-- You should pass value as the first argument to your evalFormula() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value/); You should call the slice() method on the value argument js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\(:slice|substring)\\(/); You should pass the number 1 as the argument to yourslice() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 813,
    "chunk_index": 26,
    "total_chunks": 43
  },
  {
    "id": "de8f5d13d7005733344cbf4d31d88102",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "at index 1 --hints-- You should pass value as the first argument to your evalFormula() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value/); You should call the slice() method on the value argument js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\(:slice|substring)\\(/); You should pass the number 1 as the argument to yourslice() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 828,
    "chunk_index": 27,
    "total_chunks": 43
  },
  {
    "id": "85aa127ece8d483098cf348d832cffa6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "at index 1 --hints-- You should pass value as the first argument to your evalFormula() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value/); You should call the slice() method on the value argument js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\(:slice|substring)\\(/); You should pass the number 1 as the argument to yourslice() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 854,
    "chunk_index": 28,
    "total_chunks": 43
  },
  {
    "id": "2d8234b41cbf250c1deefc34f5c6f45b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "at index 1 --hints-- You should pass value as the first argument to your evalFormula() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value/); You should call the slice() method on the value argument js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\(:slice|substring)\\(/); You should pass the number 1 as the argument to yourslice() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 878,
    "chunk_index": 29,
    "total_chunks": 43
  },
  {
    "id": "59b4cc0068e057d1ba4608c3dab607ed",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "at index 1 --hints-- You should pass value as the first argument to your evalFormula() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value/); You should call the slice() method on the value argument js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\(:slice|substring)\\(/); You should pass the number 1 as the argument to yourslice() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 899,
    "chunk_index": 30,
    "total_chunks": 43
  },
  {
    "id": "bc1858c0cbba00a0e66e443b5ef2a204",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "at index 1 --hints-- You should pass value as the first argument to your evalFormula() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value/); You should call the slice() method on the value argument js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\(:slice|substring)\\(/); You should pass the number 1 as the argument to yourslice() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 901,
    "chunk_index": 31,
    "total_chunks": 43
  },
  {
    "id": "d8e343bdedce2edb33b60314b8340e4b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "at index 1 --hints-- You should pass value as the first argument to your evalFormula() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value/); You should call the slice() method on the value argument js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\(:slice|substring)\\(/); You should pass the number 1 as the argument to yourslice() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 908,
    "chunk_index": 32,
    "total_chunks": 43
  },
  {
    "id": "2e43025e20fc4e8540eb6b81b6645209",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "at index 1 --hints-- You should pass value as the first argument to your evalFormula() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value/); You should call the slice() method on the value argument js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\(:slice|substring)\\(/); You should pass the number 1 as the argument to yourslice() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 923,
    "chunk_index": 33,
    "total_chunks": 43
  },
  {
    "id": "548d91bced16635eef6284a235b94f1f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "at index 1 --hints-- You should pass value as the first argument to your evalFormula() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value/); You should call the slice() method on the value argument js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\(:slice|substring)\\(/); You should pass the number 1 as the argument to yourslice() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 937,
    "chunk_index": 34,
    "total_chunks": 43
  },
  {
    "id": "86d6d4bcda3eb97254369afc6c301a58",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "at index 1 --hints-- You should pass value as the first argument to your evalFormula() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value/); You should call the slice() method on the value argument js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\(:slice|substring)\\(/); You should pass the number 1 as the argument to yourslice() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 937,
    "chunk_index": 35,
    "total_chunks": 43
  },
  {
    "id": "fe728ebd28a7298acab87d8ffe8e041f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "at index 1 --hints-- You should pass value as the first argument to your evalFormula() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value/); You should call the slice() method on the value argument js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\(:slice|substring)\\(/); You should pass the number 1 as the argument to yourslice() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\(:slice|substring)\\(\\s*1\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 955,
    "chunk_index": 36,
    "total_chunks": 43
  },
  {
    "id": "149cd60b84eda71128c96e1b5e64c892",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "at index 1 --hints-- You should pass value as the first argument to your evalFormula() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value/); You should call the slice() method on the value argument js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\(:slice|substring)\\(/); You should pass the number 1 as the argument to yourslice() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\(:slice|substring)\\(\\s*1\\s*\\)\\s*\\)\\s*;/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 1011,
    "chunk_index": 37,
    "total_chunks": 43
  },
  {
    "id": "b74c6025de61831632d45c3ed0dadc17",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value/); You should call the slice() method on the value argument js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\(:slice|substring)\\(/); You should pass the number 1 as the argument to yourslice() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\(:slice|substring)\\(\\s*1\\s*\\)\\s*\\)\\s*;/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n\"*\": (x, y) => x * y,\n\"/\": (x, y) => x / y,\n}\nconst infixEval = (str, regex) => str",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 1068,
    "chunk_index": 38,
    "total_chunks": 43
  },
  {
    "id": "b466c445a790daa303508ed61fe16737",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "yourslice() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\(:slice|substring)\\(\\s*1\\s*\\)\\s*\\)\\s*;/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const infixToFunction = { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } const infixEval = (str, regex) => strreplace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator);\nconst highPrecedence = str => {\nconst regex = /([\\d",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 39,
    "total_chunks": 43
  },
  {
    "id": "dd74fe557f2bc7e5c3d8437297a43c1d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const infixToFunction = { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } const infixEval = (str, regex) => strreplace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator); const highPrecedence = str => { const regex = /([\\d]+)([*\\/])([\\d ]+)/;\nconst str2 = infixEval(str, regex);\nreturn str === str2 str : highPrecedence(str2);\n}\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst applyFunction = str => {\nconst noHigh = highPrecedence(str);\nconst infix = /([\\d ]+)([+-])([\\d ]+)/;\nconst str2 = infixEval(noHigh, infix);\nconst functionCall = /([a-z0-9])(([0-9 , ]))( *()/i;\nconst toNumberList = args => args split(\",\") map(parseFloat);\nconst apply = (fn, args) => spreadsheetFunctionsfn toLowerCase();\nreturn str2 replace(functionCall, (match, fn, args) => spreadsheetFunctions hasOwnProperty(fn toLowerCase()) apply(fn, args) : match);\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 505,
    "chunk_index": 40,
    "total_chunks": 43
  },
  {
    "id": "534c4df325baabed6c629fde5cb1dad3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "]+)([+-])([\\d ]+)/; const str2 = infixEval(noHigh, infix); const functionCall = /([a-z0-9])(([0-9 , ]))( *()/i; const toNumberList = args => args split(\",\") map(parseFloat); const apply = (fn, args) => spreadsheetFunctionsfn toLowerCase(); return str2 replace(functionCall, (match, fn, args) => spreadsheetFunctions hasOwnProperty(fn toLowerCase()) apply(fn, args) : match); } const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => StringfromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\nconst functionExpanded = applyFunction(cellExpanded);\nreturn functionExpanded === x functionExpanded : evalFormula(functionExpanded, cells);\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 41,
    "total_chunks": 43
  },
  {
    "id": "5e6e8cabe8fb7ec7f984c2882dc909a6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "=> idToText(match toUpperCase())); const functionExpanded = applyFunction(cellExpanded); return functionExpanded === x functionExpanded : evalFormula(functionExpanded, cells); } window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99) forEach(number => { createLabel(number); letters forEach(letter => { const input = document createElement(\"input\"); input type = \"text\"; inputid = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\n--fcc-editable-region--\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\nelement value = evalFormula();\n}\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d47c8f58107d10f1e5106.md",
      "source_type": "git_repo"
    },
    "token_count": 219,
    "chunk_index": 42,
    "total_chunks": 43
  },
  {
    "id": "3d29c0bc88fb43bdb06fe101d1521450",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d486aec20f7d2a581cc36.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d486aec20f7d2a581cc36\ntitle: Step 96\nchallengeType: 0\ndashedName: step-96\n--description--\nUnfortunately, that children property is returning a collection of elements, which is array-like but not an array Wrap your second argument in Array from() to convert it to an array --hints--\nYou should wrap your document getElementById('container') children in Array from() js\nassert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*Array\\ from\\(\\s*document\\ getElementById\\(\\s*('|\"|`)container\\9\\s*\\)\\ children\\s*\\)\\s*\\)\\s*; /);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5329,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d486aec20f7d2a581cc36.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "8f79c074ba47f4a05869dde642ff9138",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d486aec20f7d2a581cc36.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "but not an array Wrap your second argument in Array from() to convert it to an array --hints-- You should wrap your document getElementById('container') children in Array from() js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*Array\\ from\\(\\s*document\\ getElementById\\(\\s*('|\"|`)container\\9\\s*\\)\\ children\\s*\\)\\s*\\)\\s*; /); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n\"*\": (x, y) => x * y,\n\"/\": (x, y) => x / y,\n}\nconst infixEval = (str, regex) => str",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5329,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d486aec20f7d2a581cc36.md",
      "source_type": "git_repo"
    },
    "token_count": 531,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "7b0d4658668924ca4fe1b9f3f030e370",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d486aec20f7d2a581cc36.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "from\\(\\s*document\\ getElementById\\(\\s*('|\"|`)container\\9\\s*\\)\\ children\\s*\\)\\s*\\)\\s*; /); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const infixToFunction = { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } const infixEval = (str, regex) => strreplace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator);\nconst highPrecedence = str => {\nconst regex = /([\\d ]+)([*\\/])([\\d ]+)/;\nconst str2 = infixEval(str, regex);\nreturn str === str2 str : highPrecedence(str2);\n}\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst applyFunction = str => {\nconst noHigh = highPrecedence(str);\nconst infix = /([\\d ]+)([+-])([\\d ]+)/;\nconst str2 = infixEval(noHigh, infix);\nconst functionCall = /([a-z0-9])(([0-9 , ]))( *()/i;\nconst toNumberList = args => args split(\",\") map(parseFloat);\nconst apply = (fn, args) => spreadsheetFunctionsfn toLowerCase();\nreturn str2 replace(functionCall, (match, fn, args) => spreadsheetFunctions hasOwnProperty(fn toLowerCase())",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5329,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d486aec20f7d2a581cc36.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "6d3be2ba673bfae7fea3061759ac673f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d486aec20f7d2a581cc36.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/ 2 - 1; return isEven(length) average([sorted[middle], sorted[middle + 1]]) : sorted[Math ceil(middle)]; } const spreadsheetFunctions = { sum, average, median } const applyFunction = str => { const noHigh = highPrecedence(str); const infix = /([\\d ]+)([+-])([\\d ]+)/; const str2 = infixEval(noHigh, infix); const functionCall = /([a-z0-9])(([0-9 , ]))( *()/i; const toNumberList = args => args split(\",\") map(parseFloat); const apply = (fn, args) => spreadsheetFunctionsfn toLowerCase(); return str2 replace(functionCall, (match, fn, args) => spreadsheetFunctions hasOwnProperty(fn toLowerCase())apply(fn, args) : match);\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\nconst functionExpanded = applyFunction(cellExpanded);\nreturn functionExpanded === x functionExpanded : evalFormula(functionExpanded, cells);\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5329,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d486aec20f7d2a581cc36.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "10ef84ac3597e8270690339299f62709",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d486aec20f7d2a581cc36.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "const addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num)); const rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2))); const cellRegex = /[A-J][1-9][0-9] /gi; const cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase())); const functionExpanded = applyFunction(cellExpanded); return functionExpanded === x functionExpanded : evalFormula(functionExpanded, cells); } window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); labelclassName = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\n--fcc-editable-region--\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\nelement value = evalFormula(value slice(1), document getElementById(\"container\") children);\n}\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5329,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d486aec20f7d2a581cc36.md",
      "source_type": "git_repo"
    },
    "token_count": 328,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "43b749afe6931f3407e006759ad83d4a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d48b936802fd34c3f05af.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d48b936802fd34c3f05af\ntitle: Step 97\nchallengeType: 0\ndashedName: step-97\n--description--\nYour spreadsheet is now functional However, you don't have support for very many formulas Add an even property to your spreadsheetFunctions It should take a nums parameter, and return the result of filtering the nums array to only include even numbers Use a reference to your isEven function to help --hints--\nYour spreadsheetFunctions object should have an even property js\nassert property(spreadsheetFunctions, \"even\");\nYour even property should be a function js\nassert isFunction(spreadsheetFunctions even);\nYour even function should take a nums parameter js\nassert match(code, /even\\s*:\\s*(\\(\\s*nums\\s*\\)|nums)\\s*=>/)\nYour even function should use an implicit return js\nassert notMatch(code, /even\\s*:\\s*(\\(\\s*nums\\s*\\)|nums)\\s*=>\\s*\\{/)\nYour even function should return the result of calling the filter() method on nums js\nassert match(code, /even\\s*:\\s*(\\(\\s*nums\\s*\\)|nums)\\s*=>\\s*nums\\s*\\ \\s*filter/)\nYou should pass a reference to your isEven() function as the callback for the filter() method js\nassert match(code, /even\\s*:\\s*(\\(\\s*nums\\s*\\)|nums)\\s*=>\\s*nums\\s*\\ \\s*filter\\s*\\(\\s*isEven\\s*\\)/)\nYour even function should return an array of even numbers js\nassert deepEqual(spreadsheetFunctions even([1, 2, 3, 4, 5, 6]), [2, 4, 6]);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5663,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d48b936802fd34c3f05af.md",
      "source_type": "git_repo"
    },
    "token_count": 432,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "dbd46136c8c6e76d6811f51f471f61ee",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d48b936802fd34c3f05af.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "result of calling the filter() method on nums js assert match(code, /even\\s*:\\s*(\\(\\s*nums\\s*\\)|nums)\\s*=>\\s*nums\\s*\\ \\s*filter/) You should pass a reference to your isEven() function as the callback for the filter() method js assert match(code, /even\\s*:\\s*(\\(\\s*nums\\s*\\)|nums)\\s*=>\\s*nums\\s*\\ \\s*filter\\s*\\(\\s*isEven\\s*\\)/) Your even function should return an array of even numbers js assert deepEqual(spreadsheetFunctions even([1, 2, 3, 4, 5, 6]), [2, 4, 6]); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n\"*\": (x, y) => x * y,\n\"/\": (x, y) => x / y,\n}\nconst infixEval = (str, regex) => str replace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator);\nconst highPrecedence = str => {\nconst regex = /([\\d ]+)([*\\/])([\\d ]+)/;\nconst str2 = infixEval(str, regex);\nreturn str === str2 str : highPrecedence(str2);\n}\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5663,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d48b936802fd34c3f05af.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "1d89e98a92bbb5ee4db4be7358ea008b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d48b936802fd34c3f05af.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "=== str2 str : highPrecedence(str2); } const isEven = num => num % 2 === 0; const sum = nums => nums reduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / nums length; const median = nums => { const sorted = nums slice() sort((a, b) => a - b); const length = sorted length; const middle = length / 2 - 1; return isEven(length) average([sorted[middle], sorted[middle + 1]]) : sorted[Mathceil(middle)];\n}\n--fcc-editable-region--\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian,\n}\n--fcc-editable-region--\nconst applyFunction = str => {\nconst noHigh = highPrecedence(str);\nconst infix = /([\\d ]+)([+-])([\\d ]+)/;\nconst str2 = infixEval(noHigh, infix);\nconst functionCall = /([a-z0-9])(([0-9 , ]))( *()/i;\nconst toNumberList = args => args split(\",\") map(parseFloat);\nconst apply = (fn, args) => spreadsheetFunctionsfn toLowerCase();\nreturn str2 replace(functionCall, (match, fn, args) => spreadsheetFunctions hasOwnProperty(fn toLowerCase()) apply(fn, args) : match);\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5663,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d48b936802fd34c3f05af.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "f86cfc9d00fdd22d651a941d2a7ff0a3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d48b936802fd34c3f05af.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code)); const evalFormula = (x, cells) => { const idToText = id => cells find(cell => cell id === id) value; const rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi; const rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2)); const elemValue = num => character => idToText(character + num); const addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num)); const rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2)map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\nconst functionExpanded = applyFunction(cellExpanded);\nreturn functionExpanded === x functionExpanded : evalFormula(functionExpanded, cells);\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\nelement value = evalFormula(value slice(1), Array from(document getElementById(\"container\") children));\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5663,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d48b936802fd34c3f05af.md",
      "source_type": "git_repo"
    },
    "token_count": 438,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "fe124a37897215ddd3885c21a6876aad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d498c8ebc31d3f753b22e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d498c8ebc31d3f753b22e\ntitle: Step 98\nchallengeType: 0\ndashedName: step-98\n--description--\nAdd a firsttwo property which takes a nums parameter and returns the first two elements of the nums array in order Then add a lasttwo property which returns the last two elements of the nums array in order --hints--\nYour spreadsheetFunctions object should have a firsttwo property js\nassert property(spreadsheetFunctions, \"firsttwo\");\nYour firsttwo property should be a function js\nassert isFunction(spreadsheetFunctions firsttwo);\nYour firsttwo function should return the first two numbers of the array js\nassert deepEqual(spreadsheetFunctions firsttwo([1, 2, 3, 4, 5, 6]), [1, 2]);\nYour spreadsheetFunctions object should have a lasttwo property js\nassert property(spreadsheetFunctions, \"lasttwo\");\nYour lasttwo property should be a function js\nassert isFunction(spreadsheetFunctions lasttwo);\nYour lasttwo function should return the last two numbers of the array js\nassert deepEqual(spreadsheetFunctions lasttwo([1, 2, 3, 4, 5, 6]), [5, 6]);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n} label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n\"*\": (x, y) => x * y,\n\"/\": (x, y) => x / y,\n}\nconst infixEval = (str, regex) => str replace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator);\nconst highPrecedence = str => {\nconst regex = /([\\d ]+)([*\\/])([\\d ]+)/;\nconst str2 = infixEval(str, regex);\nreturn str === str2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5378,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d498c8ebc31d3f753b22e.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "4e80292656e28700bc6ae920ede40258",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d498c8ebc31d3f753b22e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "center; vertical-align: middle; line-height: 30px; } ``` ```js const infixToFunction = { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } const infixEval = (str, regex) => str replace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator); const highPrecedence = str => { const regex = /([\\d ]+)([*\\/])([\\d ]+)/; const str2 = infixEval(str, regex); return str === str2str : highPrecedence(str2);\n}\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\n--fcc-editable-region--\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian,\neven: nums => nums filter(isEven),\n}\n--fcc-editable-region--\nconst applyFunction = str => {\nconst noHigh = highPrecedence(str);\nconst infix = /([\\d ]+)([+-])([\\d ]+)/;\nconst str2 = infixEval(noHigh, infix);\nconst functionCall = /([a-z0-9])(([0-9 , ]))( *()/i;\nconst toNumberList = args => args split(\",\") map(parseFloat);\nconst apply = (fn, args) => spreadsheetFunctionsfn toLowerCase();\nreturn str2 replace(functionCall, (match, fn, args) => spreadsheetFunctions hasOwnProperty(fn toLowerCase()) apply(fn, args) : match);\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5378,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d498c8ebc31d3f753b22e.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "70945cb551de080184af9c5fe6dba87b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d498c8ebc31d3f753b22e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "]+)([+-])([\\d ]+)/; const str2 = infixEval(noHigh, infix); const functionCall = /([a-z0-9])(([0-9 , ]))( *()/i; const toNumberList = args => args split(\",\") map(parseFloat); const apply = (fn, args) => spreadsheetFunctionsfn toLowerCase(); return str2 replace(functionCall, (match, fn, args) => spreadsheetFunctions hasOwnProperty(fn toLowerCase()) apply(fn, args) : match); } const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => StringfromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\nconst functionExpanded = applyFunction(cellExpanded);\nreturn functionExpanded === x functionExpanded : evalFormula(functionExpanded, cells);\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5378,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d498c8ebc31d3f753b22e.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "14cdb60697360c75dc614da2c86dcd64",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d498c8ebc31d3f753b22e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "=> idToText(match toUpperCase())); const functionExpanded = applyFunction(cellExpanded); return functionExpanded === x functionExpanded : evalFormula(functionExpanded, cells); } window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99) forEach(number => { createLabel(number); letters forEach(letter => { const input = document createElement(\"input\"); input type = \"text\"; inputid = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\nelement value = evalFormula(value slice(1), Array from(document getElementById(\"container\") children));\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5378,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d498c8ebc31d3f753b22e.md",
      "source_type": "git_repo"
    },
    "token_count": 221,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "cd08a8aa302412802c3cc243ebec95ca",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d4813c17b37d1e261a566\ntitle: Step 95\nchallengeType: 0\ndashedName: step-95\n--description--\nYou can quickly get all cells from your page by getting the #container element by its id and accessing the children property of the result Pass that to your evalFormula() call as the second parameter --hints--\nFor the second parameter of your evalFormula() call, you should call the getElementById() method of the document object js\nassert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/);\nYou should pass container as the argument to your getElementById() call js\nassert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 0,
    "total_chunks": 45
  },
  {
    "id": "9120318f11f91b42067b20c84d842f00",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of the result Pass that to your evalFormula() call as the second parameter --hints-- For the second parameter of your evalFormula() call, you should call the getElementById() method of the document object js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 45
  },
  {
    "id": "ba1877b09df4b5288c3a013d140ba21e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "that to your evalFormula() call as the second parameter --hints-- For the second parameter of your evalFormula() call, you should call the getElementById() method of the document object js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 513,
    "chunk_index": 2,
    "total_chunks": 45
  },
  {
    "id": "76ebd4cc04410da3f614edb872ce4c6f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "that to your evalFormula() call as the second parameter --hints-- For the second parameter of your evalFormula() call, you should call the getElementById() method of the document object js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 537,
    "chunk_index": 3,
    "total_chunks": 45
  },
  {
    "id": "9a15c15661eae548a08f1d236ba0bf8e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "that to your evalFormula() call as the second parameter --hints-- For the second parameter of your evalFormula() call, you should call the getElementById() method of the document object js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 552,
    "chunk_index": 4,
    "total_chunks": 45
  },
  {
    "id": "3212b1c7fc9b451c87dd6ab55f14bc0a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "that to your evalFormula() call as the second parameter --hints-- For the second parameter of your evalFormula() call, you should call the getElementById() method of the document object js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 578,
    "chunk_index": 5,
    "total_chunks": 45
  },
  {
    "id": "dde06bae7d71e8841a900fd0cbcb82f1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "that to your evalFormula() call as the second parameter --hints-- For the second parameter of your evalFormula() call, you should call the getElementById() method of the document object js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 602,
    "chunk_index": 6,
    "total_chunks": 45
  },
  {
    "id": "5859af03da9c3f966444ce2c2bf0c7a7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "that to your evalFormula() call as the second parameter --hints-- For the second parameter of your evalFormula() call, you should call the getElementById() method of the document object js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 623,
    "chunk_index": 7,
    "total_chunks": 45
  },
  {
    "id": "166c814c427887d26fb9e2945eddc889",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "that to your evalFormula() call as the second parameter --hints-- For the second parameter of your evalFormula() call, you should call the getElementById() method of the document object js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 625,
    "chunk_index": 8,
    "total_chunks": 45
  },
  {
    "id": "3bbc0d391f3a2c42448996c90e4f87d5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "that to your evalFormula() call as the second parameter --hints-- For the second parameter of your evalFormula() call, you should call the getElementById() method of the document object js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 632,
    "chunk_index": 9,
    "total_chunks": 45
  },
  {
    "id": "c0ada85303f188343a68bd91c6da8ee4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "that to your evalFormula() call as the second parameter --hints-- For the second parameter of your evalFormula() call, you should call the getElementById() method of the document object js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 647,
    "chunk_index": 10,
    "total_chunks": 45
  },
  {
    "id": "91944afefeadad2fb0e40e9ca179b669",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "that to your evalFormula() call as the second parameter --hints-- For the second parameter of your evalFormula() call, you should call the getElementById() method of the document object js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 661,
    "chunk_index": 11,
    "total_chunks": 45
  },
  {
    "id": "2f843378201723afaaf729423fab6215",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "that to your evalFormula() call as the second parameter --hints-- For the second parameter of your evalFormula() call, you should call the getElementById() method of the document object js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\slice\\(\\s*1\\s*\\)\\s*,\\s*document\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 677,
    "chunk_index": 12,
    "total_chunks": 45
  },
  {
    "id": "31f14309fb7692ca224d6c8dcbdf2620",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "that to your evalFormula() call as the second parameter --hints-- For the second parameter of your evalFormula() call, you should call the getElementById() method of the document object js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\slice\\(\\s*1\\s*\\)\\s*,\\s*document\\getElementById\\(\\s*('|\"|`)container\\9\\s*\\)/);\nYou should access the children property of the result of your",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 704,
    "chunk_index": 13,
    "total_chunks": 45
  },
  {
    "id": "7b1f1234aebb59601f874d38ac2abb1e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the second parameter of your evalFormula() call, you should call the getElementById() method of the document object js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\slice\\(\\s*1\\s*\\)\\s*,\\s*document\\getElementById\\(\\s*('|\"|`)container\\9\\s*\\)/); You should access the children property of the result of yourgetElementById() call",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 693,
    "chunk_index": 14,
    "total_chunks": 45
  },
  {
    "id": "487774be8a7d88cdb671fdc0f7a89069",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "second parameter of your evalFormula() call, you should call the getElementById() method of the document object js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\slice\\(\\s*1\\s*\\)\\s*,\\s*document\\getElementById\\(\\s*('|\"|`)container\\9\\s*\\)/); You should access the children property of the result of yourgetElementById() calljs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 695,
    "chunk_index": 15,
    "total_chunks": 45
  },
  {
    "id": "f2c1c10108c747fa37fc8fc01edb18be",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "parameter of your evalFormula() call, you should call the getElementById() method of the document object js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\slice\\(\\s*1\\s*\\)\\s*,\\s*document\\getElementById\\(\\s*('|\"|`)container\\9\\s*\\)/); You should access the children property of the result of yourgetElementById() calljs assertmatch(code, /const\\s+update\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 706,
    "chunk_index": 16,
    "total_chunks": 45
  },
  {
    "id": "df2386c907f506a8e8d980dc5044344b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of your evalFormula() call, you should call the getElementById() method of the document object js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\slice\\(\\s*1\\s*\\)\\s*,\\s*document\\getElementById\\(\\s*('|\"|`)container\\9\\s*\\)/); You should access the children property of the result of yourgetElementById() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 736,
    "chunk_index": 17,
    "total_chunks": 45
  },
  {
    "id": "0abd5b825a7ea588161dd4c90091a557",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of your evalFormula() call, you should call the getElementById() method of the document object js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\slice\\(\\s*1\\s*\\)\\s*,\\s*document\\getElementById\\(\\s*('|\"|`)container\\9\\s*\\)/); You should access the children property of the result of yourgetElementById() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 740,
    "chunk_index": 18,
    "total_chunks": 45
  },
  {
    "id": "266059228e6862e3bce359b2c42b09de",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of your evalFormula() call, you should call the getElementById() method of the document object js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\slice\\(\\s*1\\s*\\)\\s*,\\s*document\\getElementById\\(\\s*('|\"|`)container\\9\\s*\\)/); You should access the children property of the result of yourgetElementById() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 753,
    "chunk_index": 19,
    "total_chunks": 45
  },
  {
    "id": "48ab80f6ddd1cca865b6df88a45ec464",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of your evalFormula() call, you should call the getElementById() method of the document object js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\slice\\(\\s*1\\s*\\)\\s*,\\s*document\\getElementById\\(\\s*('|\"|`)container\\9\\s*\\)/); You should access the children property of the result of yourgetElementById() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 755,
    "chunk_index": 20,
    "total_chunks": 45
  },
  {
    "id": "b279540b6bdf21d4833026f458d43462",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of your evalFormula() call, you should call the getElementById() method of the document object js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\slice\\(\\s*1\\s*\\)\\s*,\\s*document\\getElementById\\(\\s*('|\"|`)container\\9\\s*\\)/); You should access the children property of the result of yourgetElementById() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 781,
    "chunk_index": 21,
    "total_chunks": 45
  },
  {
    "id": "30d48e1df355b1b3e52c4662eb5276d0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of your evalFormula() call, you should call the getElementById() method of the document object js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\slice\\(\\s*1\\s*\\)\\s*,\\s*document\\getElementById\\(\\s*('|\"|`)container\\9\\s*\\)/); You should access the children property of the result of yourgetElementById() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 789,
    "chunk_index": 22,
    "total_chunks": 45
  },
  {
    "id": "49f9d98556e4a51dca29ea24c7b528a8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of your evalFormula() call, you should call the getElementById() method of the document object js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\slice\\(\\s*1\\s*\\)\\s*,\\s*document\\getElementById\\(\\s*('|\"|`)container\\9\\s*\\)/); You should access the children property of the result of yourgetElementById() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 791,
    "chunk_index": 23,
    "total_chunks": 45
  },
  {
    "id": "326fd03123ce8894b24f9dcbc19a9cc4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of your evalFormula() call, you should call the getElementById() method of the document object js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\slice\\(\\s*1\\s*\\)\\s*,\\s*document\\getElementById\\(\\s*('|\"|`)container\\9\\s*\\)/); You should access the children property of the result of yourgetElementById() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 798,
    "chunk_index": 24,
    "total_chunks": 45
  },
  {
    "id": "0e5fafcb088492249398a9cad4717b7f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of your evalFormula() call, you should call the getElementById() method of the document object js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\slice\\(\\s*1\\s*\\)\\s*,\\s*document\\getElementById\\(\\s*('|\"|`)container\\9\\s*\\)/); You should access the children property of the result of yourgetElementById() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 808,
    "chunk_index": 25,
    "total_chunks": 45
  },
  {
    "id": "c027eba8e799afb0810f8815c3392074",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of your evalFormula() call, you should call the getElementById() method of the document object js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\slice\\(\\s*1\\s*\\)\\s*,\\s*document\\getElementById\\(\\s*('|\"|`)container\\9\\s*\\)/); You should access the children property of the result of yourgetElementById() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 834,
    "chunk_index": 26,
    "total_chunks": 45
  },
  {
    "id": "6e50a45a35b365190098378a9ca8482f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of your evalFormula() call, you should call the getElementById() method of the document object js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\slice\\(\\s*1\\s*\\)\\s*,\\s*document\\getElementById\\(\\s*('|\"|`)container\\9\\s*\\)/); You should access the children property of the result of yourgetElementById() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 858,
    "chunk_index": 27,
    "total_chunks": 45
  },
  {
    "id": "69143befc817e5b6ba1cceeec3ddfd33",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of your evalFormula() call, you should call the getElementById() method of the document object js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\slice\\(\\s*1\\s*\\)\\s*,\\s*document\\getElementById\\(\\s*('|\"|`)container\\9\\s*\\)/); You should access the children property of the result of yourgetElementById() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 873,
    "chunk_index": 28,
    "total_chunks": 45
  },
  {
    "id": "78f92c5bc664763aa94482af6f538f46",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of your evalFormula() call, you should call the getElementById() method of the document object js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\slice\\(\\s*1\\s*\\)\\s*,\\s*document\\getElementById\\(\\s*('|\"|`)container\\9\\s*\\)/); You should access the children property of the result of yourgetElementById() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 899,
    "chunk_index": 29,
    "total_chunks": 45
  },
  {
    "id": "edea28e955399a1b863342ef98afa8fc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of your evalFormula() call, you should call the getElementById() method of the document object js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\slice\\(\\s*1\\s*\\)\\s*,\\s*document\\getElementById\\(\\s*('|\"|`)container\\9\\s*\\)/); You should access the children property of the result of yourgetElementById() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 923,
    "chunk_index": 30,
    "total_chunks": 45
  },
  {
    "id": "4b07b06f2a5f1e9be324b8e0c03f369c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of your evalFormula() call, you should call the getElementById() method of the document object js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\slice\\(\\s*1\\s*\\)\\s*,\\s*document\\getElementById\\(\\s*('|\"|`)container\\9\\s*\\)/); You should access the children property of the result of yourgetElementById() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 944,
    "chunk_index": 31,
    "total_chunks": 45
  },
  {
    "id": "cad268ac5a219e2f18e2621310f12a19",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of your evalFormula() call, you should call the getElementById() method of the document object js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\slice\\(\\s*1\\s*\\)\\s*,\\s*document\\getElementById\\(\\s*('|\"|`)container\\9\\s*\\)/); You should access the children property of the result of yourgetElementById() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 946,
    "chunk_index": 32,
    "total_chunks": 45
  },
  {
    "id": "9742bbb5801aa36ecbb946e3078cf871",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of your evalFormula() call, you should call the getElementById() method of the document object js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\slice\\(\\s*1\\s*\\)\\s*,\\s*document\\getElementById\\(\\s*('|\"|`)container\\9\\s*\\)/); You should access the children property of the result of yourgetElementById() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 953,
    "chunk_index": 33,
    "total_chunks": 45
  },
  {
    "id": "d668fc43e352b1e89ee6e9bd0b2c9de0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of your evalFormula() call, you should call the getElementById() method of the document object js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\slice\\(\\s*1\\s*\\)\\s*,\\s*document\\getElementById\\(\\s*('|\"|`)container\\9\\s*\\)/); You should access the children property of the result of yourgetElementById() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 968,
    "chunk_index": 34,
    "total_chunks": 45
  },
  {
    "id": "b6ec4b7cdea445cdce203eb7a72c0efc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of your evalFormula() call, you should call the getElementById() method of the document object js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\slice\\(\\s*1\\s*\\)\\s*,\\s*document\\getElementById\\(\\s*('|\"|`)container\\9\\s*\\)/); You should access the children property of the result of yourgetElementById() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 982,
    "chunk_index": 35,
    "total_chunks": 45
  },
  {
    "id": "fe9caa1a243d9aad3fa6ee1ea4a16ab7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of your evalFormula() call, you should call the getElementById() method of the document object js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\slice\\(\\s*1\\s*\\)\\s*,\\s*document\\getElementById\\(\\s*('|\"|`)container\\9\\s*\\)/); You should access the children property of the result of yourgetElementById() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\slice\\(\\s*1\\s*\\)\\s*,\\s*document\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 998,
    "chunk_index": 36,
    "total_chunks": 45
  },
  {
    "id": "f568abdd7762b9655bc1bcb556e38ca1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of your evalFormula() call, you should call the getElementById() method of the document object js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\slice\\(\\s*1\\s*\\)\\s*,\\s*document\\getElementById\\(\\s*('|\"|`)container\\9\\s*\\)/); You should access the children property of the result of yourgetElementById() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\slice\\(\\s*1\\s*\\)\\s*,\\s*document\\getElementById\\(\\s*('|\"|`)container\\9\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 1013,
    "chunk_index": 37,
    "total_chunks": 45
  },
  {
    "id": "c20f8693ae949103f958f0cd1d27862d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of your evalFormula() call, you should call the getElementById() method of the document object js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\slice\\(\\s*1\\s*\\)\\s*,\\s*document\\getElementById\\(\\s*('|\"|`)container\\9\\s*\\)/); You should access the children property of the result of yourgetElementById() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\slice\\(\\s*1\\s*\\)\\s*,\\s*document\\getElementById\\(\\s*('|\"|`)container\\9\\s*\\)\\children\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 1020,
    "chunk_index": 38,
    "total_chunks": 45
  },
  {
    "id": "2b01f1a3a61463f08435fbb0e44d07f3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of your evalFormula() call, you should call the getElementById() method of the document object js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\slice\\(\\s*1\\s*\\)\\s*,\\s*document\\getElementById\\(\\s*('|\"|`)container\\9\\s*\\)/); You should access the children property of the result of yourgetElementById() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\slice\\(\\s*1\\s*\\)\\s*,\\s*document\\getElementById\\(\\s*('|\"|`)container\\9\\s*\\)\\children\\s*\\)\\s*;/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 1076,
    "chunk_index": 39,
    "total_chunks": 45
  },
  {
    "id": "7a358ca9042be56e29915885cbce3c5a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*element\\ value\\s*=\\s*evalFormula\\(\\s*value\\ slice\\(\\s*1\\s*\\)\\s*,\\s*document\\ getElementById\\(/); You should pass container as the argument to your getElementById() call js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\slice\\(\\s*1\\s*\\)\\s*,\\s*document\\getElementById\\(\\s*('|\"|`)container\\9\\s*\\)/); You should access the children property of the result of yourgetElementById() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\slice\\(\\s*1\\s*\\)\\s*,\\s*document\\getElementById\\(\\s*('|\"|`)container\\9\\s*\\)\\children\\s*\\)\\s*;/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n\"*\": (x, y) => x * y,\n\"/\": (x, y) => x / y,\n}\nconst infixEval = (str, regex) => str",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 1100,
    "chunk_index": 40,
    "total_chunks": 45
  },
  {
    "id": "241641ac223473ee3979602ab06147e4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "yourgetElementById() calljs assertmatch(code, /const\\s+update\\s*=\\s*(:\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\target\\s*;\\s*const\\s+value\\s*=\\s*element\\value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*;\\s*if\\s*\\(\\s*(value\\includes\\(\\s*element\\id\\s*\\)\\s*&&\\s*(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|(:value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s*value\\includes\\(\\s*element\\id\\s*\\))\\s*\\)\\s*\\{\\s*element\\value\\s*=\\s*evalFormula\\(\\s*value\\slice\\(\\s*1\\s*\\)\\s*,\\s*document\\getElementById\\(\\s*('|\"|`)container\\9\\s*\\)\\children\\s*\\)\\s*;/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const infixToFunction = { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } const infixEval = (str, regex) => strreplace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator);\nconst highPrecedence = str => {\nconst regex = /([\\d",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 517,
    "chunk_index": 41,
    "total_chunks": 45
  },
  {
    "id": "2d3e9e8a5de7a5dab4caf52fd528752e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const infixToFunction = { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } const infixEval = (str, regex) => strreplace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator); const highPrecedence = str => { const regex = /([\\d]+)([*\\/])([\\d ]+)/;\nconst str2 = infixEval(str, regex);\nreturn str === str2 str : highPrecedence(str2);\n}\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst applyFunction = str => {\nconst noHigh = highPrecedence(str);\nconst infix = /([\\d ]+)([+-])([\\d ]+)/;\nconst str2 = infixEval(noHigh, infix);\nconst functionCall = /([a-z0-9])(([0-9 , ]))( *()/i;\nconst toNumberList = args => args split(\",\") map(parseFloat);\nconst apply = (fn, args) => spreadsheetFunctionsfn toLowerCase();\nreturn str2 replace(functionCall, (match, fn, args) => spreadsheetFunctions hasOwnProperty(fn toLowerCase()) apply(fn, args) : match);\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 505,
    "chunk_index": 42,
    "total_chunks": 45
  },
  {
    "id": "bcc9936baa10348acc22cf636dc83fb2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "]+)([+-])([\\d ]+)/; const str2 = infixEval(noHigh, infix); const functionCall = /([a-z0-9])(([0-9 , ]))( *()/i; const toNumberList = args => args split(\",\") map(parseFloat); const apply = (fn, args) => spreadsheetFunctionsfn toLowerCase(); return str2 replace(functionCall, (match, fn, args) => spreadsheetFunctions hasOwnProperty(fn toLowerCase()) apply(fn, args) : match); } const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => StringfromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\nconst functionExpanded = applyFunction(cellExpanded);\nreturn functionExpanded === x functionExpanded : evalFormula(functionExpanded, cells);\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 43,
    "total_chunks": 45
  },
  {
    "id": "d67edf610033994f3d6c6f7ca64e368a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "=> idToText(match toUpperCase())); const functionExpanded = applyFunction(cellExpanded); return functionExpanded === x functionExpanded : evalFormula(functionExpanded, cells); } window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99) forEach(number => { createLabel(number); letters forEach(letter => { const input = document createElement(\"input\"); input type = \"text\"; inputid = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\n--fcc-editable-region--\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\nelement value = evalFormula(value slice(1));\n}\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4813c17b37d1e261a566.md",
      "source_type": "git_repo"
    },
    "token_count": 223,
    "chunk_index": 44,
    "total_chunks": 45
  },
  {
    "id": "4cf916c7f49cfdf5a81480cd17a7b8ae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d49bfff9079d4b38df115.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d49bfff9079d4b38df115\ntitle: Step 99\nchallengeType: 0\ndashedName: step-99\n--description--\nAdd a has2 property which returns whether the nums array has 2 in the values, and an increment property which returns nums with every value incremented by one --hints--\nYour spreadsheetFunctions object should have a has2 property js\nassert property(spreadsheetFunctions, \"has2\");\nYour has2 property should be a function js\nassert isFunction(spreadsheetFunctions has2);\nYour has2 function should return true if the array has 2 in it js\nassert isTrue(spreadsheetFunctions has2([1, 2, 3]));\nYour has2 function should return false if the array does not have 2 in it js\nassert isFalse(spreadsheetFunctions has2([1, 3, 4]));\nYour spreadsheetFunctions object should have an increment property js\nassert property(spreadsheetFunctions, \"increment\");\nYour increment property should be a function js\nassert isFunction(spreadsheetFunctions increment);\nYour increment function should return an array of numbers incremented by one js\nassert deepEqual(spreadsheetFunctions increment([1, 2, 3]), [2, 3, 4]);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n} label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n\"*\": (x, y) => x * y,\n\"/\": (x, y) => x / y,\n}\nconst infixEval = (str, regex) => str replace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator);\nconst highPrecedence = str => {\nconst regex = /([\\d ]+)([*\\/])([\\d ]+)/;\nconst str2 = infixEval(str, regex);\nreturn str === str2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5517,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d49bfff9079d4b38df115.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "3e89fefa7d75f08ec4c4bbf40ec89290",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d49bfff9079d4b38df115.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "center; vertical-align: middle; line-height: 30px; } ``` ```js const infixToFunction = { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } const infixEval = (str, regex) => str replace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator); const highPrecedence = str => { const regex = /([\\d ]+)([*\\/])([\\d ]+)/; const str2 = infixEval(str, regex); return str === str2str : highPrecedence(str2);\n}\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\n--fcc-editable-region--\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian,\neven: nums => nums filter(isEven),\nfirsttwo: nums => nums slice(0, 2),\nlasttwo: nums => nums slice(-2),\n}\n--fcc-editable-region--\nconst applyFunction = str => {\nconst noHigh = highPrecedence(str);\nconst infix = /([\\d ]+)([+-])([\\d ]+)/;\nconst str2 = infixEval(noHigh, infix);\nconst functionCall = /([a-z0-9])(([0-9 , ]))( *()/i;\nconst toNumberList = args => args split(\",\") map(parseFloat);\nconst apply = (fn, args) => spreadsheetFunctionsfn toLowerCase();\nreturn str2 replace(functionCall, (match, fn, args) => spreadsheetFunctions hasOwnProperty(fn toLowerCase()) apply(fn, args) : match);\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5517,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d49bfff9079d4b38df115.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "3d0026add5400a6a92269196844ed974",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d49bfff9079d4b38df115.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "const infix = /([\\d ]+)([+-])([\\d ]+)/; const str2 = infixEval(noHigh, infix); const functionCall = /([a-z0-9])(([0-9 , ]))( *()/i; const toNumberList = args => args split(\",\") map(parseFloat); const apply = (fn, args) => spreadsheetFunctionsfn toLowerCase(); return str2 replace(functionCall, (match, fn, args) => spreadsheetFunctions hasOwnProperty(fn toLowerCase()) apply(fn, args) : match); } const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), endcharCodeAt(0)) map(code => String fromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\nconst functionExpanded = applyFunction(cellExpanded);\nreturn functionExpanded === x functionExpanded : evalFormula(functionExpanded, cells);\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5517,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d49bfff9079d4b38df115.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "4c4174e740bd0bee3935513d0a323888",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d49bfff9079d4b38df115.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "= rangeExpanded replace(cellRegex, match => idToText(match toUpperCase())); const functionExpanded = applyFunction(cellExpanded); return functionExpanded === x functionExpanded : evalFormula(functionExpanded, cells); } window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99) forEach(number => { createLabel(number); letters forEach(letter => { const input = document createElement(\"input\"); inputtype = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\nelement value = evalFormula(value slice(1), Array from(document getElementById(\"container\") children));\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5517,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d49bfff9079d4b38df115.md",
      "source_type": "git_repo"
    },
    "token_count": 229,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "97537344e8d9202f608a85024bcf990a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4a07a8fb14d55cd70e09.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d4a07a8fb14d55cd70e09\ntitle: Step 100\nchallengeType: 0\ndashedName: step-100\n--description--\nAdd a someeven property to your spreadsheetFunctions - use the some() method to check if any element in the array is even --hints--\nYour spreadsheetFunctions object should have a someeven property js\nassert property(spreadsheetFunctions, \"someeven\");\nYour someeven property should be a function js\nassert isFunction(spreadsheetFunctions someeven);\nYour someeven function should return true if some of the elements in the array are even js\nassert isTrue(spreadsheetFunctions someeven([1, 2, 3]));\nYour someeven function should return false if none of the elements in the array are even js\nassert isFalse(spreadsheetFunctions someeven([1, 3, 5]));\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n} label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n\"*\": (x, y) => x * y,\n\"/\": (x, y) => x / y,\n}\nconst infixEval = (str, regex) => str replace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator);\nconst highPrecedence = str => {\nconst regex = /([\\d ]+)([*\\/])([\\d ]+)/;\nconst str2 = infixEval(str, regex);\nreturn str === str2 str : highPrecedence(str2);\n}\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5209,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4a07a8fb14d55cd70e09.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "0eb9ef98fc85c329c1e1b2c67ca42c1e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4a07a8fb14d55cd70e09.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "str2 = infixEval(str, regex); return str === str2 str : highPrecedence(str2); } const isEven = num => num % 2 === 0; const sum = nums => nums reduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / nums length; const median = nums => { const sorted = nums slice() sort((a, b) => a - b); const length = sorted length; const middle = length / 2 - 1; return isEven(length)average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\n--fcc-editable-region--\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian,\neven: nums => nums filter(isEven),\nfirsttwo: nums => nums slice(0, 2),\nlasttwo: nums => nums slice(-2),\nhas2: nums => nums includes(2),\nincrement: nums => nums map(num => num + 1),\n}\n--fcc-editable-region--\nconst applyFunction = str => {\nconst noHigh = highPrecedence(str);\nconst infix = /([\\d ]+)([+-])([\\d ]+)/;\nconst str2 = infixEval(noHigh, infix);\nconst functionCall = /([a-z0-9])(([0-9 , ]))( *()/i;\nconst toNumberList = args => args split(\",\") map(parseFloat);\nconst apply = (fn, args) => spreadsheetFunctionsfn toLowerCase();\nreturn str2 replace(functionCall, (match, fn, args) => spreadsheetFunctions hasOwnProperty(fn toLowerCase()) apply(fn, args) : match);\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5209,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4a07a8fb14d55cd70e09.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "35a2195775394bb3ddfcac1a221146b5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4a07a8fb14d55cd70e09.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "args) => spreadsheetFunctionsfn toLowerCase(); return str2 replace(functionCall, (match, fn, args) => spreadsheetFunctions hasOwnProperty(fn toLowerCase()) apply(fn, args) : match); } const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code)); const evalFormula = (x, cells) => { const idToText = id => cells find(cell => cell id === id) value; const rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9])/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\nconst functionExpanded = applyFunction(cellExpanded);\nreturn functionExpanded === x functionExpanded : evalFormula(functionExpanded, cells);\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\nelement value = evalFormula(value",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5209,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4a07a8fb14d55cd70e09.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "82cc72d99a8bbc649b100e84810b01aa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4a07a8fb14d55cd70e09.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "= charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99) forEach(number => { createLabel(number); letters forEach(letter => { const input = document createElement(\"input\"); input type = \"text\"; input id = letter + number; input ariaLabel = letter + number; input onchange = update; container appendChild(input); }) }) } const update = event => { const element = event target; const value = element value replace(/\\s/g, \"\"); if ( value includes(element id) && value startsWith('=')) { element value = evalFormula(valueslice(1), Array from(document getElementById(\"container\") children));\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5209,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4a07a8fb14d55cd70e09.md",
      "source_type": "git_repo"
    },
    "token_count": 136,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "4b80b902781d4a0f1279312da68ec6af",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4a5b32a1cad6165df286.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d4a5b32a1cad6165df286\ntitle: Step 102\nchallengeType: 0\ndashedName: step-102\n--description--\nCreate a random property This property should use the first two numbers from an array to generate a random whole number The range for this number starts at the first number (inclusive) of the two and ends just before the sum of these two numbers Use the Math floor() and Math random() methods for the calculation --hints--\nYour spreadsheetFunctions object should have a random property js\nassert property(spreadsheetFunctions, \"random\");\nYour random property should be a function js\nassert isFunction(spreadsheetFunctions random);\nYour random function should return a random number between the first two numbers in the array js\nassert isAtLeast(spreadsheetFunctions random([1, 2, 3]), 1);\nassert isAtMost(spreadsheetFunctions random([1, 2, 3]), 2);\nYour random function should return a whole number (integer) js\nconst result = spreadsheetFunctions random([1, 10]);\nassert equal(result, Math floor(result));\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n} label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n\"*\": (x, y) => x * y,\n\"/\": (x, y) => x / y,\n}\nconst infixEval = (str, regex) => str replace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator);\nconst highPrecedence = str => {\nconst regex = /([\\d ]+)([*\\/])([\\d ]+)/;\nconst str2 = infixEval(str, regex);\nreturn str === str2 str : highPrecedence(str2);\n}\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5548,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4a5b32a1cad6165df286.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "7911b5413d1b328672fb41312458ae05",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4a5b32a1cad6165df286.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "y) => x / y, } const infixEval = (str, regex) => str replace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator); const highPrecedence = str => { const regex = /([\\d ]+)([*\\/])([\\d ]+)/; const str2 = infixEval(str, regex); return str === str2 str : highPrecedence(str2); } const isEven = num => num % 2 === 0; const sum = nums => nums reduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\n--fcc-editable-region--\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian,\neven: nums => nums filter(isEven),\nsomeeven: nums => nums some(isEven),\neveryeven: nums => nums every(isEven),\nfirsttwo: nums => nums slice(0, 2),\nlasttwo: nums => nums slice(-2),\nhas2: nums => nums includes(2),\nincrement: nums => nums map(num => num + 1),\n}\n--fcc-editable-region--\nconst applyFunction = str => {\nconst noHigh = highPrecedence(str);\nconst infix = /([\\d ]+)([+-])([\\d ]+)/;\nconst str2 = infixEval(noHigh, infix);\nconst functionCall = /([a-z0-9])(([0-9 , ]))( *()/i;\nconst toNumberList = args => args split(\",\") map(parseFloat);\nconst apply = (fn, args) => spreadsheetFunctionsfn toLowerCase();\nreturn str2 replace(functionCall, (match, fn, args) => spreadsheetFunctions hasOwnProperty(fn toLowerCase()) apply(fn, args) : match);\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5548,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4a5b32a1cad6165df286.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "307e936852066ffb5b9be67200cee389",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4a5b32a1cad6165df286.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "]+)([+-])([\\d ]+)/; const str2 = infixEval(noHigh, infix); const functionCall = /([a-z0-9])(([0-9 , ]))( *()/i; const toNumberList = args => args split(\",\") map(parseFloat); const apply = (fn, args) => spreadsheetFunctionsfn toLowerCase(); return str2 replace(functionCall, (match, fn, args) => spreadsheetFunctions hasOwnProperty(fn toLowerCase()) apply(fn, args) : match); } const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => StringfromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\nconst functionExpanded = applyFunction(cellExpanded);\nreturn functionExpanded === x functionExpanded : evalFormula(functionExpanded, cells);\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5548,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4a5b32a1cad6165df286.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "3614a148b93927654c9ba486181f21ad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4a5b32a1cad6165df286.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "=> idToText(match toUpperCase())); const functionExpanded = applyFunction(cellExpanded); return functionExpanded === x functionExpanded : evalFormula(functionExpanded, cells); } window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99) forEach(number => { createLabel(number); letters forEach(letter => { const input = document createElement(\"input\"); input type = \"text\"; inputid = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\nelement value = evalFormula(value slice(1), Array from(document getElementById(\"container\") children));\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5548,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4a5b32a1cad6165df286.md",
      "source_type": "git_repo"
    },
    "token_count": 221,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "8ebd7308f181652ef32f527c592075a3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4a8dbc04c6d6bb0001f8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d4a8dbc04c6d6bb0001f8\ntitle: Step 103\nchallengeType: 0\ndashedName: step-103\n--description--\nAdd a range property which generates a range from the first number in nums to the second number in nums Remember that you have a range function you can reuse here --hints--\nYour spreadsheetFunctions object should have a range property js\nassert property(spreadsheetFunctions, \"range\");\nYour range property should be a function js\nassert isFunction(spreadsheetFunctions range);\nYour range function should return an array of consecutive numbers from the first number in the argument to the second number in the argument js\nassert deepEqual(spreadsheetFunctions range([1, 5, 10]), [1, 2, 3, 4, 5]);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n} label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n\"*\": (x, y) => x * y,\n\"/\": (x, y) => x / y,\n}\nconst infixEval = (str, regex) => str replace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator);\nconst highPrecedence = str => {\nconst regex = /([\\d ]+)([*\\/])([\\d ]+)/;\nconst str2 = infixEval(str, regex);\nreturn str === str2 str : highPrecedence(str2);\n}\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5282,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4a8dbc04c6d6bb0001f8.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "1bbfce0b640d108a00203ae92b02a6ac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4a8dbc04c6d6bb0001f8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "str2 = infixEval(str, regex); return str === str2 str : highPrecedence(str2); } const isEven = num => num % 2 === 0; const sum = nums => nums reduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / nums length; const median = nums => { const sorted = nums slice() sort((a, b) => a - b); const length = sorted length; const middle = length / 2 - 1; return isEven(length)average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\n--fcc-editable-region--\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian,\neven: nums => nums filter(isEven),\nsomeeven: nums => nums some(isEven),\neveryeven: nums => nums every(isEven),\nfirsttwo: nums => nums slice(0, 2),\nlasttwo: nums => nums slice(-2),\nhas2: nums => nums includes(2),\nincrement: nums => nums map(num => num + 1),\nrandom: ([x, y]) => Math floor(Math random() * y + x),\n}\n--fcc-editable-region--\nconst applyFunction = str => {\nconst noHigh = highPrecedence(str);\nconst infix = /([\\d ]+)([+-])([\\d ]+)/;\nconst str2 = infixEval(noHigh, infix);\nconst functionCall = /([a-z0-9])(([0-9 , ]))( *()/i;\nconst toNumberList = args => args split(\",\") map(parseFloat);\nconst apply = (fn, args) => spreadsheetFunctionsfn toLowerCase();\nreturn str2 replace(functionCall, (match, fn, args) => spreadsheetFunctions hasOwnProperty(fn toLowerCase()) apply(fn, args) : match);\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5282,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4a8dbc04c6d6bb0001f8.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "6ed15805c23f225e60535f031ba771f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4a8dbc04c6d6bb0001f8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "(fn, args) => spreadsheetFunctionsfn toLowerCase(); return str2 replace(functionCall, (match, fn, args) => spreadsheetFunctions hasOwnProperty(fn toLowerCase()) apply(fn, args) : match); } const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code)); const evalFormula = (x, cells) => { const idToText = id => cells find(cell => cell id === id) value; const rangeRegex = /([A-J])([1-9][0-9]):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\nconst functionExpanded = applyFunction(cellExpanded);\nreturn functionExpanded === x functionExpanded : evalFormula(functionExpanded, cells);\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\nelement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5282,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4a8dbc04c6d6bb0001f8.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "5c5f542102ceb81af527b3789b59acb2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4a8dbc04c6d6bb0001f8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "} const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99) forEach(number => { createLabel(number); letters forEach(letter => { const input = document createElement(\"input\"); input type = \"text\"; input id = letter + number; input ariaLabel = letter + number; input onchange = update; container appendChild(input); }) }) } const update = event => { const element = event target; const value = element value replace(/\\s/g, \"\"); if ( value includes(element id) && value startsWith('=')) { elementvalue = evalFormula(value slice(1), Array from(document getElementById(\"container\") children));\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5282,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4a8dbc04c6d6bb0001f8.md",
      "source_type": "git_repo"
    },
    "token_count": 139,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "09a02dc2903fd945273851d68437e001",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4ab9b3b4c5d74fdd2154.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d4ab9b3b4c5d74fdd2154\ntitle: Step 104\nchallengeType: 0\ndashedName: step-104\n--description--\nThe last function has a few approaches to implement, and you are free to choose whichever approach you would like Add a nodupes property which returns nums with all duplicate values removed For example, [2, 1, 2, 5, 3, 2, 7] should return [2, 1, 5, 3, 7] --hints--\nYour spreadsheetFunctions object should have a nodupes property js\nassert property(spreadsheetFunctions, \"nodupes\");\nYour nodupes property should be a function js\nassert isFunction(spreadsheetFunctions nodupes);\nYour nodupes function should remove all duplicate values from the array js\nassert deepEqual(spreadsheetFunctions nodupes([2, 1, 2, 5, 3, 2, 7]), [2, 1, 5, 3, 7]);\nassert deepEqual(spreadsheetFunctions nodupes([1, 2, 3]), [1, 2, 3]);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n} label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n\"*\": (x, y) => x * y,\n\"/\": (x, y) => x / y,\n}\nconst infixEval = (str, regex) => str replace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator);\nconst highPrecedence = str => {\nconst regex = /([\\d ]+)([*\\/])([\\d ]+)/;\nconst str2 = infixEval(str, regex);\nreturn str === str2 str : highPrecedence(str2);\n}\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5431,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4ab9b3b4c5d74fdd2154.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "6d48cf4fa577b7e3993eafcfa3ecd55c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4ab9b3b4c5d74fdd2154.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "(x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } const infixEval = (str, regex) => str replace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator); const highPrecedence = str => { const regex = /([\\d ]+)([*\\/])([\\d ]+)/; const str2 = infixEval(str, regex); return str === str2 str : highPrecedence(str2); } const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\n--fcc-editable-region--\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian,\neven: nums => nums filter(isEven),\nsomeeven: nums => nums some(isEven),\neveryeven: nums => nums every(isEven),\nfirsttwo: nums => nums slice(0, 2),\nlasttwo: nums => nums slice(-2),\nhas2: nums => nums includes(2),\nincrement: nums => nums map(num => num + 1),\nrandom: ([x, y]) => Math floor(Math random() * y + x),\nrange: nums => range( nums),\n}\n--fcc-editable-region--\nconst applyFunction = str => {\nconst noHigh = highPrecedence(str);\nconst infix = /([\\d ]+)([+-])([\\d ]+)/;\nconst str2 = infixEval(noHigh, infix);\nconst functionCall = /([a-z0-9])(([0-9 , ]))( *()/i;\nconst toNumberList = args => args split(\",\") map(parseFloat);\nconst apply = (fn, args) => spreadsheetFunctionsfn toLowerCase();\nreturn str2 replace(functionCall, (match, fn, args) => spreadsheetFunctions hasOwnProperty(fn toLowerCase()) apply(fn, args) : match);\n}\nconst range = (start, end) => Array(end - start + 1) fill(start)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5431,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4ab9b3b4c5d74fdd2154.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "e92f14bad19e67390eba7d6288e3ecca",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4ab9b3b4c5d74fdd2154.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "=> range( nums), } --fcc-editable-region-- const applyFunction = str => { const noHigh = highPrecedence(str); const infix = /([\\d ]+)([+-])([\\d ]+)/; const str2 = infixEval(noHigh, infix); const functionCall = /([a-z0-9])(([0-9 , ]))( *()/i; const toNumberList = args => args split(\",\") map(parseFloat); const apply = (fn, args) => spreadsheetFunctionsfn toLowerCase(); return str2 replace(functionCall, (match, fn, args) => spreadsheetFunctions hasOwnProperty(fn toLowerCase()) apply(fn, args) : match); } const range = (start, end) => Array(end - start + 1) fill(start)map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\nconst functionExpanded = applyFunction(cellExpanded);\nreturn functionExpanded === x functionExpanded : evalFormula(functionExpanded, cells);\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5431,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4ab9b3b4c5d74fdd2154.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "ad5c3ebe06e9e1b105dc6fdbcdce2398",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4ab9b3b4c5d74fdd2154.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2))); const cellRegex = /[A-J][1-9][0-9] /gi; const cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase())); const functionExpanded = applyFunction(cellExpanded); return functionExpanded === x functionExpanded : evalFormula(functionExpanded, cells); } window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); lettersforEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\nelement value = evalFormula(value slice(1), Array from(document getElementById(\"container\") children));\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5431,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4ab9b3b4c5d74fdd2154.md",
      "source_type": "git_repo"
    },
    "token_count": 288,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "973a3fd33fbd5b96d3fe11a0d725ba48",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\65ae458e23954c3469e0c209.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 65ae458e23954c3469e0c209\ntitle: Step 18\nchallengeType: 0\ndashedName: step-18\n--description--\nIn earlier projects you learned about the setAttribute method. Another way to update an attribute in JavaScript is to use the following syntax:\njs\nel.attribute = value;\nThe property names for hyphenated HTML attribute values, such as aria-label, follow camel case, becoming ariaLabel.\njs\nel.ariaLabel = \"Aria Label Value\";\nSet the aria-label attribute for the input element to the same value as the id attribute.\n--hints--\nYou should have an input.ariaLabel.\njs\nassert.match(code, /input\\.ariaLabel\\s*=/);\nYou should give input.ariaLabel the same value as input.id.\njs\nassert.match(code, /input\\.ariaLabel\\s*=\\s*((letter\\s*\\+\\s*number)|(input.id))/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}\n.label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst range = (start, end) => Array(end - start + 1).fill(start).map((element, index) => element + index);\nconst charRange = (start, end) => range(start.charCodeAt(0), end.charCodeAt(0)).map(code => String.fromCharCode(code));\nwindow.onload = () => {\nconst container = document.getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document.createElement(\"div\");\nlabel.className = \"label\";\nlabel.textContent = name;\ncontainer.appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters.forEach(createLabel);\nrange(1, 99).forEach(number => {\ncreateLabel(number);\n--fcc-editable-region--\nletters.forEach(letter => {\nconst input = document.createElement(\"input\");\ninput.type = \"text\";\ninput.id = letter + number;\n})\n--fcc-editable-region--\n})\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2338,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\65ae458e23954c3469e0c209.md",
      "source_type": "git_repo"
    },
    "token_count": 462,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5046384dd921881440c01a8a9f4a2f57",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6491d38f5b09a021c4b5d5fe.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 6491d38f5b09a021c4b5d5fe\ntitle: Step 101\nchallengeType: 0\ndashedName: step-101\n--description--\nArrays have an every() method Like the some() method, every() accepts a callback function which should take an element of the array as the argument The every() method will return true if the callback function returns true for all elements in the array Here is an example of a every() method call to check if all elements in the array are uppercase letters js\nconst arr = [\"A\", \"b\", \"C\"];\narr every(letter => letter === letter toUpperCase());\nAdd an everyeven property to your spreadsheetFunctions - use the every() method to check whether all array elements are even --hints--\nYour spreadsheetFunctions object should have an everyeven property js\nassert property(spreadsheetFunctions, \"everyeven\");\nYour everyeven property should be a function js\nassert isFunction(spreadsheetFunctions everyeven);\nYour everyeven function should return true if every element in the array is even js\nassert isTrue(spreadsheetFunctions everyeven([2, 4, 6]));\nYour everyeven function should return false if some of the elements in the array are not even js\nassert isFalse(spreadsheetFunctions everyeven([1, 2, 3]));\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n} label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n\"*\": (x, y) => x * y,\n\"/\": (x, y) => x / y,\n}\nconst infixEval = (str, regex) => str replace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator);\nconst highPrecedence = str => {\nconst regex = /([\\d ]+)([*\\/])([\\d ]+)/;\nconst str2 = infixEval(str, regex);\nreturn str === str2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5731,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6491d38f5b09a021c4b5d5fe.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "81b00ed12b7e685343f400e9426b94c2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6491d38f5b09a021c4b5d5fe.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "center; vertical-align: middle; line-height: 30px; } ``` ```js const infixToFunction = { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } const infixEval = (str, regex) => str replace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator); const highPrecedence = str => { const regex = /([\\d ]+)([*\\/])([\\d ]+)/; const str2 = infixEval(str, regex); return str === str2str : highPrecedence(str2);\n}\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\n--fcc-editable-region--\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian,\neven: nums => nums filter(isEven),\nsomeeven: nums => nums some(isEven),\nfirsttwo: nums => nums slice(0, 2),\nlasttwo: nums => nums slice(-2),\nhas2: nums => nums includes(2),\nincrement: nums => nums map(num => num + 1),\n}\n--fcc-editable-region--\nconst applyFunction = str => {\nconst noHigh = highPrecedence(str);\nconst infix = /([\\d ]+)([+-])([\\d ]+)/;\nconst str2 = infixEval(noHigh, infix);\nconst functionCall = /([a-z0-9])(([0-9 , ]))( *()/i;\nconst toNumberList = args => args split(\",\") map(parseFloat);\nconst apply = (fn, args) => spreadsheetFunctionsfn toLowerCase();\nreturn str2 replace(functionCall, (match, fn, args) => spreadsheetFunctions hasOwnProperty(fn toLowerCase()) apply(fn, args) : match);\n}\nconst range = (start, end) => Array(end - start + 1)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5731,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6491d38f5b09a021c4b5d5fe.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "5265b2e7a8d213c93a966c417a90f21f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6491d38f5b09a021c4b5d5fe.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "=> num + 1), } --fcc-editable-region-- const applyFunction = str => { const noHigh = highPrecedence(str); const infix = /([\\d ]+)([+-])([\\d ]+)/; const str2 = infixEval(noHigh, infix); const functionCall = /([a-z0-9])(([0-9 , ]))( *()/i; const toNumberList = args => args split(\",\") map(parseFloat); const apply = (fn, args) => spreadsheetFunctionsfn toLowerCase(); return str2 replace(functionCall, (match, fn, args) => spreadsheetFunctions hasOwnProperty(fn toLowerCase()) apply(fn, args) : match); } const range = (start, end) => Array(end - start + 1)fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\nconst functionExpanded = applyFunction(cellExpanded);\nreturn functionExpanded === x functionExpanded : evalFormula(functionExpanded, cells);\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5731,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6491d38f5b09a021c4b5d5fe.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "65604cf3b701e05b332bae4943c83c6c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6491d38f5b09a021c4b5d5fe.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2))); const cellRegex = /[A-J][1-9][0-9] /gi; const cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase())); const functionExpanded = applyFunction(cellExpanded); return functionExpanded === x functionExpanded : evalFormula(functionExpanded, cells); } window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); lettersforEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\nelement value = evalFormula(value slice(1), Array from(document getElementById(\"container\") children));\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5731,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6491d38f5b09a021c4b5d5fe.md",
      "source_type": "git_repo"
    },
    "token_count": 288,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "cc81ead1f9c782adadedbb3ca07c30ff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\661f48f412d7631a1d9c30e6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 661f48f412d7631a1d9c30e6\ntitle: Step 75\nchallengeType: 0\ndashedName: step-75\n--description--\nYou should use console log() to print the result of calling the highPrecedence function with the string \"5*3\" --hints--\nYou should call console log() ```js\nassert match(code, /console log(/);\n```\nYou should call your highPrecedence function ```js\nassert match(code, /console log(highPrecedence(/);\n```\nPass 5*3 as the argument\n```js\nassert match(code, /console log(highPrecedence([\"']5*3[\"'])); /);\n```\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n} label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n\"*\": (x, y) => x * y,\n\"/\": (x, y) => x / y,\n}\nconst infixEval = (str, regex) => str replace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator);\n--fcc-editable-region--\nconst highPrecedence = str => {\nconst regex = /([\\d ]+)([*\\/])([\\d ]+)/;\nreturn regex test(str);\n}\n--fcc-editable-region--\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3924,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\661f48f412d7631a1d9c30e6.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "f240a3a3700cd7e0caff65e29e3beba0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\661f48f412d7631a1d9c30e6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "]+)/; return regex test(str); } --fcc-editable-region-- const isEven = num => num % 2 === 0; const sum = nums => nums reduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / nums length; const median = nums => { const sorted = nums slice() sort((a, b) => a - b); const length = sorted length; const middle = length / 2 - 1; return isEven(length) average([sorted[middle], sorted[middle + 1]]) : sorted[Mathceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3924,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\661f48f412d7631a1d9c30e6.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "a56eb175cef601530de78d104b9b4823",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\661f48f412d7631a1d9c30e6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2))); const cellRegex = /[A-J][1-9][0-9] /gi; const cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase())); } window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99) forEach(number => { createLabel(number); letters forEach(letter => { const input = document createElement(\"input\"); inputtype = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3924,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\661f48f412d7631a1d9c30e6.md",
      "source_type": "git_repo"
    },
    "token_count": 228,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "11ab769f38d220d6d21fbfafc8335f6c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6461815bc48998eb15d55349.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 6461815bc48998eb15d55349\ntitle: Step 1\nchallengeType: 0\ndashedName: step-1\ndemoType: onLoad\n--description--\nIn this project, you are going to learn intermediate Object Oriented Programming principles by building a platformer game All of the HTML and CSS have been provided for you Start by using document getElementById() to get the #start-btn and #canvas elements Store them in const variables named startBtn and canvas respectively --hints--\nYou should use document getElementById() js\nassert match(code, /document\\ getElementById\\(/);\nYou should get the element with the id of start-btn js\nassert match(code, /document\\ getElementById\\(\\s*('|\"|`)start-btn\\1\\s*\\)/);\nYou should use const to declare the variable called startBtn and assign it the #start-btn element js\nassert match(code, /const\\s+startBtn\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)start-btn\\1\\s*\\)/);\nYou should use the document getElementById() method to get the #canvas element js\nassert match(code, /document\\ getElementById\\(\\s*('|\"|`)canvas\\1\\s*\\)/);\nYou should use const to declare the variable called canvas and assign it the #canvas element js\nassert match(code, /const\\s+canvas\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)canvas\\1\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3933,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6461815bc48998eb15d55349.md",
      "source_type": "git_repo"
    },
    "token_count": 443,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "2a85a1bb3c9fd06a29e2f3616a19aed8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6461815bc48998eb15d55349.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "match(code, /const\\s+canvas\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)canvas\\1\\s*\\)/); --seed-- --seed-contents-- ```html Learn Intermediate OOP by Building a Platformer Game freeCodeCamp Code Warrior Help the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); }start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3933,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6461815bc48998eb15d55349.md",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "7887fed3ac2f48c508e6a482c9b98bf8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6461815bc48998eb15d55349.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; } checkpoint-screen { position: absolute; left: 0; right: 0; margin-left: auto; margin-right: auto; width: 100%; text-align: center; background-color: var(--section-bg-color); border-radius: 20px; padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; }checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3933,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6461815bc48998eb15d55349.md",
      "source_type": "git_repo"
    },
    "token_count": 238,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "7523f8ea5902f7a5bcfd5b4a805a82ad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4b3d80ea98d824c8a4f9.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d4b3d80ea98d824c8a4f9\ntitle: Step 105\nchallengeType: 0\ndashedName: step-105\n--description--\nFinally, to handle potential edge cases, add an empty string property (you will need to use quotes) which is a function that takes a single argument and returns that argument With that, your spreadsheet project is now complete You are welcome to experiment with adding support for even more functions --hints--\nYour spreadsheetFunctions object should have an empty string property js\nassert property(spreadsheetFunctions, \"\");\nYour empty string property should be a function js\nassert isFunction(spreadsheetFunctions[\"\"]);\nYour empty string property function should return the argument js\nassert deepEqual(spreadsheetFunctions[\"\"]([1,2,3]), [1,2,3]);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n} label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n\"*\": (x, y) => x * y,\n\"/\": (x, y) => x / y,\n}\nconst infixEval = (str, regex) => str replace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator);\nconst highPrecedence = str => {\nconst regex = /([\\d ]+)([*\\/])([\\d ]+)/;\nconst str2 = infixEval(str, regex);\nreturn str === str2 str : highPrecedence(str2);\n}\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9961,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4b3d80ea98d824c8a4f9.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "14fc393ba8d339eb90a1dc8e5ad78dc7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4b3d80ea98d824c8a4f9.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "str2 = infixEval(str, regex); return str === str2 str : highPrecedence(str2); } const isEven = num => num % 2 === 0; const sum = nums => nums reduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / nums length; const median = nums => { const sorted = nums slice() sort((a, b) => a - b); const length = sorted length; const middle = length / 2 - 1; return isEven(length)average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\n--fcc-editable-region--\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian,\neven: nums => nums filter(isEven),\nsomeeven: nums => nums some(isEven),\neveryeven: nums => nums every(isEven),\nfirsttwo: nums => nums slice(0, 2),\nlasttwo: nums => nums slice(-2),\nhas2: nums => nums includes(2),\nincrement: nums => nums map(num => num + 1),\nrandom: ([x, y]) => Math floor(Math random() * y + x),\nrange: nums => range( nums),\nnodupes: nums => [ new Set(nums) values()]\n}\n--fcc-editable-region--\nconst applyFunction = str => {\nconst noHigh = highPrecedence(str);\nconst infix = /([\\d ]+)([+-])([\\d ]+)/;\nconst str2 = infixEval(noHigh, infix);\nconst functionCall = /([a-z0-9])(([0-9 , ]))( *()/i;\nconst toNumberList = args => args split(\",\") map(parseFloat);\nconst apply = (fn, args) => spreadsheetFunctionsfn toLowerCase();\nreturn str2 replace(functionCall, (match, fn, args) => spreadsheetFunctions hasOwnProperty(fn toLowerCase()) apply(fn, args) : match);\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9961,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4b3d80ea98d824c8a4f9.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "0fa7d7c029f65a92a44ac7be635c337b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4b3d80ea98d824c8a4f9.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "split(\",\") map(parseFloat); const apply = (fn, args) => spreadsheetFunctionsfn toLowerCase(); return str2 replace(functionCall, (match, fn, args) => spreadsheetFunctions hasOwnProperty(fn toLowerCase()) apply(fn, args) : match); } const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code)); const evalFormula = (x, cells) => { const idToText = id => cells find(cell => cell id === id)value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\nconst functionExpanded = applyFunction(cellExpanded);\nreturn functionExpanded === x functionExpanded : evalFormula(functionExpanded, cells);\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9961,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4b3d80ea98d824c8a4f9.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "26051985161fd18267c8ce9aaf939c2a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4b3d80ea98d824c8a4f9.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99) forEach(number => { createLabel(number); letters forEach(letter => { const input = document createElement(\"input\"); input type = \"text\"; input id = letter + number; input ariaLabel = letter + number; input onchange = update; container appendChild(input); }) }) } const update = event => { const element = event target; const value = element value replace(/\\s/g, \"\"); if ( value includes(elementid) && value startsWith('=')) {\nelement value = evalFormula(value slice(1), Array from(document getElementById(\"container\") children));\n}\n}\n```\n--solutions--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n} label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n\"*\": (x, y) => x * y,\n\"/\": (x, y) => x / y,\n}\nconst infixEval = (str, regex) => str replace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator);\nconst highPrecedence = str => {\nconst regex = /([\\d ]+)([*\\/])([\\d ]+)/;\nconst str2 = infixEval(str, regex);\nreturn str === str2 str : highPrecedence(str2);\n}\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\n\"\": x => x,\nsum,\naverage,\nmedian,\neven: nums => nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9961,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4b3d80ea98d824c8a4f9.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "1850d642d089568b780f02cef89fa764",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4b3d80ea98d824c8a4f9.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "sum = nums => nums reduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / nums length; const median = nums => { const sorted = nums slice() sort((a, b) => a - b); const length = sorted length; const middle = length / 2 - 1; return isEven(length) average([sorted[middle], sorted[middle + 1]]) : sorted[Math ceil(middle)]; } const spreadsheetFunctions = { \"\": x => x, sum, average, median, even: nums => numsfilter(isEven),\nsomeeven: nums => nums some(isEven),\neveryeven: nums => nums every(isEven),\nfirsttwo: nums => nums slice(0, 2),\nlasttwo: nums => nums slice(-2),\nhas2: nums => nums includes(2),\nincrement: nums => nums map(num => num + 1),\nrandom: ([x, y]) => Math floor(Math random() * y + x),\nrange: nums => range( nums),\nnodupes: nums => [ new Set(nums) values()]\n}\nconst applyFunction = str => {\nconst noHigh = highPrecedence(str);\nconst infix = /([\\d ]+)([+-])([\\d ]+)/;\nconst str2 = infixEval(noHigh, infix);\nconst functionCall = /([a-z0-9])(([0-9 , ]))( *()/i;\nconst toNumberList = args => args split(\",\") map(parseFloat);\nconst apply = (fn, args) => spreadsheetFunctionsfn toLowerCase();\nreturn str2 replace(functionCall, (match, fn, args) => spreadsheetFunctions hasOwnProperty(fn toLowerCase()) apply(fn, args) : match);\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9961,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4b3d80ea98d824c8a4f9.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "4ffa6ff7ef4322e826c53493130a1fe7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4b3d80ea98d824c8a4f9.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "args) => spreadsheetFunctionsfn toLowerCase(); return str2 replace(functionCall, (match, fn, args) => spreadsheetFunctions hasOwnProperty(fn toLowerCase()) apply(fn, args) : match); } const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code)); const evalFormula = (x, cells) => { const idToText = id => cells find(cell => cell id === id) value; const rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9])/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\nconst functionExpanded = applyFunction(cellExpanded);\nreturn functionExpanded === x functionExpanded : evalFormula(functionExpanded, cells);\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\nelement value = evalFormula(value",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9961,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4b3d80ea98d824c8a4f9.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "562895f8ad4c63a0eec8212414029765",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4b3d80ea98d824c8a4f9.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "= charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99) forEach(number => { createLabel(number); letters forEach(letter => { const input = document createElement(\"input\"); input type = \"text\"; input id = letter + number; input ariaLabel = letter + number; input onchange = update; container appendChild(input); }) }) } const update = event => { const element = event target; const value = element value replace(/\\s/g, \"\"); if ( value includes(element id) && value startsWith('=')) { element value = evalFormula(valueslice(1), Array from(document getElementById(\"container\") children));\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9961,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4b3d80ea98d824c8a4f9.md",
      "source_type": "git_repo"
    },
    "token_count": 136,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "fcc56ca02586c19f64e37c2d3ee8028e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\661f49650572031c6ebdb8e3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 661f49650572031c6ebdb8e3\ntitle: Step 76\nchallengeType: 0\ndashedName: step-76\n--description--\nRemove both the console log() with your highPrecedence call, and the return statement from your highPrecedence function --hints--\nYour code should not log the result of highPrecedence(\"5*3\") ```js\nassert notMatch(code, /console log(highPrecedence(\"5*3\"))/);\n```\nYour highPrecedence function should not return a value ```js\nassert isUndefined(highPrecedence(\"5*3\"));\n```\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n} label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n\"*\": (x, y) => x * y,\n\"/\": (x, y) => x / y,\n}\nconst infixEval = (str, regex) => str replace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator);\n--fcc-editable-region--\nconst highPrecedence = str => {\nconst regex = /([\\d ]+)([\\/])([\\d ]+)/;\nreturn regex test(str);\n}\nconsole log(highPrecedence(\"53\"));\n--fcc-editable-region--\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3913,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\661f49650572031c6ebdb8e3.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "ea40917cfd48f1d8d02d1d5ff94f0685",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\661f49650572031c6ebdb8e3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "regex test(str); } console log(highPrecedence(\"53\")); --fcc-editable-region-- const isEven = num => num % 2 === 0; const sum = nums => nums reduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / nums length; const median = nums => { const sorted = nums slice() sort((a, b) => a - b); const length = sorted length; const middle = length / 2 - 1; return isEven(length) average([sorted[middle], sorted[middle + 1]]) : sorted[Mathceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3913,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\661f49650572031c6ebdb8e3.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "997f5627261819b31e26ecf84e4473ff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\661f49650572031c6ebdb8e3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2))); const cellRegex = /[A-J][1-9][0-9] /gi; const cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase())); } window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99) forEach(number => { createLabel(number); letters forEach(letter => { const input = documentcreateElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3913,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\661f49650572031c6ebdb8e3.md",
      "source_type": "git_repo"
    },
    "token_count": 234,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "096cba470428f48d243f8d1dee9215d1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6461a1b2d5f508f374d72d30.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 6461a1b2d5f508f374d72d30\ntitle: Step 2\nchallengeType: 0\ndashedName: step-2\n--description--\nNext, you will need to use document querySelector to get the start-screen and checkpoint-screen elements Store them in const variables called startScreen and checkpointScreen respectively --hints--\nYou should use document querySelector() js\nassert match(code, /document\\ querySelector\\(/);\nYou should get the element with the class of start-screen Don't forget to include the inside the document querySelector method js\nassert match(code, /document\\ querySelector\\(\\s*('|\"|`)\\ start-screen\\1\\s*\\)/);\nYou should use const to declare the variable called startScreen and assign it the start-screen element js\nassert match(code, /const\\s+startScreen\\s*=\\s*document\\ querySelector\\(\\s*('|\"|`)\\ start-screen\\1\\s*\\)/);\nYou should use the document querySelector() method to get the checkpoint-screen element js\nassert match(code, /document\\ querySelector\\(\\s*('|\"|`)\\ checkpoint-screen\\1\\s*\\)/);\nYou should use const to declare the variable called checkpointScreen and assign it the checkpoint-screen element js\nassert match(code, /const\\s+checkpointScreen\\s*=\\s*document\\ querySelector\\(\\s*('|\"|`)\\ checkpoint-screen\\1\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4045,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6461a1b2d5f508f374d72d30.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "f637ea4c6fd811826fdbf7859bae2ca2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6461a1b2d5f508f374d72d30.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; }main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4045,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6461a1b2d5f508f374d72d30.md",
      "source_type": "git_repo"
    },
    "token_count": 462,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "e00088353d236a64bd99e1ca164a8d69",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6461abe3ad3609f436f3a087.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 6461abe3ad3609f436f3a087\ntitle: Step 3\nchallengeType: 0\ndashedName: step-3\n--description--\nThe next step is to target the paragraph element inside the checkpoint-screen element Use document querySelector and the child combinator > to target the paragraph element Assign that value to a const variable called checkpointMessage --hints--\nYou should use the child combinator > to access the paragraph element inside the checkpoint-screen element js\nassert match(code, /document\\ querySelector\\(\\s*('|\"|`)\\ checkpoint-screen\\s+>\\s+p\\1\\s*\\)/);\nYou should use const to declare the variable called checkpointMessage and assign it the p element inside the checkpoint-screen element js\nassert match(code, /const\\s+checkpointMessage\\s*=\\s*document\\ querySelector\\(\\s*('|\"|`)\\ checkpoint-screen\\s+>\\s+p\\1\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3718,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6461abe3ad3609f436f3a087.md",
      "source_type": "git_repo"
    },
    "token_count": 435,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "a15adeda891b4aeda576ef43eb65ba0d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6461abe3ad3609f436f3a087.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3718,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6461abe3ad3609f436f3a087.md",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "aea28c3cf3c8b29770496f2f9fccf31f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6461b0b3dc4034f4f70a4929.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 6461b0b3dc4034f4f70a4929\ntitle: Step 4\nchallengeType: 0\ndashedName: step-4\n--description--\nBefore you can begin building out the functionality for the game, you will need to set up the ability to add 2D graphics The Canvas API can be used to create graphics in games using JavaScript and the HTML canvas element You will need to use the getContext method which will provide the context for where the graphics will be rendered js\ncanvas getContext(\"2d\");\nAssign that getContext method to a const variable called ctx --hints--\nYou should use the canvas getContext(\"2d\") method js\nassert match(code, /canvas\\ getContext\\(\\s*('|\"|`)2d\\1\\s*\\)/);\nYou should use const to declare the variable called ctx and assign it canvas getContext(\"2d\") js\nassert match(code, /const\\s+ctx\\s*=\\s*canvas\\ getContext\\(\\s*('|\"|`)2d\\1\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3824,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6461b0b3dc4034f4f70a4929.md",
      "source_type": "git_repo"
    },
    "token_count": 456,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ce6e287dd0edb1bc594ee64def088930",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6461b0b3dc4034f4f70a4929.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3824,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6461b0b3dc4034f4f70a4929.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "1362dd6a50261bbc6318f465239e944f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6461baf1e276bdfe3b8ff92a.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 6461baf1e276bdfe3b8ff92a\ntitle: Step 5\nchallengeType: 0\ndashedName: step-5\n--description--\nThe canvas element has a width property which is a positive number that represents the width of the canvas js\ncanvas width\nBelow your const declarations, append the width property to the canvas variable --hints--\nYou should append the width property to the canvas variable js\nassert match(code, /canvas\\ width/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3417,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6461baf1e276bdfe3b8ff92a.md",
      "source_type": "git_repo"
    },
    "token_count": 455,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "52b56dc80f83fc2a5380b6a2ef7d8112",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6461baf1e276bdfe3b8ff92a.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3417,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6461baf1e276bdfe3b8ff92a.md",
      "source_type": "git_repo"
    },
    "token_count": 407,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "32b0bcefc37cca58f70206c0614a53d6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64800ffcc075d9af2f52f034.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64800ffcc075d9af2f52f034\ntitle: Step 6\nchallengeType: 0\ndashedName: step-6\n--description--\nThe innerWidth property is a number that represents the interior width of the browser window Assign innerWidth to canvas width --hints--\nYou should assign the innerWidth property to canvas width js\nassert match(code, /canvas\\ width\\s*=\\s*innerWidth/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3357,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64800ffcc075d9af2f52f034.md",
      "source_type": "git_repo"
    },
    "token_count": 445,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "bdd2c44813ac8dd323ef50b37ea3a6d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64800ffcc075d9af2f52f034.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\n--fcc-editable-region--\ncanvas width\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3357,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64800ffcc075d9af2f52f034.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f6184696d6684dbfc5472ca2dc94038c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\648160c026b3bebc63177ab9.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 648160c026b3bebc63177ab9\ntitle: Step 7\nchallengeType: 0\ndashedName: step-7\n--description--\nThe innerHeight property is a number that represents the interior height of the browser window Below your canvas width, append the height property to the canvas variable and assign it innerHeight --hints--\nYou should append the height property to the canvas variable js\nassert match(code, /canvas\\ height/);\nYou should assign the innerHeight property to canvas height js\nassert match(code, /canvas\\ height\\s*=\\s*innerHeight/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3562,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\648160c026b3bebc63177ab9.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "b1c2fd0afcb1d6758fa7f8b7a2c7d19e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\648160c026b3bebc63177ab9.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3562,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\648160c026b3bebc63177ab9.md",
      "source_type": "git_repo"
    },
    "token_count": 413,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "28774d5a7d488da478c75966ad269494",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6482b07e8a3dcacbbbfa43f6.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 6482b07e8a3dcacbbbfa43f6\ntitle: Step 9\nchallengeType: 0\ndashedName: step-9\n--description--\nIn the game, the player will have the opportunity to cross different checkpoints You will need to keep track of the status for the checkpoint collision detection Use let to create a new variable called isCheckpointCollisionDetectionActive and assign it the value of true --hints--\nYou should use the let keyword to declare your isCheckpointCollisionDetectionActive variable js\nassert match(code, /let\\s+isCheckpointCollisionDetectionActive/);\nYou should assign the value of true to isCheckpointCollisionDetectionActive\njs\nassert match(code, /let\\s+isCheckpointCollisionDetectionActive\\s*=\\s*true/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3783,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6482b07e8a3dcacbbbfa43f6.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "8b786d27c757e2428a02b4a0201f4bba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6482b07e8a3dcacbbbfa43f6.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "#feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); }btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3783,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6482b07e8a3dcacbbbfa43f6.md",
      "source_type": "git_repo"
    },
    "token_count": 448,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "dd137f3ec125607ad8c2edd64d0590cf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\648166a88629ccc03452bf04.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 648166a88629ccc03452bf04\ntitle: Step 8\nchallengeType: 0\ndashedName: step-8\n--description--\nIn your platformer game, the main player will need to jump between the different platforms When the player jumps, you will need to apply gravity to bring them back down Create a new const variable called gravity and assign it the number 0 5 --hints--\nYou should create a const variable called gravity and assign it 0 5 js\nassert match(code, /const\\s+gravity\\s*=\\s*0 \\ 5/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3523,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\648166a88629ccc03452bf04.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "35978725fb1177b98c15b5729227469a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\648166a88629ccc03452bf04.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3523,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\648166a88629ccc03452bf04.md",
      "source_type": "git_repo"
    },
    "token_count": 419,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "b7dd3a327056e1a71c064ab06318c0ba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6482b4fef5fd6bcdfddad730.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 6482b4fef5fd6bcdfddad730\ntitle: Step 12\nchallengeType: 0\ndashedName: step-12\n--description--\nThe next step is to define some characteristics for the main player of the game Start by creating a new class called Player --hints--\nPlayer should be a class js\nassert(\ntypeof Player === 'function'\n);\nThe class keyword should be used js\nassert match(code, /^\\s*class/m);\nYou should create a new class called Player\njs\nassert match(code, /class\\s+Player\\s*{\\s*}\\s*/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3723,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6482b4fef5fd6bcdfddad730.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "c18db58dfeb6bc743b5e6179719db99d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6482b4fef5fd6bcdfddad730.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3723,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6482b4fef5fd6bcdfddad730.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "1e66b0ff57547d4cab1c06a9bc0c173c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6482bc5d699f0acfc52bdc41.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 6482bc5d699f0acfc52bdc41\ntitle: Step 13\nchallengeType: 0\ndashedName: step-13\n--description--\nInside your Player class, you will need to define the player's position, velocity, width, and height values All of these values will be defined inside the constructor method Create an empty constructor inside your Player class --hints--\nYou should add a constructor method to the Player class js\nassert match(code,  /class\\s+Player\\s*\\{\\s*constructor\\s*\\(\\s*\\)\\s*/)\nYour constructor method should be empty js\nassert match(code,  /class\\s+Player\\s*\\{\\s*constructor\\s*\\(\\s*\\)\\s*\\{\\s*\\}\\s*\\}/)\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3855,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6482bc5d699f0acfc52bdc41.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "9fe95c7e1df45e8ba06399f3bbf17f52",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6482bc5d699f0acfc52bdc41.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "#feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); }btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\n--fcc-editable-region--\nclass Player {\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3855,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6482bc5d699f0acfc52bdc41.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "bed9310a44cb6b0feb18530ebd3906bc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64861a8856e1eaf9e349570e.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64861a8856e1eaf9e349570e\ntitle: Step 14\nchallengeType: 0\ndashedName: step-14\n--description--\nInside your constructor, use the this keyword to set the position property to an empty object --hints--\nYou should use the this keyword to set the position property of your class to an empty object js\nassert match(code, /this\\ position/);\nconst player = new Player();\nassert isObject(player position);\nassert isEmpty(player position);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3705,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64861a8856e1eaf9e349570e.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "9e107341a03cae16e6c47463b61cc03d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64861a8856e1eaf9e349570e.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\n--fcc-editable-region--\nclass Player {\nconstructor() {\n}\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3705,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64861a8856e1eaf9e349570e.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "448c535972a8b00451b4f03dfe632adb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64861c02ff1ef4fa62a9e132.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64861c02ff1ef4fa62a9e132\ntitle: Step 15\nchallengeType: 0\ndashedName: step-15\n--description--\nInside your position object, add a new key called x with a value of proportionalSize(10) After that, add another key called y with a value of proportionalSize(400) You need to use the proportionalSize function here to make sure that the player's position is always proportional to the screen size This is important because you want the player to be able to move around the screen regardless of the screen size --hints--\nYou should add a new key called x to your position object ```js\nassert match(code, /this position/);\nconst player = new Player();\nassert property(player position, 'x');\n```\nYou should set the value of x to proportionalSize(10) ```js\nassert match(code, /this position/);\nconst player = new Player();\nassert propertyVal(player position, 'x', proportionalSize(10));\n```\nYou should add a key called y to your position object ```js\nassert match(code, /this position/);\nconst player = new Player();\nassert property(player position, 'y');\n```\nYou should set the value of y to proportionalSize(400) ```js\nassert match(code, /this position/);\nconst player = new Player();\nassert propertyVal(player position, 'y', proportionalSize(400));\n```\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4585,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64861c02ff1ef4fa62a9e132.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "804f62694e32006e1755065c6be290e0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64861c02ff1ef4fa62a9e132.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; }main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4585,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64861c02ff1ef4fa62a9e132.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "f1b709f333a2960feb3086799b7ffc83",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64861c02ff1ef4fa62a9e132.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "100%; text-align: center; background-color: var(--section-bg-color); border-radius: 20px; padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvasheight = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\n--fcc-editable-region--\nclass Player {\nconstructor() {\nthis position = {\n}\n}\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4585,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64861c02ff1ef4fa62a9e132.md",
      "source_type": "git_repo"
    },
    "token_count": 233,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "21abe8de5eb422a93b00fedd08b742ac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6486212f80701cfb18052eae.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 6486212f80701cfb18052eae\ntitle: Step 16\nchallengeType: 0\ndashedName: step-16\n--description--\nBelow your position object, use the this keyword to set the velocity property to an object Inside that new velocity object, create a key called x with a value of 0 and a new key called y with a value of 0 The velocity property will be used to store the player's speed in the x and y directions --hints--\nYou should use the this keyword to set the velocity property of your class to an object js\nassert match(code, /this\\ velocity/);\nconst player = new Player();\nassert isObject(player velocity);\nYou should add a new key called x with a value of 0 inside your velocity object ```js\nassert match(code, /this velocity/);\nconst player = new Player();\nassert(\n(function (obj) {\nif (\nobj hasOwnProperty('x') &&\nobj x == undefined &&\ntypeof obj x === 'number' &&\nobj x === 0\n) {\nreturn true;\n} else {\nreturn false;\n}\n})(player velocity)\n);\n```\nYou should add a key called y with a value of 0 inside your velocity object ```js\nassert match(code, /this velocity/);\nconst player = new Player();\nassert(\n(function (obj) {\nif (\nobj hasOwnProperty('y') &&\nobj y == undefined &&\ntypeof obj y === 'number' &&\nobj y === 0\n) {\nreturn true;\n} else {\nreturn false;\n}\n})(player velocity)\n);\n```\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4794,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6486212f80701cfb18052eae.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "9f406ce99eb8dda024ed3f79ce6a3b80",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6486212f80701cfb18052eae.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "velocity) ); ``` --seed-- --seed-contents-- ```html Learn Intermediate OOP by Building a Platformer Game freeCodeCamp Code Warrior Help the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); }start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4794,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6486212f80701cfb18052eae.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "79dd7f91234062c8bd9645380904d3bc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6486212f80701cfb18052eae.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "flex; align-items: center; justify-content: center; } checkpoint-screen { position: absolute; left: 0; right: 0; margin-left: auto; margin-right: auto; width: 100%; text-align: center; background-color: var(--section-bg-color); border-radius: 20px; padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\"checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\n--fcc-editable-region--\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\n}\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4794,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6486212f80701cfb18052eae.md",
      "source_type": "git_repo"
    },
    "token_count": 290,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "aa496af0ee16c9c10a311ab260cf09c4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64862530b093dbfbea58f43d.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64862530b093dbfbea58f43d\ntitle: Step 17\nchallengeType: 0\ndashedName: step-17\n--description--\nBelow your velocity object, use the this keyword to set the width property to proportionalSize(40) Below your width property, use the this keyword to set the height property to proportionalSize(40) You are using the proportionalSize() function here to set the width and height properties of your class to be proportional to the height of the screen --hints--\nYou should use the this keyword to set the width property of your class to proportionalSize(40) js\nassert match(code, /this\\ width/);\nconst player = new Player();\nassert equal(player width, proportionalSize(40));\nYou should use the this keyword to set the height property of your class to proportionalSize(40) js\nassert match(code, /this\\ height/);\nconst player = new Player();\nassert equal(player height, proportionalSize(40));\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4343,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64862530b093dbfbea58f43d.md",
      "source_type": "git_repo"
    },
    "token_count": 445,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "e1301b9f7be9c5989ced91ca330c5117",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64862530b093dbfbea58f43d.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4343,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64862530b093dbfbea58f43d.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "e66afbc153e8281e21cfb289dca9546d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64862530b093dbfbea58f43d.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 05;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\n--fcc-editable-region--\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\n}\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4343,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64862530b093dbfbea58f43d.md",
      "source_type": "git_repo"
    },
    "token_count": 237,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "bc83c400645ff4103775743690eea43c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6486282ca3a469fca6ebed27.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 6486282ca3a469fca6ebed27\ntitle: Step 18\nchallengeType: 0\ndashedName: step-18\n--description--\nThe next step is to create a draw() method, which will be responsible for creating the player's width, height, position, and fill color Below your constructor, create an empty draw() method --hints--\nYour Player class should have a draw method js\nconst player = new Player();\nassert isFunction(player draw);\nYour draw method should be empty js\nconst player = new Player();\nassert match(player draw toString(), /\\(\\s*\\)\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4048,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6486282ca3a469fca6ebed27.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "b28686462e3b8fb6f0a3b67c92650d09",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6486282ca3a469fca6ebed27.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4048,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6486282ca3a469fca6ebed27.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "99789c05c27263d8ee441b0e70bc7a42",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6486282ca3a469fca6ebed27.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; this velocity = { x: 0, y: 0, }; this width = proportionalSize(40); thisheight = proportionalSize(40);\n}\n--fcc-editable-region--\n--fcc-editable-region--\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4048,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6486282ca3a469fca6ebed27.md",
      "source_type": "git_repo"
    },
    "token_count": 152,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "c7958cbeeeed1ea47e1f86ea1e574883",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\649a6b393a10a4357087b3f7.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 649a6b393a10a4357087b3f7\ntitle: Step 19\nchallengeType: 0\ndashedName: step-19\n--description--\nNow, you need to set the color for your player Inside the draw() method, assign the string \"#99c9ff\" to ctx fillStyle --hints--\nYour draw() method should have a ctx fillStyle js\nconst player = new Player();\nassert match(player draw toString(), /ctx\\ fillStyle\\s*/);\nYou should assign the string \"#99c9ff\" to ctx fillStyle js\nconst player = new Player();\nassert match(player draw toString(), /ctx\\ fillStyle\\s*=\\s*('|\"|`)#99c9ff\\1\\s*/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4066,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\649a6b393a10a4357087b3f7.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "2846bb3302a18472e56596846ada2a1c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\649a6b393a10a4357087b3f7.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "#feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); }btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4066,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\649a6b393a10a4357087b3f7.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "3f924c6a3211a9c3600c6fff274295a8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\649a6b393a10a4357087b3f7.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; thisvelocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\n--fcc-editable-region--\ndraw() {\n}\n--fcc-editable-region--\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4066,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\649a6b393a10a4357087b3f7.md",
      "source_type": "git_repo"
    },
    "token_count": 179,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "d36c4f6d49c1e52295a40aafe71bab46",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\649a75a844f2ea3a0060d807.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 649a75a844f2ea3a0060d807\ntitle: Step 20\nchallengeType: 0\ndashedName: step-20\n--description--\nBelow your ctx fillStyle, you need to create the player's shape by calling the fillRect() method on the ctx object which you instantiated earlier js\nfillRect(x, y, width, height)\nInside the fillRect() method add the this position x, this position y, this width and this height values --hints--\nYour draw() method should have a ctx fillRect js\nconst player = new Player();\nassert match(player draw toString(), /ctx\\ fillRect\\s*(\\s*)\\s*/);\nYou should add the this position x, this position y, this width and this height values to the fillRect() method js\nconst player = new Player();\nassert match(player draw toString(), /ctx\\ fillRect\\s*\\(\\s*this\\ position\\ x\\s*,\\s*this\\ position\\ y\\s*,\\s*this\\ width\\s*,\\s*this\\ height\\s*\\)\\s*/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4418,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\649a75a844f2ea3a0060d807.md",
      "source_type": "git_repo"
    },
    "token_count": 465,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "3985123bd1d76350dcbb17ed29bec256",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\649a75a844f2ea3a0060d807.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4418,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\649a75a844f2ea3a0060d807.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "2118af547aed9edb83880a11abbc9ddf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\649a75a844f2ea3a0060d807.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 05;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\n--fcc-editable-region--\ndraw() {\nctx fillStyle = \"#99c9ff\";\n}\n--fcc-editable-region--\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4418,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\649a75a844f2ea3a0060d807.md",
      "source_type": "git_repo"
    },
    "token_count": 267,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "377b396db834ae7901adc28f442b8619",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\649a80aa4405823b3f81a47f.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 649a80aa4405823b3f81a47f\ntitle: Step 21\nchallengeType: 0\ndashedName: step-21\n--description--\nThe next step is to create an update() method which will be responsible for updating the player's position and velocity as it moves throughout the game Below your draw() method, create an empty update() method --hints--\nYour Player class should have an update method js\nconst player = new Player();\nassert isFunction(player update);\nYour update method should be empty js\nconst player = new Player();\nassert match(player update toString(), /\\(\\s*\\)\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4197,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\649a80aa4405823b3f81a47f.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "bc8873c8c0d5b403aaea9bf64fb961f2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\649a80aa4405823b3f81a47f.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4197,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\649a80aa4405823b3f81a47f.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "ff4b44906c008ccd268fb27c754a5dc6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\649a80aa4405823b3f81a47f.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; this velocity = { x: 0, y: 0, }; this width = proportionalSize(40); thisheight = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\n--fcc-editable-region--\n--fcc-editable-region--\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4197,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\649a80aa4405823b3f81a47f.md",
      "source_type": "git_repo"
    },
    "token_count": 183,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "3db6ce24b6e8faa0054afa3879cb8854",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\649a845dccffd93c0d41ad4b.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 649a845dccffd93c0d41ad4b\ntitle: Step 22\nchallengeType: 0\ndashedName: step-22\n--description--\nInside the update() method, call the draw() method to ensure that the player is continually drawn on the screen as the game updates Don't forget to include the this keyword --hints--\nYou should use the this keyword and call the draw() method js\nconst player = new Player();\nassert match(player update toString(), /this\\ draw\\s*(\\s*)\\s*/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4084,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\649a845dccffd93c0d41ad4b.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "e05dca49aa539f88fc3db4657e4912d7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\649a845dccffd93c0d41ad4b.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4084,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\649a845dccffd93c0d41ad4b.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "8dbf46dd1195414787d2491ebe1be7ab",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\649a845dccffd93c0d41ad4b.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; this velocity = { x: 0, y: 0, }; this width = proportionalSize(40); thisheight = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\n--fcc-editable-region--\nupdate() {\n}\n--fcc-editable-region--\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4084,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\649a845dccffd93c0d41ad4b.md",
      "source_type": "git_repo"
    },
    "token_count": 187,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "d26818958dab6b7ab867d304c00f05b2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a1d39230e33585f3dd0dae.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64a1d39230e33585f3dd0dae\ntitle: Step 24\nchallengeType: 0\ndashedName: step-24\n--description--\nWhen the player jumps up, you will need to add the logic for adjusting its velocity Use the addition assignment operator to add the velocity's y coordinate to the player's y position Don't forget to include the this keyword for the velocity and position --hints--\nYour update() method should have player's y position js\nconst player = new Player();\nassert match(player update toString(), /this\\ position\\ y\\s*/);\nYou should use the addition assignment operator += to add the velocity's y coordinate to the player's y position js\nconst player = new Player();\nassert match(player update toString(), /this\\ position\\ y\\s*\\+=\\s*this\\ velocity\\ y\\s*/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4466,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a1d39230e33585f3dd0dae.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "ec00d91a42adf3821e56d8bccf32e49a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a1d39230e33585f3dd0dae.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "{ --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; }btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4466,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a1d39230e33585f3dd0dae.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "9a4360ef4b435e5245e75a2cb7cac297",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a1d39230e33585f3dd0dae.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Mathceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\n--fcc-editable-region--\nupdate() {\nthis draw();\nthis position x += this velocity x;\n}\n--fcc-editable-region--\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4466,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a1d39230e33585f3dd0dae.md",
      "source_type": "git_repo"
    },
    "token_count": 269,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "bba7e428689669135b7fdbed7821826b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\649a88458b4e343fbdffbbc0.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 649a88458b4e343fbdffbbc0\ntitle: Step 23\nchallengeType: 0\ndashedName: step-23\n--description--\nWhen the player moves to the right, you will need to adjust its velocity Use the addition assignment operator to add the velocity's x coordinate to the player's x position Don't forget to include the this keyword for the velocity and position --hints--\nYour update() method should have the player's x position js\nconst player = new Player();\nassert match(player update toString(), /this\\ position\\ x\\s*/);\nYou should use the addition assignment operator += to add the velocity's x coordinate to the player's x position js\nconst player = new Player();\nassert match(player update toString(), /this\\ position\\ x\\s*\\+=\\s*this\\ velocity\\ x\\s*/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4423,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\649a88458b4e343fbdffbbc0.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "40a3adc5667216e1214a95f02f4fe2d4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\649a88458b4e343fbdffbbc0.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "{ --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; }btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4423,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\649a88458b4e343fbdffbbc0.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "bd8440d47006acfae49c7c03744e487d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\649a88458b4e343fbdffbbc0.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Mathceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\n--fcc-editable-region--\nupdate() {\nthis draw();\n}\n--fcc-editable-region--\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4423,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\649a88458b4e343fbdffbbc0.md",
      "source_type": "git_repo"
    },
    "token_count": 261,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "2d2fd3f58bacdd0121c76edd9d6e90ea",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a1e1b74d2e4e019acb70b8.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64a1e1b74d2e4e019acb70b8\ntitle: Step 26\nchallengeType: 0\ndashedName: step-26\n--description--\nIn the if statement, add another if statement to check if the player's y position is less than 0 --hints--\nYour condition for the if statement should check if the player's y position is less than 0 js\nconst player = new Player();\nassert match(player update toString(), /this\\ position\\ y\\s*<\\s*0/)\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4226,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a1e1b74d2e4e019acb70b8.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "d8a069933292a99874d0981d00cd7430",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a1e1b74d2e4e019acb70b8.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4226,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a1e1b74d2e4e019acb70b8.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "54dbc34de2872f35b564010adbcb8908",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a1e1b74d2e4e019acb70b8.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; this velocity = { x: 0, y: 0, }; this width = proportionalSize(40); thisheight = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\n--fcc-editable-region--\nif (this position y + this height + this velocity y <= canvas height) {\n}\n--fcc-editable-region--\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4226,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a1e1b74d2e4e019acb70b8.md",
      "source_type": "git_repo"
    },
    "token_count": 224,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "ec05cd213d1cd46e5f639b9acb17a848",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a1d86b1294b2869cef1c18.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64a1d86b1294b2869cef1c18\ntitle: Step 25\nchallengeType: 0\ndashedName: step-25\n--description--\nRight now, when the player jumps up, it is possible for it to move past the height of the canvas To fix that, you will need to add a condition to stop the player from falling past the height of the canvas Create an empty if statement that checks if the sum of the player's y position, height, and y velocity is less than or equal to the height of the canvas --hints--\nYour update() method should have an if statement js\nconst player = new Player();\nassert match(player update toString(), /if\\s*\\(/);\nYour condition for the if statement should check if the sum of the player's y position, height and y velocity is less than or equal to the height of the canvas js\nconst player = new Player();\nassert match(player update toString(), /if\\s*\\(\\s*( :this\\ position\\ y\\s*\\+\\s*this\\ height\\s*\\+\\s*this\\ velocity\\ y|this\\ position\\ y\\s*\\+\\s*this\\ velocity\\ y\\s*\\+\\s*this\\ height|this\\ height\\s*\\+\\s*this\\ position\\ y\\s*\\+\\s*this\\ velocity\\ y|this\\ height\\s*\\+\\s*this\\ velocity\\ y\\s*\\+\\s*this\\ position\\ y|this\\ velocity\\ y\\s*\\+\\s*this\\ position\\ y\\s*\\+\\s*this\\ height|this\\ velocity\\ y\\s*\\+\\s*this\\ height\\s*\\+\\s*this\\ position\\ y)\\s*<=\\s*canvas\\ height\\s*\\)/);\nYour if statement should be empty js\nconst player = new Player();\nassert match(player update toString(), /if\\s*\\( *\\)\\s*{\\s*}/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5153,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a1d86b1294b2869cef1c18.md",
      "source_type": "git_repo"
    },
    "token_count": 451,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "c31690c0e1e51ff3aa8673aefaa5f353",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a1d86b1294b2869cef1c18.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "y\\s*\\+\\s*this\\ position\\ y\\s*\\+\\s*this\\ height|this\\ velocity\\ y\\s*\\+\\s*this\\ height\\s*\\+\\s*this\\ position\\ y)\\s*<=\\s*canvas\\ height\\s*\\)/); Your if statement should be empty js const player = new Player(); assert match(player update toString(), /if\\s*\\( *\\)\\s*{\\s*}/); --seed-- --seed-contents-- ```html Learn Intermediate OOP by Building a Platformer Game freeCodeCamp Code Warrior Help the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game Congrats You reached the last checkpoint```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5153,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a1d86b1294b2869cef1c18.md",
      "source_type": "git_repo"
    },
    "token_count": 434,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "c8a4ca966ea90246ab27fbb7fc15f018",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a1d86b1294b2869cef1c18.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5153,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a1d86b1294b2869cef1c18.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "df4a45cc3c6d9e6323ed675b269f69d0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a1d86b1294b2869cef1c18.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; this velocity = { x: 0, y: 0, }; this width = proportionalSize(40); thisheight = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\n--fcc-editable-region--\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\n}\n--fcc-editable-region--\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5153,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a1d86b1294b2869cef1c18.md",
      "source_type": "git_repo"
    },
    "token_count": 206,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "b27161c9ba5a209ac676bd6ea92231bc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a1e54abad976028a8938f1.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64a1e54abad976028a8938f1\ntitle: Step 27\nchallengeType: 0\ndashedName: step-27\n--description--\nInside the inner if statement, assign 0 to the player's y position --hints--\nYou should assign 0 to the player's y position js\nconst player = new Player();\nassert match(player update toString(), /this\\ position\\ y\\s*=\\s*0/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4196,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a1e54abad976028a8938f1.md",
      "source_type": "git_repo"
    },
    "token_count": 448,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "ea65461a5137071d971954c4a2ecacc4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a1e54abad976028a8938f1.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4196,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a1e54abad976028a8938f1.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "9cc2fb7f5f5b919f8b288cf6c3ff6361",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a1e54abad976028a8938f1.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; this velocity = { x: 0, y: 0, }; this width = proportionalSize(40); thisheight = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\n--fcc-editable-region--\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\n}\n}\n--fcc-editable-region--\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4196,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a1e54abad976028a8938f1.md",
      "source_type": "git_repo"
    },
    "token_count": 235,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "89f7b63232aea3f7380b506075574e9f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a2cadabc8538152c49a7eb.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64a2cadabc8538152c49a7eb\ntitle: Step 29\nchallengeType: 0\ndashedName: step-29\n--description--\nBelow your inner if statement, use the addition assignment operator to add gravity to the y velocity --hints--\nYou should use the addition assignment operator to add gravity to this velocity y js\nconst player = new Player();\nassert match(player update toString(), /this\\ velocity\\ y\\s*\\+=\\s*gravity/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4334,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a2cadabc8538152c49a7eb.md",
      "source_type": "git_repo"
    },
    "token_count": 455,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "34d4affb46979747f2285b738e52ac75",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a2cadabc8538152c49a7eb.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4334,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a2cadabc8538152c49a7eb.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "eb8ba36ee1fe6d533407c8b7fbdbe569",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a2cadabc8538152c49a7eb.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; this velocity = { x: 0, y: 0, }; this width = proportionalSize(40); thisheight = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\n--fcc-editable-region--\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\n}\n--fcc-editable-region--\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4334,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a2cadabc8538152c49a7eb.md",
      "source_type": "git_repo"
    },
    "token_count": 248,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "48cc1bc9a68b9e7546b10e0f445d6e60",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a1fdbf48e08b06e8b05870.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64a1fdbf48e08b06e8b05870\ntitle: Step 28\nchallengeType: 0\ndashedName: step-28\n--description--\nBelow the this position y = 0, assign gravity to the velocity's y position --hints--\nYou should assign gravity to the velocity's y position js\nconst player = new Player();\nassert match(player update toString(), /this\\ velocity\\ y\\s*=\\s*gravity/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4248,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a1fdbf48e08b06e8b05870.md",
      "source_type": "git_repo"
    },
    "token_count": 451,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "280eecebbe580bd267b1a0f5d47ff979",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a1fdbf48e08b06e8b05870.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4248,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a1fdbf48e08b06e8b05870.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "7c4cafccd3ab7d42c10eb71fc82e94fa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a1fdbf48e08b06e8b05870.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; this velocity = { x: 0, y: 0, }; this width = proportionalSize(40); thisheight = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\n--fcc-editable-region--\nif (this position y < 0) {\nthis position y = 0;\n}\n--fcc-editable-region--\n}\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4248,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a1fdbf48e08b06e8b05870.md",
      "source_type": "git_repo"
    },
    "token_count": 242,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "78cb5979f3e4fc7679bef6ec065488cc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a2ceb58fe10e15e0dc223f.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64a2ceb58fe10e15e0dc223f\ntitle: Step 30\nchallengeType: 0\ndashedName: step-30\n--description--\nAdd an else clause that assigns 0 to this velocity y --hints--\nYou should add an else statement to your update function js\nconst player = new Player();\nassert match(player update toString(), /else/);\nYour else statement should come after your if statement js\nconst player = new Player();\nconst split = player update toString() split(/\\s|\\n/);\nassert isAbove(split indexOf('else'), split indexOf('if'));\nYou should add an else clause that assigns 0 to this velocity y js\nconst player = new Player();\nassert match(player update toString(), /this\\ velocity\\ y\\s*=\\s*0\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4659,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a2ceb58fe10e15e0dc223f.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "a790a64c20c650da3d27f174900d8f9c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a2ceb58fe10e15e0dc223f.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "{ --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; }btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4659,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a2ceb58fe10e15e0dc223f.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "332b55d82d59e9534ea11f14bfc4f910",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a2ceb58fe10e15e0dc223f.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Mathceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\n--fcc-editable-region--\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n}\n--fcc-editable-region--\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4659,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a2ceb58fe10e15e0dc223f.md",
      "source_type": "git_repo"
    },
    "token_count": 325,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "40b467ca1031f6a0a2d97278fa63ceb7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a2d19c5029ba166cb912e5.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64a2d19c5029ba166cb912e5\ntitle: Step 31\nchallengeType: 0\ndashedName: step-31\n--description--\nThe final condition you need to add inside the Player class is to ensure that the player stays within the boundaries of the canvas screen and doesn't move too far off to the left Create an if statement, to check if the player's x position is less than the width --hints--\nYour condition should check if the player's x position is less than the width\njs\nconst player = new Player();\nassert match(player update toString(), /if\\s*\\(\\s*this\\ position\\ x\\s*<\\s*this\\ width\\s*\\)\\s*{\\s*}/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4584,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a2d19c5029ba166cb912e5.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "96c19cfc817d70fc6b47beb1a6975e8f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a2d19c5029ba166cb912e5.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "#feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); }btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4584,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a2d19c5029ba166cb912e5.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "47fa9b3d25886fc365d443877247803a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a2d19c5029ba166cb912e5.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; thisvelocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\n--fcc-editable-region--\n--fcc-editable-region--\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4584,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a2d19c5029ba166cb912e5.md",
      "source_type": "git_repo"
    },
    "token_count": 287,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "6069f5d8a96653be690c951e75ed6f52",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a2d5f23518e71727cac0db.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64a2d5f23518e71727cac0db\ntitle: Step 32\nchallengeType: 0\ndashedName: step-32\n--description--\nInside the if statement, assign the width to the player's x position --hints--\nYour if statement should contain an assignment of the width to the player's x position js\nconst player = new Player();\nassert match(player update toString(), /this\\ position\\ x\\s*=\\s*this\\ width\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4432,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a2d5f23518e71727cac0db.md",
      "source_type": "git_repo"
    },
    "token_count": 457,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "9d6cd4f4c89b79ea344e001a11a68d09",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a2d5f23518e71727cac0db.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4432,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a2d5f23518e71727cac0db.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "8ba1789ab8c039d142e985a83b87a236",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a2d5f23518e71727cac0db.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; this velocity = { x: 0, y: 0, }; this width = proportionalSize(40); thisheight = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\n--fcc-editable-region--\nif (this position x < this width) {\n}\n--fcc-editable-region--\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4432,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a2d5f23518e71727cac0db.md",
      "source_type": "git_repo"
    },
    "token_count": 275,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "dacfc9dc8bbca7d2a9277ff95e7472d6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a2d86799a58517c29f79a5.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64a2d86799a58517c29f79a5\ntitle: Step 35\nchallengeType: 0\ndashedName: step-35\n--description--\nThe next step is to use the new keyword to create a new instance of the Player object and assign it to a new const variable called player --hints--\nYou should use const to declare a player variable js\nassert match(code, /const\\s+player\\s*=/);\nYou should use the new keyword to instantiate a new Player object js\nassert match(code, /new\\s+Player\\s*\\(\\s*\\)/);\nYou should assign your new Player object to the player variable js\nassert isTrue(player instanceof Player);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4800,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a2d86799a58517c29f79a5.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "2e64ca1235f08c4be3966f61e61acfe6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a2d86799a58517c29f79a5.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4800,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a2d86799a58517c29f79a5.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "5efe2c81366d5383f4ce12e17f6cb49b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a2d86799a58517c29f79a5.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; this velocity = { x: 0, y: 0, }; this width = proportionalSize(40); thisheight = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4800,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64a2d86799a58517c29f79a5.md",
      "source_type": "git_repo"
    },
    "token_count": 312,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "9d32363fb23c9533496b8b76414aab37",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64aaf2aff7f1fc7a550f40cb.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64aaf2aff7f1fc7a550f40cb\ntitle: Step 36\nchallengeType: 0\ndashedName: step-36\n--description--\nNow it is time to see your new player drawn on the screen Start by creating an empty arrow function called startGame --hints--\nstartGame should be a function\njs\nassert isFunction(startGame);\nstartGame should be an arrow function\n```js\nassert match(code, /\\sconst\\s+startGame\\s=\\s(\\s)\\s=>\\s{\\s}\\s; /);\n```\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4650,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64aaf2aff7f1fc7a550f40cb.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "a2748f31012caa3a66d83a394abcc6a5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64aaf2aff7f1fc7a550f40cb.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4650,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64aaf2aff7f1fc7a550f40cb.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "a6e752445f6954f27993f2066709e2c0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64aaf2aff7f1fc7a550f40cb.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; this velocity = { x: 0, y: 0, }; this width = proportionalSize(40); thisheight = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nconst player = new Player();\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4650,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64aaf2aff7f1fc7a550f40cb.md",
      "source_type": "git_repo"
    },
    "token_count": 318,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "5eb201e17fa5adc4159cecf4abc2503f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64ab0134716d0a7c8889f167.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64ab0134716d0a7c8889f167\ntitle: Step 38\nchallengeType: 0\ndashedName: step-38\n--description--\nTo visualize the player on the screen, you need to draw it on the canvas Inside the startGame function, call the draw() method of your player object --hints--\nYou should call the draw() method of your player object js\nassert match(code, /\\s*player\\s*\\ \\s*draw\\s*\\(\\s*\\)\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4717,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64ab0134716d0a7c8889f167.md",
      "source_type": "git_repo"
    },
    "token_count": 464,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "4ab719ce412493203ca4d4c9fc15e1f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64ab0134716d0a7c8889f167.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4717,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64ab0134716d0a7c8889f167.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "37045ff02f023c98489c17c5ecdf1cc4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64ab0134716d0a7c8889f167.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; this velocity = { x: 0, y: 0, }; this width = proportionalSize(40); thisheight = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nconst player = new Player();\n--fcc-editable-region--\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4717,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64ab0134716d0a7c8889f167.md",
      "source_type": "git_repo"
    },
    "token_count": 341,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "720bffdefd7b20250c6d8146a54e07bb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64aaf83d46b16a7b20a27051.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64aaf83d46b16a7b20a27051\ntitle: Step 37\nchallengeType: 0\ndashedName: step-37\n--description--\nInside your startGame function, you will need to display the canvas element and hide the startScreen container Use canvas style display to change the display value to \"block\" Below that, use startScreen style display to change the display value to \"none\" --hints--\nYou should use dot notation to access the style property of canvas js\nassert match(startGame toString(), /canvas\\ style/);\nYou should use dot notation to access the display property of the style property js\nassert match(startGame toString(), /canvas\\ style\\ display/);\nYou should set the canvas display property to \"block\" js\nassert match(startGame toString(), /canvas\\ style\\ display\\s*=\\s*('|\")block\\1/);\nYou should use dot notation to access the style property of startScreen js\nassert match(startGame toString(), /startScreen\\ style/);\nYou should use dot notation to access the display property of the style property js\nassert match(startGame toString(), /startScreen\\ style\\ display/);\nYou should set the startScreen display property to \"none\" js\nassert match(startGame toString(), /startScreen\\ style\\ display\\s*=\\s*('|\")none\\1/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5553,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64aaf83d46b16a7b20a27051.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "2c38f5f9d839c19d185239bba257e4d2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64aaf83d46b16a7b20a27051.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "arrows to move the player around You can also use the spacebar to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; }instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5553,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64aaf83d46b16a7b20a27051.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "761b530ac7f3f4e997b1ee3712e1de58",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64aaf83d46b16a7b20a27051.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "100%; text-align: center; background-color: var(--section-bg-color); border-radius: 20px; padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvasheight = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nconst player = new Player();\n--fcc-editable-region--\nconst startGame = () => {\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5553,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64aaf83d46b16a7b20a27051.md",
      "source_type": "git_repo"
    },
    "token_count": 452,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "8c214925b56fdb3b76e0325d570518ba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64ab06a9cc033b7d4a8bad2a.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64ab06a9cc033b7d4a8bad2a\ntitle: Step 39\nchallengeType: 0\ndashedName: step-39\n--description--\nNow it's time to add the functionality for the start game button Add an addEventListener to the startBtn and pass in a click event and a reference to the startGame function Click on the start game button, and you should see a light blue square on the screen which represents the main player --hints--\nYou should call the addEventListener() method of the startBtn js\nassert match(code, /startBtn\\ addEventListener\\(/);\nYou should pass click as the first argument to the addEventListener() method js\nassert match(code, /startBtn\\ addEventListener\\(\\s*('|\")click\\1\\s*/);\nYou should pass a reference to startGame as the second argument to the addEventListener() method js\nassert match(code, /startBtn\\ addEventListener\\(\\s*('|\")click\\1\\s*,\\s*startGame( \\s*\\()\\s*/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5252,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64ab06a9cc033b7d4a8bad2a.md",
      "source_type": "git_repo"
    },
    "token_count": 462,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "6cfe062a7df1fd2da0acc7327e78eade",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64ab06a9cc033b7d4a8bad2a.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5252,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64ab06a9cc033b7d4a8bad2a.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "5779438d850a5b3f439b452820b09a98",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64ab06a9cc033b7d4a8bad2a.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 05;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nconst player = new Player();\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nplayer draw();\n}\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5252,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64ab06a9cc033b7d4a8bad2a.md",
      "source_type": "git_repo"
    },
    "token_count": 445,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "93f64c21a607e7901a9bcc328636fb2a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64ab178206f3237eafcc0ef4.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64ab178206f3237eafcc0ef4\ntitle: Step 41\nchallengeType: 0\ndashedName: step-41\n--description--\nThe requestAnimationFrame() web API, takes in a callback and is used to update the animation on the screen The animate function will be responsible for updating the player's position and continually drawing it on the canvas Inside the animate function, call the requestAnimationFrame() API and pass animate as the argument --hints--\nYou should call the requestAnimationFrame() API and pass in animate for the argument js\nassert match(code, /\\s*requestAnimationFrame\\s*\\(\\s*animate\\s*\\)\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5037,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64ab178206f3237eafcc0ef4.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "b993c020e095b54d7761b8a7c7c849bf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64ab178206f3237eafcc0ef4.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5037,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64ab178206f3237eafcc0ef4.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "6ca02fe684d6fc4ab11ec38f62cb433e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64ab178206f3237eafcc0ef4.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; this velocity = { x: 0, y: 0, }; this width = proportionalSize(40); thisheight = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nconst player = new Player();\n--fcc-editable-region--\nconst animate = () => {\n}\n--fcc-editable-region--\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nplayer draw();\n}\nstartBtn addEventListener(\"click\", startGame);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5037,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64ab178206f3237eafcc0ef4.md",
      "source_type": "git_repo"
    },
    "token_count": 361,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "28a9a166577d206c5ff324031a161b09",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64ab143edad72b7e25b23f8a.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64ab143edad72b7e25b23f8a\ntitle: Step 40\nchallengeType: 0\ndashedName: step-40\n--description--\nNow that you can see the player on the screen, it is time to start adding the functionality for moving the player across the screen Create a new empty arrow function called animate --hints--\nYou should add a new arrow function called animate ```js\nassert match(code, /\\sconst\\s+animate\\s=\\s(\\s)\\s=>\\s{\\s}\\s; /);\n```\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4819,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64ab143edad72b7e25b23f8a.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "9ba92883764ce70ce39e4c28f8ae5437",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64ab143edad72b7e25b23f8a.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4819,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64ab143edad72b7e25b23f8a.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "0604ddc15e310d9f5d2818359938fa28",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64ab143edad72b7e25b23f8a.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; this velocity = { x: 0, y: 0, }; this width = proportionalSize(40); thisheight = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nconst player = new Player();\n--fcc-editable-region--\n--fcc-editable-region--\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nplayer draw();\n}\nstartBtn addEventListener(\"click\", startGame);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4819,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64ab143edad72b7e25b23f8a.md",
      "source_type": "git_repo"
    },
    "token_count": 354,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "69a69d39329b51938d9a8104d475f1da",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64aced3e88b0a38cec824dea.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64aced3e88b0a38cec824dea\ntitle: Step 43\nchallengeType: 0\ndashedName: step-43\n--description--\nThe next step is to update the player's position as it moves throughout the game Below your ctx clearRect(), call the update() method on the player --hints--\nYou should call the update() method on the player js\nassert match(code, /\\s*player\\s*\\ \\s*update\\s*\\(\\s*\\)\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4883,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64aced3e88b0a38cec824dea.md",
      "source_type": "git_repo"
    },
    "token_count": 460,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "39278cf850ae3d4cf1df71e97bf0c6ce",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64aced3e88b0a38cec824dea.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4883,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64aced3e88b0a38cec824dea.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "cce44be14bb6471f27a09fb68f9ea41c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64aced3e88b0a38cec824dea.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; this velocity = { x: 0, y: 0, }; this width = proportionalSize(40); thisheight = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nconst player = new Player();\n--fcc-editable-region--\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\n}\n--fcc-editable-region--\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nplayer draw();\n}\nstartBtn addEventListener(\"click\", startGame);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4883,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64aced3e88b0a38cec824dea.md",
      "source_type": "git_repo"
    },
    "token_count": 381,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "0013f0d3da8f2c256c0410b221d9bad2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64acebecb7484c8c6a760534.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64acebecb7484c8c6a760534\ntitle: Step 42\nchallengeType: 0\ndashedName: step-42\n--description--\nAs the player moves through the game, you will need to clear the canvas before rendering the next frame of the animation You can use the clearRect() Web API to accomplish this It takes in an x, y, width, and height arguments Below your requestAnimationFrame, call the clearRect() method on the ctx variable and pass in 0, 0, canvas width, canvas height as the arguments --hints--\nYou should call the clearRect() method on the ctx variable js\nassert match(code, /\\s*ctx\\s*\\ \\s*clearRect\\s*\\([^)]*\\)\\s*; /);\nYou should pass in 0, 0, canvas width, canvas height for the arguments of the clearRect() method js\nassert match(code, /\\s*ctx\\s*\\ \\s*clearRect\\s*\\(\\s*0\\s*,\\s*0\\s*,\\s*canvas\\s*\\ \\s*width\\s*,\\s*canvas\\s*\\ \\s*height\\s*\\)\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5335,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64acebecb7484c8c6a760534.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "a0026e5a80f92be08b30ae63eaabbedb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64acebecb7484c8c6a760534.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5335,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64acebecb7484c8c6a760534.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "f7b9a5e743b4702f1c8a918c0c1a4ae5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64acebecb7484c8c6a760534.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 05;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nconst player = new Player();\n--fcc-editable-region--\nconst animate = () => {\nrequestAnimationFrame(animate);\n}\n--fcc-editable-region--\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nplayer draw();\n}\nstartBtn addEventListener(\"click\", startGame);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5335,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64acebecb7484c8c6a760534.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "e6c87b32bc77a8af0342aba9c909e924",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64acedb5f59c0c8d43e96aa4.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64acedb5f59c0c8d43e96aa4\ntitle: Step 44\nchallengeType: 0\ndashedName: step-44\n--description--\nTo manage the player's movement in the game, you will need to monitor when the left and right arrow keys are pressed Create a new const variable called keys and assign it an empty object --hints--\nYou should create a new const variable called keys js\nassert match(code, /\\s*const\\s+keys/);\nYou should assign an empty object to the keys variable js\nassert match(code, /\\s*const\\s+keys\\s*=\\s*{\\s*}\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5048,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64acedb5f59c0c8d43e96aa4.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "ddc91f699f8fac089355b0e6d124c538",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64acedb5f59c0c8d43e96aa4.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5048,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64acedb5f59c0c8d43e96aa4.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "0070f774489c9cdb1a4f1b41acd7e40b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64acedb5f59c0c8d43e96aa4.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; this velocity = { x: 0, y: 0, }; this width = proportionalSize(40); thisheight = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nconst player = new Player();\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplayer update();\n}\n--fcc-editable-region--\n--fcc-editable-region--\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nplayer draw();\n}\nstartBtn addEventListener(\"click\", startGame);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5048,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64acedb5f59c0c8d43e96aa4.md",
      "source_type": "git_repo"
    },
    "token_count": 384,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "cb8b6ebfa332199e21c175b8764edd75",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64acf1af380a708ded8761f0.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64acf1af380a708ded8761f0\ntitle: Step 45\nchallengeType: 0\ndashedName: step-45\n--description--\nInside the keys object, add a new key called rightKey and assign it an object with the key-value pair of pressed: false Below the rightKey object, create a leftKey object and assign it an object with the key-value pair of pressed: false --hints--\nYour keys object should have a rightKey property js\nassert property(keys, 'rightKey');\nYour rightKey value should be an object js\nassert isObject(keys rightKey)\nYour rightKey object should have a pressed key js\nassert property(keys rightKey, 'pressed');\nYou should set false to the pressed key of the rightKey object js\nassert equal(keys rightKey pressed, false);\nYour leftKey value should be an object js\nassert isObject(keys leftKey)\nYour leftKey object should have a pressed key js\nassert property(keys leftKey, 'pressed');\nYou should set false to the pressed key of the leftKey object js\nassert equal(keys leftKey pressed, false);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5623,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64acf1af380a708ded8761f0.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "b51bcc9b556683ab83dce8bcc58f765d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64acf1af380a708ded8761f0.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5623,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64acf1af380a708ded8761f0.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "5981ece3a4a9c0684d0ee1ea3868660d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64acf1af380a708ded8761f0.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 05;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nconst player = new Player();\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplayer update();\n}\n--fcc-editable-region--\nconst keys = {\n}\n--fcc-editable-region--\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nplayer draw();\n}\nstartBtn addEventListener(\"click\", startGame);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5623,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64acf1af380a708ded8761f0.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "93b3483ba3612049ff5f6da419586bf8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64acf287857bb38e6dd7ca69.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64acf287857bb38e6dd7ca69\ntitle: Step 46\nchallengeType: 0\ndashedName: step-46\n--description--\nThe next step is to add the logic for increasing or decreasing a player's velocity based on if they move to the left or right of the screen Inside the animate function, create an if statement where the condition checks if the right key was pressed and the player's x position is less than proportionalSize(400) You need to use the proportionalSize function here to make sure the player's x position is always proportional to the screen size --hints--\nYou should have an if statement that checks if the right key was pressed and the player's x position is less than proportionalSize(400) Remember that the this keyword should not be used here because that is only for the Player class and not for the player object js\nassert match(animate toString(), /keys\\ rightKey\\ (pressed|pressed\\s*===\\s*true)\\s*&&\\s*player\\ position\\ x\\s*<\\s*proportionalSize\\(\\s*400\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5608,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64acf287857bb38e6dd7ca69.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "0804fff08620371bf6f734ef5a913faf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64acf287857bb38e6dd7ca69.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5608,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64acf287857bb38e6dd7ca69.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "191a17a95f448ef3e2e1e1fd3470709d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64acf287857bb38e6dd7ca69.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 05;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nconst player = new Player();\n--fcc-editable-region--\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplayer update();\n}\n--fcc-editable-region--\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nplayer draw();\n}\nstartBtn",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5608,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64acf287857bb38e6dd7ca69.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "200e462f7976c5ce61d2cd9b3692ebf1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64acf287857bb38e6dd7ca69.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "* 2) { this position x = canvas width - this width * 2; } } } const player = new Player(); --fcc-editable-region-- const animate = () => { requestAnimationFrame(animate); ctx clearRect(0, 0, canvas width, canvas height); player update(); } --fcc-editable-region-- const keys = { rightKey: { pressed: false }, leftKey: { pressed: false } }; const startGame = () => { canvas style display = \"block\"; startScreen style display = \"none\"; player draw(); } startBtnaddEventListener(\"click\", startGame);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5608,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64acf287857bb38e6dd7ca69.md",
      "source_type": "git_repo"
    },
    "token_count": 126,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "41893e7cfe3fa6ba6cfc69b812763c86",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c703f58330b3767399e486.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64c703f58330b3767399e486\ntitle: Step 47\nchallengeType: 0\ndashedName: step-47\n--description--\nInside the if statement, assign the number 5 to the player's x velocity --hints--\nYou should assign the number 5 to the player's x velocity js\nassert match(animate toString(), /player\\ velocity\\ x\\s*=\\s*5\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5025,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c703f58330b3767399e486.md",
      "source_type": "git_repo"
    },
    "token_count": 447,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "629ae928d81f5d19f78c6d76cc397c71",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c703f58330b3767399e486.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5025,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c703f58330b3767399e486.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "22b208366e54975a518595ae04883248",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c703f58330b3767399e486.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; this velocity = { x: 0, y: 0, }; this width = proportionalSize(40); thisheight = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nconst player = new Player();\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplayer update();\n--fcc-editable-region--\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\n}\n--fcc-editable-region--\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nplayer draw();\n}\nstartBtn addEventListener(\"click\", startGame);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5025,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c703f58330b3767399e486.md",
      "source_type": "git_repo"
    },
    "token_count": 425,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "f6cc4bd2daf5e5bb895c65950b7fc133",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c705fd8969d677066792b8.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64c705fd8969d677066792b8\ntitle: Step 48\nchallengeType: 0\ndashedName: step-48\n--description--\nAdd an else if statement where the condition checks if the left key was pressed and the player's x position is greater than proportionalSize(100) You need to use the proportionalSize function here to make sure the player's x position is always proportional to the screen size Inside the else if statement, assign the number -5 to the player's x velocity --hints--\nYou should add an else if statement to your animate function js\nassert match(animate toString(), /else\\s+if/);\nYou should check if the left key was pressed and if the player's x position is greater than proportionalSize(100) js\nassert match(animate toString(), /keys\\ leftKey\\ pressed\\s*&&\\s*player\\ position\\ x\\s*>\\s*proportionalSize\\(\\s*100\\s*\\)/);\nYou should assign the number -5 to the player's x velocity inside the else if js\nassert match(animate toString(), /player\\ velocity\\ x\\s*=\\s*-5\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5745,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c705fd8969d677066792b8.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "3c9da88e89f924cb5bc434616bfefdf0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c705fd8969d677066792b8.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5745,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c705fd8969d677066792b8.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "a97182edfa87001f432d716ae75297a6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c705fd8969d677066792b8.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 05;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nconst player = new Player();\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplayer update();\n--fcc-editable-region--\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5745,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c705fd8969d677066792b8.md",
      "source_type": "git_repo"
    },
    "token_count": 460,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "e01a2300b176e7d02982a6aec3e15d7f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c705fd8969d677066792b8.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "(this position x < this width) { this position x = this width; } if (this position x >= canvas width - this width * 2) { this position x = canvas width - this width * 2; } } } const player = new Player(); const animate = () => { requestAnimationFrame(animate); ctx clearRect(0, 0, canvas width, canvas height); player update(); --fcc-editable-region-- if (keys rightKey pressed && player position x < proportionalSize(400)) { player velocityx = 5;\n}\n--fcc-editable-region--\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nplayer draw();\n}\nstartBtn addEventListener(\"click\", startGame);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5745,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c705fd8969d677066792b8.md",
      "source_type": "git_repo"
    },
    "token_count": 181,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "4f02b920762823a1c899af8f0861966f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c708fe06b0c3776f90faaf.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64c708fe06b0c3776f90faaf\ntitle: Step 49\nchallengeType: 0\ndashedName: step-49\n--description--\nAdd an else clause that assigns the number 0 to the player's x velocity --hints--\nYou should add an else statement to your animate function js\nassert match(animate toString(), /\\}\\s*else\\s*\\{/);\nYour else statement should come after your else if statement js\nconst elseIfMatch = animate toString() match(/else\\s*if/);\nconst elseMatch = animate toString() match(/\\}\\s*else\\s\\{/);\nassert isBelow(elseIfMatch index, elseMatch index);\nYou should include an else clause that assigns the number 0 to the player's x velocity js\nassert match(animate toString(), /else\\s*\\{\\s*player\\ velocity\\ x\\s*=\\s*0\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5579,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c708fe06b0c3776f90faaf.md",
      "source_type": "git_repo"
    },
    "token_count": 433,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "823e94998de5a1efd90761bb85f99baf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c708fe06b0c3776f90faaf.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5579,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c708fe06b0c3776f90faaf.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "4cd70f2f0c84627adba90559b8fe124c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c708fe06b0c3776f90faaf.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 05;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nconst player = new Player();\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplayer update();\n--fcc-editable-region--\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5579,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c708fe06b0c3776f90faaf.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "24e2b557d837a7936f7cf0cb2b9f19d0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c708fe06b0c3776f90faaf.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": ">= canvas width - this width * 2) { this position x = canvas width - this width * 2; } } } const player = new Player(); const animate = () => { requestAnimationFrame(animate); ctx clearRect(0, 0, canvas width, canvas height); player update(); --fcc-editable-region-- if (keys rightKey pressed && player position x < proportionalSize(400)) { player velocity x = 5; } else if (keys leftKey pressed && player position x > proportionalSize(100)) { player velocityx = -5;\n}\n--fcc-editable-region--\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nplayer draw();\n}\nstartBtn addEventListener(\"click\", startGame);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5579,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c708fe06b0c3776f90faaf.md",
      "source_type": "git_repo"
    },
    "token_count": 186,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "6a397699023a28ad37a8e0856113172a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c70d3bf7504978368da6ad.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64c70d3bf7504978368da6ad\ntitle: Step 50\nchallengeType: 0\ndashedName: step-50\n--description--\nThe next step is to add the functionality that will be responsible for moving the player across the screen Create a new arrow function called movePlayer that has three parameters called key, xVelocity, isPressed --hints--\nYou should declare a movePlayer function js\nassert isFunction(movePlayer);\nYour movePlayer function should take the parameters of key, xVelocity, and isPressed js\nassert match(movePlayer toString(), /\\(\\s*key\\s*,\\s*xVelocity\\s*,\\s*isPressed\\s*\\)/);\nYour movePlayer function should be empty js\nassert match(movePlayer toString(), /\\(\\s*key\\s*,\\s*xVelocity\\s*,\\s*isPressed\\s*\\)\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5628,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c70d3bf7504978368da6ad.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "a684f99d8b9ed8592633948c313bfd75",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c70d3bf7504978368da6ad.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "{ --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; }btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5628,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c70d3bf7504978368da6ad.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "05d7b44442dcfbac20ad62540621d54b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c70d3bf7504978368da6ad.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Mathceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nconst player = new Player();\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5628,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c70d3bf7504978368da6ad.md",
      "source_type": "git_repo"
    },
    "token_count": 460,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "808981dc1de8c173157fb0997524350b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c70d3bf7504978368da6ad.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "2) { this position x = canvas width - this width * 2; } } } const player = new Player(); const animate = () => { requestAnimationFrame(animate); ctx clearRect(0, 0, canvas width, canvas height); player update(); if (keys rightKey pressed && player position x < proportionalSize(400)) { player velocity x = 5; } else if (keys leftKey pressed && player position x > proportionalSize(100)) { player velocity x = -5; } else { player velocityx = 0;\n}\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\n--fcc-editable-region--\n--fcc-editable-region--\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nplayer draw();\n}\nstartBtn addEventListener(\"click\", startGame);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5628,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c70d3bf7504978368da6ad.md",
      "source_type": "git_repo"
    },
    "token_count": 188,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "885c024e17d3321d2eeba27a26078ff8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c70f78dbf5667a307a7d90.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64c70f78dbf5667a307a7d90\ntitle: Step 51\nchallengeType: 0\ndashedName: step-51\n--description--\nIn the game, the player will interact with different checkpoints If the isCheckpointCollisionDetectionActive is false, then you will need to stop the player's movements on the x and y axes Start by creating an if statement where the condition checks if the isCheckpointCollisionDetectionActive is false Remember that you can use the operator to check if the variable is false --hints--\nYou should add an if statement to your movePlayer function js\nassert match(movePlayer toString(), /if\\s*\\(/);\nYou should check if the isCheckpointCollisionDetectionActive variable is false ```js\nassert match(\nmovePlayer toString(),\n/if\\s(\\s( : isCheckpointCollisionDetectionActive|isCheckpointCollisionDetectionActive\\s( :===|==)\\sfalse)\\s)\\s{/\n);\n```\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5808,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c70f78dbf5667a307a7d90.md",
      "source_type": "git_repo"
    },
    "token_count": 437,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "f7f3cdcf4edd6685d8583b17839aef77",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c70f78dbf5667a307a7d90.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5808,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c70f78dbf5667a307a7d90.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "8803ef4618c6000f5b6116f43a934742",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c70f78dbf5667a307a7d90.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 05;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nconst player = new Player();\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5808,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c70f78dbf5667a307a7d90.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "d5f8ef0128345c9a35f402983120fa4d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c70f78dbf5667a307a7d90.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "2) { this position x = canvas width - this width * 2; } } } const player = new Player(); const animate = () => { requestAnimationFrame(animate); ctx clearRect(0, 0, canvas width, canvas height); player update(); if (keys rightKey pressed && player position x < proportionalSize(400)) { player velocity x = 5; } else if (keys leftKey pressed && player position x > proportionalSize(100)) { player velocity x = -5; } else { player velocityx = 0;\n}\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\n--fcc-editable-region--\nconst movePlayer = (key, xVelocity, isPressed) => {\n}\n--fcc-editable-region--\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nplayer draw();\n}\nstartBtn addEventListener(\"click\", startGame);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5808,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c70f78dbf5667a307a7d90.md",
      "source_type": "git_repo"
    },
    "token_count": 204,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "a90267c87e1fce3624cf1a2ba725f8a4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c71235eba6c67adaa9a458.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64c71235eba6c67adaa9a458\ntitle: Step 52\nchallengeType: 0\ndashedName: step-52\n--description--\nInside the if statement, set the player's x velocity to 0 and the player's y velocity to 0 Below that, add a return statement --hints--\nYou should set the player's x velocity to 0 js\nassert match(movePlayer toString(), /player\\ velocity\\ x\\s*=\\s*0\\s*; /);\nYou should set the player's y velocity to 0 js\nassert match(movePlayer toString(), /player\\ velocity\\ y\\s*=\\s*0\\s*; /);\nYou should have a return statement inside the if statement js\nassert match(movePlayer toString(), /return\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5617,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c71235eba6c67adaa9a458.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "407bf5c07fa1941e92b1c320d31b1ef3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c71235eba6c67adaa9a458.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "{ --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; }btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5617,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c71235eba6c67adaa9a458.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "85c883eae8605f3f4b421da4bf685f28",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c71235eba6c67adaa9a458.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Mathceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nconst player = new Player();\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5617,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c71235eba6c67adaa9a458.md",
      "source_type": "git_repo"
    },
    "token_count": 460,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "6c64efa87303326ef8064d68f295b77b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c71235eba6c67adaa9a458.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "2) { this position x = canvas width - this width * 2; } } } const player = new Player(); const animate = () => { requestAnimationFrame(animate); ctx clearRect(0, 0, canvas width, canvas height); player update(); if (keys rightKey pressed && player position x < proportionalSize(400)) { player velocity x = 5; } else if (keys leftKey pressed && player position x > proportionalSize(100)) { player velocity x = -5; } else { player velocityx = 0;\n}\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\n--fcc-editable-region--\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\n}\n}\n--fcc-editable-region--\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nplayer draw();\n}\nstartBtn addEventListener(\"click\", startGame);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5617,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c71235eba6c67adaa9a458.md",
      "source_type": "git_repo"
    },
    "token_count": 214,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "8b857a9ecad2f0b7f063bd50c8e94268",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7135a9d35797b4bfb01b3.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64c7135a9d35797b4bfb01b3\ntitle: Step 53\nchallengeType: 0\ndashedName: step-53\n--description--\nBelow the if statement, create a switch statement with a value of key --hints--\nYou should use a switch statement js\nassert match(code, /switch/);\nYour switch statement should have a value of key js\nassert match(code, /switch\\s*\\(\\s*key\\s*\\)/);\nYour switch statement should be empty js\nassert match(code, /\\s*switch\\s*\\(\\s*key\\s*\\)\\s*{\\s*}/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5527,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7135a9d35797b4bfb01b3.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "688c8869ed2055e66d373d05cd5ebc25",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7135a9d35797b4bfb01b3.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5527,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7135a9d35797b4bfb01b3.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "e5a8bb5e80451d6ab3500ca9b3f54704",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7135a9d35797b4bfb01b3.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; this velocity = { x: 0, y: 0, }; this width = proportionalSize(40); thisheight = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nconst player = new Player();\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\n}\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\n--fcc-editable-region--\n--fcc-editable-region--\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nplayer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5527,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7135a9d35797b4bfb01b3.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "98128808c69651773a883b10854ba7a9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7135a9d35797b4bfb01b3.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "proportionalSize(100)) { player velocity x = -5; } else { player velocity x = 0; } } const keys = { rightKey: { pressed: false }, leftKey: { pressed: false } }; const movePlayer = (key, xVelocity, isPressed) => { if ( isCheckpointCollisionDetectionActive) { player velocity x = 0; player velocity y = 0; return; } --fcc-editable-region-- --fcc-editable-region-- } const startGame = () => { canvas style display = \"block\"; startScreen style display = \"none\"; playerdraw();\n}\nstartBtn addEventListener(\"click\", startGame);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5527,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7135a9d35797b4bfb01b3.md",
      "source_type": "git_repo"
    },
    "token_count": 139,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "92eb0e5c7b6d5f5276d16a038548ae40",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c714ec1b844f7bc0723deb.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64c714ec1b844f7bc0723deb\ntitle: Step 54\nchallengeType: 0\ndashedName: step-54\n--description--\nThe first case you will want to add is when the left arrow key is pressed Inside the switch statement, add a new case called \"ArrowLeft\" --hints--\nYour switch statement should have a case called \"ArrowLeft\" js\nassert match(code, /switch\\s*\\(\\s*key\\s*\\)\\s*{\\s*case\\s*('|\")ArrowLeft\\1\\s*:\\s*/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5469,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c714ec1b844f7bc0723deb.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "da4a3c8b2e25d107d906103b95d3c665",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c714ec1b844f7bc0723deb.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5469,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c714ec1b844f7bc0723deb.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "e867a2f46c985f41a28e009db4b0d18e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c714ec1b844f7bc0723deb.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; this velocity = { x: 0, y: 0, }; this width = proportionalSize(40); thisheight = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nconst player = new Player();\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\n}\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\n--fcc-editable-region--\nswitch (key) {\n}\n--fcc-editable-region--\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5469,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c714ec1b844f7bc0723deb.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "cef8c4ae91dcb6cd37d031cedad0f65b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c714ec1b844f7bc0723deb.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "proportionalSize(100)) { player velocity x = -5; } else { player velocity x = 0; } } const keys = { rightKey: { pressed: false }, leftKey: { pressed: false } }; const movePlayer = (key, xVelocity, isPressed) => { if ( isCheckpointCollisionDetectionActive) { player velocity x = 0; player velocity y = 0; return; } --fcc-editable-region-- switch (key) { } --fcc-editable-region-- } const startGame = () => { canvas style display = \"block\"; startScreen styledisplay = \"none\";\nplayer draw();\n}\nstartBtn addEventListener(\"click\", startGame);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5469,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c714ec1b844f7bc0723deb.md",
      "source_type": "git_repo"
    },
    "token_count": 145,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "867570c539793bd5069193cfd93071c4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c715769bab5f7c14f6cd7b.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64c715769bab5f7c14f6cd7b\ntitle: Step 55\nchallengeType: 0\ndashedName: step-55\n--description--\nInside the case clause, assign isPressed to keys leftKey pressed Below that, add an if statement that checks if xVelocity is equal to 0 If so, assign the xVelocity to player velocity x --hints--\nYou should assign isPressed to keys leftKey pressed js\nassert match(code, /s*keys\\ leftKey\\ pressed\\s*=\\s*isPressed\\s*; /);\nYou should have an if statement that checks if xVelocity is equal to 0 js\nassert match(code, /if\\s*\\(\\s*xVelocity\\s*===\\s*0\\s*\\)\\s*{\\s*/);\nYour if statement should assign player velocity x to xVelocity js\nassert match(code, /player\\ velocity\\ x\\s*=\\s*xVelocity\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5829,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c715769bab5f7c14f6cd7b.md",
      "source_type": "git_repo"
    },
    "token_count": 442,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "89ed81a0c943f412a3a023ecf6f297a6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c715769bab5f7c14f6cd7b.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5829,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c715769bab5f7c14f6cd7b.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "d95d49e0b5747f88471f25765f35bb45",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c715769bab5f7c14f6cd7b.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 05;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nconst player = new Player();\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5829,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c715769bab5f7c14f6cd7b.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "7dfd9ed496717d1269f6c6647ba2ee89",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c715769bab5f7c14f6cd7b.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "2) { this position x = canvas width - this width * 2; } } } const player = new Player(); const animate = () => { requestAnimationFrame(animate); ctx clearRect(0, 0, canvas width, canvas height); player update(); if (keys rightKey pressed && player position x < proportionalSize(400)) { player velocity x = 5; } else if (keys leftKey pressed && player position x > proportionalSize(100)) { player velocity x = -5; } else { player velocityx = 0;\n}\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\n--fcc-editable-region--\nswitch (key) {\ncase \"ArrowLeft\":\n}\n--fcc-editable-region--\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nplayer draw();\n}\nstartBtn addEventListener(\"click\", startGame);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5829,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c715769bab5f7c14f6cd7b.md",
      "source_type": "git_repo"
    },
    "token_count": 241,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "51eca0570261dc5b5b1ddbc90f2ea8e3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7168cba4a4f7c90c26277.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64c7168cba4a4f7c90c26277\ntitle: Step 56\nchallengeType: 0\ndashedName: step-56\n--description--\nBelow your if statement, use the subtraction assignment operator to subtract the xVelocity from player velocity x To close out this case, make sure to add a break statement --hints--\nYou should use the subtraction assignment operator to subtract the xVelocity from player velocity x js\nassert match(code, /player\\ velocity\\ x\\s*-=\\s*xVelocity\\s*; /);\nYour case should have a break statement js\nassert match(code, /break\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5766,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7168cba4a4f7c90c26277.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "e824e249973b18413d52e01b78d61cc9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7168cba4a4f7c90c26277.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5766,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7168cba4a4f7c90c26277.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "064a42741ec2e19b25d92dacefd73a9d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7168cba4a4f7c90c26277.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; this velocity = { x: 0, y: 0, }; this width = proportionalSize(40); thisheight = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nconst player = new Player();\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\n}\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\n--fcc-editable-region--\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5766,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7168cba4a4f7c90c26277.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "743a6115415c8af1a30edee5792cb5a1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7168cba4a4f7c90c26277.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "x > proportionalSize(100)) { player velocity x = -5; } else { player velocity x = 0; } } const keys = { rightKey: { pressed: false }, leftKey: { pressed: false } }; const movePlayer = (key, xVelocity, isPressed) => { if ( isCheckpointCollisionDetectionActive) { player velocity x = 0; player velocity y = 0; return; } --fcc-editable-region-- switch (key) { case \"ArrowLeft\": keys leftKey pressed = isPressed; if (xVelocity === 0) { player velocityx = xVelocity;\n}\n}\n--fcc-editable-region--\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nplayer draw();\n}\nstartBtn addEventListener(\"click\", startGame);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5766,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7168cba4a4f7c90c26277.md",
      "source_type": "git_repo"
    },
    "token_count": 175,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "e08350733c1f704008c618fa7842b3b0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7173772c2497ce99b474c.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64c7173772c2497ce99b474c\ntitle: Step 57\nchallengeType: 0\ndashedName: step-57\n--description--\nThe player can jump up by using the up arrow key or the spacebar Add three new cases for \"ArrowUp\", \" \", and \"Spacebar\" Remember that you can group cases together when they share the same operation Inside those cases, use the subtraction assignment operator to subtract 8 from player velocity y To close out these cases, make sure to add a break statement --hints--\nYou should add a new case clause for \"ArrowUp\" inside your switch statement js\nassert match(code, /\\s*case\\s*('|\"|`)\\s*ArrowUp\\s*\\1\\s*:\\s*/)\nYou should add a new case clause for \" \" inside your switch statement js\nassert match(code, /\\s*case\\s*('|\"|`)\\s\\1\\s*:\\s*/);\nYou should add a new case clause for \"Spacebar\" inside your switch statement js\nassert match(code, /\\s*case\\s*('|\"|`)\\s*Spacebar\\s*\\1\\s*:\\s*/)\nYou should use the subtraction assignment operator to subtract 8 from player velocity y js\nassert match(code, /player\\ velocity\\ y\\s*-=\\s*8\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6354,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7173772c2497ce99b474c.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "fe851b27884f1d334eeeb62f5b25e178",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7173772c2497ce99b474c.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "arrows to move the player around You can also use the spacebar to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; }instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6354,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7173772c2497ce99b474c.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "c6b72f3c21a79db4e006ef9009ccca4a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7173772c2497ce99b474c.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "100%; text-align: center; background-color: var(--section-bg-color); border-radius: 20px; padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvasheight = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nconst player = new Player();\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6354,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7173772c2497ce99b474c.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "13ac2b94b846432a91e847c9d5ea6937",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7173772c2497ce99b474c.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "this width; } if (this position x >= canvas width - this width * 2) { this position x = canvas width - this width * 2; } } } const player = new Player(); const animate = () => { requestAnimationFrame(animate); ctx clearRect(0, 0, canvas width, canvas height); player update(); if (keys rightKey pressed && player position x < proportionalSize(400)) { player velocity x = 5; } else if (keys leftKey pressed && player positionx > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\n}\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\n--fcc-editable-region--\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\n}\n--fcc-editable-region--\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nplayer draw();\n}\nstartBtn addEventListener(\"click\", startGame);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6354,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7173772c2497ce99b474c.md",
      "source_type": "git_repo"
    },
    "token_count": 292,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "6ad8dadc5461a1c5b363bfd8fb6f0b7e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7202620a5e17d8a3c777d.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64c7202620a5e17d8a3c777d\ntitle: Step 58\nchallengeType: 0\ndashedName: step-58\n--description--\nThe last case you will need to add will be for \"ArrowRight\" Inside that case, assign isPressed to keys rightKey pressed Add an if statement that checks if xVelocity is equal to 0 If so, assign the xVelocity to player velocity x Below that if statement, use the addition assignment operator to assign the xVelocity to player velocity x --hints--\nYou should have a case for \"ArrowRight\" js\nassert match(code, /case\\s*('|\")ArrowRight\\1\\s*:\\s*/);\nYou need to assign isPressed to keys rightKey pressed js\nassert match(code, /\\s*keys\\ rightKey\\ pressed\\s*=\\s*isPressed\\s*; /);\nYou need to add an if statement that checks if xVelocity is equal to 0 js\nassert lengthOf(code match(/if\\s*\\(\\s*xVelocity\\s*===\\s*0\\s*\\)\\s*{\\s*/g), 2);\nYou need to assign the xVelocity to player velocity x js\nassert lengthOf(code match(/\\s*player\\ velocity\\ x\\s*=\\s*xVelocity\\s*; /g), 2);\nYou need to use the addition assignment operator to assign the xVelocity to player velocity x js\nassert match(code, /\\s*player\\ velocity\\ x\\s*\\+=\\s*xVelocity\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6567,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7202620a5e17d8a3c777d.md",
      "source_type": "git_repo"
    },
    "token_count": 456,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "ae2ebbd07b25b34eed222a37e5d53a15",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7202620a5e17d8a3c777d.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "velocity\\ x\\s*\\+=\\s*xVelocity\\s*; /); --seed-- --seed-contents-- ```html Learn Intermediate OOP by Building a Platformer Game freeCodeCamp Code Warrior Help the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); }start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6567,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7202620a5e17d8a3c777d.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "f070d0d548c846a8d809aaf53c90fb1b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7202620a5e17d8a3c777d.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; } checkpoint-screen { position: absolute; left: 0; right: 0; margin-left: auto; margin-right: auto; width: 100%; text-align: center; background-color: var(--section-bg-color); border-radius: 20px; padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = documentquerySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6567,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7202620a5e17d8a3c777d.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "15e6ac49b0458a31812d998fe4abb698",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7202620a5e17d8a3c777d.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "+ this velocity y <= canvas height) { if (this position y < 0) { this position y = 0; this velocity y = gravity; } this velocity y += gravity; } else { this velocity y = 0; } if (this position x < this width) { this position x = this width; } if (this position x >= canvas width - this width * 2) { this position x = canvas width - thiswidth * 2;\n}\n}\n}\nconst player = new Player();\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\n}\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\n--fcc-editable-region--\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\n}\n--fcc-editable-region--\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nplayer draw();\n}\nstartBtn addEventListener(\"click\", startGame);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6567,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7202620a5e17d8a3c777d.md",
      "source_type": "git_repo"
    },
    "token_count": 379,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "f08ee822ebf608772ed1c7caa0fb4e47",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c72e52133d687e8e6a60f6.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64c72e52133d687e8e6a60f6\ntitle: Step 59\nchallengeType: 0\ndashedName: step-59\n--description--\nNow it is time to add the event listeners that will be responsible for calling the movePlayer function Start by adding an addEventListener to the global window object For the arguments, pass in the keydown event and an arrow function that uses the destructuring assignment to get the key property from the event object in the event listener parameter Here is the syntax for using the destructuring assignment in the parameter list of the arrow function:\njs\nbtn addEventListener('click', ({ target }) => {\nconsole log(target);\n});\n--hints--\nYou need to add an addEventListener to the global window object js\nassert match(code, /window\\ addEventListener\\s*\\(\\s* *\\s*\\)/);\nYour event listener should listen for the keydown event ```js\nassert match(code, /window addEventListener\\s(\\s('|\")keydown\\1\\s,\\s \\s)/);\n```\nYou should use the destructuring assignment to get the key property from the event object js\nassert match(code, /window\\ addEventListener\\s*\\(\\s*('|\")keydown\\1\\s*,\\s*\\(\\s*{\\s*key\\s*}\\s*\\)\\s*=>\\s*{\\s*}\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6713,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c72e52133d687e8e6a60f6.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "ac83093848dcc037fa4ba1ddd1d7f9a7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c72e52133d687e8e6a60f6.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "arrows to move the player around You can also use the spacebar to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; }instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6713,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c72e52133d687e8e6a60f6.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "e80768565cf93c223363546e35f2af51",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c72e52133d687e8e6a60f6.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "100%; text-align: center; background-color: var(--section-bg-color); border-radius: 20px; padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvasheight = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nconst player = new Player();\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6713,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c72e52133d687e8e6a60f6.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "172d765b49a4cf2e7489eb595b97d5a3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c72e52133d687e8e6a60f6.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "this width; } if (this position x >= canvas width - this width * 2) { this position x = canvas width - this width * 2; } } } const player = new Player(); const animate = () => { requestAnimationFrame(animate); ctx clearRect(0, 0, canvas width, canvas height); player update(); if (keys rightKey pressed && player position x < proportionalSize(400)) { player velocity x = 5; } else if (keys leftKey pressed && player positionx > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\n}\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nplayer draw();\n}\nstartBtn addEventListener(\"click\", startGame);\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6713,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c72e52133d687e8e6a60f6.md",
      "source_type": "git_repo"
    },
    "token_count": 352,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "902f23bfb83117b9a59f21c9d816e577",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c73367cce78a7fd65dd3be.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64c73367cce78a7fd65dd3be\ntitle: Step 60\nchallengeType: 0\ndashedName: step-60\n--description--\nInside the arrow function, call the movePlayer function and pass in key, 8, and true as arguments --hints--\nYou should call the movePlayer function js\nassert match(code, /movePlayer\\s*\\( *\\)/);\nYou should pass in key, 8, and true as arguments to the movePlayer function js\nassert match(code, /movePlayer\\s*\\(\\s*key\\s*,\\s*8\\s*,\\s*true\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6061,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c73367cce78a7fd65dd3be.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "101131a936747d5df5b9275cb10632a9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c73367cce78a7fd65dd3be.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6061,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c73367cce78a7fd65dd3be.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "9d90855c846028b2a437325374231a18",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c73367cce78a7fd65dd3be.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; this velocity = { x: 0, y: 0, }; this width = proportionalSize(40); thisheight = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nconst player = new Player();\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\n}\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6061,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c73367cce78a7fd65dd3be.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "01db139911b285e8fb3938d82f1a19a5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c73367cce78a7fd65dd3be.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "velocity x = -5; } else { player velocity x = 0; } } const keys = { rightKey: { pressed: false }, leftKey: { pressed: false } }; const movePlayer = (key, xVelocity, isPressed) => { if ( isCheckpointCollisionDetectionActive) { player velocity x = 0; player velocity y = 0; return; } switch (key) { case \"ArrowLeft\": keys leftKey pressed = isPressed; if (xVelocity === 0) { player velocity x = xVelocity; } player velocityx -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nplayer draw();\n}\nstartBtn addEventListener(\"click\", startGame);\n--fcc-editable-region--\nwindow addEventListener(\"keydown\", ({ key }) => {\n});\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6061,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c73367cce78a7fd65dd3be.md",
      "source_type": "git_repo"
    },
    "token_count": 247,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "1e9b6ac237396a2b1e77e8207b929d7d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c734293def73808e609778.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64c734293def73808e609778\ntitle: Step 61\nchallengeType: 0\ndashedName: step-61\n--description--\nAdd another addEventListener to the global window object and pass in the keyup event and use destructuring to pass in the key property from the event --hints--\nYou should have an addEventListener that listens for the keyup event js\nassert match(code, /window\\ addEventListener\\s*\\(\\s*('|\")keyup\\1\\s*,\\s* *\\s*\\)/);\nYou should use the destructuring assignment to get the key property from the event object js\nassert match(code, /window\\ addEventListener\\s*\\(\\s*('|\")keyup\\1\\s*,\\s*\\(\\s*{\\s*key\\s*}\\s*\\)\\s*=>\\s*{\\s*}\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6262,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c734293def73808e609778.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "594a9d14544a845aae14d1c7086bdde0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c734293def73808e609778.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "{ --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; }btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6262,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c734293def73808e609778.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "2079a6de9742a3a8e8bfadee3d6ab08c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c734293def73808e609778.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Mathceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nconst player = new Player();\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6262,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c734293def73808e609778.md",
      "source_type": "git_repo"
    },
    "token_count": 460,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "c5cb3c49becaad45294ffde88cea9f9b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c734293def73808e609778.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "2) { this position x = canvas width - this width * 2; } } } const player = new Player(); const animate = () => { requestAnimationFrame(animate); ctx clearRect(0, 0, canvas width, canvas height); player update(); if (keys rightKey pressed && player position x < proportionalSize(400)) { player velocity x = 5; } else if (keys leftKey pressed && player position x > proportionalSize(100)) { player velocity x = -5; } else { player velocityx = 0;\n}\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nplayer draw();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6262,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c734293def73808e609778.md",
      "source_type": "git_repo"
    },
    "token_count": 356,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "8707b03aa6a54fbea06017a9eddc6411",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c736a531835181349c27d2.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64c736a531835181349c27d2\ntitle: Step 62\nchallengeType: 0\ndashedName: step-62\n--description--\nInside the callback function, call the movePlayer function and pass in key, 0, and false as arguments --hints--\nYou should call the movePlayer function js\nassert match(code, /movePlayer\\s*\\( *\\) +movePlayer\\s*\\( *\\)/s);\nYou should pass in key, 0 and false as arguments js\nassert match(code, /movePlayer\\s*\\(\\s*key\\s*,\\s*0\\s*,\\s*false\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6137,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c736a531835181349c27d2.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 4
  }
]