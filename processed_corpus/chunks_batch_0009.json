[
  {
    "id": "4efd5d183e4dad783ecbb337191f9865",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "CSS クラスによって参照されます。 リスナーの追加 次に、フォームにイベントリスナーを追加し、フォームをリセットするクリアボタンを追加します。ユーザーがフォームを送信したり、リセットボタンをクリックしたりした場合に、そのリセットボタンをクリックするようにします。何かが起こるときのため、ファイルの一番下にアプリを初期化するための呼び出しを追加します。 javascript formaddEventListener('submit', (e) => handleSubmit(e)); clearBtnaddEventListener('click', (e) => reset(e)); init(); ✅ 投稿やクリックのイベントをリッスンするために使用される速記法と、そのイベントがどのように handleSubmit や reset 関数に渡されるかに注目してください。この速記法と同等のものを、より長い形式で書くことができますかどちらがいいですかinit() 関数と reset() 関数のビルド 今度は拡張機能を初期化する関数を作ります。これは init() と呼ばれています。 ```javascript function init() { //何かがローカルストレージにある場合は、それをピックアップします。 const storedApiKey = localStoragegetItem('apiKey'); const storedRegion = localStoragegetItem('regionName'); //アイコンを一般的な緑色に設定 //todo if (storedApiKey === null || storedRegion === null) { //キーを持っていない場合は、フォームを表示します。 formstyledisplay = 'block'; resultsstyledisplay = 'none'; loadingstyledisplay = 'none'; clearBtnstyledisplay = 'none'; errorstextContent = ''; } else { //ローカルストレージにキー/領域を保存している場合、そのキー/領域がロードされたときに結果を表示します。 displayCarbonUsage(storedApiKey, storedRegion); resultsstyledisplay = 'none'; formstyledisplay = 'none';\nclearBtn",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 564,
    "chunk_index": 28,
    "total_chunks": 76
  },
  {
    "id": "21e5346261e076e17f3b6117d8da0d4a",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "次に、フォームにイベントリスナーを追加し、フォームをリセットするクリアボタンを追加します。ユーザーがフォームを送信したり、リセットボタンをクリックしたりした場合に、そのリセットボタンをクリックするようにします。何かが起こるときのため、ファイルの一番下にアプリを初期化するための呼び出しを追加します。 javascript formaddEventListener('submit', (e) => handleSubmit(e)); clearBtnaddEventListener('click', (e) => reset(e)); init(); ✅ 投稿やクリックのイベントをリッスンするために使用される速記法と、そのイベントがどのように handleSubmit や reset 関数に渡されるかに注目してください。この速記法と同等のものを、より長い形式で書くことができますかどちらがいいですかinit() 関数と reset() 関数のビルド 今度は拡張機能を初期化する関数を作ります。これは init() と呼ばれています。 ```javascript function init() { //何かがローカルストレージにある場合は、それをピックアップします。 const storedApiKey = localStoragegetItem('apiKey'); const storedRegion = localStoragegetItem('regionName'); //アイコンを一般的な緑色に設定 //todo if (storedApiKey === null || storedRegion === null) { //キーを持っていない場合は、フォームを表示します。 formstyledisplay = 'block'; resultsstyledisplay = 'none'; loadingstyledisplay = 'none'; clearBtnstyledisplay = 'none'; errorstextContent = ''; } else { //ローカルストレージにキー/領域を保存している場合、そのキー/領域がロードされたときに結果を表示します。 displayCarbonUsage(storedApiKey, storedRegion); resultsstyledisplay = 'none'; formstyledisplay = 'none'; clearBtnstyle",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 540,
    "chunk_index": 29,
    "total_chunks": 76
  },
  {
    "id": "dcbc819e4b5ece4a0224be9640074d4b",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "次に、フォームにイベントリスナーを追加し、フォームをリセットするクリアボタンを追加します。ユーザーがフォームを送信したり、リセットボタンをクリックしたりした場合に、そのリセットボタンをクリックするようにします。何かが起こるときのため、ファイルの一番下にアプリを初期化するための呼び出しを追加します。 javascript formaddEventListener('submit', (e) => handleSubmit(e)); clearBtnaddEventListener('click', (e) => reset(e)); init(); ✅ 投稿やクリックのイベントをリッスンするために使用される速記法と、そのイベントがどのように handleSubmit や reset 関数に渡されるかに注目してください。この速記法と同等のものを、より長い形式で書くことができますかどちらがいいですかinit() 関数と reset() 関数のビルド 今度は拡張機能を初期化する関数を作ります。これは init() と呼ばれています。 ```javascript function init() { //何かがローカルストレージにある場合は、それをピックアップします。 const storedApiKey = localStoragegetItem('apiKey'); const storedRegion = localStoragegetItem('regionName'); //アイコンを一般的な緑色に設定 //todo if (storedApiKey === null || storedRegion === null) { //キーを持っていない場合は、フォームを表示します。 formstyledisplay = 'block'; resultsstyledisplay = 'none'; loadingstyledisplay = 'none'; clearBtnstyledisplay = 'none'; errorstextContent = ''; } else { //ローカルストレージにキー/領域を保存している場合、そのキー/領域がロードされたときに結果を表示します。 displayCarbonUsage(storedApiKey, storedRegion); resultsstyledisplay = 'none'; formstyledisplay = 'none'; clearBtnstyledisplay = 'block';\n}\n};\nfunction reset(e) {\ne",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 553,
    "chunk_index": 30,
    "total_chunks": 76
  },
  {
    "id": "9c7daa827cf0eeae46edd6766dae4c54",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "=> reset(e)); init(); ✅ 投稿やクリックのイベントをリッスンするために使用される速記法と、そのイベントがどのように handleSubmit や reset 関数に渡されるかに注目してください。この速記法と同等のものを、より長い形式で書くことができますかどちらがいいですかinit() 関数と reset() 関数のビルド 今度は拡張機能を初期化する関数を作ります。これは init() と呼ばれています。 ```javascript function init() { //何かがローカルストレージにある場合は、それをピックアップします。 const storedApiKey = localStoragegetItem('apiKey'); const storedRegion = localStoragegetItem('regionName'); //アイコンを一般的な緑色に設定 //todo if (storedApiKey === null || storedRegion === null) { //キーを持っていない場合は、フォームを表示します。 formstyledisplay = 'block'; resultsstyledisplay = 'none'; loadingstyledisplay = 'none'; clearBtnstyledisplay = 'none'; errorstextContent = ''; } else { //ローカルストレージにキー/領域を保存している場合、そのキー/領域がロードされたときに結果を表示します。 displayCarbonUsage(storedApiKey, storedRegion); resultsstyledisplay = 'none'; formstyledisplay = 'none'; clearBtnstyledisplay = 'block'; } }; function reset(e) { epreventDefault();\n//リージョン専用のローカルストレージをクリアします。\nlocalStorage removeItem('regionName');\ninit();\n}\n```\nこの関数には、面白いロジックがあります。これを読み進めていくと、何が起こるかわかりますか",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 31,
    "total_chunks": 76
  },
  {
    "id": "b2602f89e902cecd5215e9db0962fc34",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "reset 関数に渡されるかに注目してください。この速記法と同等のものを、より長い形式で書くことができますかどちらがいいですかinit() 関数と reset() 関数のビルド 今度は拡張機能を初期化する関数を作ります。これは init() と呼ばれています。 ```javascript function init() { //何かがローカルストレージにある場合は、それをピックアップします。 const storedApiKey = localStoragegetItem('apiKey'); const storedRegion = localStoragegetItem('regionName'); //アイコンを一般的な緑色に設定 //todo if (storedApiKey === null || storedRegion === null) { //キーを持っていない場合は、フォームを表示します。 formstyledisplay = 'block'; resultsstyledisplay = 'none'; loadingstyledisplay = 'none'; clearBtnstyledisplay = 'none'; errorstextContent = ''; } else { //ローカルストレージにキー/領域を保存している場合、そのキー/領域がロードされたときに結果を表示します。 displayCarbonUsage(storedApiKey, storedRegion); resultsstyledisplay = 'none'; formstyledisplay = 'none'; clearBtnstyledisplay = 'block'; } }; function reset(e) { epreventDefault(); //リージョン専用のローカルストレージをクリアします。 localStorage removeItem('regionName'); init(); } ``` この関数には、面白いロジックがあります。これを読み進めていくと、何が起こるかわかりますか2つの const は、ユーザが API キーとリージョンコードをローカルストレージに保存しているかどうかをチェックするために設定されます\nどちらかが null の場合、フォームのスタイルを 'block' として表示するように変更してフォームを表示します\n結果、読み込み、および clearBtn を非表示にし、エラーテキストを空の文字列に設定します\nキーとリージョンが存在する場合は、そのためのルーチンを開始します\nAPI を呼び出して炭素使用量のデータを取得します\n結果領域を非表示にします\nフォームを非表示にします\nリセットボタンを表示します\n先に進む前に、ブラウザで利用できる非常に重要な概念を知っておくと便利です。それは ローカルストレージ です。ローカルストレージは文字列を key-value のペアとしてブラウザに保存する便利な方法です。このタイプの Web ストレージは JavaScript で操作することができ、ブラウザでデータを管理することができます。ローカルストレージは有効期限がありませんが、もう一つの種類の Web ストレージであるセッションストレージはブラウザを閉じると消去されます。様々なタイプのストレージには、その使用方法に長所と短所があります。\n注意 - ブラウザ拡張機能は独自のローカルストレージを持っています。メインのブラウザウィンドウは別のインスタンスであり、別々に動作します。\nAPI キーに文字列の値を設定して、例えば Edge では Web ページを「検査」して (ブラウザを右クリックして検査することができます)、「アプリケーション」タブに行ってストレージを確認することで設定されていることがわかります。\n✅ ローカルストレージにデータを保存したくない状況を考えてみてください。一般的に、API キーをローカルストレージに置くのは悪い考えです",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1091,
    "chunk_index": 32,
    "total_chunks": 76
  },
  {
    "id": "e4ff76fede5e5fcc182751274c57aeb3",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "clearBtnstyledisplay = 'none'; errorstextContent = ''; } else { //ローカルストレージにキー/領域を保存している場合、そのキー/領域がロードされたときに結果を表示します。 displayCarbonUsage(storedApiKey, storedRegion); resultsstyledisplay = 'none'; formstyledisplay = 'none'; clearBtnstyledisplay = 'block'; } }; function reset(e) { epreventDefault(); //リージョン専用のローカルストレージをクリアします。 localStorage removeItem('regionName'); init(); } ``` この関数には、面白いロジックがあります。これを読み進めていくと、何が起こるかわかりますか2つの const は、ユーザが API キーとリージョンコードをローカルストレージに保存しているかどうかをチェックするために設定されます どちらかが null の場合、フォームのスタイルを 'block' として表示するように変更してフォームを表示します 結果、読み込み、および clearBtn を非表示にし、エラーテキストを空の文字列に設定します キーとリージョンが存在する場合は、そのためのルーチンを開始します API を呼び出して炭素使用量のデータを取得します 結果領域を非表示にします フォームを非表示にします リセットボタンを表示します 先に進む前に、ブラウザで利用できる非常に重要な概念を知っておくと便利です。それは ローカルストレージ です。ローカルストレージは文字列を key-value のペアとしてブラウザに保存する便利な方法です。このタイプの Web ストレージは JavaScript で操作することができ、ブラウザでデータを管理することができます。ローカルストレージは有効期限がありませんが、もう一つの種類の Web ストレージであるセッションストレージはブラウザを閉じると消去されます。様々なタイプのストレージには、その使用方法に長所と短所があります。 注意 - ブラウザ拡張機能は独自のローカルストレージを持っています。メインのブラウザウィンドウは別のインスタンスであり、別々に動作します。 API キーに文字列の値を設定して、例えば Edge では Web ページを「検査」して (ブラウザを右クリックして検査することができます)、「アプリケーション」タブに行ってストレージを確認することで設定されていることがわかります。 ✅ ローカルストレージにデータを保存したくない状況を考えてみてください。一般的に、API キーをローカルストレージに置くのは悪い考えです理由がわかりますか",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 863,
    "chunk_index": 33,
    "total_chunks": 76
  },
  {
    "id": "f0b64a4837b487b3640e269d5eb1ecac",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "clearBtnstyledisplay = 'none'; errorstextContent = ''; } else { //ローカルストレージにキー/領域を保存している場合、そのキー/領域がロードされたときに結果を表示します。 displayCarbonUsage(storedApiKey, storedRegion); resultsstyledisplay = 'none'; formstyledisplay = 'none'; clearBtnstyledisplay = 'block'; } }; function reset(e) { epreventDefault(); //リージョン専用のローカルストレージをクリアします。 localStorage removeItem('regionName'); init(); } ``` この関数には、面白いロジックがあります。これを読み進めていくと、何が起こるかわかりますか2つの const は、ユーザが API キーとリージョンコードをローカルストレージに保存しているかどうかをチェックするために設定されます どちらかが null の場合、フォームのスタイルを 'block' として表示するように変更してフォームを表示します 結果、読み込み、および clearBtn を非表示にし、エラーテキストを空の文字列に設定します キーとリージョンが存在する場合は、そのためのルーチンを開始します API を呼び出して炭素使用量のデータを取得します 結果領域を非表示にします フォームを非表示にします リセットボタンを表示します 先に進む前に、ブラウザで利用できる非常に重要な概念を知っておくと便利です。それは ローカルストレージ です。ローカルストレージは文字列を key-value のペアとしてブラウザに保存する便利な方法です。このタイプの Web ストレージは JavaScript で操作することができ、ブラウザでデータを管理することができます。ローカルストレージは有効期限がありませんが、もう一つの種類の Web ストレージであるセッションストレージはブラウザを閉じると消去されます。様々なタイプのストレージには、その使用方法に長所と短所があります。 注意 - ブラウザ拡張機能は独自のローカルストレージを持っています。メインのブラウザウィンドウは別のインスタンスであり、別々に動作します。 API キーに文字列の値を設定して、例えば Edge では Web ページを「検査」して (ブラウザを右クリックして検査することができます)、「アプリケーション」タブに行ってストレージを確認することで設定されていることがわかります。 ✅ ローカルストレージにデータを保存したくない状況を考えてみてください。一般的に、API キーをローカルストレージに置くのは悪い考えです理由がわかりますか私たちの場合、アプリは純粋に学習用であり、アプリストアにはデプロイされないので、このメソッドを使用します。\nローカルストレージを操作するには、getItem(), setItem(), removeItem() のいずれかの方法で Web API を使用することに注意してください。これはブラウザ全体で広くサポートされています。\ninit() で呼び出される displayCarbonUsage() 関数を構築する前に、フォームの初期投稿を処理する機能を構築しましょう。\nフォーム送信の処理\nイベント引数 (e) を受け取る関数 handleSubmit を作成します。イベントの伝播を停止し (この場合、ブラウザの更新を停止したい)、新しい関数 setUpUser を呼び出し、引数 apiKey",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1118,
    "chunk_index": 34,
    "total_chunks": 76
  },
  {
    "id": "fa8ec7f5a60b6a34df9420e301024829",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "} }; function reset(e) { epreventDefault(); //リージョン専用のローカルストレージをクリアします。 localStorage removeItem('regionName'); init(); } ``` この関数には、面白いロジックがあります。これを読み進めていくと、何が起こるかわかりますか2つの const は、ユーザが API キーとリージョンコードをローカルストレージに保存しているかどうかをチェックするために設定されます どちらかが null の場合、フォームのスタイルを 'block' として表示するように変更してフォームを表示します 結果、読み込み、および clearBtn を非表示にし、エラーテキストを空の文字列に設定します キーとリージョンが存在する場合は、そのためのルーチンを開始します API を呼び出して炭素使用量のデータを取得します 結果領域を非表示にします フォームを非表示にします リセットボタンを表示します 先に進む前に、ブラウザで利用できる非常に重要な概念を知っておくと便利です。それは ローカルストレージ です。ローカルストレージは文字列を key-value のペアとしてブラウザに保存する便利な方法です。このタイプの Web ストレージは JavaScript で操作することができ、ブラウザでデータを管理することができます。ローカルストレージは有効期限がありませんが、もう一つの種類の Web ストレージであるセッションストレージはブラウザを閉じると消去されます。様々なタイプのストレージには、その使用方法に長所と短所があります。 注意 - ブラウザ拡張機能は独自のローカルストレージを持っています。メインのブラウザウィンドウは別のインスタンスであり、別々に動作します。 API キーに文字列の値を設定して、例えば Edge では Web ページを「検査」して (ブラウザを右クリックして検査することができます)、「アプリケーション」タブに行ってストレージを確認することで設定されていることがわかります。 ✅ ローカルストレージにデータを保存したくない状況を考えてみてください。一般的に、API キーをローカルストレージに置くのは悪い考えです理由がわかりますか私たちの場合、アプリは純粋に学習用であり、アプリストアにはデプロイされないので、このメソッドを使用します。 ローカルストレージを操作するには、getItem(), setItem(), removeItem() のいずれかの方法で Web API を使用することに注意してください。これはブラウザ全体で広くサポートされています。 init() で呼び出される displayCarbonUsage() 関数を構築する前に、フォームの初期投稿を処理する機能を構築しましょう。 フォーム送信の処理 イベント引数 (e) を受け取る関数 handleSubmit を作成します。イベントの伝播を停止し (この場合、ブラウザの更新を停止したい)、新しい関数 setUpUser を呼び出し、引数 apiKeyvalue と region",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1029,
    "chunk_index": 35,
    "total_chunks": 76
  },
  {
    "id": "fb8fc6842a7313af24918a346756b9b5",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "function reset(e) { epreventDefault(); //リージョン専用のローカルストレージをクリアします。 localStorage removeItem('regionName'); init(); } ``` この関数には、面白いロジックがあります。これを読み進めていくと、何が起こるかわかりますか2つの const は、ユーザが API キーとリージョンコードをローカルストレージに保存しているかどうかをチェックするために設定されます どちらかが null の場合、フォームのスタイルを 'block' として表示するように変更してフォームを表示します 結果、読み込み、および clearBtn を非表示にし、エラーテキストを空の文字列に設定します キーとリージョンが存在する場合は、そのためのルーチンを開始します API を呼び出して炭素使用量のデータを取得します 結果領域を非表示にします フォームを非表示にします リセットボタンを表示します 先に進む前に、ブラウザで利用できる非常に重要な概念を知っておくと便利です。それは ローカルストレージ です。ローカルストレージは文字列を key-value のペアとしてブラウザに保存する便利な方法です。このタイプの Web ストレージは JavaScript で操作することができ、ブラウザでデータを管理することができます。ローカルストレージは有効期限がありませんが、もう一つの種類の Web ストレージであるセッションストレージはブラウザを閉じると消去されます。様々なタイプのストレージには、その使用方法に長所と短所があります。 注意 - ブラウザ拡張機能は独自のローカルストレージを持っています。メインのブラウザウィンドウは別のインスタンスであり、別々に動作します。 API キーに文字列の値を設定して、例えば Edge では Web ページを「検査」して (ブラウザを右クリックして検査することができます)、「アプリケーション」タブに行ってストレージを確認することで設定されていることがわかります。 ✅ ローカルストレージにデータを保存したくない状況を考えてみてください。一般的に、API キーをローカルストレージに置くのは悪い考えです理由がわかりますか私たちの場合、アプリは純粋に学習用であり、アプリストアにはデプロイされないので、このメソッドを使用します。 ローカルストレージを操作するには、getItem(), setItem(), removeItem() のいずれかの方法で Web API を使用することに注意してください。これはブラウザ全体で広くサポートされています。 init() で呼び出される displayCarbonUsage() 関数を構築する前に、フォームの初期投稿を処理する機能を構築しましょう。 フォーム送信の処理 イベント引数 (e) を受け取る関数 handleSubmit を作成します。イベントの伝播を停止し (この場合、ブラウザの更新を停止したい)、新しい関数 setUpUser を呼び出し、引数 apiKeyvalue と regionvalue を渡します。このようにして、適切なフィールドが入力されたときに初期フォームから取得される2つの値を利用します。\njavascript\nfunction handleSubmit(e) {\ne",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1085,
    "chunk_index": 36,
    "total_chunks": 76
  },
  {
    "id": "06403867fc21f74f01a2d517b5dac08a",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "removeItem('regionName'); init(); } ``` この関数には、面白いロジックがあります。これを読み進めていくと、何が起こるかわかりますか2つの const は、ユーザが API キーとリージョンコードをローカルストレージに保存しているかどうかをチェックするために設定されます どちらかが null の場合、フォームのスタイルを 'block' として表示するように変更してフォームを表示します 結果、読み込み、および clearBtn を非表示にし、エラーテキストを空の文字列に設定します キーとリージョンが存在する場合は、そのためのルーチンを開始します API を呼び出して炭素使用量のデータを取得します 結果領域を非表示にします フォームを非表示にします リセットボタンを表示します 先に進む前に、ブラウザで利用できる非常に重要な概念を知っておくと便利です。それは ローカルストレージ です。ローカルストレージは文字列を key-value のペアとしてブラウザに保存する便利な方法です。このタイプの Web ストレージは JavaScript で操作することができ、ブラウザでデータを管理することができます。ローカルストレージは有効期限がありませんが、もう一つの種類の Web ストレージであるセッションストレージはブラウザを閉じると消去されます。様々なタイプのストレージには、その使用方法に長所と短所があります。 注意 - ブラウザ拡張機能は独自のローカルストレージを持っています。メインのブラウザウィンドウは別のインスタンスであり、別々に動作します。 API キーに文字列の値を設定して、例えば Edge では Web ページを「検査」して (ブラウザを右クリックして検査することができます)、「アプリケーション」タブに行ってストレージを確認することで設定されていることがわかります。 ✅ ローカルストレージにデータを保存したくない状況を考えてみてください。一般的に、API キーをローカルストレージに置くのは悪い考えです理由がわかりますか私たちの場合、アプリは純粋に学習用であり、アプリストアにはデプロイされないので、このメソッドを使用します。 ローカルストレージを操作するには、getItem(), setItem(), removeItem() のいずれかの方法で Web API を使用することに注意してください。これはブラウザ全体で広くサポートされています。 init() で呼び出される displayCarbonUsage() 関数を構築する前に、フォームの初期投稿を処理する機能を構築しましょう。 フォーム送信の処理 イベント引数 (e) を受け取る関数 handleSubmit を作成します。イベントの伝播を停止し (この場合、ブラウザの更新を停止したい)、新しい関数 setUpUser を呼び出し、引数 apiKeyvalue と regionvalue を渡します。このようにして、適切なフィールドが入力されたときに初期フォームから取得される2つの値を利用します。 javascript function handleSubmit(e) { epreventDefault();\nsetUpUser(apiKey",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1059,
    "chunk_index": 37,
    "total_chunks": 76
  },
  {
    "id": "e1d97f98d9df9a8977b6565ebeab2c54",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "init(); } ``` この関数には、面白いロジックがあります。これを読み進めていくと、何が起こるかわかりますか2つの const は、ユーザが API キーとリージョンコードをローカルストレージに保存しているかどうかをチェックするために設定されます どちらかが null の場合、フォームのスタイルを 'block' として表示するように変更してフォームを表示します 結果、読み込み、および clearBtn を非表示にし、エラーテキストを空の文字列に設定します キーとリージョンが存在する場合は、そのためのルーチンを開始します API を呼び出して炭素使用量のデータを取得します 結果領域を非表示にします フォームを非表示にします リセットボタンを表示します 先に進む前に、ブラウザで利用できる非常に重要な概念を知っておくと便利です。それは ローカルストレージ です。ローカルストレージは文字列を key-value のペアとしてブラウザに保存する便利な方法です。このタイプの Web ストレージは JavaScript で操作することができ、ブラウザでデータを管理することができます。ローカルストレージは有効期限がありませんが、もう一つの種類の Web ストレージであるセッションストレージはブラウザを閉じると消去されます。様々なタイプのストレージには、その使用方法に長所と短所があります。 注意 - ブラウザ拡張機能は独自のローカルストレージを持っています。メインのブラウザウィンドウは別のインスタンスであり、別々に動作します。 API キーに文字列の値を設定して、例えば Edge では Web ページを「検査」して (ブラウザを右クリックして検査することができます)、「アプリケーション」タブに行ってストレージを確認することで設定されていることがわかります。 ✅ ローカルストレージにデータを保存したくない状況を考えてみてください。一般的に、API キーをローカルストレージに置くのは悪い考えです理由がわかりますか私たちの場合、アプリは純粋に学習用であり、アプリストアにはデプロイされないので、このメソッドを使用します。 ローカルストレージを操作するには、getItem(), setItem(), removeItem() のいずれかの方法で Web API を使用することに注意してください。これはブラウザ全体で広くサポートされています。 init() で呼び出される displayCarbonUsage() 関数を構築する前に、フォームの初期投稿を処理する機能を構築しましょう。 フォーム送信の処理 イベント引数 (e) を受け取る関数 handleSubmit を作成します。イベントの伝播を停止し (この場合、ブラウザの更新を停止したい)、新しい関数 setUpUser を呼び出し、引数 apiKeyvalue と regionvalue を渡します。このようにして、適切なフィールドが入力されたときに初期フォームから取得される2つの値を利用します。 javascript function handleSubmit(e) { epreventDefault(); setUpUser(apiKeyvalue, region",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1056,
    "chunk_index": 38,
    "total_chunks": 76
  },
  {
    "id": "eea2cf6978d13924bab6e082cffb324f",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "} ``` この関数には、面白いロジックがあります。これを読み進めていくと、何が起こるかわかりますか2つの const は、ユーザが API キーとリージョンコードをローカルストレージに保存しているかどうかをチェックするために設定されます どちらかが null の場合、フォームのスタイルを 'block' として表示するように変更してフォームを表示します 結果、読み込み、および clearBtn を非表示にし、エラーテキストを空の文字列に設定します キーとリージョンが存在する場合は、そのためのルーチンを開始します API を呼び出して炭素使用量のデータを取得します 結果領域を非表示にします フォームを非表示にします リセットボタンを表示します 先に進む前に、ブラウザで利用できる非常に重要な概念を知っておくと便利です。それは ローカルストレージ です。ローカルストレージは文字列を key-value のペアとしてブラウザに保存する便利な方法です。このタイプの Web ストレージは JavaScript で操作することができ、ブラウザでデータを管理することができます。ローカルストレージは有効期限がありませんが、もう一つの種類の Web ストレージであるセッションストレージはブラウザを閉じると消去されます。様々なタイプのストレージには、その使用方法に長所と短所があります。 注意 - ブラウザ拡張機能は独自のローカルストレージを持っています。メインのブラウザウィンドウは別のインスタンスであり、別々に動作します。 API キーに文字列の値を設定して、例えば Edge では Web ページを「検査」して (ブラウザを右クリックして検査することができます)、「アプリケーション」タブに行ってストレージを確認することで設定されていることがわかります。 ✅ ローカルストレージにデータを保存したくない状況を考えてみてください。一般的に、API キーをローカルストレージに置くのは悪い考えです理由がわかりますか私たちの場合、アプリは純粋に学習用であり、アプリストアにはデプロイされないので、このメソッドを使用します。 ローカルストレージを操作するには、getItem(), setItem(), removeItem() のいずれかの方法で Web API を使用することに注意してください。これはブラウザ全体で広くサポートされています。 init() で呼び出される displayCarbonUsage() 関数を構築する前に、フォームの初期投稿を処理する機能を構築しましょう。 フォーム送信の処理 イベント引数 (e) を受け取る関数 handleSubmit を作成します。イベントの伝播を停止し (この場合、ブラウザの更新を停止したい)、新しい関数 setUpUser を呼び出し、引数 apiKeyvalue と regionvalue を渡します。このようにして、適切なフィールドが入力されたときに初期フォームから取得される2つの値を利用します。 javascript function handleSubmit(e) { epreventDefault(); setUpUser(apiKeyvalue, regionvalue);\n}\n✅ 記憶をリフレッシュしてください - 前回のレッスンで設定した HTML には、ファイルの先頭に設定した const で values が取得される2つの入力フィールドがあり、両方とも required であるため、ブラウザはユーザが null 値を入力しないようにします。\nユーザーの設定\n次に setUpUser 関数に進み、ここで apiKey と regionName のローカルストレージの値を設定します。新しい関数を追加します。\njavascript\nfunction setUpUser(apiKey, regionName) {\nlocalStorage",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1240,
    "chunk_index": 39,
    "total_chunks": 76
  },
  {
    "id": "3046450c83fc574b2aafac9b5888621a",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "で操作することができ、ブラウザでデータを管理することができます。ローカルストレージは有効期限がありませんが、もう一つの種類の Web ストレージであるセッションストレージはブラウザを閉じると消去されます。様々なタイプのストレージには、その使用方法に長所と短所があります。 注意 - ブラウザ拡張機能は独自のローカルストレージを持っています。メインのブラウザウィンドウは別のインスタンスであり、別々に動作します。 API キーに文字列の値を設定して、例えば Edge では Web ページを「検査」して (ブラウザを右クリックして検査することができます)、「アプリケーション」タブに行ってストレージを確認することで設定されていることがわかります。 ✅ ローカルストレージにデータを保存したくない状況を考えてみてください。一般的に、API キーをローカルストレージに置くのは悪い考えです理由がわかりますか私たちの場合、アプリは純粋に学習用であり、アプリストアにはデプロイされないので、このメソッドを使用します。 ローカルストレージを操作するには、getItem(), setItem(), removeItem() のいずれかの方法で Web API を使用することに注意してください。これはブラウザ全体で広くサポートされています。 init() で呼び出される displayCarbonUsage() 関数を構築する前に、フォームの初期投稿を処理する機能を構築しましょう。 フォーム送信の処理 イベント引数 (e) を受け取る関数 handleSubmit を作成します。イベントの伝播を停止し (この場合、ブラウザの更新を停止したい)、新しい関数 setUpUser を呼び出し、引数 apiKeyvalue と regionvalue を渡します。このようにして、適切なフィールドが入力されたときに初期フォームから取得される2つの値を利用します。 javascript function handleSubmit(e) { epreventDefault(); setUpUser(apiKeyvalue, regionvalue); } ✅ 記憶をリフレッシュしてください - 前回のレッスンで設定した HTML には、ファイルの先頭に設定した const で values が取得される2つの入力フィールドがあり、両方とも required であるため、ブラウザはユーザが null 値を入力しないようにします。 ユーザーの設定 次に setUpUser 関数に進み、ここで apiKey と regionName のローカルストレージの値を設定します。新しい関数を追加します。 javascript function setUpUser(apiKey, regionName) { localStoragesetItem('apiKey', apiKey);\nlocalStorage",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 889,
    "chunk_index": 40,
    "total_chunks": 76
  },
  {
    "id": "23bca3a013dd02f26604fe339422fcaf",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "ストレージであるセッションストレージはブラウザを閉じると消去されます。様々なタイプのストレージには、その使用方法に長所と短所があります。 注意 - ブラウザ拡張機能は独自のローカルストレージを持っています。メインのブラウザウィンドウは別のインスタンスであり、別々に動作します。 API キーに文字列の値を設定して、例えば Edge では Web ページを「検査」して (ブラウザを右クリックして検査することができます)、「アプリケーション」タブに行ってストレージを確認することで設定されていることがわかります。 ✅ ローカルストレージにデータを保存したくない状況を考えてみてください。一般的に、API キーをローカルストレージに置くのは悪い考えです理由がわかりますか私たちの場合、アプリは純粋に学習用であり、アプリストアにはデプロイされないので、このメソッドを使用します。 ローカルストレージを操作するには、getItem(), setItem(), removeItem() のいずれかの方法で Web API を使用することに注意してください。これはブラウザ全体で広くサポートされています。 init() で呼び出される displayCarbonUsage() 関数を構築する前に、フォームの初期投稿を処理する機能を構築しましょう。 フォーム送信の処理 イベント引数 (e) を受け取る関数 handleSubmit を作成します。イベントの伝播を停止し (この場合、ブラウザの更新を停止したい)、新しい関数 setUpUser を呼び出し、引数 apiKeyvalue と regionvalue を渡します。このようにして、適切なフィールドが入力されたときに初期フォームから取得される2つの値を利用します。 javascript function handleSubmit(e) { epreventDefault(); setUpUser(apiKeyvalue, regionvalue); } ✅ 記憶をリフレッシュしてください - 前回のレッスンで設定した HTML には、ファイルの先頭に設定した const で values が取得される2つの入力フィールドがあり、両方とも required であるため、ブラウザはユーザが null 値を入力しないようにします。 ユーザーの設定 次に setUpUser 関数に進み、ここで apiKey と regionName のローカルストレージの値を設定します。新しい関数を追加します。 javascript function setUpUser(apiKey, regionName) { localStoragesetItem('apiKey', apiKey); localStoragesetItem('regionName', regionName);\nloading",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 842,
    "chunk_index": 41,
    "total_chunks": 76
  },
  {
    "id": "97fddf339a969582cdee649ed93bb419",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "- ブラウザ拡張機能は独自のローカルストレージを持っています。メインのブラウザウィンドウは別のインスタンスであり、別々に動作します。 API キーに文字列の値を設定して、例えば Edge では Web ページを「検査」して (ブラウザを右クリックして検査することができます)、「アプリケーション」タブに行ってストレージを確認することで設定されていることがわかります。 ✅ ローカルストレージにデータを保存したくない状況を考えてみてください。一般的に、API キーをローカルストレージに置くのは悪い考えです理由がわかりますか私たちの場合、アプリは純粋に学習用であり、アプリストアにはデプロイされないので、このメソッドを使用します。 ローカルストレージを操作するには、getItem(), setItem(), removeItem() のいずれかの方法で Web API を使用することに注意してください。これはブラウザ全体で広くサポートされています。 init() で呼び出される displayCarbonUsage() 関数を構築する前に、フォームの初期投稿を処理する機能を構築しましょう。 フォーム送信の処理 イベント引数 (e) を受け取る関数 handleSubmit を作成します。イベントの伝播を停止し (この場合、ブラウザの更新を停止したい)、新しい関数 setUpUser を呼び出し、引数 apiKeyvalue と regionvalue を渡します。このようにして、適切なフィールドが入力されたときに初期フォームから取得される2つの値を利用します。 javascript function handleSubmit(e) { epreventDefault(); setUpUser(apiKeyvalue, regionvalue); } ✅ 記憶をリフレッシュしてください - 前回のレッスンで設定した HTML には、ファイルの先頭に設定した const で values が取得される2つの入力フィールドがあり、両方とも required であるため、ブラウザはユーザが null 値を入力しないようにします。 ユーザーの設定 次に setUpUser 関数に進み、ここで apiKey と regionName のローカルストレージの値を設定します。新しい関数を追加します。 javascript function setUpUser(apiKey, regionName) { localStoragesetItem('apiKey', apiKey); localStoragesetItem('regionName', regionName); loadingstyle",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 779,
    "chunk_index": 42,
    "total_chunks": 76
  },
  {
    "id": "864d92b71429073a7ae4daa54c4d7f4c",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "- ブラウザ拡張機能は独自のローカルストレージを持っています。メインのブラウザウィンドウは別のインスタンスであり、別々に動作します。 API キーに文字列の値を設定して、例えば Edge では Web ページを「検査」して (ブラウザを右クリックして検査することができます)、「アプリケーション」タブに行ってストレージを確認することで設定されていることがわかります。 ✅ ローカルストレージにデータを保存したくない状況を考えてみてください。一般的に、API キーをローカルストレージに置くのは悪い考えです理由がわかりますか私たちの場合、アプリは純粋に学習用であり、アプリストアにはデプロイされないので、このメソッドを使用します。 ローカルストレージを操作するには、getItem(), setItem(), removeItem() のいずれかの方法で Web API を使用することに注意してください。これはブラウザ全体で広くサポートされています。 init() で呼び出される displayCarbonUsage() 関数を構築する前に、フォームの初期投稿を処理する機能を構築しましょう。 フォーム送信の処理 イベント引数 (e) を受け取る関数 handleSubmit を作成します。イベントの伝播を停止し (この場合、ブラウザの更新を停止したい)、新しい関数 setUpUser を呼び出し、引数 apiKeyvalue と regionvalue を渡します。このようにして、適切なフィールドが入力されたときに初期フォームから取得される2つの値を利用します。 javascript function handleSubmit(e) { epreventDefault(); setUpUser(apiKeyvalue, regionvalue); } ✅ 記憶をリフレッシュしてください - 前回のレッスンで設定した HTML には、ファイルの先頭に設定した const で values が取得される2つの入力フィールドがあり、両方とも required であるため、ブラウザはユーザが null 値を入力しないようにします。 ユーザーの設定 次に setUpUser 関数に進み、ここで apiKey と regionName のローカルストレージの値を設定します。新しい関数を追加します。 javascript function setUpUser(apiKey, regionName) { localStoragesetItem('apiKey', apiKey); localStoragesetItem('regionName', regionName); loadingstyledisplay = 'block';\nerrors",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 785,
    "chunk_index": 43,
    "total_chunks": 76
  },
  {
    "id": "53e90e5e71a872b9fe72c079c477d505",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "キーに文字列の値を設定して、例えば Edge では Web ページを「検査」して (ブラウザを右クリックして検査することができます)、「アプリケーション」タブに行ってストレージを確認することで設定されていることがわかります。 ✅ ローカルストレージにデータを保存したくない状況を考えてみてください。一般的に、API キーをローカルストレージに置くのは悪い考えです理由がわかりますか私たちの場合、アプリは純粋に学習用であり、アプリストアにはデプロイされないので、このメソッドを使用します。 ローカルストレージを操作するには、getItem(), setItem(), removeItem() のいずれかの方法で Web API を使用することに注意してください。これはブラウザ全体で広くサポートされています。 init() で呼び出される displayCarbonUsage() 関数を構築する前に、フォームの初期投稿を処理する機能を構築しましょう。 フォーム送信の処理 イベント引数 (e) を受け取る関数 handleSubmit を作成します。イベントの伝播を停止し (この場合、ブラウザの更新を停止したい)、新しい関数 setUpUser を呼び出し、引数 apiKeyvalue と regionvalue を渡します。このようにして、適切なフィールドが入力されたときに初期フォームから取得される2つの値を利用します。 javascript function handleSubmit(e) { epreventDefault(); setUpUser(apiKeyvalue, regionvalue); } ✅ 記憶をリフレッシュしてください - 前回のレッスンで設定した HTML には、ファイルの先頭に設定した const で values が取得される2つの入力フィールドがあり、両方とも required であるため、ブラウザはユーザが null 値を入力しないようにします。 ユーザーの設定 次に setUpUser 関数に進み、ここで apiKey と regionName のローカルストレージの値を設定します。新しい関数を追加します。 javascript function setUpUser(apiKey, regionName) { localStoragesetItem('apiKey', apiKey); localStoragesetItem('regionName', regionName); loadingstyledisplay = 'block'; errorstextContent = '';\nclearBtn",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 724,
    "chunk_index": 44,
    "total_chunks": 76
  },
  {
    "id": "d3aa22ddaf3ebfb595ad3fb4993866a1",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "Web ページを「検査」して (ブラウザを右クリックして検査することができます)、「アプリケーション」タブに行ってストレージを確認することで設定されていることがわかります。 ✅ ローカルストレージにデータを保存したくない状況を考えてみてください。一般的に、API キーをローカルストレージに置くのは悪い考えです理由がわかりますか私たちの場合、アプリは純粋に学習用であり、アプリストアにはデプロイされないので、このメソッドを使用します。 ローカルストレージを操作するには、getItem(), setItem(), removeItem() のいずれかの方法で Web API を使用することに注意してください。これはブラウザ全体で広くサポートされています。 init() で呼び出される displayCarbonUsage() 関数を構築する前に、フォームの初期投稿を処理する機能を構築しましょう。 フォーム送信の処理 イベント引数 (e) を受け取る関数 handleSubmit を作成します。イベントの伝播を停止し (この場合、ブラウザの更新を停止したい)、新しい関数 setUpUser を呼び出し、引数 apiKeyvalue と regionvalue を渡します。このようにして、適切なフィールドが入力されたときに初期フォームから取得される2つの値を利用します。 javascript function handleSubmit(e) { epreventDefault(); setUpUser(apiKeyvalue, regionvalue); } ✅ 記憶をリフレッシュしてください - 前回のレッスンで設定した HTML には、ファイルの先頭に設定した const で values が取得される2つの入力フィールドがあり、両方とも required であるため、ブラウザはユーザが null 値を入力しないようにします。 ユーザーの設定 次に setUpUser 関数に進み、ここで apiKey と regionName のローカルストレージの値を設定します。新しい関数を追加します。 javascript function setUpUser(apiKey, regionName) { localStoragesetItem('apiKey', apiKey); localStoragesetItem('regionName', regionName); loadingstyledisplay = 'block'; errorstextContent = ''; clearBtnstyle",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 705,
    "chunk_index": 45,
    "total_chunks": 76
  },
  {
    "id": "0e77f9c8cbf313425a4e8d232863de60",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "Web ページを「検査」して (ブラウザを右クリックして検査することができます)、「アプリケーション」タブに行ってストレージを確認することで設定されていることがわかります。 ✅ ローカルストレージにデータを保存したくない状況を考えてみてください。一般的に、API キーをローカルストレージに置くのは悪い考えです理由がわかりますか私たちの場合、アプリは純粋に学習用であり、アプリストアにはデプロイされないので、このメソッドを使用します。 ローカルストレージを操作するには、getItem(), setItem(), removeItem() のいずれかの方法で Web API を使用することに注意してください。これはブラウザ全体で広くサポートされています。 init() で呼び出される displayCarbonUsage() 関数を構築する前に、フォームの初期投稿を処理する機能を構築しましょう。 フォーム送信の処理 イベント引数 (e) を受け取る関数 handleSubmit を作成します。イベントの伝播を停止し (この場合、ブラウザの更新を停止したい)、新しい関数 setUpUser を呼び出し、引数 apiKeyvalue と regionvalue を渡します。このようにして、適切なフィールドが入力されたときに初期フォームから取得される2つの値を利用します。 javascript function handleSubmit(e) { epreventDefault(); setUpUser(apiKeyvalue, regionvalue); } ✅ 記憶をリフレッシュしてください - 前回のレッスンで設定した HTML には、ファイルの先頭に設定した const で values が取得される2つの入力フィールドがあり、両方とも required であるため、ブラウザはユーザが null 値を入力しないようにします。 ユーザーの設定 次に setUpUser 関数に進み、ここで apiKey と regionName のローカルストレージの値を設定します。新しい関数を追加します。 javascript function setUpUser(apiKey, regionName) { localStoragesetItem('apiKey', apiKey); localStoragesetItem('regionName', regionName); loadingstyledisplay = 'block'; errorstextContent = ''; clearBtnstyledisplay = 'block';\n//初期化の呼び出し\ndisplayCarbonUsage(apiKey, regionName);\n}\nこの関数は、API が呼び出されている間に表示するローディングメッセージを設定します。この時点で、このブラウザ拡張機能の最も重要な機能の作成に到達しました",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 804,
    "chunk_index": 46,
    "total_chunks": 76
  },
  {
    "id": "97cd46f67afbe639409a687e60cf0b9c",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "removeItem() のいずれかの方法で Web API を使用することに注意してください。これはブラウザ全体で広くサポートされています。 init() で呼び出される displayCarbonUsage() 関数を構築する前に、フォームの初期投稿を処理する機能を構築しましょう。 フォーム送信の処理 イベント引数 (e) を受け取る関数 handleSubmit を作成します。イベントの伝播を停止し (この場合、ブラウザの更新を停止したい)、新しい関数 setUpUser を呼び出し、引数 apiKeyvalue と regionvalue を渡します。このようにして、適切なフィールドが入力されたときに初期フォームから取得される2つの値を利用します。 javascript function handleSubmit(e) { epreventDefault(); setUpUser(apiKeyvalue, regionvalue); } ✅ 記憶をリフレッシュしてください - 前回のレッスンで設定した HTML には、ファイルの先頭に設定した const で values が取得される2つの入力フィールドがあり、両方とも required であるため、ブラウザはユーザが null 値を入力しないようにします。 ユーザーの設定 次に setUpUser 関数に進み、ここで apiKey と regionName のローカルストレージの値を設定します。新しい関数を追加します。 javascript function setUpUser(apiKey, regionName) { localStoragesetItem('apiKey', apiKey); localStoragesetItem('regionName', regionName); loadingstyledisplay = 'block'; errorstextContent = ''; clearBtnstyledisplay = 'block'; //初期化の呼び出し displayCarbonUsage(apiKey, regionName); } この関数は、API が呼び出されている間に表示するローディングメッセージを設定します。この時点で、このブラウザ拡張機能の最も重要な機能の作成に到達しました炭素使用量の表示\nついに API に問い合わせをする時が来ました",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 608,
    "chunk_index": 47,
    "total_chunks": 76
  },
  {
    "id": "b1590cdad8a97fb60e7cb24e8d6c9b88",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "API を使用することに注意してください。これはブラウザ全体で広くサポートされています。 init() で呼び出される displayCarbonUsage() 関数を構築する前に、フォームの初期投稿を処理する機能を構築しましょう。 フォーム送信の処理 イベント引数 (e) を受け取る関数 handleSubmit を作成します。イベントの伝播を停止し (この場合、ブラウザの更新を停止したい)、新しい関数 setUpUser を呼び出し、引数 apiKeyvalue と regionvalue を渡します。このようにして、適切なフィールドが入力されたときに初期フォームから取得される2つの値を利用します。 javascript function handleSubmit(e) { epreventDefault(); setUpUser(apiKeyvalue, regionvalue); } ✅ 記憶をリフレッシュしてください - 前回のレッスンで設定した HTML には、ファイルの先頭に設定した const で values が取得される2つの入力フィールドがあり、両方とも required であるため、ブラウザはユーザが null 値を入力しないようにします。 ユーザーの設定 次に setUpUser 関数に進み、ここで apiKey と regionName のローカルストレージの値を設定します。新しい関数を追加します。 javascript function setUpUser(apiKey, regionName) { localStoragesetItem('apiKey', apiKey); localStoragesetItem('regionName', regionName); loadingstyledisplay = 'block'; errorstextContent = ''; clearBtnstyledisplay = 'block'; //初期化の呼び出し displayCarbonUsage(apiKey, regionName); } この関数は、API が呼び出されている間に表示するローディングメッセージを設定します。この時点で、このブラウザ拡張機能の最も重要な機能の作成に到達しました炭素使用量の表示 ついに API に問い合わせをする時が来ました先に進む前に、API について説明しましょう。API (Application Programming Interfaces) は、Web 開発者のツールボックスの重要な要素です。API は、プログラムが相互作用し、相互にインターフェースするための標準的な方法を提供します。例えば、データベースへの問い合わせが必要な Web サイトを構築している場合、誰かが API を作成しているかもしれません。API には多くの種類がありますが、最も人気のあるものの一つが REST API です。\n✅ 'REST' とは 'Representational State Transfer' の略で、様々な設定の URL を使ってデータを取得するのが特徴です。開発者が利用できる様々なタイプの API について少し調べてみてください。どのような形式に興味がありますか",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 886,
    "chunk_index": 48,
    "total_chunks": 76
  },
  {
    "id": "ec62e4507bef2b9d9875ad886edc7da4",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "} ✅ 記憶をリフレッシュしてください - 前回のレッスンで設定した HTML には、ファイルの先頭に設定した const で values が取得される2つの入力フィールドがあり、両方とも required であるため、ブラウザはユーザが null 値を入力しないようにします。 ユーザーの設定 次に setUpUser 関数に進み、ここで apiKey と regionName のローカルストレージの値を設定します。新しい関数を追加します。 javascript function setUpUser(apiKey, regionName) { localStoragesetItem('apiKey', apiKey); localStoragesetItem('regionName', regionName); loadingstyledisplay = 'block'; errorstextContent = ''; clearBtnstyledisplay = 'block'; //初期化の呼び出し displayCarbonUsage(apiKey, regionName); } この関数は、API が呼び出されている間に表示するローディングメッセージを設定します。この時点で、このブラウザ拡張機能の最も重要な機能の作成に到達しました炭素使用量の表示 ついに API に問い合わせをする時が来ました先に進む前に、API について説明しましょう。API (Application Programming Interfaces) は、Web 開発者のツールボックスの重要な要素です。API は、プログラムが相互作用し、相互にインターフェースするための標準的な方法を提供します。例えば、データベースへの問い合わせが必要な Web サイトを構築している場合、誰かが API を作成しているかもしれません。API には多くの種類がありますが、最も人気のあるものの一つが REST API です。 ✅ 'REST' とは 'Representational State Transfer' の略で、様々な設定の URL を使ってデータを取得するのが特徴です。開発者が利用できる様々なタイプの API について少し調べてみてください。どのような形式に興味がありますかこの関数には注意すべき重要な点があります。まず、async キーワードに注目してください。非同期的に実行されるように関数を書くということは、データが返されるなどのアクションが完了するのを待ってから続行するということです。\n以下は async についての簡単なビデオです:\nC02Signal API に問い合わせを行うための新しい関数を作成します:\n```javascript\nimport axios from '",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 786,
    "chunk_index": 49,
    "total_chunks": 76
  },
  {
    "id": "992d5f14bc8d224f794e89fc41819fc3",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "であるため、ブラウザはユーザが null 値を入力しないようにします。 ユーザーの設定 次に setUpUser 関数に進み、ここで apiKey と regionName のローカルストレージの値を設定します。新しい関数を追加します。 javascript function setUpUser(apiKey, regionName) { localStoragesetItem('apiKey', apiKey); localStoragesetItem('regionName', regionName); loadingstyledisplay = 'block'; errorstextContent = ''; clearBtnstyledisplay = 'block'; //初期化の呼び出し displayCarbonUsage(apiKey, regionName); } この関数は、API が呼び出されている間に表示するローディングメッセージを設定します。この時点で、このブラウザ拡張機能の最も重要な機能の作成に到達しました炭素使用量の表示 ついに API に問い合わせをする時が来ました先に進む前に、API について説明しましょう。API (Application Programming Interfaces) は、Web 開発者のツールボックスの重要な要素です。API は、プログラムが相互作用し、相互にインターフェースするための標準的な方法を提供します。例えば、データベースへの問い合わせが必要な Web サイトを構築している場合、誰かが API を作成しているかもしれません。API には多くの種類がありますが、最も人気のあるものの一つが REST API です。 ✅ 'REST' とは 'Representational State Transfer' の略で、様々な設定の URL を使ってデータを取得するのが特徴です。開発者が利用できる様々なタイプの API について少し調べてみてください。どのような形式に興味がありますかこの関数には注意すべき重要な点があります。まず、async キーワードに注目してください。非同期的に実行されるように関数を書くということは、データが返されるなどのアクションが完了するのを待ってから続行するということです。 以下は async についての簡単なビデオです: C02Signal API に問い合わせを行うための新しい関数を作成します: ```javascript import axios from '/node_modules/axios';\nasync function displayCarbonUsage(apiKey, region) {\ntry {\nawait axios",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 726,
    "chunk_index": 50,
    "total_chunks": 76
  },
  {
    "id": "a39c082661feab37c48dfa89d1c393c8",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "regionName のローカルストレージの値を設定します。新しい関数を追加します。 javascript function setUpUser(apiKey, regionName) { localStoragesetItem('apiKey', apiKey); localStoragesetItem('regionName', regionName); loadingstyledisplay = 'block'; errorstextContent = ''; clearBtnstyledisplay = 'block'; //初期化の呼び出し displayCarbonUsage(apiKey, regionName); } この関数は、API が呼び出されている間に表示するローディングメッセージを設定します。この時点で、このブラウザ拡張機能の最も重要な機能の作成に到達しました炭素使用量の表示 ついに API に問い合わせをする時が来ました先に進む前に、API について説明しましょう。API (Application Programming Interfaces) は、Web 開発者のツールボックスの重要な要素です。API は、プログラムが相互作用し、相互にインターフェースするための標準的な方法を提供します。例えば、データベースへの問い合わせが必要な Web サイトを構築している場合、誰かが API を作成しているかもしれません。API には多くの種類がありますが、最も人気のあるものの一つが REST API です。 ✅ 'REST' とは 'Representational State Transfer' の略で、様々な設定の URL を使ってデータを取得するのが特徴です。開発者が利用できる様々なタイプの API について少し調べてみてください。どのような形式に興味がありますかこの関数には注意すべき重要な点があります。まず、async キーワードに注目してください。非同期的に実行されるように関数を書くということは、データが返されるなどのアクションが完了するのを待ってから続行するということです。 以下は async についての簡単なビデオです: C02Signal API に問い合わせを行うための新しい関数を作成します: ```javascript import axios from '/node_modules/axios'; async function displayCarbonUsage(apiKey, region) { try { await axiosget('https://api",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 669,
    "chunk_index": 51,
    "total_chunks": 76
  },
  {
    "id": "ce3936b651e51c94545f3735c94741a8",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "regionName のローカルストレージの値を設定します。新しい関数を追加します。 javascript function setUpUser(apiKey, regionName) { localStoragesetItem('apiKey', apiKey); localStoragesetItem('regionName', regionName); loadingstyledisplay = 'block'; errorstextContent = ''; clearBtnstyledisplay = 'block'; //初期化の呼び出し displayCarbonUsage(apiKey, regionName); } この関数は、API が呼び出されている間に表示するローディングメッセージを設定します。この時点で、このブラウザ拡張機能の最も重要な機能の作成に到達しました炭素使用量の表示 ついに API に問い合わせをする時が来ました先に進む前に、API について説明しましょう。API (Application Programming Interfaces) は、Web 開発者のツールボックスの重要な要素です。API は、プログラムが相互作用し、相互にインターフェースするための標準的な方法を提供します。例えば、データベースへの問い合わせが必要な Web サイトを構築している場合、誰かが API を作成しているかもしれません。API には多くの種類がありますが、最も人気のあるものの一つが REST API です。 ✅ 'REST' とは 'Representational State Transfer' の略で、様々な設定の URL を使ってデータを取得するのが特徴です。開発者が利用できる様々なタイプの API について少し調べてみてください。どのような形式に興味がありますかこの関数には注意すべき重要な点があります。まず、async キーワードに注目してください。非同期的に実行されるように関数を書くということは、データが返されるなどのアクションが完了するのを待ってから続行するということです。 以下は async についての簡単なビデオです: C02Signal API に問い合わせを行うための新しい関数を作成します: ```javascript import axios from '/node_modules/axios'; async function displayCarbonUsage(apiKey, region) { try { await axiosget('https://apico2signal",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 672,
    "chunk_index": 52,
    "total_chunks": 76
  },
  {
    "id": "ca6fe2aaabc0aa4e036cf7ce82d2e2fd",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "regionName のローカルストレージの値を設定します。新しい関数を追加します。 javascript function setUpUser(apiKey, regionName) { localStoragesetItem('apiKey', apiKey); localStoragesetItem('regionName', regionName); loadingstyledisplay = 'block'; errorstextContent = ''; clearBtnstyledisplay = 'block'; //初期化の呼び出し displayCarbonUsage(apiKey, regionName); } この関数は、API が呼び出されている間に表示するローディングメッセージを設定します。この時点で、このブラウザ拡張機能の最も重要な機能の作成に到達しました炭素使用量の表示 ついに API に問い合わせをする時が来ました先に進む前に、API について説明しましょう。API (Application Programming Interfaces) は、Web 開発者のツールボックスの重要な要素です。API は、プログラムが相互作用し、相互にインターフェースするための標準的な方法を提供します。例えば、データベースへの問い合わせが必要な Web サイトを構築している場合、誰かが API を作成しているかもしれません。API には多くの種類がありますが、最も人気のあるものの一つが REST API です。 ✅ 'REST' とは 'Representational State Transfer' の略で、様々な設定の URL を使ってデータを取得するのが特徴です。開発者が利用できる様々なタイプの API について少し調べてみてください。どのような形式に興味がありますかこの関数には注意すべき重要な点があります。まず、async キーワードに注目してください。非同期的に実行されるように関数を書くということは、データが返されるなどのアクションが完了するのを待ってから続行するということです。 以下は async についての簡単なビデオです: C02Signal API に問い合わせを行うための新しい関数を作成します: ```javascript import axios from '/node_modules/axios'; async function displayCarbonUsage(apiKey, region) { try { await axiosget('https://apico2signalcom/v1/latest', {\nparams: {\ncountryCode: region,\n},\nheaders: {\n'auth-token': apiKey,\n},\n})",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 698,
    "chunk_index": 53,
    "total_chunks": 76
  },
  {
    "id": "19aad51885bc33a1c62df8c6cd702611",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "= 'block'; errorstextContent = ''; clearBtnstyledisplay = 'block'; //初期化の呼び出し displayCarbonUsage(apiKey, regionName); } この関数は、API が呼び出されている間に表示するローディングメッセージを設定します。この時点で、このブラウザ拡張機能の最も重要な機能の作成に到達しました炭素使用量の表示 ついに API に問い合わせをする時が来ました先に進む前に、API について説明しましょう。API (Application Programming Interfaces) は、Web 開発者のツールボックスの重要な要素です。API は、プログラムが相互作用し、相互にインターフェースするための標準的な方法を提供します。例えば、データベースへの問い合わせが必要な Web サイトを構築している場合、誰かが API を作成しているかもしれません。API には多くの種類がありますが、最も人気のあるものの一つが REST API です。 ✅ 'REST' とは 'Representational State Transfer' の略で、様々な設定の URL を使ってデータを取得するのが特徴です。開発者が利用できる様々なタイプの API について少し調べてみてください。どのような形式に興味がありますかこの関数には注意すべき重要な点があります。まず、async キーワードに注目してください。非同期的に実行されるように関数を書くということは、データが返されるなどのアクションが完了するのを待ってから続行するということです。 以下は async についての簡単なビデオです: C02Signal API に問い合わせを行うための新しい関数を作成します: ```javascript import axios from '/node_modules/axios'; async function displayCarbonUsage(apiKey, region) { try { await axiosget('https://apico2signalcom/v1/latest', { params: { countryCode: region, }, headers: { 'auth-token': apiKey, }, })then((response) => {\nlet CO2 = Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 640,
    "chunk_index": 54,
    "total_chunks": 76
  },
  {
    "id": "9ce9b43f336312e31ad1866a8a807e49",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "= 'block'; //初期化の呼び出し displayCarbonUsage(apiKey, regionName); } この関数は、API が呼び出されている間に表示するローディングメッセージを設定します。この時点で、このブラウザ拡張機能の最も重要な機能の作成に到達しました炭素使用量の表示 ついに API に問い合わせをする時が来ました先に進む前に、API について説明しましょう。API (Application Programming Interfaces) は、Web 開発者のツールボックスの重要な要素です。API は、プログラムが相互作用し、相互にインターフェースするための標準的な方法を提供します。例えば、データベースへの問い合わせが必要な Web サイトを構築している場合、誰かが API を作成しているかもしれません。API には多くの種類がありますが、最も人気のあるものの一つが REST API です。 ✅ 'REST' とは 'Representational State Transfer' の略で、様々な設定の URL を使ってデータを取得するのが特徴です。開発者が利用できる様々なタイプの API について少し調べてみてください。どのような形式に興味がありますかこの関数には注意すべき重要な点があります。まず、async キーワードに注目してください。非同期的に実行されるように関数を書くということは、データが返されるなどのアクションが完了するのを待ってから続行するということです。 以下は async についての簡単なビデオです: C02Signal API に問い合わせを行うための新しい関数を作成します: ```javascript import axios from '/node_modules/axios'; async function displayCarbonUsage(apiKey, region) { try { await axiosget('https://apico2signalcom/v1/latest', { params: { countryCode: region, }, headers: { 'auth-token': apiKey, }, })then((response) => { let CO2 = Mathfloor(response",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 628,
    "chunk_index": 55,
    "total_chunks": 76
  },
  {
    "id": "8914ec3dd9761949d0c6f519431f8441",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "= 'block'; //初期化の呼び出し displayCarbonUsage(apiKey, regionName); } この関数は、API が呼び出されている間に表示するローディングメッセージを設定します。この時点で、このブラウザ拡張機能の最も重要な機能の作成に到達しました炭素使用量の表示 ついに API に問い合わせをする時が来ました先に進む前に、API について説明しましょう。API (Application Programming Interfaces) は、Web 開発者のツールボックスの重要な要素です。API は、プログラムが相互作用し、相互にインターフェースするための標準的な方法を提供します。例えば、データベースへの問い合わせが必要な Web サイトを構築している場合、誰かが API を作成しているかもしれません。API には多くの種類がありますが、最も人気のあるものの一つが REST API です。 ✅ 'REST' とは 'Representational State Transfer' の略で、様々な設定の URL を使ってデータを取得するのが特徴です。開発者が利用できる様々なタイプの API について少し調べてみてください。どのような形式に興味がありますかこの関数には注意すべき重要な点があります。まず、async キーワードに注目してください。非同期的に実行されるように関数を書くということは、データが返されるなどのアクションが完了するのを待ってから続行するということです。 以下は async についての簡単なビデオです: C02Signal API に問い合わせを行うための新しい関数を作成します: ```javascript import axios from '/node_modules/axios'; async function displayCarbonUsage(apiKey, region) { try { await axiosget('https://apico2signalcom/v1/latest', { params: { countryCode: region, }, headers: { 'auth-token': apiKey, }, })then((response) => { let CO2 = Mathfloor(responsedata",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 630,
    "chunk_index": 56,
    "total_chunks": 76
  },
  {
    "id": "a93e0af9c1161d085959ccfce9cb493f",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "= 'block'; //初期化の呼び出し displayCarbonUsage(apiKey, regionName); } この関数は、API が呼び出されている間に表示するローディングメッセージを設定します。この時点で、このブラウザ拡張機能の最も重要な機能の作成に到達しました炭素使用量の表示 ついに API に問い合わせをする時が来ました先に進む前に、API について説明しましょう。API (Application Programming Interfaces) は、Web 開発者のツールボックスの重要な要素です。API は、プログラムが相互作用し、相互にインターフェースするための標準的な方法を提供します。例えば、データベースへの問い合わせが必要な Web サイトを構築している場合、誰かが API を作成しているかもしれません。API には多くの種類がありますが、最も人気のあるものの一つが REST API です。 ✅ 'REST' とは 'Representational State Transfer' の略で、様々な設定の URL を使ってデータを取得するのが特徴です。開発者が利用できる様々なタイプの API について少し調べてみてください。どのような形式に興味がありますかこの関数には注意すべき重要な点があります。まず、async キーワードに注目してください。非同期的に実行されるように関数を書くということは、データが返されるなどのアクションが完了するのを待ってから続行するということです。 以下は async についての簡単なビデオです: C02Signal API に問い合わせを行うための新しい関数を作成します: ```javascript import axios from '/node_modules/axios'; async function displayCarbonUsage(apiKey, region) { try { await axiosget('https://apico2signalcom/v1/latest', { params: { countryCode: region, }, headers: { 'auth-token': apiKey, }, })then((response) => { let CO2 = Mathfloor(responsedatadata",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 632,
    "chunk_index": 57,
    "total_chunks": 76
  },
  {
    "id": "4c7d7a080bad89def5d260833d1a17e4",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "= 'block'; //初期化の呼び出し displayCarbonUsage(apiKey, regionName); } この関数は、API が呼び出されている間に表示するローディングメッセージを設定します。この時点で、このブラウザ拡張機能の最も重要な機能の作成に到達しました炭素使用量の表示 ついに API に問い合わせをする時が来ました先に進む前に、API について説明しましょう。API (Application Programming Interfaces) は、Web 開発者のツールボックスの重要な要素です。API は、プログラムが相互作用し、相互にインターフェースするための標準的な方法を提供します。例えば、データベースへの問い合わせが必要な Web サイトを構築している場合、誰かが API を作成しているかもしれません。API には多くの種類がありますが、最も人気のあるものの一つが REST API です。 ✅ 'REST' とは 'Representational State Transfer' の略で、様々な設定の URL を使ってデータを取得するのが特徴です。開発者が利用できる様々なタイプの API について少し調べてみてください。どのような形式に興味がありますかこの関数には注意すべき重要な点があります。まず、async キーワードに注目してください。非同期的に実行されるように関数を書くということは、データが返されるなどのアクションが完了するのを待ってから続行するということです。 以下は async についての簡単なビデオです: C02Signal API に問い合わせを行うための新しい関数を作成します: ```javascript import axios from '/node_modules/axios'; async function displayCarbonUsage(apiKey, region) { try { await axiosget('https://apico2signalcom/v1/latest', { params: { countryCode: region, }, headers: { 'auth-token': apiKey, }, })then((response) => { let CO2 = Mathfloor(responsedatadatacarbonIntensity);\n//calculateColor(CO2);\nloading",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 643,
    "chunk_index": 58,
    "total_chunks": 76
  },
  {
    "id": "6549a0a3bf6c12bc3dad7ae0a93d0bd3",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "//初期化の呼び出し displayCarbonUsage(apiKey, regionName); } この関数は、API が呼び出されている間に表示するローディングメッセージを設定します。この時点で、このブラウザ拡張機能の最も重要な機能の作成に到達しました炭素使用量の表示 ついに API に問い合わせをする時が来ました先に進む前に、API について説明しましょう。API (Application Programming Interfaces) は、Web 開発者のツールボックスの重要な要素です。API は、プログラムが相互作用し、相互にインターフェースするための標準的な方法を提供します。例えば、データベースへの問い合わせが必要な Web サイトを構築している場合、誰かが API を作成しているかもしれません。API には多くの種類がありますが、最も人気のあるものの一つが REST API です。 ✅ 'REST' とは 'Representational State Transfer' の略で、様々な設定の URL を使ってデータを取得するのが特徴です。開発者が利用できる様々なタイプの API について少し調べてみてください。どのような形式に興味がありますかこの関数には注意すべき重要な点があります。まず、async キーワードに注目してください。非同期的に実行されるように関数を書くということは、データが返されるなどのアクションが完了するのを待ってから続行するということです。 以下は async についての簡単なビデオです: C02Signal API に問い合わせを行うための新しい関数を作成します: ```javascript import axios from '/node_modules/axios'; async function displayCarbonUsage(apiKey, region) { try { await axiosget('https://apico2signalcom/v1/latest', { params: { countryCode: region, }, headers: { 'auth-token': apiKey, }, })then((response) => { let CO2 = Mathfloor(responsedatadatacarbonIntensity); //calculateColor(CO2); loadingstyle",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 640,
    "chunk_index": 59,
    "total_chunks": 76
  },
  {
    "id": "caf39542390ac72f4d3bf6da75793c50",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "//初期化の呼び出し displayCarbonUsage(apiKey, regionName); } この関数は、API が呼び出されている間に表示するローディングメッセージを設定します。この時点で、このブラウザ拡張機能の最も重要な機能の作成に到達しました炭素使用量の表示 ついに API に問い合わせをする時が来ました先に進む前に、API について説明しましょう。API (Application Programming Interfaces) は、Web 開発者のツールボックスの重要な要素です。API は、プログラムが相互作用し、相互にインターフェースするための標準的な方法を提供します。例えば、データベースへの問い合わせが必要な Web サイトを構築している場合、誰かが API を作成しているかもしれません。API には多くの種類がありますが、最も人気のあるものの一つが REST API です。 ✅ 'REST' とは 'Representational State Transfer' の略で、様々な設定の URL を使ってデータを取得するのが特徴です。開発者が利用できる様々なタイプの API について少し調べてみてください。どのような形式に興味がありますかこの関数には注意すべき重要な点があります。まず、async キーワードに注目してください。非同期的に実行されるように関数を書くということは、データが返されるなどのアクションが完了するのを待ってから続行するということです。 以下は async についての簡単なビデオです: C02Signal API に問い合わせを行うための新しい関数を作成します: ```javascript import axios from '/node_modules/axios'; async function displayCarbonUsage(apiKey, region) { try { await axiosget('https://apico2signalcom/v1/latest', { params: { countryCode: region, }, headers: { 'auth-token': apiKey, }, })then((response) => { let CO2 = Mathfloor(responsedatadatacarbonIntensity); //calculateColor(CO2); loadingstyledisplay = 'none';\nform",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 646,
    "chunk_index": 60,
    "total_chunks": 76
  },
  {
    "id": "75d883016d10483c7bba8f1896f6d7f6",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "} この関数は、API が呼び出されている間に表示するローディングメッセージを設定します。この時点で、このブラウザ拡張機能の最も重要な機能の作成に到達しました炭素使用量の表示 ついに API に問い合わせをする時が来ました先に進む前に、API について説明しましょう。API (Application Programming Interfaces) は、Web 開発者のツールボックスの重要な要素です。API は、プログラムが相互作用し、相互にインターフェースするための標準的な方法を提供します。例えば、データベースへの問い合わせが必要な Web サイトを構築している場合、誰かが API を作成しているかもしれません。API には多くの種類がありますが、最も人気のあるものの一つが REST API です。 ✅ 'REST' とは 'Representational State Transfer' の略で、様々な設定の URL を使ってデータを取得するのが特徴です。開発者が利用できる様々なタイプの API について少し調べてみてください。どのような形式に興味がありますかこの関数には注意すべき重要な点があります。まず、async キーワードに注目してください。非同期的に実行されるように関数を書くということは、データが返されるなどのアクションが完了するのを待ってから続行するということです。 以下は async についての簡単なビデオです: C02Signal API に問い合わせを行うための新しい関数を作成します: ```javascript import axios from '/node_modules/axios'; async function displayCarbonUsage(apiKey, region) { try { await axiosget('https://apico2signalcom/v1/latest', { params: { countryCode: region, }, headers: { 'auth-token': apiKey, }, })then((response) => { let CO2 = Mathfloor(responsedatadatacarbonIntensity); //calculateColor(CO2); loadingstyledisplay = 'none'; formstyle",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 627,
    "chunk_index": 61,
    "total_chunks": 76
  },
  {
    "id": "5efb98847bbf3aa2344e0261fa864235",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "} この関数は、API が呼び出されている間に表示するローディングメッセージを設定します。この時点で、このブラウザ拡張機能の最も重要な機能の作成に到達しました炭素使用量の表示 ついに API に問い合わせをする時が来ました先に進む前に、API について説明しましょう。API (Application Programming Interfaces) は、Web 開発者のツールボックスの重要な要素です。API は、プログラムが相互作用し、相互にインターフェースするための標準的な方法を提供します。例えば、データベースへの問い合わせが必要な Web サイトを構築している場合、誰かが API を作成しているかもしれません。API には多くの種類がありますが、最も人気のあるものの一つが REST API です。 ✅ 'REST' とは 'Representational State Transfer' の略で、様々な設定の URL を使ってデータを取得するのが特徴です。開発者が利用できる様々なタイプの API について少し調べてみてください。どのような形式に興味がありますかこの関数には注意すべき重要な点があります。まず、async キーワードに注目してください。非同期的に実行されるように関数を書くということは、データが返されるなどのアクションが完了するのを待ってから続行するということです。 以下は async についての簡単なビデオです: C02Signal API に問い合わせを行うための新しい関数を作成します: ```javascript import axios from '/node_modules/axios'; async function displayCarbonUsage(apiKey, region) { try { await axiosget('https://apico2signalcom/v1/latest', { params: { countryCode: region, }, headers: { 'auth-token': apiKey, }, })then((response) => { let CO2 = Mathfloor(responsedatadatacarbonIntensity); //calculateColor(CO2); loadingstyledisplay = 'none'; formstyledisplay = 'none';\nmyregion",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 634,
    "chunk_index": 62,
    "total_chunks": 76
  },
  {
    "id": "378fbbf95f579a634d0128473b8b16ab",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "ついに API に問い合わせをする時が来ました先に進む前に、API について説明しましょう。API (Application Programming Interfaces) は、Web 開発者のツールボックスの重要な要素です。API は、プログラムが相互作用し、相互にインターフェースするための標準的な方法を提供します。例えば、データベースへの問い合わせが必要な Web サイトを構築している場合、誰かが API を作成しているかもしれません。API には多くの種類がありますが、最も人気のあるものの一つが REST API です。 ✅ 'REST' とは 'Representational State Transfer' の略で、様々な設定の URL を使ってデータを取得するのが特徴です。開発者が利用できる様々なタイプの API について少し調べてみてください。どのような形式に興味がありますかこの関数には注意すべき重要な点があります。まず、async キーワードに注目してください。非同期的に実行されるように関数を書くということは、データが返されるなどのアクションが完了するのを待ってから続行するということです。 以下は async についての簡単なビデオです: C02Signal API に問い合わせを行うための新しい関数を作成します: ```javascript import axios from '/node_modules/axios'; async function displayCarbonUsage(apiKey, region) { try { await axiosget('https://apico2signalcom/v1/latest', { params: { countryCode: region, }, headers: { 'auth-token': apiKey, }, })then((response) => { let CO2 = Mathfloor(responsedatadatacarbonIntensity); //calculateColor(CO2); loadingstyledisplay = 'none'; formstyledisplay = 'none'; myregiontextContent = region;\nusage",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 557,
    "chunk_index": 63,
    "total_chunks": 76
  },
  {
    "id": "c4b844cb3f0fdf90e9e0d4cbc10b7d6f",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "について説明しましょう。API (Application Programming Interfaces) は、Web 開発者のツールボックスの重要な要素です。API は、プログラムが相互作用し、相互にインターフェースするための標準的な方法を提供します。例えば、データベースへの問い合わせが必要な Web サイトを構築している場合、誰かが API を作成しているかもしれません。API には多くの種類がありますが、最も人気のあるものの一つが REST API です。 ✅ 'REST' とは 'Representational State Transfer' の略で、様々な設定の URL を使ってデータを取得するのが特徴です。開発者が利用できる様々なタイプの API について少し調べてみてください。どのような形式に興味がありますかこの関数には注意すべき重要な点があります。まず、async キーワードに注目してください。非同期的に実行されるように関数を書くということは、データが返されるなどのアクションが完了するのを待ってから続行するということです。 以下は async についての簡単なビデオです: C02Signal API に問い合わせを行うための新しい関数を作成します: ```javascript import axios from '/node_modules/axios'; async function displayCarbonUsage(apiKey, region) { try { await axiosget('https://apico2signalcom/v1/latest', { params: { countryCode: region, }, headers: { 'auth-token': apiKey, }, })then((response) => { let CO2 = Mathfloor(responsedatadatacarbonIntensity); //calculateColor(CO2); loadingstyledisplay = 'none'; formstyledisplay = 'none'; myregiontextContent = region; usagetextContent =\nMath",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 534,
    "chunk_index": 64,
    "total_chunks": 76
  },
  {
    "id": "2f3370477b340256405c602449ac1f65",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "Programming Interfaces) は、Web 開発者のツールボックスの重要な要素です。API は、プログラムが相互作用し、相互にインターフェースするための標準的な方法を提供します。例えば、データベースへの問い合わせが必要な Web サイトを構築している場合、誰かが API を作成しているかもしれません。API には多くの種類がありますが、最も人気のあるものの一つが REST API です。 ✅ 'REST' とは 'Representational State Transfer' の略で、様々な設定の URL を使ってデータを取得するのが特徴です。開発者が利用できる様々なタイプの API について少し調べてみてください。どのような形式に興味がありますかこの関数には注意すべき重要な点があります。まず、async キーワードに注目してください。非同期的に実行されるように関数を書くということは、データが返されるなどのアクションが完了するのを待ってから続行するということです。 以下は async についての簡単なビデオです: C02Signal API に問い合わせを行うための新しい関数を作成します: ```javascript import axios from '/node_modules/axios'; async function displayCarbonUsage(apiKey, region) { try { await axiosget('https://apico2signalcom/v1/latest', { params: { countryCode: region, }, headers: { 'auth-token': apiKey, }, })then((response) => { let CO2 = Mathfloor(responsedatadatacarbonIntensity); //calculateColor(CO2); loadingstyledisplay = 'none'; formstyledisplay = 'none'; myregiontextContent = region; usagetextContent = Mathround(response",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 519,
    "chunk_index": 65,
    "total_chunks": 76
  },
  {
    "id": "68751a52471bf581fac2d07d97e70027",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "Programming Interfaces) は、Web 開発者のツールボックスの重要な要素です。API は、プログラムが相互作用し、相互にインターフェースするための標準的な方法を提供します。例えば、データベースへの問い合わせが必要な Web サイトを構築している場合、誰かが API を作成しているかもしれません。API には多くの種類がありますが、最も人気のあるものの一つが REST API です。 ✅ 'REST' とは 'Representational State Transfer' の略で、様々な設定の URL を使ってデータを取得するのが特徴です。開発者が利用できる様々なタイプの API について少し調べてみてください。どのような形式に興味がありますかこの関数には注意すべき重要な点があります。まず、async キーワードに注目してください。非同期的に実行されるように関数を書くということは、データが返されるなどのアクションが完了するのを待ってから続行するということです。 以下は async についての簡単なビデオです: C02Signal API に問い合わせを行うための新しい関数を作成します: ```javascript import axios from '/node_modules/axios'; async function displayCarbonUsage(apiKey, region) { try { await axiosget('https://apico2signalcom/v1/latest', { params: { countryCode: region, }, headers: { 'auth-token': apiKey, }, })then((response) => { let CO2 = Mathfloor(responsedatadatacarbonIntensity); //calculateColor(CO2); loadingstyledisplay = 'none'; formstyledisplay = 'none'; myregiontextContent = region; usagetextContent = Mathround(responsedata",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 521,
    "chunk_index": 66,
    "total_chunks": 76
  },
  {
    "id": "518197e7895889484ba23bba85e33313",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "Programming Interfaces) は、Web 開発者のツールボックスの重要な要素です。API は、プログラムが相互作用し、相互にインターフェースするための標準的な方法を提供します。例えば、データベースへの問い合わせが必要な Web サイトを構築している場合、誰かが API を作成しているかもしれません。API には多くの種類がありますが、最も人気のあるものの一つが REST API です。 ✅ 'REST' とは 'Representational State Transfer' の略で、様々な設定の URL を使ってデータを取得するのが特徴です。開発者が利用できる様々なタイプの API について少し調べてみてください。どのような形式に興味がありますかこの関数には注意すべき重要な点があります。まず、async キーワードに注目してください。非同期的に実行されるように関数を書くということは、データが返されるなどのアクションが完了するのを待ってから続行するということです。 以下は async についての簡単なビデオです: C02Signal API に問い合わせを行うための新しい関数を作成します: ```javascript import axios from '/node_modules/axios'; async function displayCarbonUsage(apiKey, region) { try { await axiosget('https://apico2signalcom/v1/latest', { params: { countryCode: region, }, headers: { 'auth-token': apiKey, }, })then((response) => { let CO2 = Mathfloor(responsedatadatacarbonIntensity); //calculateColor(CO2); loadingstyledisplay = 'none'; formstyledisplay = 'none'; myregiontextContent = region; usagetextContent = Mathround(responsedatadata",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 523,
    "chunk_index": 67,
    "total_chunks": 76
  },
  {
    "id": "653b0f2e94239cb16157b2dd91faf15e",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "Programming Interfaces) は、Web 開発者のツールボックスの重要な要素です。API は、プログラムが相互作用し、相互にインターフェースするための標準的な方法を提供します。例えば、データベースへの問い合わせが必要な Web サイトを構築している場合、誰かが API を作成しているかもしれません。API には多くの種類がありますが、最も人気のあるものの一つが REST API です。 ✅ 'REST' とは 'Representational State Transfer' の略で、様々な設定の URL を使ってデータを取得するのが特徴です。開発者が利用できる様々なタイプの API について少し調べてみてください。どのような形式に興味がありますかこの関数には注意すべき重要な点があります。まず、async キーワードに注目してください。非同期的に実行されるように関数を書くということは、データが返されるなどのアクションが完了するのを待ってから続行するということです。 以下は async についての簡単なビデオです: C02Signal API に問い合わせを行うための新しい関数を作成します: ```javascript import axios from '/node_modules/axios'; async function displayCarbonUsage(apiKey, region) { try { await axiosget('https://apico2signalcom/v1/latest', { params: { countryCode: region, }, headers: { 'auth-token': apiKey, }, })then((response) => { let CO2 = Mathfloor(responsedatadatacarbonIntensity); //calculateColor(CO2); loadingstyledisplay = 'none'; formstyledisplay = 'none'; myregiontextContent = region; usagetextContent = Mathround(responsedatadatacarbonIntensity) + ' grams (grams C02 emitted per kilowatt hour)';\nfossilfuel",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 543,
    "chunk_index": 68,
    "total_chunks": 76
  },
  {
    "id": "3b81d3727c83c68ccef3a62dd1aba0a5",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "REST API です。 ✅ 'REST' とは 'Representational State Transfer' の略で、様々な設定の URL を使ってデータを取得するのが特徴です。開発者が利用できる様々なタイプの API について少し調べてみてください。どのような形式に興味がありますかこの関数には注意すべき重要な点があります。まず、async キーワードに注目してください。非同期的に実行されるように関数を書くということは、データが返されるなどのアクションが完了するのを待ってから続行するということです。 以下は async についての簡単なビデオです: C02Signal API に問い合わせを行うための新しい関数を作成します: ```javascript import axios from '/node_modules/axios'; async function displayCarbonUsage(apiKey, region) { try { await axiosget('https://apico2signalcom/v1/latest', { params: { countryCode: region, }, headers: { 'auth-token': apiKey, }, })then((response) => { let CO2 = Mathfloor(responsedatadatacarbonIntensity); //calculateColor(CO2); loadingstyledisplay = 'none'; formstyledisplay = 'none'; myregiontextContent = region; usagetextContent = Mathround(responsedatadatacarbonIntensity) + ' grams (grams C02 emitted per kilowatt hour)'; fossilfueltextContent =\nresponse data data fossilFuelPercentage toFixed(2) +\n'% (percentage of fossil fuels used to generate electricity)';\nresults style display = 'block';\n});\n} catch (error) {\nconsole log(error);\nloading style display = 'none';\nresults style display = 'none';\nerrors textContent = 'Sorry, we have no data for the region you have requested ';\n}\n}\n```\nこれは大きな機能です。何が起こっているのでしょうか",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 69,
    "total_chunks": 76
  },
  {
    "id": "e38a6a3f94451a4c837dc81205663294",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "formstyledisplay = 'none'; myregiontextContent = region; usagetextContent = Mathround(responsedatadatacarbonIntensity) + ' grams (grams C02 emitted per kilowatt hour)'; fossilfueltextContent = response data data fossilFuelPercentage toFixed(2) + '% (percentage of fossil fuels used to generate electricity)'; results style display = 'block'; }); } catch (error) { console log(error); loading style display = 'none'; results style display = 'none'; errors textContent = 'Sorry, we have no data for the region you have requested '; } } ``` これは大きな機能です。何が起こっているのでしょうかベストプラクティスに従って、この関数を非同期的に動作させるために async キーワードを使用します。API がデータを返すときにプロミスを返すので、この関数には try/catch ブロックが含まれています。API が応答する速度を制御できないので (全く応答しないかもしれません",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 271,
    "chunk_index": 70,
    "total_chunks": 76
  },
  {
    "id": "3f9dedc221b204cdf6c1700bd7a70075",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "= Mathround(responsedatadatacarbonIntensity) + ' grams (grams C02 emitted per kilowatt hour)'; fossilfueltextContent = response data data fossilFuelPercentage toFixed(2) + '% (percentage of fossil fuels used to generate electricity)'; results style display = 'block'; }); } catch (error) { console log(error); loading style display = 'none'; results style display = 'none'; errors textContent = 'Sorry, we have no data for the region you have requested '; } } ``` これは大きな機能です。何が起こっているのでしょうかベストプラクティスに従って、この関数を非同期的に動作させるために async キーワードを使用します。API がデータを返すときにプロミスを返すので、この関数には try/catch ブロックが含まれています。API が応答する速度を制御できないので (全く応答しないかもしれません)、非同期的に呼び出すことでこの不確実性を処理する必要があります\nco2signal API に問い合わせをして、API キーを使用してリージョンのデータを取得しています。そのキーを使用するには、ヘッダのパラメータで認証の種類を使用しなければなりません\nAPI が応答したら、その応答データの様々な要素を、このデータを表示するために設定した画面の部分に割り当てます\nエラーがあったり、結果が出なかったりすると、エラーメッセージが表示されます\n✅ 非同期プログラミングパターンを使用することも、ツールボックスの中で非常に便利なツールです。このタイプのコードを設定するための様々な方法についてお読みください。\nおめでとうございます",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 538,
    "chunk_index": 71,
    "total_chunks": 76
  },
  {
    "id": "3db16fc70b42168ec2281a0ed0eb1cbc",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "hour)'; fossilfueltextContent = response data data fossilFuelPercentage toFixed(2) + '% (percentage of fossil fuels used to generate electricity)'; results style display = 'block'; }); } catch (error) { console log(error); loading style display = 'none'; results style display = 'none'; errors textContent = 'Sorry, we have no data for the region you have requested '; } } ``` これは大きな機能です。何が起こっているのでしょうかベストプラクティスに従って、この関数を非同期的に動作させるために async キーワードを使用します。API がデータを返すときにプロミスを返すので、この関数には try/catch ブロックが含まれています。API が応答する速度を制御できないので (全く応答しないかもしれません)、非同期的に呼び出すことでこの不確実性を処理する必要があります co2signal API に問い合わせをして、API キーを使用してリージョンのデータを取得しています。そのキーを使用するには、ヘッダのパラメータで認証の種類を使用しなければなりません API が応答したら、その応答データの様々な要素を、このデータを表示するために設定した画面の部分に割り当てます エラーがあったり、結果が出なかったりすると、エラーメッセージが表示されます ✅ 非同期プログラミングパターンを使用することも、ツールボックスの中で非常に便利なツールです。このタイプのコードを設定するための様々な方法についてお読みください。 おめでとうございます拡張機能をビルド (npm run build) して、拡張機能ペインで更新すると、拡張機能が動作するようになりました",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 563,
    "chunk_index": 72,
    "total_chunks": 76
  },
  {
    "id": "ab7c609bc0714f85f9f4e0bde21cb686",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "data data fossilFuelPercentage toFixed(2) + '% (percentage of fossil fuels used to generate electricity)'; results style display = 'block'; }); } catch (error) { console log(error); loading style display = 'none'; results style display = 'none'; errors textContent = 'Sorry, we have no data for the region you have requested '; } } ``` これは大きな機能です。何が起こっているのでしょうかベストプラクティスに従って、この関数を非同期的に動作させるために async キーワードを使用します。API がデータを返すときにプロミスを返すので、この関数には try/catch ブロックが含まれています。API が応答する速度を制御できないので (全く応答しないかもしれません)、非同期的に呼び出すことでこの不確実性を処理する必要があります co2signal API に問い合わせをして、API キーを使用してリージョンのデータを取得しています。そのキーを使用するには、ヘッダのパラメータで認証の種類を使用しなければなりません API が応答したら、その応答データの様々な要素を、このデータを表示するために設定した画面の部分に割り当てます エラーがあったり、結果が出なかったりすると、エラーメッセージが表示されます ✅ 非同期プログラミングパターンを使用することも、ツールボックスの中で非常に便利なツールです。このタイプのコードを設定するための様々な方法についてお読みください。 おめでとうございます拡張機能をビルド (npm run build) して、拡張機能ペインで更新すると、拡張機能が動作するようになりました動作していないのはアイコンだけで、次のレッスンで修正します。\n🚀 チャレンジ\nこれらのレッスンでは、これまでにいくつかの種類の API について説明してきました。Web API を選択して、その API が提供しているものを詳しく調べてみましょう。例えば、HTML ドラッグ＆ドロップ API のようなブラウザ内で利用できる API を見てみましょう。あなたの意見では、何が素晴らしい API を作るのでしょうか",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 736,
    "chunk_index": 73,
    "total_chunks": 76
  },
  {
    "id": "9669f7c896c15b10733d7b0d421926c3",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "display = 'block'; }); } catch (error) { console log(error); loading style display = 'none'; results style display = 'none'; errors textContent = 'Sorry, we have no data for the region you have requested '; } } ``` これは大きな機能です。何が起こっているのでしょうかベストプラクティスに従って、この関数を非同期的に動作させるために async キーワードを使用します。API がデータを返すときにプロミスを返すので、この関数には try/catch ブロックが含まれています。API が応答する速度を制御できないので (全く応答しないかもしれません)、非同期的に呼び出すことでこの不確実性を処理する必要があります co2signal API に問い合わせをして、API キーを使用してリージョンのデータを取得しています。そのキーを使用するには、ヘッダのパラメータで認証の種類を使用しなければなりません API が応答したら、その応答データの様々な要素を、このデータを表示するために設定した画面の部分に割り当てます エラーがあったり、結果が出なかったりすると、エラーメッセージが表示されます ✅ 非同期プログラミングパターンを使用することも、ツールボックスの中で非常に便利なツールです。このタイプのコードを設定するための様々な方法についてお読みください。 おめでとうございます拡張機能をビルド (npm run build) して、拡張機能ペインで更新すると、拡張機能が動作するようになりました動作していないのはアイコンだけで、次のレッスンで修正します。 🚀 チャレンジ これらのレッスンでは、これまでにいくつかの種類の API について説明してきました。Web API を選択して、その API が提供しているものを詳しく調べてみましょう。例えば、HTML ドラッグ＆ドロップ API のようなブラウザ内で利用できる API を見てみましょう。あなたの意見では、何が素晴らしい API を作るのでしょうかレッスン後の小テスト\nレッスン後の小テスト\n復習と自己学習\nこのレッスンではローカルストレージと API について学びましたが、どちらもプロの Web 開発者にとって非常に有用なものです。この2つがどのように連携しているか考えてみましたか",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 821,
    "chunk_index": 74,
    "total_chunks": 76
  },
  {
    "id": "61637a035c3e6d71eda1c39a3f46b37f",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 2: API の呼び出し、ローカルストレージの使用",
    "content": "{ console log(error); loading style display = 'none'; results style display = 'none'; errors textContent = 'Sorry, we have no data for the region you have requested '; } } ``` これは大きな機能です。何が起こっているのでしょうかベストプラクティスに従って、この関数を非同期的に動作させるために async キーワードを使用します。API がデータを返すときにプロミスを返すので、この関数には try/catch ブロックが含まれています。API が応答する速度を制御できないので (全く応答しないかもしれません)、非同期的に呼び出すことでこの不確実性を処理する必要があります co2signal API に問い合わせをして、API キーを使用してリージョンのデータを取得しています。そのキーを使用するには、ヘッダのパラメータで認証の種類を使用しなければなりません API が応答したら、その応答データの様々な要素を、このデータを表示するために設定した画面の部分に割り当てます エラーがあったり、結果が出なかったりすると、エラーメッセージが表示されます ✅ 非同期プログラミングパターンを使用することも、ツールボックスの中で非常に便利なツールです。このタイプのコードを設定するための様々な方法についてお読みください。 おめでとうございます拡張機能をビルド (npm run build) して、拡張機能ペインで更新すると、拡張機能が動作するようになりました動作していないのはアイコンだけで、次のレッスンで修正します。 🚀 チャレンジ これらのレッスンでは、これまでにいくつかの種類の API について説明してきました。Web API を選択して、その API が提供しているものを詳しく調べてみましょう。例えば、HTML ドラッグ＆ドロップ API のようなブラウザ内で利用できる API を見てみましょう。あなたの意見では、何が素晴らしい API を作るのでしょうかレッスン後の小テスト レッスン後の小テスト 復習と自己学習 このレッスンではローカルストレージと API について学びましたが、どちらもプロの Web 開発者にとって非常に有用なものです。この2つがどのように連携しているか考えてみましたかAPI で使用するアイテムを保存する Web サイトをどのように構築するか考えてみてください。\n課題\nAPI を採用する",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14960,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 856,
    "chunk_index": 75,
    "total_chunks": 76
  },
  {
    "id": "00081474f5f67edec2829716fddeea9c",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\assignment.es.md",
    "source_type": "git_repo",
    "title": "Cambia el estilo de tu extensión",
    "content": "Cambia el estilo de tu extensión\nInstrucciones\nEl código base para esta extensión viene completo con estilos, pero no es necesario que los uses; haga suya su extensión al cambiarle el estilo editando su archivo css.\nRúbrica\n| Criterios | Ejemplar | Adecuado | Necesita mejorar |\n| -------- | -------------------------------------------- | --------------------- | ----------------- |\n| | El código se envía con nuevos estilos funcionales | El estilo está incompleto | Los estilos tienen errores |",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 525,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\assignment.es.md",
      "source_type": "git_repo"
    },
    "token_count": 118,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "67859f27fad7919354c07d1c31b17a45",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\assignment.fr.md",
    "source_type": "git_repo",
    "title": "Restylez votre extension",
    "content": "Restylez votre extension\nInstructions\nLa base de code de cette extension est fournie avec des styles, mais vous n'êtes pas obligé de les utiliser ; personnalisez votre extension en la restylant en éditant son fichier css.\nRubrique\n| Critères | Exemplaire                                    | Adéquat              | Besoin d'amélioration |\n| -------- | -------------------------------------------- | --------------------- | ----------------- |\n|          | Le code est soumis avec de nouveaux styles fonctionnels | Le style est incomplet | Les styles sont bogués  |",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 593,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\assignment.fr.md",
      "source_type": "git_repo"
    },
    "token_count": 118,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4b77724746a809732adf4beca12b1197",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\assignment.hi.md",
    "source_type": "git_repo",
    "title": "अपने एक्सटेंशन को पुनर्स्थापित करें",
    "content": "अपने एक्सटेंशन को पुनर्स्थापित करें\nअनुदेश\nइस एक्सटेंशन का कोडबेस शैलियों के साथ आता है, लेकिन आपको उनका उपयोग नहीं करना है; इसकी css फाइल को एडिट करके इसे अपने एक्सटेंशन को अपना बना लें।\nसरनामा\n| मानदंड | उदाहरणात्मक                                           | पर्याप्त        | सुधार की जरूरत       |\n| ------ | ----------------------------------------------------- | --------------- | -------------------- |\n|        | कोड नई कार्यात्मक शैलियों के साथ प्रस्तुत किया गया है | स्टाइल अधूरा है | स्टाइल्स में गलती है |",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1072,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\assignment.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 355,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9c95313062c6ed4e08b5b1d7a0a69519",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\assignment.it.md",
    "source_type": "git_repo",
    "title": "Restyling dell'estensione",
    "content": "Restyling dell'estensione\nIstruzioni\nIl base di odice per questa estensione è completa di stili, ma non è necessario utilizzarli; personalizzare la propria estensione modificandone il file css.\nRubrica\n| Criteri | Ottimo | Adeguato | Necessita miglioramento |\n| -------- | -------------------------------------------- | --------------------- | ----------------- |\n|          | Il codice viene presentato con nuovi stili funzionali | Lo stile è incompleto | Gli stili sono difettosi |",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 508,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\assignment.it.md",
      "source_type": "git_repo"
    },
    "token_count": 122,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3288574d7db5c56bc70f4bb1a9f156c7",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage",
    "content": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage\n課前測驗\n課前測驗\n大綱\n在這堂課中，藉由傳遞你的擴充功能表單並顯示結果來呼叫 API。此外，你會了解如何儲存資料到瀏覽器的 Local Storage 中給未來使用。\n✅ 請參考下列程式碼段，加入程式碼到檔案適當的位置\n設定控制擴充功能的元素：\n現在你有已建好的 HTML 表單與結果區 <div>。接下來，你需要在 /src/index js 做一些處理，一點一點地構築出你的擴充功能。參考前一堂課程來設置你的專案與了解建制過程。\n處理 index js 檔案，建立一些 const 變數來儲存不同用途的數值：\n```JavaScript\n// 表單區域\nconst form = document querySelector(' form-data');\nconst region = document querySelector(' region-name');\nconst apiKey = document querySelector(' api-key');\n// 結果區域\nconst errors = document querySelector(' errors');\nconst loading = document querySelector(' loading');\nconst results = document querySelector(' result-container');\nconst usage = document querySelector(' carbon-usage');\nconst fossilfuel = document querySelector(' fossil-fuel');\nconst myregion = document querySelector(' my-region');\nconst clearBtn = document querySelector('",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10752,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 436,
    "chunk_index": 0,
    "total_chunks": 39
  },
  {
    "id": "a9abd604f70b8cdecdbcb5162ae3e73e",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage",
    "content": "HTML 表單與結果區 <div>。接下來，你需要在 /src/index js 做一些處理，一點一點地構築出你的擴充功能。參考前一堂課程來設置你的專案與了解建制過程。 處理 index js 檔案，建立一些 const 變數來儲存不同用途的數值： ```JavaScript // 表單區域 const form = document querySelector(' form-data'); const region = document querySelector(' region-name'); const apiKey = document querySelector(' api-key'); // 結果區域 const errors = document querySelector(' errors'); const loading = document querySelector(' loading'); const results = document querySelector(' result-container'); const usage = document querySelector(' carbon-usage'); const fossilfuel = document querySelector(' fossil-fuel'); const myregion = document querySelector(' my-region'); const clearBtn = document querySelector('clear-btn');\n```\n這些區域會被 CSS class 給參考，它們在前一堂課中已經被你設定好了。\n新增監聽者\n接下來，新增提交與重置表單的事件監聽者與按鈕，讓使用者能提交表單或是點擊重置鈕時，事件會發生。新增初始化呼叫處理到應用中，在檔案的最下方新增：\nJavaScript\nform addEventListener('submit', (e) => handleSubmit(e));\nclearBtn",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10752,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 403,
    "chunk_index": 1,
    "total_chunks": 39
  },
  {
    "id": "e85240c58a041ad71db5a30d9994d6cd",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage",
    "content": "表單區域 const form = document querySelector(' form-data'); const region = document querySelector(' region-name'); const apiKey = document querySelector(' api-key'); // 結果區域 const errors = document querySelector(' errors'); const loading = document querySelector(' loading'); const results = document querySelector(' result-container'); const usage = document querySelector(' carbon-usage'); const fossilfuel = document querySelector(' fossil-fuel'); const myregion = document querySelector(' my-region'); const clearBtn = document querySelector('clear-btn'); ``` 這些區域會被 CSS class 給參考，它們在前一堂課中已經被你設定好了。 新增監聽者 接下來，新增提交與重置表單的事件監聽者與按鈕，讓使用者能提交表單或是點擊重置鈕時，事件會發生。新增初始化呼叫處理到應用中，在檔案的最下方新增： JavaScript form addEventListener('submit', (e) => handleSubmit(e)); clearBtnaddEventListener('click', (e) => reset(e));\ninit();\n✅ 注意提交事件與點擊事件的寫法，事件是如何被傳入到 handleSubmit 或是 reset 函式中的。你能在不改變功能的情況下，改寫成較長的格式嗎？你比較喜歡哪一種寫法？\n建立 init() 函式與 reset() 函式：\n現在你需要建立函式 init()，處理應用程式的初始化部分：\n```JavaScript\nfunction init() {\n//如果任何東西存在 localStorage 中，取出來\nconst storedApiKey = localStorage getItem('apiKey');\nconst storedRegion = localStorage",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10752,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 452,
    "chunk_index": 2,
    "total_chunks": 39
  },
  {
    "id": "d7d47c68b4d9a2dcb7d78945579a9a67",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage",
    "content": "const results = document querySelector(' result-container'); const usage = document querySelector(' carbon-usage'); const fossilfuel = document querySelector(' fossil-fuel'); const myregion = document querySelector(' my-region'); const clearBtn = document querySelector('clear-btn'); ``` 這些區域會被 CSS class 給參考，它們在前一堂課中已經被你設定好了。 新增監聽者 接下來，新增提交與重置表單的事件監聽者與按鈕，讓使用者能提交表單或是點擊重置鈕時，事件會發生。新增初始化呼叫處理到應用中，在檔案的最下方新增： JavaScript form addEventListener('submit', (e) => handleSubmit(e)); clearBtnaddEventListener('click', (e) => reset(e)); init(); ✅ 注意提交事件與點擊事件的寫法，事件是如何被傳入到 handleSubmit 或是 reset 函式中的。你能在不改變功能的情況下，改寫成較長的格式嗎？你比較喜歡哪一種寫法？ 建立 init() 函式與 reset() 函式： 現在你需要建立函式 init()，處理應用程式的初始化部分： ```JavaScript function init() { //如果任何東西存在 localStorage 中，取出來 const storedApiKey = localStorage getItem('apiKey'); const storedRegion = localStoragegetItem('regionName');\n//設定 icon 為通用綠色\n//todo\nif (storedApiKey === null || storedRegion === null) {\n//如果沒有 keys，顯示表單\nform style display = 'block';\nresults style display = 'none';\nloading style display = 'none';\nclearBtn style display = 'none';\nerrors",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10752,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 3,
    "total_chunks": 39
  },
  {
    "id": "4f41194ec35e8cb9a2f9e6b518c9ee49",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage",
    "content": "JavaScript form addEventListener('submit', (e) => handleSubmit(e)); clearBtnaddEventListener('click', (e) => reset(e)); init(); ✅ 注意提交事件與點擊事件的寫法，事件是如何被傳入到 handleSubmit 或是 reset 函式中的。你能在不改變功能的情況下，改寫成較長的格式嗎？你比較喜歡哪一種寫法？ 建立 init() 函式與 reset() 函式： 現在你需要建立函式 init()，處理應用程式的初始化部分： ```JavaScript function init() { //如果任何東西存在 localStorage 中，取出來 const storedApiKey = localStorage getItem('apiKey'); const storedRegion = localStoragegetItem('regionName'); //設定 icon 為通用綠色 //todo if (storedApiKey === null || storedRegion === null) { //如果沒有 keys，顯示表單 form style display = 'block'; results style display = 'none'; loading style display = 'none'; clearBtn style display = 'none'; errorstextContent = '';\n} else {\n//localStorage 有 saved keys/regions，顯示結果\ndisplayCarbonUsage(storedApiKey, storedRegion);\nresults style display = 'none';\nform style display = 'none';\nclearBtn style display = 'block';\n}\n};\nfunction reset(e) {\ne preventDefault();\n//只清除 local storage 國家區域代碼\nlocalStorage",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10752,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 357,
    "chunk_index": 4,
    "total_chunks": 39
  },
  {
    "id": "a5681e9576c1f1f38a112cb75f93d9af",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage",
    "content": "= localStoragegetItem('regionName'); //設定 icon 為通用綠色 //todo if (storedApiKey === null || storedRegion === null) { //如果沒有 keys，顯示表單 form style display = 'block'; results style display = 'none'; loading style display = 'none'; clearBtn style display = 'none'; errorstextContent = ''; } else { //localStorage 有 saved keys/regions，顯示結果 displayCarbonUsage(storedApiKey, storedRegion); results style display = 'none'; form style display = 'none'; clearBtn style display = 'block'; } }; function reset(e) { e preventDefault(); //只清除 local storage 國家區域代碼 localStorageremoveItem('regionName');\ninit();\n}\n```\n在函式中，有一些有趣的邏輯。閱讀它們，你看出發生什麼事嗎？\n兩個 const 被設定為檢查用戶是否有儲存 APIKey 與國家區域代碼在 local storage 中。\n若兩者皆為 null，將造型設為 'block' 來顯示表單\n隱藏 results、loading 與 clearBtn，設定 error 文字為空字串\n若存在 key 與代碼，開始新的流程：\n呼叫 API 取得碳排放資訊\n隱藏結果區域\n隱藏表單\n顯示重置按鈕\n在下一步之前，你可以學習一些瀏覽器的重要成員：LocalStorage。 LocalStorage 是瀏覽器儲存字串的有效方法，以 key-value 配對兩兩一組。這種儲存型態可以被 JavaScript 管理並控制瀏覽器的資料。LocalStorage 沒有期限，而另一款網頁儲存 SessionStorage 會在瀏覽器關閉時清除內容。不同的儲存方式有各自的優缺點。\n注意 ── 你的瀏覽器擴充套件有自己的 local storage。主瀏覽器視窗是不同的個體，兩者會做各自的行為。\n你設定 APIKey 紀錄字串數值。你可以在 Edge 瀏覽器上「檢查」一個網頁 (右鍵瀏覽器來檢查)，在 Applications 標籤中觀察儲存區的使用情況。\n✅ 想想那些情況你不需要儲存資料到 LocalStorage 中。總體而言，將 API Keys 放在 LocalStorage 是個很糟糕的想法！你知道為什麼嗎？在我們的例子中，我們的應用程式是以教學為目的，並不會發布在應用程式商店中，所以我們選擇此中處理方式。\n你可以發現網頁 API 能處理 LocalStorage，使用 getItem()、setItem() 或是 removeItem()。它們廣泛地支援不同的瀏覽器。\n在建立函式 init() 中的函式 displayCarbonUsage() 之前，我們先建立表單提交初始化的功能。\n處理表單提交\n建立函式 handleSubmit，接收事件參數 (e)。終止網頁移轉的事件(在本例子中，我們終止瀏覽器刷新的處理)並呼叫新的函式 setUpUser，傳送參數 apiKey",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10752,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 1027,
    "chunk_index": 5,
    "total_chunks": 39
  },
  {
    "id": "fd2afb972e8ce4665241cb58e893c51b",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage",
    "content": "const 被設定為檢查用戶是否有儲存 APIKey 與國家區域代碼在 local storage 中。 若兩者皆為 null，將造型設為 'block' 來顯示表單 隱藏 results、loading 與 clearBtn，設定 error 文字為空字串 若存在 key 與代碼，開始新的流程： 呼叫 API 取得碳排放資訊 隱藏結果區域 隱藏表單 顯示重置按鈕 在下一步之前，你可以學習一些瀏覽器的重要成員：LocalStorage。 LocalStorage 是瀏覽器儲存字串的有效方法，以 key-value 配對兩兩一組。這種儲存型態可以被 JavaScript 管理並控制瀏覽器的資料。LocalStorage 沒有期限，而另一款網頁儲存 SessionStorage 會在瀏覽器關閉時清除內容。不同的儲存方式有各自的優缺點。 注意 ── 你的瀏覽器擴充套件有自己的 local storage。主瀏覽器視窗是不同的個體，兩者會做各自的行為。 你設定 APIKey 紀錄字串數值。你可以在 Edge 瀏覽器上「檢查」一個網頁 (右鍵瀏覽器來檢查)，在 Applications 標籤中觀察儲存區的使用情況。 ✅ 想想那些情況你不需要儲存資料到 LocalStorage 中。總體而言，將 API Keys 放在 LocalStorage 是個很糟糕的想法！你知道為什麼嗎？在我們的例子中，我們的應用程式是以教學為目的，並不會發布在應用程式商店中，所以我們選擇此中處理方式。 你可以發現網頁 API 能處理 LocalStorage，使用 getItem()、setItem() 或是 removeItem()。它們廣泛地支援不同的瀏覽器。 在建立函式 init() 中的函式 displayCarbonUsage() 之前，我們先建立表單提交初始化的功能。 處理表單提交 建立函式 handleSubmit，接收事件參數 (e)。終止網頁移轉的事件(在本例子中，我們終止瀏覽器刷新的處理)並呼叫新的函式 setUpUser，傳送參數 apiKeyvalue 與 region",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10752,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 808,
    "chunk_index": 6,
    "total_chunks": 39
  },
  {
    "id": "73f5771e098d617b2a65ee4171383d44",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage",
    "content": "APIKey 與國家區域代碼在 local storage 中。 若兩者皆為 null，將造型設為 'block' 來顯示表單 隱藏 results、loading 與 clearBtn，設定 error 文字為空字串 若存在 key 與代碼，開始新的流程： 呼叫 API 取得碳排放資訊 隱藏結果區域 隱藏表單 顯示重置按鈕 在下一步之前，你可以學習一些瀏覽器的重要成員：LocalStorage。 LocalStorage 是瀏覽器儲存字串的有效方法，以 key-value 配對兩兩一組。這種儲存型態可以被 JavaScript 管理並控制瀏覽器的資料。LocalStorage 沒有期限，而另一款網頁儲存 SessionStorage 會在瀏覽器關閉時清除內容。不同的儲存方式有各自的優缺點。 注意 ── 你的瀏覽器擴充套件有自己的 local storage。主瀏覽器視窗是不同的個體，兩者會做各自的行為。 你設定 APIKey 紀錄字串數值。你可以在 Edge 瀏覽器上「檢查」一個網頁 (右鍵瀏覽器來檢查)，在 Applications 標籤中觀察儲存區的使用情況。 ✅ 想想那些情況你不需要儲存資料到 LocalStorage 中。總體而言，將 API Keys 放在 LocalStorage 是個很糟糕的想法！你知道為什麼嗎？在我們的例子中，我們的應用程式是以教學為目的，並不會發布在應用程式商店中，所以我們選擇此中處理方式。 你可以發現網頁 API 能處理 LocalStorage，使用 getItem()、setItem() 或是 removeItem()。它們廣泛地支援不同的瀏覽器。 在建立函式 init() 中的函式 displayCarbonUsage() 之前，我們先建立表單提交初始化的功能。 處理表單提交 建立函式 handleSubmit，接收事件參數 (e)。終止網頁移轉的事件(在本例子中，我們終止瀏覽器刷新的處理)並呼叫新的函式 setUpUser，傳送參數 apiKeyvalue 與 regionvalue。藉由這個方式，你能將兩個初始表單的數值正確地移轉到適合的位置。\nJavaScript\nfunction handleSubmit(e) {\ne",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10752,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 836,
    "chunk_index": 7,
    "total_chunks": 39
  },
  {
    "id": "11f85ebbda9eb8412cc0baac188fcacc",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage",
    "content": "若兩者皆為 null，將造型設為 'block' 來顯示表單 隱藏 results、loading 與 clearBtn，設定 error 文字為空字串 若存在 key 與代碼，開始新的流程： 呼叫 API 取得碳排放資訊 隱藏結果區域 隱藏表單 顯示重置按鈕 在下一步之前，你可以學習一些瀏覽器的重要成員：LocalStorage。 LocalStorage 是瀏覽器儲存字串的有效方法，以 key-value 配對兩兩一組。這種儲存型態可以被 JavaScript 管理並控制瀏覽器的資料。LocalStorage 沒有期限，而另一款網頁儲存 SessionStorage 會在瀏覽器關閉時清除內容。不同的儲存方式有各自的優缺點。 注意 ── 你的瀏覽器擴充套件有自己的 local storage。主瀏覽器視窗是不同的個體，兩者會做各自的行為。 你設定 APIKey 紀錄字串數值。你可以在 Edge 瀏覽器上「檢查」一個網頁 (右鍵瀏覽器來檢查)，在 Applications 標籤中觀察儲存區的使用情況。 ✅ 想想那些情況你不需要儲存資料到 LocalStorage 中。總體而言，將 API Keys 放在 LocalStorage 是個很糟糕的想法！你知道為什麼嗎？在我們的例子中，我們的應用程式是以教學為目的，並不會發布在應用程式商店中，所以我們選擇此中處理方式。 你可以發現網頁 API 能處理 LocalStorage，使用 getItem()、setItem() 或是 removeItem()。它們廣泛地支援不同的瀏覽器。 在建立函式 init() 中的函式 displayCarbonUsage() 之前，我們先建立表單提交初始化的功能。 處理表單提交 建立函式 handleSubmit，接收事件參數 (e)。終止網頁移轉的事件(在本例子中，我們終止瀏覽器刷新的處理)並呼叫新的函式 setUpUser，傳送參數 apiKeyvalue 與 regionvalue。藉由這個方式，你能將兩個初始表單的數值正確地移轉到適合的位置。 JavaScript function handleSubmit(e) { epreventDefault();\nsetUpUser(apiKey",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10752,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 823,
    "chunk_index": 8,
    "total_chunks": 39
  },
  {
    "id": "c972ae91ca6d0a53917efa266b697911",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage",
    "content": "null，將造型設為 'block' 來顯示表單 隱藏 results、loading 與 clearBtn，設定 error 文字為空字串 若存在 key 與代碼，開始新的流程： 呼叫 API 取得碳排放資訊 隱藏結果區域 隱藏表單 顯示重置按鈕 在下一步之前，你可以學習一些瀏覽器的重要成員：LocalStorage。 LocalStorage 是瀏覽器儲存字串的有效方法，以 key-value 配對兩兩一組。這種儲存型態可以被 JavaScript 管理並控制瀏覽器的資料。LocalStorage 沒有期限，而另一款網頁儲存 SessionStorage 會在瀏覽器關閉時清除內容。不同的儲存方式有各自的優缺點。 注意 ── 你的瀏覽器擴充套件有自己的 local storage。主瀏覽器視窗是不同的個體，兩者會做各自的行為。 你設定 APIKey 紀錄字串數值。你可以在 Edge 瀏覽器上「檢查」一個網頁 (右鍵瀏覽器來檢查)，在 Applications 標籤中觀察儲存區的使用情況。 ✅ 想想那些情況你不需要儲存資料到 LocalStorage 中。總體而言，將 API Keys 放在 LocalStorage 是個很糟糕的想法！你知道為什麼嗎？在我們的例子中，我們的應用程式是以教學為目的，並不會發布在應用程式商店中，所以我們選擇此中處理方式。 你可以發現網頁 API 能處理 LocalStorage，使用 getItem()、setItem() 或是 removeItem()。它們廣泛地支援不同的瀏覽器。 在建立函式 init() 中的函式 displayCarbonUsage() 之前，我們先建立表單提交初始化的功能。 處理表單提交 建立函式 handleSubmit，接收事件參數 (e)。終止網頁移轉的事件(在本例子中，我們終止瀏覽器刷新的處理)並呼叫新的函式 setUpUser，傳送參數 apiKeyvalue 與 regionvalue。藉由這個方式，你能將兩個初始表單的數值正確地移轉到適合的位置。 JavaScript function handleSubmit(e) { epreventDefault(); setUpUser(apiKeyvalue, region",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10752,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 816,
    "chunk_index": 9,
    "total_chunks": 39
  },
  {
    "id": "68b2cbce63a4c06605a2b09b922b8eb6",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage",
    "content": "'block' 來顯示表單 隱藏 results、loading 與 clearBtn，設定 error 文字為空字串 若存在 key 與代碼，開始新的流程： 呼叫 API 取得碳排放資訊 隱藏結果區域 隱藏表單 顯示重置按鈕 在下一步之前，你可以學習一些瀏覽器的重要成員：LocalStorage。 LocalStorage 是瀏覽器儲存字串的有效方法，以 key-value 配對兩兩一組。這種儲存型態可以被 JavaScript 管理並控制瀏覽器的資料。LocalStorage 沒有期限，而另一款網頁儲存 SessionStorage 會在瀏覽器關閉時清除內容。不同的儲存方式有各自的優缺點。 注意 ── 你的瀏覽器擴充套件有自己的 local storage。主瀏覽器視窗是不同的個體，兩者會做各自的行為。 你設定 APIKey 紀錄字串數值。你可以在 Edge 瀏覽器上「檢查」一個網頁 (右鍵瀏覽器來檢查)，在 Applications 標籤中觀察儲存區的使用情況。 ✅ 想想那些情況你不需要儲存資料到 LocalStorage 中。總體而言，將 API Keys 放在 LocalStorage 是個很糟糕的想法！你知道為什麼嗎？在我們的例子中，我們的應用程式是以教學為目的，並不會發布在應用程式商店中，所以我們選擇此中處理方式。 你可以發現網頁 API 能處理 LocalStorage，使用 getItem()、setItem() 或是 removeItem()。它們廣泛地支援不同的瀏覽器。 在建立函式 init() 中的函式 displayCarbonUsage() 之前，我們先建立表單提交初始化的功能。 處理表單提交 建立函式 handleSubmit，接收事件參數 (e)。終止網頁移轉的事件(在本例子中，我們終止瀏覽器刷新的處理)並呼叫新的函式 setUpUser，傳送參數 apiKeyvalue 與 regionvalue。藉由這個方式，你能將兩個初始表單的數值正確地移轉到適合的位置。 JavaScript function handleSubmit(e) { epreventDefault(); setUpUser(apiKeyvalue, regionvalue);\n}\n✅ 刷新你的記憶 ── 上堂課中的 HTML 檔案開頭有兩個輸入區域，它們的 values 被存到 const 中，並且被定為 required，表示瀏覽器禁止使用者輸入空值。\n設定使用者\n來到函式 setUpUser，這裡你能找到 apiKey 與 regionName 被存到 Local Storage 中。新增函式：\nJavaScript\nfunction setUpUser(apiKey, regionName) {\nlocalStorage",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10752,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 951,
    "chunk_index": 10,
    "total_chunks": 39
  },
  {
    "id": "4517d774178f329e55b77f400a223ef2",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage",
    "content": "── 你的瀏覽器擴充套件有自己的 local storage。主瀏覽器視窗是不同的個體，兩者會做各自的行為。 你設定 APIKey 紀錄字串數值。你可以在 Edge 瀏覽器上「檢查」一個網頁 (右鍵瀏覽器來檢查)，在 Applications 標籤中觀察儲存區的使用情況。 ✅ 想想那些情況你不需要儲存資料到 LocalStorage 中。總體而言，將 API Keys 放在 LocalStorage 是個很糟糕的想法！你知道為什麼嗎？在我們的例子中，我們的應用程式是以教學為目的，並不會發布在應用程式商店中，所以我們選擇此中處理方式。 你可以發現網頁 API 能處理 LocalStorage，使用 getItem()、setItem() 或是 removeItem()。它們廣泛地支援不同的瀏覽器。 在建立函式 init() 中的函式 displayCarbonUsage() 之前，我們先建立表單提交初始化的功能。 處理表單提交 建立函式 handleSubmit，接收事件參數 (e)。終止網頁移轉的事件(在本例子中，我們終止瀏覽器刷新的處理)並呼叫新的函式 setUpUser，傳送參數 apiKeyvalue 與 regionvalue。藉由這個方式，你能將兩個初始表單的數值正確地移轉到適合的位置。 JavaScript function handleSubmit(e) { epreventDefault(); setUpUser(apiKeyvalue, regionvalue); } ✅ 刷新你的記憶 ── 上堂課中的 HTML 檔案開頭有兩個輸入區域，它們的 values 被存到 const 中，並且被定為 required，表示瀏覽器禁止使用者輸入空值。 設定使用者 來到函式 setUpUser，這裡你能找到 apiKey 與 regionName 被存到 Local Storage 中。新增函式： JavaScript function setUpUser(apiKey, regionName) { localStoragesetItem('apiKey', apiKey);\nlocalStorage",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10752,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 693,
    "chunk_index": 11,
    "total_chunks": 39
  },
  {
    "id": "81e3923de13742416c5eae4a4c04ad29",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage",
    "content": "local storage。主瀏覽器視窗是不同的個體，兩者會做各自的行為。 你設定 APIKey 紀錄字串數值。你可以在 Edge 瀏覽器上「檢查」一個網頁 (右鍵瀏覽器來檢查)，在 Applications 標籤中觀察儲存區的使用情況。 ✅ 想想那些情況你不需要儲存資料到 LocalStorage 中。總體而言，將 API Keys 放在 LocalStorage 是個很糟糕的想法！你知道為什麼嗎？在我們的例子中，我們的應用程式是以教學為目的，並不會發布在應用程式商店中，所以我們選擇此中處理方式。 你可以發現網頁 API 能處理 LocalStorage，使用 getItem()、setItem() 或是 removeItem()。它們廣泛地支援不同的瀏覽器。 在建立函式 init() 中的函式 displayCarbonUsage() 之前，我們先建立表單提交初始化的功能。 處理表單提交 建立函式 handleSubmit，接收事件參數 (e)。終止網頁移轉的事件(在本例子中，我們終止瀏覽器刷新的處理)並呼叫新的函式 setUpUser，傳送參數 apiKeyvalue 與 regionvalue。藉由這個方式，你能將兩個初始表單的數值正確地移轉到適合的位置。 JavaScript function handleSubmit(e) { epreventDefault(); setUpUser(apiKeyvalue, regionvalue); } ✅ 刷新你的記憶 ── 上堂課中的 HTML 檔案開頭有兩個輸入區域，它們的 values 被存到 const 中，並且被定為 required，表示瀏覽器禁止使用者輸入空值。 設定使用者 來到函式 setUpUser，這裡你能找到 apiKey 與 regionName 被存到 Local Storage 中。新增函式： JavaScript function setUpUser(apiKey, regionName) { localStoragesetItem('apiKey', apiKey); localStoragesetItem('regionName', regionName);\nloading",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10752,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 683,
    "chunk_index": 12,
    "total_chunks": 39
  },
  {
    "id": "13bd46f118ded9adadb2c7f3fc8581e4",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage",
    "content": "你設定 APIKey 紀錄字串數值。你可以在 Edge 瀏覽器上「檢查」一個網頁 (右鍵瀏覽器來檢查)，在 Applications 標籤中觀察儲存區的使用情況。 ✅ 想想那些情況你不需要儲存資料到 LocalStorage 中。總體而言，將 API Keys 放在 LocalStorage 是個很糟糕的想法！你知道為什麼嗎？在我們的例子中，我們的應用程式是以教學為目的，並不會發布在應用程式商店中，所以我們選擇此中處理方式。 你可以發現網頁 API 能處理 LocalStorage，使用 getItem()、setItem() 或是 removeItem()。它們廣泛地支援不同的瀏覽器。 在建立函式 init() 中的函式 displayCarbonUsage() 之前，我們先建立表單提交初始化的功能。 處理表單提交 建立函式 handleSubmit，接收事件參數 (e)。終止網頁移轉的事件(在本例子中，我們終止瀏覽器刷新的處理)並呼叫新的函式 setUpUser，傳送參數 apiKeyvalue 與 regionvalue。藉由這個方式，你能將兩個初始表單的數值正確地移轉到適合的位置。 JavaScript function handleSubmit(e) { epreventDefault(); setUpUser(apiKeyvalue, regionvalue); } ✅ 刷新你的記憶 ── 上堂課中的 HTML 檔案開頭有兩個輸入區域，它們的 values 被存到 const 中，並且被定為 required，表示瀏覽器禁止使用者輸入空值。 設定使用者 來到函式 setUpUser，這裡你能找到 apiKey 與 regionName 被存到 Local Storage 中。新增函式： JavaScript function setUpUser(apiKey, regionName) { localStoragesetItem('apiKey', apiKey); localStoragesetItem('regionName', regionName); loadingstyle",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10752,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 643,
    "chunk_index": 13,
    "total_chunks": 39
  },
  {
    "id": "aed8c139b91fbff09108dbbf0afc9b4e",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage",
    "content": "你設定 APIKey 紀錄字串數值。你可以在 Edge 瀏覽器上「檢查」一個網頁 (右鍵瀏覽器來檢查)，在 Applications 標籤中觀察儲存區的使用情況。 ✅ 想想那些情況你不需要儲存資料到 LocalStorage 中。總體而言，將 API Keys 放在 LocalStorage 是個很糟糕的想法！你知道為什麼嗎？在我們的例子中，我們的應用程式是以教學為目的，並不會發布在應用程式商店中，所以我們選擇此中處理方式。 你可以發現網頁 API 能處理 LocalStorage，使用 getItem()、setItem() 或是 removeItem()。它們廣泛地支援不同的瀏覽器。 在建立函式 init() 中的函式 displayCarbonUsage() 之前，我們先建立表單提交初始化的功能。 處理表單提交 建立函式 handleSubmit，接收事件參數 (e)。終止網頁移轉的事件(在本例子中，我們終止瀏覽器刷新的處理)並呼叫新的函式 setUpUser，傳送參數 apiKeyvalue 與 regionvalue。藉由這個方式，你能將兩個初始表單的數值正確地移轉到適合的位置。 JavaScript function handleSubmit(e) { epreventDefault(); setUpUser(apiKeyvalue, regionvalue); } ✅ 刷新你的記憶 ── 上堂課中的 HTML 檔案開頭有兩個輸入區域，它們的 values 被存到 const 中，並且被定為 required，表示瀏覽器禁止使用者輸入空值。 設定使用者 來到函式 setUpUser，這裡你能找到 apiKey 與 regionName 被存到 Local Storage 中。新增函式： JavaScript function setUpUser(apiKey, regionName) { localStoragesetItem('apiKey', apiKey); localStoragesetItem('regionName', regionName); loadingstyledisplay = 'block';\nerrors",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10752,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 649,
    "chunk_index": 14,
    "total_chunks": 39
  },
  {
    "id": "b874139afacd76eb8d2a222e84c86020",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage",
    "content": "Edge 瀏覽器上「檢查」一個網頁 (右鍵瀏覽器來檢查)，在 Applications 標籤中觀察儲存區的使用情況。 ✅ 想想那些情況你不需要儲存資料到 LocalStorage 中。總體而言，將 API Keys 放在 LocalStorage 是個很糟糕的想法！你知道為什麼嗎？在我們的例子中，我們的應用程式是以教學為目的，並不會發布在應用程式商店中，所以我們選擇此中處理方式。 你可以發現網頁 API 能處理 LocalStorage，使用 getItem()、setItem() 或是 removeItem()。它們廣泛地支援不同的瀏覽器。 在建立函式 init() 中的函式 displayCarbonUsage() 之前，我們先建立表單提交初始化的功能。 處理表單提交 建立函式 handleSubmit，接收事件參數 (e)。終止網頁移轉的事件(在本例子中，我們終止瀏覽器刷新的處理)並呼叫新的函式 setUpUser，傳送參數 apiKeyvalue 與 regionvalue。藉由這個方式，你能將兩個初始表單的數值正確地移轉到適合的位置。 JavaScript function handleSubmit(e) { epreventDefault(); setUpUser(apiKeyvalue, regionvalue); } ✅ 刷新你的記憶 ── 上堂課中的 HTML 檔案開頭有兩個輸入區域，它們的 values 被存到 const 中，並且被定為 required，表示瀏覽器禁止使用者輸入空值。 設定使用者 來到函式 setUpUser，這裡你能找到 apiKey 與 regionName 被存到 Local Storage 中。新增函式： JavaScript function setUpUser(apiKey, regionName) { localStoragesetItem('apiKey', apiKey); localStoragesetItem('regionName', regionName); loadingstyledisplay = 'block'; errorstextContent = '';\nclearBtn",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10752,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 637,
    "chunk_index": 15,
    "total_chunks": 39
  },
  {
    "id": "40afae5d6cbbcd4304426ec99b0fa709",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage",
    "content": "Applications 標籤中觀察儲存區的使用情況。 ✅ 想想那些情況你不需要儲存資料到 LocalStorage 中。總體而言，將 API Keys 放在 LocalStorage 是個很糟糕的想法！你知道為什麼嗎？在我們的例子中，我們的應用程式是以教學為目的，並不會發布在應用程式商店中，所以我們選擇此中處理方式。 你可以發現網頁 API 能處理 LocalStorage，使用 getItem()、setItem() 或是 removeItem()。它們廣泛地支援不同的瀏覽器。 在建立函式 init() 中的函式 displayCarbonUsage() 之前，我們先建立表單提交初始化的功能。 處理表單提交 建立函式 handleSubmit，接收事件參數 (e)。終止網頁移轉的事件(在本例子中，我們終止瀏覽器刷新的處理)並呼叫新的函式 setUpUser，傳送參數 apiKeyvalue 與 regionvalue。藉由這個方式，你能將兩個初始表單的數值正確地移轉到適合的位置。 JavaScript function handleSubmit(e) { epreventDefault(); setUpUser(apiKeyvalue, regionvalue); } ✅ 刷新你的記憶 ── 上堂課中的 HTML 檔案開頭有兩個輸入區域，它們的 values 被存到 const 中，並且被定為 required，表示瀏覽器禁止使用者輸入空值。 設定使用者 來到函式 setUpUser，這裡你能找到 apiKey 與 regionName 被存到 Local Storage 中。新增函式： JavaScript function setUpUser(apiKey, regionName) { localStoragesetItem('apiKey', apiKey); localStoragesetItem('regionName', regionName); loadingstyledisplay = 'block'; errorstextContent = ''; clearBtnstyle",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10752,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 597,
    "chunk_index": 16,
    "total_chunks": 39
  },
  {
    "id": "4a8df8bd5e43f03e301b9bca0eda61b0",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage",
    "content": "Applications 標籤中觀察儲存區的使用情況。 ✅ 想想那些情況你不需要儲存資料到 LocalStorage 中。總體而言，將 API Keys 放在 LocalStorage 是個很糟糕的想法！你知道為什麼嗎？在我們的例子中，我們的應用程式是以教學為目的，並不會發布在應用程式商店中，所以我們選擇此中處理方式。 你可以發現網頁 API 能處理 LocalStorage，使用 getItem()、setItem() 或是 removeItem()。它們廣泛地支援不同的瀏覽器。 在建立函式 init() 中的函式 displayCarbonUsage() 之前，我們先建立表單提交初始化的功能。 處理表單提交 建立函式 handleSubmit，接收事件參數 (e)。終止網頁移轉的事件(在本例子中，我們終止瀏覽器刷新的處理)並呼叫新的函式 setUpUser，傳送參數 apiKeyvalue 與 regionvalue。藉由這個方式，你能將兩個初始表單的數值正確地移轉到適合的位置。 JavaScript function handleSubmit(e) { epreventDefault(); setUpUser(apiKeyvalue, regionvalue); } ✅ 刷新你的記憶 ── 上堂課中的 HTML 檔案開頭有兩個輸入區域，它們的 values 被存到 const 中，並且被定為 required，表示瀏覽器禁止使用者輸入空值。 設定使用者 來到函式 setUpUser，這裡你能找到 apiKey 與 regionName 被存到 Local Storage 中。新增函式： JavaScript function setUpUser(apiKey, regionName) { localStoragesetItem('apiKey', apiKey); localStoragesetItem('regionName', regionName); loadingstyledisplay = 'block'; errorstextContent = ''; clearBtnstyledisplay = 'block';\n//建立初始化呼叫\ndisplayCarbonUsage(apiKey, regionName);\n}\n這個函式設定當 API 被呼叫時，顯示讀取訊息。到這裡，你即將建立這個擴充功能專案最重要的函式！\n顯示碳排放量\n最後，是時候查詢 API 了！\n在前往下一步前，我們先來討論何謂 API。API，Application Programming Interfaces，是網頁開發者工具箱內最重要的成員。它們提供程式標準的互動模式與溝通介面，舉例來說，如果你建立一個需要存取資料庫的網頁，資料庫方可能就有人建立了 API 供你使用。API 有各式各樣的種類，最普遍使用的為REST API。\n✅ 'REST' 全名為 'Representational State Transfer'，提供各式各樣 URL 形式來抓取資料。對網路開發者的 API 種類做一點研究，什麼形式的 API 最吸引你？\n這條函式中有一個重要到值得紀錄的事情。第一點為關鍵字 async。讓你的函式非同步地執行，在行為完成前做等待，譬如資料被回傳。\n這裡有一個簡短的影片介紹 async：\n點擊上方圖片以觀賞關於 async/await 的影片。\n建立新的函式來詢問 C02Signal 的 API：\n```JavaScript\nimport axios from '",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10752,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 1109,
    "chunk_index": 17,
    "total_chunks": 39
  },
  {
    "id": "c92c4e1262cadca6202376b683042b35",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage",
    "content": "required，表示瀏覽器禁止使用者輸入空值。 設定使用者 來到函式 setUpUser，這裡你能找到 apiKey 與 regionName 被存到 Local Storage 中。新增函式： JavaScript function setUpUser(apiKey, regionName) { localStoragesetItem('apiKey', apiKey); localStoragesetItem('regionName', regionName); loadingstyledisplay = 'block'; errorstextContent = ''; clearBtnstyledisplay = 'block'; //建立初始化呼叫 displayCarbonUsage(apiKey, regionName); } 這個函式設定當 API 被呼叫時，顯示讀取訊息。到這裡，你即將建立這個擴充功能專案最重要的函式！ 顯示碳排放量 最後，是時候查詢 API 了！ 在前往下一步前，我們先來討論何謂 API。API，Application Programming Interfaces，是網頁開發者工具箱內最重要的成員。它們提供程式標準的互動模式與溝通介面，舉例來說，如果你建立一個需要存取資料庫的網頁，資料庫方可能就有人建立了 API 供你使用。API 有各式各樣的種類，最普遍使用的為REST API。 ✅ 'REST' 全名為 'Representational State Transfer'，提供各式各樣 URL 形式來抓取資料。對網路開發者的 API 種類做一點研究，什麼形式的 API 最吸引你？ 這條函式中有一個重要到值得紀錄的事情。第一點為關鍵字 async。讓你的函式非同步地執行，在行為完成前做等待，譬如資料被回傳。 這裡有一個簡短的影片介紹 async： 點擊上方圖片以觀賞關於 async/await 的影片。 建立新的函式來詢問 C02Signal 的 API： ```JavaScript import axios from '/node_modules/axios';\nasync function displayCarbonUsage(apiKey, region) {\ntry {\nawait axios",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10752,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 649,
    "chunk_index": 18,
    "total_chunks": 39
  },
  {
    "id": "92ff9843bc52e82a0914c5a65c50dfa0",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage",
    "content": "Storage 中。新增函式： JavaScript function setUpUser(apiKey, regionName) { localStoragesetItem('apiKey', apiKey); localStoragesetItem('regionName', regionName); loadingstyledisplay = 'block'; errorstextContent = ''; clearBtnstyledisplay = 'block'; //建立初始化呼叫 displayCarbonUsage(apiKey, regionName); } 這個函式設定當 API 被呼叫時，顯示讀取訊息。到這裡，你即將建立這個擴充功能專案最重要的函式！ 顯示碳排放量 最後，是時候查詢 API 了！ 在前往下一步前，我們先來討論何謂 API。API，Application Programming Interfaces，是網頁開發者工具箱內最重要的成員。它們提供程式標準的互動模式與溝通介面，舉例來說，如果你建立一個需要存取資料庫的網頁，資料庫方可能就有人建立了 API 供你使用。API 有各式各樣的種類，最普遍使用的為REST API。 ✅ 'REST' 全名為 'Representational State Transfer'，提供各式各樣 URL 形式來抓取資料。對網路開發者的 API 種類做一點研究，什麼形式的 API 最吸引你？ 這條函式中有一個重要到值得紀錄的事情。第一點為關鍵字 async。讓你的函式非同步地執行，在行為完成前做等待，譬如資料被回傳。 這裡有一個簡短的影片介紹 async： 點擊上方圖片以觀賞關於 async/await 的影片。 建立新的函式來詢問 C02Signal 的 API： ```JavaScript import axios from '/node_modules/axios'; async function displayCarbonUsage(apiKey, region) { try { await axiosget('https://api",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10752,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 597,
    "chunk_index": 19,
    "total_chunks": 39
  },
  {
    "id": "bb0b71927cfd217316647c4f9a945628",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage",
    "content": "Storage 中。新增函式： JavaScript function setUpUser(apiKey, regionName) { localStoragesetItem('apiKey', apiKey); localStoragesetItem('regionName', regionName); loadingstyledisplay = 'block'; errorstextContent = ''; clearBtnstyledisplay = 'block'; //建立初始化呼叫 displayCarbonUsage(apiKey, regionName); } 這個函式設定當 API 被呼叫時，顯示讀取訊息。到這裡，你即將建立這個擴充功能專案最重要的函式！ 顯示碳排放量 最後，是時候查詢 API 了！ 在前往下一步前，我們先來討論何謂 API。API，Application Programming Interfaces，是網頁開發者工具箱內最重要的成員。它們提供程式標準的互動模式與溝通介面，舉例來說，如果你建立一個需要存取資料庫的網頁，資料庫方可能就有人建立了 API 供你使用。API 有各式各樣的種類，最普遍使用的為REST API。 ✅ 'REST' 全名為 'Representational State Transfer'，提供各式各樣 URL 形式來抓取資料。對網路開發者的 API 種類做一點研究，什麼形式的 API 最吸引你？ 這條函式中有一個重要到值得紀錄的事情。第一點為關鍵字 async。讓你的函式非同步地執行，在行為完成前做等待，譬如資料被回傳。 這裡有一個簡短的影片介紹 async： 點擊上方圖片以觀賞關於 async/await 的影片。 建立新的函式來詢問 C02Signal 的 API： ```JavaScript import axios from '/node_modules/axios'; async function displayCarbonUsage(apiKey, region) { try { await axiosget('https://apico2signal",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10752,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 600,
    "chunk_index": 20,
    "total_chunks": 39
  },
  {
    "id": "cf5ffb87802b4d16d5a29a840cc4d93a",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage",
    "content": "Storage 中。新增函式： JavaScript function setUpUser(apiKey, regionName) { localStoragesetItem('apiKey', apiKey); localStoragesetItem('regionName', regionName); loadingstyledisplay = 'block'; errorstextContent = ''; clearBtnstyledisplay = 'block'; //建立初始化呼叫 displayCarbonUsage(apiKey, regionName); } 這個函式設定當 API 被呼叫時，顯示讀取訊息。到這裡，你即將建立這個擴充功能專案最重要的函式！ 顯示碳排放量 最後，是時候查詢 API 了！ 在前往下一步前，我們先來討論何謂 API。API，Application Programming Interfaces，是網頁開發者工具箱內最重要的成員。它們提供程式標準的互動模式與溝通介面，舉例來說，如果你建立一個需要存取資料庫的網頁，資料庫方可能就有人建立了 API 供你使用。API 有各式各樣的種類，最普遍使用的為REST API。 ✅ 'REST' 全名為 'Representational State Transfer'，提供各式各樣 URL 形式來抓取資料。對網路開發者的 API 種類做一點研究，什麼形式的 API 最吸引你？ 這條函式中有一個重要到值得紀錄的事情。第一點為關鍵字 async。讓你的函式非同步地執行，在行為完成前做等待，譬如資料被回傳。 這裡有一個簡短的影片介紹 async： 點擊上方圖片以觀賞關於 async/await 的影片。 建立新的函式來詢問 C02Signal 的 API： ```JavaScript import axios from '/node_modules/axios'; async function displayCarbonUsage(apiKey, region) { try { await axiosget('https://apico2signalcom/v1/latest', {\nparams: {\ncountryCode: region,\n},\nheaders: {\n'auth-token': apiKey,\n},\n})",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10752,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 626,
    "chunk_index": 21,
    "total_chunks": 39
  },
  {
    "id": "c24efee772088a2d0d5e7422ebdebc0d",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage",
    "content": "= 'block'; errorstextContent = ''; clearBtnstyledisplay = 'block'; //建立初始化呼叫 displayCarbonUsage(apiKey, regionName); } 這個函式設定當 API 被呼叫時，顯示讀取訊息。到這裡，你即將建立這個擴充功能專案最重要的函式！ 顯示碳排放量 最後，是時候查詢 API 了！ 在前往下一步前，我們先來討論何謂 API。API，Application Programming Interfaces，是網頁開發者工具箱內最重要的成員。它們提供程式標準的互動模式與溝通介面，舉例來說，如果你建立一個需要存取資料庫的網頁，資料庫方可能就有人建立了 API 供你使用。API 有各式各樣的種類，最普遍使用的為REST API。 ✅ 'REST' 全名為 'Representational State Transfer'，提供各式各樣 URL 形式來抓取資料。對網路開發者的 API 種類做一點研究，什麼形式的 API 最吸引你？ 這條函式中有一個重要到值得紀錄的事情。第一點為關鍵字 async。讓你的函式非同步地執行，在行為完成前做等待，譬如資料被回傳。 這裡有一個簡短的影片介紹 async： 點擊上方圖片以觀賞關於 async/await 的影片。 建立新的函式來詢問 C02Signal 的 API： ```JavaScript import axios from '/node_modules/axios'; async function displayCarbonUsage(apiKey, region) { try { await axiosget('https://apico2signalcom/v1/latest', { params: { countryCode: region, }, headers: { 'auth-token': apiKey, }, })then((response) => {\nlet CO2 = Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10752,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 590,
    "chunk_index": 22,
    "total_chunks": 39
  },
  {
    "id": "ed99c498d6fa577463200dc7a2af2743",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage",
    "content": "= 'block'; //建立初始化呼叫 displayCarbonUsage(apiKey, regionName); } 這個函式設定當 API 被呼叫時，顯示讀取訊息。到這裡，你即將建立這個擴充功能專案最重要的函式！ 顯示碳排放量 最後，是時候查詢 API 了！ 在前往下一步前，我們先來討論何謂 API。API，Application Programming Interfaces，是網頁開發者工具箱內最重要的成員。它們提供程式標準的互動模式與溝通介面，舉例來說，如果你建立一個需要存取資料庫的網頁，資料庫方可能就有人建立了 API 供你使用。API 有各式各樣的種類，最普遍使用的為REST API。 ✅ 'REST' 全名為 'Representational State Transfer'，提供各式各樣 URL 形式來抓取資料。對網路開發者的 API 種類做一點研究，什麼形式的 API 最吸引你？ 這條函式中有一個重要到值得紀錄的事情。第一點為關鍵字 async。讓你的函式非同步地執行，在行為完成前做等待，譬如資料被回傳。 這裡有一個簡短的影片介紹 async： 點擊上方圖片以觀賞關於 async/await 的影片。 建立新的函式來詢問 C02Signal 的 API： ```JavaScript import axios from '/node_modules/axios'; async function displayCarbonUsage(apiKey, region) { try { await axiosget('https://apico2signalcom/v1/latest', { params: { countryCode: region, }, headers: { 'auth-token': apiKey, }, })then((response) => { let CO2 = Mathfloor(response",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10752,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 578,
    "chunk_index": 23,
    "total_chunks": 39
  },
  {
    "id": "163b8e083f125494ec24cca7b1005747",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage",
    "content": "= 'block'; //建立初始化呼叫 displayCarbonUsage(apiKey, regionName); } 這個函式設定當 API 被呼叫時，顯示讀取訊息。到這裡，你即將建立這個擴充功能專案最重要的函式！ 顯示碳排放量 最後，是時候查詢 API 了！ 在前往下一步前，我們先來討論何謂 API。API，Application Programming Interfaces，是網頁開發者工具箱內最重要的成員。它們提供程式標準的互動模式與溝通介面，舉例來說，如果你建立一個需要存取資料庫的網頁，資料庫方可能就有人建立了 API 供你使用。API 有各式各樣的種類，最普遍使用的為REST API。 ✅ 'REST' 全名為 'Representational State Transfer'，提供各式各樣 URL 形式來抓取資料。對網路開發者的 API 種類做一點研究，什麼形式的 API 最吸引你？ 這條函式中有一個重要到值得紀錄的事情。第一點為關鍵字 async。讓你的函式非同步地執行，在行為完成前做等待，譬如資料被回傳。 這裡有一個簡短的影片介紹 async： 點擊上方圖片以觀賞關於 async/await 的影片。 建立新的函式來詢問 C02Signal 的 API： ```JavaScript import axios from '/node_modules/axios'; async function displayCarbonUsage(apiKey, region) { try { await axiosget('https://apico2signalcom/v1/latest', { params: { countryCode: region, }, headers: { 'auth-token': apiKey, }, })then((response) => { let CO2 = Mathfloor(responsedata",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10752,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 580,
    "chunk_index": 24,
    "total_chunks": 39
  },
  {
    "id": "1c0bb0693acdbbe0a6ebfb8f983b4b5a",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage",
    "content": "= 'block'; //建立初始化呼叫 displayCarbonUsage(apiKey, regionName); } 這個函式設定當 API 被呼叫時，顯示讀取訊息。到這裡，你即將建立這個擴充功能專案最重要的函式！ 顯示碳排放量 最後，是時候查詢 API 了！ 在前往下一步前，我們先來討論何謂 API。API，Application Programming Interfaces，是網頁開發者工具箱內最重要的成員。它們提供程式標準的互動模式與溝通介面，舉例來說，如果你建立一個需要存取資料庫的網頁，資料庫方可能就有人建立了 API 供你使用。API 有各式各樣的種類，最普遍使用的為REST API。 ✅ 'REST' 全名為 'Representational State Transfer'，提供各式各樣 URL 形式來抓取資料。對網路開發者的 API 種類做一點研究，什麼形式的 API 最吸引你？ 這條函式中有一個重要到值得紀錄的事情。第一點為關鍵字 async。讓你的函式非同步地執行，在行為完成前做等待，譬如資料被回傳。 這裡有一個簡短的影片介紹 async： 點擊上方圖片以觀賞關於 async/await 的影片。 建立新的函式來詢問 C02Signal 的 API： ```JavaScript import axios from '/node_modules/axios'; async function displayCarbonUsage(apiKey, region) { try { await axiosget('https://apico2signalcom/v1/latest', { params: { countryCode: region, }, headers: { 'auth-token': apiKey, }, })then((response) => { let CO2 = Mathfloor(responsedatadata",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10752,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 582,
    "chunk_index": 25,
    "total_chunks": 39
  },
  {
    "id": "bee5e46accc532406e34910ceb3dfb1d",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage",
    "content": "= 'block'; //建立初始化呼叫 displayCarbonUsage(apiKey, regionName); } 這個函式設定當 API 被呼叫時，顯示讀取訊息。到這裡，你即將建立這個擴充功能專案最重要的函式！ 顯示碳排放量 最後，是時候查詢 API 了！ 在前往下一步前，我們先來討論何謂 API。API，Application Programming Interfaces，是網頁開發者工具箱內最重要的成員。它們提供程式標準的互動模式與溝通介面，舉例來說，如果你建立一個需要存取資料庫的網頁，資料庫方可能就有人建立了 API 供你使用。API 有各式各樣的種類，最普遍使用的為REST API。 ✅ 'REST' 全名為 'Representational State Transfer'，提供各式各樣 URL 形式來抓取資料。對網路開發者的 API 種類做一點研究，什麼形式的 API 最吸引你？ 這條函式中有一個重要到值得紀錄的事情。第一點為關鍵字 async。讓你的函式非同步地執行，在行為完成前做等待，譬如資料被回傳。 這裡有一個簡短的影片介紹 async： 點擊上方圖片以觀賞關於 async/await 的影片。 建立新的函式來詢問 C02Signal 的 API： ```JavaScript import axios from '/node_modules/axios'; async function displayCarbonUsage(apiKey, region) { try { await axiosget('https://apico2signalcom/v1/latest', { params: { countryCode: region, }, headers: { 'auth-token': apiKey, }, })then((response) => { let CO2 = Mathfloor(responsedatadatacarbonIntensity);\n//calculateColor(CO2);\nloading",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10752,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 593,
    "chunk_index": 26,
    "total_chunks": 39
  },
  {
    "id": "d84226bfe4c9848941cf04dc53a8b768",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage",
    "content": "//建立初始化呼叫 displayCarbonUsage(apiKey, regionName); } 這個函式設定當 API 被呼叫時，顯示讀取訊息。到這裡，你即將建立這個擴充功能專案最重要的函式！ 顯示碳排放量 最後，是時候查詢 API 了！ 在前往下一步前，我們先來討論何謂 API。API，Application Programming Interfaces，是網頁開發者工具箱內最重要的成員。它們提供程式標準的互動模式與溝通介面，舉例來說，如果你建立一個需要存取資料庫的網頁，資料庫方可能就有人建立了 API 供你使用。API 有各式各樣的種類，最普遍使用的為REST API。 ✅ 'REST' 全名為 'Representational State Transfer'，提供各式各樣 URL 形式來抓取資料。對網路開發者的 API 種類做一點研究，什麼形式的 API 最吸引你？ 這條函式中有一個重要到值得紀錄的事情。第一點為關鍵字 async。讓你的函式非同步地執行，在行為完成前做等待，譬如資料被回傳。 這裡有一個簡短的影片介紹 async： 點擊上方圖片以觀賞關於 async/await 的影片。 建立新的函式來詢問 C02Signal 的 API： ```JavaScript import axios from '/node_modules/axios'; async function displayCarbonUsage(apiKey, region) { try { await axiosget('https://apico2signalcom/v1/latest', { params: { countryCode: region, }, headers: { 'auth-token': apiKey, }, })then((response) => { let CO2 = Mathfloor(responsedatadatacarbonIntensity); //calculateColor(CO2); loadingstyle",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10752,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 590,
    "chunk_index": 27,
    "total_chunks": 39
  },
  {
    "id": "6ab1f9043ee6a74cb394d4ce36f03c56",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage",
    "content": "//建立初始化呼叫 displayCarbonUsage(apiKey, regionName); } 這個函式設定當 API 被呼叫時，顯示讀取訊息。到這裡，你即將建立這個擴充功能專案最重要的函式！ 顯示碳排放量 最後，是時候查詢 API 了！ 在前往下一步前，我們先來討論何謂 API。API，Application Programming Interfaces，是網頁開發者工具箱內最重要的成員。它們提供程式標準的互動模式與溝通介面，舉例來說，如果你建立一個需要存取資料庫的網頁，資料庫方可能就有人建立了 API 供你使用。API 有各式各樣的種類，最普遍使用的為REST API。 ✅ 'REST' 全名為 'Representational State Transfer'，提供各式各樣 URL 形式來抓取資料。對網路開發者的 API 種類做一點研究，什麼形式的 API 最吸引你？ 這條函式中有一個重要到值得紀錄的事情。第一點為關鍵字 async。讓你的函式非同步地執行，在行為完成前做等待，譬如資料被回傳。 這裡有一個簡短的影片介紹 async： 點擊上方圖片以觀賞關於 async/await 的影片。 建立新的函式來詢問 C02Signal 的 API： ```JavaScript import axios from '/node_modules/axios'; async function displayCarbonUsage(apiKey, region) { try { await axiosget('https://apico2signalcom/v1/latest', { params: { countryCode: region, }, headers: { 'auth-token': apiKey, }, })then((response) => { let CO2 = Mathfloor(responsedatadatacarbonIntensity); //calculateColor(CO2); loadingstyledisplay = 'none';\nform",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10752,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 596,
    "chunk_index": 28,
    "total_chunks": 39
  },
  {
    "id": "eb226755bbd310c7caefecf71b0279b9",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage",
    "content": "} 這個函式設定當 API 被呼叫時，顯示讀取訊息。到這裡，你即將建立這個擴充功能專案最重要的函式！ 顯示碳排放量 最後，是時候查詢 API 了！ 在前往下一步前，我們先來討論何謂 API。API，Application Programming Interfaces，是網頁開發者工具箱內最重要的成員。它們提供程式標準的互動模式與溝通介面，舉例來說，如果你建立一個需要存取資料庫的網頁，資料庫方可能就有人建立了 API 供你使用。API 有各式各樣的種類，最普遍使用的為REST API。 ✅ 'REST' 全名為 'Representational State Transfer'，提供各式各樣 URL 形式來抓取資料。對網路開發者的 API 種類做一點研究，什麼形式的 API 最吸引你？ 這條函式中有一個重要到值得紀錄的事情。第一點為關鍵字 async。讓你的函式非同步地執行，在行為完成前做等待，譬如資料被回傳。 這裡有一個簡短的影片介紹 async： 點擊上方圖片以觀賞關於 async/await 的影片。 建立新的函式來詢問 C02Signal 的 API： ```JavaScript import axios from '/node_modules/axios'; async function displayCarbonUsage(apiKey, region) { try { await axiosget('https://apico2signalcom/v1/latest', { params: { countryCode: region, }, headers: { 'auth-token': apiKey, }, })then((response) => { let CO2 = Mathfloor(responsedatadatacarbonIntensity); //calculateColor(CO2); loadingstyledisplay = 'none'; formstyle",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10752,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 580,
    "chunk_index": 29,
    "total_chunks": 39
  },
  {
    "id": "4285b7a298f2a41fbf7954950d0b9355",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage",
    "content": "} 這個函式設定當 API 被呼叫時，顯示讀取訊息。到這裡，你即將建立這個擴充功能專案最重要的函式！ 顯示碳排放量 最後，是時候查詢 API 了！ 在前往下一步前，我們先來討論何謂 API。API，Application Programming Interfaces，是網頁開發者工具箱內最重要的成員。它們提供程式標準的互動模式與溝通介面，舉例來說，如果你建立一個需要存取資料庫的網頁，資料庫方可能就有人建立了 API 供你使用。API 有各式各樣的種類，最普遍使用的為REST API。 ✅ 'REST' 全名為 'Representational State Transfer'，提供各式各樣 URL 形式來抓取資料。對網路開發者的 API 種類做一點研究，什麼形式的 API 最吸引你？ 這條函式中有一個重要到值得紀錄的事情。第一點為關鍵字 async。讓你的函式非同步地執行，在行為完成前做等待，譬如資料被回傳。 這裡有一個簡短的影片介紹 async： 點擊上方圖片以觀賞關於 async/await 的影片。 建立新的函式來詢問 C02Signal 的 API： ```JavaScript import axios from '/node_modules/axios'; async function displayCarbonUsage(apiKey, region) { try { await axiosget('https://apico2signalcom/v1/latest', { params: { countryCode: region, }, headers: { 'auth-token': apiKey, }, })then((response) => { let CO2 = Mathfloor(responsedatadatacarbonIntensity); //calculateColor(CO2); loadingstyledisplay = 'none'; formstyledisplay = 'none';\nmyregion",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10752,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 587,
    "chunk_index": 30,
    "total_chunks": 39
  },
  {
    "id": "12c00af7cc87a892b1f205d9c1e30c1c",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage",
    "content": "被呼叫時，顯示讀取訊息。到這裡，你即將建立這個擴充功能專案最重要的函式！ 顯示碳排放量 最後，是時候查詢 API 了！ 在前往下一步前，我們先來討論何謂 API。API，Application Programming Interfaces，是網頁開發者工具箱內最重要的成員。它們提供程式標準的互動模式與溝通介面，舉例來說，如果你建立一個需要存取資料庫的網頁，資料庫方可能就有人建立了 API 供你使用。API 有各式各樣的種類，最普遍使用的為REST API。 ✅ 'REST' 全名為 'Representational State Transfer'，提供各式各樣 URL 形式來抓取資料。對網路開發者的 API 種類做一點研究，什麼形式的 API 最吸引你？ 這條函式中有一個重要到值得紀錄的事情。第一點為關鍵字 async。讓你的函式非同步地執行，在行為完成前做等待，譬如資料被回傳。 這裡有一個簡短的影片介紹 async： 點擊上方圖片以觀賞關於 async/await 的影片。 建立新的函式來詢問 C02Signal 的 API： ```JavaScript import axios from '/node_modules/axios'; async function displayCarbonUsage(apiKey, region) { try { await axiosget('https://apico2signalcom/v1/latest', { params: { countryCode: region, }, headers: { 'auth-token': apiKey, }, })then((response) => { let CO2 = Mathfloor(responsedatadatacarbonIntensity); //calculateColor(CO2); loadingstyledisplay = 'none'; formstyledisplay = 'none'; myregiontextContent = region;\nusage",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10752,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 576,
    "chunk_index": 31,
    "total_chunks": 39
  },
  {
    "id": "4187aaaf54bd16c66fa15080e4492b26",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage",
    "content": "API 了！ 在前往下一步前，我們先來討論何謂 API。API，Application Programming Interfaces，是網頁開發者工具箱內最重要的成員。它們提供程式標準的互動模式與溝通介面，舉例來說，如果你建立一個需要存取資料庫的網頁，資料庫方可能就有人建立了 API 供你使用。API 有各式各樣的種類，最普遍使用的為REST API。 ✅ 'REST' 全名為 'Representational State Transfer'，提供各式各樣 URL 形式來抓取資料。對網路開發者的 API 種類做一點研究，什麼形式的 API 最吸引你？ 這條函式中有一個重要到值得紀錄的事情。第一點為關鍵字 async。讓你的函式非同步地執行，在行為完成前做等待，譬如資料被回傳。 這裡有一個簡短的影片介紹 async： 點擊上方圖片以觀賞關於 async/await 的影片。 建立新的函式來詢問 C02Signal 的 API： ```JavaScript import axios from '/node_modules/axios'; async function displayCarbonUsage(apiKey, region) { try { await axiosget('https://apico2signalcom/v1/latest', { params: { countryCode: region, }, headers: { 'auth-token': apiKey, }, })then((response) => { let CO2 = Mathfloor(responsedatadatacarbonIntensity); //calculateColor(CO2); loadingstyledisplay = 'none'; formstyledisplay = 'none'; myregiontextContent = region; usagetextContent =\nMath",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10752,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 511,
    "chunk_index": 32,
    "total_chunks": 39
  },
  {
    "id": "1be28cc826a887992efac66d428c18ec",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage",
    "content": "在前往下一步前，我們先來討論何謂 API。API，Application Programming Interfaces，是網頁開發者工具箱內最重要的成員。它們提供程式標準的互動模式與溝通介面，舉例來說，如果你建立一個需要存取資料庫的網頁，資料庫方可能就有人建立了 API 供你使用。API 有各式各樣的種類，最普遍使用的為REST API。 ✅ 'REST' 全名為 'Representational State Transfer'，提供各式各樣 URL 形式來抓取資料。對網路開發者的 API 種類做一點研究，什麼形式的 API 最吸引你？ 這條函式中有一個重要到值得紀錄的事情。第一點為關鍵字 async。讓你的函式非同步地執行，在行為完成前做等待，譬如資料被回傳。 這裡有一個簡短的影片介紹 async： 點擊上方圖片以觀賞關於 async/await 的影片。 建立新的函式來詢問 C02Signal 的 API： ```JavaScript import axios from '/node_modules/axios'; async function displayCarbonUsage(apiKey, region) { try { await axiosget('https://apico2signalcom/v1/latest', { params: { countryCode: region, }, headers: { 'auth-token': apiKey, }, })then((response) => { let CO2 = Mathfloor(responsedatadatacarbonIntensity); //calculateColor(CO2); loadingstyledisplay = 'none'; formstyledisplay = 'none'; myregiontextContent = region; usagetextContent = Mathround(response",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10752,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 509,
    "chunk_index": 33,
    "total_chunks": 39
  },
  {
    "id": "4fa7128aeabd0de4509aad959ec6a1bf",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage",
    "content": "在前往下一步前，我們先來討論何謂 API。API，Application Programming Interfaces，是網頁開發者工具箱內最重要的成員。它們提供程式標準的互動模式與溝通介面，舉例來說，如果你建立一個需要存取資料庫的網頁，資料庫方可能就有人建立了 API 供你使用。API 有各式各樣的種類，最普遍使用的為REST API。 ✅ 'REST' 全名為 'Representational State Transfer'，提供各式各樣 URL 形式來抓取資料。對網路開發者的 API 種類做一點研究，什麼形式的 API 最吸引你？ 這條函式中有一個重要到值得紀錄的事情。第一點為關鍵字 async。讓你的函式非同步地執行，在行為完成前做等待，譬如資料被回傳。 這裡有一個簡短的影片介紹 async： 點擊上方圖片以觀賞關於 async/await 的影片。 建立新的函式來詢問 C02Signal 的 API： ```JavaScript import axios from '/node_modules/axios'; async function displayCarbonUsage(apiKey, region) { try { await axiosget('https://apico2signalcom/v1/latest', { params: { countryCode: region, }, headers: { 'auth-token': apiKey, }, })then((response) => { let CO2 = Mathfloor(responsedatadatacarbonIntensity); //calculateColor(CO2); loadingstyledisplay = 'none'; formstyledisplay = 'none'; myregiontextContent = region; usagetextContent = Mathround(responsedata",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10752,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 511,
    "chunk_index": 34,
    "total_chunks": 39
  },
  {
    "id": "00e560c3ce18712c5b801cf1a8147fce",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage",
    "content": "在前往下一步前，我們先來討論何謂 API。API，Application Programming Interfaces，是網頁開發者工具箱內最重要的成員。它們提供程式標準的互動模式與溝通介面，舉例來說，如果你建立一個需要存取資料庫的網頁，資料庫方可能就有人建立了 API 供你使用。API 有各式各樣的種類，最普遍使用的為REST API。 ✅ 'REST' 全名為 'Representational State Transfer'，提供各式各樣 URL 形式來抓取資料。對網路開發者的 API 種類做一點研究，什麼形式的 API 最吸引你？ 這條函式中有一個重要到值得紀錄的事情。第一點為關鍵字 async。讓你的函式非同步地執行，在行為完成前做等待，譬如資料被回傳。 這裡有一個簡短的影片介紹 async： 點擊上方圖片以觀賞關於 async/await 的影片。 建立新的函式來詢問 C02Signal 的 API： ```JavaScript import axios from '/node_modules/axios'; async function displayCarbonUsage(apiKey, region) { try { await axiosget('https://apico2signalcom/v1/latest', { params: { countryCode: region, }, headers: { 'auth-token': apiKey, }, })then((response) => { let CO2 = Mathfloor(responsedatadatacarbonIntensity); //calculateColor(CO2); loadingstyledisplay = 'none'; formstyledisplay = 'none'; myregiontextContent = region; usagetextContent = Mathround(responsedatadata",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10752,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 513,
    "chunk_index": 35,
    "total_chunks": 39
  },
  {
    "id": "518aea888464c85a5d4bcc2308503b49",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage",
    "content": "在前往下一步前，我們先來討論何謂 API。API，Application Programming Interfaces，是網頁開發者工具箱內最重要的成員。它們提供程式標準的互動模式與溝通介面，舉例來說，如果你建立一個需要存取資料庫的網頁，資料庫方可能就有人建立了 API 供你使用。API 有各式各樣的種類，最普遍使用的為REST API。 ✅ 'REST' 全名為 'Representational State Transfer'，提供各式各樣 URL 形式來抓取資料。對網路開發者的 API 種類做一點研究，什麼形式的 API 最吸引你？ 這條函式中有一個重要到值得紀錄的事情。第一點為關鍵字 async。讓你的函式非同步地執行，在行為完成前做等待，譬如資料被回傳。 這裡有一個簡短的影片介紹 async： 點擊上方圖片以觀賞關於 async/await 的影片。 建立新的函式來詢問 C02Signal 的 API： ```JavaScript import axios from '/node_modules/axios'; async function displayCarbonUsage(apiKey, region) { try { await axiosget('https://apico2signalcom/v1/latest', { params: { countryCode: region, }, headers: { 'auth-token': apiKey, }, })then((response) => { let CO2 = Mathfloor(responsedatadatacarbonIntensity); //calculateColor(CO2); loadingstyledisplay = 'none'; formstyledisplay = 'none'; myregiontextContent = region; usagetextContent = Mathround(responsedatadatacarbonIntensity) + ' grams (grams C02 emitted per kilowatt hour)';\nfossilfuel",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10752,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 533,
    "chunk_index": 36,
    "total_chunks": 39
  },
  {
    "id": "9734efa16e73b0d64751591bc199597a",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage",
    "content": "全名為 'Representational State Transfer'，提供各式各樣 URL 形式來抓取資料。對網路開發者的 API 種類做一點研究，什麼形式的 API 最吸引你？ 這條函式中有一個重要到值得紀錄的事情。第一點為關鍵字 async。讓你的函式非同步地執行，在行為完成前做等待，譬如資料被回傳。 這裡有一個簡短的影片介紹 async： 點擊上方圖片以觀賞關於 async/await 的影片。 建立新的函式來詢問 C02Signal 的 API： ```JavaScript import axios from '/node_modules/axios'; async function displayCarbonUsage(apiKey, region) { try { await axiosget('https://apico2signalcom/v1/latest', { params: { countryCode: region, }, headers: { 'auth-token': apiKey, }, })then((response) => { let CO2 = Mathfloor(responsedatadatacarbonIntensity); //calculateColor(CO2); loadingstyledisplay = 'none'; formstyledisplay = 'none'; myregiontextContent = region; usagetextContent = Mathround(responsedatadatacarbonIntensity) + ' grams (grams C02 emitted per kilowatt hour)'; fossilfueltextContent =\nresponse data data fossilFuelPercentage toFixed(2) +\n'% (percentage of fossil fuels used to generate electricity)';\nresults style display = 'block';\n});\n} catch (error) {\nconsole log(error);\nloading style display = 'none';\nresults style display = 'none';\nerrors textContent = 'Sorry, we have no data for the region you have requested",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10752,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 440,
    "chunk_index": 37,
    "total_chunks": 39
  },
  {
    "id": "d15bd35373413d7586d2c1e090114e00",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：呼叫 API，使用 Local Storage",
    "content": "Mathfloor(responsedatadatacarbonIntensity); //calculateColor(CO2); loadingstyledisplay = 'none'; formstyledisplay = 'none'; myregiontextContent = region; usagetextContent = Mathround(responsedatadatacarbonIntensity) + ' grams (grams C02 emitted per kilowatt hour)'; fossilfueltextContent = response data data fossilFuelPercentage toFixed(2) + '% (percentage of fossil fuels used to generate electricity)'; results style display = 'block'; }); } catch (error) { console log(error); loading style display = 'none'; results style display = 'none'; errors textContent = 'Sorry, we have no data for the region you have requested';\n}\n}\n```\n這是一個挺大的函式，發生了什麼事？\n遵循程式實踐過程，你使用關鍵字 async 讓函式非同步地作行為。函式內的 try/catch 區塊會在 API 回傳資料時回傳 promise 物件。因為我們無法控制 API 會多快地回應訊息(甚至無法回應訊息！)，你需要處理這種不確定性的時序關係。\n藉由提供 API Key 訪問 co2signal API 以取得你的地區資料。要使用這把鑰匙，你必須在網頁標頭中新增認證參數。\n當 API 回應時，你將各種物件填入回傳的數值，並輸出到畫面上中。\n如果發生錯誤，或沒有結果產生，輸出錯誤訊息。\n✅ 非同步程式設計是一種實用的工具。閱讀更多使用方法設定非同步程式的程式碼。\n恭喜你！當你建制你的專案(npm run build)並在瀏覽器上刷新功能，你有個可以運作的應用套件了！現在只差圖示無法正常顯示，我們會在下一堂課中修正它。\n🚀 挑戰\n我們在課程中討論了不同種類的 API。選擇一樣網頁 API 並做更深度的研究。舉例來說，看看瀏覽器內支援的 API 如 HTML Drag and Drop API。依你看，什麼決定了 API 的優劣？\n課後測驗\n課後測驗\n複習與自學\n這堂課你學會關於 LocalStorage 與 API，它們對資深網頁開發者提供很大的幫助。你能想想這兩樣東西如何彼此相互合作呢？想想你會如何建構你的網頁，讓 API 得以使用你所儲存的資料。\n作業\n認領一項 API",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10752,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\2-forms-browsers-local-storage\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 862,
    "chunk_index": 38,
    "total_chunks": 39
  },
  {
    "id": "96776ac8c89206b9383f8efce55a4fe7",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\assignment.ja.md",
    "source_type": "git_repo",
    "title": "拡張機能のスタイル変更",
    "content": "拡張機能のスタイル変更\n説明書\nこの拡張機能のコードベースにはスタイルが完全に含まれていますが、それらを使用する必要はありません。css ファイルを編集してスタイルを変更することで拡張機能を自分のものにしてください。\nルーブリック\n| 基準 | 模範的な例                                    | 適切              | 改善が必要 |\n| -------- | -------------------------------------------- | --------------------- | ----------------- |\n|          | コードは機能的な新しいスタイルで提出されます | スタイリングが不完全 | スタイルがバグっている  |",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 713,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\assignment.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 202,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e8922058c66c03b7a86f2859ad1a9539",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\assignment.ko.md",
    "source_type": "git_repo",
    "title": "나만의 확장 프로그램 만들기",
    "content": "나만의 확장 프로그램 만들기\n설명\n확장 프로그램의 예시 코드에는 스타일이 적용되어 있으나, 그대로 사용하지 않아도 됩니다. css 파일을 수정해서 나만의 멋진 확장 프로그램을 만들어봅시다.\n평가 기준\n기준 | 모범 답안 | 적당한 답안 | 개선이 필요한 답안\n--- | --- | --- | ---\n| 새로운 스타일을 적용한 경우 | 스타일이 미완성된 경우 | 스타일에 오류가 있는 경우",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 505,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\assignment.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 177,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f6420bbb627d30454c2dd9e6bcda229d",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\assignment.ms.md",
    "source_type": "git_repo",
    "title": "Mengayakan semula penlanjut penyemak imbas",
    "content": "Mengayakan semula penlanjut penyemak imbas\nArahan\nPangkalan kode untuk peluasan ini dilengkapi dengan gaya, tetapi anda tidak perlu menggunakannya; jadikan peluasan anda sendiri dengan menyusun semula dengan mengedit fail cssnya.\nRubrik\n| Kriteria | Contoh                                    | Mencukupi              | Usaha Lagi |\n| -------- | -------------------------------------------- | --------------------- | ----------------- |\n|          | Kod dihantar dengan gaya baharu yang berfungsi | Gaya tidak lengkap | Gaya mempunyai pepijat  |",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 566,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\assignment.ms.md",
      "source_type": "git_repo"
    },
    "token_count": 140,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ffe20bf8a457556196f7b18c460aa514",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\assignment.nl.md",
    "source_type": "git_repo",
    "title": "Restyle uw extensie",
    "content": "Restyle uw extensie\nInstructies\nDe codebase voor deze extensie wordt compleet geleverd met stijlen, maar u hoeft ze niet te gebruiken; maak uw extensie uw eigen door deze te restylen door het css-bestand te bewerken.\nRubriek\n| Criteria | Voorbeeldig                                    | Voldoende              | Moet worden verbeterd |\n| -------- | -------------------------------------------- | --------------------- | ----------------- |\n|          | Code wordt ingediend met functionele nieuwe stijlen | Styling is niet compleet | Stijlen zijn buggy  |",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 577,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\assignment.nl.md",
      "source_type": "git_repo"
    },
    "token_count": 131,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a89e39e1f87af5c03534dfa7b8587e43",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\assignment.pt.md",
    "source_type": "git_repo",
    "title": "Refatore o estilo de sua extensão",
    "content": "Refatore o estilo de sua extensão\nInstruções\nO código base para esta extensão vem completo com estilos, mas você não precisa usá-los; faça sua própria estilização editando seu arquivo css.\nRubrica\n| Critérios | Exemplar | Adequado | Necessita de melhoria |\n| -------- | -------------------------------------------- | --------------------- | ----------------- |\n| | O código é enviado com novos estilos funcionais  | O estilo está incompleto | Os estilos contém erros |",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 507,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\assignment.pt.md",
      "source_type": "git_repo"
    },
    "token_count": 116,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f1ab5ddb4348cc4320bf3b92b484e6cb",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\assignment.zh-tw.md",
    "source_type": "git_repo",
    "title": "重新造型你的套件",
    "content": "重新造型你的套件\n簡介\n本課程的擴充套件已經包含了造型設定，但你不需要非得使用它們。改寫它的 CSS 檔來重新構築擴充插件的造型。\n學習評量\n| 作業內容 | 優良                       | 普通           | 待改進       |\n| -------- | -------------------------- | -------------- | ------------ |\n|          | 新造型能正常地套用在程式中 | 造型規劃不完整 | 套件出現問題 |",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 475,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\assignment.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 171,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9062b479e966f913b64a1f5dcb6dbe51",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.es.md",
    "source_type": "git_repo",
    "title": "Proyecto de extensión del navegador Parte 1: Todo sobre los navegadores",
    "content": "Proyecto de extensión del navegador Parte 1: Todo sobre los navegadores\nSketchnote de Wassim Chegham\nPre-lecture prueba\nIntroducción:\nLas extensiones de navegador agregan funcionalidad adicional a un navegador Pero antes de crear uno, debe aprender un poco sobre cómo funcionan los navegadores Acerca del navegador:\nEn esta serie de lecciones, aprenderá a crear una extensión de navegador que funcione en los navegadores Chrome, Firefox y Edge En esta parte, descubrirá cómo funcionan los navegadores y distribuirá los elementos de la extensión del navegador Pero, ¿qué es exactamente un navegador Es una aplicación de software que permite al usuario final acceder al contenido de un servidor y mostrarlo en páginas web ✅ Un poco de historia: el primer navegador se llamó 'WorldWideWeb' y fue creado por Sir Tim Berners-Lee en 1990 navegadores iniciales\nAlgunos de los primeros navegadores, a través de Karen McGrane\nCuando un usuario se conecta a Internet usando una dirección URL (Localizador uniforme de recursos), generalmente usando el Protocolo de transferencia de hipertexto a través de una dirección http ohttps, el navegador se comunica con un servidor web y busca una página web En este punto, el motor de renderizado del navegador lo muestra en el dispositivo del usuario, que puede ser un teléfono móvil, una computadora de escritorio o una computadora portátil Los navegadores también tienen la capacidad de almacenar en caché el contenido para que no sea necesario recuperarlo del servidor cada vez Pueden registrar el historial de la actividad de navegación de un usuario, almacenar 'cookies', que son pequeños fragmentos de datos que contienen información que se utiliza para almacenar la actividad de un usuario, y más Una cosa realmente importante para recordar acerca de los navegadores es que no todos son iguales Cada navegador tiene sus fortalezas y debilidades, y un desarrollador web profesional debe comprender cómo hacer que las páginas web funcionen bien en todos los navegadores Esto incluye el manejo de pequeñas ventanas gráficas, como las de un teléfono móvil, así como de un usuario sin conexión",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9910,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.es.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "9826cefa4183d752e420e2c6d5c70a79",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.es.md",
    "source_type": "git_repo",
    "title": "Proyecto de extensión del navegador Parte 1: Todo sobre los navegadores",
    "content": "información que se utiliza para almacenar la actividad de un usuario, y más Una cosa realmente importante para recordar acerca de los navegadores es que no todos son iguales Cada navegador tiene sus fortalezas y debilidades, y un desarrollador web profesional debe comprender cómo hacer que las páginas web funcionen bien en todos los navegadores Esto incluye el manejo de pequeñas ventanas gráficas, como las de un teléfono móvil, así como de un usuario sin conexiónUn sitio web realmente útil que probablemente debería marcar en cualquier navegador que prefiera usar es caniuse com Cuando está creando páginas web, es muy útil utilizar las listas de tecnologías compatibles de caniuse para que pueda ayudar mejor a sus usuarios ✅ ¿Cómo puede saber qué navegadores son los más populares entre la base de usuarios de su sitio web Verifique sus análisis: puede instalar varios paquetes de análisis como parte de su proceso de desarrollo web, y le dirán qué navegadores son los más utilizados por los diversos navegadores populares Extensiones de navegador\n¿Por qué querrías crear una extensión de navegador Es muy útil adjuntarlo a su navegador cuando necesita acceso rápido a tareas que tiende a repetir Por ejemplo, si necesita comprobar los colores en las distintas páginas web con las que interactúa, puede instalar una extensión de navegador de selector de color Si tiene problemas para recordar las contraseñas, puede utilizar una extensión de navegador de administración de contraseñas Las extensiones de navegador también son divertidas de desarrollar Suelen gestionar un número finito de tareas que realizan bien ✅ ¿Cuáles son sus extensiones de navegador favoritas ¿Qué tareas realizan Instalando extensiones\nAntes de empezar a crear, observe el proceso de creación e implementación de una extensión de navegador Si bien cada navegador varía un poco en la forma en que administran esta tarea, el proceso es similar en Chrome y Firefox a este ejemplo en Edge:\nEn esencia, el proceso será:\nconstruye tu extensión usando npm build\nnavegue en el navegador hasta el panel de extensiones usando el icono",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9910,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.es.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "717ab67c244dbb754f6393be138429d4",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.es.md",
    "source_type": "git_repo",
    "title": "Proyecto de extensión del navegador Parte 1: Todo sobre los navegadores",
    "content": "de navegador favoritas ¿Qué tareas realizan Instalando extensiones Antes de empezar a crear, observe el proceso de creación e implementación de una extensión de navegador Si bien cada navegador varía un poco en la forma en que administran esta tarea, el proceso es similar en Chrome y Firefox a este ejemplo en Edge: En esencia, el proceso será: construye tu extensión usando npm build navegue en el navegador hasta el panel de extensiones usando el iconoen la parte superior derecha\nsi se trata de una nueva instalación, elija load unpacked para cargar una nueva extensión desde su carpeta de compilación (en nuestro caso es / dist)\no haga clic en recargar si está recargando la extensión ya instalada\n✅ Estas instrucciones pertenecen a extensiones que usted mismo construye; para instalar extensiones que se han lanzado a la tienda de extensiones del navegador asociada a cada navegador, debe navegar a esas tiendas e instalar la extensión de tu elección Empezar\nVas a crear una extensión de navegador que muestre la huella de carbono de tu región, mostrando el uso de energía de tu región y la fuente de energía La extensión tendrá un formulario que recopila una clave API para que pueda acceder\nAPI de CO2 Signal Necesitas:\nuna clave API; ingrese su correo electrónico en el cuadro de esta página y se le enviará uno\nel código de su región correspondiente al Mapa de electricidad (en Boston, por ejemplo, Yo uso 'US-NEISO') el código de inicio Descargue la carpeta start; completará el código en esta carpeta NPM - NPM es una herramienta de gestión de paquetes; instálelo localmente y los paquetes enumerados en su archivo package json se instalarán para que los use su recurso web\n✅ Obtenga más información sobre la administración de paquetes en este excelente módulo de aprendizaje\nTómate un minuto para revisar el código base:\ndist\n- | manifest json (los valores predeterminados se establecen aquí)\n- | index html (marcado HTML de front-end aquí)\n- | background",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9910,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.es.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "228b5e474bdd31d5fb79109fb2a62c31",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.es.md",
    "source_type": "git_repo",
    "title": "Proyecto de extensión del navegador Parte 1: Todo sobre los navegadores",
    "content": "NPM - NPM es una herramienta de gestión de paquetes; instálelo localmente y los paquetes enumerados en su archivo package json se instalarán para que los use su recurso web ✅ Obtenga más información sobre la administración de paquetes en este excelente módulo de aprendizaje Tómate un minuto para revisar el código base: dist - | manifest json (los valores predeterminados se establecen aquí) - | index html (marcado HTML de front-end aquí) - | backgroundjs (JS de fondo aquí)\n- | main js (JS construido)\nsrc\n- | index js (su código JS va aquí)\n✅ Una vez que tenga a mano su clave API y el código de región, guárdelos en algún lugar en una nota para uso futuro Construye el HTML para la extensión\nEsta extensión tiene dos vistas Uno para recopilar la clave API y el código de región:\nY el segundo para mostrar el uso de carbono de la región:\nComencemos por construir el HTML para el formulario y darle estilo con CSS En la carpeta /dist, creará un formulario y un área de resultados En el archivo index html, complete el área delineada del formulario:\n```HTML\n¿Nuevo Agrega tu información\nNombre de la región\nTu clave API de tmrow\nEnviar\n```\nEste es el formulario donde se ingresará la información guardada y se guardará en el almacenamiento local A continuación, cree el área de resultados; debajo de la etiqueta de formulario final, agregue algunos divs:\n```HTML\ncargando Región:\nUso de carbono:\nPorcentaje de combustible fósil:\nCambia región\n```\nEn este punto, puede probar una compilación Asegúrese de instalar las dependencias del paquete de esta extensión:\nnpm install\nEste comando usará npm, el Node Package Manager, para instalar el paquete web para el proceso de compilación de su extensión Webpack es un paquete que maneja la compilación de código Puede ver el resultado de este proceso mirando en /dist/main js; verá que el código se ha incluido",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9910,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.es.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "036171b9e8b13a18d5da26c4795a8040",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.es.md",
    "source_type": "git_repo",
    "title": "Proyecto de extensión del navegador Parte 1: Todo sobre los navegadores",
    "content": "carbono: Porcentaje de combustible fósil: Cambia región ``` En este punto, puede probar una compilación Asegúrese de instalar las dependencias del paquete de esta extensión: npm install Este comando usará npm, el Node Package Manager, para instalar el paquete web para el proceso de compilación de su extensión Webpack es un paquete que maneja la compilación de código Puede ver el resultado de este proceso mirando en /dist/main js; verá que el código se ha incluidoPor ahora, la extensión debería compilarse y, si la implementa en Edge como una extensión, verá un formulario claramente mostrado Felicitaciones, ha dado los primeros pasos para crear una extensión de navegador En lecciones posteriores, lo hará más funcional y útil 🚀Challenge: Eche un vistazo a una tienda de extensiones de navegador e instale una en su navegador Puede examinar sus archivos de formas interesantes ¿Qué descubres Post-lecture prueba\nRevisión y autoestudio\nEn esta lección aprendió un poco sobre la historia del navegador web; Aproveche esta oportunidad para aprender cómo los inventores de la World Wide Web imaginaron su uso leyendo más sobre su historia Algunos sitios útiles incluyen:\nLa historia de los navegadores web\nHistoria de la Web\nUna entrevista con Tim Berners-Lee\nTarea: Cambia el estilo de tu extensión",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9910,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.es.md",
      "source_type": "git_repo"
    },
    "token_count": 326,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "226a8222d622281222fc1bd515675803",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.fr.md",
    "source_type": "git_repo",
    "title": "Projet d'extension de navigateur Partie 1: Tout sur les navigateurs",
    "content": "Projet d'extension de navigateur Partie 1: Tout sur les navigateurs\nSketchnote par Wassim Chegham\nQuiz préalable\nQuiz préalable\nIntroduction\nLes extensions de navigateur ajoutent des fonctionnalités supplémentaires à un navigateur Mais avant d'en créer une, vous devez en savoir un peu plus sur la façon dont les navigateurs fonctionnent À propos du navigateur\nDans cette série de leçons, vous apprendrez à créer une extension de navigateur qui fonctionnera sur les navigateurs Chrome, Firefox et Edge Dans cette partie, vous découvrirez le fonctionnement des navigateurs et vous échafauderez les éléments de l'extension de navigateur Mais qu'est-ce qu'un navigateur exactement Il s'agit d'une application logicielle qui permet à un utilisateur final d'accéder au contenu d'un serveur et de l'afficher sur des pages web ✅ Un peu d'histoire: le premier navigateur s'appelait \"WorldWideWeb\" et a été créé par Sir Timothy Berners-Lee en 1990 Certains des premiers navigateurs, via Karen McGrane\nLorsqu'un utilisateur se connecte à l'internet en utilisant une adresse URL (Uniform Resource Locator), généralement en utilisant le protocole de transfert hypertexte via une adresse http ou https, le navigateur communique avec un serveur web et va chercher une page web À ce stade, le moteur de rendu du navigateur l'affiche sur l'appareil de l'utilisateur, qui peut être un téléphone mobile, un ordinateur de bureau ou un ordinateur portable Les navigateurs ont également la capacité de mettre en cache le contenu afin qu'il ne soit pas nécessaire de le récupérer à chaque fois sur le serveur Ils peuvent enregistrer l'historique de l'activité de navigation d'un utilisateur, stocker des \"cookies\", qui sont de petits morceaux de données contenant des informations utilisées pour enregistrer l'activité d'un utilisateur, et plus encore Une chose très importante à retenir au sujet des navigateurs est qu'ils ne sont pas tous identiques",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11200,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.fr.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "fcb5d74877204a3fa31efc0a4dfcb47c",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.fr.md",
    "source_type": "git_repo",
    "title": "Projet d'extension de navigateur Partie 1: Tout sur les navigateurs",
    "content": "Les navigateurs ont également la capacité de mettre en cache le contenu afin qu'il ne soit pas nécessaire de le récupérer à chaque fois sur le serveur Ils peuvent enregistrer l'historique de l'activité de navigation d'un utilisateur, stocker des \"cookies\", qui sont de petits morceaux de données contenant des informations utilisées pour enregistrer l'activité d'un utilisateur, et plus encore Une chose très importante à retenir au sujet des navigateurs est qu'ils ne sont pas tous identiquesChaque navigateur a ses forces et ses faiblesses, et un développeur web professionnel doit savoir comment faire en sorte que les pages web fonctionnent bien sur plusieurs navigateurs Cela inclut la gestion des petites fenêtres d'affichage, comme celles des téléphones portables, ainsi que la gestion des utilisateurs hors ligne Le site caniuse com est un site Web très utile que vous devriez probablement marquer d'un signet dans le navigateur que vous préférez utiliser Lorsque vous créez des pages Web, il est très utile d'utiliser les listes de technologies prises en charge de caniuse afin d'aider au mieux vos utilisateurs ✅ Comment pouvez-vous savoir quels sont les navigateurs les plus populaires parmi les utilisateurs de votre site Web Vérifiez vos analyses - vous pouvez installer divers progiciels d'analyse dans le cadre de votre processus de développement web, et ils vous indiqueront quels sont les navigateurs les plus utilisés par les différents navigateurs populaires Extensions du navigateur\nPourquoi vouloir créer une extension de navigateur Il s'agit d'un élément pratique à joindre à votre navigateur lorsque vous avez besoin d'un accès rapide à des tâches que vous avez tendance à répéter Par exemple, si vous avez besoin de vérifier les couleurs des différentes pages Web avec lesquelles vous interagissez, vous pouvez installer une extension de navigateur permettant de choisir les couleurs Si vous avez du mal à vous souvenir des mots de passe, vous pouvez utiliser une extension de navigateur pour la gestion des mots de passe Les extensions de navigateur sont également agréables à développer Elles ont tendance à gérer un nombre limité de tâches qu'elles exécutent bien",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11200,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.fr.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "c6cf13f848fe60f5d13432fbd14d81ed",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.fr.md",
    "source_type": "git_repo",
    "title": "Projet d'extension de navigateur Partie 1: Tout sur les navigateurs",
    "content": "si vous avez besoin de vérifier les couleurs des différentes pages Web avec lesquelles vous interagissez, vous pouvez installer une extension de navigateur permettant de choisir les couleurs Si vous avez du mal à vous souvenir des mots de passe, vous pouvez utiliser une extension de navigateur pour la gestion des mots de passe Les extensions de navigateur sont également agréables à développer Elles ont tendance à gérer un nombre limité de tâches qu'elles exécutent bien✅ Quelles sont vos extensions de navigateur préférées Quelles sont les tâches qu'elles accomplissent Installation des extensions\nAvant de commencer à construire, jetez un coup d'œil au processus de construction et de déploiement d'une extension de navigateur Bien que chaque navigateur varie un peu dans la façon dont il gère cette tâche, le processus est similaire sur Chrome et Firefox à cet exemple sur Edge:\nEn substance, le processus sera le suivant:\nConstruisez votre extension en utilisant npm run build Naviguez dans le navigateur jusqu'au panneau des extensions en utilisant le bouton \"Paramètres et plus\" (l'icône ) en haut à droite s'il s'agit d'une nouvelle installation, choisissez load unpacked pour charger une nouvelle extension depuis son dossier de construction (dans notre cas, c'est /dist)\nou, cliquez sur reload si vous rechargez l'extension déjà installée ✅ Ces instructions concernent les extensions que vous construisez vous-même; pour installer des extensions qui ont été publiées dans le magasin d'extension du navigateur associé à chaque navigateur, vous devez vous rendre dans ces magasins et installer l'extension de votre choix Commencer\nVous allez créer une extension de navigateur qui affiche l'empreinte carbone de votre région, en indiquant la consommation d'énergie de votre région et la source de cette énergie L'extension aura un formulaire qui collecte une clé API afin que vous puissiez accéder à l'API de\nl'API de CO2 Signal Vous avez besoin de:\nune clé API; saisissez votre adresse électronique dans le champ de cette page et une clé vous sera envoyée",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11200,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.fr.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "5dafa3fb1f4c2749a4f778e0b9309409",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.fr.md",
    "source_type": "git_repo",
    "title": "Projet d'extension de navigateur Partie 1: Tout sur les navigateurs",
    "content": "de votre choix Commencer Vous allez créer une extension de navigateur qui affiche l'empreinte carbone de votre région, en indiquant la consommation d'énergie de votre région et la source de cette énergie L'extension aura un formulaire qui collecte une clé API afin que vous puissiez accéder à l'API de l'API de CO2 Signal Vous avez besoin de: une clé API; saisissez votre adresse électronique dans le champ de cette page et une clé vous sera envoyéele code pour votre région correspondant à la carte de l'électricité (à Boston, par exemple, j'utilise 'US-NEISO') le code de démarrage Téléchargez le dossier start; vous allez compléter le code dans ce dossier NPM - NPM est un outil de gestion de paquets; installez-le localement et les paquets listés dans votre fichier package json seront installés pour être utilisés par votre ressource web ✅ Apprenez-en plus sur la gestion des paquets dans cet excellent module d'apprentissage\nPrenez une minute pour parcourir la base de code:\ndist\n-|manifest json (les valeurs par défaut sont définies ici)\n-|index html (balisage HTML frontal ici)\n-|background js (JS de fond ici)\n-|main js (JS construit)\nsrc\n-|index js (votre code JS va ici)\n✅ Une fois que vous avez votre clé API et votre code de région à portée de main, rangez-les quelque part dans une note pour une utilisation future Construire le HTML pour l'extension\nCette extension a deux vues L'une pour recueillir la clé API et le code de région:\nEt le second pour afficher la consommation de carbone de la région:\nCommençons par construire le HTML du formulaire et le styliser avec le CSS Dans le dossier /dist, vous allez construire un formulaire et une zone de résultat Dans le fichier index html, remplissez la zone de formulaire délimitée:\n```HTML\nNew Add your Information\nRegion Name\nYour API Key from tmrow\nSubmit\n```\nIl s'agit du formulaire où vos informations enregistrées seront saisies et sauvegardées dans le stockage local",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11200,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.fr.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "0427788fd316f37acd434b65c9da5c1f",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.fr.md",
    "source_type": "git_repo",
    "title": "Projet d'extension de navigateur Partie 1: Tout sur les navigateurs",
    "content": "afficher la consommation de carbone de la région: Commençons par construire le HTML du formulaire et le styliser avec le CSS Dans le dossier /dist, vous allez construire un formulaire et une zone de résultat Dans le fichier index html, remplissez la zone de formulaire délimitée: ```HTML New Add your Information Region Name Your API Key from tmrow Submit ``` Il s'agit du formulaire où vos informations enregistrées seront saisies et sauvegardées dans le stockage localEnsuite, créez la zone de résultats; sous la balise de formulaire finale, ajoutez quelques divs:\n```HTML\nloading Region:\nCarbon Usage:\nFossil Fuel Percentage:\nChange region\n```\nÀ ce stade, vous pouvez essayer une construction Assurez-vous d'installer les dépendances du paquet de cette extension:\nnpm install\nCette commande va utiliser npm, le gestionnaire de paquets Node, pour installer webpack pour le processus de construction de votre extension Webpack est un bundler qui gère la compilation du code Vous pouvez voir le résultat de ce processus en regardant dans /dist/main js - vous voyez que le code a été regroupé Pour l'instant, l'extension devrait être construite et, si vous la déployez dans Edge en tant qu'extension, vous verrez un formulaire s'afficher proprement Félicitations, vous avez franchi les premières étapes de la création d'une extension de navigateur Dans les leçons suivantes, vous allez la rendre plus fonctionnelle et plus utile 🚀 Défi\nJetez un coup d'œil à un magasin d'extensions de navigateur et installez-en une dans votre navigateur Vous pouvez examiner ses fichiers de manière intéressante Que découvrez-vous Quiz de validation des connaissances\nQuiz de validation des connaissances\nRévision et étude personnelle\nDans cette leçon, vous en avez appris un peu plus sur l'histoire du navigateur Web; profitez-en pour découvrir comment les inventeurs du World Wide Web envisageaient son utilisation en lisant d'autres documents sur son histoire",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11200,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.fr.md",
      "source_type": "git_repo"
    },
    "token_count": 460,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "28784398de9164ec3cfce12972dc58b5",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.fr.md",
    "source_type": "git_repo",
    "title": "Projet d'extension de navigateur Partie 1: Tout sur les navigateurs",
    "content": "Défi Jetez un coup d'œil à un magasin d'extensions de navigateur et installez-en une dans votre navigateur Vous pouvez examiner ses fichiers de manière intéressante Que découvrez-vous Quiz de validation des connaissances Quiz de validation des connaissances Révision et étude personnelle Dans cette leçon, vous en avez appris un peu plus sur l'histoire du navigateur Web; profitez-en pour découvrir comment les inventeurs du World Wide Web envisageaient son utilisation en lisant d'autres documents sur son histoireVoici quelques sites utiles:\nL'histoire des navigateurs Web\nL'histoire du Web\nUn entretien avec Tim Berners-Lee\nAffectation\nRestylez votre extension",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11200,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.fr.md",
      "source_type": "git_repo"
    },
    "token_count": 159,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "a27f511f8a5f0475b939a8421e1773d6",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.it.md",
    "source_type": "git_repo",
    "title": "Progetto di Estensione del Browser Parte 1: Tutto sui Browser",
    "content": "Progetto di Estensione del Browser Parte 1: Tutto sui Browser\nSketchnote di Wassim Chegham\nQuiz Pre-Lezione\nQuiz Pre-Lezione\nIntroduzione\nLe estensioni del browser aggiungono funzionalità a un browser Ma prima di crearne una, si dovrebbe imparare qualcosa su come i browser svolgono il loro lavoro Informazioni sul browser\nIn questa serie di lezioni si imparerà come creare un'estensione per il browser che funzionerà con i browser Chrome, Firefox ed Edge In questa parte si scoprirà come funzionano i browser e come impacchettare gli elementi dell'estensione del browser Ma cos'è esattamente un browser È un'applicazione software che consente a un utente finale di accedere ai contenuti da un server e visualizzarli su pagine web ✅ Un po' di storia: il primo browser si chiamava \"WorldWideWeb\" ed fu creato da Sir Timothy Berners-Lee nel 1990 Alcuni dei primi browser, tramite Karen McGrane\nQuando un utente si connette a Internet utilizzando un indirizzo URL (Uniform Resource Locator), solitamente utilizzando Hypertext Transfer Protocol tramite un indirizzo http o https , il browser comunica con un server web e recupera una pagina web A questo punto, il motore di rendering del browser la visualizza sul dispositivo dell'utente, che potrebbe essere un telefono cellulare, un desktop o un laptop I browser hanno anche la capacità di memorizzare nella cache il contenuto in modo che non debba essere recuperato dal server ogni volta Possono registrare la cronologia dell'attività di navigazione di un utente, memorizzare i \"cookie\", che sono piccoli frammenti di dati che contengono informazioni utilizzate per memorizzare l'attività di un utente e altro ancora Una cosa davvero importante da ricordare sui browser è che non sono tutti uguali Ogni browser ha i suoi punti di forza e di debolezza e uno sviluppatore web professionista deve capire come far funzionare bene le pagine web su più browser",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10777,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.it.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "d06eea5171bd79d6b50ed606d8367056",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.it.md",
    "source_type": "git_repo",
    "title": "Progetto di Estensione del Browser Parte 1: Tutto sui Browser",
    "content": "ogni volta Possono registrare la cronologia dell'attività di navigazione di un utente, memorizzare i \"cookie\", che sono piccoli frammenti di dati che contengono informazioni utilizzate per memorizzare l'attività di un utente e altro ancora Una cosa davvero importante da ricordare sui browser è che non sono tutti uguali Ogni browser ha i suoi punti di forza e di debolezza e uno sviluppatore web professionista deve capire come far funzionare bene le pagine web su più browserCiò include la gestione di piccoli schermi come quelli di un telefono cellulare, così come la gestione di un utente offline Un sito web davvero utile che probabilmente si dovrebbe aggiungere ai preferiti da usare in qualunque browser preferisci è caniuse com Quando si creano pagine web, è molto utile utilizzare gli elenchi di tecnologie supportate forniti da caniuse in modo da poter supportare al meglio i propri utenti ✅ Come si può sapere quali browser sono più popolari con la base di utenti del proprio sito web Controllando le analitiche: si possono installare vari pacchetti di analisi come parte del proprio processo di sviluppo web e che evidenzieranno quali browser sono più utilizzati tra i vari browser popolari Estensioni del browser\nPerché si vorrebbe creare un'estensione per il browser È una cosa utile da collegare al  browser quando si ha bisogno di un rapido accesso ad attività che si tende a ripetere Ad esempio, se ci si ritrova a dover controllare i colori nelle varie pagine Web con cui si interagisce, si potrebbe installare un'estensione del browser per la selezione dei colori Se si hanno problemi a ricordare le password, si potrebbe utilizzare un'estensione del browser per la gestione delle password Anche le estensioni del browser sono divertenti da sviluppare Tendono a gestire un numero finito di compiti che svolgono bene ✅ Quali sono le proprie estensioni browser preferite Quali compiti svolgono",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10777,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.it.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "91cb7aa2de678973b0cca4fbda582997",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.it.md",
    "source_type": "git_repo",
    "title": "Progetto di Estensione del Browser Parte 1: Tutto sui Browser",
    "content": "si ritrova a dover controllare i colori nelle varie pagine Web con cui si interagisce, si potrebbe installare un'estensione del browser per la selezione dei colori Se si hanno problemi a ricordare le password, si potrebbe utilizzare un'estensione del browser per la gestione delle password Anche le estensioni del browser sono divertenti da sviluppare Tendono a gestire un numero finito di compiti che svolgono bene ✅ Quali sono le proprie estensioni browser preferite Quali compiti svolgonoInstallazione di estensioni\nPrima di iniziare a creare, si dia un'occhiata al processo di creazione e distribuzione di un'estensione del browser Mentre ogni browser varia leggermente nel modo in cui gestiscono questa attività, il processo è simile su Chrome e Firefox rispetto a questo esempio su Edge:\nIn sostanza, il processo sarà:\ncreare la propria estensione usando npm build\nnavigare nel browser fino al menu Estensioni utilizzando il pulsante \"Impostazioni e altro ancora\" (l'icona ) in alto a destra\nabilitare la \"Modalità sviluppatore\" (switch in basso a sinistra), quindi se si tratta di una nuova installazione scegliere Carica decompresssa per caricare una nuova estensione dalla sua cartella di compilazione (nel nostro caso è /dist)\noppure, fare clic su Aggiorna se si sta ricaricando l'estensione già installata\n✅ Queste istruzioni riguardano le estensioni create dallo sviluppatore; per installare le estensioni che sono state rilasciate nello store di estensioni del browser associato a ciascun browser, è necessario accedere a tali store e installare l'estensione di propria scelta Si comincia\nVerrè costruita un'estensione del browser che mostra l'impronta di carbonio della propria regione,  mostrando l'utilizzo e la fonte di energia",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10777,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.it.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "5a7f7550e77cc014d9807a977987deeb",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.it.md",
    "source_type": "git_repo",
    "title": "Progetto di Estensione del Browser Parte 1: Tutto sui Browser",
    "content": "caso è /dist) oppure, fare clic su Aggiorna se si sta ricaricando l'estensione già installata ✅ Queste istruzioni riguardano le estensioni create dallo sviluppatore; per installare le estensioni che sono state rilasciate nello store di estensioni del browser associato a ciascun browser, è necessario accedere a tali store e installare l'estensione di propria scelta Si comincia Verrè costruita un'estensione del browser che mostra l'impronta di carbonio della propria regione, mostrando l'utilizzo e la fonte di energiaL'estensione avrà un form che raccoglie una chiave API in modo che ai possa accedere all'API di CO2 Signal Occorrente:\nuna chiave API; inserire la propria email nella casella in questa pagina e se ne riceverà una\nil codice della propria regione corrispondente alla Electricity Map (a Boston, ad esempio, si utilizza \"US-NEISO\") il codice di partenza Scaricare la cartella start; si completerà il codice in questa cartella NPM - NPM è uno strumento di gestione dei pacchetti; si installa localmente e i pacchetti elencati nel file package json verranno installati per essere utilizzati dalla propria risorsa web\n✅ Ulteriori informazioni sulla gestione dei pacchetti in questo eccellente modulo di apprendimento\nCi si prenda un minuto per esaminare la base di codice:\n```\ndist\n- | manifest json (valori predefiniti impostati qui)\n- | index html (markup e front-end HTML qui)\n- | background js (background JS qui)\n- | main js (compilato JS)\nsrc\n- | index js (il proprio codice JS va qui)\n```\n✅ Una volta che si ha a portata di mano la chiave API e il codice regionale, andranno memorizzati da qualche parte in una nota per un utilizzo futuro Creare l'HTML per l'estensione\nQuesta estensione ha due viste",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10777,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.it.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "7c72812f554d84ee4076a287a3d0f7a8",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.it.md",
    "source_type": "git_repo",
    "title": "Progetto di Estensione del Browser Parte 1: Tutto sui Browser",
    "content": "(valori predefiniti impostati qui) - | index html (markup e front-end HTML qui) - | background js (background JS qui) - | main js (compilato JS) src - | index js (il proprio codice JS va qui) ``` ✅ Una volta che si ha a portata di mano la chiave API e il codice regionale, andranno memorizzati da qualche parte in una nota per un utilizzo futuro Creare l'HTML per l'estensione Questa estensione ha due visteUna per raccogliere la chiave API e il codice regionale:\ne la seconda per visualizzare l'utilizzo di carbonio della regione:\nSi inizia costruendo l'HTML per il form e applicando uno stile con CSS Nella cartella /dist si creerà un form e un'area dei risultati Nel file index html , popolare l'area del form contraddistinta da \":\n```HTML\nNuovo Aggiungi le tue informazioni\nNome Regione\nLa tua chiave API da tmrow\nInvia\n```\nQuesto è il form in cui le proprie informazioni recuperate verranno inserite e salvate nella memoria locale del browser (local storage)\nSuccessivamente, creare l'area dei risultati; sotto il tag di chiusura del form, dopo ' aggiungere alcuni div:\n```HTML\ncaricamento Regione:\nUtilizzo Carbonio:\nPercentuale di Combustibile Fossile:\nCambia regione\n```\nA questo punto, si può provare una compilazione Assicurarsi di installare le dipendenze del pacchetto di questa estensione:\nnpm install\nQuesto comando utilizzerà npm, il Node Package Manager, per installare webpack per il processo di compilazione dell'estensione Webpack è un bundler che gestisce la compilazione del codice (un bundler è uno strumento che prande pezzi di codice javascript e dipendenze e li raggruppa in un unico file che verrà in genere usato nel browser - n d t ) Si può vedere l'output di questo processo guardando in /dist/main js - si vede che il codice è stato raggruppato",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10777,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.it.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "a79b538e543e8dec85ec56b7d98dc765",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.it.md",
    "source_type": "git_repo",
    "title": "Progetto di Estensione del Browser Parte 1: Tutto sui Browser",
    "content": "npm, il Node Package Manager, per installare webpack per il processo di compilazione dell'estensione Webpack è un bundler che gestisce la compilazione del codice (un bundler è uno strumento che prande pezzi di codice javascript e dipendenze e li raggruppa in un unico file che verrà in genere usato nel browser - n d t ) Si può vedere l'output di questo processo guardando in /dist/main js - si vede che il codice è stato raggruppatoPer ora, l'estensione dovrebbe essere compilata e, se la si distribuisce in Edge come estensione, si vedrebbe un form ben disposto Congratulazioni, si sono compiuti i primi passi verso la creazione di un'estensione per il browser Nelle lezioni successive verrà resa più funzionale e utile 🚀 Sfida\nSi dia un'occhiata alle estensioni del browser in uno store e se ne installi una nel proprio browser Si possono esaminare i suoi file in modi interessanti Cosa si è scoperto Quiz Post-Lezione\nQuiz post-lezione\nRevisione e Auto Apprendimento\nIn questa lezione si è imparato qualcosa sulla storia del browser web; si colga l'occasione per informarsi su come gli inventori del World Wide Web ne immaginavano l'uso leggendo di più sulla sua storia Alcuni siti utili includono:\nLa storia dei browser web\nStoria del web (in inglese)\nUn'intervista con Tim Berners-Lee (in inglese)\nCompito\nRestyling dell'estensione",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10777,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.it.md",
      "source_type": "git_repo"
    },
    "token_count": 367,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "5c5443312701fadfa9f7d6bdc03baaaa",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "ब्राउज़र एक्सटेंशन प्रोजेक्ट पार्ट 1: ब्राउज़रों के बारे में सभी",
    "content": "ब्राउज़र एक्सटेंशन प्रोजेक्ट पार्ट 1: ब्राउज़रों के बारे में सभी\nस्केचनोट वसीम चैघाम द्वारा\nपूर्व व्याख्यान प्रश्नोत्तरी\nपूर्व व्याख्यान प्रश्नोत्तरी\nपरिचय\nब्राउज़र एक्सटेंशन ब्राउज़र में अतिरिक्त कार्यक्षमता जोड़ते हैं। लेकिन इससे पहले कि आप एक निर्माण करें, आपको थोड़ा सीखना चाहिए कि ब्राउज़र कैसे अपना काम करते हैं।\nब्राउजरके बारे मे\nपाठों की इस श्रृंखला में, आप सीखेंगे कि एक ब्राउज़र एक्सटेंशन कैसे बनाया जाए जो क्रोम, फ़ायरफ़ॉक्स और एज ब्राउज़र पर काम करेगा। इस भाग में, आपको पता चलेगा कि ब्राउज़र कैसे काम करते हैं और ब्राउज़र एक्सटेंशन के तत्वों को मचान बनाते हैं।\nलेकिन वास्तव में एक ब्राउज़र क्या है",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21433,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 621,
    "chunk_index": 0,
    "total_chunks": 17
  },
  {
    "id": "1c71c9056eba9b600a2e9442d5195dbb",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "ब्राउज़र एक्सटेंशन प्रोजेक्ट पार्ट 1: ब्राउज़रों के बारे में सभी",
    "content": "कार्यक्षमता जोड़ते हैं। लेकिन इससे पहले कि आप एक निर्माण करें, आपको थोड़ा सीखना चाहिए कि ब्राउज़र कैसे अपना काम करते हैं। ब्राउजरके बारे मे पाठों की इस श्रृंखला में, आप सीखेंगे कि एक ब्राउज़र एक्सटेंशन कैसे बनाया जाए जो क्रोम, फ़ायरफ़ॉक्स और एज ब्राउज़र पर काम करेगा। इस भाग में, आपको पता चलेगा कि ब्राउज़र कैसे काम करते हैं और ब्राउज़र एक्सटेंशन के तत्वों को मचान बनाते हैं। लेकिन वास्तव में एक ब्राउज़र क्या हैयह एक सॉफ्टवेयर एप्लिकेशन है जो एक अंतिम उपयोगकर्ता को सर्वर से सामग्री का उपयोग करने और इसे वेब पेजों पर प्रदर्शित करने की अनुमति देता है।\n✅ थोड़ा इतिहास: पहला ब्राउज़र 'वर्ल्डवाइडवेब' कहलाता था और 1990 में सर टिमोथी बर्नर्स-ली द्वारा बनाया गया था।\nथोड़ी शुरुआती ब्राउजर , Karen McGrane द्वारा\nजब कोई उपयोगकर्ता URL (यूनिफ़ॉर्म रिसोर्स लोकेटर) पते का उपयोग करके इंटरनेट से जुड़ा होता है, तो आमतौर पर एक http या https पते के माध्यम से हाइपरटेक्स्ट ट्रांसफर प्रोटोकॉल का उपयोग करते हुए, ब्राउज़र एक वेब सर्वर के साथ संचार करता है और एक वेब पेज प्राप्त करता है।\nइस बिंदु पर, ब्राउज़र का रेंडरिंग इंजन इसे उपयोगकर्ता के डिवाइस पर प्रदर्शित करता है, जो मोबाइल फोन, डेस्कटॉप या लैपटॉप हो सकता है।\nब्राउज़रों के पास सामग्री को कैश करने की क्षमता भी होती है ताकि इसे हर बार सर्वर से पुनर्प्राप्त न करना पड़े। वे उपयोगकर्ता की ब्राउज़िंग गतिविधि के इतिहास को रिकॉर्ड कर सकते हैं, 'कुकीज़' को स्टोर कर सकते हैं, जो डेटा के छोटे टुकड़े हैं जिसमें उपयोगकर्ता की गतिविधि को संग्रहीत करने के लिए उपयोग की जाने वाली जानकारी होती है, और बहुत कुछ।\nब्राउज़रों के बारे में याद रखने वाली एक महत्वपूर्ण बात यह है कि वे सभी समान नहीं हैं",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21433,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 1499,
    "chunk_index": 1,
    "total_chunks": 17
  },
  {
    "id": "c1235b306c380b254e63e27f6e416429",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "ब्राउज़र एक्सटेंशन प्रोजेक्ट पार्ट 1: ब्राउज़रों के बारे में सभी",
    "content": "की क्षमता भी होती है ताकि इसे हर बार सर्वर से पुनर्प्राप्त न करना पड़े। वे उपयोगकर्ता की ब्राउज़िंग गतिविधि के इतिहास को रिकॉर्ड कर सकते हैं, 'कुकीज़' को स्टोर कर सकते हैं, जो डेटा के छोटे टुकड़े हैं जिसमें उपयोगकर्ता की गतिविधि को संग्रहीत करने के लिए उपयोग की जाने वाली जानकारी होती है, और बहुत कुछ। ब्राउज़रों के बारे में याद रखने वाली एक महत्वपूर्ण बात यह है कि वे सभी समान नहीं हैंप्रत्येक ब्राउज़र की अपनी ताकत और कमजोरियां होती हैं, और एक पेशेवर वेब डेवलपर को यह समझने की आवश्यकता होती है कि वेब पेजों को अच्छी तरह से क्रॉस-ब्राउज़र कैसे करें। इसमें मोबाइल फोन जैसे छोटे व्यूपोर्ट को संभालना शामिल है, साथ ही एक उपयोगकर्ता जो ऑफ़लाइन है।\nवास्तव में एक उपयोगी वेबसाइट जिसे आपको संभवतः उस ब्राउज़र में बुकमार्क करना चाहिए जिसे आप उपयोग करना चाहते हैं caniuse",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21433,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 752,
    "chunk_index": 2,
    "total_chunks": 17
  },
  {
    "id": "76fd33b0484c5340c242829268d7c9f8",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "ब्राउज़र एक्सटेंशन प्रोजेक्ट पार्ट 1: ब्राउज़रों के बारे में सभी",
    "content": "यह है कि वे सभी समान नहीं हैंप्रत्येक ब्राउज़र की अपनी ताकत और कमजोरियां होती हैं, और एक पेशेवर वेब डेवलपर को यह समझने की आवश्यकता होती है कि वेब पेजों को अच्छी तरह से क्रॉस-ब्राउज़र कैसे करें। इसमें मोबाइल फोन जैसे छोटे व्यूपोर्ट को संभालना शामिल है, साथ ही एक उपयोगकर्ता जो ऑफ़लाइन है। वास्तव में एक उपयोगी वेबसाइट जिसे आपको संभवतः उस ब्राउज़र में बुकमार्क करना चाहिए जिसे आप उपयोग करना चाहते हैं caniusecom। जब आप वेब पेज बना रहे होते हैं, तो कैनुएज़ की समर्थित तकनीकों की सूचियों का उपयोग करना बहुत मददगार होता है ताकि आप अपने उपयोगकर्ताओं का सर्वोत्तम समर्थन कर सकें।\n✅ आप कैसे बता सकते हैं कि आपकी वेब साइट के उपयोगकर्ता आधार के साथ कौन से ब्राउज़र सबसे लोकप्रिय हैं",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21433,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 666,
    "chunk_index": 3,
    "total_chunks": 17
  },
  {
    "id": "5274a4ff1c636b9f500a16411fea9f6c",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "ब्राउज़र एक्सटेंशन प्रोजेक्ट पार्ट 1: ब्राउज़रों के बारे में सभी",
    "content": "जो ऑफ़लाइन है। वास्तव में एक उपयोगी वेबसाइट जिसे आपको संभवतः उस ब्राउज़र में बुकमार्क करना चाहिए जिसे आप उपयोग करना चाहते हैं caniusecom। जब आप वेब पेज बना रहे होते हैं, तो कैनुएज़ की समर्थित तकनीकों की सूचियों का उपयोग करना बहुत मददगार होता है ताकि आप अपने उपयोगकर्ताओं का सर्वोत्तम समर्थन कर सकें। ✅ आप कैसे बता सकते हैं कि आपकी वेब साइट के उपयोगकर्ता आधार के साथ कौन से ब्राउज़र सबसे लोकप्रिय हैंअपने एनालिटिक्स की जाँच करें - आप अपनी वेब डेवलपमेंट प्रक्रिया के हिस्से के रूप में विभिन्न एनालिटिक्स पैकेज स्थापित कर सकते हैं, और वे आपको बताएंगे कि विभिन्न लोकप्रिय ब्राउज़रों द्वारा ब्राउज़रों का सबसे अधिक उपयोग क्या किया जाता है।\nब्राउजर इक्स्टेन्शन\nआप ब्राउज़र एक्सटेंशन क्यों बनाना चाहेंगे",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21433,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 693,
    "chunk_index": 4,
    "total_chunks": 17
  },
  {
    "id": "d8e516b4c8851b1b2c227e5080a644d7",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "ब्राउज़र एक्सटेंशन प्रोजेक्ट पार्ट 1: ब्राउज़रों के बारे में सभी",
    "content": "अपने उपयोगकर्ताओं का सर्वोत्तम समर्थन कर सकें। ✅ आप कैसे बता सकते हैं कि आपकी वेब साइट के उपयोगकर्ता आधार के साथ कौन से ब्राउज़र सबसे लोकप्रिय हैंअपने एनालिटिक्स की जाँच करें - आप अपनी वेब डेवलपमेंट प्रक्रिया के हिस्से के रूप में विभिन्न एनालिटिक्स पैकेज स्थापित कर सकते हैं, और वे आपको बताएंगे कि विभिन्न लोकप्रिय ब्राउज़रों द्वारा ब्राउज़रों का सबसे अधिक उपयोग क्या किया जाता है। ब्राउजर इक्स्टेन्शन आप ब्राउज़र एक्सटेंशन क्यों बनाना चाहेंगेजब आप उन कार्यों तक त्वरित पहुँच की आवश्यकता होती है, जिन्हें आप दोहराना चाहते हैं, तो आपके ब्राउज़र से जुड़ना एक आसान बात है। उदाहरण के लिए, यदि आप अपने आप को विभिन्न वेब पृष्ठों पर रंगों की जांच करने की आवश्यकता महसूस करते हैं, जिनके साथ आप बातचीत करते हैं, तो आप एक रंग-पिकर ब्राउज़र एक्सटेंशन स्थापित कर सकते हैं। यदि आपको पासवर्ड याद रखने में समस्या है, तो आप पासवर्ड-प्रबंधन ब्राउज़र एक्सटेंशन का उपयोग कर सकते हैं।\nब्राउज़र एक्सटेंशन को विकसित करने में बहुत मज़ा आता है। वे उन कार्यों की एक सीमित संख्या का प्रबंधन करते हैं जो वे अच्छा प्रदर्शन करते हैं।\n✅ आपके पसंदीदा ब्राउज़र एक्सटेंशन क्या हैं",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21433,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 1051,
    "chunk_index": 5,
    "total_chunks": 17
  },
  {
    "id": "4c5dae2c174c0a5ac126972c55c1ae7f",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "ब्राउज़र एक्सटेंशन प्रोजेक्ट पार्ट 1: ब्राउज़रों के बारे में सभी",
    "content": "की जांच करने की आवश्यकता महसूस करते हैं, जिनके साथ आप बातचीत करते हैं, तो आप एक रंग-पिकर ब्राउज़र एक्सटेंशन स्थापित कर सकते हैं। यदि आपको पासवर्ड याद रखने में समस्या है, तो आप पासवर्ड-प्रबंधन ब्राउज़र एक्सटेंशन का उपयोग कर सकते हैं। ब्राउज़र एक्सटेंशन को विकसित करने में बहुत मज़ा आता है। वे उन कार्यों की एक सीमित संख्या का प्रबंधन करते हैं जो वे अच्छा प्रदर्शन करते हैं। ✅ आपके पसंदीदा ब्राउज़र एक्सटेंशन क्या हैंवे कौन से कार्य करते हैं",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21433,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 442,
    "chunk_index": 6,
    "total_chunks": 17
  },
  {
    "id": "8d0e915bb0c2685bd65e8d82e9b7054a",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "ब्राउज़र एक्सटेंशन प्रोजेक्ट पार्ट 1: ब्राउज़रों के बारे में सभी",
    "content": "महसूस करते हैं, जिनके साथ आप बातचीत करते हैं, तो आप एक रंग-पिकर ब्राउज़र एक्सटेंशन स्थापित कर सकते हैं। यदि आपको पासवर्ड याद रखने में समस्या है, तो आप पासवर्ड-प्रबंधन ब्राउज़र एक्सटेंशन का उपयोग कर सकते हैं। ब्राउज़र एक्सटेंशन को विकसित करने में बहुत मज़ा आता है। वे उन कार्यों की एक सीमित संख्या का प्रबंधन करते हैं जो वे अच्छा प्रदर्शन करते हैं। ✅ आपके पसंदीदा ब्राउज़र एक्सटेंशन क्या हैंवे कौन से कार्य करते हैंएक्सटेंशन स्थापित करना\nनिर्माण शुरू करने से पहले, एक ब्राउज़र एक्सटेंशन के निर्माण और तैनाती की प्रक्रिया पर एक नज़र डालें। हालांकि प्रत्येक ब्राउज़र इस कार्य को प्रबंधित करने के तरीके में थोड़ा भिन्न होता है, प्रक्रिया Chrome और फ़ायरफ़ॉक्स पर इस उदाहरण के समान है एज पर:\nसंक्षेप में, प्रक्रिया होगी:\nnpm run build के साथ अपना इक्स्टेन्शन बनाए\nशीर्ष पर दाईं ओर \"Settings and more\" बटन (`",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21433,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 760,
    "chunk_index": 7,
    "total_chunks": 17
  },
  {
    "id": "c24049beab00b4020cc8adcdf304653a",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "ब्राउज़र एक्सटेंशन प्रोजेक्ट पार्ट 1: ब्राउज़रों के बारे में सभी",
    "content": "एक्सटेंशन क्या हैंवे कौन से कार्य करते हैंएक्सटेंशन स्थापित करना निर्माण शुरू करने से पहले, एक ब्राउज़र एक्सटेंशन के निर्माण और तैनाती की प्रक्रिया पर एक नज़र डालें। हालांकि प्रत्येक ब्राउज़र इस कार्य को प्रबंधित करने के तरीके में थोड़ा भिन्न होता है, प्रक्रिया Chrome और फ़ायरफ़ॉक्स पर इस उदाहरण के समान है एज पर: संक्षेप में, प्रक्रिया होगी: npm run build के साथ अपना इक्स्टेन्शन बनाए शीर्ष पर दाईं ओर \"Settings and more\" बटन (`'आइकन) का उपयोग करके एक्सटेंशन फलक में ब्राउज़र में नेविगेट करें\nयदि यह एक नया इंस्टॉलेशन है, तो इसके बिल्ड फोल्डर से एक नया एक्सटेंशन अपलोड करने के लिए load unpacked चुनें (हमारे मामले में यह /dist) है\nया, यदि आप पहले से स्थापित एक्सटेंशन को पुनः लोड कर रहे हैं तो reload पर क्लिक करें\nये निर्देश आपके द्वारा बनाए गए एक्सटेंशन से संबंधित हैं; प्रत्येक ब्राउज़र से जुड़े ब्राउज़र एक्सटेंशन स्टोर पर जारी किए गए एक्सटेंशन को स्थापित करने के लिए, आपको उन स्टोर पर नेविगेट करना चाहिए और अपनी पसंद का एक्सटेंशन इंस्टॉल करना चाहिए।\nशुरू हो जाओ\nआप एक ऐसे ब्राउज़र एक्सटेंशन का निर्माण करने जा रहे हैं जो आपके क्षेत्र के कार्बन पदचिह्न को प्रदर्शित करता है, जो आपके क्षेत्र के ऊर्जा उपयोग और ऊर्जा के स्रोत को दर्शाता है। एक्सटेंशन में एक फ़ॉर्म होगा जो एपीआई की एकत्र करता है ताकि आप एक्सेस कर सकें\nCO2 सिग्नल की एपीआई।\nआपको चाहिए:\nएज एपीआई की; इस पृष्ठ पर बॉक्स में अपना ईमेल दर्ज करें और एक आपको भेजा जाएगा\nअपने क्षेत्र के लिए कोड विद्युत मानचित्र के अनुरूप (बोस्टन में, उदाहरण के लिए, I) 'US-NEISO' का उपयोग करें)।\nस्टार्टर कोड। start फ़ोल्डर डाउनलोड करें; आप इस फ़ोल्डर में कोड पूरा कर लेंगे।\nएनपीएम -एनपीएम एक पैकेज प्रबंधन उपकरण है; इसे स्थानीय रूप से स्थापित करें और आपके वेब एसेट द्वारा उपयोग के लिए package",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21433,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 1557,
    "chunk_index": 8,
    "total_chunks": 17
  },
  {
    "id": "b04bcbbe7a33c18b9116c4a087277ef9",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "ब्राउज़र एक्सटेंशन प्रोजेक्ट पार्ट 1: ब्राउज़रों के बारे में सभी",
    "content": "की एपीआई। आपको चाहिए: एज एपीआई की; इस पृष्ठ पर बॉक्स में अपना ईमेल दर्ज करें और एक आपको भेजा जाएगा अपने क्षेत्र के लिए कोड विद्युत मानचित्र के अनुरूप (बोस्टन में, उदाहरण के लिए, I) 'US-NEISO' का उपयोग करें)। स्टार्टर कोड। start फ़ोल्डर डाउनलोड करें; आप इस फ़ोल्डर में कोड पूरा कर लेंगे। एनपीएम -एनपीएम एक पैकेज प्रबंधन उपकरण है; इसे स्थानीय रूप से स्थापित करें और आपके वेब एसेट द्वारा उपयोग के लिए packagejson फ़ाइल में सूचीबद्ध पैकेज इंस्टॉल किए जाएंगे\n✅ इस उत्कृष्ट लर्न मॉड्यूल में पैकेज प्रबंधन के बारे में अधिक जानें\nकोडबेस के माध्यम से देखने के लिए एक मिनट लें:\ndist\n-|manifest",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21433,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 563,
    "chunk_index": 9,
    "total_chunks": 17
  },
  {
    "id": "0c9b0b7f81ad7c773f2f52a9ad057b12",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "ब्राउज़र एक्सटेंशन प्रोजेक्ट पार्ट 1: ब्राउज़रों के बारे में सभी",
    "content": "उदाहरण के लिए, I) 'US-NEISO' का उपयोग करें)। स्टार्टर कोड। start फ़ोल्डर डाउनलोड करें; आप इस फ़ोल्डर में कोड पूरा कर लेंगे। एनपीएम -एनपीएम एक पैकेज प्रबंधन उपकरण है; इसे स्थानीय रूप से स्थापित करें और आपके वेब एसेट द्वारा उपयोग के लिए packagejson फ़ाइल में सूचीबद्ध पैकेज इंस्टॉल किए जाएंगे ✅ इस उत्कृष्ट लर्न मॉड्यूल में पैकेज प्रबंधन के बारे में अधिक जानें कोडबेस के माध्यम से देखने के लिए एक मिनट लें: dist -|manifestjson (डिफ़ॉल्ट यहा सेट करे)\n-|index html (फ्रंट-एंड HTML मार्कअप यहाँ)\n-|background js (पृष्ठभूमि JS यहाँ)\n-|main js (बिलट JS)\nsrc\n-|index",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21433,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 10,
    "total_chunks": 17
  },
  {
    "id": "5769f8f2478693623a2a1f855df9a018",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "ब्राउज़र एक्सटेंशन प्रोजेक्ट पार्ट 1: ब्राउज़रों के बारे में सभी",
    "content": "लेंगे। एनपीएम -एनपीएम एक पैकेज प्रबंधन उपकरण है; इसे स्थानीय रूप से स्थापित करें और आपके वेब एसेट द्वारा उपयोग के लिए packagejson फ़ाइल में सूचीबद्ध पैकेज इंस्टॉल किए जाएंगे ✅ इस उत्कृष्ट लर्न मॉड्यूल में पैकेज प्रबंधन के बारे में अधिक जानें कोडबेस के माध्यम से देखने के लिए एक मिनट लें: dist -|manifestjson (डिफ़ॉल्ट यहा सेट करे) -|index html (फ्रंट-एंड HTML मार्कअप यहाँ) -|background js (पृष्ठभूमि JS यहाँ) -|main js (बिलट JS) src -|indexjs (आपका JS कोड यहा जाता है)\n✅ एक बार जब आपके पास आपकी एपीआई की और क्षेत्र कोड काम आ जाए, तो भविष्य में उपयोग के लिए उन्हें किसी नोट में स्टोर करें।\nएक्सटेंशन के लिए HTML बनाएँ\nइस विस्तार के दो विचार हैं। एपीआई की और क्षेत्र कोड इकट्ठा करने के लिए एक:\nऔर क्षेत्र के कार्बन उपयोग को प्रदर्शित करने वाला दूसरा:\nआइए एचटीएमएल के निर्माण के लिए फॉर्म के साथ शुरुआत करें और इसे सीएसएस के साथ स्टाइल करें।\n/dist फ़ोल्डर में, आप एक फॉर्म और एक परिणाम क्षेत्र का निर्माण करेंगे। index",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21433,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 839,
    "chunk_index": 11,
    "total_chunks": 17
  },
  {
    "id": "c464f9727729d2250e8208ddfe22a227",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "ब्राउज़र एक्सटेंशन प्रोजेक्ट पार्ट 1: ब्राउज़रों के बारे में सभी",
    "content": "जाए, तो भविष्य में उपयोग के लिए उन्हें किसी नोट में स्टोर करें। एक्सटेंशन के लिए HTML बनाएँ इस विस्तार के दो विचार हैं। एपीआई की और क्षेत्र कोड इकट्ठा करने के लिए एक: और क्षेत्र के कार्बन उपयोग को प्रदर्शित करने वाला दूसरा: आइए एचटीएमएल के निर्माण के लिए फॉर्म के साथ शुरुआत करें और इसे सीएसएस के साथ स्टाइल करें। /dist फ़ोल्डर में, आप एक फॉर्म और एक परिणाम क्षेत्र का निर्माण करेंगे। indexhtml फ़ाइल में, परिसीमित प्रपत्र क्षेत्र को आबाद करें:\n```HTML\nNew",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21433,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 421,
    "chunk_index": 12,
    "total_chunks": 17
  },
  {
    "id": "4666665ddd2c33d58833ca37f8836961",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "ब्राउज़र एक्सटेंशन प्रोजेक्ट पार्ट 1: ब्राउज़रों के बारे में सभी",
    "content": "में स्टोर करें। एक्सटेंशन के लिए HTML बनाएँ इस विस्तार के दो विचार हैं। एपीआई की और क्षेत्र कोड इकट्ठा करने के लिए एक: और क्षेत्र के कार्बन उपयोग को प्रदर्शित करने वाला दूसरा: आइए एचटीएमएल के निर्माण के लिए फॉर्म के साथ शुरुआत करें और इसे सीएसएस के साथ स्टाइल करें। /dist फ़ोल्डर में, आप एक फॉर्म और एक परिणाम क्षेत्र का निर्माण करेंगे। indexhtml फ़ाइल में, परिसीमित प्रपत्र क्षेत्र को आबाद करें: ```HTML NewAdd your Information\nRegion Name\nYour API Key from tmrow\nSubmit\n```\nयह वह रूप है जहां आपकी सहेजी गई जानकारी इनपुट होगी और स्थानीय संग्रहण में सहेजी जाएगी।\nअगला, परिणाम क्षेत्र बनाएं; अंतिम फॉर्म टैग के तहत, कुछ divs जोड़ें:\n```HTML\nloading",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21433,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 551,
    "chunk_index": 13,
    "total_chunks": 17
  },
  {
    "id": "ee2574baac407e3e5576d61b566d4df1",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "ब्राउज़र एक्सटेंशन प्रोजेक्ट पार्ट 1: ब्राउज़रों के बारे में सभी",
    "content": "साथ शुरुआत करें और इसे सीएसएस के साथ स्टाइल करें। /dist फ़ोल्डर में, आप एक फॉर्म और एक परिणाम क्षेत्र का निर्माण करेंगे। indexhtml फ़ाइल में, परिसीमित प्रपत्र क्षेत्र को आबाद करें: ```HTML NewAdd your Information Region Name Your API Key from tmrow Submit ``` यह वह रूप है जहां आपकी सहेजी गई जानकारी इनपुट होगी और स्थानीय संग्रहण में सहेजी जाएगी। अगला, परिणाम क्षेत्र बनाएं; अंतिम फॉर्म टैग के तहत, कुछ divs जोड़ें: ```HTML loadingRegion:\nCarbon Usage:\nFossil Fuel Percentage:\nChange region\n```\nइस बिंदु पर, आप एक निर्माण की कोशिश कर सकते हैं। इस एक्सटेंशन के पैकेज निर्भरता को स्थापित करना सुनिश्चित करें:\nnpm install\nयह कमांड आपके एक्सटेंशन के निर्माण की प्रक्रिया के लिए वेबपैक स्थापित करने के लिए, npm पैकेज मैनेजर का उपयोग करेगा। वेबपैक एक बंडल है जो संकलन कोड को संभालता है। आप इस प्रक्रिया के आउटपुट को /dist/main",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21433,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 643,
    "chunk_index": 14,
    "total_chunks": 17
  },
  {
    "id": "661a43642e3a63199d2c6fa8d7bc179b",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "ब्राउज़र एक्सटेंशन प्रोजेक्ट पार्ट 1: ब्राउज़रों के बारे में सभी",
    "content": "के तहत, कुछ divs जोड़ें: ```HTML loadingRegion: Carbon Usage: Fossil Fuel Percentage: Change region ``` इस बिंदु पर, आप एक निर्माण की कोशिश कर सकते हैं। इस एक्सटेंशन के पैकेज निर्भरता को स्थापित करना सुनिश्चित करें: npm install यह कमांड आपके एक्सटेंशन के निर्माण की प्रक्रिया के लिए वेबपैक स्थापित करने के लिए, npm पैकेज मैनेजर का उपयोग करेगा। वेबपैक एक बंडल है जो संकलन कोड को संभालता है। आप इस प्रक्रिया के आउटपुट को /dist/mainjs में देखकर देख सकते हैं - आप देख सकते हैं कि कोड को बंडल कर दिया गया है।\nअभी के लिए, एक्सटेंशन का निर्माण होना चाहिए और, यदि आप इसे एज में एक्सटेंशन के रूप में तैनात करते हैं, तो आपको एक फॉर्म बड़े करीने से दिखाई देगा।\nबधाई हो, आपने ब्राउज़र एक्सटेंशन बनाने की दिशा में पहला कदम उठाया है। बाद के पाठों में, आप इसे और अधिक कार्यात्मक और उपयोगी बनाएंगे।\n🚀 चुनौती\nब्राउज़र एक्सटेंशन स्टोर पर एक नज़र डालें और अपने ब्राउज़र में एक इंस्टॉल करें। आप इसकी फाइलों को दिलचस्प तरीके से जांच सकते हैं। तुम क्या खोजते हो",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21433,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 853,
    "chunk_index": 15,
    "total_chunks": 17
  },
  {
    "id": "8de6c43e68fa2c6e64fbf05b37189914",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "ब्राउज़र एक्सटेंशन प्रोजेक्ट पार्ट 1: ब्राउज़रों के बारे में सभी",
    "content": "यदि आप इसे एज में एक्सटेंशन के रूप में तैनात करते हैं, तो आपको एक फॉर्म बड़े करीने से दिखाई देगा। बधाई हो, आपने ब्राउज़र एक्सटेंशन बनाने की दिशा में पहला कदम उठाया है। बाद के पाठों में, आप इसे और अधिक कार्यात्मक और उपयोगी बनाएंगे। 🚀 चुनौती ब्राउज़र एक्सटेंशन स्टोर पर एक नज़र डालें और अपने ब्राउज़र में एक इंस्टॉल करें। आप इसकी फाइलों को दिलचस्प तरीके से जांच सकते हैं। तुम क्या खोजते होव्याख्यान उपरांत प्रश्नोत्तरी\nव्याख्यान उपरांत प्रश्नोत्तरी\nसमीक्षा और स्व अध्ययन\nइस पाठ में आपने वेब ब्राउज़र के इतिहास के बारे में थोड़ा सीखा; वर्ल्ड वाइड वेब के अन्वेषकों ने इसके इतिहास के बारे में और अधिक पढ़कर इसका उपयोग कैसे किया, इसके बारे में जानने का यह अवसर लें। कुछ उपयोगी साइटों में शामिल हैं:\nवेब ब्राउजर का इतिहास\nवेब का इतिहास\nटिम बर्नर्स-ली के साथ एक इंटरव्यू\nअसाइनमेंट\nअपने इक्स्टेन्शन को रीस्टाइल करें",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21433,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 823,
    "chunk_index": 16,
    "total_chunks": 17
  },
  {
    "id": "018d05fb9e8410809b8ebc9f31a47f71",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "브라우저 확장 프로젝트 파트 1: 브라우저에 대한 모든 것",
    "content": "브라우저 확장 프로젝트 파트 1: 브라우저에 대한 모든 것\nSketchnote by Wassim Chegham\n강의 전 퀴즈\n[Pre-lecture quiz]Pre-lecture quiz\n소개\n브라우저 확장은 브라우저에 추가적인 기능을 추가합니다 그러나 빌드하기 전에, 브라우저가 작동하는 방식에 대해 약간 알아야 합니다 브라우저에 대하여\n이 강의의 시리즈에서는, Chrome, Firefox와 Edge 브라우저에서 작동하는 브라우저 확장을 빌드하는 방법을 배웁니다 이 부분에서는, 브라우저가 작동하는 방식을 발견하고 브라우저 확장의 요소를 발판으로 딛습니다 그러나 브라우저는 정확히 무엇일까요 엔드 유저가 서버에서 콘텐츠에 접근하여 웹 페이지로 볼 수 있도록 해주는 소프트웨어 애플리케이션입니다 ✅ 약간의 역사: 첫번째 브라우저는 'WorldWideWeb'라고 불렸으며 Sir Timothy Berners-Lee가 1990년에 만들었습니다 Some early browsers, via Karen McGrane\n사용자가 URL(Uniform Resource Locator) 주소를 사용하여 인터넷에 연결하고, http 혹은 https 주소를 통해 Hypertext Transfer Protocol을 사용하면, 브라우저가 웹 서버와 통신하여 웹 페이지를 가져옵니다",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9886,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 454,
    "chunk_index": 0,
    "total_chunks": 12
  },
  {
    "id": "6c8b79e54508a501a31f38c63e9f932f",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "브라우저 확장 프로젝트 파트 1: 브라우저에 대한 모든 것",
    "content": "작동하는 브라우저 확장을 빌드하는 방법을 배웁니다 이 부분에서는, 브라우저가 작동하는 방식을 발견하고 브라우저 확장의 요소를 발판으로 딛습니다 그러나 브라우저는 정확히 무엇일까요 엔드 유저가 서버에서 콘텐츠에 접근하여 웹 페이지로 볼 수 있도록 해주는 소프트웨어 애플리케이션입니다 ✅ 약간의 역사: 첫번째 브라우저는 'WorldWideWeb'라고 불렸으며 Sir Timothy Berners-Lee가 1990년에 만들었습니다 Some early browsers, via Karen McGrane 사용자가 URL(Uniform Resource Locator) 주소를 사용하여 인터넷에 연결하고, http 혹은 https 주소를 통해 Hypertext Transfer Protocol을 사용하면, 브라우저가 웹 서버와 통신하여 웹 페이지를 가져옵니다이 시점에서, 브라우저의 렌더링 엔진은 모바일 폰, 데스크톱 혹은 노트북과 같은 사용자의 장치에 출력합니다 또한 브라우저는 콘텐츠를 캐시할 수 있으므로 매번 서버에서 찾을 필요가 없습니다 브라우징 활동 기록을 기록할 때 필요한 정보가 포함된 작은 데이터인 'cookies'를 저장할 수 있습니다 브라우저에 대해 알아야 할 중요한 점은 브라우저가 모두 같지 않다는 것입니다",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9886,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 1,
    "total_chunks": 12
  },
  {
    "id": "6e58a2068ba9f58dcf7bc85aa484955f",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "브라우저 확장 프로젝트 파트 1: 브라우저에 대한 모든 것",
    "content": "via Karen McGrane 사용자가 URL(Uniform Resource Locator) 주소를 사용하여 인터넷에 연결하고, http 혹은 https 주소를 통해 Hypertext Transfer Protocol을 사용하면, 브라우저가 웹 서버와 통신하여 웹 페이지를 가져옵니다이 시점에서, 브라우저의 렌더링 엔진은 모바일 폰, 데스크톱 혹은 노트북과 같은 사용자의 장치에 출력합니다 또한 브라우저는 콘텐츠를 캐시할 수 있으므로 매번 서버에서 찾을 필요가 없습니다 브라우징 활동 기록을 기록할 때 필요한 정보가 포함된 작은 데이터인 'cookies'를 저장할 수 있습니다 브라우저에 대해 알아야 할 중요한 점은 브라우저가 모두 같지 않다는 것입니다각 브라우저에는 장점과 단점이 있으며, 전문 웹 개발자는 웹 페이지가 크로스 브라우저로 잘 작동하도록 만드는 방법을 이해해야 합니다 여기에는 모바일 폰과 같은 작은 뷰포트 제어와 오프라인 처리 작업을 포함합니다 선호하는 브라우저에 책갈피를 추가한다면 정말 유용한 웹 사이트는 caniuse com입니다 웹 페이지를 만들 때, caniuse의 지원 기술 목록을 사용하면 사용자의 브라우저를 가장 잘 지원할 수 있습니다",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9886,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 454,
    "chunk_index": 2,
    "total_chunks": 12
  },
  {
    "id": "cbc0d5f9519037600b8a3974dfc64f96",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "브라우저 확장 프로젝트 파트 1: 브라우저에 대한 모든 것",
    "content": "기록할 때 필요한 정보가 포함된 작은 데이터인 'cookies'를 저장할 수 있습니다 브라우저에 대해 알아야 할 중요한 점은 브라우저가 모두 같지 않다는 것입니다각 브라우저에는 장점과 단점이 있으며, 전문 웹 개발자는 웹 페이지가 크로스 브라우저로 잘 작동하도록 만드는 방법을 이해해야 합니다 여기에는 모바일 폰과 같은 작은 뷰포트 제어와 오프라인 처리 작업을 포함합니다 선호하는 브라우저에 책갈피를 추가한다면 정말 유용한 웹 사이트는 caniuse com입니다 웹 페이지를 만들 때, caniuse의 지원 기술 목록을 사용하면 사용자의 브라우저를 가장 잘 지원할 수 있습니다✅ 웹 사이트의 사용자 층에서 가장 인기있는 브라우저가 어떤 것인지 어떻게 알 수 있나요 analytics를 확인해보세요 - 웹 개발 프로세스의 일부로 다양한 분석 패키지를 설치할 수 있으며, 다양한 인기 브라우저에서 가장 많이 사용되는 브라우저를 알려줍니다 브라우저 확장\n브라우저 확장을 만드려는 이유는 무엇입니까 반복 작업을 빠르게 할 때 브라우저로 연결하면 편리합니다",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9886,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 3,
    "total_chunks": 12
  },
  {
    "id": "eb6209681be219a92f07145f97bba392",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "브라우저 확장 프로젝트 파트 1: 브라우저에 대한 모든 것",
    "content": "포함합니다 선호하는 브라우저에 책갈피를 추가한다면 정말 유용한 웹 사이트는 caniuse com입니다 웹 페이지를 만들 때, caniuse의 지원 기술 목록을 사용하면 사용자의 브라우저를 가장 잘 지원할 수 있습니다✅ 웹 사이트의 사용자 층에서 가장 인기있는 브라우저가 어떤 것인지 어떻게 알 수 있나요 analytics를 확인해보세요 - 웹 개발 프로세스의 일부로 다양한 분석 패키지를 설치할 수 있으며, 다양한 인기 브라우저에서 가장 많이 사용되는 브라우저를 알려줍니다 브라우저 확장 브라우저 확장을 만드려는 이유는 무엇입니까 반복 작업을 빠르게 할 때 브라우저로 연결하면 편리합니다예를 들어, 상호 작용하는 다양한 웹 페이지에서 색상을 확인하는 경우에는, color-picker 브라우저 확장을 설치할 수 있습니다 비밀번호를 기억할 때 어려운 경우에는, password-management 브라우저 확장을 설치할 수 있습니다 브라우저 확장도 재미있게 개발할 수 있습니다 제한된 수의 작업을 잘 관리하는 경향이 있습니다 ✅ 가장 좋아하는 브라우저 확장은 무엇입니까 어떤 작업을 수행하나요",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9886,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 4,
    "total_chunks": 12
  },
  {
    "id": "20a23907cb565da69a143ca6e480bc86",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "브라우저 확장 프로젝트 파트 1: 브라우저에 대한 모든 것",
    "content": "분석 패키지를 설치할 수 있으며, 다양한 인기 브라우저에서 가장 많이 사용되는 브라우저를 알려줍니다 브라우저 확장 브라우저 확장을 만드려는 이유는 무엇입니까 반복 작업을 빠르게 할 때 브라우저로 연결하면 편리합니다예를 들어, 상호 작용하는 다양한 웹 페이지에서 색상을 확인하는 경우에는, color-picker 브라우저 확장을 설치할 수 있습니다 비밀번호를 기억할 때 어려운 경우에는, password-management 브라우저 확장을 설치할 수 있습니다 브라우저 확장도 재미있게 개발할 수 있습니다 제한된 수의 작업을 잘 관리하는 경향이 있습니다 ✅ 가장 좋아하는 브라우저 확장은 무엇입니까 어떤 작업을 수행하나요확장 설치하기\n만들기 전에, 브라우저 확장을 작성하고 배포하는 프로세스를 찾아보세요 브라우저마다 이 작업을 관리하는 방법이 다소 다르지만, 프로세스는 Chrome과 Firefox와 같이 Edge의 예제와 유사합니다:\n본질적으로, 프로세스는 다음과 같습니다:\nnpm build를 사용하여 확장을 빌드합니다\n우측 상단의",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9886,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 433,
    "chunk_index": 5,
    "total_chunks": 12
  },
  {
    "id": "bab0004f1aa844e4320b6edb06e8bf3a",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "브라우저 확장 프로젝트 파트 1: 브라우저에 대한 모든 것",
    "content": "색상을 확인하는 경우에는, color-picker 브라우저 확장을 설치할 수 있습니다 비밀번호를 기억할 때 어려운 경우에는, password-management 브라우저 확장을 설치할 수 있습니다 브라우저 확장도 재미있게 개발할 수 있습니다 제한된 수의 작업을 잘 관리하는 경향이 있습니다 ✅ 가장 좋아하는 브라우저 확장은 무엇입니까 어떤 작업을 수행하나요확장 설치하기 만들기 전에, 브라우저 확장을 작성하고 배포하는 프로세스를 찾아보세요 브라우저마다 이 작업을 관리하는 방법이 다소 다르지만, 프로세스는 Chrome과 Firefox와 같이 Edge의 예제와 유사합니다: 본질적으로, 프로세스는 다음과 같습니다: npm build를 사용하여 확장을 빌드합니다 우측 상단의아이콘을 사용하여 브라우저에서 extensions 패널로 이동합니다\n새로 설치하는 경우, load unpacked를 선택하여 build 폴더(이 경우에는 /dist)에서 새 확장을 올립니다\n또는, 이미 설치된 확장 프로그램을 다시 불러오는 경우에 reload를 클릭합니다\n✅ 이 설명서는 직접 만든 확장과 관련이 있습니다; 각 브라우저와 관련된 브라우저 확장 저장소에 출시된 확장을 설치하려면, 해당 stores로 이동하여 원하는 확장을 설치해야 합니다",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9886,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 6,
    "total_chunks": 12
  },
  {
    "id": "69acbf9c88aaa21150b94d3550435fff",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "브라우저 확장 프로젝트 파트 1: 브라우저에 대한 모든 것",
    "content": "이 작업을 관리하는 방법이 다소 다르지만, 프로세스는 Chrome과 Firefox와 같이 Edge의 예제와 유사합니다: 본질적으로, 프로세스는 다음과 같습니다: npm build를 사용하여 확장을 빌드합니다 우측 상단의아이콘을 사용하여 브라우저에서 extensions 패널로 이동합니다 새로 설치하는 경우, load unpacked를 선택하여 build 폴더(이 경우에는 /dist)에서 새 확장을 올립니다 또는, 이미 설치된 확장 프로그램을 다시 불러오는 경우에 reload를 클릭합니다 ✅ 이 설명서는 직접 만든 확장과 관련이 있습니다; 각 브라우저와 관련된 브라우저 확장 저장소에 출시된 확장을 설치하려면, 해당 stores로 이동하여 원하는 확장을 설치해야 합니다시작하기\n지역 탄소 발자국을 표시하는 브라우저 확장을 만들어서 지역의 에너지 사용량과 소스를 표시합니다 확장에는 CO2 Signal의 API에 접근할 수 있도록 API 키를 모으는 폼이 있습니다 필요합니다:\nan API key; 이 페이지의 상자에 이메일을 입력하면 이메일이 전송됩니다 Electricity Map에 해당하는 code for your region (보스턴에서 예시를 들면, 'US-NEISO'를 사용합니다) starter code start 폴더를 다운로드하세요; 이 폴더에서 코드를 완성하게됩니다 NPM - NPM은 패키지 관리 도구입니다 로컬에 설치하고 package json 파일에 나열된 패키지를 웹 어셋에서 사용하도록 설치합니다",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9886,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 7,
    "total_chunks": 12
  },
  {
    "id": "4129b14c97e90017e6501b29ac360076",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "브라우저 확장 프로젝트 파트 1: 브라우저에 대한 모든 것",
    "content": "확장을 설치해야 합니다시작하기 지역 탄소 발자국을 표시하는 브라우저 확장을 만들어서 지역의 에너지 사용량과 소스를 표시합니다 확장에는 CO2 Signal의 API에 접근할 수 있도록 API 키를 모으는 폼이 있습니다 필요합니다: an API key; 이 페이지의 상자에 이메일을 입력하면 이메일이 전송됩니다 Electricity Map에 해당하는 code for your region (보스턴에서 예시를 들면, 'US-NEISO'를 사용합니다) starter code start 폴더를 다운로드하세요; 이 폴더에서 코드를 완성하게됩니다 NPM - NPM은 패키지 관리 도구입니다 로컬에 설치하고 package json 파일에 나열된 패키지를 웹 어셋에서 사용하도록 설치합니다✅ 이 excellent Learn module에서 패키지 관리에 대해 자세히 알아보세요\n잠시 시간을 내어 코드베이스를 보세요:\ndist\n-|manifest json (defaults set here)\n-|index html (front-end HTML markup here)\n-|background js (background JS here)\n-|main js (built JS)\nsrc\n-|index js (your JS code goes here)\n✅ API 키와 지역 코드를 가지고 있다면, 나중에 다시 사용할 수 있도록 메모하세요 확장을 위한 HTML 제작하기\n이 확장은 두 화면을 가집니다 한 화면에는 API 키와 지역 코드를 수집합니다:\n그리고 두번째 화면에는 지역의 탄소 사용량을 출력합니다:\n이제 HTML 폼을 작성하고 CSS 스타일을 지정하는 것으로 시작하겠습니다 /dist 폴더에서, 폼과 결과 영역을 작성합니다 index",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9886,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 8,
    "total_chunks": 12
  },
  {
    "id": "ac35c0479210aaefb8458736acf5e950",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "브라우저 확장 프로젝트 파트 1: 브라우저에 대한 모든 것",
    "content": "here) -|index html (front-end HTML markup here) -|background js (background JS here) -|main js (built JS) src -|index js (your JS code goes here) ✅ API 키와 지역 코드를 가지고 있다면, 나중에 다시 사용할 수 있도록 메모하세요 확장을 위한 HTML 제작하기 이 확장은 두 화면을 가집니다 한 화면에는 API 키와 지역 코드를 수집합니다: 그리고 두번째 화면에는 지역의 탄소 사용량을 출력합니다: 이제 HTML 폼을 작성하고 CSS 스타일을 지정하는 것으로 시작하겠습니다 /dist 폴더에서, 폼과 결과 영역을 작성합니다 indexhtml 파일에서, 구분된 폼 영역을 채웁니다:\n```HTML\nNew Add your Information\nRegion Name\nYour API Key from tmrow\nSubmit\n```\n저장된 정보를 입력하고 로컬 저장소에 저장하는 양식입니다 다음, 결과 영역을 만듭니다; 마지막 폼 태그 아래에 약간의 div를 추가합니다:\n```HTML\nloading Region:\nCarbon Usage:\nFossil Fuel Percentage:\nChange region\n```\n이 시점에서 다시 빌드할 수 있습니다 이 확장의 패키지 의존성을 설치해야 합니다:\nnpm install\n이 명령은 Node 패키지 관리자인 npm을 사용하여, 확장의 빌드 프로세스를 위한 webpack을 설치합니다 Webpack은 컴파일 코드를 제어하는 bundler입니다 이 프로세스의 출력은 /dist/main js에서 볼 수 있습니다 - 코드가 번들로 제공됨을 알 수 있습니다 지금은, 확장이 빌드되어 확장으로 Edge에 배포된다면, 폼은 깔끔하게 출력됩니다",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9886,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 9,
    "total_chunks": 12
  },
  {
    "id": "2cdf9222019c8ca3fadc7e6c3c31d5c6",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "브라우저 확장 프로젝트 파트 1: 브라우저에 대한 모든 것",
    "content": "영역을 만듭니다; 마지막 폼 태그 아래에 약간의 div를 추가합니다: ```HTML loading Region: Carbon Usage: Fossil Fuel Percentage: Change region ``` 이 시점에서 다시 빌드할 수 있습니다 이 확장의 패키지 의존성을 설치해야 합니다: npm install 이 명령은 Node 패키지 관리자인 npm을 사용하여, 확장의 빌드 프로세스를 위한 webpack을 설치합니다 Webpack은 컴파일 코드를 제어하는 bundler입니다 이 프로세스의 출력은 /dist/main js에서 볼 수 있습니다 - 코드가 번들로 제공됨을 알 수 있습니다 지금은, 확장이 빌드되어 확장으로 Edge에 배포된다면, 폼은 깔끔하게 출력됩니다축하합니다, 브라우저 확장을 만들기 위한 첫 단계를 수행했습니다 이어지는 강의에서, 더 기능적이고 유용하게 만들 것입니다 🚀 도전\n브라우저 확장 저장소를 살펴보고 브라우저에 하나 설치하세요 흥미로운 방식으로 파일을 뜯어볼 수 있습니다 무엇을 발견할 수 있나요 강의 후 퀴즈\nPost-lecture quiz\n리뷰 & 자기주도 학습\n이 강의에서는 웹 브라우저의 역사에 대해 조금 배웠습니다; 이 기회에 역사를 더 많이 읽어보면서 World Wide Web의 탐험가들이 어떻게 사용했는지에 대해 알아보십시오",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9886,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 10,
    "total_chunks": 12
  },
  {
    "id": "6ac0938a54ff7e7aade8228d47829562",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "브라우저 확장 프로젝트 파트 1: 브라우저에 대한 모든 것",
    "content": "알 수 있습니다 지금은, 확장이 빌드되어 확장으로 Edge에 배포된다면, 폼은 깔끔하게 출력됩니다축하합니다, 브라우저 확장을 만들기 위한 첫 단계를 수행했습니다 이어지는 강의에서, 더 기능적이고 유용하게 만들 것입니다 🚀 도전 브라우저 확장 저장소를 살펴보고 브라우저에 하나 설치하세요 흥미로운 방식으로 파일을 뜯어볼 수 있습니다 무엇을 발견할 수 있나요 강의 후 퀴즈 Post-lecture quiz 리뷰 & 자기주도 학습 이 강의에서는 웹 브라우저의 역사에 대해 조금 배웠습니다; 이 기회에 역사를 더 많이 읽어보면서 World Wide Web의 탐험가들이 어떻게 사용했는지에 대해 알아보십시오유용한 사이트는 다음과 같습니다:\nThe History of Web Browsers\nHistory of the Web\nAn interview with Tim Berners-Lee\n과제\nRestyle your extension",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9886,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 333,
    "chunk_index": 11,
    "total_chunks": 12
  },
  {
    "id": "cd239767e63ee08aaa3e4cd06f28a827",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 1: ブラウザのすべて",
    "content": "ブラウザ拡張機能プロジェクト その 1: ブラウザのすべて\nSketchnote by Wassim Chegham\nレッスン前の小テスト\nレッスン前の小テスト\nイントロダクション\nブラウザ拡張機能はブラウザに機能を追加するものです。しかし、拡張機能を作る前に、ブラウザがどのように機能するのかを少し学んでおく必要があります。\nブラウザについて\nこの一連のレッスンでは、Chrome、Firefox、Edge ブラウザで動作するブラウザ拡張機能の構築方法を学びます。このパートでは、ブラウザがどのように動作するのかを理解し、ブラウザ拡張の要素を足場にしていきます。\nしかし、ブラウザとは正確には何でしょうか",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12218,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 281,
    "chunk_index": 0,
    "total_chunks": 18
  },
  {
    "id": "bc917b13956529bd09896c86fa52e1f0",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 1: ブラウザのすべて",
    "content": "ブラウザ拡張機能プロジェクト その 1: ブラウザのすべて\nSketchnote by Wassim Chegham\nレッスン前の小テスト\nレッスン前の小テスト\nイントロダクション\nブラウザ拡張機能はブラウザに機能を追加するものです。しかし、拡張機能を作る前に、ブラウザがどのように機能するのかを少し学んでおく必要があります。\nブラウザについて\nこの一連のレッスンでは、Chrome、Firefox、Edge ブラウザで動作するブラウザ拡張機能の構築方法を学びます。このパートでは、ブラウザがどのように動作するのかを理解し、ブラウザ拡張の要素を足場にしていきます。\nしかし、ブラウザとは正確には何でしょうかそれは、エンドユーザーがサーバーからコンテンツにアクセスして Web ページに表示することを可能にするソフトウェアアプリケーションです。\n✅ 少し歴史を紹介します: 最初のブラウザは 'WorldWideWeb' と呼ばれ、1990年にティモシー・バーナーズ・リー卿によって作成されました。\nいくつかの初期のブラウザは、Karen McGrane を経由しています。\nユーザーが URL (Uniform Resource Locator) アドレスを使用してインターネットに接続すると、通常は Hypertext Transfer Protocol を使用して http または https アドレスを経由して、ブラウザが Web サーバと通信して Web ページを取得します。\nこの時点で、ブラウザのレンダリングエンジンがユーザのデバイス (携帯電話、デスクトップ、ラップトップなど) にページを表示します。\nブラウザにはコンテンツをキャッシュする機能もあり、毎回サーバから取得する必要がありません。ブラウザは、ユーザーのブラウジング活動の履歴を記録したり、ユーザーの活動を保存するために使用される情報を含む小さなデータである「クッキー」を保存したりすることができます。\nブラウザについて覚えておくべき重要なことは、ブラウザはすべて同じではないということです。それぞれのブラウザには長所と短所があり、プロの Web 開発者は、Web ページをクロスブラウザでうまく動作させる方法を理解する必要があります。これには、携帯電話のような小さなビューポートやオフラインのユーザーへの対応も含まれます。\nあなたが使いたいブラウザにブックマークしておくべき本当に便利な Web サイトは、caniuse",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12218,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 904,
    "chunk_index": 1,
    "total_chunks": 18
  },
  {
    "id": "254017a1142c36deedb43d8184cf7acb",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 1: ブラウザのすべて",
    "content": "ブラウザ拡張機能プロジェクト その 1: ブラウザのすべて\nSketchnote by Wassim Chegham\nレッスン前の小テスト\nレッスン前の小テスト\nイントロダクション\nブラウザ拡張機能はブラウザに機能を追加するものです。しかし、拡張機能を作る前に、ブラウザがどのように機能するのかを少し学んでおく必要があります。\nブラウザについて\nこの一連のレッスンでは、Chrome、Firefox、Edge ブラウザで動作するブラウザ拡張機能の構築方法を学びます。このパートでは、ブラウザがどのように動作するのかを理解し、ブラウザ拡張の要素を足場にしていきます。\nしかし、ブラウザとは正確には何でしょうかそれは、エンドユーザーがサーバーからコンテンツにアクセスして Web ページに表示することを可能にするソフトウェアアプリケーションです。\n✅ 少し歴史を紹介します: 最初のブラウザは 'WorldWideWeb' と呼ばれ、1990年にティモシー・バーナーズ・リー卿によって作成されました。\nいくつかの初期のブラウザは、Karen McGrane を経由しています。\nユーザーが URL (Uniform Resource Locator) アドレスを使用してインターネットに接続すると、通常は Hypertext Transfer Protocol を使用して http または https アドレスを経由して、ブラウザが Web サーバと通信して Web ページを取得します。\nこの時点で、ブラウザのレンダリングエンジンがユーザのデバイス (携帯電話、デスクトップ、ラップトップなど) にページを表示します。\nブラウザにはコンテンツをキャッシュする機能もあり、毎回サーバから取得する必要がありません。ブラウザは、ユーザーのブラウジング活動の履歴を記録したり、ユーザーの活動を保存するために使用される情報を含む小さなデータである「クッキー」を保存したりすることができます。\nブラウザについて覚えておくべき重要なことは、ブラウザはすべて同じではないということです。それぞれのブラウザには長所と短所があり、プロの Web 開発者は、Web ページをクロスブラウザでうまく動作させる方法を理解する必要があります。これには、携帯電話のような小さなビューポートやオフラインのユーザーへの対応も含まれます。\nあなたが使いたいブラウザにブックマークしておくべき本当に便利な Web サイトは、caniusecom です。Web ページを作成する際には、caniuse のサポートされている技術のリストを利用すると、ユーザーを最大限にサポートすることができるので、非常に便利です。\n✅ どのブラウザがあなたの Web サイトのユーザーに最も人気があるのか、どのようにして知ることができるでしょうか",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12218,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1031,
    "chunk_index": 2,
    "total_chunks": 18
  },
  {
    "id": "c2aeb85269734be147e8e56a47d9fed3",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 1: ブラウザのすべて",
    "content": "ブラウザ拡張機能プロジェクト その 1: ブラウザのすべて\nSketchnote by Wassim Chegham\nレッスン前の小テスト\nレッスン前の小テスト\nイントロダクション\nブラウザ拡張機能はブラウザに機能を追加するものです。しかし、拡張機能を作る前に、ブラウザがどのように機能するのかを少し学んでおく必要があります。\nブラウザについて\nこの一連のレッスンでは、Chrome、Firefox、Edge ブラウザで動作するブラウザ拡張機能の構築方法を学びます。このパートでは、ブラウザがどのように動作するのかを理解し、ブラウザ拡張の要素を足場にしていきます。\nしかし、ブラウザとは正確には何でしょうかそれは、エンドユーザーがサーバーからコンテンツにアクセスして Web ページに表示することを可能にするソフトウェアアプリケーションです。\n✅ 少し歴史を紹介します: 最初のブラウザは 'WorldWideWeb' と呼ばれ、1990年にティモシー・バーナーズ・リー卿によって作成されました。\nいくつかの初期のブラウザは、Karen McGrane を経由しています。\nユーザーが URL (Uniform Resource Locator) アドレスを使用してインターネットに接続すると、通常は Hypertext Transfer Protocol を使用して http または https アドレスを経由して、ブラウザが Web サーバと通信して Web ページを取得します。\nこの時点で、ブラウザのレンダリングエンジンがユーザのデバイス (携帯電話、デスクトップ、ラップトップなど) にページを表示します。\nブラウザにはコンテンツをキャッシュする機能もあり、毎回サーバから取得する必要がありません。ブラウザは、ユーザーのブラウジング活動の履歴を記録したり、ユーザーの活動を保存するために使用される情報を含む小さなデータである「クッキー」を保存したりすることができます。\nブラウザについて覚えておくべき重要なことは、ブラウザはすべて同じではないということです。それぞれのブラウザには長所と短所があり、プロの Web 開発者は、Web ページをクロスブラウザでうまく動作させる方法を理解する必要があります。これには、携帯電話のような小さなビューポートやオフラインのユーザーへの対応も含まれます。\nあなたが使いたいブラウザにブックマークしておくべき本当に便利な Web サイトは、caniusecom です。Web ページを作成する際には、caniuse のサポートされている技術のリストを利用すると、ユーザーを最大限にサポートすることができるので、非常に便利です。\n✅ どのブラウザがあなたの Web サイトのユーザーに最も人気があるのか、どのようにして知ることができるでしょうかアナリティクスをチェックする - Web 開発プロセスの一環として様々なアナリティクスパッケージをインストールすることができ、様々な人気のあるブラウザで最も使用されているブラウザを教えてくれます。\nブラウザの拡張機能\nなぜブラウザ拡張機能を作ろうと思ったのでしょうか",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12218,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1172,
    "chunk_index": 3,
    "total_chunks": 18
  },
  {
    "id": "9323e0ecdcf80fa67e54fdfb534e5fef",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 1: ブラウザのすべて",
    "content": "ブラウザ拡張機能プロジェクト その 1: ブラウザのすべて\nSketchnote by Wassim Chegham\nレッスン前の小テスト\nレッスン前の小テスト\nイントロダクション\nブラウザ拡張機能はブラウザに機能を追加するものです。しかし、拡張機能を作る前に、ブラウザがどのように機能するのかを少し学んでおく必要があります。\nブラウザについて\nこの一連のレッスンでは、Chrome、Firefox、Edge ブラウザで動作するブラウザ拡張機能の構築方法を学びます。このパートでは、ブラウザがどのように動作するのかを理解し、ブラウザ拡張の要素を足場にしていきます。\nしかし、ブラウザとは正確には何でしょうかそれは、エンドユーザーがサーバーからコンテンツにアクセスして Web ページに表示することを可能にするソフトウェアアプリケーションです。\n✅ 少し歴史を紹介します: 最初のブラウザは 'WorldWideWeb' と呼ばれ、1990年にティモシー・バーナーズ・リー卿によって作成されました。\nいくつかの初期のブラウザは、Karen McGrane を経由しています。\nユーザーが URL (Uniform Resource Locator) アドレスを使用してインターネットに接続すると、通常は Hypertext Transfer Protocol を使用して http または https アドレスを経由して、ブラウザが Web サーバと通信して Web ページを取得します。\nこの時点で、ブラウザのレンダリングエンジンがユーザのデバイス (携帯電話、デスクトップ、ラップトップなど) にページを表示します。\nブラウザにはコンテンツをキャッシュする機能もあり、毎回サーバから取得する必要がありません。ブラウザは、ユーザーのブラウジング活動の履歴を記録したり、ユーザーの活動を保存するために使用される情報を含む小さなデータである「クッキー」を保存したりすることができます。\nブラウザについて覚えておくべき重要なことは、ブラウザはすべて同じではないということです。それぞれのブラウザには長所と短所があり、プロの Web 開発者は、Web ページをクロスブラウザでうまく動作させる方法を理解する必要があります。これには、携帯電話のような小さなビューポートやオフラインのユーザーへの対応も含まれます。\nあなたが使いたいブラウザにブックマークしておくべき本当に便利な Web サイトは、caniusecom です。Web ページを作成する際には、caniuse のサポートされている技術のリストを利用すると、ユーザーを最大限にサポートすることができるので、非常に便利です。\n✅ どのブラウザがあなたの Web サイトのユーザーに最も人気があるのか、どのようにして知ることができるでしょうかアナリティクスをチェックする - Web 開発プロセスの一環として様々なアナリティクスパッケージをインストールすることができ、様々な人気のあるブラウザで最も使用されているブラウザを教えてくれます。\nブラウザの拡張機能\nなぜブラウザ拡張機能を作ろうと思ったのでしょうかブラウザの拡張機能は、何度も繰り返しがちな作業に素早くアクセスしたいときに便利なものです。例えば、対話する様々な Web ページの色をチェックする必要がある場合は、カラーピッカーブラウザ拡張機能をインストールするとよいでしょう。パスワードを覚えるのが面倒な場合は、パスワード管理ブラウザ拡張機能を使うとよいでしょう。\nブラウザ拡張機能は開発するのも楽しいものです。彼らは、有限のタスクを管理する傾向があり、それがうまく機能しています。\n✅ お気に入りのブラウザ拡張機能は何ですか",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12218,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1426,
    "chunk_index": 4,
    "total_chunks": 18
  },
  {
    "id": "229106f0041c898fffbfeecc8d29aa62",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 1: ブラウザのすべて",
    "content": "ブラウザ拡張機能プロジェクト その 1: ブラウザのすべて\nSketchnote by Wassim Chegham\nレッスン前の小テスト\nレッスン前の小テスト\nイントロダクション\nブラウザ拡張機能はブラウザに機能を追加するものです。しかし、拡張機能を作る前に、ブラウザがどのように機能するのかを少し学んでおく必要があります。\nブラウザについて\nこの一連のレッスンでは、Chrome、Firefox、Edge ブラウザで動作するブラウザ拡張機能の構築方法を学びます。このパートでは、ブラウザがどのように動作するのかを理解し、ブラウザ拡張の要素を足場にしていきます。\nしかし、ブラウザとは正確には何でしょうかそれは、エンドユーザーがサーバーからコンテンツにアクセスして Web ページに表示することを可能にするソフトウェアアプリケーションです。\n✅ 少し歴史を紹介します: 最初のブラウザは 'WorldWideWeb' と呼ばれ、1990年にティモシー・バーナーズ・リー卿によって作成されました。\nいくつかの初期のブラウザは、Karen McGrane を経由しています。\nユーザーが URL (Uniform Resource Locator) アドレスを使用してインターネットに接続すると、通常は Hypertext Transfer Protocol を使用して http または https アドレスを経由して、ブラウザが Web サーバと通信して Web ページを取得します。\nこの時点で、ブラウザのレンダリングエンジンがユーザのデバイス (携帯電話、デスクトップ、ラップトップなど) にページを表示します。\nブラウザにはコンテンツをキャッシュする機能もあり、毎回サーバから取得する必要がありません。ブラウザは、ユーザーのブラウジング活動の履歴を記録したり、ユーザーの活動を保存するために使用される情報を含む小さなデータである「クッキー」を保存したりすることができます。\nブラウザについて覚えておくべき重要なことは、ブラウザはすべて同じではないということです。それぞれのブラウザには長所と短所があり、プロの Web 開発者は、Web ページをクロスブラウザでうまく動作させる方法を理解する必要があります。これには、携帯電話のような小さなビューポートやオフラインのユーザーへの対応も含まれます。\nあなたが使いたいブラウザにブックマークしておくべき本当に便利な Web サイトは、caniusecom です。Web ページを作成する際には、caniuse のサポートされている技術のリストを利用すると、ユーザーを最大限にサポートすることができるので、非常に便利です。\n✅ どのブラウザがあなたの Web サイトのユーザーに最も人気があるのか、どのようにして知ることができるでしょうかアナリティクスをチェックする - Web 開発プロセスの一環として様々なアナリティクスパッケージをインストールすることができ、様々な人気のあるブラウザで最も使用されているブラウザを教えてくれます。\nブラウザの拡張機能\nなぜブラウザ拡張機能を作ろうと思ったのでしょうかブラウザの拡張機能は、何度も繰り返しがちな作業に素早くアクセスしたいときに便利なものです。例えば、対話する様々な Web ページの色をチェックする必要がある場合は、カラーピッカーブラウザ拡張機能をインストールするとよいでしょう。パスワードを覚えるのが面倒な場合は、パスワード管理ブラウザ拡張機能を使うとよいでしょう。\nブラウザ拡張機能は開発するのも楽しいものです。彼らは、有限のタスクを管理する傾向があり、それがうまく機能しています。\n✅ お気に入りのブラウザ拡張機能は何ですかどのようなタスクを実行しますか",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12218,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1440,
    "chunk_index": 5,
    "total_chunks": 18
  },
  {
    "id": "c0b53c60824464f8a7e230bb5e7a30d6",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 1: ブラウザのすべて",
    "content": "ブラウザ拡張機能プロジェクト その 1: ブラウザのすべて\nSketchnote by Wassim Chegham\nレッスン前の小テスト\nレッスン前の小テスト\nイントロダクション\nブラウザ拡張機能はブラウザに機能を追加するものです。しかし、拡張機能を作る前に、ブラウザがどのように機能するのかを少し学んでおく必要があります。\nブラウザについて\nこの一連のレッスンでは、Chrome、Firefox、Edge ブラウザで動作するブラウザ拡張機能の構築方法を学びます。このパートでは、ブラウザがどのように動作するのかを理解し、ブラウザ拡張の要素を足場にしていきます。\nしかし、ブラウザとは正確には何でしょうかそれは、エンドユーザーがサーバーからコンテンツにアクセスして Web ページに表示することを可能にするソフトウェアアプリケーションです。\n✅ 少し歴史を紹介します: 最初のブラウザは 'WorldWideWeb' と呼ばれ、1990年にティモシー・バーナーズ・リー卿によって作成されました。\nいくつかの初期のブラウザは、Karen McGrane を経由しています。\nユーザーが URL (Uniform Resource Locator) アドレスを使用してインターネットに接続すると、通常は Hypertext Transfer Protocol を使用して http または https アドレスを経由して、ブラウザが Web サーバと通信して Web ページを取得します。\nこの時点で、ブラウザのレンダリングエンジンがユーザのデバイス (携帯電話、デスクトップ、ラップトップなど) にページを表示します。\nブラウザにはコンテンツをキャッシュする機能もあり、毎回サーバから取得する必要がありません。ブラウザは、ユーザーのブラウジング活動の履歴を記録したり、ユーザーの活動を保存するために使用される情報を含む小さなデータである「クッキー」を保存したりすることができます。\nブラウザについて覚えておくべき重要なことは、ブラウザはすべて同じではないということです。それぞれのブラウザには長所と短所があり、プロの Web 開発者は、Web ページをクロスブラウザでうまく動作させる方法を理解する必要があります。これには、携帯電話のような小さなビューポートやオフラインのユーザーへの対応も含まれます。\nあなたが使いたいブラウザにブックマークしておくべき本当に便利な Web サイトは、caniusecom です。Web ページを作成する際には、caniuse のサポートされている技術のリストを利用すると、ユーザーを最大限にサポートすることができるので、非常に便利です。\n✅ どのブラウザがあなたの Web サイトのユーザーに最も人気があるのか、どのようにして知ることができるでしょうかアナリティクスをチェックする - Web 開発プロセスの一環として様々なアナリティクスパッケージをインストールすることができ、様々な人気のあるブラウザで最も使用されているブラウザを教えてくれます。\nブラウザの拡張機能\nなぜブラウザ拡張機能を作ろうと思ったのでしょうかブラウザの拡張機能は、何度も繰り返しがちな作業に素早くアクセスしたいときに便利なものです。例えば、対話する様々な Web ページの色をチェックする必要がある場合は、カラーピッカーブラウザ拡張機能をインストールするとよいでしょう。パスワードを覚えるのが面倒な場合は、パスワード管理ブラウザ拡張機能を使うとよいでしょう。\nブラウザ拡張機能は開発するのも楽しいものです。彼らは、有限のタスクを管理する傾向があり、それがうまく機能しています。\n✅ お気に入りのブラウザ拡張機能は何ですかどのようなタスクを実行しますか拡張機能のインストール\nビルドを始める前に、ブラウザ拡張機能のビルドとデプロイのプロセスを見てみましょう。ブラウザによってこのタスクを管理する方法は少し異なりますが、Chrome と Firefox では、Edge のこの例とプロセスは似ています。\n本質的には、このプロセスになります。\nnpm build を使って拡張機能をビルドします\nブラウザの右上にある「設定とその他」ボタン (",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12218,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1605,
    "chunk_index": 6,
    "total_chunks": 18
  },
  {
    "id": "fa14f5889d5bea16b9a738eaf3603313",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 1: ブラウザのすべて",
    "content": "Chegham レッスン前の小テスト レッスン前の小テスト イントロダクション ブラウザ拡張機能はブラウザに機能を追加するものです。しかし、拡張機能を作る前に、ブラウザがどのように機能するのかを少し学んでおく必要があります。 ブラウザについて この一連のレッスンでは、Chrome、Firefox、Edge ブラウザで動作するブラウザ拡張機能の構築方法を学びます。このパートでは、ブラウザがどのように動作するのかを理解し、ブラウザ拡張の要素を足場にしていきます。 しかし、ブラウザとは正確には何でしょうかそれは、エンドユーザーがサーバーからコンテンツにアクセスして Web ページに表示することを可能にするソフトウェアアプリケーションです。 ✅ 少し歴史を紹介します: 最初のブラウザは 'WorldWideWeb' と呼ばれ、1990年にティモシー・バーナーズ・リー卿によって作成されました。 いくつかの初期のブラウザは、Karen McGrane を経由しています。 ユーザーが URL (Uniform Resource Locator) アドレスを使用してインターネットに接続すると、通常は Hypertext Transfer Protocol を使用して http または https アドレスを経由して、ブラウザが Web サーバと通信して Web ページを取得します。 この時点で、ブラウザのレンダリングエンジンがユーザのデバイス (携帯電話、デスクトップ、ラップトップなど) にページを表示します。 ブラウザにはコンテンツをキャッシュする機能もあり、毎回サーバから取得する必要がありません。ブラウザは、ユーザーのブラウジング活動の履歴を記録したり、ユーザーの活動を保存するために使用される情報を含む小さなデータである「クッキー」を保存したりすることができます。 ブラウザについて覚えておくべき重要なことは、ブラウザはすべて同じではないということです。それぞれのブラウザには長所と短所があり、プロの Web 開発者は、Web ページをクロスブラウザでうまく動作させる方法を理解する必要があります。これには、携帯電話のような小さなビューポートやオフラインのユーザーへの対応も含まれます。 あなたが使いたいブラウザにブックマークしておくべき本当に便利な Web サイトは、caniusecom です。Web ページを作成する際には、caniuse のサポートされている技術のリストを利用すると、ユーザーを最大限にサポートすることができるので、非常に便利です。 ✅ どのブラウザがあなたの Web サイトのユーザーに最も人気があるのか、どのようにして知ることができるでしょうかアナリティクスをチェックする - Web 開発プロセスの一環として様々なアナリティクスパッケージをインストールすることができ、様々な人気のあるブラウザで最も使用されているブラウザを教えてくれます。 ブラウザの拡張機能 なぜブラウザ拡張機能を作ろうと思ったのでしょうかブラウザの拡張機能は、何度も繰り返しがちな作業に素早くアクセスしたいときに便利なものです。例えば、対話する様々な Web ページの色をチェックする必要がある場合は、カラーピッカーブラウザ拡張機能をインストールするとよいでしょう。パスワードを覚えるのが面倒な場合は、パスワード管理ブラウザ拡張機能を使うとよいでしょう。 ブラウザ拡張機能は開発するのも楽しいものです。彼らは、有限のタスクを管理する傾向があり、それがうまく機能しています。 ✅ お気に入りのブラウザ拡張機能は何ですかどのようなタスクを実行しますか拡張機能のインストール ビルドを始める前に、ブラウザ拡張機能のビルドとデプロイのプロセスを見てみましょう。ブラウザによってこのタスクを管理する方法は少し異なりますが、Chrome と Firefox では、Edge のこの例とプロセスは似ています。 本質的には、このプロセスになります。 npm build を使って拡張機能をビルドします ブラウザの右上にある「設定とその他」ボタン (アイコン) を使って、拡張機能ペインに移動します\n新規インストールの場合は、load unpacked を選択してビルドフォルダ (私たちの場合は /dist) から新しい拡張機能をアップロードします\nまたは、既にインストールされている拡張機能をリロードする場合は reload をクリックします\n✅ 各ブラウザに関連付けられたブラウザ拡張機能ストアにリリースされた拡張機能をインストールするには、それらの ストア に移動して、お好みの拡張機能をインストールしてください。\n開始する\nあなたの地域のカーボンフットプリントを表示し、地域のエネルギー使用量とエネルギー源を表示するブラウザ拡張機能を構築します。拡張機能には、CO2 Signal API にアクセスできるように API キーを収集するフォームがあります。\n必要なもの:\nAPI キー; このページのボックスにメールアドレスを入力します\n電力地図 に対応する地域のコード (例えばボストンでは 'US-NEISO' を使用しています)\nスターターコード。startフォルダをダウンロードしてください。このフォルダでコードを完成させることになります。\nNPM - NPM はパッケージ管理ツールです。ローカルにインストールすると、package",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12218,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 2027,
    "chunk_index": 7,
    "total_chunks": 18
  },
  {
    "id": "046a265822574434084c2805f98d90f4",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 1: ブラウザのすべて",
    "content": "Web ページを取得します。 この時点で、ブラウザのレンダリングエンジンがユーザのデバイス (携帯電話、デスクトップ、ラップトップなど) にページを表示します。 ブラウザにはコンテンツをキャッシュする機能もあり、毎回サーバから取得する必要がありません。ブラウザは、ユーザーのブラウジング活動の履歴を記録したり、ユーザーの活動を保存するために使用される情報を含む小さなデータである「クッキー」を保存したりすることができます。 ブラウザについて覚えておくべき重要なことは、ブラウザはすべて同じではないということです。それぞれのブラウザには長所と短所があり、プロの Web 開発者は、Web ページをクロスブラウザでうまく動作させる方法を理解する必要があります。これには、携帯電話のような小さなビューポートやオフラインのユーザーへの対応も含まれます。 あなたが使いたいブラウザにブックマークしておくべき本当に便利な Web サイトは、caniusecom です。Web ページを作成する際には、caniuse のサポートされている技術のリストを利用すると、ユーザーを最大限にサポートすることができるので、非常に便利です。 ✅ どのブラウザがあなたの Web サイトのユーザーに最も人気があるのか、どのようにして知ることができるでしょうかアナリティクスをチェックする - Web 開発プロセスの一環として様々なアナリティクスパッケージをインストールすることができ、様々な人気のあるブラウザで最も使用されているブラウザを教えてくれます。 ブラウザの拡張機能 なぜブラウザ拡張機能を作ろうと思ったのでしょうかブラウザの拡張機能は、何度も繰り返しがちな作業に素早くアクセスしたいときに便利なものです。例えば、対話する様々な Web ページの色をチェックする必要がある場合は、カラーピッカーブラウザ拡張機能をインストールするとよいでしょう。パスワードを覚えるのが面倒な場合は、パスワード管理ブラウザ拡張機能を使うとよいでしょう。 ブラウザ拡張機能は開発するのも楽しいものです。彼らは、有限のタスクを管理する傾向があり、それがうまく機能しています。 ✅ お気に入りのブラウザ拡張機能は何ですかどのようなタスクを実行しますか拡張機能のインストール ビルドを始める前に、ブラウザ拡張機能のビルドとデプロイのプロセスを見てみましょう。ブラウザによってこのタスクを管理する方法は少し異なりますが、Chrome と Firefox では、Edge のこの例とプロセスは似ています。 本質的には、このプロセスになります。 npm build を使って拡張機能をビルドします ブラウザの右上にある「設定とその他」ボタン (アイコン) を使って、拡張機能ペインに移動します 新規インストールの場合は、load unpacked を選択してビルドフォルダ (私たちの場合は /dist) から新しい拡張機能をアップロードします または、既にインストールされている拡張機能をリロードする場合は reload をクリックします ✅ 各ブラウザに関連付けられたブラウザ拡張機能ストアにリリースされた拡張機能をインストールするには、それらの ストア に移動して、お好みの拡張機能をインストールしてください。 開始する あなたの地域のカーボンフットプリントを表示し、地域のエネルギー使用量とエネルギー源を表示するブラウザ拡張機能を構築します。拡張機能には、CO2 Signal API にアクセスできるように API キーを収集するフォームがあります。 必要なもの: API キー; このページのボックスにメールアドレスを入力します 電力地図 に対応する地域のコード (例えばボストンでは 'US-NEISO' を使用しています) スターターコード。startフォルダをダウンロードしてください。このフォルダでコードを完成させることになります。 NPM - NPM はパッケージ管理ツールです。ローカルにインストールすると、packagejson ファイルに記載されているパッケージがインストールされ、Web アセットで使用されます。\n✅ この優れた Learn モジュールでは、パッケージ管理の詳細を学ぶことができます。\nコードベースに目を通してみてください。\ndist\n-|manifest",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12218,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1659,
    "chunk_index": 8,
    "total_chunks": 18
  },
  {
    "id": "ca0fe349c33e9f4ad86dc57004ed0d21",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 1: ブラウザのすべて",
    "content": "ページをクロスブラウザでうまく動作させる方法を理解する必要があります。これには、携帯電話のような小さなビューポートやオフラインのユーザーへの対応も含まれます。 あなたが使いたいブラウザにブックマークしておくべき本当に便利な Web サイトは、caniusecom です。Web ページを作成する際には、caniuse のサポートされている技術のリストを利用すると、ユーザーを最大限にサポートすることができるので、非常に便利です。 ✅ どのブラウザがあなたの Web サイトのユーザーに最も人気があるのか、どのようにして知ることができるでしょうかアナリティクスをチェックする - Web 開発プロセスの一環として様々なアナリティクスパッケージをインストールすることができ、様々な人気のあるブラウザで最も使用されているブラウザを教えてくれます。 ブラウザの拡張機能 なぜブラウザ拡張機能を作ろうと思ったのでしょうかブラウザの拡張機能は、何度も繰り返しがちな作業に素早くアクセスしたいときに便利なものです。例えば、対話する様々な Web ページの色をチェックする必要がある場合は、カラーピッカーブラウザ拡張機能をインストールするとよいでしょう。パスワードを覚えるのが面倒な場合は、パスワード管理ブラウザ拡張機能を使うとよいでしょう。 ブラウザ拡張機能は開発するのも楽しいものです。彼らは、有限のタスクを管理する傾向があり、それがうまく機能しています。 ✅ お気に入りのブラウザ拡張機能は何ですかどのようなタスクを実行しますか拡張機能のインストール ビルドを始める前に、ブラウザ拡張機能のビルドとデプロイのプロセスを見てみましょう。ブラウザによってこのタスクを管理する方法は少し異なりますが、Chrome と Firefox では、Edge のこの例とプロセスは似ています。 本質的には、このプロセスになります。 npm build を使って拡張機能をビルドします ブラウザの右上にある「設定とその他」ボタン (アイコン) を使って、拡張機能ペインに移動します 新規インストールの場合は、load unpacked を選択してビルドフォルダ (私たちの場合は /dist) から新しい拡張機能をアップロードします または、既にインストールされている拡張機能をリロードする場合は reload をクリックします ✅ 各ブラウザに関連付けられたブラウザ拡張機能ストアにリリースされた拡張機能をインストールするには、それらの ストア に移動して、お好みの拡張機能をインストールしてください。 開始する あなたの地域のカーボンフットプリントを表示し、地域のエネルギー使用量とエネルギー源を表示するブラウザ拡張機能を構築します。拡張機能には、CO2 Signal API にアクセスできるように API キーを収集するフォームがあります。 必要なもの: API キー; このページのボックスにメールアドレスを入力します 電力地図 に対応する地域のコード (例えばボストンでは 'US-NEISO' を使用しています) スターターコード。startフォルダをダウンロードしてください。このフォルダでコードを完成させることになります。 NPM - NPM はパッケージ管理ツールです。ローカルにインストールすると、packagejson ファイルに記載されているパッケージがインストールされ、Web アセットで使用されます。 ✅ この優れた Learn モジュールでは、パッケージ管理の詳細を学ぶことができます。 コードベースに目を通してみてください。 dist -|manifestjson (ここに設定されているデフォルト)\n-|index",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12218,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1394,
    "chunk_index": 9,
    "total_chunks": 18
  },
  {
    "id": "f1dbcfb8f4165a6c88a30af9c800c34f",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 1: ブラウザのすべて",
    "content": "Web サイトは、caniusecom です。Web ページを作成する際には、caniuse のサポートされている技術のリストを利用すると、ユーザーを最大限にサポートすることができるので、非常に便利です。 ✅ どのブラウザがあなたの Web サイトのユーザーに最も人気があるのか、どのようにして知ることができるでしょうかアナリティクスをチェックする - Web 開発プロセスの一環として様々なアナリティクスパッケージをインストールすることができ、様々な人気のあるブラウザで最も使用されているブラウザを教えてくれます。 ブラウザの拡張機能 なぜブラウザ拡張機能を作ろうと思ったのでしょうかブラウザの拡張機能は、何度も繰り返しがちな作業に素早くアクセスしたいときに便利なものです。例えば、対話する様々な Web ページの色をチェックする必要がある場合は、カラーピッカーブラウザ拡張機能をインストールするとよいでしょう。パスワードを覚えるのが面倒な場合は、パスワード管理ブラウザ拡張機能を使うとよいでしょう。 ブラウザ拡張機能は開発するのも楽しいものです。彼らは、有限のタスクを管理する傾向があり、それがうまく機能しています。 ✅ お気に入りのブラウザ拡張機能は何ですかどのようなタスクを実行しますか拡張機能のインストール ビルドを始める前に、ブラウザ拡張機能のビルドとデプロイのプロセスを見てみましょう。ブラウザによってこのタスクを管理する方法は少し異なりますが、Chrome と Firefox では、Edge のこの例とプロセスは似ています。 本質的には、このプロセスになります。 npm build を使って拡張機能をビルドします ブラウザの右上にある「設定とその他」ボタン (アイコン) を使って、拡張機能ペインに移動します 新規インストールの場合は、load unpacked を選択してビルドフォルダ (私たちの場合は /dist) から新しい拡張機能をアップロードします または、既にインストールされている拡張機能をリロードする場合は reload をクリックします ✅ 各ブラウザに関連付けられたブラウザ拡張機能ストアにリリースされた拡張機能をインストールするには、それらの ストア に移動して、お好みの拡張機能をインストールしてください。 開始する あなたの地域のカーボンフットプリントを表示し、地域のエネルギー使用量とエネルギー源を表示するブラウザ拡張機能を構築します。拡張機能には、CO2 Signal API にアクセスできるように API キーを収集するフォームがあります。 必要なもの: API キー; このページのボックスにメールアドレスを入力します 電力地図 に対応する地域のコード (例えばボストンでは 'US-NEISO' を使用しています) スターターコード。startフォルダをダウンロードしてください。このフォルダでコードを完成させることになります。 NPM - NPM はパッケージ管理ツールです。ローカルにインストールすると、packagejson ファイルに記載されているパッケージがインストールされ、Web アセットで使用されます。 ✅ この優れた Learn モジュールでは、パッケージ管理の詳細を学ぶことができます。 コードベースに目を通してみてください。 dist -|manifestjson (ここに設定されているデフォルト) -|indexhtml (フロントエンド HTML マークアップはこちら)\n-|background",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12218,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1306,
    "chunk_index": 10,
    "total_chunks": 18
  },
  {
    "id": "46d671c4200cdac3d30ec52d67032501",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 1: ブラウザのすべて",
    "content": "のサポートされている技術のリストを利用すると、ユーザーを最大限にサポートすることができるので、非常に便利です。 ✅ どのブラウザがあなたの Web サイトのユーザーに最も人気があるのか、どのようにして知ることができるでしょうかアナリティクスをチェックする - Web 開発プロセスの一環として様々なアナリティクスパッケージをインストールすることができ、様々な人気のあるブラウザで最も使用されているブラウザを教えてくれます。 ブラウザの拡張機能 なぜブラウザ拡張機能を作ろうと思ったのでしょうかブラウザの拡張機能は、何度も繰り返しがちな作業に素早くアクセスしたいときに便利なものです。例えば、対話する様々な Web ページの色をチェックする必要がある場合は、カラーピッカーブラウザ拡張機能をインストールするとよいでしょう。パスワードを覚えるのが面倒な場合は、パスワード管理ブラウザ拡張機能を使うとよいでしょう。 ブラウザ拡張機能は開発するのも楽しいものです。彼らは、有限のタスクを管理する傾向があり、それがうまく機能しています。 ✅ お気に入りのブラウザ拡張機能は何ですかどのようなタスクを実行しますか拡張機能のインストール ビルドを始める前に、ブラウザ拡張機能のビルドとデプロイのプロセスを見てみましょう。ブラウザによってこのタスクを管理する方法は少し異なりますが、Chrome と Firefox では、Edge のこの例とプロセスは似ています。 本質的には、このプロセスになります。 npm build を使って拡張機能をビルドします ブラウザの右上にある「設定とその他」ボタン (アイコン) を使って、拡張機能ペインに移動します 新規インストールの場合は、load unpacked を選択してビルドフォルダ (私たちの場合は /dist) から新しい拡張機能をアップロードします または、既にインストールされている拡張機能をリロードする場合は reload をクリックします ✅ 各ブラウザに関連付けられたブラウザ拡張機能ストアにリリースされた拡張機能をインストールするには、それらの ストア に移動して、お好みの拡張機能をインストールしてください。 開始する あなたの地域のカーボンフットプリントを表示し、地域のエネルギー使用量とエネルギー源を表示するブラウザ拡張機能を構築します。拡張機能には、CO2 Signal API にアクセスできるように API キーを収集するフォームがあります。 必要なもの: API キー; このページのボックスにメールアドレスを入力します 電力地図 に対応する地域のコード (例えばボストンでは 'US-NEISO' を使用しています) スターターコード。startフォルダをダウンロードしてください。このフォルダでコードを完成させることになります。 NPM - NPM はパッケージ管理ツールです。ローカルにインストールすると、packagejson ファイルに記載されているパッケージがインストールされ、Web アセットで使用されます。 ✅ この優れた Learn モジュールでは、パッケージ管理の詳細を学ぶことができます。 コードベースに目を通してみてください。 dist -|manifestjson (ここに設定されているデフォルト) -|indexhtml (フロントエンド HTML マークアップはこちら) -|backgroundjs (バックグラウンド JS はこちら)\n-|main",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12218,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1296,
    "chunk_index": 11,
    "total_chunks": 18
  },
  {
    "id": "dbf989d9bca4d6253028434f804db528",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 1: ブラウザのすべて",
    "content": "サイトのユーザーに最も人気があるのか、どのようにして知ることができるでしょうかアナリティクスをチェックする - Web 開発プロセスの一環として様々なアナリティクスパッケージをインストールすることができ、様々な人気のあるブラウザで最も使用されているブラウザを教えてくれます。 ブラウザの拡張機能 なぜブラウザ拡張機能を作ろうと思ったのでしょうかブラウザの拡張機能は、何度も繰り返しがちな作業に素早くアクセスしたいときに便利なものです。例えば、対話する様々な Web ページの色をチェックする必要がある場合は、カラーピッカーブラウザ拡張機能をインストールするとよいでしょう。パスワードを覚えるのが面倒な場合は、パスワード管理ブラウザ拡張機能を使うとよいでしょう。 ブラウザ拡張機能は開発するのも楽しいものです。彼らは、有限のタスクを管理する傾向があり、それがうまく機能しています。 ✅ お気に入りのブラウザ拡張機能は何ですかどのようなタスクを実行しますか拡張機能のインストール ビルドを始める前に、ブラウザ拡張機能のビルドとデプロイのプロセスを見てみましょう。ブラウザによってこのタスクを管理する方法は少し異なりますが、Chrome と Firefox では、Edge のこの例とプロセスは似ています。 本質的には、このプロセスになります。 npm build を使って拡張機能をビルドします ブラウザの右上にある「設定とその他」ボタン (アイコン) を使って、拡張機能ペインに移動します 新規インストールの場合は、load unpacked を選択してビルドフォルダ (私たちの場合は /dist) から新しい拡張機能をアップロードします または、既にインストールされている拡張機能をリロードする場合は reload をクリックします ✅ 各ブラウザに関連付けられたブラウザ拡張機能ストアにリリースされた拡張機能をインストールするには、それらの ストア に移動して、お好みの拡張機能をインストールしてください。 開始する あなたの地域のカーボンフットプリントを表示し、地域のエネルギー使用量とエネルギー源を表示するブラウザ拡張機能を構築します。拡張機能には、CO2 Signal API にアクセスできるように API キーを収集するフォームがあります。 必要なもの: API キー; このページのボックスにメールアドレスを入力します 電力地図 に対応する地域のコード (例えばボストンでは 'US-NEISO' を使用しています) スターターコード。startフォルダをダウンロードしてください。このフォルダでコードを完成させることになります。 NPM - NPM はパッケージ管理ツールです。ローカルにインストールすると、packagejson ファイルに記載されているパッケージがインストールされ、Web アセットで使用されます。 ✅ この優れた Learn モジュールでは、パッケージ管理の詳細を学ぶことができます。 コードベースに目を通してみてください。 dist -|manifestjson (ここに設定されているデフォルト) -|indexhtml (フロントエンド HTML マークアップはこちら) -|backgroundjs (バックグラウンド JS はこちら) -|mainjs (ビルド JS)\nsrc\n-|index",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12218,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1240,
    "chunk_index": 12,
    "total_chunks": 18
  },
  {
    "id": "117cda948d591f37cea968f131cad06f",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 1: ブラウザのすべて",
    "content": "ブラウザの拡張機能 なぜブラウザ拡張機能を作ろうと思ったのでしょうかブラウザの拡張機能は、何度も繰り返しがちな作業に素早くアクセスしたいときに便利なものです。例えば、対話する様々な Web ページの色をチェックする必要がある場合は、カラーピッカーブラウザ拡張機能をインストールするとよいでしょう。パスワードを覚えるのが面倒な場合は、パスワード管理ブラウザ拡張機能を使うとよいでしょう。 ブラウザ拡張機能は開発するのも楽しいものです。彼らは、有限のタスクを管理する傾向があり、それがうまく機能しています。 ✅ お気に入りのブラウザ拡張機能は何ですかどのようなタスクを実行しますか拡張機能のインストール ビルドを始める前に、ブラウザ拡張機能のビルドとデプロイのプロセスを見てみましょう。ブラウザによってこのタスクを管理する方法は少し異なりますが、Chrome と Firefox では、Edge のこの例とプロセスは似ています。 本質的には、このプロセスになります。 npm build を使って拡張機能をビルドします ブラウザの右上にある「設定とその他」ボタン (アイコン) を使って、拡張機能ペインに移動します 新規インストールの場合は、load unpacked を選択してビルドフォルダ (私たちの場合は /dist) から新しい拡張機能をアップロードします または、既にインストールされている拡張機能をリロードする場合は reload をクリックします ✅ 各ブラウザに関連付けられたブラウザ拡張機能ストアにリリースされた拡張機能をインストールするには、それらの ストア に移動して、お好みの拡張機能をインストールしてください。 開始する あなたの地域のカーボンフットプリントを表示し、地域のエネルギー使用量とエネルギー源を表示するブラウザ拡張機能を構築します。拡張機能には、CO2 Signal API にアクセスできるように API キーを収集するフォームがあります。 必要なもの: API キー; このページのボックスにメールアドレスを入力します 電力地図 に対応する地域のコード (例えばボストンでは 'US-NEISO' を使用しています) スターターコード。startフォルダをダウンロードしてください。このフォルダでコードを完成させることになります。 NPM - NPM はパッケージ管理ツールです。ローカルにインストールすると、packagejson ファイルに記載されているパッケージがインストールされ、Web アセットで使用されます。 ✅ この優れた Learn モジュールでは、パッケージ管理の詳細を学ぶことができます。 コードベースに目を通してみてください。 dist -|manifestjson (ここに設定されているデフォルト) -|indexhtml (フロントエンド HTML マークアップはこちら) -|backgroundjs (バックグラウンド JS はこちら) -|mainjs (ビルド JS) src -|indexjs (あなたのJSコードはここにあります)\n✅ API キーとリージョンコードが手元にあれば、後で使うときのためにノートのどこかに保存しておきましょう。\n拡張機能の HTML を構築する\nこの拡張機能には2つのビューがあります。1つは API キーとリージョンコードを収集するためのものです。\nそして2つ目は、地域の炭素使用量を表示するためのものです。\nまずはフォーム用の HTML を構築し、CSS でスタイリングしてみましょう。\n/dist フォルダにフォームと結果領域を作成します。index",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12218,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1316,
    "chunk_index": 13,
    "total_chunks": 18
  },
  {
    "id": "b1ec2aab7ac5673affef152f750e592e",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 1: ブラウザのすべて",
    "content": "(アイコン) を使って、拡張機能ペインに移動します 新規インストールの場合は、load unpacked を選択してビルドフォルダ (私たちの場合は /dist) から新しい拡張機能をアップロードします または、既にインストールされている拡張機能をリロードする場合は reload をクリックします ✅ 各ブラウザに関連付けられたブラウザ拡張機能ストアにリリースされた拡張機能をインストールするには、それらの ストア に移動して、お好みの拡張機能をインストールしてください。 開始する あなたの地域のカーボンフットプリントを表示し、地域のエネルギー使用量とエネルギー源を表示するブラウザ拡張機能を構築します。拡張機能には、CO2 Signal API にアクセスできるように API キーを収集するフォームがあります。 必要なもの: API キー; このページのボックスにメールアドレスを入力します 電力地図 に対応する地域のコード (例えばボストンでは 'US-NEISO' を使用しています) スターターコード。startフォルダをダウンロードしてください。このフォルダでコードを完成させることになります。 NPM - NPM はパッケージ管理ツールです。ローカルにインストールすると、packagejson ファイルに記載されているパッケージがインストールされ、Web アセットで使用されます。 ✅ この優れた Learn モジュールでは、パッケージ管理の詳細を学ぶことができます。 コードベースに目を通してみてください。 dist -|manifestjson (ここに設定されているデフォルト) -|indexhtml (フロントエンド HTML マークアップはこちら) -|backgroundjs (バックグラウンド JS はこちら) -|mainjs (ビルド JS) src -|indexjs (あなたのJSコードはここにあります) ✅ API キーとリージョンコードが手元にあれば、後で使うときのためにノートのどこかに保存しておきましょう。 拡張機能の HTML を構築する この拡張機能には2つのビューがあります。1つは API キーとリージョンコードを収集するためのものです。 そして2つ目は、地域の炭素使用量を表示するためのものです。 まずはフォーム用の HTML を構築し、CSS でスタイリングしてみましょう。 /dist フォルダにフォームと結果領域を作成します。indexhtml ファイルの中には、区切りのついたフォーム領域を作成します。\n```HTML\nNew",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12218,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 879,
    "chunk_index": 14,
    "total_chunks": 18
  },
  {
    "id": "086b5edb97773f5e68e85450b50cb9bd",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 1: ブラウザのすべて",
    "content": "unpacked を選択してビルドフォルダ (私たちの場合は /dist) から新しい拡張機能をアップロードします または、既にインストールされている拡張機能をリロードする場合は reload をクリックします ✅ 各ブラウザに関連付けられたブラウザ拡張機能ストアにリリースされた拡張機能をインストールするには、それらの ストア に移動して、お好みの拡張機能をインストールしてください。 開始する あなたの地域のカーボンフットプリントを表示し、地域のエネルギー使用量とエネルギー源を表示するブラウザ拡張機能を構築します。拡張機能には、CO2 Signal API にアクセスできるように API キーを収集するフォームがあります。 必要なもの: API キー; このページのボックスにメールアドレスを入力します 電力地図 に対応する地域のコード (例えばボストンでは 'US-NEISO' を使用しています) スターターコード。startフォルダをダウンロードしてください。このフォルダでコードを完成させることになります。 NPM - NPM はパッケージ管理ツールです。ローカルにインストールすると、packagejson ファイルに記載されているパッケージがインストールされ、Web アセットで使用されます。 ✅ この優れた Learn モジュールでは、パッケージ管理の詳細を学ぶことができます。 コードベースに目を通してみてください。 dist -|manifestjson (ここに設定されているデフォルト) -|indexhtml (フロントエンド HTML マークアップはこちら) -|backgroundjs (バックグラウンド JS はこちら) -|mainjs (ビルド JS) src -|indexjs (あなたのJSコードはここにあります) ✅ API キーとリージョンコードが手元にあれば、後で使うときのためにノートのどこかに保存しておきましょう。 拡張機能の HTML を構築する この拡張機能には2つのビューがあります。1つは API キーとリージョンコードを収集するためのものです。 そして2つ目は、地域の炭素使用量を表示するためのものです。 まずはフォーム用の HTML を構築し、CSS でスタイリングしてみましょう。 /dist フォルダにフォームと結果領域を作成します。indexhtml ファイルの中には、区切りのついたフォーム領域を作成します。 ```HTML NewAdd your Information\nRegion Name\nYour API Key from tmrow\nSubmit\n```\nこれは、保存した情報を入力し、ローカルストレージに保存するフォームです。\n次に、結果領域を作成します。最終的なフォームタグの下に、いくつかの div を追加します。\n```HTML\nloading",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12218,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 935,
    "chunk_index": 15,
    "total_chunks": 18
  },
  {
    "id": "5358da1e2edb65760b42af703a654c66",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 1: ブラウザのすべて",
    "content": "API キーを収集するフォームがあります。 必要なもの: API キー; このページのボックスにメールアドレスを入力します 電力地図 に対応する地域のコード (例えばボストンでは 'US-NEISO' を使用しています) スターターコード。startフォルダをダウンロードしてください。このフォルダでコードを完成させることになります。 NPM - NPM はパッケージ管理ツールです。ローカルにインストールすると、packagejson ファイルに記載されているパッケージがインストールされ、Web アセットで使用されます。 ✅ この優れた Learn モジュールでは、パッケージ管理の詳細を学ぶことができます。 コードベースに目を通してみてください。 dist -|manifestjson (ここに設定されているデフォルト) -|indexhtml (フロントエンド HTML マークアップはこちら) -|backgroundjs (バックグラウンド JS はこちら) -|mainjs (ビルド JS) src -|indexjs (あなたのJSコードはここにあります) ✅ API キーとリージョンコードが手元にあれば、後で使うときのためにノートのどこかに保存しておきましょう。 拡張機能の HTML を構築する この拡張機能には2つのビューがあります。1つは API キーとリージョンコードを収集するためのものです。 そして2つ目は、地域の炭素使用量を表示するためのものです。 まずはフォーム用の HTML を構築し、CSS でスタイリングしてみましょう。 /dist フォルダにフォームと結果領域を作成します。indexhtml ファイルの中には、区切りのついたフォーム領域を作成します。 ```HTML NewAdd your Information Region Name Your API Key from tmrow Submit ``` これは、保存した情報を入力し、ローカルストレージに保存するフォームです。 次に、結果領域を作成します。最終的なフォームタグの下に、いくつかの div を追加します。 ```HTML loadingRegion:\nCarbon Usage:\nFossil Fuel Percentage:\nChange region\n```\nこの時点で、ビルドを試してみましょう。この拡張モジュールのパッケージの依存関係を必ずインストールしてください。\nnpm install\nこのコマンドは、Node Package Manager である npm を使用して、拡張機能のビルドプロセスに Webpack をインストールします。webpack はコードのコンパイルを処理するバンドルです。この処理の出力は /dist/main",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12218,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 818,
    "chunk_index": 16,
    "total_chunks": 18
  },
  {
    "id": "078d80fd1f80e5f6ca170ebb5887b972",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "ブラウザ拡張機能プロジェクト その 1: ブラウザのすべて",
    "content": "モジュールでは、パッケージ管理の詳細を学ぶことができます。 コードベースに目を通してみてください。 dist -|manifestjson (ここに設定されているデフォルト) -|indexhtml (フロントエンド HTML マークアップはこちら) -|backgroundjs (バックグラウンド JS はこちら) -|mainjs (ビルド JS) src -|indexjs (あなたのJSコードはここにあります) ✅ API キーとリージョンコードが手元にあれば、後で使うときのためにノートのどこかに保存しておきましょう。 拡張機能の HTML を構築する この拡張機能には2つのビューがあります。1つは API キーとリージョンコードを収集するためのものです。 そして2つ目は、地域の炭素使用量を表示するためのものです。 まずはフォーム用の HTML を構築し、CSS でスタイリングしてみましょう。 /dist フォルダにフォームと結果領域を作成します。indexhtml ファイルの中には、区切りのついたフォーム領域を作成します。 ```HTML NewAdd your Information Region Name Your API Key from tmrow Submit ``` これは、保存した情報を入力し、ローカルストレージに保存するフォームです。 次に、結果領域を作成します。最終的なフォームタグの下に、いくつかの div を追加します。 ```HTML loadingRegion: Carbon Usage: Fossil Fuel Percentage: Change region ``` この時点で、ビルドを試してみましょう。この拡張モジュールのパッケージの依存関係を必ずインストールしてください。 npm install このコマンドは、Node Package Manager である npm を使用して、拡張機能のビルドプロセスに Webpack をインストールします。webpack はコードのコンパイルを処理するバンドルです。この処理の出力は /dist/mainjs を見ることで見ることができます - コードがバンドルされていることがわかります。\nとりあえず、拡張機能をビルドして、拡張機能として Edge にデプロイすると、フォームがきれいに表示されます。\nこれで、ブラウザ拡張機能を構築するための第一歩が踏み出せました。この後のレッスンでは、ブラウザ拡張機能をより機能的で便利なものにしていきます。\n🚀 チャレンジ\nブラウザの拡張機能ストアを見て、ブラウザにインストールしてください。興味深い方法でそのファイルを調べることができます。あなたは何を発見しましたか？\nレッスン後の小テスト\nレッスン後の小テスト\n復習と自己学習\nこのレッスンでは、Web ブラウザの歴史について少し学びました。この機会に、Web ブラウザの歴史を読むことで、World Wide Web の発明者がどのように Web ブラウザの使用を想定しているかを学びましょう。役に立つサイトをいくつか紹介します。\nWeb ブラウザの歴史\nWeb の歴史\nティム・バーナーズ・リーのインタビュー\n課題\n拡張機能のスタイル変更",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12218,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1065,
    "chunk_index": 17,
    "total_chunks": 18
  },
  {
    "id": "ddc62849527f9cd22cf3c1d380382361",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ms.md",
    "source_type": "git_repo",
    "title": "Projek Pelanjutan Penyemak Imbas Bahagian 1: Semua mengenai Penyemak Imbas",
    "content": "Projek Pelanjutan Penyemak Imbas Bahagian 1: Semua mengenai Penyemak Imbas\nSketchnote karya Wassim Chegham\nKuiz Pra Kuliah\nKuiz Pra Kuliah\nPengenalan\nSambungan penyemak imbas menambah fungsi tambahan pada penyemak imbas Tetapi sebelum anda membuatnya, anda harus mengetahui sedikit tentang bagaimana penyemak imbas melakukan kerja mereka Mengenai penyemak imbas\nDalam siri pelajaran ini, anda akan belajar bagaimana membina pelanjutan penyemak imbas yang akan berfungsi pada penyemak imbas Chrome, Firefox dan Edge Di bahagian ini, anda akan mengetahui cara penyemak imbas berfungsi dan memaparkan elemen pelanjutan penyemak imbas Tetapi apakah sebenarnya penyemak imbas itu Ini adalah aplikasi perisian yang memungkinkan pengguna akhir mengakses kandungan dari pelayan dan memaparkannya di laman web ✅ Sejarah sedikit: penyemak imbas pertama dipanggil 'WorldWideWeb' dan dicipta oleh Sir Timothy Berners-Lee pada tahun 1990 Beberapa penyemak imbas awal, melalui Karen McGrane\nApabila pengguna tersambung ke internet menggunakan alamat URL (Uniform Resource Locator), biasanya menggunakan Hypertext Transfer Protocol melalui alamat http atau https, penyemak imbas berkomunikasi dengan pelayan web dan mengambil halaman web Pada titik ini, mesin rendering penyemak imbas memaparkannya pada perangkat pengguna, yang mungkin merupakan telefon bimbit, desktop, atau komputer riba Penyemak imbas juga memiliki kemampuan untuk menyimpan konten sehingga tidak perlu diambil dari pelayan setiap masa Mereka dapat mencatat sejarah aktiviti menyemak imbas pengguna, menyimpan 'kuki', yang merupakan sekumpulan kecil data yang mengandungi maklumat yang digunakan untuk menyimpan aktiviti pengguna, dan banyak lagi",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10364,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ms.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "0bcc25354ce24fc31e59485e523d8c62",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ms.md",
    "source_type": "git_repo",
    "title": "Projek Pelanjutan Penyemak Imbas Bahagian 1: Semua mengenai Penyemak Imbas",
    "content": "http atau https, penyemak imbas berkomunikasi dengan pelayan web dan mengambil halaman web Pada titik ini, mesin rendering penyemak imbas memaparkannya pada perangkat pengguna, yang mungkin merupakan telefon bimbit, desktop, atau komputer riba Penyemak imbas juga memiliki kemampuan untuk menyimpan konten sehingga tidak perlu diambil dari pelayan setiap masa Mereka dapat mencatat sejarah aktiviti menyemak imbas pengguna, menyimpan 'kuki', yang merupakan sekumpulan kecil data yang mengandungi maklumat yang digunakan untuk menyimpan aktiviti pengguna, dan banyak lagiPerkara yang sangat penting untuk diingat mengenai penyemak imbas ialah semuanya tidak sama Setiap penyemak imbas mempunyai kelebihan dan kekurangannya, dan pembangun web profesional perlu memahami cara membuat laman web berfungsi dengan baik di antara penyemak imbas Ini merangkumi pengendalian ruang pandang kecil seperti telefon bimbit, dan juga pengguna yang berada di luar talian Laman web yang sangat berguna yang mungkin anda tandakan dalam penyemak imbas apa pun yang anda mahu gunakan ialah caniuse com Semasa anda membina laman web, sangat berguna untuk menggunakan senarai teknologi yang disokong oleh caniuse sehingga anda dapat menyokong pengguna anda dengan sebaik-baiknya ✅ Bagaimanakah anda dapat mengetahui penyemak imbas apa yang paling popular dengan pangkalan pengguna laman web anda Periksa analisis anda - anda boleh memasang pelbagai pakej analitik sebagai sebahagian daripada proses pengembangan web anda, dan mereka akan memberitahu anda penyemak imbas apa yang paling banyak digunakan oleh pelbagai penyemak imbas yang popular Pelanjutan Penyemak Imbas\nMengapakah anda mahu membina pelanjutan penyemak imbas Adalah berguna untuk melampirkan pada penyemak imbas anda apabila anda memerlukan akses cepat ke tugas yang cenderung anda ulang",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10364,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ms.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "c0502e5a56ccf9bbadb6376e589cea6f",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ms.md",
    "source_type": "git_repo",
    "title": "Projek Pelanjutan Penyemak Imbas Bahagian 1: Semua mengenai Penyemak Imbas",
    "content": "penyemak imbas apa yang paling popular dengan pangkalan pengguna laman web anda Periksa analisis anda - anda boleh memasang pelbagai pakej analitik sebagai sebahagian daripada proses pengembangan web anda, dan mereka akan memberitahu anda penyemak imbas apa yang paling banyak digunakan oleh pelbagai penyemak imbas yang popular Pelanjutan Penyemak Imbas Mengapakah anda mahu membina pelanjutan penyemak imbas Adalah berguna untuk melampirkan pada penyemak imbas anda apabila anda memerlukan akses cepat ke tugas yang cenderung anda ulangContohnya, jika anda perlu memeriksa warna di pelbagai laman web yang anda berinteraksi, anda mungkin memasang pelanjutan penyemak imbas pemilih warna Sekiranya anda menghadapi masalah mengingat kata laluan, anda mungkin menggunakan pelanjutan penyemak imbas pengurusan kata laluan Pelanjutan penyemak imbas juga senang dikembangkan Mereka cenderung menguruskan sejumlah tugas yang mereka laksanakan dengan baik ✅ Apakah pelanjutan penyemak imbas kegemaran anda Tugas apa yang mereka laksanakan Memuat turun pelanjutan penyemak imbas\nSebelum anda mula membina, lihatlah proses membina dan menggunakan pelanjutan penyemak imbas Walaupun setiap penyemak imbas sedikit berbeza dalam cara mereka menguruskan tugas ini, prosesnya serupa di Chrome dan Firefox dengan contoh ini di Edge:\nPada dasarnya, prosesnya adalah:\nbuat pelanjutan anda menggunakan npm build\narahkan di penyemak imbas ke panel pelanjutan menggunakan butang \"Tetapan dan lain-lain\" (ikon",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10364,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ms.md",
      "source_type": "git_repo"
    },
    "token_count": 417,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "93e38864a4a542101080362b9d294e55",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ms.md",
    "source_type": "git_repo",
    "title": "Projek Pelanjutan Penyemak Imbas Bahagian 1: Semua mengenai Penyemak Imbas",
    "content": "baik ✅ Apakah pelanjutan penyemak imbas kegemaran anda Tugas apa yang mereka laksanakan Memuat turun pelanjutan penyemak imbas Sebelum anda mula membina, lihatlah proses membina dan menggunakan pelanjutan penyemak imbas Walaupun setiap penyemak imbas sedikit berbeza dalam cara mereka menguruskan tugas ini, prosesnya serupa di Chrome dan Firefox dengan contoh ini di Edge: Pada dasarnya, prosesnya adalah: buat pelanjutan anda menggunakan npm build arahkan di penyemak imbas ke panel pelanjutan menggunakan butang \"Tetapan dan lain-lain\" (ikon) di kanan atas\njika ia adalah pemasangan baru, pilih load unpacked untuk memuat naik ekstensi baru dari folder buildnya (dalam kes kami adalah / dist)\natau, klik reload jika anda memuat semula pelanjutan yang sudah dipasang\n✅ Arahan ini berkaitan dengan sambungan yang anda buat sendiri; untuk memasang pelanjutan yang telah dilepaskan ke kedai pelanjutan penyemak imbas yang berkaitan dengan setiap penyemak imbas, anda harus menavigasi ke kedai dan pasang pelanjutan pilihan anda Bermula Di Sini\nAnda akan membina pelanjutan penyemak imbas yang memaparkan jejak karbon wilayah anda, menunjukkan penggunaan tenaga wilayah anda dan sumber tenaga Pelanjutan penyemak imbas tersebut akan mempunyai bentuk yang mengumpulkan kunci API sehingga anda dapat mengaksesnya\nCO2 Signal's API Keperluan:\nkunci API; masukkan e-mel anda di dalam kotak di halaman ini dan satu akan dihantar kepada anda\nkod untuk wilayah anda yang sesuai dengan Peta Elektrik (di Boston, misalnya, Saya menggunakan 'US-NEISO') kod pemula Muat turun folder start; anda akan melengkapkan kod dalam folder ini NPM - NPM adalah alat pengurusan pakej; memasangnya secara tempatan dan pakej yang disenaraikan dalam fail package",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10364,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ms.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "9e2382bd388fe2ef4cc60ea955970539",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ms.md",
    "source_type": "git_repo",
    "title": "Projek Pelanjutan Penyemak Imbas Bahagian 1: Semua mengenai Penyemak Imbas",
    "content": "mempunyai bentuk yang mengumpulkan kunci API sehingga anda dapat mengaksesnya CO2 Signal's API Keperluan: kunci API; masukkan e-mel anda di dalam kotak di halaman ini dan satu akan dihantar kepada anda kod untuk wilayah anda yang sesuai dengan Peta Elektrik (di Boston, misalnya, Saya menggunakan 'US-NEISO') kod pemula Muat turun folder start; anda akan melengkapkan kod dalam folder ini NPM - NPM adalah alat pengurusan pakej; memasangnya secara tempatan dan pakej yang disenaraikan dalam fail packagejson anda akan dipasang untuk digunakan oleh aset web anda\n✅ Ketahui lebih lanjut mengenai pengurusan pakej dalam modul pembelajaran yang sangat baik\nLuangkan masa sebentar untuk melihat pangkalan kode:\ndist\n-|manifest json (lalai ditetapkan di sini)\n-|index html (front-end HTML markup di sini)\n-|background js (latar belakang JS di sini)\n-|main js (membina JS)\nsrc\n-|index js (kod JS anda ada di sini)\n✅ Setelah anda mempunyai kunci API dan kod Wilayah yang berguna, simpan di suatu tempat dalam nota untuk penggunaan masa depan Bina HTML untuk pelanjutan penyemak imbas\nPelanjutan penyemak imbas ini mempunyai dua pandangan Satu untuk mengumpulkan kunci API dan kod wilayah:\nDan yang kedua untuk memaparkan penggunaan karbon di rantau ini:\nMari mulakan dengan membina HTML untuk borang dan menggayakannya dengan CSS Dalam folder / dist, anda akan membina borang dan kawasan hasil Dalam fail index html, isikan kawasan borang yang digambarkan:\n```HTML\nBaru Tambahkan Maklumat anda\nNama Wilayah\nKunci API anda dari tmrow\nHantar\n```\nIni adalah bentuk di mana maklumat yang anda simpan akan dimasukkan dan disimpan ke simpanan tempatan",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10364,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ms.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "910f50dfad062012d25286e8ae26d0e9",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ms.md",
    "source_type": "git_repo",
    "title": "Projek Pelanjutan Penyemak Imbas Bahagian 1: Semua mengenai Penyemak Imbas",
    "content": "kunci API dan kod wilayah: Dan yang kedua untuk memaparkan penggunaan karbon di rantau ini: Mari mulakan dengan membina HTML untuk borang dan menggayakannya dengan CSS Dalam folder / dist, anda akan membina borang dan kawasan hasil Dalam fail index html, isikan kawasan borang yang digambarkan: ```HTML Baru Tambahkan Maklumat anda Nama Wilayah Kunci API anda dari tmrow Hantar ``` Ini adalah bentuk di mana maklumat yang anda simpan akan dimasukkan dan disimpan ke simpanan tempatanSeterusnya, buat kawasan hasil; di bawah tag borang akhir, tambahkan beberapa divs:\n```HTML\nloading Wilayah:\nPenggunaan Karbon:\nPeratusan Bahan Bakar Fosil:\nTukar wilayah\n```\nPada ketika ini, anda boleh mencuba binaan Pastikan memasang pergantungan pakej pelanjutan ini:\nnpm install\nPerintah ini akan menggunakan npm, Pengurus Pakej Node, untuk memasang paket web untuk proses pembuatan pelanjutan anda Webpack adalah bundler yang mengendalikan menyusun kod Anda dapat melihat output proses ini dengan melihat di /dist/main js - anda melihat kodnya telah digabungkan Buat masa ini, pelanjutan penyemak imbas perlu dibina dan, jika anda menyebarkannya ke Edge sebagai pelanjutan, anda akan melihat borang yang dipaparkan dengan kemas Tahniah, anda telah mengambil langkah pertama untuk membina pelanjutan penyemak imbas Dalam pelajaran seterusnya, anda akan menjadikannya lebih berfungsi dan berguna 🚀 Cabaran\nLihatlah kedai pelanjutan penyemak imbas dan pasang satu di penyemak imbas anda Anda boleh memeriksa failnya dengan cara yang menarik Apa yang anda dapati",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10364,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ms.md",
      "source_type": "git_repo"
    },
    "token_count": 435,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "8d31e0beebc496b7b83754bbf58b80b5",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ms.md",
    "source_type": "git_repo",
    "title": "Projek Pelanjutan Penyemak Imbas Bahagian 1: Semua mengenai Penyemak Imbas",
    "content": "anda melihat kodnya telah digabungkan Buat masa ini, pelanjutan penyemak imbas perlu dibina dan, jika anda menyebarkannya ke Edge sebagai pelanjutan, anda akan melihat borang yang dipaparkan dengan kemas Tahniah, anda telah mengambil langkah pertama untuk membina pelanjutan penyemak imbas Dalam pelajaran seterusnya, anda akan menjadikannya lebih berfungsi dan berguna 🚀 Cabaran Lihatlah kedai pelanjutan penyemak imbas dan pasang satu di penyemak imbas anda Anda boleh memeriksa failnya dengan cara yang menarik Apa yang anda dapatiKuiz Pasca Kuliah\nKuiz Pasca Kuliah\nMengkaji dan Belajar Sendiri\nDalam pelajaran ini anda belajar sedikit mengenai sejarah penyemak imbas web; ambil kesempatan ini untuk mengetahui bagaimana pencipta World Wide Web membayangkan penggunaannya dengan membaca lebih banyak mengenai sejarahnya Beberapa laman web yang berguna termasuk:\nSejarah Penyemak Imbas Web\nSejarah Tentang Web\nTemu ramah dengan Tim Berners-Lee\nTugasan\nMengayakan semula penlanjut penyemak imbas",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10364,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.ms.md",
      "source_type": "git_repo"
    },
    "token_count": 296,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "71832ce68b5c03eefd3655e37f9c3367",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.pt.md",
    "source_type": "git_repo",
    "title": "Projeto de extensão do navegador, parte 1: tudo sobre navegadores",
    "content": "Projeto de extensão do navegador, parte 1: tudo sobre navegadores\nEsboço de Wassim Chegham\nLeitura pré-quiz\nLeitura pré-quiz\nIntrodução:\nAs extensões do navegador adicionam funcionalidade adicional a um navegador Mas antes de criar um, você deve aprender um pouco sobre como os navegadores funcionam Sobre o navegador:\nNesta série de lições, você aprenderá como construir uma extensão de navegador que funcionará nos navegadores Chrome, Firefox e Edge Nesta parte, você descobrirá como os navegadores funcionam e estruturará os elementos da extensão do navegador Mas o que é exatamente um navegador É um aplicativo de software que permite ao usuário final acessar o conteúdo de um servidor e exibi-lo em páginas da web ✅ Um pouco de história: o primeiro navegador chamava-se 'WorldWideWeb' e foi criado por Sir Timothy Berners-Lee em 1990 Alguns navegadores antigos, por Karen McGrane\nQuando um usuário se conecta à Internet usando um endereço URL (Uniform Resource Locator), geralmente usando o protocolo de transferência de hipertexto por meio de um endereço http ou https, o navegador se comunica com um servidor da web e busca uma página da web Nesse ponto, o mecanismo de renderização do navegador o exibe no dispositivo do usuário, que pode ser um telefone celular, desktop ou laptop Os navegadores também têm a capacidade de armazenar o conteúdo em cache para que ele não precise ser recuperado do servidor todas as vezes Eles podem registrar o histórico da atividade de navegação de um usuário, armazenar 'cookies', que são pequenos bits de dados que contêm informações usadas para armazenar a atividade de um usuário e muito mais Uma coisa realmente importante a lembrar sobre os navegadores é que eles não são todos iguais Cada navegador tem seus pontos fortes e fracos, e um desenvolvedor profissional da web precisa entender como fazer com que as páginas tenham um bom desempenho em navegadores diferentes Isso inclui lidar com pequenas janelas de visualização, como as de um telefone celular, bem como quando um usuário está offline",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9965,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.pt.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "3c5c99320b7c393d70fdee61c7a8dee4",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.pt.md",
    "source_type": "git_repo",
    "title": "Projeto de extensão do navegador, parte 1: tudo sobre navegadores",
    "content": "para armazenar a atividade de um usuário e muito mais Uma coisa realmente importante a lembrar sobre os navegadores é que eles não são todos iguais Cada navegador tem seus pontos fortes e fracos, e um desenvolvedor profissional da web precisa entender como fazer com que as páginas tenham um bom desempenho em navegadores diferentes Isso inclui lidar com pequenas janelas de visualização, como as de um telefone celular, bem como quando um usuário está offlineUm site realmente útil que você provavelmente deve adicionar aos favoritos em qualquer navegador de sua preferência é caniuse com Quando você está construindo páginas da web, é muito útil usar as listas de tecnologias suportadas do caniuse para que você possa dar o melhor suporte aos seus usuários ✅ Como você pode saber quais navegadores são mais populares com a base de usuários do seu site Verifique sua análise - você pode instalar vários pacotes de análise como parte de seu processo de desenvolvimento da web, e eles dirão quais navegadores são mais usados ​​pelos vários navegadores populares Extensões de navegador\nPor que você deseja construir uma extensão de navegador É uma coisa útil para anexar ao seu navegador quando você precisa de acesso rápido às tarefas que tende a repetir Por exemplo, se você precisar verificar as cores nas várias páginas da web com as quais interage, poderá instalar uma extensão de navegador com seletor de cores Se você tiver problemas para lembrar as senhas, pode usar uma extensão do navegador para gerenciamento de senhas As extensões do navegador também são divertidas de desenvolver Eles tendem a gerenciar um número finito de tarefas que executam bem ✅ Quais são as suas extensões de navegador favoritas Quais tarefas elas realizam Instalando extensões\nAntes de começar a construir, dê uma olhada no processo de construção e implantação de uma extensão de navegador",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9965,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.pt.md",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "a7b28f1ce95efb916c3f7acde35118f4",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.pt.md",
    "source_type": "git_repo",
    "title": "Projeto de extensão do navegador, parte 1: tudo sobre navegadores",
    "content": "seletor de cores Se você tiver problemas para lembrar as senhas, pode usar uma extensão do navegador para gerenciamento de senhas As extensões do navegador também são divertidas de desenvolver Eles tendem a gerenciar um número finito de tarefas que executam bem ✅ Quais são as suas extensões de navegador favoritas Quais tarefas elas realizam Instalando extensões Antes de começar a construir, dê uma olhada no processo de construção e implantação de uma extensão de navegadorEmbora cada navegador varie um pouco na forma como gerenciam essa tarefa, o processo é semelhante no Chrome e no Firefox a este exemplo no Edge:\nBasicamente, o processo será:\nconstruir sua extensão usando npm build\nno navegador ir até o painel de extensões usando o ícone na parte superior da direita\nse for uma nova instalação, selecione load unpacked para carregar uma nova extensão a partir de sua pasta (no nosso caso, é /dist)\nou clique em recarregar se está recarregando a extensão já instalada\n✅ Estas instruções referem-se a extensões que você mesmo constrói; para instalar extensões que foram lançadas para seu navegador, você deve navegar até essas lojas e instalar a extensão de sua escolha Iniciar\nVocê vai construir uma extensão de navegador que exibe a pegada de carbono da sua região, mostrando o uso de energia da sua região e a fonte da energia A extensão terá um formulário que coleta uma chave API para que você possa acessar a API do CO2 Signal Você precisa:\numa chave API; coloque seu email no formulário da página e uma chave será enviada para você o código de sua região correspondente ao Mapa de eletricidade (em Boston, por exemplo, EU uso 'US-NEISO') o código de inicio Faça o download da pasta start; você irá completar o código desta pasta NPM - NPM é uma ferramenta de gerenciamento de pacotes; instale-o localmente e os pacotes listados em seu arquivo package",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9965,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.pt.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "cdeaa95597d5d16d4ad577b6f2d1e60b",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.pt.md",
    "source_type": "git_repo",
    "title": "Projeto de extensão do navegador, parte 1: tudo sobre navegadores",
    "content": "do CO2 Signal Você precisa: uma chave API; coloque seu email no formulário da página e uma chave será enviada para você o código de sua região correspondente ao Mapa de eletricidade (em Boston, por exemplo, EU uso 'US-NEISO') o código de inicio Faça o download da pasta start; você irá completar o código desta pasta NPM - NPM é uma ferramenta de gerenciamento de pacotes; instale-o localmente e os pacotes listados em seu arquivo packagejson serão instalados para uso por seu app da web ✅ Saiba mais sobre gerenciamento de pacotes neste excelente módulo de aprendizagem\nReserve um minuto para examinar o código base:\ndist\n- | manifest json (padrões definidos aqui)\n- | index html (marcador HTML do front-end aqui)\n- | background js (JS de fundo aqui)\n- | main js (JS construído)\nsrc\n- | index js (seu código JS vai aqui)\n✅ Assim que tiver a chave API e o código da região em mãos, armazene-os em uma nota para uso futuro Construir o HTML para a extensão\nEsta extensão possui duas visualizações Uma para reunir a chave API e o código de região:\nE a segunda para mostrar o uso de carbono da região:\nVamos começar construindo o HTML para o formulário e estilizando-o com CSS Na pasta /dist, você construirá um formulário e uma área de resultados No arquivo index html, preencha a área delineada do formulário:\n```HTML\nNovo Adicione suas informações Nome da Região\nSua chave de API\nEnviar\n```\nEste é o formulário onde suas informações salvas serão inseridas e guardadas no armazenamento local Em seguida, crie a área de resultados; após a tag final do formulário, adicione algumas divs:\n```HTML\ncarregando Região:\nUso de carbono:\nPorcentagem de combustível fóssil:\nTrocar região\n```\nNeste ponto, você pode tentar um build (construção)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9965,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.pt.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "75dd201a8b56e96f7609df888a75c28a",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.pt.md",
    "source_type": "git_repo",
    "title": "Projeto de extensão do navegador, parte 1: tudo sobre navegadores",
    "content": "No arquivo index html, preencha a área delineada do formulário: ```HTML Novo Adicione suas informações Nome da Região Sua chave de API Enviar ``` Este é o formulário onde suas informações salvas serão inseridas e guardadas no armazenamento local Em seguida, crie a área de resultados; após a tag final do formulário, adicione algumas divs: ```HTML carregando Região: Uso de carbono: Porcentagem de combustível fóssil: Trocar região ``` Neste ponto, você pode tentar um build (construção)Certifique-se de instalar o pacote de dependências desta extensão:\nnpm install\nEste comando usará npm, o Node Package Manager, para instalar o webpack para o processo de build (construção) de sua extensão Webpack é um bundler (empacotador) que lida com a compilação de código Você pode ver a saída desse processo olhando em /dist/main js - você vê que o código foi empacotado Por enquanto, a extensão deve ser construída (build) e, se você implantá-la (deploy) no Edge como uma extensão, verá um formulário perfeitamente exibido Parabéns, você deu os primeiros passos para criar uma extensão de navegador Nas lições subsequentes, você o tornará mais funcional e útil 🚀Desafio\nDê uma olhada em uma loja de extensões de navegador e instale uma em seu navegador Você pode examinar seus arquivos de maneiras interessantes O que você descobriu Quiz pós-leitura\nQuiz pós-leitura\nRevisão e auto-estudo\nNesta lição você aprendeu um pouco sobre a história do navegador da web; aproveite esta oportunidade para aprender como os inventores da World Wide Web imaginaram seu uso, lendo mais sobre sua história Alguns sites úteis incluem:\nA história dos navegadores web\nHistória da Web\nUma entrevista com Tim Berners-Lee\nTarefa\nRefatore o estilo de sua extensão",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9965,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.pt.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "afe82fff2790f9e7e7797a5345b316f7",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\solution\\index.css",
    "source_type": "git_repo",
    "title": "index",
    "content": ".highlight {\n\tbackground-color: yellow;\n}\n\n.error {\n\tbackground-color: lightcoral;\n\tborder-color: red;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 113,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\solution\\index.css",
      "source_type": "git_repo"
    },
    "token_count": 23,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "af575aaf9a697c82f3dda0327c6556df",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\solution\\index.html",
    "source_type": "git_repo",
    "title": "Typing",
    "content": "Typing\nPractice your typing\nClick start to have a quote displayed. Type the quote as fast as you can!\nStart",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 551,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\solution\\index.html",
      "source_type": "git_repo"
    },
    "token_count": 25,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "67d3882d09f9d6588c51109dbcac47a6",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\solution\\index.js",
    "source_type": "git_repo",
    "title": "index",
    "content": "const quotes = [\n\t'When you have eliminated the impossible, whatever remains, however improbable, must be the truth.',\n\t'There is nothing more deceptive than an obvious fact.',\n\t'I ought to know by this time that when a fact appears to be opposed to a long train of deductions it invariably proves to be capable of bearing some other interpretation.',\n\t'I never make exceptions. An exception disproves the rule.',\n\t'What one man can invent another can discover.',\n\t'Nothing clears up a case so much as stating it to another person.',\n\t'Education never ends, Watson. It is a series of lessons, with the greatest for the last.',\n];\n\n// array for storing the words of the current challenge\nlet words = [];\n// stores the index of the word the player is currently typing\nlet wordIndex = 0;\n// default value for startTime (will be set on start)\nlet startTime = Date.now();\n\n// grab UI items\nconst quoteElement = document.getElementById('quote');\nconst messageElement = document.getElementById('message')\nconst typedValueElement = document.getElementById('typed-value');\n\ndocument.getElementById('start').addEventListener('click', function () {\n\t// get a quote\n\tconst quoteIndex = Math.floor(Math.random() * quotes.length);\n\tconst quote = quotes[quoteIndex];\n\t// Put the quote into an array of words\n\twords = quote.split(' ');\n\t// reset the word index for tracking\n\twordIndex = 0;\n\n// UI updates\n\t// Create an array of span elements so we can set a class\n\tconst spanWords = words.map(function(word) { return `<span>${word} </span>`});\n\t// Convert into string and set as innerHTML on quote display\n\tquoteElement.innerHTML = spanWords.join('');\n\t// Highlight the first word\n\tquoteElement.childNodes[0].className = 'highlight';\n\t// Clear any prior messages\n\tmessageElement.innerText = '';\n\n// Setup the textbox\n\t// Clear the textbox\n\ttypedValueElement.value = '';\n\t// set focus\n\ttypedValueElement.focus();\n\t// set the event handler\n\n// Start the timer\n\tstartTime = new Date().getTime();\n});\n\ntypedValueElement.addEventListener('input', (e) => {\n\t// Get the current word\n\tconst currentWord = words[wordIndex];\n\t// get the current value\n\tconst typedValue = typedValueElement.value;",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 3209,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\solution\\index.js",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "2f06028bb341471ebf2aabddd290f1b1",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\solution\\index.js",
    "source_type": "git_repo",
    "title": "index",
    "content": "set as innerHTML on quote display quoteElement.innerHTML = spanWords.join(''); // Highlight the first word quoteElement.childNodes[0].className = 'highlight'; // Clear any prior messages messageElement.innerText = ''; // Setup the textbox // Clear the textbox typedValueElement.value = ''; // set focus typedValueElement.focus(); // set the event handler // Start the timer startTime = new Date().getTime(); }); typedValueElement.addEventListener('input', (e) => { // Get the current word const currentWord = words[wordIndex]; // get the current value const typedValue = typedValueElement.value;\n\nif (typedValue === currentWord && wordIndex === words.length - 1) {\n\t\t// end of quote\n\t\t// Display success\n\t\tconst elapsedTime = new Date().getTime() - startTime;\n\t\tconst message = `CONGRATULATIONS! You finished in ${elapsedTime / 1000} seconds.`;\n\t\tmessageElement.innerText = message;\n\t} else if (typedValue.endsWith(' ') && typedValue.trim() === currentWord) {\n\t\t// end of word\n\t\t// clear the typedValueElement for the new word\n\t\ttypedValueElement.value = '';\n\t\t// move to the next word\n\t\twordIndex++;\n\t\t// reset the class name for all elements in quote\n\t\tfor (const wordElement of quoteElement.childNodes) {\n\t\t\twordElement.className = '';\n\t\t}\n\t\t// highlight the new word\n\t\tquoteElement.childNodes[wordIndex].className = 'highlight';\n\t} else if (currentWord.startsWith(typedValue)) {\n\t\t// currently correct\n\t\t// highlight the next word\n\t\ttypedValueElement.className = '';\n\t} else {\n\t\t// error state\n\t\ttypedValueElement.className = 'error';\n\t}\n});",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 3209,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\solution\\index.js",
      "source_type": "git_repo"
    },
    "token_count": 369,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "ce3ea39532511ce1e2ae2bd7096e04dd",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\solution\\README.md",
    "source_type": "git_repo",
    "title": "README",
    "content": "This is a placeholder, left blank purposefully",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 46,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\solution\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 9,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "207afcb80cdbf50271d4a4675e021e1f",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\assignment.md",
    "source_type": "git_repo",
    "title": "Create a new keyboard game",
    "content": "Create a new keyboard game\nInstructions\nCreate a small game that uses keyboard events to do tasks. It may be a different kind of typing game, or an art type game that paints pixels to the screen on keystrokes. Get creative!\nRubric\n| Criteria | Exemplary                | Adequate                 | Needs Improvement |\n| -------- | ------------------------ | ------------------------ | ----------------- |\n|          | A full game is presented | The game is very minimal | The game has bugs |\n|          |                          |                          |                   |",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 603,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\assignment.md",
      "source_type": "git_repo"
    },
    "token_count": 107,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "bee53126bbae06c66928e6436a3fb460",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：關於瀏覽器",
    "content": "瀏覽器擴充功能專案 Part 1：關於瀏覽器\n由 Wassim Chegham 繪製\n課前測驗\n課前測驗\n大綱\n瀏覽器擴充功能新增額外的功能給瀏覽器。在你建立之前，你應該學習瀏覽器是如何運作的。\n關於瀏覽器\n在這一系列的課程中，你會學習如何建立瀏覽器擴充功能，運作在 Chrome、Firefox 與 Edge 瀏覽器上。在這一章中，你會探索瀏覽器是如何運作，建立瀏覽器擴充功能的內容。\n但到底何謂瀏覽器？它是幫助用戶顯示伺服器內容到網頁上的程式軟體。\n✅ 小歷史：第一個網頁瀏覽器為 'WorldWideWeb'，由 Timothy Berners-Lee 爵士於 1990 年建立。\n這邊有一些早期的瀏覽器，請參考Karen McGrane\n用戶使用網址 URL (Uniform Resource Locator) 位置連上網路，通常以 http 或 https 位置開頭使用超文本傳輸協定(Hypertext Transfer Protocol)，瀏覽器便能與該伺服器溝通並抓取網頁的資料。\n這時，瀏覽器轉譯引擎會呈現到用戶的裝置上，可以是手機、桌機或是筆記型電腦。\n瀏覽器也有能力暫存內容，不需要每一次都向伺服器請求內容。瀏覽器儲存用戶的瀏覽紀錄、儲存 'cookies'，一種包含用戶活動資訊的小型資料。\n請記得一件重要的事，各家瀏覽器並不會相同！每一種瀏覽器都有各自的長處短處，專業的網頁開發人員必須了解如何讓網頁在不同瀏覽器上運作正常。這包含處理手機的小視窗，處理離線用戶的行為。\n這邊有一個值得加到你書籤的實用網頁：caniuse",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8387,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 769,
    "chunk_index": 0,
    "total_chunks": 12
  },
  {
    "id": "78656108f8c0656dcc4076c3837a63f8",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：關於瀏覽器",
    "content": "瀏覽器擴充功能專案 Part 1：關於瀏覽器\n由 Wassim Chegham 繪製\n課前測驗\n課前測驗\n大綱\n瀏覽器擴充功能新增額外的功能給瀏覽器。在你建立之前，你應該學習瀏覽器是如何運作的。\n關於瀏覽器\n在這一系列的課程中，你會學習如何建立瀏覽器擴充功能，運作在 Chrome、Firefox 與 Edge 瀏覽器上。在這一章中，你會探索瀏覽器是如何運作，建立瀏覽器擴充功能的內容。\n但到底何謂瀏覽器？它是幫助用戶顯示伺服器內容到網頁上的程式軟體。\n✅ 小歷史：第一個網頁瀏覽器為 'WorldWideWeb'，由 Timothy Berners-Lee 爵士於 1990 年建立。\n這邊有一些早期的瀏覽器，請參考Karen McGrane\n用戶使用網址 URL (Uniform Resource Locator) 位置連上網路，通常以 http 或 https 位置開頭使用超文本傳輸協定(Hypertext Transfer Protocol)，瀏覽器便能與該伺服器溝通並抓取網頁的資料。\n這時，瀏覽器轉譯引擎會呈現到用戶的裝置上，可以是手機、桌機或是筆記型電腦。\n瀏覽器也有能力暫存內容，不需要每一次都向伺服器請求內容。瀏覽器儲存用戶的瀏覽紀錄、儲存 'cookies'，一種包含用戶活動資訊的小型資料。\n請記得一件重要的事，各家瀏覽器並不會相同！每一種瀏覽器都有各自的長處短處，專業的網頁開發人員必須了解如何讓網頁在不同瀏覽器上運作正常。這包含處理手機的小視窗，處理離線用戶的行為。\n這邊有一個值得加到你書籤的實用網頁：caniusecom。當你在建構網頁時，你可以查詢 caniuse 技術支援清單，確保你能提供用戶最佳的使用體驗。\n✅ 你知道你的網頁用戶最常使用什麼瀏覽器嗎？檢查你的分析程式，你可以安裝各種分析程式當作是你開發的一種環節，它們會告訴你那些瀏覽器最常被使用。\n瀏覽器擴充功能\n為什麼你需要建立瀏覽器擴充功能？它能附加在瀏覽器上，讓你快速地重複執行部分功能。舉例來說，如果你需要在網頁中檢查你所互動的顏色，你或許需要顏色選擇器擴充功能；如果你有記憶帳號密碼的困擾，你可能需要密碼管理擴充功能。\n瀏覽器擴充功能在開發上也很有趣。它們有效地管理並執行少部分任務課題。\n✅ 你最喜歡哪一項瀏覽器擴充功能？它們提供了什麼功能？\n安裝擴充功能\n在你建立擴充功能以前，先看看建制與安裝瀏覽器擴充功能的流程。每一種瀏覽器在管理套件上可能有些不同，Edge上的管理過程就與 Chrome 與 Firefox 相似：\n大體而言，過程為：\n指令 npm run build 建制你的管理套件\n在瀏覽器中的延伸模組區點擊右上方的「更多設定」按鈕\n如果這是新的套件，選擇 load unpacked 從資料夾上傳新的擴充套件(在我們的例子中， /dist )\n如果這是已安裝的套件，點擊 reload 按鈕\n✅ 上述教學步驟讓你導入自己建立的擴充功能；若要安裝已公開的套件，你可以前往瀏覽器擴充功能商店，逛逛這些商店並安裝你選擇的套件。\n展開行動\n你打算寫一套擴充功能來顯示你國家的碳足跡，顯示國家的能源使用量與可用能源量。套件內會有 API Key 來存取網頁 CO2 Signal 的 API。\n你需要：\n一組 API key：在網頁上輸入你的電子信箱，它會寄一組鑰匙給你\n給Electricity Map使用的國家區域代碼 (舉個例子，在波士頓使用'US-NEISO')\n程式碼，下載 start 資料夾，你需要修改裡面的程式碼檔案。\nNPM，NPM 是一套軟體包管理工具，在本地安裝的軟體包會被列在 package",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8387,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 1740,
    "chunk_index": 1,
    "total_chunks": 12
  },
  {
    "id": "d1c0d22ac5143a04dbb2a5538f7bf997",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：關於瀏覽器",
    "content": "1990 年建立。 這邊有一些早期的瀏覽器，請參考Karen McGrane 用戶使用網址 URL (Uniform Resource Locator) 位置連上網路，通常以 http 或 https 位置開頭使用超文本傳輸協定(Hypertext Transfer Protocol)，瀏覽器便能與該伺服器溝通並抓取網頁的資料。 這時，瀏覽器轉譯引擎會呈現到用戶的裝置上，可以是手機、桌機或是筆記型電腦。 瀏覽器也有能力暫存內容，不需要每一次都向伺服器請求內容。瀏覽器儲存用戶的瀏覽紀錄、儲存 'cookies'，一種包含用戶活動資訊的小型資料。 請記得一件重要的事，各家瀏覽器並不會相同！每一種瀏覽器都有各自的長處短處，專業的網頁開發人員必須了解如何讓網頁在不同瀏覽器上運作正常。這包含處理手機的小視窗，處理離線用戶的行為。 這邊有一個值得加到你書籤的實用網頁：caniusecom。當你在建構網頁時，你可以查詢 caniuse 技術支援清單，確保你能提供用戶最佳的使用體驗。 ✅ 你知道你的網頁用戶最常使用什麼瀏覽器嗎？檢查你的分析程式，你可以安裝各種分析程式當作是你開發的一種環節，它們會告訴你那些瀏覽器最常被使用。 瀏覽器擴充功能 為什麼你需要建立瀏覽器擴充功能？它能附加在瀏覽器上，讓你快速地重複執行部分功能。舉例來說，如果你需要在網頁中檢查你所互動的顏色，你或許需要顏色選擇器擴充功能；如果你有記憶帳號密碼的困擾，你可能需要密碼管理擴充功能。 瀏覽器擴充功能在開發上也很有趣。它們有效地管理並執行少部分任務課題。 ✅ 你最喜歡哪一項瀏覽器擴充功能？它們提供了什麼功能？ 安裝擴充功能 在你建立擴充功能以前，先看看建制與安裝瀏覽器擴充功能的流程。每一種瀏覽器在管理套件上可能有些不同，Edge上的管理過程就與 Chrome 與 Firefox 相似： 大體而言，過程為： 指令 npm run build 建制你的管理套件 在瀏覽器中的延伸模組區點擊右上方的「更多設定」按鈕 如果這是新的套件，選擇 load unpacked 從資料夾上傳新的擴充套件(在我們的例子中， /dist ) 如果這是已安裝的套件，點擊 reload 按鈕 ✅ 上述教學步驟讓你導入自己建立的擴充功能；若要安裝已公開的套件，你可以前往瀏覽器擴充功能商店，逛逛這些商店並安裝你選擇的套件。 展開行動 你打算寫一套擴充功能來顯示你國家的碳足跡，顯示國家的能源使用量與可用能源量。套件內會有 API Key 來存取網頁 CO2 Signal 的 API。 你需要： 一組 API key：在網頁上輸入你的電子信箱，它會寄一組鑰匙給你 給Electricity Map使用的國家區域代碼 (舉個例子，在波士頓使用'US-NEISO') 程式碼，下載 start 資料夾，你需要修改裡面的程式碼檔案。 NPM，NPM 是一套軟體包管理工具，在本地安裝的軟體包會被列在 packagejson 檔案中，成為網頁利用的資源。\n✅ 從這個優質的學習套件中，學習更多關於軟體包管理。\n花點時間看一下程式檔案結構\ndist\n-|manifest",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8387,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 1506,
    "chunk_index": 2,
    "total_chunks": 12
  },
  {
    "id": "8e9c55e8a9c860b2a89a6dd7bde47ce7",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：關於瀏覽器",
    "content": "(Uniform Resource Locator) 位置連上網路，通常以 http 或 https 位置開頭使用超文本傳輸協定(Hypertext Transfer Protocol)，瀏覽器便能與該伺服器溝通並抓取網頁的資料。 這時，瀏覽器轉譯引擎會呈現到用戶的裝置上，可以是手機、桌機或是筆記型電腦。 瀏覽器也有能力暫存內容，不需要每一次都向伺服器請求內容。瀏覽器儲存用戶的瀏覽紀錄、儲存 'cookies'，一種包含用戶活動資訊的小型資料。 請記得一件重要的事，各家瀏覽器並不會相同！每一種瀏覽器都有各自的長處短處，專業的網頁開發人員必須了解如何讓網頁在不同瀏覽器上運作正常。這包含處理手機的小視窗，處理離線用戶的行為。 這邊有一個值得加到你書籤的實用網頁：caniusecom。當你在建構網頁時，你可以查詢 caniuse 技術支援清單，確保你能提供用戶最佳的使用體驗。 ✅ 你知道你的網頁用戶最常使用什麼瀏覽器嗎？檢查你的分析程式，你可以安裝各種分析程式當作是你開發的一種環節，它們會告訴你那些瀏覽器最常被使用。 瀏覽器擴充功能 為什麼你需要建立瀏覽器擴充功能？它能附加在瀏覽器上，讓你快速地重複執行部分功能。舉例來說，如果你需要在網頁中檢查你所互動的顏色，你或許需要顏色選擇器擴充功能；如果你有記憶帳號密碼的困擾，你可能需要密碼管理擴充功能。 瀏覽器擴充功能在開發上也很有趣。它們有效地管理並執行少部分任務課題。 ✅ 你最喜歡哪一項瀏覽器擴充功能？它們提供了什麼功能？ 安裝擴充功能 在你建立擴充功能以前，先看看建制與安裝瀏覽器擴充功能的流程。每一種瀏覽器在管理套件上可能有些不同，Edge上的管理過程就與 Chrome 與 Firefox 相似： 大體而言，過程為： 指令 npm run build 建制你的管理套件 在瀏覽器中的延伸模組區點擊右上方的「更多設定」按鈕 如果這是新的套件，選擇 load unpacked 從資料夾上傳新的擴充套件(在我們的例子中， /dist ) 如果這是已安裝的套件，點擊 reload 按鈕 ✅ 上述教學步驟讓你導入自己建立的擴充功能；若要安裝已公開的套件，你可以前往瀏覽器擴充功能商店，逛逛這些商店並安裝你選擇的套件。 展開行動 你打算寫一套擴充功能來顯示你國家的碳足跡，顯示國家的能源使用量與可用能源量。套件內會有 API Key 來存取網頁 CO2 Signal 的 API。 你需要： 一組 API key：在網頁上輸入你的電子信箱，它會寄一組鑰匙給你 給Electricity Map使用的國家區域代碼 (舉個例子，在波士頓使用'US-NEISO') 程式碼，下載 start 資料夾，你需要修改裡面的程式碼檔案。 NPM，NPM 是一套軟體包管理工具，在本地安裝的軟體包會被列在 packagejson 檔案中，成為網頁利用的資源。 ✅ 從這個優質的學習套件中，學習更多關於軟體包管理。 花點時間看一下程式檔案結構 dist -|manifestjson (defaults set)\n-|index",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8387,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 1468,
    "chunk_index": 3,
    "total_chunks": 12
  },
  {
    "id": "f0becf7dcfee1ce1e7dcfda8eaebee5d",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：關於瀏覽器",
    "content": "位置連上網路，通常以 http 或 https 位置開頭使用超文本傳輸協定(Hypertext Transfer Protocol)，瀏覽器便能與該伺服器溝通並抓取網頁的資料。 這時，瀏覽器轉譯引擎會呈現到用戶的裝置上，可以是手機、桌機或是筆記型電腦。 瀏覽器也有能力暫存內容，不需要每一次都向伺服器請求內容。瀏覽器儲存用戶的瀏覽紀錄、儲存 'cookies'，一種包含用戶活動資訊的小型資料。 請記得一件重要的事，各家瀏覽器並不會相同！每一種瀏覽器都有各自的長處短處，專業的網頁開發人員必須了解如何讓網頁在不同瀏覽器上運作正常。這包含處理手機的小視窗，處理離線用戶的行為。 這邊有一個值得加到你書籤的實用網頁：caniusecom。當你在建構網頁時，你可以查詢 caniuse 技術支援清單，確保你能提供用戶最佳的使用體驗。 ✅ 你知道你的網頁用戶最常使用什麼瀏覽器嗎？檢查你的分析程式，你可以安裝各種分析程式當作是你開發的一種環節，它們會告訴你那些瀏覽器最常被使用。 瀏覽器擴充功能 為什麼你需要建立瀏覽器擴充功能？它能附加在瀏覽器上，讓你快速地重複執行部分功能。舉例來說，如果你需要在網頁中檢查你所互動的顏色，你或許需要顏色選擇器擴充功能；如果你有記憶帳號密碼的困擾，你可能需要密碼管理擴充功能。 瀏覽器擴充功能在開發上也很有趣。它們有效地管理並執行少部分任務課題。 ✅ 你最喜歡哪一項瀏覽器擴充功能？它們提供了什麼功能？ 安裝擴充功能 在你建立擴充功能以前，先看看建制與安裝瀏覽器擴充功能的流程。每一種瀏覽器在管理套件上可能有些不同，Edge上的管理過程就與 Chrome 與 Firefox 相似： 大體而言，過程為： 指令 npm run build 建制你的管理套件 在瀏覽器中的延伸模組區點擊右上方的「更多設定」按鈕 如果這是新的套件，選擇 load unpacked 從資料夾上傳新的擴充套件(在我們的例子中， /dist ) 如果這是已安裝的套件，點擊 reload 按鈕 ✅ 上述教學步驟讓你導入自己建立的擴充功能；若要安裝已公開的套件，你可以前往瀏覽器擴充功能商店，逛逛這些商店並安裝你選擇的套件。 展開行動 你打算寫一套擴充功能來顯示你國家的碳足跡，顯示國家的能源使用量與可用能源量。套件內會有 API Key 來存取網頁 CO2 Signal 的 API。 你需要： 一組 API key：在網頁上輸入你的電子信箱，它會寄一組鑰匙給你 給Electricity Map使用的國家區域代碼 (舉個例子，在波士頓使用'US-NEISO') 程式碼，下載 start 資料夾，你需要修改裡面的程式碼檔案。 NPM，NPM 是一套軟體包管理工具，在本地安裝的軟體包會被列在 packagejson 檔案中，成為網頁利用的資源。 ✅ 從這個優質的學習套件中，學習更多關於軟體包管理。 花點時間看一下程式檔案結構 dist -|manifestjson (defaults set) -|indexhtml (前端 HTML)\n-|background",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8387,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 1471,
    "chunk_index": 4,
    "total_chunks": 12
  },
  {
    "id": "b0554ffa860068ea07250cb5d51e9537",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：關於瀏覽器",
    "content": "https 位置開頭使用超文本傳輸協定(Hypertext Transfer Protocol)，瀏覽器便能與該伺服器溝通並抓取網頁的資料。 這時，瀏覽器轉譯引擎會呈現到用戶的裝置上，可以是手機、桌機或是筆記型電腦。 瀏覽器也有能力暫存內容，不需要每一次都向伺服器請求內容。瀏覽器儲存用戶的瀏覽紀錄、儲存 'cookies'，一種包含用戶活動資訊的小型資料。 請記得一件重要的事，各家瀏覽器並不會相同！每一種瀏覽器都有各自的長處短處，專業的網頁開發人員必須了解如何讓網頁在不同瀏覽器上運作正常。這包含處理手機的小視窗，處理離線用戶的行為。 這邊有一個值得加到你書籤的實用網頁：caniusecom。當你在建構網頁時，你可以查詢 caniuse 技術支援清單，確保你能提供用戶最佳的使用體驗。 ✅ 你知道你的網頁用戶最常使用什麼瀏覽器嗎？檢查你的分析程式，你可以安裝各種分析程式當作是你開發的一種環節，它們會告訴你那些瀏覽器最常被使用。 瀏覽器擴充功能 為什麼你需要建立瀏覽器擴充功能？它能附加在瀏覽器上，讓你快速地重複執行部分功能。舉例來說，如果你需要在網頁中檢查你所互動的顏色，你或許需要顏色選擇器擴充功能；如果你有記憶帳號密碼的困擾，你可能需要密碼管理擴充功能。 瀏覽器擴充功能在開發上也很有趣。它們有效地管理並執行少部分任務課題。 ✅ 你最喜歡哪一項瀏覽器擴充功能？它們提供了什麼功能？ 安裝擴充功能 在你建立擴充功能以前，先看看建制與安裝瀏覽器擴充功能的流程。每一種瀏覽器在管理套件上可能有些不同，Edge上的管理過程就與 Chrome 與 Firefox 相似： 大體而言，過程為： 指令 npm run build 建制你的管理套件 在瀏覽器中的延伸模組區點擊右上方的「更多設定」按鈕 如果這是新的套件，選擇 load unpacked 從資料夾上傳新的擴充套件(在我們的例子中， /dist ) 如果這是已安裝的套件，點擊 reload 按鈕 ✅ 上述教學步驟讓你導入自己建立的擴充功能；若要安裝已公開的套件，你可以前往瀏覽器擴充功能商店，逛逛這些商店並安裝你選擇的套件。 展開行動 你打算寫一套擴充功能來顯示你國家的碳足跡，顯示國家的能源使用量與可用能源量。套件內會有 API Key 來存取網頁 CO2 Signal 的 API。 你需要： 一組 API key：在網頁上輸入你的電子信箱，它會寄一組鑰匙給你 給Electricity Map使用的國家區域代碼 (舉個例子，在波士頓使用'US-NEISO') 程式碼，下載 start 資料夾，你需要修改裡面的程式碼檔案。 NPM，NPM 是一套軟體包管理工具，在本地安裝的軟體包會被列在 packagejson 檔案中，成為網頁利用的資源。 ✅ 從這個優質的學習套件中，學習更多關於軟體包管理。 花點時間看一下程式檔案結構 dist -|manifestjson (defaults set) -|indexhtml (前端 HTML) -|backgroundjs (background JS)\n-|main",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8387,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 1466,
    "chunk_index": 5,
    "total_chunks": 12
  },
  {
    "id": "97efa137649e5928bfadea7d68ec3fb8",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：關於瀏覽器",
    "content": "Protocol)，瀏覽器便能與該伺服器溝通並抓取網頁的資料。 這時，瀏覽器轉譯引擎會呈現到用戶的裝置上，可以是手機、桌機或是筆記型電腦。 瀏覽器也有能力暫存內容，不需要每一次都向伺服器請求內容。瀏覽器儲存用戶的瀏覽紀錄、儲存 'cookies'，一種包含用戶活動資訊的小型資料。 請記得一件重要的事，各家瀏覽器並不會相同！每一種瀏覽器都有各自的長處短處，專業的網頁開發人員必須了解如何讓網頁在不同瀏覽器上運作正常。這包含處理手機的小視窗，處理離線用戶的行為。 這邊有一個值得加到你書籤的實用網頁：caniusecom。當你在建構網頁時，你可以查詢 caniuse 技術支援清單，確保你能提供用戶最佳的使用體驗。 ✅ 你知道你的網頁用戶最常使用什麼瀏覽器嗎？檢查你的分析程式，你可以安裝各種分析程式當作是你開發的一種環節，它們會告訴你那些瀏覽器最常被使用。 瀏覽器擴充功能 為什麼你需要建立瀏覽器擴充功能？它能附加在瀏覽器上，讓你快速地重複執行部分功能。舉例來說，如果你需要在網頁中檢查你所互動的顏色，你或許需要顏色選擇器擴充功能；如果你有記憶帳號密碼的困擾，你可能需要密碼管理擴充功能。 瀏覽器擴充功能在開發上也很有趣。它們有效地管理並執行少部分任務課題。 ✅ 你最喜歡哪一項瀏覽器擴充功能？它們提供了什麼功能？ 安裝擴充功能 在你建立擴充功能以前，先看看建制與安裝瀏覽器擴充功能的流程。每一種瀏覽器在管理套件上可能有些不同，Edge上的管理過程就與 Chrome 與 Firefox 相似： 大體而言，過程為： 指令 npm run build 建制你的管理套件 在瀏覽器中的延伸模組區點擊右上方的「更多設定」按鈕 如果這是新的套件，選擇 load unpacked 從資料夾上傳新的擴充套件(在我們的例子中， /dist ) 如果這是已安裝的套件，點擊 reload 按鈕 ✅ 上述教學步驟讓你導入自己建立的擴充功能；若要安裝已公開的套件，你可以前往瀏覽器擴充功能商店，逛逛這些商店並安裝你選擇的套件。 展開行動 你打算寫一套擴充功能來顯示你國家的碳足跡，顯示國家的能源使用量與可用能源量。套件內會有 API Key 來存取網頁 CO2 Signal 的 API。 你需要： 一組 API key：在網頁上輸入你的電子信箱，它會寄一組鑰匙給你 給Electricity Map使用的國家區域代碼 (舉個例子，在波士頓使用'US-NEISO') 程式碼，下載 start 資料夾，你需要修改裡面的程式碼檔案。 NPM，NPM 是一套軟體包管理工具，在本地安裝的軟體包會被列在 packagejson 檔案中，成為網頁利用的資源。 ✅ 從這個優質的學習套件中，學習更多關於軟體包管理。 花點時間看一下程式檔案結構 dist -|manifestjson (defaults set) -|indexhtml (前端 HTML) -|backgroundjs (background JS) -|mainjs (built JS)\nsrc\n-|index",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8387,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 1453,
    "chunk_index": 6,
    "total_chunks": 12
  },
  {
    "id": "91fed4ea2a4c367d9e22debac2a23be7",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：關於瀏覽器",
    "content": "請記得一件重要的事，各家瀏覽器並不會相同！每一種瀏覽器都有各自的長處短處，專業的網頁開發人員必須了解如何讓網頁在不同瀏覽器上運作正常。這包含處理手機的小視窗，處理離線用戶的行為。 這邊有一個值得加到你書籤的實用網頁：caniusecom。當你在建構網頁時，你可以查詢 caniuse 技術支援清單，確保你能提供用戶最佳的使用體驗。 ✅ 你知道你的網頁用戶最常使用什麼瀏覽器嗎？檢查你的分析程式，你可以安裝各種分析程式當作是你開發的一種環節，它們會告訴你那些瀏覽器最常被使用。 瀏覽器擴充功能 為什麼你需要建立瀏覽器擴充功能？它能附加在瀏覽器上，讓你快速地重複執行部分功能。舉例來說，如果你需要在網頁中檢查你所互動的顏色，你或許需要顏色選擇器擴充功能；如果你有記憶帳號密碼的困擾，你可能需要密碼管理擴充功能。 瀏覽器擴充功能在開發上也很有趣。它們有效地管理並執行少部分任務課題。 ✅ 你最喜歡哪一項瀏覽器擴充功能？它們提供了什麼功能？ 安裝擴充功能 在你建立擴充功能以前，先看看建制與安裝瀏覽器擴充功能的流程。每一種瀏覽器在管理套件上可能有些不同，Edge上的管理過程就與 Chrome 與 Firefox 相似： 大體而言，過程為： 指令 npm run build 建制你的管理套件 在瀏覽器中的延伸模組區點擊右上方的「更多設定」按鈕 如果這是新的套件，選擇 load unpacked 從資料夾上傳新的擴充套件(在我們的例子中， /dist ) 如果這是已安裝的套件，點擊 reload 按鈕 ✅ 上述教學步驟讓你導入自己建立的擴充功能；若要安裝已公開的套件，你可以前往瀏覽器擴充功能商店，逛逛這些商店並安裝你選擇的套件。 展開行動 你打算寫一套擴充功能來顯示你國家的碳足跡，顯示國家的能源使用量與可用能源量。套件內會有 API Key 來存取網頁 CO2 Signal 的 API。 你需要： 一組 API key：在網頁上輸入你的電子信箱，它會寄一組鑰匙給你 給Electricity Map使用的國家區域代碼 (舉個例子，在波士頓使用'US-NEISO') 程式碼，下載 start 資料夾，你需要修改裡面的程式碼檔案。 NPM，NPM 是一套軟體包管理工具，在本地安裝的軟體包會被列在 packagejson 檔案中，成為網頁利用的資源。 ✅ 從這個優質的學習套件中，學習更多關於軟體包管理。 花點時間看一下程式檔案結構 dist -|manifestjson (defaults set) -|indexhtml (前端 HTML) -|backgroundjs (background JS) -|mainjs (built JS) src -|indexjs (你的 JS 程式碼)\n✅ 當你取得你的 API Key 與國家區域代碼後，紀錄在筆記中給之後的課程使用。\n建立給擴充功能使用的 HTML\n這套擴充功能有兩個重點。一個是取得 API Key 與國家區域代碼：\n與顯示國家的碳排放量：\n讓我們開始建立輸入欄位的 HTML 與它的 CSS 吧。\n在資料夾 /dist 中，建立輸入表單與結果顯示區域。在檔案 index",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8387,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 1461,
    "chunk_index": 7,
    "total_chunks": 12
  },
  {
    "id": "2de2a1337710e9f0cb39dd5b3807a17c",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：關於瀏覽器",
    "content": "如果這是新的套件，選擇 load unpacked 從資料夾上傳新的擴充套件(在我們的例子中， /dist ) 如果這是已安裝的套件，點擊 reload 按鈕 ✅ 上述教學步驟讓你導入自己建立的擴充功能；若要安裝已公開的套件，你可以前往瀏覽器擴充功能商店，逛逛這些商店並安裝你選擇的套件。 展開行動 你打算寫一套擴充功能來顯示你國家的碳足跡，顯示國家的能源使用量與可用能源量。套件內會有 API Key 來存取網頁 CO2 Signal 的 API。 你需要： 一組 API key：在網頁上輸入你的電子信箱，它會寄一組鑰匙給你 給Electricity Map使用的國家區域代碼 (舉個例子，在波士頓使用'US-NEISO') 程式碼，下載 start 資料夾，你需要修改裡面的程式碼檔案。 NPM，NPM 是一套軟體包管理工具，在本地安裝的軟體包會被列在 packagejson 檔案中，成為網頁利用的資源。 ✅ 從這個優質的學習套件中，學習更多關於軟體包管理。 花點時間看一下程式檔案結構 dist -|manifestjson (defaults set) -|indexhtml (前端 HTML) -|backgroundjs (background JS) -|mainjs (built JS) src -|indexjs (你的 JS 程式碼) ✅ 當你取得你的 API Key 與國家區域代碼後，紀錄在筆記中給之後的課程使用。 建立給擴充功能使用的 HTML 這套擴充功能有兩個重點。一個是取得 API Key 與國家區域代碼： 與顯示國家的碳排放量： 讓我們開始建立輸入欄位的 HTML 與它的 CSS 吧。 在資料夾 /dist 中，建立輸入表單與結果顯示區域。在檔案 indexhtml 中，規劃表單區域：\n```HTML\nNew",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8387,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 750,
    "chunk_index": 8,
    "total_chunks": 12
  },
  {
    "id": "381e88793f0a5fbce8549ad6c17eb761",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：關於瀏覽器",
    "content": "從資料夾上傳新的擴充套件(在我們的例子中， /dist ) 如果這是已安裝的套件，點擊 reload 按鈕 ✅ 上述教學步驟讓你導入自己建立的擴充功能；若要安裝已公開的套件，你可以前往瀏覽器擴充功能商店，逛逛這些商店並安裝你選擇的套件。 展開行動 你打算寫一套擴充功能來顯示你國家的碳足跡，顯示國家的能源使用量與可用能源量。套件內會有 API Key 來存取網頁 CO2 Signal 的 API。 你需要： 一組 API key：在網頁上輸入你的電子信箱，它會寄一組鑰匙給你 給Electricity Map使用的國家區域代碼 (舉個例子，在波士頓使用'US-NEISO') 程式碼，下載 start 資料夾，你需要修改裡面的程式碼檔案。 NPM，NPM 是一套軟體包管理工具，在本地安裝的軟體包會被列在 packagejson 檔案中，成為網頁利用的資源。 ✅ 從這個優質的學習套件中，學習更多關於軟體包管理。 花點時間看一下程式檔案結構 dist -|manifestjson (defaults set) -|indexhtml (前端 HTML) -|backgroundjs (background JS) -|mainjs (built JS) src -|indexjs (你的 JS 程式碼) ✅ 當你取得你的 API Key 與國家區域代碼後，紀錄在筆記中給之後的課程使用。 建立給擴充功能使用的 HTML 這套擴充功能有兩個重點。一個是取得 API Key 與國家區域代碼： 與顯示國家的碳排放量： 讓我們開始建立輸入欄位的 HTML 與它的 CSS 吧。 在資料夾 /dist 中，建立輸入表單與結果顯示區域。在檔案 indexhtml 中，規劃表單區域： ```HTML NewAdd your Information\nRegion Name\nYour API Key from tmrow\nSubmit\n```\n這個表單儲存你的輸入資訊並儲存到 Local Storage 中。\n接下來，建立結果輸出區。在 form tag 後面新增一些 divs：\n```HTML\nloading",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8387,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 814,
    "chunk_index": 9,
    "total_chunks": 12
  },
  {
    "id": "5a25e7e517b22c3b4beb82207e03847e",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：關於瀏覽器",
    "content": "Map使用的國家區域代碼 (舉個例子，在波士頓使用'US-NEISO') 程式碼，下載 start 資料夾，你需要修改裡面的程式碼檔案。 NPM，NPM 是一套軟體包管理工具，在本地安裝的軟體包會被列在 packagejson 檔案中，成為網頁利用的資源。 ✅ 從這個優質的學習套件中，學習更多關於軟體包管理。 花點時間看一下程式檔案結構 dist -|manifestjson (defaults set) -|indexhtml (前端 HTML) -|backgroundjs (background JS) -|mainjs (built JS) src -|indexjs (你的 JS 程式碼) ✅ 當你取得你的 API Key 與國家區域代碼後，紀錄在筆記中給之後的課程使用。 建立給擴充功能使用的 HTML 這套擴充功能有兩個重點。一個是取得 API Key 與國家區域代碼： 與顯示國家的碳排放量： 讓我們開始建立輸入欄位的 HTML 與它的 CSS 吧。 在資料夾 /dist 中，建立輸入表單與結果顯示區域。在檔案 indexhtml 中，規劃表單區域： ```HTML NewAdd your Information Region Name Your API Key from tmrow Submit ``` 這個表單儲存你的輸入資訊並儲存到 Local Storage 中。 接下來，建立結果輸出區。在 form tag 後面新增一些 divs： ```HTML loadingRegion:\nCarbon Usage:\nFossil Fuel Percentage:\nChange region\n```\n這時，你可以試著建制這個專案。請確保安裝擴充套建的軟體依賴套件，輸入：\nnpm install\n這項指令會使用 NPM (Node Package Manager)安裝 webpack 給你的擴充套件建制過程中使用。Webpack 是一個處理程式編譯的工具組合包。你可以在 /dist/main",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8387,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 674,
    "chunk_index": 10,
    "total_chunks": 12
  },
  {
    "id": "d3f4105fca002d756665946855378011",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "瀏覽器擴充功能專案 Part 1：關於瀏覽器",
    "content": "(background JS) -|mainjs (built JS) src -|indexjs (你的 JS 程式碼) ✅ 當你取得你的 API Key 與國家區域代碼後，紀錄在筆記中給之後的課程使用。 建立給擴充功能使用的 HTML 這套擴充功能有兩個重點。一個是取得 API Key 與國家區域代碼： 與顯示國家的碳排放量： 讓我們開始建立輸入欄位的 HTML 與它的 CSS 吧。 在資料夾 /dist 中，建立輸入表單與結果顯示區域。在檔案 indexhtml 中，規劃表單區域： ```HTML NewAdd your Information Region Name Your API Key from tmrow Submit ``` 這個表單儲存你的輸入資訊並儲存到 Local Storage 中。 接下來，建立結果輸出區。在 form tag 後面新增一些 divs： ```HTML loadingRegion: Carbon Usage: Fossil Fuel Percentage: Change region ``` 這時，你可以試著建制這個專案。請確保安裝擴充套建的軟體依賴套件，輸入： npm install 這項指令會使用 NPM (Node Package Manager)安裝 webpack 給你的擴充套件建制過程中使用。Webpack 是一個處理程式編譯的工具組合包。你可以在 /dist/mainjs 看到它的執行後的結果 ── 程式碼已經被打好包了。\n到目前為止，擴充套件已經被建制，如果你導入此套件到 Edge 中也能完整地呈現出來。\n恭喜你，你已經達成建立擴充套件的第一步驟。在接下來的課程中，你會新增更多功能，讓它更加的實用。\n🚀 挑戰\n逛逛瀏覽器擴充商店，安裝一套擴充功能到你的瀏覽器中。你可以查看它的檔案群。你發現了什麼？\n課後測驗\n課後測驗\n複習與自學\n這堂課中你學到了一些瀏覽器的歷史。趁這個機會閱讀更多它的歷史，學習網際網路的發明者是如何構思網路的應用。這邊有一些實用的網頁：\n瀏覽器的歷史\n網路的歷史\n與 Tim Berners-Lee 的訪談\n作業\n重新造型你的套件",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8387,
      "relative_path": "git_repos\\web-dev-beginners\\5-browser-extension\\1-about-browsers\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 857,
    "chunk_index": 11,
    "total_chunks": 12
  },
  {
    "id": "45714f68bfa7d49512c709801405ada8",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\assignment.fr.md",
    "source_type": "git_repo",
    "title": "Créer un nouveau jeu de clavier",
    "content": "Créer un nouveau jeu de clavier\nInstructions\nCréez un petit jeu qui utilise des événements de clavier pour effectuer des tâches. Il peut s'agir d'un autre type de jeu de dactylographie ou d'un jeu de type artistique qui peint des pixels à l'écran lors de frappes au clavier. Faites preuve de créativité!\nRubrique\n| Critères | Exemplaire                | Adéquat                 | Besoin d'amélioration |\n| -------- | ------------------------ | ------------------------ | ----------------- |\n|          | Un jeu complet est présenté | Le jeu est très minime | Le jeu a des bugs |",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 617,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\assignment.fr.md",
      "source_type": "git_repo"
    },
    "token_count": 149,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4068d122c7eeb0b05d5d80c98e22de40",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\assignment.hi.md",
    "source_type": "git_repo",
    "title": "एक नया कीबोर्ड गेम बनाएं",
    "content": "एक नया कीबोर्ड गेम बनाएं\nअनुदेश\nएक छोटा गेम बनाएं जो कार्यों को करने के लिए कीबोर्ड इवेंट का उपयोग करता है। यह एक अलग तरह का टाइपिंग गेम या एक आर्ट टाइप गेम हो सकता है जो कि कीस्ट्रोक पर स्क्रीन के लिए पिक्सल को पेंट करता है। रचनात्मक हो!\nशीर्ष\n| मानदंड | उदाहरणात्मक                                      | पर्याप्त                                              | सुधार की जरूरत                       |\n| -------- | ------------------------ | ------------------------ | ----------------- |\n|          | एक पूर्ण खेल प्रस्तुत किया गया है | खेल बहुत कम है | खेल में बगस हैं |",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1154,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\assignment.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 373,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4388cf707b07f24e72711375767e78ac",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\assignment.it.md",
    "source_type": "git_repo",
    "title": "Crearere un nuovo gioco con la tastiera",
    "content": "Crearere un nuovo gioco con la tastiera\nIstruzioni\nCreare un piccolo gioco che utilizzi gli eventi della tastiera per svolgere le attività. Può essere un tipo diverso di gioco di digitazione o un gioco di tipo artistico che disegna i pixel sullo schermo premendo i tasti. Si dia sfogo alla propria creatività!\nRubrica\n| Criteri | Ottimo | Adeguato | Necessita miglioramento |\n| -------- | ------------------------ | ------------------------ | ----------------- |\n|          | Viene presentato un gioco completo | Il gioco è molto minimale | Il gioco ha dei bug |",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 590,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\assignment.it.md",
      "source_type": "git_repo"
    },
    "token_count": 147,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f3f6aa1e1cbe2dfae3cded9ad853ccd4",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\assignment.ja.md",
    "source_type": "git_repo",
    "title": "新しいキーボードゲームを作成する",
    "content": "新しいキーボードゲームを作成する\n説明書\nキーボードのイベントを使ってタスクを行う小さなゲームを作りましょう。異なる種類のタイピングゲームや、キー入力で画面にピクセルをペイントするアートタイプのゲームにすることもできます。創造力を発揮してください。\nルーブリック\n| 基準 | 模範的な例                | 適切な                 | 改善が必要 |\n| -------- | ------------------------ | ------------------------ | ----------------- |\n|          | フルゲームが発表される。 | ゲームは非常にミニマム。 | ゲームにはバグがある。 |",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 715,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\assignment.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 219,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "314c1758f1edee09799e79f8245543cb",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\assignment.ko.md",
    "source_type": "git_repo",
    "title": "새로운 키보드 게임 만들기",
    "content": "새로운 키보드 게임 만들기\n설명\n키보드 이벤트를 사용하여 작업을 수행하는 작은 게임을 만듭니다. 다른 종류의 타이핑 게임이거나 키 입력으로 화면에 픽셀을 그리는 예술 유형 게임이 될 수도 있습니다. 창의력을 발휘해보세요!\n평가 기준\n| 기준 | 모범 답안 | 적당한 답안 | 개선이 필요한 답안 |\n|--- | --- | --- | --- |\n| | 완전한 게임을 구현한 경우 | 최소한의 기능을 가진 게임을 구현한 경우 | 게임에 버그가 있는 경우 |",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 581,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\assignment.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 203,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "86a57232f6bc5df52e88ba35d8ae2751",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\assignment.ms.md",
    "source_type": "git_repo",
    "title": "Buat permainan papan kekunci baharu",
    "content": "Buat permainan papan kekunci baharu\nArahan\nBuat permainan kecil yang menggunakan acara papan kekunci untuk melakukan tugas. Ini boleh menjadi jenis permainan menaip yang berbeza, atau permainan jenis seni yang melukis piksel ke layar pada penekanan tombol. Dapatkan kreatif!\nRubrik\n| Kriteria | Contoh                | Mencukupi                 | Usaha Lagi |\n| -------- | ------------------------ | ------------------------ | ----------------- |\n|          | Permainan penuh dipersembahkan | Permainan ini sangat minimum | Permainan ini mempunyai pepijat |",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 581,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\assignment.ms.md",
      "source_type": "git_repo"
    },
    "token_count": 151,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "563bd452fa7784b3627799a8ff59a61b",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\assignment.nl.md",
    "source_type": "git_repo",
    "title": "Maak een nieuw toetsenbordspel",
    "content": "Maak een nieuw toetsenbordspel\nInstructies\nMaak een klein spel dat toetsenbordgebeurtenissen gebruikt om taken uit te voeren. Het kan een ander soort typespel zijn, of een kunstspel dat bij toetsaanslagen pixels op het scherm schildert. Wees creatief!\nRubriek\n| Criteria | Voorbeeldig                | Voldoende                 | Moet worden verbeterd |\n| -------- | ------------------------ | ------------------------ | ----------------- |\n|          | Er wordt een volledig spel gepresenteerd | De game is erg minimaal | De game bevat bugs |",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 567,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\assignment.nl.md",
      "source_type": "git_repo"
    },
    "token_count": 145,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "fccf552f73b91d2724772d7c196c8fe3",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\assignment.zh-cn.md",
    "source_type": "git_repo",
    "title": "制作一款新的键盘游戏",
    "content": "制作一款新的键盘游戏\n说明\n制作一款使用键盘事件的小游戏。它可以是一种不同类型的打字游戏，也可以是一种艺术类的游戏，通过击键在屏幕上画像素点。打开脑洞！\n评价表\n| 指标 | 优秀 | 良好 | 尚可进步 |\n| ---- | --- | ---- | ----------------- |\n|      | 呈现了完整的游戏内容 | 游戏太小 | 游戏有 bug |",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 417,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\assignment.zh-cn.md",
      "source_type": "git_repo"
    },
    "token_count": 151,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "da210b38ee73c10a4c98de1bfd47166d",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\assignment.zh-tw.md",
    "source_type": "git_repo",
    "title": "建立一款新的鍵盤遊戲",
    "content": "建立一款新的鍵盤遊戲\n簡介\n建立一款使用鍵盤事件的小遊戲。它可以是不同的鍵盤輸入遊戲：使用鍵盤在視窗上繪製像素點的繪圖遊戲。激發你的創意吧！\n學習評量\n| 作業內容 | 優良               | 普通         | 待改進       |\n| -------- | ------------------ | ------------ | ------------ |\n|          | 呈現完整的遊戲內容 | 遊戲內容單調 | 遊戲出現問題 |",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 467,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\assignment.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 198,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9fe0a2ca074516d995b413fa9f6bb9a8",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\README.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "Creating a game using events\nPre-Lecture Quiz\nPre-lecture quiz\nEvent driven programming\nWhen creating a browser based application, we provide a graphical user interface (GUI) for the user to use when interacting with what we've built The most common way to interact with the browser is through clicking and typing in various elements The challenge we face as a developer is we don't know when they're going to perform these operations Event-driven programming is the name for the type of programming we need to do to create our GUI If we break this phrase down a little bit, we see the core word here is event Event, according to Merriam-Webster, is defined as \"something which happens\" This describes our situation perfectly We know something is going to happen for which we want to execute some code in response, but we don't know when it will take place The way we mark a section of code we want to execute is by creating a function When we think about procedural programming, functions are called in a specific order This same thing is going to be true with event driven programming The difference is how the functions will be called To handle events (button clicking, typing, etc ), we register event listeners An event listener is a function which listens for an event to occur and executes in response Event listeners can update the UI, make calls to the server, or whatever else needs to be done in response to the user's action We add an event listener by using addEventListener, and providing a function to execute NOTE: It's worth highlighting there are numerous ways to create event listeners You can use anonymous functions, or create named ones You can use various shortcuts, like setting the click property, or using addEventListener In our exercise we are going to focus on addEventListener and anonymous functions, as it's probably the most common technique web developers use It's also the most flexible, as addEventListener works for all events, and the event name can be provided as a parameter Common events\nThere are dozens of events available for you to listen to when creating an application Basically anything a user does on a page raises an event, which gives you a lot of power to ensure they get the experience you desire Fortunately, you'll normally only need a small handful of events",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17243,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 449,
    "chunk_index": 0,
    "total_chunks": 8
  },
  {
    "id": "3aaf9d27aec11509f9b56028967cd0ab",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\README.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "developers use It's also the most flexible, as addEventListener works for all events, and the event name can be provided as a parameter Common events There are dozens of events available for you to listen to when creating an application Basically anything a user does on a page raises an event, which gives you a lot of power to ensure they get the experience you desire Fortunately, you'll normally only need a small handful of eventsHere's a few common ones (including the two we'll use when creating our game):\nclick: The user clicked on something, typically a button or hyperlink\ncontextmenu: The user clicked the right mouse button\nselect: The user highlighted some text\ninput: The user input some text\nCreating the game\nWe are going to create a game to explore how events work in JavaScript Our game is going to test a player's typing skill, which is one of the most underrated skills all developers should have We should all be practicing our typing The general flow of the game will look like this:\nPlayer clicks on start button and is presented with a quote to type\nPlayer types the quote as quickly as they can in a textbox\nAs each word is completed, the next one is highlighted\nIf the player has a typo, the textbox is updated to red\nWhen the player completes the quote, a success message is displayed with the elapsed time\nLet's build our game, and learn about events File structure\nWe're going to need three total files: index html, script js and style css Let's start by setting those up to make life a little easier for us Create a new folder for your work by opening a console or terminal window and issuing the following command:\n```bash\nLinux or macOS\nmkdir typing-game && cd typing-game\nWindows\nmd typing-game && cd typing-game\n```\nOpen Visual Studio Code\nbash\ncode Add three files to the folder in Visual Studio Code with the following names:\nindex html\nscript js\nstyle css\nCreate the user interface\nIf we explore the requirements, we know we're going to need a handful of elements on our HTML page This is sort of like a recipe, where we need some ingredients:\nSomewhere to display the quote for the user to type\nSomewhere to display any messages, like a success message\nA textbox for typing\nA start button\nEach of those will need IDs so we can work with them in our JavaScript We will also add references to the CSS and JavaScript files we're going to create",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17243,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 8
  },
  {
    "id": "8f12516c69a83ee681f5d7fdf0302dee",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\README.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "a handful of elements on our HTML page This is sort of like a recipe, where we need some ingredients: Somewhere to display the quote for the user to type Somewhere to display any messages, like a success message A textbox for typing A start button Each of those will need IDs so we can work with them in our JavaScript We will also add references to the CSS and JavaScript files we're going to createCreate a new file named index html Add the following HTML:\n```html\nTyping game\nTyping game Practice your typing skills with a quote from Sherlock Holmes Click **start** to begin Start\n```\nLaunch the application\nIt's always best to develop iteratively to see how things look Let's launch our application There's a wonderful extension for Visual Studio Code called Live Server which will both host your application locally and refresh the browser each time you save Install Live Server by following the link and clicking Install\nYou will be prompted by the browser to open Visual Studio Code, and then by Visual Studio Code to perform the installation\nRestart Visual Studio Code if prompted\nOnce installed, in Visual Studio Code, click Ctrl-Shift-P (or Cmd-Shift-P) to open the command palette\nType Live Server: Open with Live Server\nLive Server will start hosting your application\nOpen a browser and navigate to https://localhost:5500\nYou should now see the page you created Let's add some functionality Add the CSS\nWith our HTML created, let's add the CSS for core styling We need to highlight the word the player should be typing, and colorize the textbox if what they've typed is incorrect We'll do this with two classes Create a new file named style css and add the following syntax ```css\n/ inside style css / highlight {\nbackground-color: yellow;\n} error {\nbackground-color: lightcoral;\nborder: red;\n}\n```\n✅ When it comes to CSS you can layout your page however you might like Take a little time and make the page look more appealing:\nChoose a different font\nColorize the headers\nResize items\nJavaScript\nWith our UI created, it's time to focus our attention on the JavaScript which will provide the logic We're going to break this down into a handful of steps:\nCreate the constants\nEvent listener to start the game\nEvent listener to typing\nBut first, create a new file named script js Add the constants\nWe're going to need a few items to make our lives a little easier for programming",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17243,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 2,
    "total_chunks": 8
  },
  {
    "id": "5112b0cdbd35ea6b1821da724473b61f",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\README.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "Colorize the headers Resize items JavaScript With our UI created, it's time to focus our attention on the JavaScript which will provide the logic We're going to break this down into a handful of steps: Create the constants Event listener to start the game Event listener to typing But first, create a new file named script js Add the constants We're going to need a few items to make our lives a little easier for programmingAgain, similar to a recipe, here's what we'll need:\nArray with the list of all quotes\nEmpty array to store all the words for the current quote\nSpace to store the index of the word the player is currently typing\nThe time the player clicked start\nWe're also going to want references to the UI elements:\nThe textbox (typed-value)\nThe quote display (quote)\nThe message (message)\njavascript\n// inside script js\n// all of our quotes\nconst quotes = [\n'When you have eliminated the impossible, whatever remains, however improbable, must be the truth ',\n'There is nothing more deceptive than an obvious fact ',\n'I ought to know by this time that when a fact appears to be opposed to a long train of deductions it invariably proves to be capable of bearing some other interpretation ',\n'I never make exceptions An exception disproves the rule ',\n'What one man can invent another can discover ',\n'Nothing clears up a case so much as stating it to another person ',\n'Education never ends, Watson It is a series of lessons, with the greatest for the last ',\n];\n// store the list of words and the index of the word the player is currently typing\nlet words = [];\nlet wordIndex = 0;\n// the starting time\nlet startTime = Date now();\n// page elements\nconst quoteElement = document getElementById('quote');\nconst messageElement = document getElementById('message');\nconst typedValueElement = document getElementById('typed-value');\n✅ Go ahead and add more quotes to your game\nNOTE: We can retrieve the elements whenever we want in code by using document getElementById Because of the fact we're going to refer to these elements on a regular basis we're going to avoid typos with string literals by using constants Frameworks such as Vue js or React can help you better manage centralizing your code Take a minute to watch a video on using const, let and var\n🎥 Click the image above for a video about variables Add start logic\nTo begin the game, the player will click on start",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17243,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 3,
    "total_chunks": 8
  },
  {
    "id": "49d3764d84a7ff274d35cf7a4a662afc",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\README.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "of the fact we're going to refer to these elements on a regular basis we're going to avoid typos with string literals by using constants Frameworks such as Vue js or React can help you better manage centralizing your code Take a minute to watch a video on using const, let and var 🎥 Click the image above for a video about variables Add start logic To begin the game, the player will click on startOf course, we don't know when they're going to click start This is where an event listener comes into play An event listener will allow us to listen for something to occur (an event) and execute code in response In our case, we want to execute code when the user clicks on start When the user clicks start, we need to select a quote, setup the user interface, and setup tracking for the current word and timing Below is the JavaScript you'll need to add; we discuss it just after the script block ```javascript\n// at the end of script js\ndocument getElementById('start') addEventListener('click', () => {\n// get a quote\nconst quoteIndex = Math floor(Math random() * quotes length);\nconst quote = quotes[quoteIndex];\n// Put the quote into an array of words\nwords = quote split(' ');\n// reset the word index for tracking\nwordIndex = 0;\n// UI updates\n// Create an array of span elements so we can set a class\nconst spanWords = words map(function(word) { return <span>${word} </span>});\n// Convert into string and set as innerHTML on quote display\nquoteElement innerHTML = spanWords join('');\n// Highlight the first word\nquoteElement childNodes[0] className = 'highlight';\n// Clear any prior messages\nmessageElement innerText = '';\n// Setup the textbox\n// Clear the textbox\ntypedValueElement value = '';\n// set focus\ntypedValueElement focus();\n// set the event handler\n// Start the timer\nstartTime = new Date() getTime();\n});\n```\nLet's break down the code Setup the word tracking\nUsing Math floor and Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17243,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 422,
    "chunk_index": 4,
    "total_chunks": 8
  },
  {
    "id": "13d9f4f354d0052ab54f4a1f4a23beff",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\README.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "as innerHTML on quote display quoteElement innerHTML = spanWords join(''); // Highlight the first word quoteElement childNodes[0] className = 'highlight'; // Clear any prior messages messageElement innerText = ''; // Setup the textbox // Clear the textbox typedValueElement value = ''; // set focus typedValueElement focus(); // set the event handler // Start the timer startTime = new Date() getTime(); }); ``` Let's break down the code Setup the word tracking Using Math floor and Mathrandom allows us to randomly select a quote from the quotes array\nWe convert the quote into an array of words so we can track the word the player is currently typing\nwordIndex is set to 0, since the player will start on the first word\nSetup the UI\nCreate an array of spanWords, which contains each word inside a span element\nThis will allow us to highlight the word on the display\njoin the array to create a string which we can use to update the innerHTML on quoteElement\nThis will display the quote to the player\nSet the className of the first span element to highlight to highlight it as yellow\nClean the messageElement by setting innerText to ''\nSetup the textbox\nClear the current value on typedValueElement\nSet the focus to typedValueElement\nStart the timer by calling getTime\nAdd typing logic\nAs the player types, an input event will be raised This event listener will check to ensure the player is typing the word correctly, and handle the current status of the game Returning to script js, add the following code to the end We will break it down afterwards ```javascript\n// at the end of script js\ntypedValueElement addEventListener('input', () => {\n// Get the current word\nconst currentWord = words[wordIndex];\n// get the current value\nconst typedValue = typedValueElement value;\nif (typedValue === currentWord && wordIndex === words length - 1) {\n// end of sentence\n// Display success\nconst elapsedTime = new Date() getTime() - startTime;\nconst message = CONGRATULATIONS You finished in ${elapsedTime / 1000} seconds ;\nmessageElement innerText = message;\n} else if (typedValue endsWith(' ') && typedValue trim() === currentWord) {\n// end of word\n// clear the typedValueElement for the new word\ntypedValueElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17243,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 5,
    "total_chunks": 8
  },
  {
    "id": "733fd37950d26f97b3aa5cfd1eaa165c",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\README.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "the current value const typedValue = typedValueElement value; if (typedValue === currentWord && wordIndex === words length - 1) { // end of sentence // Display success const elapsedTime = new Date() getTime() - startTime; const message = CONGRATULATIONS You finished in ${elapsedTime / 1000} seconds ; messageElement innerText = message; } else if (typedValue endsWith(' ') && typedValue trim() === currentWord) { // end of word // clear the typedValueElement for the new word typedValueElementvalue = '';\n// move to the next word\nwordIndex++;\n// reset the class name for all elements in quote\nfor (const wordElement of quoteElement childNodes) {\nwordElement className = '';\n}\n// highlight the new word\nquoteElement childNodes[wordIndex] className = 'highlight';\n} else if (currentWord startsWith(typedValue)) {\n// currently correct\n// highlight the next word\ntypedValueElement className = '';\n} else {\n// error state\ntypedValueElement className = 'error';\n}\n});\n```\nLet's break down the code We start by grabbing the current word and the value the player has typed thus far Then we have waterfall logic, where we check if the quote is complete, the word is complete, the word is correct, or (finally), if there is an error Quote is complete, indicated by typedValue being equal to currentWord, and wordIndex being equal to one less than the length of words\nCalculate elapsedTime by subtracting startTime from the current time\nDivide elapsedTime by 1,000 to convert from milliseconds to seconds\nDisplay a success message\nWord is complete, indicated by typedValue ending with a space (the end of a word) and typedValue being equal to currentWord\nSet value on typedElement to be '' to allow for the next word to be typed\nIncrement wordIndex to move to the next word\nLoop through all childNodes of quoteElement to set className to '' to revert to default display\nSet className of the current word to highlight to flag it as the next word to type\nWord is currently typed correctly (but not complete), indicated by currentWord started with typedValue\nEnsure typedValueElement is displayed as default by clearing className\nIf we made it this far, we have an error\nSet className on typedValueElement to error\nTest your application\nYou've made it to the end The last step is to ensure our application works",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17243,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 6,
    "total_chunks": 8
  },
  {
    "id": "fc16d78d2a739d667b0c0189e03d9feb",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\README.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "default display Set className of the current word to highlight to flag it as the next word to type Word is currently typed correctly (but not complete), indicated by currentWord started with typedValue Ensure typedValueElement is displayed as default by clearing className If we made it this far, we have an error Set className on typedValueElement to error Test your application You've made it to the end The last step is to ensure our application worksGive it a shot Don't worry if there are errors; all developers have errors Examine the messages and debug as needed Click on start, and start typing away It should look a little like the animation we saw before 🚀 Challenge\nAdd more functionality\nDisable the input event listener on completion, and re-enable it when the button is clicked\nDisable the textbox when the player completes the quote\nDisplay a modal dialog box with the success message\nStore high scores using localStorage\nPost-Lecture Quiz\nPost-lecture quiz\nReview & Self Study\nRead up on all the events available to the developer via the web browser, and consider the scenarios in which you would use each one Assignment\nCreate a new keyboard game",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17243,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 230,
    "chunk_index": 7,
    "total_chunks": 8
  },
  {
    "id": "e568043be5c314fcfb02070e487f0ee4",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.fr.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "Créer un jeu à l'aide d'événements\nQuiz préalable\nQuiz préalable\nLa programmation événementielle\nLors de la création d'une application basée sur un navigateur, nous fournissons une interface utilisateur graphique (GUI) que l'utilisateur peut utiliser lorsqu'il interagit avec ce que nous avons construit La façon la plus courante d'interagir avec le navigateur consiste à cliquer et à saisir divers éléments Le défi auquel nous sommes confrontés en tant que développeur est que nous ne savons pas quand ils vont effectuer ces opérations La programmation événementielle est le nom du type de programmation que nous devons faire pour créer notre interface graphique Si nous décomposons un peu cette phrase, nous voyons que le mot clé ici est événement L'événement, selon le Merriam-Webster, est défini comme \"quelque chose qui arrive\" Cela décrit parfaitement notre situation Nous savons qu'il va se passer quelque chose pour lequel nous voulons exécuter du code en réponse, mais nous ne savons pas quand cela se produira La façon dont nous marquons une section de code que nous voulons exécuter consiste à créer une fonction Lorsque nous pensons à la programmation procédurale, les fonctions sont appelées dans un ordre spécifique La même chose va être vraie avec la programmation événementielle La différence est comment les fonctions seront appelées Pour gérer les événements (clic sur un bouton, saisie, etc ), nous enregistrons des écouteurs d'événements(\"event listeners\" en anglais) Un écouteur d'événement est une fonction qui attend qu'un événement se produise et s'exécute en réponse Les écouteurs d'événement peuvent mettre à jour l'interface utilisateur, passer des appels au serveur ou faire tout ce qui doit être fait en réponse à l'action de l'utilisateur Nous ajoutons un écouteur d'événement en utilisant addEventListener, et en fournissant une fonction à exécuter",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19967,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.fr.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 0,
    "total_chunks": 12
  },
  {
    "id": "fa931269d597f6f01ac47e730f648471",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.fr.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "les événements (clic sur un bouton, saisie, etc ), nous enregistrons des écouteurs d'événements(\"event listeners\" en anglais) Un écouteur d'événement est une fonction qui attend qu'un événement se produise et s'exécute en réponse Les écouteurs d'événement peuvent mettre à jour l'interface utilisateur, passer des appels au serveur ou faire tout ce qui doit être fait en réponse à l'action de l'utilisateur Nous ajoutons un écouteur d'événement en utilisant addEventListener, et en fournissant une fonction à exécuterREMARQUE: Il convient de souligner qu'il existe de nombreuses façons de créer des écouteurs d'événement Vous pouvez utiliser des fonctions anonymes ou en créer des nommées Vous pouvez utiliser divers raccourcis, comme définir la propriété click ou utiliser addEventListener Dans notre exercice, nous allons nous concentrer sur addEventLister et les fonctions anonymes, car c'est probablement la technique la plus couramment utilisée par les développeurs Web C'est aussi le plus flexible, car addEventListener fonctionne pour tous les événements et le nom de l'événement peut être fourni en tant que paramètre Les événements courants\nIl y a des dizaines d'événements que vous pouvez écouter lors de la création d'une application Fondamentalement, tout ce qu'un utilisateur fait sur une page déclenche un événement, ce qui vous donne beaucoup de pouvoir pour vous assurer qu'il obtient l'expérience que vous désirez Heureusement, vous n'aurez normalement besoin que d'une petite poignée d'événements En voici quelques-uns courants (y compris les deux que nous utiliserons lors de la création de notre jeu) :\nclick: L'utilisateur a cliqué sur quelque chose, généralement un bouton ou un lien hypertexte\ncontextmenu: The user clicked the right mouse button\nselect:\nL'utilisateur a surligné du texte\ninput: The user input some text\nCréation du jeu\nNous allons créer un jeu pour explorer le fonctionnement des événements en JavaScript",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19967,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.fr.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 1,
    "total_chunks": 12
  },
  {
    "id": "f01c9400e87268078cbf0f8be644a500",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.fr.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "normalement besoin que d'une petite poignée d'événements En voici quelques-uns courants (y compris les deux que nous utiliserons lors de la création de notre jeu) : click: L'utilisateur a cliqué sur quelque chose, généralement un bouton ou un lien hypertexte contextmenu: The user clicked the right mouse button select: L'utilisateur a surligné du texte input: The user input some text Création du jeu Nous allons créer un jeu pour explorer le fonctionnement des événements en JavaScriptNotre jeu va tester la compétence de frappe d'un joueur, qui est l'une des compétences les plus sous-estimées que tous les développeurs devraient avoir Nous devrions tous nous entraîner à saisir Le déroulement général du jeu ressemblera à ceci :\nLe joueur clique sur le bouton de démarrage et se voit présenter une citation à saisir\nLe joueur tape la citation aussi rapidement qu'il le peut dans une zone de texte\nAu fur et à mesure que chaque mot est complété, le suivant est mis en évidence\nSi le joueur a une faute de frappe, la zone de texte est mise à jour en rouge\nLorsque le joueur complète la citation, un message de réussite s'affiche avec le temps écoulé\nDéveloppons notre jeu et apprenons-en plus sur les événements Structure de fichier\nNous aurons besoin de trois fichiers au total : index html, script js et style css Commençons par les mettre en place pour nous faciliter un peu la tâche Créez un nouveau dossier pour votre travail en ouvrant une console ou une fenêtre de terminal et en exécutant la commande suivante :\n```bash\nLinux ou macOS\nmkdir typing-game && cd typing-game\nWindows\nmd typing-game && cd typing-game\n```\nOuvrez Visual Studio Code\nbash\ncode Ajoutez trois fichiers au dossier dans Visual Studio Code avec les noms suivants:\nindex html\nscript js\nstyle css\nCréer l'interface utilisateur\nSi nous explorons les exigences, nous savons que nous aurons besoin d'une poignée d'éléments sur notre page HTML",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19967,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.fr.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 2,
    "total_chunks": 12
  },
  {
    "id": "7144fd85684e4f9d6dc3197670c351a5",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.fr.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "une console ou une fenêtre de terminal et en exécutant la commande suivante : ```bash Linux ou macOS mkdir typing-game && cd typing-game Windows md typing-game && cd typing-game ``` Ouvrez Visual Studio Code bash code Ajoutez trois fichiers au dossier dans Visual Studio Code avec les noms suivants: index html script js style css Créer l'interface utilisateur Si nous explorons les exigences, nous savons que nous aurons besoin d'une poignée d'éléments sur notre page HTMLC'est un peu comme une recette, où nous avons besoin de quelques ingrédients :\nQuelque part pour afficher le texte que l'utilisateur doit saisir\nUn endroit pour afficher tous les messages, comme un message de réussite\nUne zone de texte pour la saisie\nUn bouton de démarrage\nChacun de ceux-ci aura besoin d'identifiants afin que nous puissions travailler avec eux dans notre JavaScript Nous ajouterons également des références aux fichiers CSS et JavaScript que nous allons créer Créez un nouveau fichier nommé index html Ajoutez le code HTML suivant:\n```html\nTyping game\nTyping game Practice your typing skills with a quote from Sherlock Holmes Click **start** to begin Start\n```\nLancer l'application\nIl est toujours préférable de développer itérativement pour voir à quoi ressemblent les choses Lançons notre application Il existe une merveilleuse extension pour Visual Studio Code appelée Live Server qui hébergera votre application localement et actualisera le navigateur chaque fois que vous enregistrez Installez Live Server en suivant le lien et en cliquant sur Installer\nVous serez invité par le navigateur à ouvrir Visual Studio Code, puis par Visual Studio Code pour effectuer l'installation\nRedémarrez Visual Studio Code si vous y êtes invité\nUne fois installé, dans Visual Studio Code, cliquez sur Ctrl-Shift-P (ou Cmd-Shift-P) pour ouvrir la commande pallate\nTapez Live Server : Ouvrir avec Live Server\nLive Server commencera à héberger votre application\nOuvrez un navigateur et accédez à https://localhost:5500\nVous devriez maintenant voir la page que vous avez créée Ajoutons quelques fonctionnalités",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19967,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.fr.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 3,
    "total_chunks": 12
  },
  {
    "id": "4c05a3b02d9f539f3ebc634012050483",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.fr.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "le navigateur à ouvrir Visual Studio Code, puis par Visual Studio Code pour effectuer l'installation Redémarrez Visual Studio Code si vous y êtes invité Une fois installé, dans Visual Studio Code, cliquez sur Ctrl-Shift-P (ou Cmd-Shift-P) pour ouvrir la commande pallate Tapez Live Server : Ouvrir avec Live Server Live Server commencera à héberger votre application Ouvrez un navigateur et accédez à https://localhost:5500 Vous devriez maintenant voir la page que vous avez créée Ajoutons quelques fonctionnalitésAjouter le CSS\nAvec notre HTML créé, ajoutons le CSS pour le style de base Nous devons mettre en évidence le mot que le joueur doit taper et colorer la zone de texte si ce qu'il a tapé est incorrect Nous allons le faire avec deux classes Créez un nouveau fichier nommé style css et ajoutez la syntaxe suivante ```css\n/ A l'intérieur de style css / highlight {\nbackground-color: yellow;\n} error {\nbackground-color: lightcoral;\nborder: red;\n}\n```\n✅ En ce qui concerne CSS, vous pouvez mettre en page votre page comme vous le souhaitez Prenez un peu de temps et rendez la page plus attrayante :\nChoisissez une police différente\nColorier les en-têtes\nRedimensionner les éléments\nJavaScript\nAvec notre interface utilisateur créée, il est temps de concentrer notre attention sur le JavaScript qui fournira la logique Nous allons décomposer cela en une poignée d'étapes:\nCréer les constantes\nÉcouteur d'événement pour démarrer le jeu\nÉcouteur d'événement de saisie\nMais d'abord, créez un nouveau fichier nommé script js Ajouter les constantes\nNous allons avoir besoin de quelques éléments pour nous faciliter la programmation",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19967,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.fr.md",
      "source_type": "git_repo"
    },
    "token_count": 412,
    "chunk_index": 4,
    "total_chunks": 12
  },
  {
    "id": "57e2b3eb52d2db773789e333b66fb467",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.fr.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": ": Choisissez une police différente Colorier les en-têtes Redimensionner les éléments JavaScript Avec notre interface utilisateur créée, il est temps de concentrer notre attention sur le JavaScript qui fournira la logique Nous allons décomposer cela en une poignée d'étapes: Créer les constantes Écouteur d'événement pour démarrer le jeu Écouteur d'événement de saisie Mais d'abord, créez un nouveau fichier nommé script js Ajouter les constantes Nous allons avoir besoin de quelques éléments pour nous faciliter la programmationEncore une fois, comme pour une recette, voici ce dont nous aurons besoin :\nTableau avec la liste de toutes les citations\nTableau vide pour stocker tous les mots de la citation actuelle\nEspace pour stocker l'index du mot que le joueur est en train de taper\nL'heure à laquelle le joueur a cliqué sur démarrer\nNous allons également vouloir des références aux éléments de l'interface utilisateur :\nLa zone de texte (typed-value)\nL'affichage de la citation (quote)\nLe message (message)\njavascript\n// A l'intérieur de  script js\n// toutes nos citations\nconst quotes = [\n'When you have eliminated the impossible, whatever remains, however improbable, must be the truth ',\n'There is nothing more deceptive than an obvious fact ',\n'I ought to know by this time that when a fact appears to be opposed to a long train of deductions it invariably proves to be capable of bearing some other interpretation ',\n'I never make exceptions An exception disproves the rule ',\n'What one man can invent another can discover ',\n'Nothing clears up a case so much as stating it to another person ',\n'Education never ends, Watson It is a series of lessons, with the greatest for the last ',\n];\n// stocker la liste de mots et l'index du mot que le joueur est en train de taper\nlet words = [];\nlet wordIndex = 0;\n// l'heure de début\nlet startTime = Date now();\n// éléments de page\nconst quoteElement = document getElementById('quote');\nconst messageElement = document getElementById('message');\nconst typedValueElement = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19967,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.fr.md",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 5,
    "total_chunks": 12
  },
  {
    "id": "f179391502a3d93f96cc8fb32b18dee8",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.fr.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "it to another person ', 'Education never ends, Watson It is a series of lessons, with the greatest for the last ', ]; // stocker la liste de mots et l'index du mot que le joueur est en train de taper let words = []; let wordIndex = 0; // l'heure de début let startTime = Date now(); // éléments de page const quoteElement = document getElementById('quote'); const messageElement = document getElementById('message'); const typedValueElement = documentgetElementById('typed-value');\n✅ Allez-y et ajoutez plus de citations à votre jeu\nREMARQUE: Nous pouvons récupérer les éléments quand nous le voulons dans le code en utilisant document getElementById Du fait que nous allons nous référer régulièrement à ces éléments, nous allons éviter les fautes de frappe avec les littéraux de chaîne en utilisant des constantes Des frameworks tels que Vue js ou React peuvent vous aider à mieux gérer la centralisation de votre code Prenez une minute pour regarder une vidéo sur l'utilisation de const, let et var\n🎥 Cliquez sur l'image ci-dessus pour une vidéo sur les variables Ajouter une logique de démarrage\nPour commencer le jeu, le joueur cliquera sur démarrer Bien sûr, nous ne savons pas quand ils vont cliquer sur Démarrer C'est là qu'un écouteur d'événement entre en jeu Un écouteur d'événement nous permettra d'écouter si quelque chose se produit (un événement) et d'exécuter du code en réponse Dans notre cas, nous voulons exécuter du code lorsque l'utilisateur clique sur démarrer Lorsque l'utilisateur clique sur démarrer, nous devons sélectionner un devis, configurer l'interface utilisateur et configurer le suivi pour le mot et la synchronisation actuels Vous trouverez ci-dessous le JavaScript que vous devrez ajouter ; nous en discutons juste après le bloc de script ```javascript\n// à la fin de script js\ndocument getElementById('start') addEventListener('click', () => {\n// obtenir une citation\nconst quoteIndex = Math floor(Math random() * quotes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19967,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.fr.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 6,
    "total_chunks": 12
  },
  {
    "id": "355f91c1188914ba58460d66df45f661",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.fr.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "du code lorsque l'utilisateur clique sur démarrer Lorsque l'utilisateur clique sur démarrer, nous devons sélectionner un devis, configurer l'interface utilisateur et configurer le suivi pour le mot et la synchronisation actuels Vous trouverez ci-dessous le JavaScript que vous devrez ajouter ; nous en discutons juste après le bloc de script ```javascript // à la fin de script js document getElementById('start') addEventListener('click', () => { // obtenir une citation const quoteIndex = Math floor(Math random() * quoteslength);\nconst quote = quotes[quoteIndex];\n// Mettre la citation dans un tableau de mots\nwords = quote split(' ');\n// réinitialiser l'index des mots pour le suivi\nwordIndex = 0;\n// Mises à jour de l'interface utilisateur\n// Crée un tableau d'éléments \"span\" afin que nous puissions définir une classe\nconst spanWords = words map(function(word) { return <span>${word} </span>});\n// Convertir en chaîne et définir comme innerHTML sur l'affichage de la citation\nquoteElement innerHTML = spanWords join('');\n// Met en surbrillance le premier mot\nquoteElement childNodes[0] className = 'highlight';\n// Effacer tous les messages précédents\nmessageElement innerText = '';\n// Configurer la zone de texte\n// Efface la zone de texte\ntypedValueElement value = '';\n// définie le focus\ntypedValueElement focus();\n// définir le gestionnaire d'événements\n// Lancer le chronomètre\nstartTime = new Date() getTime();\n});\n```\nDécomposons le code Configurer le suivi des mots\nL'utilisation de Math floor et Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19967,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.fr.md",
      "source_type": "git_repo"
    },
    "token_count": 371,
    "chunk_index": 7,
    "total_chunks": 12
  },
  {
    "id": "e08392fed325f68cb50f66391b44fe86",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.fr.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "spanWords join(''); // Met en surbrillance le premier mot quoteElement childNodes[0] className = 'highlight'; // Effacer tous les messages précédents messageElement innerText = ''; // Configurer la zone de texte // Efface la zone de texte typedValueElement value = ''; // définie le focus typedValueElement focus(); // définir le gestionnaire d'événements // Lancer le chronomètre startTime = new Date() getTime(); }); ``` Décomposons le code Configurer le suivi des mots L'utilisation de Math floor et Mathrandom nous permet de sélectionner au hasard une citation dans le tableau quotes\nNous convertissons la quote en un tableau de words afin que nous puissions suivre le mot que le joueur est en train de taper\nwordIndex est mis à 0, puisque le lecteur commencera sur le premier mot\nConfigurer l'interface utilisateur\nCréez un tableau de spanWords, qui contient chaque mot à l'intérieur d'un élément span\nCela nous permettra de mettre en évidence le mot sur l'écran\nIl join (rejoins) le tableau pour créer une chaîne que nous pouvons utiliser pour mettre à jour le innerHTML sur quoteElement\nCela affichera la citation au joueur\nDéfinissez le className du premier élément span sur highlight pour le mettre en surbrillance en jaune\nVider le messageElement en définissant innerText sur ''\nConfigurer la zone de texte\nEffacer la value actuelle sur typedValueElement\nDéfinir focus sur typedValueElement\nDémarrez le chronomètre en appelant getTime\nAjouter une logique de saisie\nAu fur et à mesure que le joueur tape, un événement d'input sera déclenché Cet écouteur d'événement vérifiera que le joueur tape correctement le mot et gérera l'état actuel du jeu De retour à script js, ajoutez le code suivant à la fin Nous le décomposerons par la suite ```javascript\n// at the end of script js\ntypedValueElement addEventListener('input', () => {\n// Obtenir le mot actuel\nconst currentWord = words[wordIndex];\n// obtenir la valeur actuelle\nconst typedValue = typedValueElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19967,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.fr.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 8,
    "total_chunks": 12
  },
  {
    "id": "acefd9efbeee6fb08d0226da7b1e2784",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.fr.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "mesure que le joueur tape, un événement d'input sera déclenché Cet écouteur d'événement vérifiera que le joueur tape correctement le mot et gérera l'état actuel du jeu De retour à script js, ajoutez le code suivant à la fin Nous le décomposerons par la suite ```javascript // at the end of script js typedValueElement addEventListener('input', () => { // Obtenir le mot actuel const currentWord = words[wordIndex]; // obtenir la valeur actuelle const typedValue = typedValueElementvalue;\nif (typedValue === currentWord && wordIndex === words length - 1) {\n// fin de phrase\n// Afficher le succès\nconst elapsedTime = new Date() getTime() - startTime;\nconst message = CONGRATULATIONS You finished in ${elapsedTime / 1000} seconds ;\nmessageElement innerText = message;\n} else if (typedValue endsWith(' ') && typedValue trim() === currentWord) {\n// fin de mot\n// efface le typedValueElement pour le nouveau mot\ntypedValueElement value = '';\n// passer au mot suivant\nwordIndex++;\n// réinitialiser le nom de classe pour tous les éléments entre guillemets\nfor (const wordElement of quoteElement childNodes) {\nwordElement className = '';\n}\n// mettre en évidence le nouveau mot\nquoteElement childNodes[wordIndex] className = 'highlight';\n} else if (currentWord startsWith(typedValue)) {\n// actuellement correct\n// surligner le mot suivant\ntypedValueElement className = '';\n} else {\n// état d'erreur\ntypedValueElement className = 'error';\n}\n});\n```\nDécomposons le code Nous commençons par saisir le mot actuel et la valeur que le joueur a tapée jusqu'à présent Ensuite, nous avons une logique en cascade, où nous vérifions si la citation est complète, le mot est complet, le mot est correct ou (enfin) s'il y a une erreur",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19967,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.fr.md",
      "source_type": "git_repo"
    },
    "token_count": 434,
    "chunk_index": 9,
    "total_chunks": 12
  },
  {
    "id": "bfe480572325554913e742d4fb100fe6",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.fr.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "{ // actuellement correct // surligner le mot suivant typedValueElement className = ''; } else { // état d'erreur typedValueElement className = 'error'; } }); ``` Décomposons le code Nous commençons par saisir le mot actuel et la valeur que le joueur a tapée jusqu'à présent Ensuite, nous avons une logique en cascade, où nous vérifions si la citation est complète, le mot est complet, le mot est correct ou (enfin) s'il y a une erreurLa citation est complète, indiquée par typedValue étant égal à currentWord, et wordIndex étant égal à un de moins que la length de words\nCalculez elapsedTime en soustrayant startTime de l'heure actuelle\nDivisez elapsedTime par 1 000 pour convertir des millisecondes en secondes\nAfficher un message de succès\nLe mot est complet, indiqué par typedValue se terminant par un espace (la fin d'un mot) et typedValue étant égal à currentWord\nDéfinissez value de typedElement sur '' pour permettre la saisie du mot suivant\nIncrémentez wordIndex pour passer au mot suivant\nParcourez tous les childNodes de quoteElement pour définir className à '' pour revenir à l'affichage par défaut\nDéfinissez le className du mot actuel sur highlight pour le marquer comme le prochain mot à taper\nLe mot est actuellement tapé correctement (mais pas complet), indiqué par currentWord commencé par typedValue\nAssurez-vous que typedValueElement est affiché par défaut en effaçant className\nSi nous sommes arrivés jusqu'ici, nous avons une erreur\nDéfinissez className de typedValueElement à error\nTestez votre application\nVous êtes allé jusqu'au bout La dernière étape consiste à s'assurer que notre application fonctionne Essayez la Ne vous inquiétez pas s'il y a des erreurs ; tous les développeurs ont des erreurs Examinez les messages et déboguez si nécessaire Cliquez sur start et commencez à taper Cela devrait ressembler un peu à l'animation que nous avons vue auparavant",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19967,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.fr.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 10,
    "total_chunks": 12
  },
  {
    "id": "60664e382af66a9d21c9a88907fbd09a",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.fr.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "nous sommes arrivés jusqu'ici, nous avons une erreur Définissez className de typedValueElement à error Testez votre application Vous êtes allé jusqu'au bout La dernière étape consiste à s'assurer que notre application fonctionne Essayez la Ne vous inquiétez pas s'il y a des erreurs ; tous les développeurs ont des erreurs Examinez les messages et déboguez si nécessaire Cliquez sur start et commencez à taper Cela devrait ressembler un peu à l'animation que nous avons vue auparavant🚀 Challenge\nAjouter plus de fonctionnalités\nDésactivez l'écouteur d'événement input à la fin et réactivez-le lorsque le bouton est cliqué\nDésactivez la zone de texte lorsque le joueur termine la citation\nAfficher une boîte de dialogue modale avec le message de réussite\nStockez les meilleurs scores à l'aide de localStorage\nQuiz de validation des connaissances\nQuiz de validation des connaissances\nRévision et étude personnelle\nRenseignez-vous sur tous les événements disponibles pour le développeur via le navigateur Web et réfléchissez aux scénarios dans lesquels vous utiliseriez chacun Affectation\nCréer un nouveau jeu de clavier",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19967,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.fr.md",
      "source_type": "git_repo"
    },
    "token_count": 290,
    "chunk_index": 11,
    "total_chunks": 12
  },
  {
    "id": "a9af3b7fa81444b1c23c6faa1f77f6f7",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.it.md",
    "source_type": "git_repo",
    "title": "Gioco di Digitazione",
    "content": "Creare un gioco utilizzando gli eventi\nQuiz Pre-Lezione\nQuiz Pre-Lezione\nProgrammazione guidata dagli eventi\nQuando si crea un'applicazione basata su browser, si fornisce un'interfaccia utente grafica (GUI) che l'utente può utilizzare quando interagisce con ciò che si è creato Il modo più comune per interagire con il browser è facendo clic e digitando su vari elementi La sfida che si deve affrontare come sviluppatore è che non si conosce quando gli utenti eseguiranno queste operazioni Programmazione guidata dagli eventi è il nome del tipo di programmazione che serve per creare l'interfaccia grafica (GUI) Se si suddividie un po' questa frase, si nota che la parola chiave qui è evento L'evento, secondo il dizionario, è definito come \"fatto avvenuto o che può avvenire\" Questo descrive perfettamente la situazione da affrontare Si sa che succederà qualcosa per cui si vuole eseguire del codice in risposta, ma non si sa quando avverrà Il modo in cui si contrassegna una sezione di codice che si vuole eseguire è creando una funzione Quando si pensa alla programmazione procedurale, le funzioni vengono chiamate in un ordine specifico La stessa cosa sarà vera con la programmazione guidata dagli eventi La differenza è come verranno chiamate le funzioni Per gestire gli eventi (clic sul pulsante, digitazione, ecc ), si registrano gli ascoltatori di eventi (event listener) Un event listener è una funzione che ascolta il verificarsi di un evento e viene eseguita in risposta Gli event listener possono aggiornare l'interfaccia utente, effettuare chiamate al server o qualsiasi altra cosa debba essere eseguita in risposta all'azione dell'utente Un event listener si aggiunge usando addEventListener, e fornendo una funzione da eseguire",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19726,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.it.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 0,
    "total_chunks": 13
  },
  {
    "id": "e6983655ad08e7de6c20709abe178f83",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.it.md",
    "source_type": "git_repo",
    "title": "Gioco di Digitazione",
    "content": "come verranno chiamate le funzioni Per gestire gli eventi (clic sul pulsante, digitazione, ecc ), si registrano gli ascoltatori di eventi (event listener) Un event listener è una funzione che ascolta il verificarsi di un evento e viene eseguita in risposta Gli event listener possono aggiornare l'interfaccia utente, effettuare chiamate al server o qualsiasi altra cosa debba essere eseguita in risposta all'azione dell'utente Un event listener si aggiunge usando addEventListener, e fornendo una funzione da eseguireNOTA: vale la pena sottolineare che esistono numerosi modi per creare event listener È possibile utilizzare funzioni anonime o creare funzioni con nome Si possono utilizzare varie scorciatoie, come impostare la proprietà click o utilizzare addEventListener In questo esercizio si ci concentrerà su addEventLister e sulle funzioni anonime, poiché è probabilmente la tecnica più comune utilizzata dagli sviluppatori web È anche la più flessibile, visto che addEventListener funziona per tutti gli eventi e il nome dell'evento può essere fornito come parametro Eventi comuni\nCi sono dozzine di eventi disponibili da ascoltare quando si crea un'applicazione Fondamentalmente qualsiasi cosa un utente fa su una pagina genera un evento, il che dà molto potere allo sviluppatore per assicurarsi che egli ottenga l'esperienza che desidera Fortunatamente, in genere si avrà solo bisogno di una piccola manciata di eventi",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19726,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.it.md",
      "source_type": "git_repo"
    },
    "token_count": 381,
    "chunk_index": 1,
    "total_chunks": 13
  },
  {
    "id": "b4ecbe7e8e8e280596393d0ff94f2765",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.it.md",
    "source_type": "git_repo",
    "title": "Gioco di Digitazione",
    "content": "È anche la più flessibile, visto che addEventListener funziona per tutti gli eventi e il nome dell'evento può essere fornito come parametro Eventi comuni Ci sono dozzine di eventi disponibili da ascoltare quando si crea un'applicazione Fondamentalmente qualsiasi cosa un utente fa su una pagina genera un evento, il che dà molto potere allo sviluppatore per assicurarsi che egli ottenga l'esperienza che desidera Fortunatamente, in genere si avrà solo bisogno di una piccola manciata di eventiEccone alcuni comuni (inclusi i due che verranno usati durante la creazione del gioco):\nclic: l'utente ha fatto clic su qualcosa, in genere un pulsante o un collegamento ipertestuale\ncontextmenu: l'utente ha fatto clic con il pulsante destro del mouse\nselect: l'utente ha evidenziato del testo\ninput: l'utente ha inserito del testo\nCreare il gioco\nVerrà creato un gioco per esplorare come funzionano gli eventi in JavaScript Il gioco metterà alla prova l'abilità di battitura di un giocatore, che è una delle abilità più sottovalutate che tutti gli sviluppatori dovrebbero avere Tutti dovrebbero esercitarsi a digitare Il flusso generale del gioco sarà simile a questo:\nIl giocatore fa clic sul pulsante di avvio e gli viene visualizzata una citazione da digitare\nIl giocatore digita la citazione il più velocemente possibile in una casella di testo\nQuando ogni parola è completata, viene evidenziata quella successiva\nSe il giocatore ha un errore di battitura, la casella di testo viene aggiornata in rosso\nQuando il giocatore completa la citazione, viene visualizzato un messaggio di successo con il tempo trascorso\nOra si costruirà il gioco e si imparierà a conoscere gli eventi Struttura dei file\nSaranno necessari tre file in totale: index html, script js e style css",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19726,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.it.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 13
  },
  {
    "id": "843870153719b97bdf23c61d44508169",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.it.md",
    "source_type": "git_repo",
    "title": "Gioco di Digitazione",
    "content": "velocemente possibile in una casella di testo Quando ogni parola è completata, viene evidenziata quella successiva Se il giocatore ha un errore di battitura, la casella di testo viene aggiornata in rosso Quando il giocatore completa la citazione, viene visualizzato un messaggio di successo con il tempo trascorso Ora si costruirà il gioco e si imparierà a conoscere gli eventi Struttura dei file Saranno necessari tre file in totale: index html, script js e style cssSi inizia impostando quelli per rendere la vita un po' più facile allo sviluppatore Creare una nuova cartella per il proprio lavoro aprendo una console o una finestra di terminale ed eseguendo il seguente comando:\n```bash\nLinux o macOS\nmkdir typing-game && cd typing-game\nWindows\nmd typing-game && cd typing-game\n```\nAprire Visual Studio Code\nbash\ncode Aggiungere tre file alla cartella in Visual Studio Code con i seguenti nomi:\nindex html\nscript js\nStyle css\nCreare l'interfaccia utente\nSe si esaminano i requisiti, si saprà che servirà una manciata di elementi sulla pagina HTML Questa è una specie di ricetta, per la quale servono alcuni ingredienti:\nUn punto nel quale visualizzare la citazione che l'utente deve digitare\nUn punto nel quale visualizzare qualsiasi messaggio, come un messaggio di successo\nUna casella di testo per la digitazione\nUn pulsante di avvio\nOgnuno di questi avrà bisogno di ID in modo da poterli referenziare nel codice JavaScript Verranno aggiunti anche riferimenti ai file CSS e JavaScript che saranno creati Creare un nuovo file denominato index html Inserire il segunte testo HTML:\n```html\nGioco di Digitazione\nGioco di Digitazione\nEsercita la tua abilità nella digitazione con una citazione da Sherlock Holmes Fai click su start per iniziare Start\n```\nAvviare l'applicazione\nÈ sempre meglio sviluppare in modo iterativo per vedere come appaiono le cose",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19726,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.it.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 3,
    "total_chunks": 13
  },
  {
    "id": "c35a1eab77c99278bc8c4cf1f6880b9e",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.it.md",
    "source_type": "git_repo",
    "title": "Gioco di Digitazione",
    "content": "di ID in modo da poterli referenziare nel codice JavaScript Verranno aggiunti anche riferimenti ai file CSS e JavaScript che saranno creati Creare un nuovo file denominato index html Inserire il segunte testo HTML: ```html Gioco di Digitazione Gioco di Digitazione Esercita la tua abilità nella digitazione con una citazione da Sherlock Holmes Fai click su start per iniziare Start ``` Avviare l'applicazione È sempre meglio sviluppare in modo iterativo per vedere come appaiono le coseLanciare l'applicazione Una meravigliosa estensione per Visual Studio Code chiamata Live Server ospiterà la propria applicazione localmente e aggiornerà il browser ogni volta che viene effettuata una operazione di salvataggio nel codice Installare Live Server seguendo il collegamento e facendo clic su Install\nVerrà richiesto dal browser di aprire Visual Studio Code e quindi da Visual Studio Code di eseguire l'installazione\nRiavviare Visual Studio Code se richiesto\nUna volta installato, in Visual Studio Code, fare clic su Ctrl-Shift-P (o Cmd-Shift-P se su MAC) per aprire il riquadro dei comandi\nDigitare Live Server: Open with Live Server\nLive Server inizierà a servire la propria applicazione\nAprire un browser e andare a https://localhost:5500\nOra si dovrebbe vedere la pagina che si è creato Ora si aggiungeranno alcune funzionalità Aggiungere CSS\nCon l'HTML creato, ora si aggiunge CSS per lo stile di base Occorre evidenziare la parola che il giocatore dovrebbe digitare e colorare la casella di testo se ciò che ha digitato non è corretto Verrà fatto con due classi Aprire il file denominato style css e aggiungere quanto segue ```css\n/ all'interno di style css / highlight {\nbackground-color: yellow;\n} error {\nbackground-color: lightcoral;\nborder: red;\n}\n```\n✅ Quando si tratta di CSS, si può impaginare la propria pagina come si preferisce",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19726,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.it.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 4,
    "total_chunks": 13
  },
  {
    "id": "0101cae3775c142e98419bc5a7fb0fb9",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.it.md",
    "source_type": "git_repo",
    "title": "Gioco di Digitazione",
    "content": "stile di base Occorre evidenziare la parola che il giocatore dovrebbe digitare e colorare la casella di testo se ciò che ha digitato non è corretto Verrà fatto con due classi Aprire il file denominato style css e aggiungere quanto segue ```css / all'interno di style css / highlight { background-color: yellow; } error { background-color: lightcoral; border: red; } ``` ✅ Quando si tratta di CSS, si può impaginare la propria pagina come si preferisceCi si prenda un po' di tempo per rendere la pagina più accattivante:\nScegliere un carattere diverso\nColorare le intestazioni\nRidimensionare gli elementi\nJavaScript\nCon l'interfaccia utente creata, è il momento di concentrare l'attenzione sul codice JavaScript che fornirà la logica Verrà suddiviso in una manciata di passaggi:\nCreare le costanti\nEvent listener per avviare il gioco\nEvent listener per la digitazione\nSe non già fatto, creare un nuovo file chiamato script js Aggiungere le costanti\nServiranno alcuni elementi per facilitarsi la vita per la programmazione Ancora una volta, simile a una ricetta, ecco di cosa si avrà bisogno:\nMatrice con l'elenco di tutte le citazioni\nMatrice vuota per memorizzare tutte le parole per la citazione corrente\nSpazio per memorizzare l'indice della parola che il giocatore sta al momento digitando\nL'orario nel quale il giocatore ha fatto clic su Start\nVerranno anche referenziati gli elementi dell'interfaccia utente:\nLa casella di testo (typed-value)\nLa visualizzazione della citazione (quote)\nIl messaggio (message)\njavascript\n// all'interno di script js\n// tutte le citazioni\nconst quotes = [\n'Eliminato l’impossibile, ciò che resta, per improbabile che sia, deve essere la verità ',\n'Non vi è nulla di così ingannevole come un fatto ovvio",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19726,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.it.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 5,
    "total_chunks": 13
  },
  {
    "id": "63e24841fb14f45ca9c1f05cbbfcaa91",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.it.md",
    "source_type": "git_repo",
    "title": "Gioco di Digitazione",
    "content": "che il giocatore sta al momento digitando L'orario nel quale il giocatore ha fatto clic su Start Verranno anche referenziati gli elementi dell'interfaccia utente: La casella di testo (typed-value) La visualizzazione della citazione (quote) Il messaggio (message) javascript // all'interno di script js // tutte le citazioni const quotes = [ 'Eliminato l’impossibile, ciò che resta, per improbabile che sia, deve essere la verità ', 'Non vi è nulla di così ingannevole come un fatto ovvio',\n'Spesso, il delitto più banale è il più incomprensibile proprio perché non presenta aspetti insoliti o particolari, da cui si possano trarre delle deduzioni ',\n'Non faccio mai eccezioni Un’eccezione contraddice la regola ',\n'Ciò che un uomo può inventare, un altro può scoprire ',\n'Il miglior modo per chiarire le idee è quello di spiegarle ad un’altra persona ',\n\"L'istruzione non finisce mai, Watson Si tratta di una serie di lezioni, con la più grande per l'ultima \"\n];\n// memorizza l'elenco di parole e l'indice della parola che il giocatore sta attualmente digitando\nlet words = [];\nlet wordIndex = 0;\n// l'orario di partenza\nlet startTime = Date now();\n// elementi nella pagina\nconst quoteElement = document getElementById('quote');\nconst messageElement = document getElementById('message');\nconst typedValueElement = document getElementById('typed-value');\n✅ Proseguire aggiungendo altre citazioni al proprio gioco\nNOTA: si possono recuperare gli elementi ogni volta che serve nel codice utilizzando document getElementById A causa del fatto che questi elementi verrranno referenziati su base regolare, si eviteranno errori di battitura con stringhe letterali utilizzando costanti Infrastrutture come Vue js o React possono aiutare a gestire meglio la centralizzazione del codice",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19726,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.it.md",
      "source_type": "git_repo"
    },
    "token_count": 461,
    "chunk_index": 6,
    "total_chunks": 13
  },
  {
    "id": "8ea5b539c0276f2a8e7b99bf256081d5",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.it.md",
    "source_type": "git_repo",
    "title": "Gioco di Digitazione",
    "content": "pagina const quoteElement = document getElementById('quote'); const messageElement = document getElementById('message'); const typedValueElement = document getElementById('typed-value'); ✅ Proseguire aggiungendo altre citazioni al proprio gioco NOTA: si possono recuperare gli elementi ogni volta che serve nel codice utilizzando document getElementById A causa del fatto che questi elementi verrranno referenziati su base regolare, si eviteranno errori di battitura con stringhe letterali utilizzando costanti Infrastrutture come Vue js o React possono aiutare a gestire meglio la centralizzazione del codiceSi prenda un minuto per guardare un video sull'uso di const, let e var\nFare clic sull'immagine sopra per un video sulle variabili (in inglese) Aggiungere la logica di avvio\nPer iniziare il gioco, il giocatore farà clic su Start Ovviamente non si sa quando verrà fatto clic su Start È qui che entra in gioco un event listener Un event listener consentirà di ascoltare il verificarsi di qualcosa (un evento) ed eseguire del codice in risposta Nel nostro caso, si vuole eseguire il codice quando l'utente fa clic su Start Quando l'utente fa clic su Start, occorre selezionare una citazione , configurare l'interfaccia utente e impostare il monitoraggio per la parola e il conteggio del tempo Di seguito è riportato il codice JavaScript che si dovrà aggiungere; verrà discusso subito dopo questo blocco ```javascript\n// alla fine in script js\ndocument getElementById('start') addEventListener('click', () => {\n// si ottiene una citazione\nconst quoteIndex = Math floor(Math random() * quotes length);\nconst quote = quotes[quoteIndex];\n// Si inserisce la citazione in un array di parole\nwords = quote split(' ');\n// si reimposta l'indice della parola da monitorare\nwordIndex = 0;\n// Aggiornamenti interfaccia utente\n// Si crea un array di elementi span in modo da impostare una classe\nconst spanWords = words",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19726,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.it.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 7,
    "total_chunks": 13
  },
  {
    "id": "69b1d94bd7d61e6ec460dfc148885ad5",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.it.md",
    "source_type": "git_repo",
    "title": "Gioco di Digitazione",
    "content": "fine in script js document getElementById('start') addEventListener('click', () => { // si ottiene una citazione const quoteIndex = Math floor(Math random() * quotes length); const quote = quotes[quoteIndex]; // Si inserisce la citazione in un array di parole words = quote split(' '); // si reimposta l'indice della parola da monitorare wordIndex = 0; // Aggiornamenti interfaccia utente // Si crea un array di elementi span in modo da impostare una classe const spanWords = wordsmap(function(word) { return <span>${word} </span>});\n// Converzione in stringa e impostazione come innerHTML alla visualizzazione della citazione\nquoteElement innerHTML = spanWords join('');\n// Evidenzia la prima parola\nquoteElement childNodes[0] className = 'highlight';\n// Pulisce qualsiasi precedente messaggio\nmessageElement innerText = '';\n// Impostazione della casella di testo\n// Pulisce la casella di testo\ntypedValueElement value = '';\n// imposta il focus\ntypedValueElement focus();\n// imposta il gestore di evento\n// Fa partire il timer\nstartTime = new Date() getTime();\n});\n```\nVerrà analizzato il codice Impostazione del monitoraggio delle parole\nL'utilizzo  di Math floor e Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19726,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.it.md",
      "source_type": "git_repo"
    },
    "token_count": 287,
    "chunk_index": 8,
    "total_chunks": 13
  },
  {
    "id": "3861287c3e90087e2cfab96d30881329",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.it.md",
    "source_type": "git_repo",
    "title": "Gioco di Digitazione",
    "content": "spanWords join(''); // Evidenzia la prima parola quoteElement childNodes[0] className = 'highlight'; // Pulisce qualsiasi precedente messaggio messageElement innerText = ''; // Impostazione della casella di testo // Pulisce la casella di testo typedValueElement value = ''; // imposta il focus typedValueElement focus(); // imposta il gestore di evento // Fa partire il timer startTime = new Date() getTime(); }); ``` Verrà analizzato il codice Impostazione del monitoraggio delle parole L'utilizzo di Math floor e Mathrandom consente di selezionare in modo casuale una citazione dall'array quotes\nSi converte la citazione (quote) in un array di parole (words) in modo da poter tracciare la parola che il giocatore sta attualmente digitando\nSi imposta wordIndex  a 0, poiché il giocatore inizierà dalla prima parola\nImpostazione dell'interfaccia utente\nSi crea un array  spanWords, che contiene ogni parola all'interno di un elemento span\nQuesto permetterà di evidenziare la parola sul display\nSi unisce (join) l'array per creare una stringa che si può usare per aggiornare innerHTML su quoteElement\nQuesto mostrerà la citazione al giocatore\nSi imposta className del primo elemento span a highlight per evidenziarlo in giallo\nSi pulisce messageElement impostando innerText a ''\nImpostazione della casella di testo\nSi cancella il valore (value) corrente su typedValueElement\nSi imposta l'elemento (focus) su typedValueElement\nSu avvia il timer chiamando getTime\nAggiungere la logica di digitazione\nMan mano che il giocatore digita, verrà generato un evento di input Questo event listener verificherà che il giocatore stia digitando correttamente la parola e gestirà lo stato corrente del gioco Tornando a script js, aggiungere il codice seguente alla fine Verrà analizzato in seguito ```javascript\n// in fondo a script js\ntypedValueElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19726,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.it.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 9,
    "total_chunks": 13
  },
  {
    "id": "9b638562bd0b74f6bae3a3706ed3e24c",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.it.md",
    "source_type": "git_repo",
    "title": "Gioco di Digitazione",
    "content": "il valore (value) corrente su typedValueElement Si imposta l'elemento (focus) su typedValueElement Su avvia il timer chiamando getTime Aggiungere la logica di digitazione Man mano che il giocatore digita, verrà generato un evento di input Questo event listener verificherà che il giocatore stia digitando correttamente la parola e gestirà lo stato corrente del gioco Tornando a script js, aggiungere il codice seguente alla fine Verrà analizzato in seguito ```javascript // in fondo a script js typedValueElementaddEventListener('input', () => {\n// Ottiene la parola corrente\nconst currentWord = words[wordIndex];\n// Ottiene il valore corrente\nconst typedValue = typedValueElement value;\nif (typedValue === currentWord && wordIndex === words length - 1) {\n// fine della frase\n// Visualizza messaggio di successo\nconst elapsedTime = new Date() getTime() - startTime;\nconst message = CONGRATULAZIONI Hai finito in ${elapsedTime / 1000} secondi ;\nmessageElement innerText = message;\n} else if (typedValue endsWith(' ') && typedValue trim() === currentWord) {\n// fine della parola\n// pulisce typedValueElement per la nuova parola\ntypedValueElement value = '';\n// si sposta alla parola successiva\nwordIndex++;\n// reimposta il nome della classe per tutti gli elementi in quote\nfor (const wordElement of quoteElement childNodes) {\nwordElement className = '';\n}\n// evidenzia la nuova parola\nquoteElement childNodes[wordIndex] className = 'highlight';\n} else if (currentWord startsWith(typedValue)) {\n// attualmente corretto\n// evidenzia la parola successiva\ntypedValueElement className = '';\n} else {\n// stato di errore\ntypedValueElement className = 'error';\n}\n});\n```\nOra si analizzerà il codice Si inizia catturando la parola corrente e il valore che il giocatore ha digitato finora Quindi si ha una logica a cascata, dove si controlla se la citazione è completa, la parola è completa, la parola è corretta o (finalmente), se c'è un errore",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19726,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.it.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 10,
    "total_chunks": 13
  },
  {
    "id": "aca73443e68815a171ed1dcf5ccf4ee6",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.it.md",
    "source_type": "git_repo",
    "title": "Gioco di Digitazione",
    "content": "{ // attualmente corretto // evidenzia la parola successiva typedValueElement className = ''; } else { // stato di errore typedValueElement className = 'error'; } }); ``` Ora si analizzerà il codice Si inizia catturando la parola corrente e il valore che il giocatore ha digitato finora Quindi si ha una logica a cascata, dove si controlla se la citazione è completa, la parola è completa, la parola è corretta o (finalmente), se c'è un erroreLa citazione è completa, indicata da typedValue che è uguale a currentWord e wordIndex è uguale a uno meno la lunghezza length delle parole (words)\nSi calcola elapsedTime sottraendo startTime dall'orario corrente\nSi divide elapsedTime per 1 000 per convertire da millisecondi a secondi\nSi visualizza un messaggio di successo\nLa parola è completa, indicata da typedValue che termina con uno spazio (la fine di una parola) e typedValue è uguale a currentWord\nimposta il valore (value) di typedElement a \" \" per consentire la digitazione della parola successiva\nSi incrementa wordIndex per passare alla parola successiva\nSi itera su tutti i nodi figli childNode di quoteElement per impostare className a \"\" per tornare alla visualizzazione predefinita\nSi imposta className della parola corrente per evidenziarla a highlight per contrassegnarla come parola successiva da digitare\nLa parola (word) è attualmente digitata correttamente (ma non è completa), indicato da currentWord che deve iniziare con il contenuto di typedValue\nCi si assicura che typedValueElement sia visualizzato nel modo predefinito cancellando className\nSe si è arrivati fin qui, si ha un errore\nSi imposta className per typedValueElement su error\nVerificare l'applicazione\nSi è arrivati alla fine L'ultimo passaggio è assicurarsi che la propria applicazione funzioni Fare una prova Non ci si deve preoccupare se ci sono errori; tutti gli sviluppatori fanno errori",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19726,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.it.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 11,
    "total_chunks": 13
  },
  {
    "id": "542e5fac9dbd952dc4adaa67d7dbcbf0",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.it.md",
    "source_type": "git_repo",
    "title": "Gioco di Digitazione",
    "content": "non è completa), indicato da currentWord che deve iniziare con il contenuto di typedValue Ci si assicura che typedValueElement sia visualizzato nel modo predefinito cancellando className Se si è arrivati fin qui, si ha un errore Si imposta className per typedValueElement su error Verificare l'applicazione Si è arrivati alla fine L'ultimo passaggio è assicurarsi che la propria applicazione funzioni Fare una prova Non ci si deve preoccupare se ci sono errori; tutti gli sviluppatori fanno erroriEsaminare i messaggi ed eseguire il debug secondo necessità Fare clic su Start e iniziare a digitare Dovrebbe assomigliare un po' all'animazione vista prima 🚀 Sfida\nAggiungere più funzionalità\nDisabilitare l'event listener per l'evento di input al completamento e riattivarlo quando si fa clic sul pulsante\nDisabilitare la casella di testo quando il giocatore completa la citazione\nVisualizzare una finestra di dialogo modale con il messaggio di successo\nMemorizzare i punteggi migliori utilizzando localStorage\nQuiz Post-Lezione\nQuiz post-lezione\nRevisione e Auto Apprendimento\nInformarsi su tutti gli eventi disponibili per lo sviluppatore tramite il browser web e considerare gli scenari nei quali si userebbe ciascuno di essi Compito\nCreazione di un nuovo gioco con la tastiera",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19726,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.it.md",
      "source_type": "git_repo"
    },
    "token_count": 332,
    "chunk_index": 12,
    "total_chunks": 13
  },
  {
    "id": "963cfc25b870c2fcf1aebda48a50c891",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "इवेंट्स का उपयोग करके एक गेम बनाना\nपूर्व व्याख्यान प्रश्नोत्तरी\nपूर्व व्याख्यान प्रश्नोत्तरी\nइवेंट संचालित प्रोग्रामिंग\nब्राउज़र आधारित एप्लिकेशन बनाते समय, हम उपयोगकर्ता के लिए एक ग्राफिकल यूजर इंटरफेस (जीयूआई) प्रदान करते हैं, जो कि हमने जो बनाया है, उसके साथ इंटरैक्ट करने के लिए। ब्राउज़र के साथ बातचीत करने का सबसे आम तरीका विभिन्न तत्वों में क्लिक और टाइपिंग है। एक डेवलपर के रूप में हमारे सामने जो चुनौती है, वह यह है कि हम नहीं जानते कि वे कब इन ऑपरेशनों को करने जा रहे हैं",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34566,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 0,
    "total_chunks": 28
  },
  {
    "id": "f163dd7de0f11f2d9510e5013e86bf8b",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "प्रश्नोत्तरी इवेंट संचालित प्रोग्रामिंग ब्राउज़र आधारित एप्लिकेशन बनाते समय, हम उपयोगकर्ता के लिए एक ग्राफिकल यूजर इंटरफेस (जीयूआई) प्रदान करते हैं, जो कि हमने जो बनाया है, उसके साथ इंटरैक्ट करने के लिए। ब्राउज़र के साथ बातचीत करने का सबसे आम तरीका विभिन्न तत्वों में क्लिक और टाइपिंग है। एक डेवलपर के रूप में हमारे सामने जो चुनौती है, वह यह है कि हम नहीं जानते कि वे कब इन ऑपरेशनों को करने जा रहे हैं[ईवेंट संचालित प्रोग्रामिंग] (https://en wikipedia",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34566,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 433,
    "chunk_index": 1,
    "total_chunks": 28
  },
  {
    "id": "285c55620f1b44035d4bc0cc2b7a9136",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "ब्राउज़र आधारित एप्लिकेशन बनाते समय, हम उपयोगकर्ता के लिए एक ग्राफिकल यूजर इंटरफेस (जीयूआई) प्रदान करते हैं, जो कि हमने जो बनाया है, उसके साथ इंटरैक्ट करने के लिए। ब्राउज़र के साथ बातचीत करने का सबसे आम तरीका विभिन्न तत्वों में क्लिक और टाइपिंग है। एक डेवलपर के रूप में हमारे सामने जो चुनौती है, वह यह है कि हम नहीं जानते कि वे कब इन ऑपरेशनों को करने जा रहे हैं[ईवेंट संचालित प्रोग्रामिंग] (https://en wikipediaorg/wiki/Event-driven_programming) प्रोग्रामिंग का प्रकार जो हमें अपने GUI को बनाने के लिए करने की आवश्यकता है। यदि हम इस वाक्यांश को थोड़ा तोड़ते हैं, तो हम यहाँ मुख्य शब्द ** ईवेंट ** देखते हैं। ईवेंट, मरियम-वेबस्टर के अनुसार, \"कुछ ऐसा होता है\" के रूप में परिभाषित किया गया है। यह हमारी स्थिति का पूरी तरह से वर्णन करता है। हम जानते हैं कि कुछ ऐसा होने जा रहा है जिसके लिए हम प्रतिक्रिया में कुछ कोड निष्पादित करना चाहते हैं, लेकिन हम नहीं जानते कि यह कब होगा।\nजिस तरह से हम कोड के एक भाग को चिह्नित करते हैं जिसे हम निष्पादित करना चाहते हैं वह एक फ़ंक्शन बनाकर है। जब हम [प्रक्रियात्मक प्रोग्रामिंग] (https://en",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34566,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 944,
    "chunk_index": 2,
    "total_chunks": 28
  },
  {
    "id": "435ec829bf6a398c51ecf63ce8df1f7f",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "होता है\" के रूप में परिभाषित किया गया है। यह हमारी स्थिति का पूरी तरह से वर्णन करता है। हम जानते हैं कि कुछ ऐसा होने जा रहा है जिसके लिए हम प्रतिक्रिया में कुछ कोड निष्पादित करना चाहते हैं, लेकिन हम नहीं जानते कि यह कब होगा। जिस तरह से हम कोड के एक भाग को चिह्नित करते हैं जिसे हम निष्पादित करना चाहते हैं वह एक फ़ंक्शन बनाकर है। जब हम [प्रक्रियात्मक प्रोग्रामिंग] (https://enwikipedia",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34566,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 346,
    "chunk_index": 3,
    "total_chunks": 28
  },
  {
    "id": "2a5478b74cf3d85fb8b50a3cf6c6bfc0",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "होता है\" के रूप में परिभाषित किया गया है। यह हमारी स्थिति का पूरी तरह से वर्णन करता है। हम जानते हैं कि कुछ ऐसा होने जा रहा है जिसके लिए हम प्रतिक्रिया में कुछ कोड निष्पादित करना चाहते हैं, लेकिन हम नहीं जानते कि यह कब होगा। जिस तरह से हम कोड के एक भाग को चिह्नित करते हैं जिसे हम निष्पादित करना चाहते हैं वह एक फ़ंक्शन बनाकर है। जब हम [प्रक्रियात्मक प्रोग्रामिंग] (https://enwikipediaorg/wiki/Procedural_programming) के बारे में सोचते हैं, तो कार्यों को एक विशिष्ट क्रम में बुलाया जाता है। यही बात इवेंट संचालित प्रोग्रामिंग के साथ सही होने वाली है। अंतर कैसे कार्यों को कहा जाएगा।\nईवेंट्स (बटन क्लिकिंग, टाइपिंग आदि) को संभालने के लिए, हम ईवेंट श्रोताओं को रजिस्टर करते हैं। एक ईवेंट श्रोता एक ऐसा फंक्शन है जो किसी घटना को होने के लिए सुनता है और प्रतिक्रिया में निष्पादित करता है। इवेंट श्रोता यूआई को अपडेट कर सकते हैं, सर्वर पर कॉल कर सकते हैं, या उपयोगकर्ता की कार्रवाई के जवाब में और कुछ भी किया जा सकता है। हम एक घटना श्रोता को addEventListener का उपयोग करके, और निष्पादित करने के लिए एक फ़ंक्शन प्रदान करके जोड़ते हैं।\nध्यान दें: यह ध्यान देने योग्य है कि घटना श्रोताओं को बनाने के कई तरीके हैं। आप अनाम फ़ंक्शंस का उपयोग कर सकते हैं, या नामित नाम बना सकते हैं। आप विभिन्न शॉर्टकट का उपयोग कर सकते हैं, जैसे कि click प्रॉपर्टी सेट करना, या addEventListener का उपयोग करना। हमारे अभ्यास में हम addEventLister और अनाम कार्यों पर ध्यान केंद्रित करने जा रहे हैं, क्योंकि यह संभवतः सबसे आम तकनीक वेब डेवलपर्स का उपयोग है। यह सबसे अधिक लचीली भी है, क्योंकि सभी घटनाओं के लिए addEventListener काम करता है, और इवेंट नाम को एक पैरामीटर के रूप में प्रदान किया जा सकता है।\nआम इवेंट्स\nएप्लिकेशन बनाते समय आपको सुनने के लिए दर्जनों इवेंट उपलब्ध हैं। मूल रूप से एक पृष्ठ पर एक उपयोगकर्ता कुछ भी करता है, एक घटना को बढ़ाता है, जो आपको यह सुनिश्चित करने के लिए बहुत शक्ति देता है कि वे आपकी इच्छा का अनुभव प्राप्त करें। सौभाग्य से, आपको आम तौर पर केवल कुछ मुट्ठी भर घटनाओं की आवश्यकता होगी। यहां कुछ सामान्य बातें हैं (दोनों में से एक का उपयोग हम अपने खेल को बनाते समय करेंगे)\nclick: उपयोगकर्ता ने कुछ पर क्लिक किया, आमतौर पर एक बटन या हाइपरलिंक\ncontextmenu: उपयोगकर्ता ने सही माउस बटन क्लिक किया\nselect: उपयोगकर्ता ने कुछ टेक्स्ट पर प्रकाश डाला\ninput: उपयोगकर्ता कुछ टेक्स्ट इनपुट करता है\nखेल का निर्माण\nहम जावास्क्रिप्ट में ईवेंट कैसे काम करते हैं, यह जानने के लिए एक गेम बनाने जा रहे हैं। हमारा खेल एक खिलाड़ी के टाइपिंग कौशल का परीक्षण करने जा रहा है, जो सभी डेवलपर्स के पास सबसे कम क्षमता वाले कौशल में से एक है। हम सभी को अपनी टाइपिंग का अभ्यास करना चाहिए",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34566,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 2277,
    "chunk_index": 4,
    "total_chunks": 28
  },
  {
    "id": "fc5b694d1043652a5c5dc044d799935d",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "माउस बटन क्लिक किया select: उपयोगकर्ता ने कुछ टेक्स्ट पर प्रकाश डाला input: उपयोगकर्ता कुछ टेक्स्ट इनपुट करता है खेल का निर्माण हम जावास्क्रिप्ट में ईवेंट कैसे काम करते हैं, यह जानने के लिए एक गेम बनाने जा रहे हैं। हमारा खेल एक खिलाड़ी के टाइपिंग कौशल का परीक्षण करने जा रहा है, जो सभी डेवलपर्स के पास सबसे कम क्षमता वाले कौशल में से एक है। हम सभी को अपनी टाइपिंग का अभ्यास करना चाहिएखेल का सामान्य प्रवाह इस तरह दिखेगा:\nप्लेयर स्टार्ट बटन पर क्लिक करता है और टाइप करने के लिए एक उद्धरण के साथ प्रस्तुत किया जाता है\nप्लेयर टेक्स्ट बॉक्स में जितनी जल्दी हो सके उद्धरण टाइप करें\nजैसा कि प्रत्येक शब्द पूरा हो गया है, अगले एक को हाइलाइट किया गया है\nयदि खिलाड़ी के पास टाइपो है, तो टेक्स्टबॉक्स को लाल रंग में अपडेट किया जाता है\nजब खिलाड़ी बोली को पूरा करता है, तो एक सफल संदेश बीते हुए समय के साथ प्रदर्शित होता है\nचलो हमारे खेल का निर्माण करें, और घटनाओं के बारे में जानें",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34566,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 832,
    "chunk_index": 5,
    "total_chunks": 28
  },
  {
    "id": "44b195ae5b2c330146394ae60a040ee9",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "किया जाता है प्लेयर टेक्स्ट बॉक्स में जितनी जल्दी हो सके उद्धरण टाइप करें जैसा कि प्रत्येक शब्द पूरा हो गया है, अगले एक को हाइलाइट किया गया है यदि खिलाड़ी के पास टाइपो है, तो टेक्स्टबॉक्स को लाल रंग में अपडेट किया जाता है जब खिलाड़ी बोली को पूरा करता है, तो एक सफल संदेश बीते हुए समय के साथ प्रदर्शित होता है चलो हमारे खेल का निर्माण करें, और घटनाओं के बारे में जानेंफ़ाइल संरचना\nहमें कुल तीन फ़ाइलों की आवश्यकता है: index html, script js और style css",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34566,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 421,
    "chunk_index": 6,
    "total_chunks": 28
  },
  {
    "id": "e4a2576c17c8569faaaa1362f5ea62e4",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "कि प्रत्येक शब्द पूरा हो गया है, अगले एक को हाइलाइट किया गया है यदि खिलाड़ी के पास टाइपो है, तो टेक्स्टबॉक्स को लाल रंग में अपडेट किया जाता है जब खिलाड़ी बोली को पूरा करता है, तो एक सफल संदेश बीते हुए समय के साथ प्रदर्शित होता है चलो हमारे खेल का निर्माण करें, और घटनाओं के बारे में जानेंफ़ाइल संरचना हमें कुल तीन फ़ाइलों की आवश्यकता है: index html, script js और style cssआइए उन लोगों की स्थापना करके शुरू करें, जो हमारे लिए जीवन को थोड़ा आसान बनाते हैं।\nकंसोल या टर्मिनल विंडो खोलकर और निम्न आदेश जारी करके अपने काम के लिए एक नया फ़ोल्डर बनाएँ:\n```bash\nLinux or macOS\nmkdir typing-game && cd typing-game\nWindows\nmd typing-game && cd typing-game\n```\nविजुअल स्टूडियो कोड खोलें\nbash\ncode",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34566,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 580,
    "chunk_index": 7,
    "total_chunks": 28
  },
  {
    "id": "7df412bac84fe9184131a30d28792e15",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "घटनाओं के बारे में जानेंफ़ाइल संरचना हमें कुल तीन फ़ाइलों की आवश्यकता है: index html, script js और style cssआइए उन लोगों की स्थापना करके शुरू करें, जो हमारे लिए जीवन को थोड़ा आसान बनाते हैं। कंसोल या टर्मिनल विंडो खोलकर और निम्न आदेश जारी करके अपने काम के लिए एक नया फ़ोल्डर बनाएँ: ```bash Linux or macOS mkdir typing-game && cd typing-game Windows md typing-game && cd typing-game ``` विजुअल स्टूडियो कोड खोलें bash codeविज़ुअल स्टूडियो कोड के फ़ोल्डर में निम्नलिखित नामों के साथ तीन फाइलें जोड़ें:\nindex html\nscript js\nstyle",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34566,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 403,
    "chunk_index": 8,
    "total_chunks": 28
  },
  {
    "id": "1135bb413d33ad4d0f3e63d34bb4ca5d",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "और style cssआइए उन लोगों की स्थापना करके शुरू करें, जो हमारे लिए जीवन को थोड़ा आसान बनाते हैं। कंसोल या टर्मिनल विंडो खोलकर और निम्न आदेश जारी करके अपने काम के लिए एक नया फ़ोल्डर बनाएँ: ```bash Linux or macOS mkdir typing-game && cd typing-game Windows md typing-game && cd typing-game ``` विजुअल स्टूडियो कोड खोलें bash codeविज़ुअल स्टूडियो कोड के फ़ोल्डर में निम्नलिखित नामों के साथ तीन फाइलें जोड़ें: index html script js stylecss\nउपयोगकर्ता इंटरफ़ेस बनाएँ\nयदि हम आवश्यकताओं का पता लगाते हैं, तो हम जानते हैं कि हमें अपने HTML पृष्ठ पर मुट्ठी भर तत्वों की आवश्यकता है। यह एक रेसिपी की तरह है, जहाँ हमें कुछ सामग्री की आवश्यकता होती है:\nउपयोगकर्ता टाइप करने के लिए बोली प्रदर्शित करने के लिए कहीं\nकहीं कोई संदेश प्रदर्शित करने के लिए, जैसे कोई सफलता संदेश\nटाइपिंग के लिए एक टेक्स्टबॉक्स\nएक स्टार्ट बटन\nउनमें से प्रत्येक को आईडी की आवश्यकता होगी ताकि हम अपने जावास्क्रिप्ट में उनके साथ काम कर सकें। हम सीएसएस और जावास्क्रिप्ट फ़ाइलों के संदर्भ भी जोड़ेंगे जिन्हें हम बनाने जा रहे हैं।\nindex",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34566,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 870,
    "chunk_index": 9,
    "total_chunks": 28
  },
  {
    "id": "89c281112d504e086d84487e74b924e3",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "रेसिपी की तरह है, जहाँ हमें कुछ सामग्री की आवश्यकता होती है: उपयोगकर्ता टाइप करने के लिए बोली प्रदर्शित करने के लिए कहीं कहीं कोई संदेश प्रदर्शित करने के लिए, जैसे कोई सफलता संदेश टाइपिंग के लिए एक टेक्स्टबॉक्स एक स्टार्ट बटन उनमें से प्रत्येक को आईडी की आवश्यकता होगी ताकि हम अपने जावास्क्रिप्ट में उनके साथ काम कर सकें। हम सीएसएस और जावास्क्रिप्ट फ़ाइलों के संदर्भ भी जोड़ेंगे जिन्हें हम बनाने जा रहे हैं। indexhtml नामक एक नई फ़ाइल बनाएँ। निम्नलिखित HTML जोड़ें:\n```html\nTyping game\nTyping game Practice your typing skills with a quote from Sherlock Holmes Click **start** to begin",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34566,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 10,
    "total_chunks": 28
  },
  {
    "id": "6c7be0187a57d25eeb35124744cfe4d3",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "करने के लिए, जैसे कोई सफलता संदेश टाइपिंग के लिए एक टेक्स्टबॉक्स एक स्टार्ट बटन उनमें से प्रत्येक को आईडी की आवश्यकता होगी ताकि हम अपने जावास्क्रिप्ट में उनके साथ काम कर सकें। हम सीएसएस और जावास्क्रिप्ट फ़ाइलों के संदर्भ भी जोड़ेंगे जिन्हें हम बनाने जा रहे हैं। indexhtml नामक एक नई फ़ाइल बनाएँ। निम्नलिखित HTML जोड़ें: ```html Typing game Typing game Practice your typing skills with a quote from Sherlock Holmes Click **start** to beginStart\n```\nएप्लिकेशन लॉन्च करें\nयह देखना हमेशा सबसे अच्छा होता है कि कैसे चीजें देखें। चलो हमारे आवेदन का शुभारंभ करें। विजुअल स्टूडियो कोड के लिए एक अद्भुत एक्सटेंशन है जिसे लाइव सर्वर कहा जाता है, जो आपके आवेदन को सहेजने और हर बार सहेजने के लिए ब्राउज़र को ताज़ा करेगा।\nलिंक का पालन करके और स्थापित पर क्लिक करके लाइव सर्वर स्थापित करें\nआपको विज़ुअल स्टूडियो कोड खोलने के लिए ब्राउज़र द्वारा और फिर इंस्टॉलेशन करने के लिए विज़ुअल स्टूडियो कोड द्वारा संकेत दिया जाएगा\nसंकेत मिलने पर विज़ुअल स्टूडियो कोड को पुनरारंभ करें\nविजुअल स्टूडियो कोड में स्थापित होने के बाद, कमांड पलेट खोलने के लिए Ctrl-Shift-P (या Cmd-Shift-P) पर क्लिक करें।\nLive Server: Open with Live Server लिखे\nलाइव सर्वर आपके एप्लिकेशन को होस्ट करना शुरू कर देगा\nएक ब्राउज़र खोलें और https://localhost:5500 पर नेविगेट करें\nअब आपको आपके द्वारा बनाया गया पेज देखना चाहिए",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34566,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 1095,
    "chunk_index": 11,
    "total_chunks": 28
  },
  {
    "id": "fff0ac915c310a2173c184caee19c1cd",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "द्वारा और फिर इंस्टॉलेशन करने के लिए विज़ुअल स्टूडियो कोड द्वारा संकेत दिया जाएगा संकेत मिलने पर विज़ुअल स्टूडियो कोड को पुनरारंभ करें विजुअल स्टूडियो कोड में स्थापित होने के बाद, कमांड पलेट खोलने के लिए Ctrl-Shift-P (या Cmd-Shift-P) पर क्लिक करें। Live Server: Open with Live Server लिखे लाइव सर्वर आपके एप्लिकेशन को होस्ट करना शुरू कर देगा एक ब्राउज़र खोलें और https://localhost:5500 पर नेविगेट करें अब आपको आपके द्वारा बनाया गया पेज देखना चाहिएचलो कुछ कार्यक्षमता जोड़ते हैं।\nसीएसएस जोड़ें\nहमारे HTML के निर्माण के साथ, मुख्य स्टाइलिंग के लिए CSS जोड़ते हैं। हमें उस शब्द को हाइलाइट करने की आवश्यकता है जो खिलाड़ी को टाइप करना चाहिए, और यदि उन्होंने टाइप किया है तो टेक्स्टबॉक्स को रंगीन करें। हम इसे दो वर्गों के साथ करेंगे।\nstyle",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34566,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 657,
    "chunk_index": 12,
    "total_chunks": 28
  },
  {
    "id": "0534df7b8edbbff5489078c1bd43c825",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "को होस्ट करना शुरू कर देगा एक ब्राउज़र खोलें और https://localhost:5500 पर नेविगेट करें अब आपको आपके द्वारा बनाया गया पेज देखना चाहिएचलो कुछ कार्यक्षमता जोड़ते हैं। सीएसएस जोड़ें हमारे HTML के निर्माण के साथ, मुख्य स्टाइलिंग के लिए CSS जोड़ते हैं। हमें उस शब्द को हाइलाइट करने की आवश्यकता है जो खिलाड़ी को टाइप करना चाहिए, और यदि उन्होंने टाइप किया है तो टेक्स्टबॉक्स को रंगीन करें। हम इसे दो वर्गों के साथ करेंगे। stylecss नाम की एक नई फ़ाइल बनाएं और निम्न सिंटैक्स जोड़ें।\n```css\n/ inside style css / highlight {\nbackground-color: yellow;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34566,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 465,
    "chunk_index": 13,
    "total_chunks": 28
  },
  {
    "id": "da7280e3f9a4dab2769dff085bc75817",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "देखना चाहिएचलो कुछ कार्यक्षमता जोड़ते हैं। सीएसएस जोड़ें हमारे HTML के निर्माण के साथ, मुख्य स्टाइलिंग के लिए CSS जोड़ते हैं। हमें उस शब्द को हाइलाइट करने की आवश्यकता है जो खिलाड़ी को टाइप करना चाहिए, और यदि उन्होंने टाइप किया है तो टेक्स्टबॉक्स को रंगीन करें। हम इसे दो वर्गों के साथ करेंगे। stylecss नाम की एक नई फ़ाइल बनाएं और निम्न सिंटैक्स जोड़ें। ```css / inside style css / highlight { background-color: yellow; }error {\nbackground-color: lightcoral;\nborder: red;\n}\n```\n✅ जब यह सीएसएस की बात आती है तो आप अपने पेज को लेआउट कर सकते हैं लेकिन आप इसे पसंद कर सकते हैं थोड़ा समय लें और पृष्ठ को अधिक आकर्षक बनाएं:\nएक अलग फ़ॉन्ट चुनें\nहेडर को कलर करें\nआइटम का आकार बदलें\nजावास्क्रिप्ट\nहमारे यूआई के साथ, यह जावास्क्रिप्ट पर हमारा ध्यान केंद्रित करने का समय है जो तर्क प्रदान करेगा। हम इसे मुट्ठी भर चरणों में तोड़ने जा रहे हैं:\n[स्थिरांक बनाएँ]](#add-the-constants)\nखेल शुरू करने के लिए इवेंट श्रोता\nटाइप करने के लिए ईवेंट श्रोता\nलेकिन सबसे पहले, script",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34566,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 833,
    "chunk_index": 14,
    "total_chunks": 28
  },
  {
    "id": "40296763289d94ad70cc848baff3d381",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "लेकिन आप इसे पसंद कर सकते हैं थोड़ा समय लें और पृष्ठ को अधिक आकर्षक बनाएं: एक अलग फ़ॉन्ट चुनें हेडर को कलर करें आइटम का आकार बदलें जावास्क्रिप्ट हमारे यूआई के साथ, यह जावास्क्रिप्ट पर हमारा ध्यान केंद्रित करने का समय है जो तर्क प्रदान करेगा। हम इसे मुट्ठी भर चरणों में तोड़ने जा रहे हैं: [स्थिरांक बनाएँ]](#add-the-constants) खेल शुरू करने के लिए इवेंट श्रोता टाइप करने के लिए ईवेंट श्रोता लेकिन सबसे पहले, scriptjs नामक एक नई फ़ाइल बनाएं।\nस्थिरांक जोड़ें\nप्रोग्रामिंग के लिए हमारे जीवन को थोड़ा आसान बनाने के लिए हमें कुछ वस्तुओं की आवश्यकता है। फिर, एक नुस्खा के समान, यहाँ हम क्या करेंगे:\nसभी उद्धरणों की सूची के साथ अरै\nवर्तमान बोली के लिए सभी शब्दों को संग्रहीत करने के लिए खाली अरै\nखिलाड़ी शब्द के सूचकांक को संग्रहीत करने के लिए स्थान वर्तमान में टाइप कर रहा है\nजिस समय खिलाड़ी ने शुरुआत पर क्लिक किया\nहम UI तत्वों के संदर्भ भी चाहते हैं:\nटेक्सटबॉक्स (typed-value)\nक्वोट डिस्प्ले (quote)\nमैसेज (message)\njavascript\n// inside script",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34566,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 862,
    "chunk_index": 15,
    "total_chunks": 28
  },
  {
    "id": "e0e32e3a4768ed9b3705de47f25e077b",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "वस्तुओं की आवश्यकता है। फिर, एक नुस्खा के समान, यहाँ हम क्या करेंगे: सभी उद्धरणों की सूची के साथ अरै वर्तमान बोली के लिए सभी शब्दों को संग्रहीत करने के लिए खाली अरै खिलाड़ी शब्द के सूचकांक को संग्रहीत करने के लिए स्थान वर्तमान में टाइप कर रहा है जिस समय खिलाड़ी ने शुरुआत पर क्लिक किया हम UI तत्वों के संदर्भ भी चाहते हैं: टेक्सटबॉक्स (typed-value) क्वोट डिस्प्ले (quote) मैसेज (message) javascript // inside scriptjs\n// all of our quotes\nconst quotes = [\n'When you have eliminated the impossible, whatever remains, however improbable, must be the truth ',\n'There is nothing more deceptive than an obvious fact ',\n'I ought to know by this time that when a fact appears to be opposed to a long train of deductions it invariably proves to be capable of bearing some other interpretation ',\n'I never make exceptions An exception disproves the rule ',\n'What one man can invent another can discover ',\n'Nothing clears up a case so much as stating it to another person ',\n'Education never ends, Watson It is a series of lessons, with the greatest for the last",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34566,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 16,
    "total_chunks": 28
  },
  {
    "id": "11c15f6fbf92fb301a10197282a40ccd",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "time that when a fact appears to be opposed to a long train of deductions it invariably proves to be capable of bearing some other interpretation ', 'I never make exceptions An exception disproves the rule ', 'What one man can invent another can discover ', 'Nothing clears up a case so much as stating it to another person ', 'Education never ends, Watson It is a series of lessons, with the greatest for the last',\n];\n// store the list of words and the index of the word the player is currently typing\nlet words = [];\nlet wordIndex = 0;\n// the starting time\nlet startTime = Date now();\n// page elements\nconst quoteElement = document getElementById('quote');\nconst messageElement = document getElementById('message');\nconst typedValueElement = document getElementById('typed-value');\n✅ आगे बढ़ो और अपने खेल के लिए अधिक उद्धरण जोड़ें\nनोट: हम तत्वों को पुनः प्राप्त कर सकते हैं जब भी हम document getElementById का उपयोग करके कोड में चाहते हैं। इस तथ्य के कारण कि हम नियमित रूप से इन तत्वों को संदर्भित करने जा रहे हैं, हम स्थिरांक के साथ स्थिरांक का उपयोग करके स्थिरांक से बचने जा रहे हैं। फ्रेमवर्क जैसे कि Vue",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34566,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 456,
    "chunk_index": 17,
    "total_chunks": 28
  },
  {
    "id": "040e5e2c4ade82da6d614b2d21d2a46e",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "messageElement = document getElementById('message'); const typedValueElement = document getElementById('typed-value'); ✅ आगे बढ़ो और अपने खेल के लिए अधिक उद्धरण जोड़ें नोट: हम तत्वों को पुनः प्राप्त कर सकते हैं जब भी हम document getElementById का उपयोग करके कोड में चाहते हैं। इस तथ्य के कारण कि हम नियमित रूप से इन तत्वों को संदर्भित करने जा रहे हैं, हम स्थिरांक के साथ स्थिरांक का उपयोग करके स्थिरांक से बचने जा रहे हैं। फ्रेमवर्क जैसे कि Vuejs या रिएक्ट आपको अपने कोड को बेहतर बनाने में मदद कर सकते हैं।\nconst,let और var का उपयोग करके वीडियो देखने के लिए एक मिनट का समय लें\nचरों के बारे में वीडियो के लिए ऊपर दी गई छवि पर क्लिक करें।\nप्रारंभ तर्क जोड़ें\nगेम शुरू करने के लिए, प्लेयर स्टार्ट पर क्लिक करेगा। बेशक, हम नहीं जानते कि वे कब शुरू करने जा रहे हैं। यह वह जगह है जहाँ एक इवेंट श्रोता खेल में आता है। एक ईवेंट श्रोता हमें कुछ होने (किसी घटना) के लिए सुनने और प्रतिक्रिया में कोड निष्पादित करने की अनुमति देगा। हमारे मामले में, हम उस कोड को निष्पादित करना चाहते हैं जब उपयोगकर्ता प्रारंभ पर क्लिक करता है।\nजब उपयोगकर्ता प्रारंभ पर क्लिक करता है, तो हमें एक उद्धरण का चयन करना होगा, उपयोगकर्ता इंटरफ़ेस सेटअप करना और वर्तमान शब्द और समय के लिए सेटअप ट्रैकिंग करना होगा। नीचे दिए गए जावास्क्रिप्ट को आपको जोड़ना होगा; हम स्क्रिप्ट ब्लॉक के ठीक बाद इस पर चर्चा करते हैं।\n```javascript\n// at the end of script",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34566,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 1132,
    "chunk_index": 18,
    "total_chunks": 28
  },
  {
    "id": "280012f401b403acebdb797e61aed1ef",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "अनुमति देगा। हमारे मामले में, हम उस कोड को निष्पादित करना चाहते हैं जब उपयोगकर्ता प्रारंभ पर क्लिक करता है। जब उपयोगकर्ता प्रारंभ पर क्लिक करता है, तो हमें एक उद्धरण का चयन करना होगा, उपयोगकर्ता इंटरफ़ेस सेटअप करना और वर्तमान शब्द और समय के लिए सेटअप ट्रैकिंग करना होगा। नीचे दिए गए जावास्क्रिप्ट को आपको जोड़ना होगा; हम स्क्रिप्ट ब्लॉक के ठीक बाद इस पर चर्चा करते हैं। ```javascript // at the end of scriptjs\ndocument getElementById('start') addEventListener('click', () => {\n// get a quote\nconst quoteIndex = Math floor(Math random() * quotes length);\nconst quote = quotes[quoteIndex];\n// Put the quote into an array of words\nwords = quote split(' ');\n// reset the word index for tracking\nwordIndex = 0;\n// UI updates\n// Create an array of span elements so we can set a class\nconst spanWords = words map(function(word) { return <span>${word} </span>});\n// Convert into string and set as innerHTML on quote display\nquoteElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34566,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 19,
    "total_chunks": 28
  },
  {
    "id": "3e1f5f04d3f016a6bceeeda14d8e874f",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "a quote const quoteIndex = Math floor(Math random() * quotes length); const quote = quotes[quoteIndex]; // Put the quote into an array of words words = quote split(' '); // reset the word index for tracking wordIndex = 0; // UI updates // Create an array of span elements so we can set a class const spanWords = words map(function(word) { return <span>${word} </span>}); // Convert into string and set as innerHTML on quote display quoteElementinnerHTML = spanWords join('');\n// Highlight the first word\nquoteElement childNodes[0] className = 'highlight';\n// Clear any prior messages\nmessageElement innerText = '';\n// Setup the textbox\n// Clear the textbox\ntypedValueElement value = '';\n// set focus\ntypedValueElement focus();\n// set the event handler\n// Start the timer\nstartTime = new Date() getTime();\n});\n```\nचलो कोड को तोड़ते है\nट्रैकिंग शब्द सेट करें\nmath floor और math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34566,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 234,
    "chunk_index": 20,
    "total_chunks": 28
  },
  {
    "id": "15255d77236b53825949e11baf1e6444",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "and set as innerHTML on quote display quoteElementinnerHTML = spanWords join(''); // Highlight the first word quoteElement childNodes[0] className = 'highlight'; // Clear any prior messages messageElement innerText = ''; // Setup the textbox // Clear the textbox typedValueElement value = ''; // set focus typedValueElement focus(); // set the event handler // Start the timer startTime = new Date() getTime(); }); ``` चलो कोड को तोड़ते है ट्रैकिंग शब्द सेट करें math floor और mathrandom का उपयोग करके हम quotes सरणी से एक उद्धरण का चयन करने के लिए अनुमति देते हैं।\nहम quote को words की एक सरणी में बदलते हैं, इसलिए हम उस खिलाड़ी को ट्रैक कर सकते हैं जो खिलाड़ी वर्तमान में टाइप कर रहा है\nwordIndex 0 पर सेट है, क्योंकि खिलाड़ी पहले शब्द पर शुरू होगा\nयूआई सेटअप करें\nspanWords की एक सरणी बनाएं, जिसमें span तत्व के अंदर प्रत्येक शब्द होता है\nयह हमें प्रदर्शन पर शब्द को उजागर करने की अनुमति देगा\nएक स्ट्रिंग बनाने के लिए join करने के लिए अरै का उपयोग करें जिसे हम quoteElement पर innerHTML अपडेट करने के लिए उपयोग कर सकते हैं\nयह खिलाड़ी को बोली प्रदर्शित करेगा\nपीले रंग के रूप में हाइलाइट करने के लिए highlight के लिए पहले span तत्व का className सेट करें\nmessageElement को '' पर सेट करके messageElement को साफ करें\nटेक्स्टबॉक्स सेट करें\ntypedValueElement पर वर्तमान value को साफ़ करें\nfocus को 'typedValueElement' पर सेट करें\ngetTime कहकर टाइमर शुरू करें\nटाइपिंग तर्क जोड़ें\nखिलाड़ी के प्रकार के रूप में, एक input घटना को उठाया जाएगा। यह ईवेंट श्रोता यह सुनिश्चित करने के लिए जांच करेगा कि खिलाड़ी शब्द को सही ढंग से टाइप कर रहा है, और गेम की वर्तमान स्थिति को संभाल सकता है। script",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34566,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 1028,
    "chunk_index": 21,
    "total_chunks": 28
  },
  {
    "id": "93418cce19289c70bd09a28a12f1160d",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "को '' पर सेट करके messageElement को साफ करें टेक्स्टबॉक्स सेट करें typedValueElement पर वर्तमान value को साफ़ करें focus को 'typedValueElement' पर सेट करें getTime कहकर टाइमर शुरू करें टाइपिंग तर्क जोड़ें खिलाड़ी के प्रकार के रूप में, एक input घटना को उठाया जाएगा। यह ईवेंट श्रोता यह सुनिश्चित करने के लिए जांच करेगा कि खिलाड़ी शब्द को सही ढंग से टाइप कर रहा है, और गेम की वर्तमान स्थिति को संभाल सकता है। scriptjs पर लौटकर, निम्नलिखित कोड को अंत में जोड़ें। हम इसे बाद में तोड़ देंगे।\n```javascript\n// at the end of script js\ntypedValueElement addEventListener('input', () => {\n// Get the current word\nconst currentWord = words[wordIndex];\n// get the current value\nconst typedValue = typedValueElement value;\nif (typedValue === currentWord && wordIndex === words length - 1) {\n// end of sentence\n// Display success\nconst elapsedTime = new Date() getTime() - startTime;\nconst message = CONGRATULATIONS",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34566,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 22,
    "total_chunks": 28
  },
  {
    "id": "67996961a926c6941b21369d54a9dca3",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "लौटकर, निम्नलिखित कोड को अंत में जोड़ें। हम इसे बाद में तोड़ देंगे। ```javascript // at the end of script js typedValueElement addEventListener('input', () => { // Get the current word const currentWord = words[wordIndex]; // get the current value const typedValue = typedValueElement value; if (typedValue === currentWord && wordIndex === words length - 1) { // end of sentence // Display success const elapsedTime = new Date() getTime() - startTime; const message = CONGRATULATIONSYou finished in ${elapsedTime / 1000} seconds ;\nmessageElement innerText = message;\n} else if (typedValue endsWith(' ') && typedValue trim() === currentWord) {\n// end of word\n// clear the typedValueElement for the new word\ntypedValueElement value = '';\n// move to the next word\nwordIndex++;\n// reset the class name for all elements in quote\nfor (const wordElement of quoteElement childNodes) {\nwordElement className = '';\n}\n// highlight the new word\nquoteElement childNodes[wordIndex] className = 'highlight';\n} else if (currentWord startsWith(typedValue)) {\n// currently correct\n// highlight the next word\ntypedValueElement className = '';\n} else {\n// error state\ntypedValueElement className = 'error';\n}\n});\n```\nकोड को तोड़ दो",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34566,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 346,
    "chunk_index": 23,
    "total_chunks": 28
  },
  {
    "id": "9958ee07bc826e60bca2d92cbf16bc3c",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "= ''; // move to the next word wordIndex++; // reset the class name for all elements in quote for (const wordElement of quoteElement childNodes) { wordElement className = ''; } // highlight the new word quoteElement childNodes[wordIndex] className = 'highlight'; } else if (currentWord startsWith(typedValue)) { // currently correct // highlight the next word typedValueElement className = ''; } else { // error state typedValueElement className = 'error'; } }); ``` कोड को तोड़ दोहम वर्तमान शब्द को पकड़कर शुरू करते हैं और खिलाड़ी ने इस प्रकार अब तक टाइप किया है। फिर हमारे पास झरना तर्क है, जहां हम जांचते हैं कि क्या उद्धरण पूरा है, शब्द पूरा है, शब्द सही है, या (अंत में), अगर कोई त्रुटि है।\nउद्धरण पूर्ण है, typedValue द्वारा currentWord के बराबर होने का संकेत दिया गया है, और wordIndex को  words की length से कम के बराबर किया जा रहा है\nवर्तमान समय से startTime घटाकरelapsedTime की गणना करें\nमिलीसेकंड से सेकंड में परिवर्तित करने के लिए elapsedTime को 1,000 से विभाजित करें\nएक सफलता संदेश प्रदर्शित करें\nशब्द पूरा हो गया है, जो typedValue द्वारा एक स्थान के साथ समाप्त होने का संकेत है (एक शब्द का अंत) और typedValue कोcurrentWord के बराबर किया जा रहा है\nअगले शब्द को टाइप करने की अनुमति देने के लिए typedElement to '' पर value सेट करें\nवृद्धि wordIndex अगले शब्द पर ले जाने के लिए\nप्रदर्शन को फिर से प्रदर्शित करने के लिए className को '' के लिए quoteElement के सभी childNodes के माध्यम से लूप करें\nवर्तमान शब्द के className को टाइप करने के लिए अगले शब्द के रूप में फ़्लैग करने के लिए highlight पर सेट करें\nवर्तमान में शब्द सही ढंग से टाइप किया गया है (लेकिन पूरा नहीं), currentWord द्वारा इंगित typedValue से शुरू हुआ\nसुनिश्चित करें कि typeNalueElement को className को क्लीयर करके डिफ़ॉल्ट के रूप में प्रदर्शित किया गया है\nयदि हमने इसे दूर किया है, तो हमारे पास एक त्रुटि है\nclassName पर  typedValueElement से error सेट करे\nअपने ऐप्लकैशनको टेसेट करे\nआपने इसे अंत तक बना दिया है",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34566,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 1231,
    "chunk_index": 24,
    "total_chunks": 28
  },
  {
    "id": "20e0a4a26bce1ac074f4e8ae73e9214a",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "में फ़्लैग करने के लिए highlight पर सेट करें वर्तमान में शब्द सही ढंग से टाइप किया गया है (लेकिन पूरा नहीं), currentWord द्वारा इंगित typedValue से शुरू हुआ सुनिश्चित करें कि typeNalueElement को className को क्लीयर करके डिफ़ॉल्ट के रूप में प्रदर्शित किया गया है यदि हमने इसे दूर किया है, तो हमारे पास एक त्रुटि है className पर typedValueElement से error सेट करे अपने ऐप्लकैशनको टेसेट करे आपने इसे अंत तक बना दिया हैअंतिम चरण हमारे आवेदन कार्यों को सुनिश्चित करना है। इसे आजमा कर देखें",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34566,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 389,
    "chunk_index": 25,
    "total_chunks": 28
  },
  {
    "id": "b1aad062ae1d47c8aba8681b3e22a3a3",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "सही ढंग से टाइप किया गया है (लेकिन पूरा नहीं), currentWord द्वारा इंगित typedValue से शुरू हुआ सुनिश्चित करें कि typeNalueElement को className को क्लीयर करके डिफ़ॉल्ट के रूप में प्रदर्शित किया गया है यदि हमने इसे दूर किया है, तो हमारे पास एक त्रुटि है className पर typedValueElement से error सेट करे अपने ऐप्लकैशनको टेसेट करे आपने इसे अंत तक बना दिया हैअंतिम चरण हमारे आवेदन कार्यों को सुनिश्चित करना है। इसे आजमा कर देखेंअगर वहाँ त्रुटियां हैं तो चिंता न करें; सभी डेवलपर्स में त्रुटियां हैं। संदेशों की जांच करें और आवश्यकतानुसार डिबग करें।\nstart पर क्लिक करें, और दूर टाइप करना शुरू करें",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34566,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 26,
    "total_chunks": 28
  },
  {
    "id": "45917b69859bb494737493c2bc50c492",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "प्रदर्शित किया गया है यदि हमने इसे दूर किया है, तो हमारे पास एक त्रुटि है className पर typedValueElement से error सेट करे अपने ऐप्लकैशनको टेसेट करे आपने इसे अंत तक बना दिया हैअंतिम चरण हमारे आवेदन कार्यों को सुनिश्चित करना है। इसे आजमा कर देखेंअगर वहाँ त्रुटियां हैं तो चिंता न करें; सभी डेवलपर्स में त्रुटियां हैं। संदेशों की जांच करें और आवश्यकतानुसार डिबग करें। start पर क्लिक करें, और दूर टाइप करना शुरू करेंयह हमें पहले देखे गए एनीमेशन की तरह दिखना चाहिए।\n🚀 चुनौती\nअधिक कार्यक्षमता जोड़ें\nपूर्ण होने पर input ईवेंट श्रोता को अक्षम करें, और बटन पर क्लिक करने पर इसे फिर से सक्षम करें\nखिलाड़ी द्वारा बोली पूरा करने पर टेक्स्टबॉक्स को अक्षम करें\nसफलता संदेश के साथ एक मॉडल संवाद बॉक्स प्रदर्शित करें\nlocalStorage का उपयोग करके उच्च स्कोर स्टोर करें\nव्याख्यान उपरांत प्रश्नोत्तरी\nव्याख्यान उपरांत प्रश्नोत्तरी\nसमीक्षा और स्व अध्ययन\nवेब ब्राउज़र के माध्यम से डेवलपर के लिए उपलब्ध सभी घटनाओं को पढ़ें, और उन परिदृश्यों पर विचार करें जिनमें आप प्रत्येक का उपयोग करेंगे।\nअसाइनमेंट\nएक नया कीबोर्ड गेम बनाए",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34566,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 944,
    "chunk_index": 27,
    "total_chunks": 28
  },
  {
    "id": "00ff66b232efd40d66626a628fabce1f",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "이벤트를 사용하여 게임 만들기\n강의 전 퀴즈\nPre-lecture quiz\n이벤트 기반 프로그래밍\n브라우저 기반 애플리케이션을 만들 때, 사용자가 만든 것과 상호 작용하기 위한 그래픽 유저 인터페이스 (GUI)를 제공합니다 브라우저와 상호 작용하는 가장 일반적인 방법은 다양한 요소를 클릭하고 입력하는 것입니다 개발자로서 마주한 도전은 이러한 작업을 언제 수행할 지 모른다는 점입니다 Event-driven programming은 GUI를 만들기 위해 수행할 프로그래밍 타입의 이름입니다 이 구문을 조금 자세히 보면, 여기서 핵심 단어가 event라는 점을 볼 수 있습니다 Merriam-Webster에 따르면, 이벤트는 \"something which happens\"로 정의됩니다 이 상황을 완벽하게 설명합니다 응답이라는 건 어떤 코드가 수행될 지 알고 있지만, 언제 발생할 지 모릅니다 실행하려는 코드 섹션을 출력할 방법은 함수를 만드는 것입니다 procedural programming으로 생각해보면, 함수는 순차적으로 호출됩니다 이벤트 기반 프로그래밍에서도 마찬가지입니다 다른 점이라고 하면 함수가 호출되는 방식입니다 이벤트(버튼 클릭, 타이핑 등)를 제어하기 위해서, event listeners를 등록합니다 이벤트 리스너는 이벤트 발생을 수신하고 응답하는 함수입니다",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18971,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 0,
    "total_chunks": 18
  },
  {
    "id": "ce58427f3d27028234f80d61569ded4e",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "이 구문을 조금 자세히 보면, 여기서 핵심 단어가 event라는 점을 볼 수 있습니다 Merriam-Webster에 따르면, 이벤트는 \"something which happens\"로 정의됩니다 이 상황을 완벽하게 설명합니다 응답이라는 건 어떤 코드가 수행될 지 알고 있지만, 언제 발생할 지 모릅니다 실행하려는 코드 섹션을 출력할 방법은 함수를 만드는 것입니다 procedural programming으로 생각해보면, 함수는 순차적으로 호출됩니다 이벤트 기반 프로그래밍에서도 마찬가지입니다 다른 점이라고 하면 함수가 호출되는 방식입니다 이벤트(버튼 클릭, 타이핑 등)를 제어하기 위해서, event listeners를 등록합니다 이벤트 리스너는 이벤트 발생을 수신하고 응답하는 함수입니다이벤트 리스너는 UI를 갱신하고, 서버를 호출하거나, 또는 작업에 응답하는 모든 작업을 수행할 수 있습니다 addEventListener를 사용하여 이벤트 리스너를 추가하고, 실행할 함수를 제공합니다 NOTE: 이벤트 리스너를 만드는 방법에는 여러 가지가 존재한다는 점을 강조하기에 충분합니다 익명 함수를 사용하거나, 이름을 지어 만들 수 있습니다 click 속성을 설정하거나, addEventListener를 사용하는 등 다양한 단축으로 쓸 수 있습니다 이 강의에서는 웹 개발자가 사용하는 가장 일반적인 기술인 addEventLister와 익명 함수에 초점을 맞출 것입니다",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18971,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 1,
    "total_chunks": 18
  },
  {
    "id": "a6d801736d72228f9e1c42f1c32b38b6",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "위해서, event listeners를 등록합니다 이벤트 리스너는 이벤트 발생을 수신하고 응답하는 함수입니다이벤트 리스너는 UI를 갱신하고, 서버를 호출하거나, 또는 작업에 응답하는 모든 작업을 수행할 수 있습니다 addEventListener를 사용하여 이벤트 리스너를 추가하고, 실행할 함수를 제공합니다 NOTE: 이벤트 리스너를 만드는 방법에는 여러 가지가 존재한다는 점을 강조하기에 충분합니다 익명 함수를 사용하거나, 이름을 지어 만들 수 있습니다 click 속성을 설정하거나, addEventListener를 사용하는 등 다양한 단축으로 쓸 수 있습니다 이 강의에서는 웹 개발자가 사용하는 가장 일반적인 기술인 addEventLister와 익명 함수에 초점을 맞출 것입니다addEventListener가 모든 이벤트에서 작동하고, 이벤트 이름을 파라미터로 줄 수 있기 때문에 가장 유연합니다 일반적인 이벤트\n응용 프로그램을 만들 때 수신할 수 있는 dozens of events가 있습니다 기본적으로 사용자가 페이지에서 수행하는 모든 작업은 이벤트를 발생시키므로, 원하는 경험으로 많은 도움을 줍니다 다행스럽게, 일반적인 이벤트만 필요합니다",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18971,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 395,
    "chunk_index": 2,
    "total_chunks": 18
  },
  {
    "id": "a13462a64943b6f74d64207bb3cf136c",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "충분합니다 익명 함수를 사용하거나, 이름을 지어 만들 수 있습니다 click 속성을 설정하거나, addEventListener를 사용하는 등 다양한 단축으로 쓸 수 있습니다 이 강의에서는 웹 개발자가 사용하는 가장 일반적인 기술인 addEventLister와 익명 함수에 초점을 맞출 것입니다addEventListener가 모든 이벤트에서 작동하고, 이벤트 이름을 파라미터로 줄 수 있기 때문에 가장 유연합니다 일반적인 이벤트 응용 프로그램을 만들 때 수신할 수 있는 dozens of events가 있습니다 기본적으로 사용자가 페이지에서 수행하는 모든 작업은 이벤트를 발생시키므로, 원하는 경험으로 많은 도움을 줍니다 다행스럽게, 일반적인 이벤트만 필요합니다다음은 일반적 몇가지입니다 (게임을 만들 때 사용할 두 가지를 포함합니다):\nclick: 사용자가 버튼 또는 하이퍼링크와 같은 무언가를 클릭했습니다\ncontextmenu: 사용자가 우측 마우스 버튼을 클릭했습니다\nselect: 사용자가 어떤 텍스트를 강조했습니다\ninput: 사용자가 어떤 텍스트를 입력했습니다\n게임 만들기\nJavaScript에서 이벤트가 작동하는 게임을 만들 것입니다 이 게임은 모든 개발자가 가질 과소평가된 기술 중 하나인, 타이핑 스킬을 검증합니다 모두 타이핑 연습을 합시다",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18971,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 456,
    "chunk_index": 3,
    "total_chunks": 18
  },
  {
    "id": "700b879aaa4fbdb504456ad3c086e0e0",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "events가 있습니다 기본적으로 사용자가 페이지에서 수행하는 모든 작업은 이벤트를 발생시키므로, 원하는 경험으로 많은 도움을 줍니다 다행스럽게, 일반적인 이벤트만 필요합니다다음은 일반적 몇가지입니다 (게임을 만들 때 사용할 두 가지를 포함합니다): click: 사용자가 버튼 또는 하이퍼링크와 같은 무언가를 클릭했습니다 contextmenu: 사용자가 우측 마우스 버튼을 클릭했습니다 select: 사용자가 어떤 텍스트를 강조했습니다 input: 사용자가 어떤 텍스트를 입력했습니다 게임 만들기 JavaScript에서 이벤트가 작동하는 게임을 만들 것입니다 이 게임은 모든 개발자가 가질 과소평가된 기술 중 하나인, 타이핑 스킬을 검증합니다 모두 타이핑 연습을 합시다게임의 일반적인 흐름은 다음과 같습니다:\n플레이어가 시작 버튼을 누르면 입력할 인용문이 표시됩니다\n플레이어는 텍스트박스에 빨리 인용문을 입력합니다\n각 단어가 완성되면, 다음 단어가 강조됩니다\n플레이어가 오타를 낸 경우에는, 텍스트박스가 빨간색으로 갱신됩니다\n플레이어가 인용문을 완료하면, 경과된 시간과 함께 성공 메시지가 출력됩니다\n게임을 제작하고, 이벤트에 대하여 배우겠습니다 파일 구조\n총 3개의 파일이 필요합니다: index",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18971,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 4,
    "total_chunks": 18
  },
  {
    "id": "d0355377a6ce2cd05ef89271a28894db",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "텍스트를 입력했습니다 게임 만들기 JavaScript에서 이벤트가 작동하는 게임을 만들 것입니다 이 게임은 모든 개발자가 가질 과소평가된 기술 중 하나인, 타이핑 스킬을 검증합니다 모두 타이핑 연습을 합시다게임의 일반적인 흐름은 다음과 같습니다: 플레이어가 시작 버튼을 누르면 입력할 인용문이 표시됩니다 플레이어는 텍스트박스에 빨리 인용문을 입력합니다 각 단어가 완성되면, 다음 단어가 강조됩니다 플레이어가 오타를 낸 경우에는, 텍스트박스가 빨간색으로 갱신됩니다 플레이어가 인용문을 완료하면, 경과된 시간과 함께 성공 메시지가 출력됩니다 게임을 제작하고, 이벤트에 대하여 배우겠습니다 파일 구조 총 3개의 파일이 필요합니다: indexhtml, script js 그리고 style css 더 편하게 살 수 있게 만들 수 있는 설정부터 시작하겠습니다 콘솔 혹은 터미널 창을 열고 아래 명령을 수행하여 작업할 새로운 폴더를 만듭니다:\n```bash\nLinux or macOS\nmkdir typing-game && cd typing-game\nWindows\nmd typing-game && cd typing game\n```\nVisual Studio Code를 엽니다\nbash\ncode 다음 이름으로 Visual Studio Code의 폴더에 세 개의 파일을 추가합니다:\nindex html\nscript js\nstyle css\n사용자 인터페이스 만들기\n요구사항을 찾아보면, HTML 페이지에 몇 요소가 필요하다는 점을 알 수 있습니다",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18971,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 5,
    "total_chunks": 18
  },
  {
    "id": "9121e92f4a92b6e681cc13e8263fd9eb",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "css 더 편하게 살 수 있게 만들 수 있는 설정부터 시작하겠습니다 콘솔 혹은 터미널 창을 열고 아래 명령을 수행하여 작업할 새로운 폴더를 만듭니다: ```bash Linux or macOS mkdir typing-game && cd typing-game Windows md typing-game && cd typing game ``` Visual Studio Code를 엽니다 bash code 다음 이름으로 Visual Studio Code의 폴더에 세 개의 파일을 추가합니다: index html script js style css 사용자 인터페이스 만들기 요구사항을 찾아보면, HTML 페이지에 몇 요소가 필요하다는 점을 알 수 있습니다레시피처럼, 재료가 필요합니다:\n사용자가 입력할 인용문을 출력할 위치\n성공 메시지 같은, 메시지를 출력할 위치\n입력할 텍스트박스\n시작 버튼\n각자 JavaScript에서 작업할 수 있게 ID가 필요합니다 만드려는 CSS 및 JavaScript 파일에 대한 참조를 추가합니다 index html라고 이름지은 새로운 파일을 만듭니다 아래 HTML을 추가합니다:\n```html\nTyping game\nTyping game Practice your typing skills with a quote from Sherlock Holmes Click **start** to begin Start\n```\n애플리케이션 시작하기\n어떻게 될 지 자주 보면서 개발하는 것이 가장 좋습니다 애플리케이션을 시작합니다 로컬로 애플리케이션을 호스팅하고 저장할 때마다 브라우저를 새로 고칠 Live Server라는 멋진 Visual Studio Code 확장이 있습니다",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18971,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 442,
    "chunk_index": 6,
    "total_chunks": 18
  },
  {
    "id": "94cc61f19efa0248df8bb697badcc0df",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "시작 버튼 각자 JavaScript에서 작업할 수 있게 ID가 필요합니다 만드려는 CSS 및 JavaScript 파일에 대한 참조를 추가합니다 index html라고 이름지은 새로운 파일을 만듭니다 아래 HTML을 추가합니다: ```html Typing game Typing game Practice your typing skills with a quote from Sherlock Holmes Click **start** to begin Start ``` 애플리케이션 시작하기 어떻게 될 지 자주 보면서 개발하는 것이 가장 좋습니다 애플리케이션을 시작합니다 로컬로 애플리케이션을 호스팅하고 저장할 때마다 브라우저를 새로 고칠 Live Server라는 멋진 Visual Studio Code 확장이 있습니다링크 따라 Install 클릭하여 Live Server를 설치합니다\n브라우저에서 Visual Studio Code를 열면, Visual Studio Code에서 설치를 수행하라는 메시지가 출력됩니다\n메시지가 출력되면 Visual Studio Code를 다시 시작합니다\n설치되면, Visual Studio Code에서, Ctl-Shift-P (혹은 Cmd-Shift-P)를 클릭하여 command pallate을 엽니다\nLive Server: Open with Live Server를 입력합니다\nLive Server가 애플리케이션 호스팅을 시작합니다\n브라우저를 열고 https://localhost:5500으로 이동합니다\n이제 만들었던 페이지를 볼 수 있습니다 몇 가지 기능을 추가하겠습니다 CSS 추가하기\nHTML이 만들어지면, 핵심 스타일링을 위한 CSS를 추가합니다 플레이어가 입력할 단어를 강조하고, 입력한 내용이 잘못된 경우에는 텍스트박스에 색칠합니다 두 클래스로 진행합니다 style css라는 새 파일을 만들고 다음 구문을 추가합니다 ```css\n/ inside style css /",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18971,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 7,
    "total_chunks": 18
  },
  {
    "id": "e7d23e702fbd6ae3e7c48d4e7835d966",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "Code를 다시 시작합니다 설치되면, Visual Studio Code에서, Ctl-Shift-P (혹은 Cmd-Shift-P)를 클릭하여 command pallate을 엽니다 Live Server: Open with Live Server를 입력합니다 Live Server가 애플리케이션 호스팅을 시작합니다 브라우저를 열고 https://localhost:5500으로 이동합니다 이제 만들었던 페이지를 볼 수 있습니다 몇 가지 기능을 추가하겠습니다 CSS 추가하기 HTML이 만들어지면, 핵심 스타일링을 위한 CSS를 추가합니다 플레이어가 입력할 단어를 강조하고, 입력한 내용이 잘못된 경우에는 텍스트박스에 색칠합니다 두 클래스로 진행합니다 style css라는 새 파일을 만들고 다음 구문을 추가합니다 ```css / inside style css /highlight {\nbackground-color: yellow;\n} error {\nbackground-color: lightcoral;\nborder: red;\n}\n```\n✅ CSS는 원하는대로 페이지를 레이아웃할 수 있습니다 잠시 시간을 내서 페이지를 더 매력적으로 보일 수 있게 만들어 봅시다:\n다른 글꼴 선택\n헤더 색칠\n아이템 크기 조정\nJavaScript\nUI가 만들어졌으므로, 이제 로직을 제공할 JavaScript에 집중해야 합니다 몇 단계로 나눌 것입니다:\nCreate the constants\nEvent listener to start the game\nEvent listener to typing\n하지만 먼저, script js라고 이름지은 새로운 파일을 생성합니다 상수 추가하기\n좀 더 편하게 살도록 프로그래밍할 수 있는 몇 가지 아이템이 필요합니다",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18971,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 8,
    "total_chunks": 18
  },
  {
    "id": "78e6e09bad1c3910ffd9536157534957",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "red; } ``` ✅ CSS는 원하는대로 페이지를 레이아웃할 수 있습니다 잠시 시간을 내서 페이지를 더 매력적으로 보일 수 있게 만들어 봅시다: 다른 글꼴 선택 헤더 색칠 아이템 크기 조정 JavaScript UI가 만들어졌으므로, 이제 로직을 제공할 JavaScript에 집중해야 합니다 몇 단계로 나눌 것입니다: Create the constants Event listener to start the game Event listener to typing 하지만 먼저, script js라고 이름지은 새로운 파일을 생성합니다 상수 추가하기 좀 더 편하게 살도록 프로그래밍할 수 있는 몇 가지 아이템이 필요합니다다시, 레시피와 비슷하게, 아래와 같은 것이 필요합니다:\n모든 인용문 목록이 들어있는 배열\n현재 인용문에 대한 모든 단어를 저장할 빈 배열\n플레이어가 현재 입력하고 있는 단어를 색인한 저장 공간\n플레이어가 시작을 누른 시간\nUI 요소에 대한 참조도 필요합니다:\n텍스트박스 (typed-value)\n인용문 출력 (quote)\n메시지 (message)\njavascript\n// inside script js\n// all of our quotes\nconst quotes = [\n'When you have eliminated the impossible, whatever remains, however improbable, must be the truth ',\n'There is nothing more deceptive than an obvious fact ',\n'I ought to know by this time that when a fact appears to be opposed to a long train of deductions it invariably proves to be capable of bearing some other interpretation ',\n'I never make exceptions An exception disproves the rule ',\n'What one man can invent another can discover ',\n'Nothing clears up a case so much as stating it to another person ',\n'Education never ends, Watson It is a series of lessons, with the greatest for the last",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18971,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 9,
    "total_chunks": 18
  },
  {
    "id": "419fe5e7673a210dff9361f4cdd07bea",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "time that when a fact appears to be opposed to a long train of deductions it invariably proves to be capable of bearing some other interpretation ', 'I never make exceptions An exception disproves the rule ', 'What one man can invent another can discover ', 'Nothing clears up a case so much as stating it to another person ', 'Education never ends, Watson It is a series of lessons, with the greatest for the last',\n];\n// store the list of words and the index of the word the player is currently typing\nlet words = [];\nlet wordIndex = 0;\n// the starting time\nlet startTime = Date now();\n// page elements\nconst quoteElement = document getElementById('quote');\nconst messageElement = document getElementById('message');\nconst typedValueElement = document getElementById('typed-value');\n✅ 계속 게임에 더 많은 인용문을 추가합니다\nNOTE: document getElementById로 원할 때마다 코드에서 요소를 찾을 수 있습니다 이러한 요소를 계속 참조할 예정이기 때문에 문자열 리터럴로 상수를 만들어 오타를 내지 않을 것입니다 Vue js 혹은 React와 같은 프레임워크를 사용하면 코드를 centralizing으로 관리할 수 있습니다 잠시 시간을 내서 const, let 그리고 var 사용하는 방법에 대한 영상을 봅니다 변수에 대한 영상을 보려면 위의 이미지를 누릅니다 시작 로직 추가하기\n게임을 시작하려면, 플레이어가 시작을 누릅니다 물론, 언제 시작을 누를지 알 수 없습니다 여기에서 이벤트 리스너가 작동됩니다 이벤트 리스너를 사용하면 (이벤트) 발생을 수신하고 응답해서 코드를 실행할 수 있습니다 해당 케이스의 경우에는, 사용자가 시작을 누를 때 코드를 실행하려 합니다",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18971,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 10,
    "total_chunks": 18
  },
  {
    "id": "6b6bfba8171c9839796076dc8597f7f2",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "만들어 오타를 내지 않을 것입니다 Vue js 혹은 React와 같은 프레임워크를 사용하면 코드를 centralizing으로 관리할 수 있습니다 잠시 시간을 내서 const, let 그리고 var 사용하는 방법에 대한 영상을 봅니다 변수에 대한 영상을 보려면 위의 이미지를 누릅니다 시작 로직 추가하기 게임을 시작하려면, 플레이어가 시작을 누릅니다 물론, 언제 시작을 누를지 알 수 없습니다 여기에서 이벤트 리스너가 작동됩니다 이벤트 리스너를 사용하면 (이벤트) 발생을 수신하고 응답해서 코드를 실행할 수 있습니다 해당 케이스의 경우에는, 사용자가 시작을 누를 때 코드를 실행하려 합니다사용자가 start을 누르면, 인용문을 선택하고, 사용자 인터페이스를 설정하며, 현재 단어와 제한 시간를 추적해야 합니다 다음은 추가해야 할 JavaScript 입니다 스크립트 블록 바로 뒤에 적습니다 ```javascript\n// at the end of script js\ndocument getElementById('start') addEventListener('click', () => {\n// get a quote\nconst quoteIndex = Math floor(Math random() * quotes length);\nconst quote = quotes[quoteIndex];\n// Put the quote into an array of words\nwords = quote split(' ');\n// reset the word index for tracking\nwordIndex = 0;\n// UI updates\n// Create an array of span elements so we can set a class\nconst spanWords = words map(function(word) { return <span>${word} </span>});\n// Convert into string and set as innerHTML on quote display\nquoteElement innerHTML = spanWords join('');\n// Highlight the first word\nquoteElement childNodes[0] className = 'highlight';\n// Clear any prior messages\nmessageElement innerText = '';\n// Setup the textbox\n// Clear the textbox\ntypedValueElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18971,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 11,
    "total_chunks": 18
  },
  {
    "id": "8b0750364022c13c8041d968d8b38ecb",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "word index for tracking wordIndex = 0; // UI updates // Create an array of span elements so we can set a class const spanWords = words map(function(word) { return <span>${word} </span>}); // Convert into string and set as innerHTML on quote display quoteElement innerHTML = spanWords join(''); // Highlight the first word quoteElement childNodes[0] className = 'highlight'; // Clear any prior messages messageElement innerText = ''; // Setup the textbox // Clear the textbox typedValueElementvalue = '';\n// set focus\ntypedValueElement focus();\n// set the event handler\n// Start the timer\nstartTime = new Date() getTime();\n});\n```\n코드를 나누어 봅니다 단어를 추적하도록 설정합니다\nMath floor과 Math random을 사용하면 quotes 배열에서 인용문을 무작위로 선택할 수 있습니다\n플레이어가 현재 입력하고 있는 단어를 추적할 수 있도록 quote를 words 배열로 변환합니다\n플레이어는 첫번째 단어부터 시작하므로, wordIndex는 0으로 설정합니다\nUI를 설정합니다\nspan 요소 안에 각 단어를 포함하고 있는, spanWords 배열을 만듭니다\n화면에서 단어를 강조하여 출력할 수 있습니다\n배열을 join하여 quoteElement의 innerHTML로 갱신할 때 사용할 문자열을 만듭니다\n플레이어에게 인용문을 출력합니다\n첫 번째 span 요소의 className을 highlight로 설정하여 노란색을 강조합니다\ninnerText를 ''로 설정하여 messageElement로 정리합니다\n텍스트박스를 설정합니다\ntypedValueElement의 현재 value를 지웁니다\nfocus를 typedValueElement로 설정합니다\ngetTime로 호출하여 타이머를 시작합니다\n타이핑 로직 추가하기\n플레이어는 입력을 하면, input 이벤트가 발생됩니다",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18971,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 12,
    "total_chunks": 18
  },
  {
    "id": "25f2c51a6bac4ee58510fbf67bef8aab",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "words 배열로 변환합니다 플레이어는 첫번째 단어부터 시작하므로, wordIndex는 0으로 설정합니다 UI를 설정합니다 span 요소 안에 각 단어를 포함하고 있는, spanWords 배열을 만듭니다 화면에서 단어를 강조하여 출력할 수 있습니다 배열을 join하여 quoteElement의 innerHTML로 갱신할 때 사용할 문자열을 만듭니다 플레이어에게 인용문을 출력합니다 첫 번째 span 요소의 className을 highlight로 설정하여 노란색을 강조합니다 innerText를 ''로 설정하여 messageElement로 정리합니다 텍스트박스를 설정합니다 typedValueElement의 현재 value를 지웁니다 focus를 typedValueElement로 설정합니다 getTime로 호출하여 타이머를 시작합니다 타이핑 로직 추가하기 플레이어는 입력을 하면, input 이벤트가 발생됩니다이 이벤트 리스너는 플레이어가 단어를 잘 입력하고 있는지 확인하고, 게임의 현재 상태를 제어합니다 script js로 돌아가서, 마지막에 아래 코드를 추가합니다 나중에 나누어 볼 것입니다 ```javascript\n// at the end of script js\ntypedValueElement addEventListener('input', () => {\n// Get the current word\nconst currentWord = words[wordIndex];\n// get the current value\nconst typedValue = typedValueElement value;\nif (typedValue === currentWord && wordIndex === words length - 1) {\n// end of sentence\n// Display success\nconst elapsedTime = new Date() getTime() - startTime;\nconst message = CONGRATULATIONS You finished in ${elapsedTime / 1000} seconds ;\nmessageElement innerText = message;\n} else if (typedValue endsWith(' ') && typedValue trim() === currentWord) {\n// end of word\n// clear the typedValueElement for the new word\ntypedValueElement value = '';\n// move to the next word\nwordIndex++;\n// reset the class name for all elements in quote\nfor (const wordElement of quoteElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18971,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 13,
    "total_chunks": 18
  },
  {
    "id": "4d5be28861eb8e46e0d05a7f63c856c2",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "Display success const elapsedTime = new Date() getTime() - startTime; const message = CONGRATULATIONS You finished in ${elapsedTime / 1000} seconds ; messageElement innerText = message; } else if (typedValue endsWith(' ') && typedValue trim() === currentWord) { // end of word // clear the typedValueElement for the new word typedValueElement value = ''; // move to the next word wordIndex++; // reset the class name for all elements in quote for (const wordElement of quoteElementchildNodes) {\nwordElement className = '';\n}\n// highlight the new word\nquoteElement childNodes[wordIndex] className = 'highlight';\n} else if (currentWord startsWith(typedValue)) {\n// currently correct\n// highlight the next word\ntypedValueElement className = '';\n} else {\n// error state\ntypedValueElement className = 'error';\n}\n});\n```\n코드를 나누어 봅니다 현재 단어와 플레이어가 지금까지 입력한 값들을 알아가는 것으로 시작합니다 waterfall 로직으로서, 인용문과 단어가 온전한지, 단어가 올바른지, 혹은 (마지막으로) 오류가 있는지 확인합니다",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18971,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 279,
    "chunk_index": 14,
    "total_chunks": 18
  },
  {
    "id": "df291ce08e852f8582015b4be7adcfec",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "for (const wordElement of quoteElementchildNodes) { wordElement className = ''; } // highlight the new word quoteElement childNodes[wordIndex] className = 'highlight'; } else if (currentWord startsWith(typedValue)) { // currently correct // highlight the next word typedValueElement className = ''; } else { // error state typedValueElement className = 'error'; } }); ``` 코드를 나누어 봅니다 현재 단어와 플레이어가 지금까지 입력한 값들을 알아가는 것으로 시작합니다 waterfall 로직으로서, 인용문과 단어가 온전한지, 단어가 올바른지, 혹은 (마지막으로) 오류가 있는지 확인합니다인용문이 완성되었습니다, typedValue는 currentWord와 같고, wordIndex는 words의 length보다 하나 정도 적습니다\n현재 시간에서 startTime을 빼서 elapsedTime을 계산합니다\nelapsedTime을 1,000으로 나누어 밀리 초에서 초로 변환합니다\n성공 메시지 출력합니다\n단어가 완성되었습니다, 공백(단어의 끝)으로 끝나는 typedValue와 currentWord같은 typedValue로 출력합니다\ntypedElement의 value를 ''로 설정하여 다음 단어를 입력할 수 있습니다\nwordIndex를 증가시켜서 다음 단어로 이동합니다\nquoteElement의 모든 childNodes를 반복하여 className을 ''로 설정해서 기본적으로 출력되는 것으로 되돌립니다\n현재 단어의 className을 highlight로 설정하여 입력할 다음 단어를 플래그로 지정합니다\n단어가 현재 올바르게 입력되었지만 (완전하지 않습니다), typedValue로 시작된 currentWord를 출력합니다\nclassName을 지워서 typedValueElement가 기본적으로 출력되는지 확인합니다\n여기까지 도달해보면, 오류가 존재합니다\ntypedValueElement의 className을 error로 설정합니다\n애플리케이션 테스트하기\n마지막까지 진행했습니다",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18971,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 531,
    "chunk_index": 15,
    "total_chunks": 18
  },
  {
    "id": "f2b0ed069dbdc3b144e6ff5453adc895",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "변환합니다 성공 메시지 출력합니다 단어가 완성되었습니다, 공백(단어의 끝)으로 끝나는 typedValue와 currentWord같은 typedValue로 출력합니다 typedElement의 value를 ''로 설정하여 다음 단어를 입력할 수 있습니다 wordIndex를 증가시켜서 다음 단어로 이동합니다 quoteElement의 모든 childNodes를 반복하여 className을 ''로 설정해서 기본적으로 출력되는 것으로 되돌립니다 현재 단어의 className을 highlight로 설정하여 입력할 다음 단어를 플래그로 지정합니다 단어가 현재 올바르게 입력되었지만 (완전하지 않습니다), typedValue로 시작된 currentWord를 출력합니다 className을 지워서 typedValueElement가 기본적으로 출력되는지 확인합니다 여기까지 도달해보면, 오류가 존재합니다 typedValueElement의 className을 error로 설정합니다 애플리케이션 테스트하기 마지막까지 진행했습니다마지막 단계는 애플리케이션이 작동되는지 확인합니다 한번 해보시기 바랍니다 오류가 있어도 걱정하지 마세요; 모든 개발자는 오류를 경험합니다 메시지를 확인하고 필요하면 디버그합니다 start를 클릭하고, 바로 입력합니다 전에 본 애니메이션과 약간 비슷해보입니다",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18971,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 388,
    "chunk_index": 16,
    "total_chunks": 18
  },
  {
    "id": "c6b65e5b992165c9ac70e106e8ccb1e8",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "모든 childNodes를 반복하여 className을 ''로 설정해서 기본적으로 출력되는 것으로 되돌립니다 현재 단어의 className을 highlight로 설정하여 입력할 다음 단어를 플래그로 지정합니다 단어가 현재 올바르게 입력되었지만 (완전하지 않습니다), typedValue로 시작된 currentWord를 출력합니다 className을 지워서 typedValueElement가 기본적으로 출력되는지 확인합니다 여기까지 도달해보면, 오류가 존재합니다 typedValueElement의 className을 error로 설정합니다 애플리케이션 테스트하기 마지막까지 진행했습니다마지막 단계는 애플리케이션이 작동되는지 확인합니다 한번 해보시기 바랍니다 오류가 있어도 걱정하지 마세요; 모든 개발자는 오류를 경험합니다 메시지를 확인하고 필요하면 디버그합니다 start를 클릭하고, 바로 입력합니다 전에 본 애니메이션과 약간 비슷해보입니다🚀 도전\n더 많은 기능을 추가해봅니다\n완성할 때 input 이벤트 리스너를 끄고, 버튼을 클릭하면 다시 키기\n플레이어가 인용문을 다 작성하면 텍스트박스 끄기\n성공 메시지와 함께 다이얼로그 박스 출력하기\nlocalStorage를 사용하여 고득점 저장하기\n강의 후 퀴즈\nPost-lecture quiz\n리뷰 & 자기주도 학습\n웹 브라우저를 통해 all the events available to the developer를 읽고, 각 이벤트를 사용할 시나리오를 고려합니다 과제\nCreate a new keyboard game",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18971,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 17,
    "total_chunks": 18
  },
  {
    "id": "f5849783f9fd62f4314ba380bd07f19c",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ms.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "Membuat permainan menggunakan acara (events)\nKuiz Pra Kuliah\nKuiz Pra Kuliah\nPengaturcaraan berdasarkan acara\nSemasa membuat aplikasi berasaskan penyemak imbas, kami menyediakan antara muka pengguna grafik (GUI) untuk pengguna gunakan ketika berinteraksi dengan apa yang telah kami buat Cara paling biasa untuk berinteraksi dengan penyemak imbas adalah dengan mengklik dan menaip pelbagai elemen Cabaran yang kita hadapi sebagai pembangun adalah kita tidak tahu kapan mereka akan melakukan operasi ini Pengaturcaraan berdasarkan acara adalah nama untuk jenis pengaturcaraan yang perlu kita lakukan untuk membuat GUI kita Sekiranya kita memecahkan frasa ini sedikit, kita akan melihat kata intinya di sini adalah event Event, menurut Merriam-Webster, didefinisikan sebagai \"sesuatu yang berlaku\" Ini menggambarkan keadaan kita dengan sempurna Kami tahu ada sesuatu yang akan berlaku dan kami ingin melaksanakan beberapa kod sebagai tindak balas, tetapi kami tidak tahu kapan ia akan berlaku Cara kita menandakan bahagian kod yang ingin kita laksanakan adalah dengan membuat fungsi Apabila kita memikirkan pengaturcaraan prosedural, fungsi dipanggil dalam urutan tertentu Perkara yang sama akan berlaku dengan pengaturcaraan berdasarkan acara Perbezaannya adalah bagaimana fungsi akan dipanggil Untuk menangani acara (klik butang, menaip, dll ), Kami mendaftarkan pendengar acara Pendengar peristiwa adalah fungsi yang mendengarkan peristiwa yang berlaku dan dilaksanakan sebagai tindak balas Pendengar acara boleh mengemas kini UI, membuat panggilan ke pelayan, atau apa sahaja yang perlu dilakukan sebagai tindak balas terhadap tindakan pengguna Kami menambahkan pendengar acara dengan menggunakan addEventListener, dan menyediakan fungsi untuk dilaksanakan",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18308,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ms.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 0,
    "total_chunks": 13
  },
  {
    "id": "0485d3f1cdebeba40b2d112ea2cb1b66",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ms.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "tertentu Perkara yang sama akan berlaku dengan pengaturcaraan berdasarkan acara Perbezaannya adalah bagaimana fungsi akan dipanggil Untuk menangani acara (klik butang, menaip, dll ), Kami mendaftarkan pendengar acara Pendengar peristiwa adalah fungsi yang mendengarkan peristiwa yang berlaku dan dilaksanakan sebagai tindak balas Pendengar acara boleh mengemas kini UI, membuat panggilan ke pelayan, atau apa sahaja yang perlu dilakukan sebagai tindak balas terhadap tindakan pengguna Kami menambahkan pendengar acara dengan menggunakan addEventListener, dan menyediakan fungsi untuk dilaksanakanCATATAN: Perlu dinyatakan bahawa terdapat banyak cara untuk membuat pendengar acara Anda boleh menggunakan fungsi tanpa nama, atau membuat fungsi yang dinamakan Anda boleh menggunakan pelbagai jalan pintas, seperti menetapkan sifat klik, atau menggunakanaddEventListener Dalam latihan kami, kami akan menumpukan pada fungsi addEventLister dan anonim, kerana mungkin teknik yang paling biasa digunakan oleh pembangun web Ini juga paling fleksibel, kerana addEventListener berfungsi untuk semua acara, dan nama acara dapat diberikan sebagai parameter Acara biasa\nTerdapat puluhan acara yang tersedia untuk anda dengarkan semasa membuat aplikasi Pada asasnya apa sahaja yang dilakukan pengguna pada halaman menimbulkan peristiwa, yang memberi anda banyak kekuatan untuk memastikan mereka mendapat pengalaman yang anda inginkan Nasib baik, anda biasanya hanya memerlukan sebilangan kecil acara",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18308,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ms.md",
      "source_type": "git_repo"
    },
    "token_count": 396,
    "chunk_index": 1,
    "total_chunks": 13
  },
  {
    "id": "bb6ab7d0e4da4f07c19ef95ef48154ea",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ms.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "addEventLister dan anonim, kerana mungkin teknik yang paling biasa digunakan oleh pembangun web Ini juga paling fleksibel, kerana addEventListener berfungsi untuk semua acara, dan nama acara dapat diberikan sebagai parameter Acara biasa Terdapat puluhan acara yang tersedia untuk anda dengarkan semasa membuat aplikasi Pada asasnya apa sahaja yang dilakukan pengguna pada halaman menimbulkan peristiwa, yang memberi anda banyak kekuatan untuk memastikan mereka mendapat pengalaman yang anda inginkan Nasib baik, anda biasanya hanya memerlukan sebilangan kecil acaraBerikut adalah beberapa perkara biasa (termasuk dua yang akan kami gunakan semasa membuat permainan kami):\nclick: Pengguna mengklik sesuatu, biasanya butang atau hyperlink\ncontextmenu: Pengguna mengklik butang tetikus kanan\nselect: Pengguna menyoroti beberapa teks\ninput: Pengguna memasukkan beberapa teks\nMembuat permainan\nKami akan membuat permainan untuk meneroka bagaimana acara berfungsi dalam JavaScript Permainan kami akan menguji kemahiran menaip pemain, yang merupakan salah satu kemahiran paling rendah yang harus dimiliki oleh pemaju Kita semua mesti berlatih menaip kita Aliran umum permainan akan kelihatan seperti ini:\nPemain mengklik butang mula dan disertakan dengan petikan untuk menaip\nPemain menaip petikan secepat mungkin di kotak teks\nApabila setiap perkataan selesai, yang berikutnya diserlahkan\nSekiranya pemain mempunyai kesalahan ketik, kotak teks dikemas kini menjadi merah\nApabila pemain menyelesaikan petikan, mesej kejayaan akan dipaparkan dengan masa yang berlalu\nMari membina permainan kami, dan belajar tentang acara Struktur fail\nKami memerlukan tiga jumlah fail: index html, script js dan style css Mari mulakan dengan menetapkannya untuk menjadikan hidup lebih mudah bagi kita",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18308,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ms.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 2,
    "total_chunks": 13
  },
  {
    "id": "4b4ab2c2b6c3cd88e4072c6a57669732",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ms.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "disertakan dengan petikan untuk menaip Pemain menaip petikan secepat mungkin di kotak teks Apabila setiap perkataan selesai, yang berikutnya diserlahkan Sekiranya pemain mempunyai kesalahan ketik, kotak teks dikemas kini menjadi merah Apabila pemain menyelesaikan petikan, mesej kejayaan akan dipaparkan dengan masa yang berlalu Mari membina permainan kami, dan belajar tentang acara Struktur fail Kami memerlukan tiga jumlah fail: index html, script js dan style css Mari mulakan dengan menetapkannya untuk menjadikan hidup lebih mudah bagi kitaBuat folder baru untuk kerja anda dengan membuka tetingkap konsol atau terminal dan mengeluarkan perintah berikut:\n```bash\nLinux or macOS\nmkdir typing-game && cd typing-game\nWindows\nmd typing-game && cd typing-game\n```\nBuka Visual Studio Code\nbash\ncode Tambahkan tiga fail ke folder dalam Visual Studio Code dengan nama berikut:\nindex html\nskrip js\nstyle css\nBuat antara muka pengguna (user interface)\nSekiranya kita meneliti syarat-syaratnya, kita tahu kita akan memerlukan segelintir elemen di halaman HTML kita Ini seperti resipi, di mana kita memerlukan beberapa ramuan:\nDi suatu tempat untuk memaparkan petikan untuk pengguna menaip\nDi suatu tempat untuk memaparkan sebarang mesej, seperti mesej kejayaan\nKotak teks untuk menaip\nButang mula\nMasing-masing memerlukan ID supaya kita dapat bekerja dengannya dalam JavaScript kita Kami juga akan menambahkan rujukan ke fail CSS dan JavaScript yang akan kami buat Buat fail baru bernama index html Tambahkan HTML berikut:\n```html\nTyping game\nTyping game Practice your typing skills with a quote from Sherlock Holmes Click **start** to begin Start\n```\nLancarkan aplikasi\nAdalah lebih baik untuk mengembangkannya secara berulang untuk melihat bagaimana keadaannya Mari melancarkan aplikasi kami",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18308,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ms.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 3,
    "total_chunks": 13
  },
  {
    "id": "c2dad1a3a8f94d4878f856c111c380f1",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ms.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "untuk menaip Butang mula Masing-masing memerlukan ID supaya kita dapat bekerja dengannya dalam JavaScript kita Kami juga akan menambahkan rujukan ke fail CSS dan JavaScript yang akan kami buat Buat fail baru bernama index html Tambahkan HTML berikut: ```html Typing game Typing game Practice your typing skills with a quote from Sherlock Holmes Click **start** to begin Start ``` Lancarkan aplikasi Adalah lebih baik untuk mengembangkannya secara berulang untuk melihat bagaimana keadaannya Mari melancarkan aplikasi kamiTerdapat peluasan hebat untuk Visual Studio Code yang disebut Live Server yang akan menghoskan aplikasi anda secara tempatan dan menyegarkan penyemak imbas setiap kali anda menyimpan Pasang Live Server dengan mengikuti pautan dan mengklik Install\nAnda akan diminta oleh penyemak imbas untuk membuka Kod Visual Studio, dan kemudian oleh Kod Visual Studio untuk melakukan pemasangan\nMulakan semula Kod Visual Studio jika diminta\nSetelah dipasang, dalam Visual Studio Code, klik Ctrl-Shift-P (atau Cmd-Shift-P) untuk membuka perintah pallate\nTaip Pelayan Langsung: Buka dengan Pelayan Langsung\nLive Server akan mula menghoskan aplikasi anda\nBuka penyemak imbas dan arahkan ke https: // localhost: 5500\nAnda kini harus melihat halaman yang anda buat Mari tambahkan beberapa fungsi Tambah CSS\nDengan HTML kami dibuat, mari tambahkan CSS untuk gaya inti Kita perlu mengetengahkan perkataan yang harus ditaip oleh pemain, dan mewarnakan kotak teks jika apa yang mereka taipkan tidak betul Kami akan melakukan ini dengan dua kelas Buat fail baru bernama style css dan tambahkan sintaks berikut ```css\n/ dalam style css / highlight {\nbackground-color: yellow;\n} error {\nbackground-color: lightcoral;\nborder: red;\n}\n```\n✅ Ketika datang ke CSS, anda boleh mengatur halaman anda sesuka hati",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18308,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ms.md",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 4,
    "total_chunks": 13
  },
  {
    "id": "4b7b31fec9edf4450c49f9cd00d4ff12",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ms.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "kami dibuat, mari tambahkan CSS untuk gaya inti Kita perlu mengetengahkan perkataan yang harus ditaip oleh pemain, dan mewarnakan kotak teks jika apa yang mereka taipkan tidak betul Kami akan melakukan ini dengan dua kelas Buat fail baru bernama style css dan tambahkan sintaks berikut ```css / dalam style css / highlight { background-color: yellow; } error { background-color: lightcoral; border: red; } ``` ✅ Ketika datang ke CSS, anda boleh mengatur halaman anda sesuka hatiLuangkan sedikit masa dan buat halaman kelihatan lebih menarik:\nPilih fon yang berbeza\nWarnakan tajuk\nUbah saiz item\nJavaScript\nDengan UI kami dibuat, inilah masanya untuk menumpukan perhatian kami pada JavaScript yang akan memberikan logik Kami akan membahagikannya kepada beberapa langkah:\nBuat pemalar\nPendengar acara untuk memulakan permainan\nPendengar acara untuk menaip\nTetapi pertama, buat fail baru bernama script js Tambahkan pemalar\nKita akan memerlukan beberapa item untuk menjadikan kehidupan kita lebih mudah untuk pengaturcaraan Sekali lagi, serupa dengan resipi, inilah yang kita perlukan:\nSusun dengan senarai semua petikan\nSusunan kosong untuk menyimpan semua perkataan untuk petikan semasa\nRuang untuk menyimpan indeks kata pemain sedang menaip\nMasa pemain mengklik permulaan\nKami juga mahu rujukan ke elemen UI:\nKotak teks (nilai taip)\nPaparan petikan (petikan)\nMesej (mesej)\njavascript\n// dalam script js\n// semua quotes\nconst quotes = [\n'When you have eliminated the impossible, whatever remains, however improbable, must be the truth ',\n'There is nothing more deceptive than an obvious fact ',\n'I ought to know by this time that when a fact appears to be opposed to a long train of deductions it invariably proves to be capable of bearing some other interpretation ',\n'I never make exceptions An exception disproves the rule ',\n'What one man can invent another can discover",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18308,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ms.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 5,
    "total_chunks": 13
  },
  {
    "id": "548dd9d204f01b4fafcc302235353dab",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ms.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "'When you have eliminated the impossible, whatever remains, however improbable, must be the truth ', 'There is nothing more deceptive than an obvious fact ', 'I ought to know by this time that when a fact appears to be opposed to a long train of deductions it invariably proves to be capable of bearing some other interpretation ', 'I never make exceptions An exception disproves the rule ', 'What one man can invent another can discover',\n'Nothing clears up a case so much as stating it to another person ',\n'Education never ends, Watson It is a series of lessons, with the greatest for the last ',\n];\n// simpan senarai perkataan dan indeks perkataan yang sedang ditaip pemain\nlet words = [];\nlet wordIndex = 0;\n// masa permulaan\nlet startTime = Date now();\n// elemen halaman\nconst quoteElement = document getElementById('quote');\nconst messageElement = document getElementById('message');\nconst typedValueElement = document getElementById('typed-value');\n✅ Teruskan dan tambahkan lebih banyak petikan ke permainan anda\n** CATATAN: ** Kami dapat mengambil elemen bila-bila masa yang kami mahukan dalam kod dengan menggunakan document getElementById Oleh kerana hakikatnya kita akan merujuk unsur-unsur ini secara berkala, kita akan mengelakkan kesalahan ketik dengan literal string dengan menggunakan pemalar Rangka kerja seperti Vue js atau React dapat membantu anda menguruskan pemusatan kod anda dengan lebih baik Luangkan masa sebentar untuk menonton video menggunakan const,let dan var\nKlik gambar di atas untuk video mengenai pemboleh ubah Tambahkan Logik\nUntuk memulakan permainan, pemain akan mengklik pada permulaan Sudah tentu, kita tidak tahu kapan mereka akan mula klik Di sinilah seorang pendengar acara mula bermain Pendengar acara akan membolehkan kita mendengar sesuatu yang berlaku (suatu peristiwa) dan melaksanakan kod sebagai tindak balas Dalam kes kami, kami ingin melaksanakan kod ketika pengguna mengklik pada permulaan",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18308,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ms.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 6,
    "total_chunks": 13
  },
  {
    "id": "c9c88e222b86a2c3e2bd22b66f1bd75b",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ms.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "baik Luangkan masa sebentar untuk menonton video menggunakan const,let dan var Klik gambar di atas untuk video mengenai pemboleh ubah Tambahkan Logik Untuk memulakan permainan, pemain akan mengklik pada permulaan Sudah tentu, kita tidak tahu kapan mereka akan mula klik Di sinilah seorang pendengar acara mula bermain Pendengar acara akan membolehkan kita mendengar sesuatu yang berlaku (suatu peristiwa) dan melaksanakan kod sebagai tindak balas Dalam kes kami, kami ingin melaksanakan kod ketika pengguna mengklik pada permulaanApabila pengguna mengklik start, kita harus memilih sebut harga, menyiapkan antarmuka pengguna, dan penyiapan pelacakan untuk kata dan waktu semasa Berikut adalah JavaScript yang perlu anda tambahkan; kita membincangkannya selepas blok skrip ```javascript\n// pada akhir script js\ndocument getElementById('start') addEventListener('click', () => {\n// dapatkan quote\nconst quoteIndex = Math floor(Math random() * quotes length);\nconst quote = quotes[quoteIndex];\n// Masukkan petikan ke dalam susunan kata\nwords = quote split(' ');\n// tetapkan semula indeks kata untuk penjejakan\nwordIndex = 0;\n// Kemas kini UI\n// Buat susunan elemen span supaya kita dapat mengatur kelas\nconst spanWords = words map(function(word) { return <span>${word} </span>});\n// Tukar menjadi rentetan dan tetapkan sebagai innerHTML pada paparan petikan\nquoteElement innerHTML = spanWords join('');\n// Serlahkan perkataan pertama\nquoteElement childNodes[0] className = 'highlight';\n// Kosongkan sebarang mesej sebelumnya\nmessageElement innerText = '';\n// Sediakan kotak teks\n// Kosongkan kotak teks\ntypedValueElement value = '';\n// Sediakan fokus\ntypedValueElement focus();\n// tetapkan pengendali acara\n// Mulakan pemasa\nstartTime = new Date() getTime();\n});\n```\nMari pecahkan kodnya Siapkan penjejakan perkataan\nMenggunakan Math floor dan Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18308,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ms.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 7,
    "total_chunks": 13
  },
  {
    "id": "6c2c0aa4cbf07630ed50a3c01d2fa400",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ms.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "// Tukar menjadi rentetan dan tetapkan sebagai innerHTML pada paparan petikan quoteElement innerHTML = spanWords join(''); // Serlahkan perkataan pertama quoteElement childNodes[0] className = 'highlight'; // Kosongkan sebarang mesej sebelumnya messageElement innerText = ''; // Sediakan kotak teks // Kosongkan kotak teks typedValueElement value = ''; // Sediakan fokus typedValueElement focus(); // tetapkan pengendali acara // Mulakan pemasa startTime = new Date() getTime(); }); ``` Mari pecahkan kodnya Siapkan penjejakan perkataan Menggunakan Math floor dan Mathrandom membolehkan kita memilih petikan secara rawak dari array quotes\nKami menukar quote 'menjadi array kata` sehingga kami dapat mengesan perkataan yang sedang ditaip pemain\nwordIndex ditetapkan ke 0, kerana pemain akan bermula pada kata pertama\nSediakan UI\nBuat array spanWords, yang berisi setiap kata di dalam elemenspan\nIni akan membolehkan kita menonjolkan perkataan di paparan\njoin array untuk membuat rentetan yang dapat kita gunakan untuk mengemas kiniinnerHTML pada quoteElement\nIni akan memaparkan petikan kepada pemain\nTetapkan className elemenspan pertama ke  highlight untuk menyerlahkannya sebagai kuning\nBersihkan messageElement dengan menetapkan \"innerText\" ke ''\nSediakan kotak teks\nKosongkan nilai semasa ditypedValueElement\nTetapkan fokus ketypedValueElement\nMulakan pemasa dengan memanggil getTime\nTambahkan logik menaip\nSemasa pemain menaip, acara input akan dinaikkan Pendengar acara ini akan memeriksa untuk memastikan pemain menaip perkataan dengan betul, dan mengendalikan status permainan semasa Kembali ke script js, tambahkan kod berikut hingga akhir Kami akan memecahkannya selepas itu ```javascript\n// pada akhir skrip js\ntypedValueElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18308,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ms.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 8,
    "total_chunks": 13
  },
  {
    "id": "362ecbcbb6ccaf341c6bff133f6b2972",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ms.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "ke highlight untuk menyerlahkannya sebagai kuning Bersihkan messageElement dengan menetapkan \"innerText\" ke '' Sediakan kotak teks Kosongkan nilai semasa ditypedValueElement Tetapkan fokus ketypedValueElement Mulakan pemasa dengan memanggil getTime Tambahkan logik menaip Semasa pemain menaip, acara input akan dinaikkan Pendengar acara ini akan memeriksa untuk memastikan pemain menaip perkataan dengan betul, dan mengendalikan status permainan semasa Kembali ke script js, tambahkan kod berikut hingga akhir Kami akan memecahkannya selepas itu ```javascript // pada akhir skrip js typedValueElementaddEventListener('input', () => {\n// Dapatkan perkataan semasa\nconst currentWord = words[wordIndex];\n// dapatkan nilai semasa\nconst typedValue = typedValueElement value;\nif (typedValue === currentWord && wordIndex === words length - 1) {\n// akhir ayat\n// Paparkan kejayaan\nconst elapsedTime = new Date() getTime() - startTime;\nconst message = CONGRATULATIONS You finished in ${elapsedTime / 1000} seconds ;\nmessageElement innerText = message;\n} else if (typedValue endsWith(' ') && typedValue trim() === currentWord) {\n// akhir kata\n// kosongkan typedValueElement untuk perkataan baru\ntypedValueElement value = '';\n// beralih ke perkataan seterusnya\nwordIndex++;\n// tetapkan semula nama kelas untuk semua elemen dalam petikan\nfor (const wordElement of quoteElement childNodes) {\nwordElement className = '';\n}\n// serlahkan perkataan baru\nquoteElement childNodes[wordIndex] className = 'highlight';\n} else if (currentWord startsWith(typedValue)) {\n// betul sekarang\n// serlahkan perkataan seterusnya\ntypedValueElement className = '';\n} else {\n// keadaan ralat\ntypedValueElement className = 'error';\n}\n});\n```\nMari pecahkan kodnya Kami mulakan dengan merebut perkataan semasa dan nilai yang ditaip pemain sejauh ini",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18308,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ms.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 9,
    "total_chunks": 13
  },
  {
    "id": "836666c64b502dd76098191526c05889",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ms.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "tetapkan semula nama kelas untuk semua elemen dalam petikan for (const wordElement of quoteElement childNodes) { wordElement className = ''; } // serlahkan perkataan baru quoteElement childNodes[wordIndex] className = 'highlight'; } else if (currentWord startsWith(typedValue)) { // betul sekarang // serlahkan perkataan seterusnya typedValueElement className = ''; } else { // keadaan ralat typedValueElement className = 'error'; } }); ``` Mari pecahkan kodnya Kami mulakan dengan merebut perkataan semasa dan nilai yang ditaip pemain sejauh iniKemudian kita mempunyai logik air terjun, di mana kita memeriksa apakah petikannya lengkap, kata itu lengkap, kata itu betul, atau (akhirnya), jika ada kesalahan",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18308,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ms.md",
      "source_type": "git_repo"
    },
    "token_count": 188,
    "chunk_index": 10,
    "total_chunks": 13
  },
  {
    "id": "6ad4c17d77d1ff270cf7b0c483c5d4f2",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ms.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "perkataan baru quoteElement childNodes[wordIndex] className = 'highlight'; } else if (currentWord startsWith(typedValue)) { // betul sekarang // serlahkan perkataan seterusnya typedValueElement className = ''; } else { // keadaan ralat typedValueElement className = 'error'; } }); ``` Mari pecahkan kodnya Kami mulakan dengan merebut perkataan semasa dan nilai yang ditaip pemain sejauh iniKemudian kita mempunyai logik air terjun, di mana kita memeriksa apakah petikannya lengkap, kata itu lengkap, kata itu betul, atau (akhirnya), jika ada kesalahanKutipan selesai, ditunjukkan oleh typedValue sama dengancurrentWord, dan wordIndex sama dengan satu yang kurang daripanjang 'kata-kata\nHitung elapsedTime dengan mengurangkanstartTime dari waktu semasa\nBahagikan elapsedTime dengan 1,000 untuk menukar dari milisaat hingga saat\nPaparkan mesej kejayaan\nKata lengkap, ditunjukkan oleh typedValue yang diakhiri dengan spasi (akhir kata) dantypedValue sama dengan currentWord\nTetapkan \"nilai\" pada \"typedElement\" menjadi \"\" untuk membolehkan kata berikutnya ditaip\nKenaikan wordIndex untuk beralih ke kata seterusnya\nGelung semua \"childNodes\" \"quoteElement\" untuk menetapkan \"className\" ke \"\" untuk kembali ke paparan lalai\nTetapkan className dari kata semasa ke` highlight 'untuk menandakannya sebagai kata seterusnya untuk menaip\nWord saat ini ditaip dengan betul (tetapi tidak lengkap), ditunjukkan oleh currentWord yang dimulakan dengantypedValue\nPastikan typedValueElement dipaparkan sebagai lalai dengan membersihkanclassName\nSekiranya kita berjaya sejauh ini, kita mempunyai ralat\nTetapkan className padatypedValueElement ke error\nUji aplikasi anda\nAnda berjaya sampai akhir Langkah terakhir adalah memastikan aplikasi kita berfungsi Cubalah",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18308,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ms.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 11,
    "total_chunks": 13
  },
  {
    "id": "198ff611a451580c79c4aada578743c9",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ms.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "\"childNodes\" \"quoteElement\" untuk menetapkan \"className\" ke \"\" untuk kembali ke paparan lalai Tetapkan className dari kata semasa ke` highlight 'untuk menandakannya sebagai kata seterusnya untuk menaip Word saat ini ditaip dengan betul (tetapi tidak lengkap), ditunjukkan oleh currentWord yang dimulakan dengantypedValue Pastikan typedValueElement dipaparkan sebagai lalai dengan membersihkanclassName Sekiranya kita berjaya sejauh ini, kita mempunyai ralat Tetapkan className padatypedValueElement ke error Uji aplikasi anda Anda berjaya sampai akhir Langkah terakhir adalah memastikan aplikasi kita berfungsi CubalahJangan risau sekiranya terdapat kesilapan; semua pembangun mempunyai kesilapan Teliti mesej dan debug mengikut keperluan Klik start, dan mula menaip Ia semestinya kelihatan seperti animasi yang kita lihat sebelumnya 🚀 Cabaran\nTambahkan lebih banyak fungsi\nLumpuhkan pendengar acara input setelah selesai, dan aktifkan semula apabila butang diklik\nLumpuhkan kotak teks semasa pemain menyelesaikan petikan\nPaparkan kotak dialog mod dengan mesej kejayaan\nSimpan skor tinggi menggunakan localStorage\nKuiz Pasca Kuliah\nKuiz Pasca Kuliah\nMengkaji & Belajar Sendiri\nBacalah semua acara yang ada kepada pembangun melalui penyemak imbas web, dan pertimbangkan senario di mana anda akan menggunakannya Tugasan\nBuat permainan papan kekunci baru",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18308,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ms.md",
      "source_type": "git_repo"
    },
    "token_count": 392,
    "chunk_index": 12,
    "total_chunks": 13
  },
  {
    "id": "bffd2f851ffe1bbc2acefa5ce3d5cc38",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "イベントを使ったゲームの作成\nレッスン前の小テスト\nレッスン前の小テスト\nイベント駆動型プログラミング\nブラウザベースのアプリケーションを作成するとき、私たちは、構築したものと対話するときに使用するグラフィカル・ユーザー・インターフェース (GUI) を提供します。ブラウザと対話する最も一般的な方法は、様々な要素をクリックしたり入力したりすることです。開発者として直面する課題は、ユーザーがこれらの操作をいつ実行するかわからないことです。\nイベント駆動型プログラミングは、GUIを作成するために必要なプログラミングの種類の名前です。このフレーズを少し分解すると、ここでの核となる単語は イベント です。イベントは、Merriam-Webster によると、「何かが起こる」と定義されています。これは私たちの状況を完璧に説明しています。何かが起こりそうで、それに対応してコードを実行したいのですが、それがいつ行われるかはわかりません。\n実行したいコードの節をマークする方法は、関数を作成することです。手続き型プログラミングを考えると、関数は決まった順番で呼び出されます。これはイベント駆動型プログラミングでも同じことが言えそうです。違いは、関数がどのように呼ばれるかということです。\nイベント (ボタンクリックやタイピングなど) を処理するために、イベントリスナー を登録します。イベントリスナーとは、イベントが発生するのを待ち受けて、それに応じて実行する関数のことです。イベントリスナーは、UI を更新したり、サーバーへの呼び出しを行ったり、ユーザーのアクションに反応して実行することができます。addEventListener を使用してイベントリスナーを追加し、実行する関数を提供します。\n注: イベントリスナーを作成する方法は数多くあります。匿名の関数を使うこともできますし、名前付きの関数を作ることもできます。click プロパティを設定したり、addEventListener を使用したりと、様々なショートカットを使用することができます。今回の演習では addEventLister と匿名関数に焦点を当てます。また、addEventListener はすべてのイベントに対して動作し、イベント名をパラメータとして指定できるので、最も柔軟性があります。\n共通イベント\nアプリケーションを作成するときに聞くことができる多数のイベントがあります。基本的に、ユーザーがページ上で何かをするとイベントが発生しますが、これはプレイヤーがあなたの意図した経験を得られるようにするうえで大きな力となります。幸いなことに、通常はほんの一握りのイベントしか必要ありません。ここでは、(ゲームを作成する際に使用する 2 つのイベントを含む) いくつかの一般的なイベントを紹介します:\nclick: ユーザーが何かをクリックした場合、通常はボタンやハイパーリンクをクリックします\ncontextmenu: ユーザーがマウスの右ボタンをクリックした場合\nselect: ユーザーがテキストをハイライトした場合\ninput: ユーザーが何かテキストを入力した場合\nゲームの作成\n私たちは、JavaScript でイベントがどのように機能するかを探求するゲームを作成する予定です。私たちのゲームはプレイヤーのタイピングスキルをテストしますが、これはすべての開発者が持つべき最も過小評価されているスキルの一つです。私たちは皆、タイピングの練習をするべきです",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1316,
    "chunk_index": 0,
    "total_chunks": 48
  },
  {
    "id": "086cb11feacba1bfd960790b25d63fcf",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "イベントを使ったゲームの作成\nレッスン前の小テスト\nレッスン前の小テスト\nイベント駆動型プログラミング\nブラウザベースのアプリケーションを作成するとき、私たちは、構築したものと対話するときに使用するグラフィカル・ユーザー・インターフェース (GUI) を提供します。ブラウザと対話する最も一般的な方法は、様々な要素をクリックしたり入力したりすることです。開発者として直面する課題は、ユーザーがこれらの操作をいつ実行するかわからないことです。\nイベント駆動型プログラミングは、GUIを作成するために必要なプログラミングの種類の名前です。このフレーズを少し分解すると、ここでの核となる単語は イベント です。イベントは、Merriam-Webster によると、「何かが起こる」と定義されています。これは私たちの状況を完璧に説明しています。何かが起こりそうで、それに対応してコードを実行したいのですが、それがいつ行われるかはわかりません。\n実行したいコードの節をマークする方法は、関数を作成することです。手続き型プログラミングを考えると、関数は決まった順番で呼び出されます。これはイベント駆動型プログラミングでも同じことが言えそうです。違いは、関数がどのように呼ばれるかということです。\nイベント (ボタンクリックやタイピングなど) を処理するために、イベントリスナー を登録します。イベントリスナーとは、イベントが発生するのを待ち受けて、それに応じて実行する関数のことです。イベントリスナーは、UI を更新したり、サーバーへの呼び出しを行ったり、ユーザーのアクションに反応して実行することができます。addEventListener を使用してイベントリスナーを追加し、実行する関数を提供します。\n注: イベントリスナーを作成する方法は数多くあります。匿名の関数を使うこともできますし、名前付きの関数を作ることもできます。click プロパティを設定したり、addEventListener を使用したりと、様々なショートカットを使用することができます。今回の演習では addEventLister と匿名関数に焦点を当てます。また、addEventListener はすべてのイベントに対して動作し、イベント名をパラメータとして指定できるので、最も柔軟性があります。\n共通イベント\nアプリケーションを作成するときに聞くことができる多数のイベントがあります。基本的に、ユーザーがページ上で何かをするとイベントが発生しますが、これはプレイヤーがあなたの意図した経験を得られるようにするうえで大きな力となります。幸いなことに、通常はほんの一握りのイベントしか必要ありません。ここでは、(ゲームを作成する際に使用する 2 つのイベントを含む) いくつかの一般的なイベントを紹介します:\nclick: ユーザーが何かをクリックした場合、通常はボタンやハイパーリンクをクリックします\ncontextmenu: ユーザーがマウスの右ボタンをクリックした場合\nselect: ユーザーがテキストをハイライトした場合\ninput: ユーザーが何かテキストを入力した場合\nゲームの作成\n私たちは、JavaScript でイベントがどのように機能するかを探求するゲームを作成する予定です。私たちのゲームはプレイヤーのタイピングスキルをテストしますが、これはすべての開発者が持つべき最も過小評価されているスキルの一つです。私たちは皆、タイピングの練習をするべきですゲームの一般的な流れは以下のようになります。\nプレイヤーがスタートボタンをクリックすると、入力する名言が表示されます\nプレイヤーは、テキストボックスにできるだけ早く名言を入力します\n各単語が完成すると、次の単語が強調表示されます\nプレイヤーにタイプミスがあった場合、テキストボックスが赤に更新されます\n名言が完了すると、経過時間とともに成功メッセージが表示されます\nゲームを作ってイベントを覚えましょう",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1508,
    "chunk_index": 1,
    "total_chunks": 48
  },
  {
    "id": "3ae4777557c3558824046fdbe113a886",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "イベントを使ったゲームの作成\nレッスン前の小テスト\nレッスン前の小テスト\nイベント駆動型プログラミング\nブラウザベースのアプリケーションを作成するとき、私たちは、構築したものと対話するときに使用するグラフィカル・ユーザー・インターフェース (GUI) を提供します。ブラウザと対話する最も一般的な方法は、様々な要素をクリックしたり入力したりすることです。開発者として直面する課題は、ユーザーがこれらの操作をいつ実行するかわからないことです。\nイベント駆動型プログラミングは、GUIを作成するために必要なプログラミングの種類の名前です。このフレーズを少し分解すると、ここでの核となる単語は イベント です。イベントは、Merriam-Webster によると、「何かが起こる」と定義されています。これは私たちの状況を完璧に説明しています。何かが起こりそうで、それに対応してコードを実行したいのですが、それがいつ行われるかはわかりません。\n実行したいコードの節をマークする方法は、関数を作成することです。手続き型プログラミングを考えると、関数は決まった順番で呼び出されます。これはイベント駆動型プログラミングでも同じことが言えそうです。違いは、関数がどのように呼ばれるかということです。\nイベント (ボタンクリックやタイピングなど) を処理するために、イベントリスナー を登録します。イベントリスナーとは、イベントが発生するのを待ち受けて、それに応じて実行する関数のことです。イベントリスナーは、UI を更新したり、サーバーへの呼び出しを行ったり、ユーザーのアクションに反応して実行することができます。addEventListener を使用してイベントリスナーを追加し、実行する関数を提供します。\n注: イベントリスナーを作成する方法は数多くあります。匿名の関数を使うこともできますし、名前付きの関数を作ることもできます。click プロパティを設定したり、addEventListener を使用したりと、様々なショートカットを使用することができます。今回の演習では addEventLister と匿名関数に焦点を当てます。また、addEventListener はすべてのイベントに対して動作し、イベント名をパラメータとして指定できるので、最も柔軟性があります。\n共通イベント\nアプリケーションを作成するときに聞くことができる多数のイベントがあります。基本的に、ユーザーがページ上で何かをするとイベントが発生しますが、これはプレイヤーがあなたの意図した経験を得られるようにするうえで大きな力となります。幸いなことに、通常はほんの一握りのイベントしか必要ありません。ここでは、(ゲームを作成する際に使用する 2 つのイベントを含む) いくつかの一般的なイベントを紹介します:\nclick: ユーザーが何かをクリックした場合、通常はボタンやハイパーリンクをクリックします\ncontextmenu: ユーザーがマウスの右ボタンをクリックした場合\nselect: ユーザーがテキストをハイライトした場合\ninput: ユーザーが何かテキストを入力した場合\nゲームの作成\n私たちは、JavaScript でイベントがどのように機能するかを探求するゲームを作成する予定です。私たちのゲームはプレイヤーのタイピングスキルをテストしますが、これはすべての開発者が持つべき最も過小評価されているスキルの一つです。私たちは皆、タイピングの練習をするべきですゲームの一般的な流れは以下のようになります。\nプレイヤーがスタートボタンをクリックすると、入力する名言が表示されます\nプレイヤーは、テキストボックスにできるだけ早く名言を入力します\n各単語が完成すると、次の単語が強調表示されます\nプレイヤーにタイプミスがあった場合、テキストボックスが赤に更新されます\n名言が完了すると、経過時間とともに成功メッセージが表示されます\nゲームを作ってイベントを覚えましょうファイル構造\nindex",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1518,
    "chunk_index": 2,
    "total_chunks": 48
  },
  {
    "id": "29493067fb95de73c1a1a46e9e133475",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "イベントを使ったゲームの作成\nレッスン前の小テスト\nレッスン前の小テスト\nイベント駆動型プログラミング\nブラウザベースのアプリケーションを作成するとき、私たちは、構築したものと対話するときに使用するグラフィカル・ユーザー・インターフェース (GUI) を提供します。ブラウザと対話する最も一般的な方法は、様々な要素をクリックしたり入力したりすることです。開発者として直面する課題は、ユーザーがこれらの操作をいつ実行するかわからないことです。\nイベント駆動型プログラミングは、GUIを作成するために必要なプログラミングの種類の名前です。このフレーズを少し分解すると、ここでの核となる単語は イベント です。イベントは、Merriam-Webster によると、「何かが起こる」と定義されています。これは私たちの状況を完璧に説明しています。何かが起こりそうで、それに対応してコードを実行したいのですが、それがいつ行われるかはわかりません。\n実行したいコードの節をマークする方法は、関数を作成することです。手続き型プログラミングを考えると、関数は決まった順番で呼び出されます。これはイベント駆動型プログラミングでも同じことが言えそうです。違いは、関数がどのように呼ばれるかということです。\nイベント (ボタンクリックやタイピングなど) を処理するために、イベントリスナー を登録します。イベントリスナーとは、イベントが発生するのを待ち受けて、それに応じて実行する関数のことです。イベントリスナーは、UI を更新したり、サーバーへの呼び出しを行ったり、ユーザーのアクションに反応して実行することができます。addEventListener を使用してイベントリスナーを追加し、実行する関数を提供します。\n注: イベントリスナーを作成する方法は数多くあります。匿名の関数を使うこともできますし、名前付きの関数を作ることもできます。click プロパティを設定したり、addEventListener を使用したりと、様々なショートカットを使用することができます。今回の演習では addEventLister と匿名関数に焦点を当てます。また、addEventListener はすべてのイベントに対して動作し、イベント名をパラメータとして指定できるので、最も柔軟性があります。\n共通イベント\nアプリケーションを作成するときに聞くことができる多数のイベントがあります。基本的に、ユーザーがページ上で何かをするとイベントが発生しますが、これはプレイヤーがあなたの意図した経験を得られるようにするうえで大きな力となります。幸いなことに、通常はほんの一握りのイベントしか必要ありません。ここでは、(ゲームを作成する際に使用する 2 つのイベントを含む) いくつかの一般的なイベントを紹介します:\nclick: ユーザーが何かをクリックした場合、通常はボタンやハイパーリンクをクリックします\ncontextmenu: ユーザーがマウスの右ボタンをクリックした場合\nselect: ユーザーがテキストをハイライトした場合\ninput: ユーザーが何かテキストを入力した場合\nゲームの作成\n私たちは、JavaScript でイベントがどのように機能するかを探求するゲームを作成する予定です。私たちのゲームはプレイヤーのタイピングスキルをテストしますが、これはすべての開発者が持つべき最も過小評価されているスキルの一つです。私たちは皆、タイピングの練習をするべきですゲームの一般的な流れは以下のようになります。\nプレイヤーがスタートボタンをクリックすると、入力する名言が表示されます\nプレイヤーは、テキストボックスにできるだけ早く名言を入力します\n各単語が完成すると、次の単語が強調表示されます\nプレイヤーにタイプミスがあった場合、テキストボックスが赤に更新されます\n名言が完了すると、経過時間とともに成功メッセージが表示されます\nゲームを作ってイベントを覚えましょうファイル構造\nindexhtml、script",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1521,
    "chunk_index": 3,
    "total_chunks": 48
  },
  {
    "id": "a31deaf7c8906c7b84b51625723d92b3",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "イベントを使ったゲームの作成\nレッスン前の小テスト\nレッスン前の小テスト\nイベント駆動型プログラミング\nブラウザベースのアプリケーションを作成するとき、私たちは、構築したものと対話するときに使用するグラフィカル・ユーザー・インターフェース (GUI) を提供します。ブラウザと対話する最も一般的な方法は、様々な要素をクリックしたり入力したりすることです。開発者として直面する課題は、ユーザーがこれらの操作をいつ実行するかわからないことです。\nイベント駆動型プログラミングは、GUIを作成するために必要なプログラミングの種類の名前です。このフレーズを少し分解すると、ここでの核となる単語は イベント です。イベントは、Merriam-Webster によると、「何かが起こる」と定義されています。これは私たちの状況を完璧に説明しています。何かが起こりそうで、それに対応してコードを実行したいのですが、それがいつ行われるかはわかりません。\n実行したいコードの節をマークする方法は、関数を作成することです。手続き型プログラミングを考えると、関数は決まった順番で呼び出されます。これはイベント駆動型プログラミングでも同じことが言えそうです。違いは、関数がどのように呼ばれるかということです。\nイベント (ボタンクリックやタイピングなど) を処理するために、イベントリスナー を登録します。イベントリスナーとは、イベントが発生するのを待ち受けて、それに応じて実行する関数のことです。イベントリスナーは、UI を更新したり、サーバーへの呼び出しを行ったり、ユーザーのアクションに反応して実行することができます。addEventListener を使用してイベントリスナーを追加し、実行する関数を提供します。\n注: イベントリスナーを作成する方法は数多くあります。匿名の関数を使うこともできますし、名前付きの関数を作ることもできます。click プロパティを設定したり、addEventListener を使用したりと、様々なショートカットを使用することができます。今回の演習では addEventLister と匿名関数に焦点を当てます。また、addEventListener はすべてのイベントに対して動作し、イベント名をパラメータとして指定できるので、最も柔軟性があります。\n共通イベント\nアプリケーションを作成するときに聞くことができる多数のイベントがあります。基本的に、ユーザーがページ上で何かをするとイベントが発生しますが、これはプレイヤーがあなたの意図した経験を得られるようにするうえで大きな力となります。幸いなことに、通常はほんの一握りのイベントしか必要ありません。ここでは、(ゲームを作成する際に使用する 2 つのイベントを含む) いくつかの一般的なイベントを紹介します:\nclick: ユーザーが何かをクリックした場合、通常はボタンやハイパーリンクをクリックします\ncontextmenu: ユーザーがマウスの右ボタンをクリックした場合\nselect: ユーザーがテキストをハイライトした場合\ninput: ユーザーが何かテキストを入力した場合\nゲームの作成\n私たちは、JavaScript でイベントがどのように機能するかを探求するゲームを作成する予定です。私たちのゲームはプレイヤーのタイピングスキルをテストしますが、これはすべての開発者が持つべき最も過小評価されているスキルの一つです。私たちは皆、タイピングの練習をするべきですゲームの一般的な流れは以下のようになります。\nプレイヤーがスタートボタンをクリックすると、入力する名言が表示されます\nプレイヤーは、テキストボックスにできるだけ早く名言を入力します\n各単語が完成すると、次の単語が強調表示されます\nプレイヤーにタイプミスがあった場合、テキストボックスが赤に更新されます\n名言が完了すると、経過時間とともに成功メッセージが表示されます\nゲームを作ってイベントを覚えましょうファイル構造\nindexhtml、scriptjs、style",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1524,
    "chunk_index": 4,
    "total_chunks": 48
  },
  {
    "id": "c747e0c2e300557da2653c655b6bdfcc",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "イベントを使ったゲームの作成\nレッスン前の小テスト\nレッスン前の小テスト\nイベント駆動型プログラミング\nブラウザベースのアプリケーションを作成するとき、私たちは、構築したものと対話するときに使用するグラフィカル・ユーザー・インターフェース (GUI) を提供します。ブラウザと対話する最も一般的な方法は、様々な要素をクリックしたり入力したりすることです。開発者として直面する課題は、ユーザーがこれらの操作をいつ実行するかわからないことです。\nイベント駆動型プログラミングは、GUIを作成するために必要なプログラミングの種類の名前です。このフレーズを少し分解すると、ここでの核となる単語は イベント です。イベントは、Merriam-Webster によると、「何かが起こる」と定義されています。これは私たちの状況を完璧に説明しています。何かが起こりそうで、それに対応してコードを実行したいのですが、それがいつ行われるかはわかりません。\n実行したいコードの節をマークする方法は、関数を作成することです。手続き型プログラミングを考えると、関数は決まった順番で呼び出されます。これはイベント駆動型プログラミングでも同じことが言えそうです。違いは、関数がどのように呼ばれるかということです。\nイベント (ボタンクリックやタイピングなど) を処理するために、イベントリスナー を登録します。イベントリスナーとは、イベントが発生するのを待ち受けて、それに応じて実行する関数のことです。イベントリスナーは、UI を更新したり、サーバーへの呼び出しを行ったり、ユーザーのアクションに反応して実行することができます。addEventListener を使用してイベントリスナーを追加し、実行する関数を提供します。\n注: イベントリスナーを作成する方法は数多くあります。匿名の関数を使うこともできますし、名前付きの関数を作ることもできます。click プロパティを設定したり、addEventListener を使用したりと、様々なショートカットを使用することができます。今回の演習では addEventLister と匿名関数に焦点を当てます。また、addEventListener はすべてのイベントに対して動作し、イベント名をパラメータとして指定できるので、最も柔軟性があります。\n共通イベント\nアプリケーションを作成するときに聞くことができる多数のイベントがあります。基本的に、ユーザーがページ上で何かをするとイベントが発生しますが、これはプレイヤーがあなたの意図した経験を得られるようにするうえで大きな力となります。幸いなことに、通常はほんの一握りのイベントしか必要ありません。ここでは、(ゲームを作成する際に使用する 2 つのイベントを含む) いくつかの一般的なイベントを紹介します:\nclick: ユーザーが何かをクリックした場合、通常はボタンやハイパーリンクをクリックします\ncontextmenu: ユーザーがマウスの右ボタンをクリックした場合\nselect: ユーザーがテキストをハイライトした場合\ninput: ユーザーが何かテキストを入力した場合\nゲームの作成\n私たちは、JavaScript でイベントがどのように機能するかを探求するゲームを作成する予定です。私たちのゲームはプレイヤーのタイピングスキルをテストしますが、これはすべての開発者が持つべき最も過小評価されているスキルの一つです。私たちは皆、タイピングの練習をするべきですゲームの一般的な流れは以下のようになります。\nプレイヤーがスタートボタンをクリックすると、入力する名言が表示されます\nプレイヤーは、テキストボックスにできるだけ早く名言を入力します\n各単語が完成すると、次の単語が強調表示されます\nプレイヤーにタイプミスがあった場合、テキストボックスが赤に更新されます\n名言が完了すると、経過時間とともに成功メッセージが表示されます\nゲームを作ってイベントを覚えましょうファイル構造\nindexhtml、scriptjs、stylecss の 3 つのファイルが必要です。まずはこれらを設定して、生活を少し楽にしていきましょう。\nコンソールまたはターミナルウィンドウを開き、以下のコマンドを実行して、作業用の新しいフォルダを作成します\n```bash\nLinux または macOS\nmkdir typing-game && cd typing-game\nWindows\nmd typing-game && cd typing game\n```\nVisual Studio Code を開きます\nbash\ncode",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1659,
    "chunk_index": 5,
    "total_chunks": 48
  },
  {
    "id": "e12c1684b97014f81743182876a0ee83",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "イベントを使ったゲームの作成\nレッスン前の小テスト\nレッスン前の小テスト\nイベント駆動型プログラミング\nブラウザベースのアプリケーションを作成するとき、私たちは、構築したものと対話するときに使用するグラフィカル・ユーザー・インターフェース (GUI) を提供します。ブラウザと対話する最も一般的な方法は、様々な要素をクリックしたり入力したりすることです。開発者として直面する課題は、ユーザーがこれらの操作をいつ実行するかわからないことです。\nイベント駆動型プログラミングは、GUIを作成するために必要なプログラミングの種類の名前です。このフレーズを少し分解すると、ここでの核となる単語は イベント です。イベントは、Merriam-Webster によると、「何かが起こる」と定義されています。これは私たちの状況を完璧に説明しています。何かが起こりそうで、それに対応してコードを実行したいのですが、それがいつ行われるかはわかりません。\n実行したいコードの節をマークする方法は、関数を作成することです。手続き型プログラミングを考えると、関数は決まった順番で呼び出されます。これはイベント駆動型プログラミングでも同じことが言えそうです。違いは、関数がどのように呼ばれるかということです。\nイベント (ボタンクリックやタイピングなど) を処理するために、イベントリスナー を登録します。イベントリスナーとは、イベントが発生するのを待ち受けて、それに応じて実行する関数のことです。イベントリスナーは、UI を更新したり、サーバーへの呼び出しを行ったり、ユーザーのアクションに反応して実行することができます。addEventListener を使用してイベントリスナーを追加し、実行する関数を提供します。\n注: イベントリスナーを作成する方法は数多くあります。匿名の関数を使うこともできますし、名前付きの関数を作ることもできます。click プロパティを設定したり、addEventListener を使用したりと、様々なショートカットを使用することができます。今回の演習では addEventLister と匿名関数に焦点を当てます。また、addEventListener はすべてのイベントに対して動作し、イベント名をパラメータとして指定できるので、最も柔軟性があります。\n共通イベント\nアプリケーションを作成するときに聞くことができる多数のイベントがあります。基本的に、ユーザーがページ上で何かをするとイベントが発生しますが、これはプレイヤーがあなたの意図した経験を得られるようにするうえで大きな力となります。幸いなことに、通常はほんの一握りのイベントしか必要ありません。ここでは、(ゲームを作成する際に使用する 2 つのイベントを含む) いくつかの一般的なイベントを紹介します:\nclick: ユーザーが何かをクリックした場合、通常はボタンやハイパーリンクをクリックします\ncontextmenu: ユーザーがマウスの右ボタンをクリックした場合\nselect: ユーザーがテキストをハイライトした場合\ninput: ユーザーが何かテキストを入力した場合\nゲームの作成\n私たちは、JavaScript でイベントがどのように機能するかを探求するゲームを作成する予定です。私たちのゲームはプレイヤーのタイピングスキルをテストしますが、これはすべての開発者が持つべき最も過小評価されているスキルの一つです。私たちは皆、タイピングの練習をするべきですゲームの一般的な流れは以下のようになります。\nプレイヤーがスタートボタンをクリックすると、入力する名言が表示されます\nプレイヤーは、テキストボックスにできるだけ早く名言を入力します\n各単語が完成すると、次の単語が強調表示されます\nプレイヤーにタイプミスがあった場合、テキストボックスが赤に更新されます\n名言が完了すると、経過時間とともに成功メッセージが表示されます\nゲームを作ってイベントを覚えましょうファイル構造\nindexhtml、scriptjs、stylecss の 3 つのファイルが必要です。まずはこれらを設定して、生活を少し楽にしていきましょう。\nコンソールまたはターミナルウィンドウを開き、以下のコマンドを実行して、作業用の新しいフォルダを作成します\n```bash\nLinux または macOS\nmkdir typing-game && cd typing-game\nWindows\nmd typing-game && cd typing game\n```\nVisual Studio Code を開きます\nbash\ncodeVisual Studio Code のフォルダに以下の名前で3つのファイルを追加します\nindex",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1687,
    "chunk_index": 6,
    "total_chunks": 48
  },
  {
    "id": "f316a127340adda92a65298a1a9891cb",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "イベント駆動型プログラミング ブラウザベースのアプリケーションを作成するとき、私たちは、構築したものと対話するときに使用するグラフィカル・ユーザー・インターフェース (GUI) を提供します。ブラウザと対話する最も一般的な方法は、様々な要素をクリックしたり入力したりすることです。開発者として直面する課題は、ユーザーがこれらの操作をいつ実行するかわからないことです。 イベント駆動型プログラミングは、GUIを作成するために必要なプログラミングの種類の名前です。このフレーズを少し分解すると、ここでの核となる単語は イベント です。イベントは、Merriam-Webster によると、「何かが起こる」と定義されています。これは私たちの状況を完璧に説明しています。何かが起こりそうで、それに対応してコードを実行したいのですが、それがいつ行われるかはわかりません。 実行したいコードの節をマークする方法は、関数を作成することです。手続き型プログラミングを考えると、関数は決まった順番で呼び出されます。これはイベント駆動型プログラミングでも同じことが言えそうです。違いは、関数がどのように呼ばれるかということです。 イベント (ボタンクリックやタイピングなど) を処理するために、イベントリスナー を登録します。イベントリスナーとは、イベントが発生するのを待ち受けて、それに応じて実行する関数のことです。イベントリスナーは、UI を更新したり、サーバーへの呼び出しを行ったり、ユーザーのアクションに反応して実行することができます。addEventListener を使用してイベントリスナーを追加し、実行する関数を提供します。 注: イベントリスナーを作成する方法は数多くあります。匿名の関数を使うこともできますし、名前付きの関数を作ることもできます。click プロパティを設定したり、addEventListener を使用したりと、様々なショートカットを使用することができます。今回の演習では addEventLister と匿名関数に焦点を当てます。また、addEventListener はすべてのイベントに対して動作し、イベント名をパラメータとして指定できるので、最も柔軟性があります。 共通イベント アプリケーションを作成するときに聞くことができる多数のイベントがあります。基本的に、ユーザーがページ上で何かをするとイベントが発生しますが、これはプレイヤーがあなたの意図した経験を得られるようにするうえで大きな力となります。幸いなことに、通常はほんの一握りのイベントしか必要ありません。ここでは、(ゲームを作成する際に使用する 2 つのイベントを含む) いくつかの一般的なイベントを紹介します: click: ユーザーが何かをクリックした場合、通常はボタンやハイパーリンクをクリックします contextmenu: ユーザーがマウスの右ボタンをクリックした場合 select: ユーザーがテキストをハイライトした場合 input: ユーザーが何かテキストを入力した場合 ゲームの作成 私たちは、JavaScript でイベントがどのように機能するかを探求するゲームを作成する予定です。私たちのゲームはプレイヤーのタイピングスキルをテストしますが、これはすべての開発者が持つべき最も過小評価されているスキルの一つです。私たちは皆、タイピングの練習をするべきですゲームの一般的な流れは以下のようになります。 プレイヤーがスタートボタンをクリックすると、入力する名言が表示されます プレイヤーは、テキストボックスにできるだけ早く名言を入力します 各単語が完成すると、次の単語が強調表示されます プレイヤーにタイプミスがあった場合、テキストボックスが赤に更新されます 名言が完了すると、経過時間とともに成功メッセージが表示されます ゲームを作ってイベントを覚えましょうファイル構造 indexhtml、scriptjs、stylecss の 3 つのファイルが必要です。まずはこれらを設定して、生活を少し楽にしていきましょう。 コンソールまたはターミナルウィンドウを開き、以下のコマンドを実行して、作業用の新しいフォルダを作成します ```bash Linux または macOS mkdir typing-game && cd typing-game Windows md typing-game && cd typing game ``` Visual Studio Code を開きます bash codeVisual Studio Code のフォルダに以下の名前で3つのファイルを追加します indexhtml\nscript",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1639,
    "chunk_index": 7,
    "total_chunks": 48
  },
  {
    "id": "b7a9fc19ddbb0e016408a3c6b6fb512e",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "ブラウザベースのアプリケーションを作成するとき、私たちは、構築したものと対話するときに使用するグラフィカル・ユーザー・インターフェース (GUI) を提供します。ブラウザと対話する最も一般的な方法は、様々な要素をクリックしたり入力したりすることです。開発者として直面する課題は、ユーザーがこれらの操作をいつ実行するかわからないことです。 イベント駆動型プログラミングは、GUIを作成するために必要なプログラミングの種類の名前です。このフレーズを少し分解すると、ここでの核となる単語は イベント です。イベントは、Merriam-Webster によると、「何かが起こる」と定義されています。これは私たちの状況を完璧に説明しています。何かが起こりそうで、それに対応してコードを実行したいのですが、それがいつ行われるかはわかりません。 実行したいコードの節をマークする方法は、関数を作成することです。手続き型プログラミングを考えると、関数は決まった順番で呼び出されます。これはイベント駆動型プログラミングでも同じことが言えそうです。違いは、関数がどのように呼ばれるかということです。 イベント (ボタンクリックやタイピングなど) を処理するために、イベントリスナー を登録します。イベントリスナーとは、イベントが発生するのを待ち受けて、それに応じて実行する関数のことです。イベントリスナーは、UI を更新したり、サーバーへの呼び出しを行ったり、ユーザーのアクションに反応して実行することができます。addEventListener を使用してイベントリスナーを追加し、実行する関数を提供します。 注: イベントリスナーを作成する方法は数多くあります。匿名の関数を使うこともできますし、名前付きの関数を作ることもできます。click プロパティを設定したり、addEventListener を使用したりと、様々なショートカットを使用することができます。今回の演習では addEventLister と匿名関数に焦点を当てます。また、addEventListener はすべてのイベントに対して動作し、イベント名をパラメータとして指定できるので、最も柔軟性があります。 共通イベント アプリケーションを作成するときに聞くことができる多数のイベントがあります。基本的に、ユーザーがページ上で何かをするとイベントが発生しますが、これはプレイヤーがあなたの意図した経験を得られるようにするうえで大きな力となります。幸いなことに、通常はほんの一握りのイベントしか必要ありません。ここでは、(ゲームを作成する際に使用する 2 つのイベントを含む) いくつかの一般的なイベントを紹介します: click: ユーザーが何かをクリックした場合、通常はボタンやハイパーリンクをクリックします contextmenu: ユーザーがマウスの右ボタンをクリックした場合 select: ユーザーがテキストをハイライトした場合 input: ユーザーが何かテキストを入力した場合 ゲームの作成 私たちは、JavaScript でイベントがどのように機能するかを探求するゲームを作成する予定です。私たちのゲームはプレイヤーのタイピングスキルをテストしますが、これはすべての開発者が持つべき最も過小評価されているスキルの一つです。私たちは皆、タイピングの練習をするべきですゲームの一般的な流れは以下のようになります。 プレイヤーがスタートボタンをクリックすると、入力する名言が表示されます プレイヤーは、テキストボックスにできるだけ早く名言を入力します 各単語が完成すると、次の単語が強調表示されます プレイヤーにタイプミスがあった場合、テキストボックスが赤に更新されます 名言が完了すると、経過時間とともに成功メッセージが表示されます ゲームを作ってイベントを覚えましょうファイル構造 indexhtml、scriptjs、stylecss の 3 つのファイルが必要です。まずはこれらを設定して、生活を少し楽にしていきましょう。 コンソールまたはターミナルウィンドウを開き、以下のコマンドを実行して、作業用の新しいフォルダを作成します ```bash Linux または macOS mkdir typing-game && cd typing-game Windows md typing-game && cd typing game ``` Visual Studio Code を開きます bash codeVisual Studio Code のフォルダに以下の名前で3つのファイルを追加します indexhtml scriptjs\nstyle",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1625,
    "chunk_index": 8,
    "total_chunks": 48
  },
  {
    "id": "1f6885dc5dc98de266b39cbc3ce4f9b2",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "(GUI) を提供します。ブラウザと対話する最も一般的な方法は、様々な要素をクリックしたり入力したりすることです。開発者として直面する課題は、ユーザーがこれらの操作をいつ実行するかわからないことです。 イベント駆動型プログラミングは、GUIを作成するために必要なプログラミングの種類の名前です。このフレーズを少し分解すると、ここでの核となる単語は イベント です。イベントは、Merriam-Webster によると、「何かが起こる」と定義されています。これは私たちの状況を完璧に説明しています。何かが起こりそうで、それに対応してコードを実行したいのですが、それがいつ行われるかはわかりません。 実行したいコードの節をマークする方法は、関数を作成することです。手続き型プログラミングを考えると、関数は決まった順番で呼び出されます。これはイベント駆動型プログラミングでも同じことが言えそうです。違いは、関数がどのように呼ばれるかということです。 イベント (ボタンクリックやタイピングなど) を処理するために、イベントリスナー を登録します。イベントリスナーとは、イベントが発生するのを待ち受けて、それに応じて実行する関数のことです。イベントリスナーは、UI を更新したり、サーバーへの呼び出しを行ったり、ユーザーのアクションに反応して実行することができます。addEventListener を使用してイベントリスナーを追加し、実行する関数を提供します。 注: イベントリスナーを作成する方法は数多くあります。匿名の関数を使うこともできますし、名前付きの関数を作ることもできます。click プロパティを設定したり、addEventListener を使用したりと、様々なショートカットを使用することができます。今回の演習では addEventLister と匿名関数に焦点を当てます。また、addEventListener はすべてのイベントに対して動作し、イベント名をパラメータとして指定できるので、最も柔軟性があります。 共通イベント アプリケーションを作成するときに聞くことができる多数のイベントがあります。基本的に、ユーザーがページ上で何かをするとイベントが発生しますが、これはプレイヤーがあなたの意図した経験を得られるようにするうえで大きな力となります。幸いなことに、通常はほんの一握りのイベントしか必要ありません。ここでは、(ゲームを作成する際に使用する 2 つのイベントを含む) いくつかの一般的なイベントを紹介します: click: ユーザーが何かをクリックした場合、通常はボタンやハイパーリンクをクリックします contextmenu: ユーザーがマウスの右ボタンをクリックした場合 select: ユーザーがテキストをハイライトした場合 input: ユーザーが何かテキストを入力した場合 ゲームの作成 私たちは、JavaScript でイベントがどのように機能するかを探求するゲームを作成する予定です。私たちのゲームはプレイヤーのタイピングスキルをテストしますが、これはすべての開発者が持つべき最も過小評価されているスキルの一つです。私たちは皆、タイピングの練習をするべきですゲームの一般的な流れは以下のようになります。 プレイヤーがスタートボタンをクリックすると、入力する名言が表示されます プレイヤーは、テキストボックスにできるだけ早く名言を入力します 各単語が完成すると、次の単語が強調表示されます プレイヤーにタイプミスがあった場合、テキストボックスが赤に更新されます 名言が完了すると、経過時間とともに成功メッセージが表示されます ゲームを作ってイベントを覚えましょうファイル構造 indexhtml、scriptjs、stylecss の 3 つのファイルが必要です。まずはこれらを設定して、生活を少し楽にしていきましょう。 コンソールまたはターミナルウィンドウを開き、以下のコマンドを実行して、作業用の新しいフォルダを作成します ```bash Linux または macOS mkdir typing-game && cd typing-game Windows md typing-game && cd typing game ``` Visual Studio Code を開きます bash codeVisual Studio Code のフォルダに以下の名前で3つのファイルを追加します indexhtml scriptjs stylecss\nユーザーインターフェースの作成\n要件を探ってみると、HTML ページには一握りの要素が必要になることがわかります。これはレシピのようなもので、いくつかの材料が必要です。\nユーザーが入力するための名言を表示する場所\n成功メッセージのようなメッセージを表示する場所\n入力用のテキストボックス\nスタートボタン\nこれらのファイルにはそれぞれ ID が必要なので、JavaScript でそれらを扱うことができます。また、これから作成する CSS と JavaScript ファイルへの参照を追加します。\nindex",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1764,
    "chunk_index": 9,
    "total_chunks": 48
  },
  {
    "id": "524a7a590ba10f0aa3c776e0d7dd3167",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "を使用したりと、様々なショートカットを使用することができます。今回の演習では addEventLister と匿名関数に焦点を当てます。また、addEventListener はすべてのイベントに対して動作し、イベント名をパラメータとして指定できるので、最も柔軟性があります。 共通イベント アプリケーションを作成するときに聞くことができる多数のイベントがあります。基本的に、ユーザーがページ上で何かをするとイベントが発生しますが、これはプレイヤーがあなたの意図した経験を得られるようにするうえで大きな力となります。幸いなことに、通常はほんの一握りのイベントしか必要ありません。ここでは、(ゲームを作成する際に使用する 2 つのイベントを含む) いくつかの一般的なイベントを紹介します: click: ユーザーが何かをクリックした場合、通常はボタンやハイパーリンクをクリックします contextmenu: ユーザーがマウスの右ボタンをクリックした場合 select: ユーザーがテキストをハイライトした場合 input: ユーザーが何かテキストを入力した場合 ゲームの作成 私たちは、JavaScript でイベントがどのように機能するかを探求するゲームを作成する予定です。私たちのゲームはプレイヤーのタイピングスキルをテストしますが、これはすべての開発者が持つべき最も過小評価されているスキルの一つです。私たちは皆、タイピングの練習をするべきですゲームの一般的な流れは以下のようになります。 プレイヤーがスタートボタンをクリックすると、入力する名言が表示されます プレイヤーは、テキストボックスにできるだけ早く名言を入力します 各単語が完成すると、次の単語が強調表示されます プレイヤーにタイプミスがあった場合、テキストボックスが赤に更新されます 名言が完了すると、経過時間とともに成功メッセージが表示されます ゲームを作ってイベントを覚えましょうファイル構造 indexhtml、scriptjs、stylecss の 3 つのファイルが必要です。まずはこれらを設定して、生活を少し楽にしていきましょう。 コンソールまたはターミナルウィンドウを開き、以下のコマンドを実行して、作業用の新しいフォルダを作成します ```bash Linux または macOS mkdir typing-game && cd typing-game Windows md typing-game && cd typing game ``` Visual Studio Code を開きます bash codeVisual Studio Code のフォルダに以下の名前で3つのファイルを追加します indexhtml scriptjs stylecss ユーザーインターフェースの作成 要件を探ってみると、HTML ページには一握りの要素が必要になることがわかります。これはレシピのようなもので、いくつかの材料が必要です。 ユーザーが入力するための名言を表示する場所 成功メッセージのようなメッセージを表示する場所 入力用のテキストボックス スタートボタン これらのファイルにはそれぞれ ID が必要なので、JavaScript でそれらを扱うことができます。また、これから作成する CSS と JavaScript ファイルへの参照を追加します。 indexhtml という名前の新しいファイルを作成します。以下の HTML を追加します。\n```html\nタイピングゲーム\nタイピングゲーム",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1169,
    "chunk_index": 10,
    "total_chunks": 48
  },
  {
    "id": "3c1d84020d35b88241c87e0911485935",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "2 つのイベントを含む) いくつかの一般的なイベントを紹介します: click: ユーザーが何かをクリックした場合、通常はボタンやハイパーリンクをクリックします contextmenu: ユーザーがマウスの右ボタンをクリックした場合 select: ユーザーがテキストをハイライトした場合 input: ユーザーが何かテキストを入力した場合 ゲームの作成 私たちは、JavaScript でイベントがどのように機能するかを探求するゲームを作成する予定です。私たちのゲームはプレイヤーのタイピングスキルをテストしますが、これはすべての開発者が持つべき最も過小評価されているスキルの一つです。私たちは皆、タイピングの練習をするべきですゲームの一般的な流れは以下のようになります。 プレイヤーがスタートボタンをクリックすると、入力する名言が表示されます プレイヤーは、テキストボックスにできるだけ早く名言を入力します 各単語が完成すると、次の単語が強調表示されます プレイヤーにタイプミスがあった場合、テキストボックスが赤に更新されます 名言が完了すると、経過時間とともに成功メッセージが表示されます ゲームを作ってイベントを覚えましょうファイル構造 indexhtml、scriptjs、stylecss の 3 つのファイルが必要です。まずはこれらを設定して、生活を少し楽にしていきましょう。 コンソールまたはターミナルウィンドウを開き、以下のコマンドを実行して、作業用の新しいフォルダを作成します ```bash Linux または macOS mkdir typing-game && cd typing-game Windows md typing-game && cd typing game ``` Visual Studio Code を開きます bash codeVisual Studio Code のフォルダに以下の名前で3つのファイルを追加します indexhtml scriptjs stylecss ユーザーインターフェースの作成 要件を探ってみると、HTML ページには一握りの要素が必要になることがわかります。これはレシピのようなもので、いくつかの材料が必要です。 ユーザーが入力するための名言を表示する場所 成功メッセージのようなメッセージを表示する場所 入力用のテキストボックス スタートボタン これらのファイルにはそれぞれ ID が必要なので、JavaScript でそれらを扱うことができます。また、これから作成する CSS と JavaScript ファイルへの参照を追加します。 indexhtml という名前の新しいファイルを作成します。以下の HTML を追加します。 ```html タイピングゲーム タイピングゲームシャーロック・ホームズの名言を使ってタイピングの練習をしましょう。**スタート** をクリックしてください。\nスタート\n```\nアプリケーションの起動\n物事がどのように見えるかを確認するためには、常に反復的に開発するのがベストです。アプリケーションを起動してみましょう。Visual Studio Code には Live Server と呼ばれる素晴らしい拡張機能があり、アプリケーションをローカルにホストし、保存するたびにブラウザを更新します。\nリンクを辿り、Install をクリックして、Live Server をインストールします\nブラウザで Visual Studio Code を開き、Visual Studioコードでインストールを実行するように促されます\nプロンプトが表示されたら Visual Studio Code を再起動します\nインストールしたら、Visual Studio Code で Ctl-Shift-P (または Cmd-Shift-P) をクリックして、コマンドパレットを開きます\nLive Server: Open with Live Server と入力します\nLive Server がアプリケーションのホスティングを開始します\nブラウザを開き、https://localhost:5500 に移動します\nこれで作成したページが表示されるはずです",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1276,
    "chunk_index": 11,
    "total_chunks": 48
  },
  {
    "id": "88b806d4035f113e836d5be6eeb8267b",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "codeVisual Studio Code のフォルダに以下の名前で3つのファイルを追加します indexhtml scriptjs stylecss ユーザーインターフェースの作成 要件を探ってみると、HTML ページには一握りの要素が必要になることがわかります。これはレシピのようなもので、いくつかの材料が必要です。 ユーザーが入力するための名言を表示する場所 成功メッセージのようなメッセージを表示する場所 入力用のテキストボックス スタートボタン これらのファイルにはそれぞれ ID が必要なので、JavaScript でそれらを扱うことができます。また、これから作成する CSS と JavaScript ファイルへの参照を追加します。 indexhtml という名前の新しいファイルを作成します。以下の HTML を追加します。 ```html タイピングゲーム タイピングゲームシャーロック・ホームズの名言を使ってタイピングの練習をしましょう。**スタート** をクリックしてください。 スタート ``` アプリケーションの起動 物事がどのように見えるかを確認するためには、常に反復的に開発するのがベストです。アプリケーションを起動してみましょう。Visual Studio Code には Live Server と呼ばれる素晴らしい拡張機能があり、アプリケーションをローカルにホストし、保存するたびにブラウザを更新します。 リンクを辿り、Install をクリックして、Live Server をインストールします ブラウザで Visual Studio Code を開き、Visual Studioコードでインストールを実行するように促されます プロンプトが表示されたら Visual Studio Code を再起動します インストールしたら、Visual Studio Code で Ctl-Shift-P (または Cmd-Shift-P) をクリックして、コマンドパレットを開きます Live Server: Open with Live Server と入力します Live Server がアプリケーションのホスティングを開始します ブラウザを開き、https://localhost:5500 に移動します これで作成したページが表示されるはずです機能を追加してみましょう。\nCSS の追加\nHTML を作成したので、コアスタイリング用の CSS を追加してみましょう。プレイヤーが入力すべき単語をハイライトし、入力した内容が間違っている場合はテキストボックスに色をつけます。これには 2 つのクラスを使用します。\nstyle",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 790,
    "chunk_index": 12,
    "total_chunks": 48
  },
  {
    "id": "d3a4ede75168df481b32ce65c43182ea",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "ページには一握りの要素が必要になることがわかります。これはレシピのようなもので、いくつかの材料が必要です。 ユーザーが入力するための名言を表示する場所 成功メッセージのようなメッセージを表示する場所 入力用のテキストボックス スタートボタン これらのファイルにはそれぞれ ID が必要なので、JavaScript でそれらを扱うことができます。また、これから作成する CSS と JavaScript ファイルへの参照を追加します。 indexhtml という名前の新しいファイルを作成します。以下の HTML を追加します。 ```html タイピングゲーム タイピングゲームシャーロック・ホームズの名言を使ってタイピングの練習をしましょう。**スタート** をクリックしてください。 スタート ``` アプリケーションの起動 物事がどのように見えるかを確認するためには、常に反復的に開発するのがベストです。アプリケーションを起動してみましょう。Visual Studio Code には Live Server と呼ばれる素晴らしい拡張機能があり、アプリケーションをローカルにホストし、保存するたびにブラウザを更新します。 リンクを辿り、Install をクリックして、Live Server をインストールします ブラウザで Visual Studio Code を開き、Visual Studioコードでインストールを実行するように促されます プロンプトが表示されたら Visual Studio Code を再起動します インストールしたら、Visual Studio Code で Ctl-Shift-P (または Cmd-Shift-P) をクリックして、コマンドパレットを開きます Live Server: Open with Live Server と入力します Live Server がアプリケーションのホスティングを開始します ブラウザを開き、https://localhost:5500 に移動します これで作成したページが表示されるはずです機能を追加してみましょう。 CSS の追加 HTML を作成したので、コアスタイリング用の CSS を追加してみましょう。プレイヤーが入力すべき単語をハイライトし、入力した内容が間違っている場合はテキストボックスに色をつけます。これには 2 つのクラスを使用します。 stylecss という名前のファイルを新規作成し、以下の構文を追加します。\n```css\n/ style",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 764,
    "chunk_index": 13,
    "total_chunks": 48
  },
  {
    "id": "b262ae645424aa00a028b39eaefd6b1e",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "スタートボタン これらのファイルにはそれぞれ ID が必要なので、JavaScript でそれらを扱うことができます。また、これから作成する CSS と JavaScript ファイルへの参照を追加します。 indexhtml という名前の新しいファイルを作成します。以下の HTML を追加します。 ```html タイピングゲーム タイピングゲームシャーロック・ホームズの名言を使ってタイピングの練習をしましょう。**スタート** をクリックしてください。 スタート ``` アプリケーションの起動 物事がどのように見えるかを確認するためには、常に反復的に開発するのがベストです。アプリケーションを起動してみましょう。Visual Studio Code には Live Server と呼ばれる素晴らしい拡張機能があり、アプリケーションをローカルにホストし、保存するたびにブラウザを更新します。 リンクを辿り、Install をクリックして、Live Server をインストールします ブラウザで Visual Studio Code を開き、Visual Studioコードでインストールを実行するように促されます プロンプトが表示されたら Visual Studio Code を再起動します インストールしたら、Visual Studio Code で Ctl-Shift-P (または Cmd-Shift-P) をクリックして、コマンドパレットを開きます Live Server: Open with Live Server と入力します Live Server がアプリケーションのホスティングを開始します ブラウザを開き、https://localhost:5500 に移動します これで作成したページが表示されるはずです機能を追加してみましょう。 CSS の追加 HTML を作成したので、コアスタイリング用の CSS を追加してみましょう。プレイヤーが入力すべき単語をハイライトし、入力した内容が間違っている場合はテキストボックスに色をつけます。これには 2 つのクラスを使用します。 stylecss という名前のファイルを新規作成し、以下の構文を追加します。 ```css / stylecss の中身 /",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 667,
    "chunk_index": 14,
    "total_chunks": 48
  },
  {
    "id": "1221b404c80840ae77f40073992ebe0c",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "ID が必要なので、JavaScript でそれらを扱うことができます。また、これから作成する CSS と JavaScript ファイルへの参照を追加します。 indexhtml という名前の新しいファイルを作成します。以下の HTML を追加します。 ```html タイピングゲーム タイピングゲームシャーロック・ホームズの名言を使ってタイピングの練習をしましょう。**スタート** をクリックしてください。 スタート ``` アプリケーションの起動 物事がどのように見えるかを確認するためには、常に反復的に開発するのがベストです。アプリケーションを起動してみましょう。Visual Studio Code には Live Server と呼ばれる素晴らしい拡張機能があり、アプリケーションをローカルにホストし、保存するたびにブラウザを更新します。 リンクを辿り、Install をクリックして、Live Server をインストールします ブラウザで Visual Studio Code を開き、Visual Studioコードでインストールを実行するように促されます プロンプトが表示されたら Visual Studio Code を再起動します インストールしたら、Visual Studio Code で Ctl-Shift-P (または Cmd-Shift-P) をクリックして、コマンドパレットを開きます Live Server: Open with Live Server と入力します Live Server がアプリケーションのホスティングを開始します ブラウザを開き、https://localhost:5500 に移動します これで作成したページが表示されるはずです機能を追加してみましょう。 CSS の追加 HTML を作成したので、コアスタイリング用の CSS を追加してみましょう。プレイヤーが入力すべき単語をハイライトし、入力した内容が間違っている場合はテキストボックスに色をつけます。これには 2 つのクラスを使用します。 stylecss という名前のファイルを新規作成し、以下の構文を追加します。 ```css / stylecss の中身 /highlight {\nbackground-color: yellow;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 654,
    "chunk_index": 15,
    "total_chunks": 48
  },
  {
    "id": "2f6e66df294b0dc827e9eabb56102981",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "と JavaScript ファイルへの参照を追加します。 indexhtml という名前の新しいファイルを作成します。以下の HTML を追加します。 ```html タイピングゲーム タイピングゲームシャーロック・ホームズの名言を使ってタイピングの練習をしましょう。**スタート** をクリックしてください。 スタート ``` アプリケーションの起動 物事がどのように見えるかを確認するためには、常に反復的に開発するのがベストです。アプリケーションを起動してみましょう。Visual Studio Code には Live Server と呼ばれる素晴らしい拡張機能があり、アプリケーションをローカルにホストし、保存するたびにブラウザを更新します。 リンクを辿り、Install をクリックして、Live Server をインストールします ブラウザで Visual Studio Code を開き、Visual Studioコードでインストールを実行するように促されます プロンプトが表示されたら Visual Studio Code を再起動します インストールしたら、Visual Studio Code で Ctl-Shift-P (または Cmd-Shift-P) をクリックして、コマンドパレットを開きます Live Server: Open with Live Server と入力します Live Server がアプリケーションのホスティングを開始します ブラウザを開き、https://localhost:5500 に移動します これで作成したページが表示されるはずです機能を追加してみましょう。 CSS の追加 HTML を作成したので、コアスタイリング用の CSS を追加してみましょう。プレイヤーが入力すべき単語をハイライトし、入力した内容が間違っている場合はテキストボックスに色をつけます。これには 2 つのクラスを使用します。 stylecss という名前のファイルを新規作成し、以下の構文を追加します。 ```css / stylecss の中身 /highlight { background-color: yellow; }error {\nbackground-color: lightcoral;\nborder: red;\n}\n```\n✅ CSS に関しては、あなたが好きなようにページをレイアウトすることができます。少し時間をかけて、より魅力的なページにしてみましょう。\n別のフォントを選択します\nヘッダーに色をつけます\nアイテムのサイズを変更します\nJavaScript\nUI を作成したので、ロジックを提供する JavaScript に注目してみましょう。これをいくつかのステップに分けて説明します。\n定数の作成\nゲームを開始するイベントリスナー\nタイピングへのイベントリスナー\nしかし、まず、script",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 833,
    "chunk_index": 16,
    "total_chunks": 48
  },
  {
    "id": "079942a69159d4e4da330ba8aeedaef2",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "をクリックして、Live Server をインストールします ブラウザで Visual Studio Code を開き、Visual Studioコードでインストールを実行するように促されます プロンプトが表示されたら Visual Studio Code を再起動します インストールしたら、Visual Studio Code で Ctl-Shift-P (または Cmd-Shift-P) をクリックして、コマンドパレットを開きます Live Server: Open with Live Server と入力します Live Server がアプリケーションのホスティングを開始します ブラウザを開き、https://localhost:5500 に移動します これで作成したページが表示されるはずです機能を追加してみましょう。 CSS の追加 HTML を作成したので、コアスタイリング用の CSS を追加してみましょう。プレイヤーが入力すべき単語をハイライトし、入力した内容が間違っている場合はテキストボックスに色をつけます。これには 2 つのクラスを使用します。 stylecss という名前のファイルを新規作成し、以下の構文を追加します。 ```css / stylecss の中身 /highlight { background-color: yellow; }error { background-color: lightcoral; border: red; } ``` ✅ CSS に関しては、あなたが好きなようにページをレイアウトすることができます。少し時間をかけて、より魅力的なページにしてみましょう。 別のフォントを選択します ヘッダーに色をつけます アイテムのサイズを変更します JavaScript UI を作成したので、ロジックを提供する JavaScript に注目してみましょう。これをいくつかのステップに分けて説明します。 定数の作成 ゲームを開始するイベントリスナー タイピングへのイベントリスナー しかし、まず、scriptjs という名前のファイルを新規作成します。\n定数の追加\nプログラミングの生活を少しでも楽にするために、いくつかのアイテムが必要になります。繰り返しになりますが、レシピに似ていますが、必要なものは以下の通りです。\nすべての名言のリストを含む配列\n現在の名言のすべての単語を格納する空の配列\nプレイヤーが現在入力している単語のインデックスを格納するスペース\nプレイヤーがスタートをクリックした時間\nUI 要素への参照も欲しいところです。\nテキストボックス (typed-value)\n名言の表示 (quote)\nメッセージ (message)\njavascript\n// script",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 799,
    "chunk_index": 17,
    "total_chunks": 48
  },
  {
    "id": "20456a4f77901482f46b172d8487ce67",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "Ctl-Shift-P (または Cmd-Shift-P) をクリックして、コマンドパレットを開きます Live Server: Open with Live Server と入力します Live Server がアプリケーションのホスティングを開始します ブラウザを開き、https://localhost:5500 に移動します これで作成したページが表示されるはずです機能を追加してみましょう。 CSS の追加 HTML を作成したので、コアスタイリング用の CSS を追加してみましょう。プレイヤーが入力すべき単語をハイライトし、入力した内容が間違っている場合はテキストボックスに色をつけます。これには 2 つのクラスを使用します。 stylecss という名前のファイルを新規作成し、以下の構文を追加します。 ```css / stylecss の中身 /highlight { background-color: yellow; }error { background-color: lightcoral; border: red; } ``` ✅ CSS に関しては、あなたが好きなようにページをレイアウトすることができます。少し時間をかけて、より魅力的なページにしてみましょう。 別のフォントを選択します ヘッダーに色をつけます アイテムのサイズを変更します JavaScript UI を作成したので、ロジックを提供する JavaScript に注目してみましょう。これをいくつかのステップに分けて説明します。 定数の作成 ゲームを開始するイベントリスナー タイピングへのイベントリスナー しかし、まず、scriptjs という名前のファイルを新規作成します。 定数の追加 プログラミングの生活を少しでも楽にするために、いくつかのアイテムが必要になります。繰り返しになりますが、レシピに似ていますが、必要なものは以下の通りです。 すべての名言のリストを含む配列 現在の名言のすべての単語を格納する空の配列 プレイヤーが現在入力している単語のインデックスを格納するスペース プレイヤーがスタートをクリックした時間 UI 要素への参照も欲しいところです。 テキストボックス (typed-value) 名言の表示 (quote) メッセージ (message) javascript // scriptjs の中身\n// すべての名言\nconst quotes = [\n'When you have eliminated the impossible, whatever remains, however improbable, must be the truth",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 758,
    "chunk_index": 18,
    "total_chunks": 48
  },
  {
    "id": "822e03a385fc4c4a5103639b97675f3c",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "CSS を追加してみましょう。プレイヤーが入力すべき単語をハイライトし、入力した内容が間違っている場合はテキストボックスに色をつけます。これには 2 つのクラスを使用します。 stylecss という名前のファイルを新規作成し、以下の構文を追加します。 ```css / stylecss の中身 /highlight { background-color: yellow; }error { background-color: lightcoral; border: red; } ``` ✅ CSS に関しては、あなたが好きなようにページをレイアウトすることができます。少し時間をかけて、より魅力的なページにしてみましょう。 別のフォントを選択します ヘッダーに色をつけます アイテムのサイズを変更します JavaScript UI を作成したので、ロジックを提供する JavaScript に注目してみましょう。これをいくつかのステップに分けて説明します。 定数の作成 ゲームを開始するイベントリスナー タイピングへのイベントリスナー しかし、まず、scriptjs という名前のファイルを新規作成します。 定数の追加 プログラミングの生活を少しでも楽にするために、いくつかのアイテムが必要になります。繰り返しになりますが、レシピに似ていますが、必要なものは以下の通りです。 すべての名言のリストを含む配列 現在の名言のすべての単語を格納する空の配列 プレイヤーが現在入力している単語のインデックスを格納するスペース プレイヤーがスタートをクリックした時間 UI 要素への参照も欲しいところです。 テキストボックス (typed-value) 名言の表示 (quote) メッセージ (message) javascript // scriptjs の中身 // すべての名言 const quotes = [ 'When you have eliminated the impossible, whatever remains, however improbable, must be the truth',\n'There is nothing more deceptive than an obvious fact",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 628,
    "chunk_index": 19,
    "total_chunks": 48
  },
  {
    "id": "800cb05b3dedf7cf1afb2c9b5e2842fd",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "の中身 /highlight { background-color: yellow; }error { background-color: lightcoral; border: red; } ``` ✅ CSS に関しては、あなたが好きなようにページをレイアウトすることができます。少し時間をかけて、より魅力的なページにしてみましょう。 別のフォントを選択します ヘッダーに色をつけます アイテムのサイズを変更します JavaScript UI を作成したので、ロジックを提供する JavaScript に注目してみましょう。これをいくつかのステップに分けて説明します。 定数の作成 ゲームを開始するイベントリスナー タイピングへのイベントリスナー しかし、まず、scriptjs という名前のファイルを新規作成します。 定数の追加 プログラミングの生活を少しでも楽にするために、いくつかのアイテムが必要になります。繰り返しになりますが、レシピに似ていますが、必要なものは以下の通りです。 すべての名言のリストを含む配列 現在の名言のすべての単語を格納する空の配列 プレイヤーが現在入力している単語のインデックスを格納するスペース プレイヤーがスタートをクリックした時間 UI 要素への参照も欲しいところです。 テキストボックス (typed-value) 名言の表示 (quote) メッセージ (message) javascript // scriptjs の中身 // すべての名言 const quotes = [ 'When you have eliminated the impossible, whatever remains, however improbable, must be the truth', 'There is nothing more deceptive than an obvious fact',\n'I ought to know by this time that when a fact appears to be opposed to a long train of deductions it invariably proves to be capable of bearing some other interpretation",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 543,
    "chunk_index": 20,
    "total_chunks": 48
  },
  {
    "id": "99f930bc9719be08553d8d0454f64782",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "現在の名言のすべての単語を格納する空の配列 プレイヤーが現在入力している単語のインデックスを格納するスペース プレイヤーがスタートをクリックした時間 UI 要素への参照も欲しいところです。 テキストボックス (typed-value) 名言の表示 (quote) メッセージ (message) javascript // scriptjs の中身 // すべての名言 const quotes = [ 'When you have eliminated the impossible, whatever remains, however improbable, must be the truth', 'There is nothing more deceptive than an obvious fact', 'I ought to know by this time that when a fact appears to be opposed to a long train of deductions it invariably proves to be capable of bearing some other interpretation',\n'I never make exceptions An exception disproves the rule ',\n'What one man can invent another can discover ',\n'Nothing clears up a case so much as stating it to another person ',\n'Education never ends, Watson It is a series of lessons, with the greatest for the last ',\n];\n// 単語のリストと、プレイヤーが現在入力している単語のインデックスを格納します。\nlet words = [];\nlet wordIndex = 0;\n// 開始時刻\nlet startTime = Date now();\n// ページ構成要素\nconst quoteElement = document getElementById('quote');\nconst messageElement = document getElementById('message');\nconst typedValueElement = document getElementById('typed-value');\n✅ 先に行き、あなたのゲームに多くの名言を追加します。\n注: document getElementByIdを使用することで、コード内で必要なときにいつでも要素を取得することができます。これらの要素を定期的に参照することになるので、定数を使用して文字列リテラルのタイプミスを回避します。Vue",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 21,
    "total_chunks": 48
  },
  {
    "id": "47f6c878f7fbe629d8b8a94bb5819935",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "invent another can discover ', 'Nothing clears up a case so much as stating it to another person ', 'Education never ends, Watson It is a series of lessons, with the greatest for the last ', ]; // 単語のリストと、プレイヤーが現在入力している単語のインデックスを格納します。 let words = []; let wordIndex = 0; // 開始時刻 let startTime = Date now(); // ページ構成要素 const quoteElement = document getElementById('quote'); const messageElement = document getElementById('message'); const typedValueElement = document getElementById('typed-value'); ✅ 先に行き、あなたのゲームに多くの名言を追加します。 注: document getElementByIdを使用することで、コード内で必要なときにいつでも要素を取得することができます。これらの要素を定期的に参照することになるので、定数を使用して文字列リテラルのタイプミスを回避します。Vuejs や React などのフレームワークは、コードを集中管理するのに役立ちます。\n1分ほどかけて、const, let, var の使い方のビデオを見てみましょう。\n開始ロジックの追加\nゲームを始めるには、プレイヤーはスタートをクリックします。もちろん、プレイヤーがいつスタートボタンをクリックするかはわかりません。ここでイベントリスナーの出番です。イベントリスナーを使うと、何か (イベント) が発生するのを待ち受けて、それに応じてコードを実行することができます。この例では、ユーザーがスタートをクリックしたときにコードを実行したいと思います。\nユーザーが スタート をクリックしたときに、名言を選択し、ユーザーインターフェースを設定し、現在の単語とタイミングのトラッキングを設定する必要があります。以下は追加する必要のある JavaScript です。スクリプトブロックの後で説明します。\n```javascript\n// script",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 615,
    "chunk_index": 22,
    "total_chunks": 48
  },
  {
    "id": "73e726defb2093ba7573d2a3b5212ef9",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "'Education never ends, Watson It is a series of lessons, with the greatest for the last ', ]; // 単語のリストと、プレイヤーが現在入力している単語のインデックスを格納します。 let words = []; let wordIndex = 0; // 開始時刻 let startTime = Date now(); // ページ構成要素 const quoteElement = document getElementById('quote'); const messageElement = document getElementById('message'); const typedValueElement = document getElementById('typed-value'); ✅ 先に行き、あなたのゲームに多くの名言を追加します。 注: document getElementByIdを使用することで、コード内で必要なときにいつでも要素を取得することができます。これらの要素を定期的に参照することになるので、定数を使用して文字列リテラルのタイプミスを回避します。Vuejs や React などのフレームワークは、コードを集中管理するのに役立ちます。 1分ほどかけて、const, let, var の使い方のビデオを見てみましょう。 開始ロジックの追加 ゲームを始めるには、プレイヤーはスタートをクリックします。もちろん、プレイヤーがいつスタートボタンをクリックするかはわかりません。ここでイベントリスナーの出番です。イベントリスナーを使うと、何か (イベント) が発生するのを待ち受けて、それに応じてコードを実行することができます。この例では、ユーザーがスタートをクリックしたときにコードを実行したいと思います。 ユーザーが スタート をクリックしたときに、名言を選択し、ユーザーインターフェースを設定し、現在の単語とタイミングのトラッキングを設定する必要があります。以下は追加する必要のある JavaScript です。スクリプトブロックの後で説明します。 ```javascript // scriptjs の最後の方に\ndocument",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 604,
    "chunk_index": 23,
    "total_chunks": 48
  },
  {
    "id": "ea7face9b48f8e0d5de4ef1669232fd2",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "ends, Watson It is a series of lessons, with the greatest for the last ', ]; // 単語のリストと、プレイヤーが現在入力している単語のインデックスを格納します。 let words = []; let wordIndex = 0; // 開始時刻 let startTime = Date now(); // ページ構成要素 const quoteElement = document getElementById('quote'); const messageElement = document getElementById('message'); const typedValueElement = document getElementById('typed-value'); ✅ 先に行き、あなたのゲームに多くの名言を追加します。 注: document getElementByIdを使用することで、コード内で必要なときにいつでも要素を取得することができます。これらの要素を定期的に参照することになるので、定数を使用して文字列リテラルのタイプミスを回避します。Vuejs や React などのフレームワークは、コードを集中管理するのに役立ちます。 1分ほどかけて、const, let, var の使い方のビデオを見てみましょう。 開始ロジックの追加 ゲームを始めるには、プレイヤーはスタートをクリックします。もちろん、プレイヤーがいつスタートボタンをクリックするかはわかりません。ここでイベントリスナーの出番です。イベントリスナーを使うと、何か (イベント) が発生するのを待ち受けて、それに応じてコードを実行することができます。この例では、ユーザーがスタートをクリックしたときにコードを実行したいと思います。 ユーザーが スタート をクリックしたときに、名言を選択し、ユーザーインターフェースを設定し、現在の単語とタイミングのトラッキングを設定する必要があります。以下は追加する必要のある JavaScript です。スクリプトブロックの後で説明します。 ```javascript // scriptjs の最後の方に documentgetElementById('start')",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 605,
    "chunk_index": 24,
    "total_chunks": 48
  },
  {
    "id": "ec108b076ac207ecd3574f7b0125c59f",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "ends, Watson It is a series of lessons, with the greatest for the last ', ]; // 単語のリストと、プレイヤーが現在入力している単語のインデックスを格納します。 let words = []; let wordIndex = 0; // 開始時刻 let startTime = Date now(); // ページ構成要素 const quoteElement = document getElementById('quote'); const messageElement = document getElementById('message'); const typedValueElement = document getElementById('typed-value'); ✅ 先に行き、あなたのゲームに多くの名言を追加します。 注: document getElementByIdを使用することで、コード内で必要なときにいつでも要素を取得することができます。これらの要素を定期的に参照することになるので、定数を使用して文字列リテラルのタイプミスを回避します。Vuejs や React などのフレームワークは、コードを集中管理するのに役立ちます。 1分ほどかけて、const, let, var の使い方のビデオを見てみましょう。 開始ロジックの追加 ゲームを始めるには、プレイヤーはスタートをクリックします。もちろん、プレイヤーがいつスタートボタンをクリックするかはわかりません。ここでイベントリスナーの出番です。イベントリスナーを使うと、何か (イベント) が発生するのを待ち受けて、それに応じてコードを実行することができます。この例では、ユーザーがスタートをクリックしたときにコードを実行したいと思います。 ユーザーが スタート をクリックしたときに、名言を選択し、ユーザーインターフェースを設定し、現在の単語とタイミングのトラッキングを設定する必要があります。以下は追加する必要のある JavaScript です。スクリプトブロックの後で説明します。 ```javascript // scriptjs の最後の方に documentgetElementById('start')addEventListener('click', () => {\n// 名言の取得\nconst quoteIndex = Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 624,
    "chunk_index": 25,
    "total_chunks": 48
  },
  {
    "id": "d042fa9c042fed825e3ee1b8301abfa9",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "the greatest for the last ', ]; // 単語のリストと、プレイヤーが現在入力している単語のインデックスを格納します。 let words = []; let wordIndex = 0; // 開始時刻 let startTime = Date now(); // ページ構成要素 const quoteElement = document getElementById('quote'); const messageElement = document getElementById('message'); const typedValueElement = document getElementById('typed-value'); ✅ 先に行き、あなたのゲームに多くの名言を追加します。 注: document getElementByIdを使用することで、コード内で必要なときにいつでも要素を取得することができます。これらの要素を定期的に参照することになるので、定数を使用して文字列リテラルのタイプミスを回避します。Vuejs や React などのフレームワークは、コードを集中管理するのに役立ちます。 1分ほどかけて、const, let, var の使い方のビデオを見てみましょう。 開始ロジックの追加 ゲームを始めるには、プレイヤーはスタートをクリックします。もちろん、プレイヤーがいつスタートボタンをクリックするかはわかりません。ここでイベントリスナーの出番です。イベントリスナーを使うと、何か (イベント) が発生するのを待ち受けて、それに応じてコードを実行することができます。この例では、ユーザーがスタートをクリックしたときにコードを実行したいと思います。 ユーザーが スタート をクリックしたときに、名言を選択し、ユーザーインターフェースを設定し、現在の単語とタイミングのトラッキングを設定する必要があります。以下は追加する必要のある JavaScript です。スクリプトブロックの後で説明します。 ```javascript // scriptjs の最後の方に documentgetElementById('start')addEventListener('click', () => { // 名言の取得 const quoteIndex = Mathfloor(Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 614,
    "chunk_index": 26,
    "total_chunks": 48
  },
  {
    "id": "264f92fbb4fae73a70c137e8f6b6366a",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "the greatest for the last ', ]; // 単語のリストと、プレイヤーが現在入力している単語のインデックスを格納します。 let words = []; let wordIndex = 0; // 開始時刻 let startTime = Date now(); // ページ構成要素 const quoteElement = document getElementById('quote'); const messageElement = document getElementById('message'); const typedValueElement = document getElementById('typed-value'); ✅ 先に行き、あなたのゲームに多くの名言を追加します。 注: document getElementByIdを使用することで、コード内で必要なときにいつでも要素を取得することができます。これらの要素を定期的に参照することになるので、定数を使用して文字列リテラルのタイプミスを回避します。Vuejs や React などのフレームワークは、コードを集中管理するのに役立ちます。 1分ほどかけて、const, let, var の使い方のビデオを見てみましょう。 開始ロジックの追加 ゲームを始めるには、プレイヤーはスタートをクリックします。もちろん、プレイヤーがいつスタートボタンをクリックするかはわかりません。ここでイベントリスナーの出番です。イベントリスナーを使うと、何か (イベント) が発生するのを待ち受けて、それに応じてコードを実行することができます。この例では、ユーザーがスタートをクリックしたときにコードを実行したいと思います。 ユーザーが スタート をクリックしたときに、名言を選択し、ユーザーインターフェースを設定し、現在の単語とタイミングのトラッキングを設定する必要があります。以下は追加する必要のある JavaScript です。スクリプトブロックの後で説明します。 ```javascript // scriptjs の最後の方に documentgetElementById('start')addEventListener('click', () => { // 名言の取得 const quoteIndex = Mathfloor(Mathrandom() * quotes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 618,
    "chunk_index": 27,
    "total_chunks": 48
  },
  {
    "id": "2f27efa3677ced70f5d59a7304e2b6b7",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "for the last ', ]; // 単語のリストと、プレイヤーが現在入力している単語のインデックスを格納します。 let words = []; let wordIndex = 0; // 開始時刻 let startTime = Date now(); // ページ構成要素 const quoteElement = document getElementById('quote'); const messageElement = document getElementById('message'); const typedValueElement = document getElementById('typed-value'); ✅ 先に行き、あなたのゲームに多くの名言を追加します。 注: document getElementByIdを使用することで、コード内で必要なときにいつでも要素を取得することができます。これらの要素を定期的に参照することになるので、定数を使用して文字列リテラルのタイプミスを回避します。Vuejs や React などのフレームワークは、コードを集中管理するのに役立ちます。 1分ほどかけて、const, let, var の使い方のビデオを見てみましょう。 開始ロジックの追加 ゲームを始めるには、プレイヤーはスタートをクリックします。もちろん、プレイヤーがいつスタートボタンをクリックするかはわかりません。ここでイベントリスナーの出番です。イベントリスナーを使うと、何か (イベント) が発生するのを待ち受けて、それに応じてコードを実行することができます。この例では、ユーザーがスタートをクリックしたときにコードを実行したいと思います。 ユーザーが スタート をクリックしたときに、名言を選択し、ユーザーインターフェースを設定し、現在の単語とタイミングのトラッキングを設定する必要があります。以下は追加する必要のある JavaScript です。スクリプトブロックの後で説明します。 ```javascript // scriptjs の最後の方に documentgetElementById('start')addEventListener('click', () => { // 名言の取得 const quoteIndex = Mathfloor(Mathrandom() * quoteslength);\nconst quote = quotes[quoteIndex];\n// 名言を言葉の配列に入れる\nwords = quote",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 645,
    "chunk_index": 28,
    "total_chunks": 48
  },
  {
    "id": "6a650d22a0701aa1beb359ae701c618e",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "= []; let wordIndex = 0; // 開始時刻 let startTime = Date now(); // ページ構成要素 const quoteElement = document getElementById('quote'); const messageElement = document getElementById('message'); const typedValueElement = document getElementById('typed-value'); ✅ 先に行き、あなたのゲームに多くの名言を追加します。 注: document getElementByIdを使用することで、コード内で必要なときにいつでも要素を取得することができます。これらの要素を定期的に参照することになるので、定数を使用して文字列リテラルのタイプミスを回避します。Vuejs や React などのフレームワークは、コードを集中管理するのに役立ちます。 1分ほどかけて、const, let, var の使い方のビデオを見てみましょう。 開始ロジックの追加 ゲームを始めるには、プレイヤーはスタートをクリックします。もちろん、プレイヤーがいつスタートボタンをクリックするかはわかりません。ここでイベントリスナーの出番です。イベントリスナーを使うと、何か (イベント) が発生するのを待ち受けて、それに応じてコードを実行することができます。この例では、ユーザーがスタートをクリックしたときにコードを実行したいと思います。 ユーザーが スタート をクリックしたときに、名言を選択し、ユーザーインターフェースを設定し、現在の単語とタイミングのトラッキングを設定する必要があります。以下は追加する必要のある JavaScript です。スクリプトブロックの後で説明します。 ```javascript // scriptjs の最後の方に documentgetElementById('start')addEventListener('click', () => { // 名言の取得 const quoteIndex = Mathfloor(Mathrandom() * quoteslength); const quote = quotes[quoteIndex]; // 名言を言葉の配列に入れる words = quotesplit(' ');\n// トラッキング用の単語インデックスをリセットする\nwordIndex = 0;\n// UI の更新\n// span 要素の配列を作成し、クラスを設定できるようにします。\nconst spanWords = words",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 668,
    "chunk_index": 29,
    "total_chunks": 48
  },
  {
    "id": "a0c3c0ac33ac48b1373eb7fa1072db06",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "quoteElement = document getElementById('quote'); const messageElement = document getElementById('message'); const typedValueElement = document getElementById('typed-value'); ✅ 先に行き、あなたのゲームに多くの名言を追加します。 注: document getElementByIdを使用することで、コード内で必要なときにいつでも要素を取得することができます。これらの要素を定期的に参照することになるので、定数を使用して文字列リテラルのタイプミスを回避します。Vuejs や React などのフレームワークは、コードを集中管理するのに役立ちます。 1分ほどかけて、const, let, var の使い方のビデオを見てみましょう。 開始ロジックの追加 ゲームを始めるには、プレイヤーはスタートをクリックします。もちろん、プレイヤーがいつスタートボタンをクリックするかはわかりません。ここでイベントリスナーの出番です。イベントリスナーを使うと、何か (イベント) が発生するのを待ち受けて、それに応じてコードを実行することができます。この例では、ユーザーがスタートをクリックしたときにコードを実行したいと思います。 ユーザーが スタート をクリックしたときに、名言を選択し、ユーザーインターフェースを設定し、現在の単語とタイミングのトラッキングを設定する必要があります。以下は追加する必要のある JavaScript です。スクリプトブロックの後で説明します。 ```javascript // scriptjs の最後の方に documentgetElementById('start')addEventListener('click', () => { // 名言の取得 const quoteIndex = Mathfloor(Mathrandom() * quoteslength); const quote = quotes[quoteIndex]; // 名言を言葉の配列に入れる words = quotesplit(' '); // トラッキング用の単語インデックスをリセットする wordIndex = 0; // UI の更新 // span 要素の配列を作成し、クラスを設定できるようにします。 const spanWords = wordsmap(function(word) { return <span>${word} </span>});\n// 文字列に変換して、名言を表示する innerHTML として設定します。\nquoteElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 675,
    "chunk_index": 30,
    "total_chunks": 48
  },
  {
    "id": "34ec4ff52acc51588ceabd6dfc34ca2e",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "const typedValueElement = document getElementById('typed-value'); ✅ 先に行き、あなたのゲームに多くの名言を追加します。 注: document getElementByIdを使用することで、コード内で必要なときにいつでも要素を取得することができます。これらの要素を定期的に参照することになるので、定数を使用して文字列リテラルのタイプミスを回避します。Vuejs や React などのフレームワークは、コードを集中管理するのに役立ちます。 1分ほどかけて、const, let, var の使い方のビデオを見てみましょう。 開始ロジックの追加 ゲームを始めるには、プレイヤーはスタートをクリックします。もちろん、プレイヤーがいつスタートボタンをクリックするかはわかりません。ここでイベントリスナーの出番です。イベントリスナーを使うと、何か (イベント) が発生するのを待ち受けて、それに応じてコードを実行することができます。この例では、ユーザーがスタートをクリックしたときにコードを実行したいと思います。 ユーザーが スタート をクリックしたときに、名言を選択し、ユーザーインターフェースを設定し、現在の単語とタイミングのトラッキングを設定する必要があります。以下は追加する必要のある JavaScript です。スクリプトブロックの後で説明します。 ```javascript // scriptjs の最後の方に documentgetElementById('start')addEventListener('click', () => { // 名言の取得 const quoteIndex = Mathfloor(Mathrandom() * quoteslength); const quote = quotes[quoteIndex]; // 名言を言葉の配列に入れる words = quotesplit(' '); // トラッキング用の単語インデックスをリセットする wordIndex = 0; // UI の更新 // span 要素の配列を作成し、クラスを設定できるようにします。 const spanWords = wordsmap(function(word) { return <span>${word} </span>}); // 文字列に変換して、名言を表示する innerHTML として設定します。 quoteElementinnerHTML = spanWords",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 660,
    "chunk_index": 31,
    "total_chunks": 48
  },
  {
    "id": "fa86118fd013e48910c566fef2827f2e",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "= document getElementById('typed-value'); ✅ 先に行き、あなたのゲームに多くの名言を追加します。 注: document getElementByIdを使用することで、コード内で必要なときにいつでも要素を取得することができます。これらの要素を定期的に参照することになるので、定数を使用して文字列リテラルのタイプミスを回避します。Vuejs や React などのフレームワークは、コードを集中管理するのに役立ちます。 1分ほどかけて、const, let, var の使い方のビデオを見てみましょう。 開始ロジックの追加 ゲームを始めるには、プレイヤーはスタートをクリックします。もちろん、プレイヤーがいつスタートボタンをクリックするかはわかりません。ここでイベントリスナーの出番です。イベントリスナーを使うと、何か (イベント) が発生するのを待ち受けて、それに応じてコードを実行することができます。この例では、ユーザーがスタートをクリックしたときにコードを実行したいと思います。 ユーザーが スタート をクリックしたときに、名言を選択し、ユーザーインターフェースを設定し、現在の単語とタイミングのトラッキングを設定する必要があります。以下は追加する必要のある JavaScript です。スクリプトブロックの後で説明します。 ```javascript // scriptjs の最後の方に documentgetElementById('start')addEventListener('click', () => { // 名言の取得 const quoteIndex = Mathfloor(Mathrandom() * quoteslength); const quote = quotes[quoteIndex]; // 名言を言葉の配列に入れる words = quotesplit(' '); // トラッキング用の単語インデックスをリセットする wordIndex = 0; // UI の更新 // span 要素の配列を作成し、クラスを設定できるようにします。 const spanWords = wordsmap(function(word) { return <span>${word} </span>}); // 文字列に変換して、名言を表示する innerHTML として設定します。 quoteElementinnerHTML = spanWordsjoin('');\n// 最初の単語を強調表示します。\nquoteElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 676,
    "chunk_index": 32,
    "total_chunks": 48
  },
  {
    "id": "15e4cc8afa0563ccb1e27d325dc6099d",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "✅ 先に行き、あなたのゲームに多くの名言を追加します。 注: document getElementByIdを使用することで、コード内で必要なときにいつでも要素を取得することができます。これらの要素を定期的に参照することになるので、定数を使用して文字列リテラルのタイプミスを回避します。Vuejs や React などのフレームワークは、コードを集中管理するのに役立ちます。 1分ほどかけて、const, let, var の使い方のビデオを見てみましょう。 開始ロジックの追加 ゲームを始めるには、プレイヤーはスタートをクリックします。もちろん、プレイヤーがいつスタートボタンをクリックするかはわかりません。ここでイベントリスナーの出番です。イベントリスナーを使うと、何か (イベント) が発生するのを待ち受けて、それに応じてコードを実行することができます。この例では、ユーザーがスタートをクリックしたときにコードを実行したいと思います。 ユーザーが スタート をクリックしたときに、名言を選択し、ユーザーインターフェースを設定し、現在の単語とタイミングのトラッキングを設定する必要があります。以下は追加する必要のある JavaScript です。スクリプトブロックの後で説明します。 ```javascript // scriptjs の最後の方に documentgetElementById('start')addEventListener('click', () => { // 名言の取得 const quoteIndex = Mathfloor(Mathrandom() * quoteslength); const quote = quotes[quoteIndex]; // 名言を言葉の配列に入れる words = quotesplit(' '); // トラッキング用の単語インデックスをリセットする wordIndex = 0; // UI の更新 // span 要素の配列を作成し、クラスを設定できるようにします。 const spanWords = wordsmap(function(word) { return <span>${word} </span>}); // 文字列に変換して、名言を表示する innerHTML として設定します。 quoteElementinnerHTML = spanWordsjoin(''); // 最初の単語を強調表示します。 quoteElementchildNodes[0]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 673,
    "chunk_index": 33,
    "total_chunks": 48
  },
  {
    "id": "3bdf3f16eba00297cff77d374ef298a9",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "✅ 先に行き、あなたのゲームに多くの名言を追加します。 注: document getElementByIdを使用することで、コード内で必要なときにいつでも要素を取得することができます。これらの要素を定期的に参照することになるので、定数を使用して文字列リテラルのタイプミスを回避します。Vuejs や React などのフレームワークは、コードを集中管理するのに役立ちます。 1分ほどかけて、const, let, var の使い方のビデオを見てみましょう。 開始ロジックの追加 ゲームを始めるには、プレイヤーはスタートをクリックします。もちろん、プレイヤーがいつスタートボタンをクリックするかはわかりません。ここでイベントリスナーの出番です。イベントリスナーを使うと、何か (イベント) が発生するのを待ち受けて、それに応じてコードを実行することができます。この例では、ユーザーがスタートをクリックしたときにコードを実行したいと思います。 ユーザーが スタート をクリックしたときに、名言を選択し、ユーザーインターフェースを設定し、現在の単語とタイミングのトラッキングを設定する必要があります。以下は追加する必要のある JavaScript です。スクリプトブロックの後で説明します。 ```javascript // scriptjs の最後の方に documentgetElementById('start')addEventListener('click', () => { // 名言の取得 const quoteIndex = Mathfloor(Mathrandom() * quoteslength); const quote = quotes[quoteIndex]; // 名言を言葉の配列に入れる words = quotesplit(' '); // トラッキング用の単語インデックスをリセットする wordIndex = 0; // UI の更新 // span 要素の配列を作成し、クラスを設定できるようにします。 const spanWords = wordsmap(function(word) { return <span>${word} </span>}); // 文字列に変換して、名言を表示する innerHTML として設定します。 quoteElementinnerHTML = spanWordsjoin(''); // 最初の単語を強調表示します。 quoteElementchildNodes[0]className = 'highlight';\n// 前のメッセージをクリアします。\nmessageElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 695,
    "chunk_index": 34,
    "total_chunks": 48
  },
  {
    "id": "5d4f484507972e55186795f68a9af112",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "や React などのフレームワークは、コードを集中管理するのに役立ちます。 1分ほどかけて、const, let, var の使い方のビデオを見てみましょう。 開始ロジックの追加 ゲームを始めるには、プレイヤーはスタートをクリックします。もちろん、プレイヤーがいつスタートボタンをクリックするかはわかりません。ここでイベントリスナーの出番です。イベントリスナーを使うと、何か (イベント) が発生するのを待ち受けて、それに応じてコードを実行することができます。この例では、ユーザーがスタートをクリックしたときにコードを実行したいと思います。 ユーザーが スタート をクリックしたときに、名言を選択し、ユーザーインターフェースを設定し、現在の単語とタイミングのトラッキングを設定する必要があります。以下は追加する必要のある JavaScript です。スクリプトブロックの後で説明します。 ```javascript // scriptjs の最後の方に documentgetElementById('start')addEventListener('click', () => { // 名言の取得 const quoteIndex = Mathfloor(Mathrandom() * quoteslength); const quote = quotes[quoteIndex]; // 名言を言葉の配列に入れる words = quotesplit(' '); // トラッキング用の単語インデックスをリセットする wordIndex = 0; // UI の更新 // span 要素の配列を作成し、クラスを設定できるようにします。 const spanWords = wordsmap(function(word) { return <span>${word} </span>}); // 文字列に変換して、名言を表示する innerHTML として設定します。 quoteElementinnerHTML = spanWordsjoin(''); // 最初の単語を強調表示します。 quoteElementchildNodes[0]className = 'highlight'; // 前のメッセージをクリアします。 messageElementinnerText = '';\n// テキストボックスの設定\n// テキストボックスをクリアします。\ntypedValueElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 615,
    "chunk_index": 35,
    "total_chunks": 48
  },
  {
    "id": "1ee40aa379aff88c6bba1798a94693a6",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "開始ロジックの追加 ゲームを始めるには、プレイヤーはスタートをクリックします。もちろん、プレイヤーがいつスタートボタンをクリックするかはわかりません。ここでイベントリスナーの出番です。イベントリスナーを使うと、何か (イベント) が発生するのを待ち受けて、それに応じてコードを実行することができます。この例では、ユーザーがスタートをクリックしたときにコードを実行したいと思います。 ユーザーが スタート をクリックしたときに、名言を選択し、ユーザーインターフェースを設定し、現在の単語とタイミングのトラッキングを設定する必要があります。以下は追加する必要のある JavaScript です。スクリプトブロックの後で説明します。 ```javascript // scriptjs の最後の方に documentgetElementById('start')addEventListener('click', () => { // 名言の取得 const quoteIndex = Mathfloor(Mathrandom() * quoteslength); const quote = quotes[quoteIndex]; // 名言を言葉の配列に入れる words = quotesplit(' '); // トラッキング用の単語インデックスをリセットする wordIndex = 0; // UI の更新 // span 要素の配列を作成し、クラスを設定できるようにします。 const spanWords = wordsmap(function(word) { return <span>${word} </span>}); // 文字列に変換して、名言を表示する innerHTML として設定します。 quoteElementinnerHTML = spanWordsjoin(''); // 最初の単語を強調表示します。 quoteElementchildNodes[0]className = 'highlight'; // 前のメッセージをクリアします。 messageElementinnerText = ''; // テキストボックスの設定 // テキストボックスをクリアします。 typedValueElementvalue = '';\n// フォーカスを合わせます。\ntypedValueElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 568,
    "chunk_index": 36,
    "total_chunks": 48
  },
  {
    "id": "643ea1e4dcf4d1766a2353dc9a3c9a41",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "スタート をクリックしたときに、名言を選択し、ユーザーインターフェースを設定し、現在の単語とタイミングのトラッキングを設定する必要があります。以下は追加する必要のある JavaScript です。スクリプトブロックの後で説明します。 ```javascript // scriptjs の最後の方に documentgetElementById('start')addEventListener('click', () => { // 名言の取得 const quoteIndex = Mathfloor(Mathrandom() * quoteslength); const quote = quotes[quoteIndex]; // 名言を言葉の配列に入れる words = quotesplit(' '); // トラッキング用の単語インデックスをリセットする wordIndex = 0; // UI の更新 // span 要素の配列を作成し、クラスを設定できるようにします。 const spanWords = wordsmap(function(word) { return <span>${word} </span>}); // 文字列に変換して、名言を表示する innerHTML として設定します。 quoteElementinnerHTML = spanWordsjoin(''); // 最初の単語を強調表示します。 quoteElementchildNodes[0]className = 'highlight'; // 前のメッセージをクリアします。 messageElementinnerText = ''; // テキストボックスの設定 // テキストボックスをクリアします。 typedValueElementvalue = ''; // フォーカスを合わせます。 typedValueElementfocus();\n// イベントハンドラを設定します。\n// タイマーを開始します。\nstartTime = new Date() getTime();\n});\n```\nコードを分解してみましょう 単語のトラッキングを設定します\nMath floor と Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 37,
    "total_chunks": 48
  },
  {
    "id": "99d958597c02910caddfbbe1624c7768",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "Mathfloor(Mathrandom() * quoteslength); const quote = quotes[quoteIndex]; // 名言を言葉の配列に入れる words = quotesplit(' '); // トラッキング用の単語インデックスをリセットする wordIndex = 0; // UI の更新 // span 要素の配列を作成し、クラスを設定できるようにします。 const spanWords = wordsmap(function(word) { return <span>${word} </span>}); // 文字列に変換して、名言を表示する innerHTML として設定します。 quoteElementinnerHTML = spanWordsjoin(''); // 最初の単語を強調表示します。 quoteElementchildNodes[0]className = 'highlight'; // 前のメッセージをクリアします。 messageElementinnerText = ''; // テキストボックスの設定 // テキストボックスをクリアします。 typedValueElementvalue = ''; // フォーカスを合わせます。 typedValueElementfocus(); // イベントハンドラを設定します。 // タイマーを開始します。 startTime = new Date() getTime(); }); ``` コードを分解してみましょう 単語のトラッキングを設定します Math floor と Mathrandom を使うと、quotes 配列から名言をランダムに選択することができます\nquote を words の配列に変換することで、プレイヤーが現在入力している単語を追跡することができます\nwordIndex は 0 に設定されます。プレイヤーは最初の単語から始めます\nUI を設定します\nspanWords の配列を作成し、その中に span 要素内の各単語を格納します\nこれにより、ディスプレイ上の単語を強調表示することができます\n配列を join して文字列を作成し、これを用いて quoteElement の innerHTML を更新することができます\nこれにより、プレイヤーに名言が表示されます\n最初の span 要素の className を highlight に設定し、黄色で強調表示します\ninnerText を '' に設定することで messageElement をクリーンにします\nテキストボックスを設定します\n現在の typedValueElement の value をクリアします\nfocus を typedValueElement に設定します\ngetTime を呼び出してタイマーを起動します\nタイピングロジックの追加\nプレイヤーが入力すると input イベントが発生します。このイベントリスナーは、プレイヤーが単語を正しく入力しているかどうかをチェックし、ゲームの現在の状態を処理します。script",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 762,
    "chunk_index": 38,
    "total_chunks": 48
  },
  {
    "id": "60db69b1c52919f1ea181609a91263b5",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "= ''; // フォーカスを合わせます。 typedValueElementfocus(); // イベントハンドラを設定します。 // タイマーを開始します。 startTime = new Date() getTime(); }); ``` コードを分解してみましょう 単語のトラッキングを設定します Math floor と Mathrandom を使うと、quotes 配列から名言をランダムに選択することができます quote を words の配列に変換することで、プレイヤーが現在入力している単語を追跡することができます wordIndex は 0 に設定されます。プレイヤーは最初の単語から始めます UI を設定します spanWords の配列を作成し、その中に span 要素内の各単語を格納します これにより、ディスプレイ上の単語を強調表示することができます 配列を join して文字列を作成し、これを用いて quoteElement の innerHTML を更新することができます これにより、プレイヤーに名言が表示されます 最初の span 要素の className を highlight に設定し、黄色で強調表示します innerText を '' に設定することで messageElement をクリーンにします テキストボックスを設定します 現在の typedValueElement の value をクリアします focus を typedValueElement に設定します getTime を呼び出してタイマーを起動します タイピングロジックの追加 プレイヤーが入力すると input イベントが発生します。このイベントリスナーは、プレイヤーが単語を正しく入力しているかどうかをチェックし、ゲームの現在の状態を処理します。scriptjs に戻り、最後に以下のコードを追加します。この後に分解していきます。\n```javascript\n// script",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 557,
    "chunk_index": 39,
    "total_chunks": 48
  },
  {
    "id": "39014a508cb9997bd59f4a6990aa2f7f",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "typedValueElementfocus(); // イベントハンドラを設定します。 // タイマーを開始します。 startTime = new Date() getTime(); }); ``` コードを分解してみましょう 単語のトラッキングを設定します Math floor と Mathrandom を使うと、quotes 配列から名言をランダムに選択することができます quote を words の配列に変換することで、プレイヤーが現在入力している単語を追跡することができます wordIndex は 0 に設定されます。プレイヤーは最初の単語から始めます UI を設定します spanWords の配列を作成し、その中に span 要素内の各単語を格納します これにより、ディスプレイ上の単語を強調表示することができます 配列を join して文字列を作成し、これを用いて quoteElement の innerHTML を更新することができます これにより、プレイヤーに名言が表示されます 最初の span 要素の className を highlight に設定し、黄色で強調表示します innerText を '' に設定することで messageElement をクリーンにします テキストボックスを設定します 現在の typedValueElement の value をクリアします focus を typedValueElement に設定します getTime を呼び出してタイマーを起動します タイピングロジックの追加 プレイヤーが入力すると input イベントが発生します。このイベントリスナーは、プレイヤーが単語を正しく入力しているかどうかをチェックし、ゲームの現在の状態を処理します。scriptjs に戻り、最後に以下のコードを追加します。この後に分解していきます。 ```javascript // scriptjs の最後の方に\ntypedValueElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 551,
    "chunk_index": 40,
    "total_chunks": 48
  },
  {
    "id": "ccd0d15bfe84930a9f9afede22a17390",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "イベントハンドラを設定します。 // タイマーを開始します。 startTime = new Date() getTime(); }); ``` コードを分解してみましょう 単語のトラッキングを設定します Math floor と Mathrandom を使うと、quotes 配列から名言をランダムに選択することができます quote を words の配列に変換することで、プレイヤーが現在入力している単語を追跡することができます wordIndex は 0 に設定されます。プレイヤーは最初の単語から始めます UI を設定します spanWords の配列を作成し、その中に span 要素内の各単語を格納します これにより、ディスプレイ上の単語を強調表示することができます 配列を join して文字列を作成し、これを用いて quoteElement の innerHTML を更新することができます これにより、プレイヤーに名言が表示されます 最初の span 要素の className を highlight に設定し、黄色で強調表示します innerText を '' に設定することで messageElement をクリーンにします テキストボックスを設定します 現在の typedValueElement の value をクリアします focus を typedValueElement に設定します getTime を呼び出してタイマーを起動します タイピングロジックの追加 プレイヤーが入力すると input イベントが発生します。このイベントリスナーは、プレイヤーが単語を正しく入力しているかどうかをチェックし、ゲームの現在の状態を処理します。scriptjs に戻り、最後に以下のコードを追加します。この後に分解していきます。 ```javascript // scriptjs の最後の方に typedValueElementaddEventListener('input', () => {\n// 現在の単語を取得します\nconst currentWord = words[wordIndex];\n// 現在の値を取得します\nconst typedValue = typedValueElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 593,
    "chunk_index": 41,
    "total_chunks": 48
  },
  {
    "id": "bfb118dfb79499925cabee7154871765",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "Mathrandom を使うと、quotes 配列から名言をランダムに選択することができます quote を words の配列に変換することで、プレイヤーが現在入力している単語を追跡することができます wordIndex は 0 に設定されます。プレイヤーは最初の単語から始めます UI を設定します spanWords の配列を作成し、その中に span 要素内の各単語を格納します これにより、ディスプレイ上の単語を強調表示することができます 配列を join して文字列を作成し、これを用いて quoteElement の innerHTML を更新することができます これにより、プレイヤーに名言が表示されます 最初の span 要素の className を highlight に設定し、黄色で強調表示します innerText を '' に設定することで messageElement をクリーンにします テキストボックスを設定します 現在の typedValueElement の value をクリアします focus を typedValueElement に設定します getTime を呼び出してタイマーを起動します タイピングロジックの追加 プレイヤーが入力すると input イベントが発生します。このイベントリスナーは、プレイヤーが単語を正しく入力しているかどうかをチェックし、ゲームの現在の状態を処理します。scriptjs に戻り、最後に以下のコードを追加します。この後に分解していきます。 ```javascript // scriptjs の最後の方に typedValueElementaddEventListener('input', () => { // 現在の単語を取得します const currentWord = words[wordIndex]; // 現在の値を取得します const typedValue = typedValueElementvalue;\nif (typedValue === currentWord && wordIndex === words",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 539,
    "chunk_index": 42,
    "total_chunks": 48
  },
  {
    "id": "4488bcde00ba5133899eeb5a27cc2f48",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "は 0 に設定されます。プレイヤーは最初の単語から始めます UI を設定します spanWords の配列を作成し、その中に span 要素内の各単語を格納します これにより、ディスプレイ上の単語を強調表示することができます 配列を join して文字列を作成し、これを用いて quoteElement の innerHTML を更新することができます これにより、プレイヤーに名言が表示されます 最初の span 要素の className を highlight に設定し、黄色で強調表示します innerText を '' に設定することで messageElement をクリーンにします テキストボックスを設定します 現在の typedValueElement の value をクリアします focus を typedValueElement に設定します getTime を呼び出してタイマーを起動します タイピングロジックの追加 プレイヤーが入力すると input イベントが発生します。このイベントリスナーは、プレイヤーが単語を正しく入力しているかどうかをチェックし、ゲームの現在の状態を処理します。scriptjs に戻り、最後に以下のコードを追加します。この後に分解していきます。 ```javascript // scriptjs の最後の方に typedValueElementaddEventListener('input', () => { // 現在の単語を取得します const currentWord = words[wordIndex]; // 現在の値を取得します const typedValue = typedValueElementvalue; if (typedValue === currentWord && wordIndex === wordslength - 1) {\n// 文の終了\n// 成功を表示します\nconst elapsedTime = new Date() getTime() - startTime;\nconst message = CONGRATULATIONS",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 43,
    "total_chunks": 48
  },
  {
    "id": "cbeb4516fd53b19097adeb95635d262a",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "span 要素の className を highlight に設定し、黄色で強調表示します innerText を '' に設定することで messageElement をクリーンにします テキストボックスを設定します 現在の typedValueElement の value をクリアします focus を typedValueElement に設定します getTime を呼び出してタイマーを起動します タイピングロジックの追加 プレイヤーが入力すると input イベントが発生します。このイベントリスナーは、プレイヤーが単語を正しく入力しているかどうかをチェックし、ゲームの現在の状態を処理します。scriptjs に戻り、最後に以下のコードを追加します。この後に分解していきます。 ```javascript // scriptjs の最後の方に typedValueElementaddEventListener('input', () => { // 現在の単語を取得します const currentWord = words[wordIndex]; // 現在の値を取得します const typedValue = typedValueElementvalue; if (typedValue === currentWord && wordIndex === wordslength - 1) { // 文の終了 // 成功を表示します const elapsedTime = new Date() getTime() - startTime; const message = CONGRATULATIONSYou finished in ${elapsedTime / 1000} seconds ;\nmessageElement innerText = message;\n} else if (typedValue endsWith(' ') && typedValue trim() === currentWord) {\n// 単語の終了\n// 新しい単語用に 'typedValueElement' をクリアします\ntypedValueElement value = '';\n// 次の単語に移ります\nwordIndex++;\n// 名言内のすべての要素のクラス名をリセットします\nfor (const wordElement of quoteElement childNodes) {\nwordElement className = '';\n}\n// 新しい単語を強調表示します\nquoteElement childNodes[wordIndex]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 44,
    "total_chunks": 48
  },
  {
    "id": "d3a6f2d3da2585d7ac1c5a89e369438b",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "wordIndex === wordslength - 1) { // 文の終了 // 成功を表示します const elapsedTime = new Date() getTime() - startTime; const message = CONGRATULATIONSYou finished in ${elapsedTime / 1000} seconds ; messageElement innerText = message; } else if (typedValue endsWith(' ') && typedValue trim() === currentWord) { // 単語の終了 // 新しい単語用に 'typedValueElement' をクリアします typedValueElement value = ''; // 次の単語に移ります wordIndex++; // 名言内のすべての要素のクラス名をリセットします for (const wordElement of quoteElement childNodes) { wordElement className = ''; } // 新しい単語を強調表示します quoteElement childNodes[wordIndex]className = 'highlight';\n} else if (currentWord startsWith(typedValue)) {\n// 現在正しく入力されている状態\n// 次の単語を強調表示します\ntypedValueElement className = '';\n} else {\n// エラー状態\ntypedValueElement className = 'error';\n}\n});\n```\nコードを分解してみましょう",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 293,
    "chunk_index": 45,
    "total_chunks": 48
  },
  {
    "id": "dd94d5328f8c57fae65f5a32d8abfb7d",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "messageElement innerText = message; } else if (typedValue endsWith(' ') && typedValue trim() === currentWord) { // 単語の終了 // 新しい単語用に 'typedValueElement' をクリアします typedValueElement value = ''; // 次の単語に移ります wordIndex++; // 名言内のすべての要素のクラス名をリセットします for (const wordElement of quoteElement childNodes) { wordElement className = ''; } // 新しい単語を強調表示します quoteElement childNodes[wordIndex]className = 'highlight'; } else if (currentWord startsWith(typedValue)) { // 現在正しく入力されている状態 // 次の単語を強調表示します typedValueElement className = ''; } else { // エラー状態 typedValueElement className = 'error'; } }); ``` コードを分解してみましょうまず、現在の単語とプレイヤーがこれまでに入力した値を取得します。次にウォーターフォールロジックがあり、ここでは引用が完全であるかどうか、単語が完全であるかどうか、単語が正しいかどうか、(最後に) エラーがあるかどうかをチェックします。\n名言が完成しており、typepedValue が currentWord と等しく、wordIndex が words の length よりも 1 つ小さい値であることを示している場合\n現在の時刻から startTime を引くことで elapsedTime を計算します\nelapsedTime を 1,000 で割り、ミリ秒から秒に変換します\n成功メッセージを表示します\n単語は完成しており、typedValue がスペース (単語の終わり) で終わり、typedValue が currentWord と同じであることを示している場合\n次の単語が入力されるように typedElement の value を '' に設定します\n次の単語に移動するために wordIndex をインクリメントします\nquoteElement のすべての childNodes をループして className を '' に設定し、デフォルトの表示に戻します\n現在の単語の className を highlight に設定して、それを次のタイプの単語としてフラグを立てます\n単語は現在 (完全ではないが) 正しく入力されており、typedValue で始まる currentWord で示される場合\nclassName をクリアすることで typedValueElement がデフォルトで表示されるようにします\nここまで来たら、エラーが発生しています\ntypedValueElement の className を error に設定します\nアプリケーションのテスト\n最後までやりましたね",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 773,
    "chunk_index": 46,
    "total_chunks": 48
  },
  {
    "id": "c023b44ed3e9c025c46bfc41cd1f6046",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "タイピングゲーム",
    "content": "'error'; } }); ``` コードを分解してみましょうまず、現在の単語とプレイヤーがこれまでに入力した値を取得します。次にウォーターフォールロジックがあり、ここでは引用が完全であるかどうか、単語が完全であるかどうか、単語が正しいかどうか、(最後に) エラーがあるかどうかをチェックします。 名言が完成しており、typepedValue が currentWord と等しく、wordIndex が words の length よりも 1 つ小さい値であることを示している場合 現在の時刻から startTime を引くことで elapsedTime を計算します elapsedTime を 1,000 で割り、ミリ秒から秒に変換します 成功メッセージを表示します 単語は完成しており、typedValue がスペース (単語の終わり) で終わり、typedValue が currentWord と同じであることを示している場合 次の単語が入力されるように typedElement の value を '' に設定します 次の単語に移動するために wordIndex をインクリメントします quoteElement のすべての childNodes をループして className を '' に設定し、デフォルトの表示に戻します 現在の単語の className を highlight に設定して、それを次のタイプの単語としてフラグを立てます 単語は現在 (完全ではないが) 正しく入力されており、typedValue で始まる currentWord で示される場合 className をクリアすることで typedValueElement がデフォルトで表示されるようにします ここまで来たら、エラーが発生しています typedValueElement の className を error に設定します アプリケーションのテスト 最後までやりましたね最後のステップは、私たちのアプリケーションが動作することを確認することです。試してみてください。エラーがあっても心配しないでください。すべての開発者 がエラーに遭遇します。メッセージを調べて、必要に応じてデバッグしていきましょう。\nスタート をクリックして、入力を開始してください。前に見たアニメーションに少し似ているはずです。\n🚀 チャレンジ\nより多くの機能を追加しましょう。\n完了時に input イベントリスナーを無効にし、ボタンがクリックされたときに再度有効にします\nプレイヤーが名言を完了したときにテキストボックスを無効にします\n成功メッセージを含むモーダルダイアログボックスを表示します\nlocalStorage を使ってハイスコアを保存します\nレッスン後の小テスト\nレッスン後の小テスト\n復習と自己学習\nWeb ブラウザを介して開発者が利用できるすべてのイベントを読んで、それぞれを使用するシナリオを検討してください。\n課題\n新しいキーボードゲームを作成する",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22453,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 951,
    "chunk_index": 47,
    "total_chunks": 48
  },
  {
    "id": "bf3ac4d659ff2a253f1900bc34c3b5ee",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\1-intro-to-html\\assignment.md",
    "source_type": "git_repo",
    "title": "Practice your HTML: Build a blog mockup",
    "content": "Practice your HTML: Build a blog mockup\nInstructions\nImagine you are designing, or redesigning, your personal web site. Create a graphical mockup of your site, and then write down the HTML markup you would use to build out the various elements of the site. You can do this on paper, and scan it, or use software of your choice, just make sure to hand-code the HTML markup.\nRubric\n| Criteria | Exemplary                                                                           | Adequate                                                                         | Needs Improvement                                                                 |\n| -------- | ----------------------------------------------------------------------------------- | -------------------------------------------------------------------------------- | --------------------------------------------------------------------------------- |\n|          | A blog layout is represented visually with at least 10 elements of markup displayed | A blog layout is represented visually with around 5 elements of markup displayed | A blog layout is represented visually with at most 3 elements of markup displayed |",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1201,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\1-intro-to-html\\assignment.md",
      "source_type": "git_repo"
    },
    "token_count": 163,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "12aba4431599ef89d45bff6f0050840e",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\1-intro-to-html\\README.md",
    "source_type": "git_repo",
    "title": "Welcome to my Virtual Terrarium",
    "content": "Terrarium Project Part 1: Introduction to HTML\nSketchnote by Tomomi Imura\nPre-Lecture Quiz\nPre-lecture quiz\nCheck out video\nIntroduction\nHTML, or HyperText Markup Language, is the 'skeleton' of the web If CSS 'dresses up' your HTML and JavaScript brings it to life, HTML is the body of your web application HTML's syntax even reflects that idea, as it includes \"head\", \"body\", and \"footer\" tags In this lesson, we're going to use HTML to layout the 'skeleton' of our virtual terrarium's interface It will have a title and three columns: a right and a left column where the draggable plants live, and a center area that will be the actual glass-looking terrarium By the end of this lesson, you will be able to see the plants in the columns, but the interface will look a little strange; don't worry, in the next section you will add CSS styles to the interface to make it look better Task\nOn your computer, create a folder called 'terrarium' and inside it, a file called 'index html' You can do this in Visual Studio Code after you create your terrarium folder by opening a new VS Code window, clicking 'open folder', and navigating to your new folder Click the small 'file' button in the Explorer pane and create the new file:\nOr\nUse these commands on your git bash:\n* mkdir terrarium\n* cd terrarium\n* touch index html\n* code index html or nano index html\nindex html files indicate to a browser that it is the default file in a folder; URLs such as https://anysite com/test might be built using a folder structure including a folder called test with index html inside it; index html doesn't have to show in a URL The DocType and html tags\nThe first line of an HTML file is its doctype It's a little surprising that you need to have this line at the very top of the file, but it tells older browsers that the browser needs to render the page in a standard mode, following the current html specification Tip: in VS Code, you can hover over a tag and get information about its use from the MDN Reference guides The second line should be the <html> tag's opening tag, followed right now by its closing tag </html> These tags are the root elements of your interface",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11128,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\1-intro-to-html\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "506af7de3e55e9203acefe98ceebfb7f",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\1-intro-to-html\\README.md",
    "source_type": "git_repo",
    "title": "Welcome to my Virtual Terrarium",
    "content": "the very top of the file, but it tells older browsers that the browser needs to render the page in a standard mode, following the current html specification Tip: in VS Code, you can hover over a tag and get information about its use from the MDN Reference guides The second line should be the <html> tag's opening tag, followed right now by its closing tag </html> These tags are the root elements of your interfaceTask\nAdd these lines at the top of your index html file:\n```HTML\n```\n✅ There are a few different modes that can be determined by setting the DocType with a query string: Quirks Mode and Standards Mode These modes used to support really old browsers that aren't normally used nowadays (Netscape Navigator 4 and Internet Explorer 5) You can stick to the standard doctype declaration The document's 'head'\nThe 'head' area of the HTML document includes crucial information about your web page, also known as metadata In our case, we tell the web server to which this page will be sent to be rendered, these four things:\nthe page's title\npage metadata including:\nthe 'character set', telling about what character encoding is used in the page\nbrowser information, including x-ua-compatible which indicates that the IE=edge browser is supported\ninformation about how the viewport should behave when it is loaded Setting the viewport to have an initial scale of 1 controls the zoom level when the page is first loaded Task\nAdd a 'head' block to your document in between the opening and closing <html> tags html\n<head>\n<title>Welcome to my Virtual Terrarium</title>\n<meta charset=\"utf-8\" />\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n</head>\n✅ What would happen if you set a viewport meta tag like this: <meta name=\"viewport\" content=\"width=600\"> Read more about the viewport The document's body\nHTML Tags\nIn HTML, you add tags to your html file to create elements of a web page Each tag usually has an opening and closing tag, like this: <p>hello</p> to indicate a paragraph",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11128,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\1-intro-to-html\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 455,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "1baf0c96c03e985b4d44d274326efd01",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\1-intro-to-html\\README.md",
    "source_type": "git_repo",
    "title": "Welcome to my Virtual Terrarium",
    "content": "<title>Welcome to my Virtual Terrarium</title> <meta charset=\"utf-8\" /> <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /> </head> ✅ What would happen if you set a viewport meta tag like this: <meta name=\"viewport\" content=\"width=600\"> Read more about the viewport The document's body HTML Tags In HTML, you add tags to your html file to create elements of a web page Each tag usually has an opening and closing tag, like this: <p>hello</p> to indicate a paragraphCreate your interface's body by adding a set of <body> tags inside the <html> tag pair; your markup now looks like this:\nTask\n```html\nWelcome to my Virtual Terrarium\n```\nNow, you can start building out your page Normally, you use <div> tags to create the separate elements in a page We'll create a series of <div> elements which will contain images Images\nOne html tag that doesn't need a closing tag is the <img> tag, because it has a src element that contains all the information the page needs to render the item Create a folder in your app called images and in that, add all the images in the source code folder; (there are 14 images of plants) Task\nAdd those plant images into two columns between the <body></body> tags:\n```html\n```\nNote: Spans vs Divs Divs are considered 'block' elements, and Spans are 'inline' What would happen if you transformed these divs to spans With this markup, the plants now show up on the screen It looks pretty bad, because they aren't yet styled using CSS, and we'll do that in the next lesson Each image has alt text that will appear even if you can't see or render an image This is an important attribute to include for accessibility Learn more about accessibility in future lessons; for now, remember that the alt attribute provides alternative information for an image if a user for some reason cannot view it (because of slow connection, an error in the src attribute, or if the user uses a screen reader) ✅ Did you notice that each image has the same alt tag Is this good practice Why or why not Can you improve this code",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11128,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\1-intro-to-html\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "08bc9b880a7e98416fba5c57ce52825b",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\1-intro-to-html\\README.md",
    "source_type": "git_repo",
    "title": "Welcome to my Virtual Terrarium",
    "content": "to include for accessibility Learn more about accessibility in future lessons; for now, remember that the alt attribute provides alternative information for an image if a user for some reason cannot view it (because of slow connection, an error in the src attribute, or if the user uses a screen reader) ✅ Did you notice that each image has the same alt tag Is this good practice Why or why not Can you improve this codeSemantic markup\nIn general, it's preferable to use meaningful 'semantics' when writing HTML What does that mean It means that you use HTML tags to represent the type of data or interaction they were designed for For example, the main title text on a page should use an <h1> tag Add the following line right below your opening <body> tag:\n```html\nMy Terrarium\n```\nUsing semantic markup such as having headers be <h1> and unordered lists be rendered as <ul> helps screen readers navigate through a page In general, buttons should be written as <button> and lists should be <li> While it's possible to use specially styled <span> elements with click handlers to mock buttons, it's better for disabled users to use technologies to determine where on a page a button resides, and to interact with it, if the element appears as a button For this reason, try to use semantic markup as much as possible ✅ Take a look at a screen reader and how it interacts with a web page Can you see why having non semantic markup might frustrate the user The terrarium\nThe last part of this interface involves creating markup that will be styled to create a terrarium Task:\nAdd this markup above the last </div> tag:\n```html\n```\n✅ Even though you added this markup to the screen, you see absolutely nothing render Why 🚀Challenge\nThere are some wild 'older' tags in HTML that are still fun to play with, though you shouldn't use deprecated tags such as these tags in your markup Still, can you use the old <marquee> tag to make the h1 title scroll horizontally (if you do, don't forget to remove it afterwards)\nPost-Lecture Quiz\nPost-lecture quiz\nReview & Self Study\nHTML is the 'tried and true' building block system that has helped build the web into what it is today Learn a little about its history by studying some old and new tags Can you figure out why some tags were deprecated and some added",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11128,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\1-intro-to-html\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "9f45512c702ef2f39d7f7c8ab09c2684",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\1-intro-to-html\\README.md",
    "source_type": "git_repo",
    "title": "Welcome to my Virtual Terrarium",
    "content": "can you use the old <marquee> tag to make the h1 title scroll horizontally (if you do, don't forget to remove it afterwards) Post-Lecture Quiz Post-lecture quiz Review & Self Study HTML is the 'tried and true' building block system that has helped build the web into what it is today Learn a little about its history by studying some old and new tags Can you figure out why some tags were deprecated and some addedWhat tags might be introduced in the future Learn more about building sites for the web and mobile devices at Microsoft Learn Assignment\nPractice your HTML: Build a blog mockup",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11128,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\1-intro-to-html\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 124,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "cef68288fc408781f198dbc7f58a7ca7",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\2-intro-to-css\\assignment.md",
    "source_type": "git_repo",
    "title": "CSS Refactoring",
    "content": "CSS Refactoring\nInstructions\nRestyle the terrarium using either Flexbox or CSS Grid, and take screenshots to show that you have tested it on several browsers. You might need to change the markup so create a new version of the app with the art in place for your refactor. Don't worry about making the elements draggable; only refactor the HTML and CSS for now.\nRubric\n| Criteria | Exemplary                                                         | Adequate                      | Needs Improvement                    |\n| -------- | ----------------------------------------------------------------- | ----------------------------- | ------------------------------------ |\n|          | Present a completely restyled terrarium using Flexbox or CSS Grid | Restyle a few of the elements | Fail to restyle the terrarium at all |",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 846,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\2-intro-to-css\\assignment.md",
      "source_type": "git_repo"
    },
    "token_count": 141,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "94afb7e5acffdaddb10d45c5f63da1c2",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\2-intro-to-css\\README.md",
    "source_type": "git_repo",
    "title": "Terrarium Project Part 2: Introduction to CSS",
    "content": "Terrarium Project Part 2: Introduction to CSS\nSketchnote by Tomomi Imura\nPre-Lecture Quiz\nPre-lecture quiz\nIntroduction\nCSS, or Cascading Style Sheets, solve an important problem of web development: how to make your web site look nice Styling your apps makes them more usable and nicer-looking; you can also use CSS to create Responsive Web Design (RWD) - allowing your apps to look good no matter what screen size they are displayed on CSS is not only about making your app look nice; its spec includes animations and transforms that can enable sophisticated interactions for your apps The CSS Working Group helps maintain current CSS specifications; you can follow their work at World Wide Web Consortium's site Note, CSS is a language that evolves, like everything on the web, and not all browsers support newer parts of the specification Always check your implementations by consulting CanIUse com In this lesson, we're going to add styles to our online terrarium and learn more about several CSS concepts: the cascade, inheritance, and the use of selectors, positioning, and using CSS to build layouts In the process we will layout the terrarium and create the actual terrarium itself Prerequisite\nYou should have the HTML for your terrarium built and ready to be styled Check out video\nTask\nIn your terrarium folder, create a new file called style css Import that file in the <head> section:\nhtml\n<link rel=\"stylesheet\" href=\" /style css\" />\nThe Cascade\nCascading Style Sheets incorporate the idea that the styles 'cascade' such that the application of a style is guided by its priority Styles set by a web site author take priority over those set by a browser Styles set 'inline' take priority over those set in an external style sheet Task\nAdd the inline style \"color: red\" to your <h1> tag:\n```HTML\nMy Terrarium\n```\nThen, add the following code to your style css file:\nCSS\nh1 {\ncolor: blue;\n}\n✅ Which color displays in your web app Why Can you find a way to override styles When would you want to do this, or why not Inheritance\nStyles are inherited from an ancestor style to a descendent, such that nested elements inherit the styles of their parents",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10035,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\2-intro-to-css\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 463,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "c59094be34806cbfb5a626928b7555f1",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\2-intro-to-css\\README.md",
    "source_type": "git_repo",
    "title": "Terrarium Project Part 2: Introduction to CSS",
    "content": "inline style \"color: red\" to your <h1> tag: ```HTML My Terrarium ``` Then, add the following code to your style css file: CSS h1 { color: blue; } ✅ Which color displays in your web app Why Can you find a way to override styles When would you want to do this, or why not Inheritance Styles are inherited from an ancestor style to a descendent, such that nested elements inherit the styles of their parentsTask\nSet the body's font to a given font, and check to see a nested element's font:\nCSS\nbody {\nfont-family: helvetica, arial, sans-serif;\n}\nOpen your browser's console to the 'Elements' tab and observe the H1's font It inherits its font from the body, as stated within the browser:\n✅ Can you make a nested style inherit a different property CSS Selectors\nTags\nSo far, your style css file has only a few tags styled, and the app looks pretty strange:\n```CSS\nbody {\nfont-family: helvetica, arial, sans-serif;\n}\nh1 {\ncolor: #3a241d;\ntext-align: center;\n}\n```\nThis way of styling a tag gives you control over unique elements, but you need to control the styles of many plants in your terrarium To do that, you need to leverage CSS selectors Ids\nAdd some style to layout the left and right containers Since there is only one left container and only one right container, they are given ids in the markup To style them, use #:\n```CSS\nleft-container {\nbackground-color: #eee;\nwidth: 15%;\nleft: 0px;\ntop: 0px;\nposition: absolute;\nheight: 100%;\npadding: 10px;\n}\nright-container {\nbackground-color: #eee;\nwidth: 15%;\nright: 0px;\ntop: 0px;\nposition: absolute;\nheight: 100%;\npadding: 10px;\n}\n```\nHere, you have placed these containers with absolute positioning to the far left and right of the screen, and used percentages for their width so that they can scale for small mobile screens ✅ This code is quite repeated, thus not \"DRY\" (Don't Repeat Yourself); can you find a better way to style these ids, perhaps with an id and a class",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10035,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\2-intro-to-css\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "824db3575ee8eb4f2437f484b1a66b87",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\2-intro-to-css\\README.md",
    "source_type": "git_repo",
    "title": "Terrarium Project Part 2: Introduction to CSS",
    "content": "width: 15%; right: 0px; top: 0px; position: absolute; height: 100%; padding: 10px; } ``` Here, you have placed these containers with absolute positioning to the far left and right of the screen, and used percentages for their width so that they can scale for small mobile screens ✅ This code is quite repeated, thus not \"DRY\" (Don't Repeat Yourself); can you find a better way to style these ids, perhaps with an id and a classYou would need to change the markup and refactor the CSS:\n```html\n```\nClasses\nIn the example above, you styled two unique elements on the screen If you want styles to apply to many elements on the screen, you can use CSS classes Do this to layout the plants in the left and right containers Notice that each plant in the HTML markup has a combination of ids and classes The ids here are used by the JavaScript that you will add later to manipulate the terrarium plant placement The classes, however, give all the plants a given style ```html\n```\nAdd the following to your style css file:\n```CSS plant-holder {\nposition: relative;\nheight: 13%;\nleft: -10px;\n} plant {\nposition: absolute;\nmax-width: 150%;\nmax-height: 150%;\nz-index: 2;\n}\n```\nNotable in this snippet is the mixture of relative and absolute positioning, which we'll cover in the next section Take a look at the way heights are handled by percentages:\nYou set the height of the plant holder to 13%, a good number to ensure that all the plants are displayed in each vertical container without need for scrolling You set the plant holder to move to the left to allow the plants to be more centered within their container The images have a large amount of transparent background so as to make them more draggable, so need to be pushed to the left to fit better on the screen Then, the plant itself is given a max-width of 150% This allows it to scale down as the browser scales down Try resizing your browser; the plants stay in their containers but scale down to fit Also notable is the use of z-index, which controls the relative altitude of an element (so that the plants sit on top of the container and appear to sit inside the terrarium) ✅ Why do you need both a plant holder and a plant CSS selector",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10035,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\2-intro-to-css\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "029c4e6c08dcefa12cf9f36f061af5d8",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\2-intro-to-css\\README.md",
    "source_type": "git_repo",
    "title": "Terrarium Project Part 2: Introduction to CSS",
    "content": "a max-width of 150% This allows it to scale down as the browser scales down Try resizing your browser; the plants stay in their containers but scale down to fit Also notable is the use of z-index, which controls the relative altitude of an element (so that the plants sit on top of the container and appear to sit inside the terrarium) ✅ Why do you need both a plant holder and a plant CSS selectorCSS Positioning\nMixing position properties (there are static, relative, fixed, absolute, and sticky positions) can be a little tricky, but when done properly it gives you good control over the elements on your pages Absolute positioned elements are positioned relative to their nearest positioned ancestors, and if there are none, it is positioned according to the document body Relative positioned elements are positioned based on the CSS's directions to adjust its placement away from its initial position In our sample, the plant-holder is a relative-positioned element that is positioned within an absolute-positioned container The resultant behavior is that the side bar containers are pinned left and right, and the plant-holder is nested, adjusting itself within the side bars, giving space for the plants to be placed in a vertical row The plant itself also has absolute positioning, necessary to making it draggable, as you will discover in the next lesson ✅ Experiment with switching the types of positioning of the side containers and the plant-holder What happens CSS Layouts\nNow you will use what you learned to build the terrarium itself, all using CSS First, style the terrarium div children as a rounded rectangle using CSS:\n```CSS jar-walls {\nheight: 80%;\nwidth: 60%;\nbackground: #d1e1df;\nborder-radius: 1rem;\nposition: absolute;\nbottom: 0 5%;\nleft: 20%;\nopacity: 0 5;\nz-index: 1;\n} jar-top {\nwidth: 50%;\nheight: 5%;\nbackground: #d1e1df;\nposition: absolute;\nbottom: 80 5%;\nleft: 25%;\nopacity: 0 7;\nz-index: 1;\n} jar-bottom {\nwidth: 50%;\nheight: 1%;\nbackground: #d1e1df;\nposition: absolute;\nbottom: 0%;\nleft: 25%;\nopacity: 0 7;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10035,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\2-intro-to-css\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "289aa2c6a38296beab3c4693aa645b9f",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\2-intro-to-css\\README.md",
    "source_type": "git_repo",
    "title": "Terrarium Project Part 2: Introduction to CSS",
    "content": "CSS First, style the terrarium div children as a rounded rectangle using CSS: ```CSS jar-walls { height: 80%; width: 60%; background: #d1e1df; border-radius: 1rem; position: absolute; bottom: 0 5%; left: 20%; opacity: 0 5; z-index: 1; } jar-top { width: 50%; height: 5%; background: #d1e1df; position: absolute; bottom: 80 5%; left: 25%; opacity: 0 7; z-index: 1; } jar-bottom { width: 50%; height: 1%; background: #d1e1df; position: absolute; bottom: 0%; left: 25%; opacity: 0 7; }dirt {\nwidth: 60%;\nheight: 5%;\nbackground: #3a241d;\nposition: absolute;\nborder-radius: 0 0 1rem 1rem;\nbottom: 1%;\nleft: 20%;\nopacity: 0 7;\nz-index: -1;\n}\n```\nNote the use of percentages here If you scale your browser down, you can see how the jar scales as well Also notice the widths and height percentages for the jar elements and how each element is absolutely positioned in the center, pinned to the bottom of the viewport We are also using rem for the border-radius, a font-relative length Read more about this type of relative measurement in the CSS spec ✅ Try changing the jar colors and opacity vs those of the dirt What happens Why 🚀Challenge\nAdd a 'bubble' shine to the left bottom area of the jar to make it look more glasslike You will be styling the jar-glossy-long and jar-glossy-short to look like a reflected shine Here's how it would look:\nTo complete the post-lecture quiz, go through this Learn module: Style your HTML app with CSS\nPost-Lecture Quiz\nPost-lecture quiz\nReview & Self Study\nCSS seems deceptively straightforward, but there are many challenges when trying to style an app perfectly for all browsers and all screen sizes CSS-Grid and Flexbox are tools that have been developed to make the job a little more structured and more reliable Learn about these tools by playing Flexbox Froggy and Grid Garden Assignment\nCSS Refactoring",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10035,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\2-intro-to-css\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "44b10287cf7849748233e16297c3ed8a",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\assignment.md",
    "source_type": "git_repo",
    "title": "Work a bit more with the DOM",
    "content": "Work a bit more with the DOM\nInstructions\nResearch the DOM a little more by 'adopting' a DOM element. Visit the MDN's list of DOM interfaces and pick one. Find it being used on a web site in the web, and write an explanation of how it is used.\nRubric\n| Criteria | Exemplary                                     | Adequate                                         | Needs Improvement       |\n| -------- | --------------------------------------------- | ------------------------------------------------ | ----------------------- |\n|          | Paragraph write-up is presented, with example | Paragraph write-up is presented, without example | No writeup is presented |",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 756,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\assignment.md",
      "source_type": "git_repo"
    },
    "token_count": 117,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3468183ed6e59fbd55bde3ec65d0d31a",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\README.md",
    "source_type": "git_repo",
    "title": "Terrarium Project Part 3: DOM Manipulation and a Closure",
    "content": "Terrarium Project Part 3: DOM Manipulation and a Closure\nSketchnote by Tomomi Imura\nPre-Lecture Quiz\nPre-lecture quiz\nIntroduction\nManipulating the DOM, or the \"Document Object Model\", is a key aspect of web development According to MDN, \"The Document Object Model (DOM) is the data representation of the objects that comprise the structure and content of a document on the web \" The challenges around DOM manipulation on the web have often been the impetus behind using JavaScript frameworks instead of vanilla JavaScript to manage the DOM, but we will manage on our own In addition, this lesson will introduce the idea of a JavaScript closure, which you can think of as a function enclosed by another function so that the inner function has access to the outer function's scope JavaScript closures are a vast and complex topic This lesson touches on the most basic idea that in this terrarium's code, you will find a closure: an inner function and an outer function constructed in a way to allow the inner function access to the outer function's scope For much more information on how this works, please visit the extensive documentation We will use a closure to manipulate the DOM Think of the DOM as a tree, representing all the ways that a web page document can be manipulated Various APIs (Application Program Interfaces) have been written so that programmers, using their programming language of choice, can access the DOM and edit, change, rearrange, and otherwise manage it A representation of the DOM and the HTML markup that references it From Olfa Nasraoui\nIn this lesson, we will complete our interactive terrarium project by creating the JavaScript that will allow a user to manipulate the plants on the page Prerequisite\nYou should have the HTML and CSS for your terrarium built By the end of this lesson you will be able to move the plants into and out of the terrarium by dragging them Task\nIn your terrarium folder, create a new file called script js Import that file in the <head> section:\nhtml\n<script src=\" /script js\" defer></script>\n> Note: use defer when importing an external JavaScript file into the html file so as to allow the JavaScript to execute only after the HTML file has been fully loaded You could also use the async attribute, which allows the script to execute while the HTML file is parsing, but in our case, it's important to have the HTML elements fully available for dragging before we allow the drag script to be executed",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12801,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "d195669f1d23bc4ce3ef572bf488753a",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\README.md",
    "source_type": "git_repo",
    "title": "Terrarium Project Part 3: DOM Manipulation and a Closure",
    "content": "js\" defer></script> > Note: use defer when importing an external JavaScript file into the html file so as to allow the JavaScript to execute only after the HTML file has been fully loaded You could also use the async attribute, which allows the script to execute while the HTML file is parsing, but in our case, it's important to have the HTML elements fully available for dragging before we allow the drag script to be executedThe DOM elements\nThe first thing you need to do is to create references to the elements that you want to manipulate in the DOM In our case, they are the 14 plants currently waiting in the side bars Task\nhtml\ndragElement(document getElementById('plant1'));\ndragElement(document getElementById('plant2'));\ndragElement(document getElementById('plant3'));\ndragElement(document getElementById('plant4'));\ndragElement(document getElementById('plant5'));\ndragElement(document getElementById('plant6'));\ndragElement(document getElementById('plant7'));\ndragElement(document getElementById('plant8'));\ndragElement(document getElementById('plant9'));\ndragElement(document getElementById('plant10'));\ndragElement(document getElementById('plant11'));\ndragElement(document getElementById('plant12'));\ndragElement(document getElementById('plant13'));\ndragElement(document getElementById('plant14'));\nWhat's going on here You are referencing the document and looking through its DOM to find an element with a particular Id Remember in the first lesson on HTML that you gave individual Ids to each plant image (id=\"plant1\") Now you will make use of that effort After identifying each element, you pass that item to a function called dragElement that you'll build in a minute Thus, the element in the HTML is now drag-enabled, or will be shortly ✅ Why do we reference elements by Id Why not by their CSS class You might refer to the previous lesson on CSS to answer this question The Closure\nNow you are ready to create the dragElement closure, which is an outer function that encloses an inner function or functions (in our case, we will have three) Closures are useful when one or more functions need to access an outer function's scope Here's an example:\njavascript\nfunction displayCandy(){\nlet candy = ['jellybeans'];\nfunction addCandy(candyType) {\ncandy push(candyType)\n}\naddCandy('gumdrops');\n}\ndisplayCandy();\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12801,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "2653686f67437c58f291e2dc94330cd9",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\README.md",
    "source_type": "git_repo",
    "title": "Terrarium Project Part 3: DOM Manipulation and a Closure",
    "content": "refer to the previous lesson on CSS to answer this question The Closure Now you are ready to create the dragElement closure, which is an outer function that encloses an inner function or functions (in our case, we will have three) Closures are useful when one or more functions need to access an outer function's scope Here's an example: javascript function displayCandy(){ let candy = ['jellybeans']; function addCandy(candyType) { candy push(candyType) } addCandy('gumdrops'); } displayCandy(); consolelog(candy)\nIn this example, the displayCandy function surrounds a function that pushes a new candy type into an array that already exists in the function If you were to run this code, the candy array would be undefined, as it is a local variable (local to the closure) ✅ How can you make the candy array accessible Try moving it outside the closure This way, the array becomes global, rather than remaining only available to the closure's local scope Task\nUnder the element declarations in script js, create a function:\njavascript\nfunction dragElement(terrariumElement) {\n//set 4 positions for positioning on the screen\nlet pos1 = 0,\npos2 = 0,\npos3 = 0,\npos4 = 0;\nterrariumElement onpointerdown = pointerDrag;\n}\ndragElement get its terrariumElement object from the declarations at the top of the script Then, you set some local positions at 0 for the object passed into the function These are the local variables that will be manipulated for each element as you add drag and drop functionality within the closure to each element The terrarium will be populated by these dragged elements, so the application needs to keep track of where they are placed In addition, the terrariumElement that is passed to this function is assigned a pointerdown event, which is part of the web APIs designed to help with DOM management onpointerdown fires when a button is pushed, or in our case, a draggable element is touched This event handler works on both web and mobile browsers, with a few exceptions ✅ The event handler onclick has much more support cross-browser; why wouldn't you use it here Think about the exact type of screen interaction you're trying to create here The Pointerdrag function\nThe terrariumElement is ready to be dragged around; when the onpointerdown event is fired, the function pointerDrag is invoked",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12801,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "bfd5f7edf5fe6ad29919b2647994e391",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\README.md",
    "source_type": "git_repo",
    "title": "Terrarium Project Part 3: DOM Manipulation and a Closure",
    "content": "is pushed, or in our case, a draggable element is touched This event handler works on both web and mobile browsers, with a few exceptions ✅ The event handler onclick has much more support cross-browser; why wouldn't you use it here Think about the exact type of screen interaction you're trying to create here The Pointerdrag function The terrariumElement is ready to be dragged around; when the onpointerdown event is fired, the function pointerDrag is invokedAdd that function right under this line: terrariumElement onpointerdown = pointerDrag;:\nTask\njavascript\nfunction pointerDrag(e) {\ne preventDefault();\nconsole log(e);\npos3 = e clientX;\npos4 = e clientY;\n}\nSeveral things happen First, you prevent the default events that normally happen on pointerdown from occurring by using e preventDefault(); This way you have more control over the interface's behavior Come back to this line when you've built the script file completely and try it without e preventDefault() - what happens Second, open index html in a browser window, and inspect the interface When you click a plant, you can see how the 'e' event is captured Dig into the event to see how much information is gathered by one pointer down event Next, note how the local variables pos3 and pos4 are set to e clientX You can find the e values in the inspection pane These values capture the x and y coordinates of the plant at the moment you click on it or touch it You will need fine-grained control over the behavior of the plants as you click and drag them, so you keep track of their coordinates ✅ Is it becoming more clear why this entire app is built with one big closure If it wasn't, how would you maintain scope for each of the 14 draggable plants Complete the initial function by adding two more pointer event manipulations under pos4 = e clientY:\nhtml\ndocument onpointermove = elementDrag;\ndocument onpointerup = stopElementDrag;\nNow you are indicating that you want the plant to be dragged along with the pointer as you move it, and for the dragging gesture to stop when you deselect the plant onpointermove and onpointerup are all parts of the same API as onpointerdown The interface will throw errors now as you have not yet defined the elementDrag and the stopElementDrag functions, so build those out next",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12801,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "14916df1adbf592d48aa614b69d33f7c",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\README.md",
    "source_type": "git_repo",
    "title": "Terrarium Project Part 3: DOM Manipulation and a Closure",
    "content": "html document onpointermove = elementDrag; document onpointerup = stopElementDrag; Now you are indicating that you want the plant to be dragged along with the pointer as you move it, and for the dragging gesture to stop when you deselect the plant onpointermove and onpointerup are all parts of the same API as onpointerdown The interface will throw errors now as you have not yet defined the elementDrag and the stopElementDrag functions, so build those out nextThe elementDrag and stopElementDrag functions\nYou will complete your closure by adding two more internal functions that will handle what happens when you drag a plant and stop dragging it The behavior you want is that you can drag any plant at any time and place it anywhere on the screen This interface is quite un-opinionated (there is no drop zone for example) to allow you to design your terrarium exactly as you like it by adding, removing, and repositioning plants Task\nAdd the elementDrag function right after the closing curly bracket of pointerDrag:\njavascript\nfunction elementDrag(e) {\npos1 = pos3 - e clientX;\npos2 = pos4 - e clientY;\npos3 = e clientX;\npos4 = e clientY;\nconsole log(pos1, pos2, pos3, pos4);\nterrariumElement style top = terrariumElement offsetTop - pos2 + 'px';\nterrariumElement style left = terrariumElement offsetLeft - pos1 + 'px';\n}\nIn this function, you do a lot of editing of the initial positions 1-4 that you set as local variables in the outer function What's going on here As you drag, you reassign pos1 by making it equal to pos3 (which you set earlier as e clientX)  minus the current e clientX value You do a similar operation to pos2 Then, you reset pos3 and pos4 to the new X and Y coordinates of the element You can watch these changes in the console as you drag Then, you manipulate the plant's css style to set its new position based on the new positions of pos1 and pos2, calculating the plant's top and left X and Y coordinates based on comparing its offset with these new positions offsetTop and offsetLeft are CSS properties that set an element's position based on that of its parent; its parent can be any element that is not positioned as static",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12801,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "90d7f765d48a7e3ac0b32638ff3441c7",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\README.md",
    "source_type": "git_repo",
    "title": "Terrarium Project Part 3: DOM Manipulation and a Closure",
    "content": "changes in the console as you drag Then, you manipulate the plant's css style to set its new position based on the new positions of pos1 and pos2, calculating the plant's top and left X and Y coordinates based on comparing its offset with these new positions offsetTop and offsetLeft are CSS properties that set an element's position based on that of its parent; its parent can be any element that is not positioned as staticAll this recalculation of positioning allows you to fine-tune the behavior of the terrarium and its plants Task\nThe final task to complete the interface is to add the stopElementDrag function after the closing curly bracket of elementDrag:\njavascript\nfunction stopElementDrag() {\ndocument onpointerup = null;\ndocument onpointermove = null;\n}\nThis small function resets the onpointerup and onpointermove events so that you can either restart your plant's progress by starting to drag it again, or start dragging a new plant ✅ What happens if you don't set these events to null Now you have completed your project 🥇Congratulations You have finished your beautiful terrarium 🚀Challenge\nAdd new event handler to your closure to do something more to the plants; for example, double-click a plant to bring it to the front Get creative Post-Lecture Quiz\nPost-lecture quiz\nReview & Self Study\nWhile dragging elements around the screen seems trivial, there are many ways to do this and many pitfalls, depending on the effect you seek In fact, there is an entire drag and drop API that you can try We didn't use it in this module because the effect we wanted was somewhat different, but try this API on your own project and see what you can achieve Find more information on pointer events on the W3C docs and on MDN web docs Always check browser capabilities using CanIUse com Assignment\nWork a bit more with the DOM",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12801,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 381,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "8ba542e7e5c6e0d64f5691ce36f8429d",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "使用事件建立遊戲\n課前測驗\n課前測驗\n事件驅動程式設計\n當我們建立專為瀏覽器設計的應用程式時，我們會提供 Graphical User Interface (GUI) 給用戶使用，在我們建立的格式上進行互動。最常見的互動方式是透過點擊或輸入在多樣的物件。開發者面臨的問題是，我們不了解用戶會何時對這些物件產生互動！\n事件驅動程式設計是一種程式設計的方式，以建立我們的 GUI。若拆解該名詞的話，我們知道主軸關鍵會是事件（Event）。根據 Merriam-Webster，事件定義為「將發生的事」。它能有效地解決我們面臨的問題。我們知道當用戶產生互動時，什麼程式必須回應其要求，只差在我們不知道用戶會何時產生互動。\n藉由建立新的函式，我們可以標記這段將被運行的程式碼。我們回顧一下程序式程式設計，函式會依照順序一行一行的被運行。這同樣也會被實踐在事件驅動程式設計上，差別在於如何去呼叫這些函式。\n要處理這些事件：點擊按鈕、輸入字串等等，我們需註冊事件監聽者（Event Listeners）。事件監聽者是函式之一，負責回應當事件觸發時，提供相對應的回應。事件監聽者可以根據用戶的行為，更新使用者介面，呼叫伺服器，或是任何你想要它做的事。我們利用 addEventListener 新增事件監聽者，提供要被運行的函式。\n注意 值得注意我們有許多建立事件監聽者的方式。你可以使用匿名函式（anonymous functions），或是有名字的；你可以使用多種的快捷，好比直接設定 click 屬性，或使用 addEventListener。在我們練習過程中，主要專注在 addEventLister 與匿名函式上，它們可能是開發者最常見的網頁開發技巧。同時，也是彈性最高的： addEventListener 作用在任何事件，任何以參數方式輸入的事件名稱。\n常見事件\n創造應用時，這邊有數種事件提供給你監聽。基本上，使用者在網頁上做的任何行為都會觸發事件，你需要花大量時間、大量精力確保它們有相對應的使用者體驗。幸運的是，你只需要處理少部分的事件類型。這邊是一些常見的事件類型，我們會使用其中兩種來建立遊戲：\n點擊： 使用者點擊物件，通常會是按鈕或是連結。\n右鍵選單： 使用者點擊滑鼠右鍵。\n選取： 使用者標記特定文字。\n輸入： 使用者輸入文字。\n建立遊戲\n現在我們藉由建立遊戲，了解事件是如何在 JavaScript 上運作的。我們的遊戲會測試玩家的打字技巧，一項程式開發員被忽略的技能之一。我們應該時刻練習打字技術！大致的遊戲流程如下：\n玩家點擊「開始」按鈕並產生一行要被輸入的引文\n玩家盡快地輸入這段文字到文字框中\n當單字輸入完畢時，立即標記下一個單字。\n當玩家打錯字時，將文字框轉為紅色。\n當玩家完成引文輸入時，顯示祝賀語與花費的時間。\n讓我們開始建立遊戲，學習事件驅動吧！\n檔案結構\n我們總共需要三個檔案：index",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 1373,
    "chunk_index": 0,
    "total_chunks": 43
  },
  {
    "id": "50547be803d20abd9dc0a5c3f9be4167",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "使用事件建立遊戲\n課前測驗\n課前測驗\n事件驅動程式設計\n當我們建立專為瀏覽器設計的應用程式時，我們會提供 Graphical User Interface (GUI) 給用戶使用，在我們建立的格式上進行互動。最常見的互動方式是透過點擊或輸入在多樣的物件。開發者面臨的問題是，我們不了解用戶會何時對這些物件產生互動！\n事件驅動程式設計是一種程式設計的方式，以建立我們的 GUI。若拆解該名詞的話，我們知道主軸關鍵會是事件（Event）。根據 Merriam-Webster，事件定義為「將發生的事」。它能有效地解決我們面臨的問題。我們知道當用戶產生互動時，什麼程式必須回應其要求，只差在我們不知道用戶會何時產生互動。\n藉由建立新的函式，我們可以標記這段將被運行的程式碼。我們回顧一下程序式程式設計，函式會依照順序一行一行的被運行。這同樣也會被實踐在事件驅動程式設計上，差別在於如何去呼叫這些函式。\n要處理這些事件：點擊按鈕、輸入字串等等，我們需註冊事件監聽者（Event Listeners）。事件監聽者是函式之一，負責回應當事件觸發時，提供相對應的回應。事件監聽者可以根據用戶的行為，更新使用者介面，呼叫伺服器，或是任何你想要它做的事。我們利用 addEventListener 新增事件監聽者，提供要被運行的函式。\n注意 值得注意我們有許多建立事件監聽者的方式。你可以使用匿名函式（anonymous functions），或是有名字的；你可以使用多種的快捷，好比直接設定 click 屬性，或使用 addEventListener。在我們練習過程中，主要專注在 addEventLister 與匿名函式上，它們可能是開發者最常見的網頁開發技巧。同時，也是彈性最高的： addEventListener 作用在任何事件，任何以參數方式輸入的事件名稱。\n常見事件\n創造應用時，這邊有數種事件提供給你監聽。基本上，使用者在網頁上做的任何行為都會觸發事件，你需要花大量時間、大量精力確保它們有相對應的使用者體驗。幸運的是，你只需要處理少部分的事件類型。這邊是一些常見的事件類型，我們會使用其中兩種來建立遊戲：\n點擊： 使用者點擊物件，通常會是按鈕或是連結。\n右鍵選單： 使用者點擊滑鼠右鍵。\n選取： 使用者標記特定文字。\n輸入： 使用者輸入文字。\n建立遊戲\n現在我們藉由建立遊戲，了解事件是如何在 JavaScript 上運作的。我們的遊戲會測試玩家的打字技巧，一項程式開發員被忽略的技能之一。我們應該時刻練習打字技術！大致的遊戲流程如下：\n玩家點擊「開始」按鈕並產生一行要被輸入的引文\n玩家盡快地輸入這段文字到文字框中\n當單字輸入完畢時，立即標記下一個單字。\n當玩家打錯字時，將文字框轉為紅色。\n當玩家完成引文輸入時，顯示祝賀語與花費的時間。\n讓我們開始建立遊戲，學習事件驅動吧！\n檔案結構\n我們總共需要三個檔案：indexhtml、script",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 1376,
    "chunk_index": 1,
    "total_chunks": 43
  },
  {
    "id": "91cd233095ded4702cd2574b57f40cec",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "使用事件建立遊戲\n課前測驗\n課前測驗\n事件驅動程式設計\n當我們建立專為瀏覽器設計的應用程式時，我們會提供 Graphical User Interface (GUI) 給用戶使用，在我們建立的格式上進行互動。最常見的互動方式是透過點擊或輸入在多樣的物件。開發者面臨的問題是，我們不了解用戶會何時對這些物件產生互動！\n事件驅動程式設計是一種程式設計的方式，以建立我們的 GUI。若拆解該名詞的話，我們知道主軸關鍵會是事件（Event）。根據 Merriam-Webster，事件定義為「將發生的事」。它能有效地解決我們面臨的問題。我們知道當用戶產生互動時，什麼程式必須回應其要求，只差在我們不知道用戶會何時產生互動。\n藉由建立新的函式，我們可以標記這段將被運行的程式碼。我們回顧一下程序式程式設計，函式會依照順序一行一行的被運行。這同樣也會被實踐在事件驅動程式設計上，差別在於如何去呼叫這些函式。\n要處理這些事件：點擊按鈕、輸入字串等等，我們需註冊事件監聽者（Event Listeners）。事件監聽者是函式之一，負責回應當事件觸發時，提供相對應的回應。事件監聽者可以根據用戶的行為，更新使用者介面，呼叫伺服器，或是任何你想要它做的事。我們利用 addEventListener 新增事件監聽者，提供要被運行的函式。\n注意 值得注意我們有許多建立事件監聽者的方式。你可以使用匿名函式（anonymous functions），或是有名字的；你可以使用多種的快捷，好比直接設定 click 屬性，或使用 addEventListener。在我們練習過程中，主要專注在 addEventLister 與匿名函式上，它們可能是開發者最常見的網頁開發技巧。同時，也是彈性最高的： addEventListener 作用在任何事件，任何以參數方式輸入的事件名稱。\n常見事件\n創造應用時，這邊有數種事件提供給你監聽。基本上，使用者在網頁上做的任何行為都會觸發事件，你需要花大量時間、大量精力確保它們有相對應的使用者體驗。幸運的是，你只需要處理少部分的事件類型。這邊是一些常見的事件類型，我們會使用其中兩種來建立遊戲：\n點擊： 使用者點擊物件，通常會是按鈕或是連結。\n右鍵選單： 使用者點擊滑鼠右鍵。\n選取： 使用者標記特定文字。\n輸入： 使用者輸入文字。\n建立遊戲\n現在我們藉由建立遊戲，了解事件是如何在 JavaScript 上運作的。我們的遊戲會測試玩家的打字技巧，一項程式開發員被忽略的技能之一。我們應該時刻練習打字技術！大致的遊戲流程如下：\n玩家點擊「開始」按鈕並產生一行要被輸入的引文\n玩家盡快地輸入這段文字到文字框中\n當單字輸入完畢時，立即標記下一個單字。\n當玩家打錯字時，將文字框轉為紅色。\n當玩家完成引文輸入時，顯示祝賀語與花費的時間。\n讓我們開始建立遊戲，學習事件驅動吧！\n檔案結構\n我們總共需要三個檔案：indexhtml、scriptjs 與 style",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 1381,
    "chunk_index": 2,
    "total_chunks": 43
  },
  {
    "id": "fa2ba560a6e688cf81770375b092f1c0",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "使用事件建立遊戲\n課前測驗\n課前測驗\n事件驅動程式設計\n當我們建立專為瀏覽器設計的應用程式時，我們會提供 Graphical User Interface (GUI) 給用戶使用，在我們建立的格式上進行互動。最常見的互動方式是透過點擊或輸入在多樣的物件。開發者面臨的問題是，我們不了解用戶會何時對這些物件產生互動！\n事件驅動程式設計是一種程式設計的方式，以建立我們的 GUI。若拆解該名詞的話，我們知道主軸關鍵會是事件（Event）。根據 Merriam-Webster，事件定義為「將發生的事」。它能有效地解決我們面臨的問題。我們知道當用戶產生互動時，什麼程式必須回應其要求，只差在我們不知道用戶會何時產生互動。\n藉由建立新的函式，我們可以標記這段將被運行的程式碼。我們回顧一下程序式程式設計，函式會依照順序一行一行的被運行。這同樣也會被實踐在事件驅動程式設計上，差別在於如何去呼叫這些函式。\n要處理這些事件：點擊按鈕、輸入字串等等，我們需註冊事件監聽者（Event Listeners）。事件監聽者是函式之一，負責回應當事件觸發時，提供相對應的回應。事件監聽者可以根據用戶的行為，更新使用者介面，呼叫伺服器，或是任何你想要它做的事。我們利用 addEventListener 新增事件監聽者，提供要被運行的函式。\n注意 值得注意我們有許多建立事件監聽者的方式。你可以使用匿名函式（anonymous functions），或是有名字的；你可以使用多種的快捷，好比直接設定 click 屬性，或使用 addEventListener。在我們練習過程中，主要專注在 addEventLister 與匿名函式上，它們可能是開發者最常見的網頁開發技巧。同時，也是彈性最高的： addEventListener 作用在任何事件，任何以參數方式輸入的事件名稱。\n常見事件\n創造應用時，這邊有數種事件提供給你監聽。基本上，使用者在網頁上做的任何行為都會觸發事件，你需要花大量時間、大量精力確保它們有相對應的使用者體驗。幸運的是，你只需要處理少部分的事件類型。這邊是一些常見的事件類型，我們會使用其中兩種來建立遊戲：\n點擊： 使用者點擊物件，通常會是按鈕或是連結。\n右鍵選單： 使用者點擊滑鼠右鍵。\n選取： 使用者標記特定文字。\n輸入： 使用者輸入文字。\n建立遊戲\n現在我們藉由建立遊戲，了解事件是如何在 JavaScript 上運作的。我們的遊戲會測試玩家的打字技巧，一項程式開發員被忽略的技能之一。我們應該時刻練習打字技術！大致的遊戲流程如下：\n玩家點擊「開始」按鈕並產生一行要被輸入的引文\n玩家盡快地輸入這段文字到文字框中\n當單字輸入完畢時，立即標記下一個單字。\n當玩家打錯字時，將文字框轉為紅色。\n當玩家完成引文輸入時，顯示祝賀語與花費的時間。\n讓我們開始建立遊戲，學習事件驅動吧！\n檔案結構\n我們總共需要三個檔案：indexhtml、scriptjs 與 stylecss。我們來設定它們，以完成後續的步驟。\n建立新的資料夾存放我們的遊戲，開啟 Console 或是終端機，輸入下列指令：\n```bash\nLinux 或 macOS\nmkdir typing-game && cd typing-game\nWindows\nmd typing-game && cd typing-game\n```\n打開文字編輯器 Visual Studio Code\nbash\ncode",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 1492,
    "chunk_index": 3,
    "total_chunks": 43
  },
  {
    "id": "dda67ff4be568607bc1869f03db1c7f0",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "課前測驗 課前測驗 事件驅動程式設計 當我們建立專為瀏覽器設計的應用程式時，我們會提供 Graphical User Interface (GUI) 給用戶使用，在我們建立的格式上進行互動。最常見的互動方式是透過點擊或輸入在多樣的物件。開發者面臨的問題是，我們不了解用戶會何時對這些物件產生互動！ 事件驅動程式設計是一種程式設計的方式，以建立我們的 GUI。若拆解該名詞的話，我們知道主軸關鍵會是事件（Event）。根據 Merriam-Webster，事件定義為「將發生的事」。它能有效地解決我們面臨的問題。我們知道當用戶產生互動時，什麼程式必須回應其要求，只差在我們不知道用戶會何時產生互動。 藉由建立新的函式，我們可以標記這段將被運行的程式碼。我們回顧一下程序式程式設計，函式會依照順序一行一行的被運行。這同樣也會被實踐在事件驅動程式設計上，差別在於如何去呼叫這些函式。 要處理這些事件：點擊按鈕、輸入字串等等，我們需註冊事件監聽者（Event Listeners）。事件監聽者是函式之一，負責回應當事件觸發時，提供相對應的回應。事件監聽者可以根據用戶的行為，更新使用者介面，呼叫伺服器，或是任何你想要它做的事。我們利用 addEventListener 新增事件監聽者，提供要被運行的函式。 注意 值得注意我們有許多建立事件監聽者的方式。你可以使用匿名函式（anonymous functions），或是有名字的；你可以使用多種的快捷，好比直接設定 click 屬性，或使用 addEventListener。在我們練習過程中，主要專注在 addEventLister 與匿名函式上，它們可能是開發者最常見的網頁開發技巧。同時，也是彈性最高的： addEventListener 作用在任何事件，任何以參數方式輸入的事件名稱。 常見事件 創造應用時，這邊有數種事件提供給你監聽。基本上，使用者在網頁上做的任何行為都會觸發事件，你需要花大量時間、大量精力確保它們有相對應的使用者體驗。幸運的是，你只需要處理少部分的事件類型。這邊是一些常見的事件類型，我們會使用其中兩種來建立遊戲： 點擊： 使用者點擊物件，通常會是按鈕或是連結。 右鍵選單： 使用者點擊滑鼠右鍵。 選取： 使用者標記特定文字。 輸入： 使用者輸入文字。 建立遊戲 現在我們藉由建立遊戲，了解事件是如何在 JavaScript 上運作的。我們的遊戲會測試玩家的打字技巧，一項程式開發員被忽略的技能之一。我們應該時刻練習打字技術！大致的遊戲流程如下： 玩家點擊「開始」按鈕並產生一行要被輸入的引文 玩家盡快地輸入這段文字到文字框中 當單字輸入完畢時，立即標記下一個單字。 當玩家打錯字時，將文字框轉為紅色。 當玩家完成引文輸入時，顯示祝賀語與花費的時間。 讓我們開始建立遊戲，學習事件驅動吧！ 檔案結構 我們總共需要三個檔案：indexhtml、scriptjs 與 stylecss。我們來設定它們，以完成後續的步驟。 建立新的資料夾存放我們的遊戲，開啟 Console 或是終端機，輸入下列指令： ```bash Linux 或 macOS mkdir typing-game && cd typing-game Windows md typing-game && cd typing-game ``` 打開文字編輯器 Visual Studio Code bash code現在，在 Visual Studio Code 中新增三個檔案到資料夾中，分別為：\nindex",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 1520,
    "chunk_index": 4,
    "total_chunks": 43
  },
  {
    "id": "4528760bf55572099333ffe10ecfaf44",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "User Interface (GUI) 給用戶使用，在我們建立的格式上進行互動。最常見的互動方式是透過點擊或輸入在多樣的物件。開發者面臨的問題是，我們不了解用戶會何時對這些物件產生互動！ 事件驅動程式設計是一種程式設計的方式，以建立我們的 GUI。若拆解該名詞的話，我們知道主軸關鍵會是事件（Event）。根據 Merriam-Webster，事件定義為「將發生的事」。它能有效地解決我們面臨的問題。我們知道當用戶產生互動時，什麼程式必須回應其要求，只差在我們不知道用戶會何時產生互動。 藉由建立新的函式，我們可以標記這段將被運行的程式碼。我們回顧一下程序式程式設計，函式會依照順序一行一行的被運行。這同樣也會被實踐在事件驅動程式設計上，差別在於如何去呼叫這些函式。 要處理這些事件：點擊按鈕、輸入字串等等，我們需註冊事件監聽者（Event Listeners）。事件監聽者是函式之一，負責回應當事件觸發時，提供相對應的回應。事件監聽者可以根據用戶的行為，更新使用者介面，呼叫伺服器，或是任何你想要它做的事。我們利用 addEventListener 新增事件監聽者，提供要被運行的函式。 注意 值得注意我們有許多建立事件監聽者的方式。你可以使用匿名函式（anonymous functions），或是有名字的；你可以使用多種的快捷，好比直接設定 click 屬性，或使用 addEventListener。在我們練習過程中，主要專注在 addEventLister 與匿名函式上，它們可能是開發者最常見的網頁開發技巧。同時，也是彈性最高的： addEventListener 作用在任何事件，任何以參數方式輸入的事件名稱。 常見事件 創造應用時，這邊有數種事件提供給你監聽。基本上，使用者在網頁上做的任何行為都會觸發事件，你需要花大量時間、大量精力確保它們有相對應的使用者體驗。幸運的是，你只需要處理少部分的事件類型。這邊是一些常見的事件類型，我們會使用其中兩種來建立遊戲： 點擊： 使用者點擊物件，通常會是按鈕或是連結。 右鍵選單： 使用者點擊滑鼠右鍵。 選取： 使用者標記特定文字。 輸入： 使用者輸入文字。 建立遊戲 現在我們藉由建立遊戲，了解事件是如何在 JavaScript 上運作的。我們的遊戲會測試玩家的打字技巧，一項程式開發員被忽略的技能之一。我們應該時刻練習打字技術！大致的遊戲流程如下： 玩家點擊「開始」按鈕並產生一行要被輸入的引文 玩家盡快地輸入這段文字到文字框中 當單字輸入完畢時，立即標記下一個單字。 當玩家打錯字時，將文字框轉為紅色。 當玩家完成引文輸入時，顯示祝賀語與花費的時間。 讓我們開始建立遊戲，學習事件驅動吧！ 檔案結構 我們總共需要三個檔案：indexhtml、scriptjs 與 stylecss。我們來設定它們，以完成後續的步驟。 建立新的資料夾存放我們的遊戲，開啟 Console 或是終端機，輸入下列指令： ```bash Linux 或 macOS mkdir typing-game && cd typing-game Windows md typing-game && cd typing-game ``` 打開文字編輯器 Visual Studio Code bash code現在，在 Visual Studio Code 中新增三個檔案到資料夾中，分別為： indexhtml\nscript",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 1458,
    "chunk_index": 5,
    "total_chunks": 43
  },
  {
    "id": "09cb61b0ec07c697d2da74607d92f255",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "Interface (GUI) 給用戶使用，在我們建立的格式上進行互動。最常見的互動方式是透過點擊或輸入在多樣的物件。開發者面臨的問題是，我們不了解用戶會何時對這些物件產生互動！ 事件驅動程式設計是一種程式設計的方式，以建立我們的 GUI。若拆解該名詞的話，我們知道主軸關鍵會是事件（Event）。根據 Merriam-Webster，事件定義為「將發生的事」。它能有效地解決我們面臨的問題。我們知道當用戶產生互動時，什麼程式必須回應其要求，只差在我們不知道用戶會何時產生互動。 藉由建立新的函式，我們可以標記這段將被運行的程式碼。我們回顧一下程序式程式設計，函式會依照順序一行一行的被運行。這同樣也會被實踐在事件驅動程式設計上，差別在於如何去呼叫這些函式。 要處理這些事件：點擊按鈕、輸入字串等等，我們需註冊事件監聽者（Event Listeners）。事件監聽者是函式之一，負責回應當事件觸發時，提供相對應的回應。事件監聽者可以根據用戶的行為，更新使用者介面，呼叫伺服器，或是任何你想要它做的事。我們利用 addEventListener 新增事件監聽者，提供要被運行的函式。 注意 值得注意我們有許多建立事件監聽者的方式。你可以使用匿名函式（anonymous functions），或是有名字的；你可以使用多種的快捷，好比直接設定 click 屬性，或使用 addEventListener。在我們練習過程中，主要專注在 addEventLister 與匿名函式上，它們可能是開發者最常見的網頁開發技巧。同時，也是彈性最高的： addEventListener 作用在任何事件，任何以參數方式輸入的事件名稱。 常見事件 創造應用時，這邊有數種事件提供給你監聽。基本上，使用者在網頁上做的任何行為都會觸發事件，你需要花大量時間、大量精力確保它們有相對應的使用者體驗。幸運的是，你只需要處理少部分的事件類型。這邊是一些常見的事件類型，我們會使用其中兩種來建立遊戲： 點擊： 使用者點擊物件，通常會是按鈕或是連結。 右鍵選單： 使用者點擊滑鼠右鍵。 選取： 使用者標記特定文字。 輸入： 使用者輸入文字。 建立遊戲 現在我們藉由建立遊戲，了解事件是如何在 JavaScript 上運作的。我們的遊戲會測試玩家的打字技巧，一項程式開發員被忽略的技能之一。我們應該時刻練習打字技術！大致的遊戲流程如下： 玩家點擊「開始」按鈕並產生一行要被輸入的引文 玩家盡快地輸入這段文字到文字框中 當單字輸入完畢時，立即標記下一個單字。 當玩家打錯字時，將文字框轉為紅色。 當玩家完成引文輸入時，顯示祝賀語與花費的時間。 讓我們開始建立遊戲，學習事件驅動吧！ 檔案結構 我們總共需要三個檔案：indexhtml、scriptjs 與 stylecss。我們來設定它們，以完成後續的步驟。 建立新的資料夾存放我們的遊戲，開啟 Console 或是終端機，輸入下列指令： ```bash Linux 或 macOS mkdir typing-game && cd typing-game Windows md typing-game && cd typing-game ``` 打開文字編輯器 Visual Studio Code bash code現在，在 Visual Studio Code 中新增三個檔案到資料夾中，分別為： indexhtml scriptjs\nstyle",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 1459,
    "chunk_index": 6,
    "total_chunks": 43
  },
  {
    "id": "408ac14d177334e7217d5a6471be3949",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "(GUI) 給用戶使用，在我們建立的格式上進行互動。最常見的互動方式是透過點擊或輸入在多樣的物件。開發者面臨的問題是，我們不了解用戶會何時對這些物件產生互動！ 事件驅動程式設計是一種程式設計的方式，以建立我們的 GUI。若拆解該名詞的話，我們知道主軸關鍵會是事件（Event）。根據 Merriam-Webster，事件定義為「將發生的事」。它能有效地解決我們面臨的問題。我們知道當用戶產生互動時，什麼程式必須回應其要求，只差在我們不知道用戶會何時產生互動。 藉由建立新的函式，我們可以標記這段將被運行的程式碼。我們回顧一下程序式程式設計，函式會依照順序一行一行的被運行。這同樣也會被實踐在事件驅動程式設計上，差別在於如何去呼叫這些函式。 要處理這些事件：點擊按鈕、輸入字串等等，我們需註冊事件監聽者（Event Listeners）。事件監聽者是函式之一，負責回應當事件觸發時，提供相對應的回應。事件監聽者可以根據用戶的行為，更新使用者介面，呼叫伺服器，或是任何你想要它做的事。我們利用 addEventListener 新增事件監聽者，提供要被運行的函式。 注意 值得注意我們有許多建立事件監聽者的方式。你可以使用匿名函式（anonymous functions），或是有名字的；你可以使用多種的快捷，好比直接設定 click 屬性，或使用 addEventListener。在我們練習過程中，主要專注在 addEventLister 與匿名函式上，它們可能是開發者最常見的網頁開發技巧。同時，也是彈性最高的： addEventListener 作用在任何事件，任何以參數方式輸入的事件名稱。 常見事件 創造應用時，這邊有數種事件提供給你監聽。基本上，使用者在網頁上做的任何行為都會觸發事件，你需要花大量時間、大量精力確保它們有相對應的使用者體驗。幸運的是，你只需要處理少部分的事件類型。這邊是一些常見的事件類型，我們會使用其中兩種來建立遊戲： 點擊： 使用者點擊物件，通常會是按鈕或是連結。 右鍵選單： 使用者點擊滑鼠右鍵。 選取： 使用者標記特定文字。 輸入： 使用者輸入文字。 建立遊戲 現在我們藉由建立遊戲，了解事件是如何在 JavaScript 上運作的。我們的遊戲會測試玩家的打字技巧，一項程式開發員被忽略的技能之一。我們應該時刻練習打字技術！大致的遊戲流程如下： 玩家點擊「開始」按鈕並產生一行要被輸入的引文 玩家盡快地輸入這段文字到文字框中 當單字輸入完畢時，立即標記下一個單字。 當玩家打錯字時，將文字框轉為紅色。 當玩家完成引文輸入時，顯示祝賀語與花費的時間。 讓我們開始建立遊戲，學習事件驅動吧！ 檔案結構 我們總共需要三個檔案：indexhtml、scriptjs 與 stylecss。我們來設定它們，以完成後續的步驟。 建立新的資料夾存放我們的遊戲，開啟 Console 或是終端機，輸入下列指令： ```bash Linux 或 macOS mkdir typing-game && cd typing-game Windows md typing-game && cd typing-game ``` 打開文字編輯器 Visual Studio Code bash code現在，在 Visual Studio Code 中新增三個檔案到資料夾中，分別為： indexhtml scriptjs stylecss\n建立使用者介面\n藉由回顧我們的需求，我們在 HTML 頁面上新增一些元素。這就像是看一份食譜，你需要對應的食材：\n一個地方呈現將被輸入的引文\n一個地方呈現任何訊息，好比祝賀文\n一個玩家輸入的文字框\n一個開始按鈕。\n每一個物件都需要 ID ，讓 JavaScript 程式能控制它們。另外，在 HTML 檔案匯入 CSS 與 JavaScript 檔，我們等一下會編輯它們。\n在新的 index",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 1658,
    "chunk_index": 7,
    "total_chunks": 43
  },
  {
    "id": "5b1bfd139b2d1409d95b639ccbdab193",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "創造應用時，這邊有數種事件提供給你監聽。基本上，使用者在網頁上做的任何行為都會觸發事件，你需要花大量時間、大量精力確保它們有相對應的使用者體驗。幸運的是，你只需要處理少部分的事件類型。這邊是一些常見的事件類型，我們會使用其中兩種來建立遊戲： 點擊： 使用者點擊物件，通常會是按鈕或是連結。 右鍵選單： 使用者點擊滑鼠右鍵。 選取： 使用者標記特定文字。 輸入： 使用者輸入文字。 建立遊戲 現在我們藉由建立遊戲，了解事件是如何在 JavaScript 上運作的。我們的遊戲會測試玩家的打字技巧，一項程式開發員被忽略的技能之一。我們應該時刻練習打字技術！大致的遊戲流程如下： 玩家點擊「開始」按鈕並產生一行要被輸入的引文 玩家盡快地輸入這段文字到文字框中 當單字輸入完畢時，立即標記下一個單字。 當玩家打錯字時，將文字框轉為紅色。 當玩家完成引文輸入時，顯示祝賀語與花費的時間。 讓我們開始建立遊戲，學習事件驅動吧！ 檔案結構 我們總共需要三個檔案：indexhtml、scriptjs 與 stylecss。我們來設定它們，以完成後續的步驟。 建立新的資料夾存放我們的遊戲，開啟 Console 或是終端機，輸入下列指令： ```bash Linux 或 macOS mkdir typing-game && cd typing-game Windows md typing-game && cd typing-game ``` 打開文字編輯器 Visual Studio Code bash code現在，在 Visual Studio Code 中新增三個檔案到資料夾中，分別為： indexhtml scriptjs stylecss 建立使用者介面 藉由回顧我們的需求，我們在 HTML 頁面上新增一些元素。這就像是看一份食譜，你需要對應的食材： 一個地方呈現將被輸入的引文 一個地方呈現任何訊息，好比祝賀文 一個玩家輸入的文字框 一個開始按鈕。 每一個物件都需要 ID ，讓 JavaScript 程式能控制它們。另外，在 HTML 檔案匯入 CSS 與 JavaScript 檔，我們等一下會編輯它們。 在新的 indexhtml 檔案中，加入下列程式碼：\n```html\nTyping game\nTyping game",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 939,
    "chunk_index": 8,
    "total_chunks": 43
  },
  {
    "id": "86280cfd74e9429d86fb3bc202f58f12",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "使用者標記特定文字。 輸入： 使用者輸入文字。 建立遊戲 現在我們藉由建立遊戲，了解事件是如何在 JavaScript 上運作的。我們的遊戲會測試玩家的打字技巧，一項程式開發員被忽略的技能之一。我們應該時刻練習打字技術！大致的遊戲流程如下： 玩家點擊「開始」按鈕並產生一行要被輸入的引文 玩家盡快地輸入這段文字到文字框中 當單字輸入完畢時，立即標記下一個單字。 當玩家打錯字時，將文字框轉為紅色。 當玩家完成引文輸入時，顯示祝賀語與花費的時間。 讓我們開始建立遊戲，學習事件驅動吧！ 檔案結構 我們總共需要三個檔案：indexhtml、scriptjs 與 stylecss。我們來設定它們，以完成後續的步驟。 建立新的資料夾存放我們的遊戲，開啟 Console 或是終端機，輸入下列指令： ```bash Linux 或 macOS mkdir typing-game && cd typing-game Windows md typing-game && cd typing-game ``` 打開文字編輯器 Visual Studio Code bash code現在，在 Visual Studio Code 中新增三個檔案到資料夾中，分別為： indexhtml scriptjs stylecss 建立使用者介面 藉由回顧我們的需求，我們在 HTML 頁面上新增一些元素。這就像是看一份食譜，你需要對應的食材： 一個地方呈現將被輸入的引文 一個地方呈現任何訊息，好比祝賀文 一個玩家輸入的文字框 一個開始按鈕。 每一個物件都需要 ID ，讓 JavaScript 程式能控制它們。另外，在 HTML 檔案匯入 CSS 與 JavaScript 檔，我們等一下會編輯它們。 在新的 indexhtml 檔案中，加入下列程式碼： ```html Typing game Typing gamePractice your typing skills with a quote from Sherlock Holmes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 731,
    "chunk_index": 9,
    "total_chunks": 43
  },
  {
    "id": "d0f98a3dfbfd2ad2ca05baef847024a0",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "當單字輸入完畢時，立即標記下一個單字。 當玩家打錯字時，將文字框轉為紅色。 當玩家完成引文輸入時，顯示祝賀語與花費的時間。 讓我們開始建立遊戲，學習事件驅動吧！ 檔案結構 我們總共需要三個檔案：indexhtml、scriptjs 與 stylecss。我們來設定它們，以完成後續的步驟。 建立新的資料夾存放我們的遊戲，開啟 Console 或是終端機，輸入下列指令： ```bash Linux 或 macOS mkdir typing-game && cd typing-game Windows md typing-game && cd typing-game ``` 打開文字編輯器 Visual Studio Code bash code現在，在 Visual Studio Code 中新增三個檔案到資料夾中，分別為： indexhtml scriptjs stylecss 建立使用者介面 藉由回顧我們的需求，我們在 HTML 頁面上新增一些元素。這就像是看一份食譜，你需要對應的食材： 一個地方呈現將被輸入的引文 一個地方呈現任何訊息，好比祝賀文 一個玩家輸入的文字框 一個開始按鈕。 每一個物件都需要 ID ，讓 JavaScript 程式能控制它們。另外，在 HTML 檔案匯入 CSS 與 JavaScript 檔，我們等一下會編輯它們。 在新的 indexhtml 檔案中，加入下列程式碼： ```html Typing game Typing gamePractice your typing skills with a quote from Sherlock HolmesClick **start** to begin",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 535,
    "chunk_index": 10,
    "total_chunks": 43
  },
  {
    "id": "7a8ca9844e3c2d15fd53edf90cb58d85",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "讓我們開始建立遊戲，學習事件驅動吧！ 檔案結構 我們總共需要三個檔案：indexhtml、scriptjs 與 stylecss。我們來設定它們，以完成後續的步驟。 建立新的資料夾存放我們的遊戲，開啟 Console 或是終端機，輸入下列指令： ```bash Linux 或 macOS mkdir typing-game && cd typing-game Windows md typing-game && cd typing-game ``` 打開文字編輯器 Visual Studio Code bash code現在，在 Visual Studio Code 中新增三個檔案到資料夾中，分別為： indexhtml scriptjs stylecss 建立使用者介面 藉由回顧我們的需求，我們在 HTML 頁面上新增一些元素。這就像是看一份食譜，你需要對應的食材： 一個地方呈現將被輸入的引文 一個地方呈現任何訊息，好比祝賀文 一個玩家輸入的文字框 一個開始按鈕。 每一個物件都需要 ID ，讓 JavaScript 程式能控制它們。另外，在 HTML 檔案匯入 CSS 與 JavaScript 檔，我們等一下會編輯它們。 在新的 indexhtml 檔案中，加入下列程式碼： ```html Typing game Typing gamePractice your typing skills with a quote from Sherlock HolmesClick **start** to beginStart\n```\n執行應用程式\n最好的逐段開發模式是定期的確認程式結果。讓我們來執行現在的應用程式。Visual Studio Code 上有一個好用的擴充套件為 Live Server，它會在你儲存網頁檔案時，同時架設並更新瀏覽器上的網頁。\n安裝 Live Server，點擊連結中的 Install\n瀏覽器要求開啟 Visual Studio Code，Visual Studio Code 會執行後續的安裝流程\n安裝完後，重啟 Visual Studio Code\n一旦安裝完成，在 Visual Studio Code 下按下 Ctrl-Shift-P (或 Cmd-Shift-P) 開啟指令視窗。\n輸入 Live Server: Open with Live Server\nLive Server 會架設並發布你的網頁成果\n開啟瀏覽器，前往 https://localhost:5500\n現在你能看到你所做的網頁！\n讓我們來為網頁增加更多功能。\n加入 CSS\n建立完 HTML 檔，現在我們為了造型加入 CSS。我們需要標記玩家需要輸入的單字，若單字輸入錯誤時需要改變文字框的顏色。利用兩組 class 來完成：\n在檔案 style",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 869,
    "chunk_index": 11,
    "total_chunks": 43
  },
  {
    "id": "124d47e575ba431f22464d9ee1b75dbb",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "在新的 indexhtml 檔案中，加入下列程式碼： ```html Typing game Typing gamePractice your typing skills with a quote from Sherlock HolmesClick **start** to beginStart ``` 執行應用程式 最好的逐段開發模式是定期的確認程式結果。讓我們來執行現在的應用程式。Visual Studio Code 上有一個好用的擴充套件為 Live Server，它會在你儲存網頁檔案時，同時架設並更新瀏覽器上的網頁。 安裝 Live Server，點擊連結中的 Install 瀏覽器要求開啟 Visual Studio Code，Visual Studio Code 會執行後續的安裝流程 安裝完後，重啟 Visual Studio Code 一旦安裝完成，在 Visual Studio Code 下按下 Ctrl-Shift-P (或 Cmd-Shift-P) 開啟指令視窗。 輸入 Live Server: Open with Live Server Live Server 會架設並發布你的網頁成果 開啟瀏覽器，前往 https://localhost:5500 現在你能看到你所做的網頁！ 讓我們來為網頁增加更多功能。 加入 CSS 建立完 HTML 檔，現在我們為了造型加入 CSS。我們需要標記玩家需要輸入的單字，若單字輸入錯誤時需要改變文字框的顏色。利用兩組 class 來完成： 在檔案 stylecss 加入下列語法：\n```css\n/ 在 style css 中 / highlight {\nbackground-color: yellow;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 12,
    "total_chunks": 43
  },
  {
    "id": "ddbde5cd167937e0c96998ba7ec83aa9",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "quote from Sherlock HolmesClick **start** to beginStart ``` 執行應用程式 最好的逐段開發模式是定期的確認程式結果。讓我們來執行現在的應用程式。Visual Studio Code 上有一個好用的擴充套件為 Live Server，它會在你儲存網頁檔案時，同時架設並更新瀏覽器上的網頁。 安裝 Live Server，點擊連結中的 Install 瀏覽器要求開啟 Visual Studio Code，Visual Studio Code 會執行後續的安裝流程 安裝完後，重啟 Visual Studio Code 一旦安裝完成，在 Visual Studio Code 下按下 Ctrl-Shift-P (或 Cmd-Shift-P) 開啟指令視窗。 輸入 Live Server: Open with Live Server Live Server 會架設並發布你的網頁成果 開啟瀏覽器，前往 https://localhost:5500 現在你能看到你所做的網頁！ 讓我們來為網頁增加更多功能。 加入 CSS 建立完 HTML 檔，現在我們為了造型加入 CSS。我們需要標記玩家需要輸入的單字，若單字輸入錯誤時需要改變文字框的顏色。利用兩組 class 來完成： 在檔案 stylecss 加入下列語法： ```css / 在 style css 中 / highlight { background-color: yellow; }error {\nbackground-color: lightcoral;\nborder: red;\n}\n```\n✅ 處理 CSS 時，你可以規劃任何你想要的介面布局。花點時間讓你的網頁更迷人：\n變更其他字型\n改變標題顏色\n改變物件大小\nJavaScript\n建立完使用者介面後，我們要專注在 JavaScript 上，提供網頁邏輯處理的能力。我們將工作分為下列步驟：\n建立常數\n事件監聽者 - 開始遊戲\n事件監聽者 - 輸入文字\n首先，我們先編輯檔案 script",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 653,
    "chunk_index": 13,
    "total_chunks": 43
  },
  {
    "id": "dde878d23c05a5e94b9e462546956415",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "Visual Studio Code 一旦安裝完成，在 Visual Studio Code 下按下 Ctrl-Shift-P (或 Cmd-Shift-P) 開啟指令視窗。 輸入 Live Server: Open with Live Server Live Server 會架設並發布你的網頁成果 開啟瀏覽器，前往 https://localhost:5500 現在你能看到你所做的網頁！ 讓我們來為網頁增加更多功能。 加入 CSS 建立完 HTML 檔，現在我們為了造型加入 CSS。我們需要標記玩家需要輸入的單字，若單字輸入錯誤時需要改變文字框的顏色。利用兩組 class 來完成： 在檔案 stylecss 加入下列語法： ```css / 在 style css 中 / highlight { background-color: yellow; }error { background-color: lightcoral; border: red; } ``` ✅ 處理 CSS 時，你可以規劃任何你想要的介面布局。花點時間讓你的網頁更迷人： 變更其他字型 改變標題顏色 改變物件大小 JavaScript 建立完使用者介面後，我們要專注在 JavaScript 上，提供網頁邏輯處理的能力。我們將工作分為下列步驟： 建立常數 事件監聽者 - 開始遊戲 事件監聽者 - 輸入文字 首先，我們先編輯檔案 scriptjs。\n建立常數\n加入一些變數給程式使用。同樣地，就像食譜一樣，我們需要的食材如下：\n矩陣，儲存所有引文\n空矩陣，儲存單一引文的所有單字\n變數，儲存空矩陣的索引，標記玩家現在面對的單字\n變數，紀錄玩家點擊開始時的時間\n我們也需要將使用者介面上的物件做連結：\n文字框 (typed-value)\n顯示引文 (quote)\n訊息欄 (message)\njavascript\n// 在檔案 script",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 657,
    "chunk_index": 14,
    "total_chunks": 43
  },
  {
    "id": "bb8d428fdec7c5bdf456894d9667d4c3",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "Live Server Live Server 會架設並發布你的網頁成果 開啟瀏覽器，前往 https://localhost:5500 現在你能看到你所做的網頁！ 讓我們來為網頁增加更多功能。 加入 CSS 建立完 HTML 檔，現在我們為了造型加入 CSS。我們需要標記玩家需要輸入的單字，若單字輸入錯誤時需要改變文字框的顏色。利用兩組 class 來完成： 在檔案 stylecss 加入下列語法： ```css / 在 style css 中 / highlight { background-color: yellow; }error { background-color: lightcoral; border: red; } ``` ✅ 處理 CSS 時，你可以規劃任何你想要的介面布局。花點時間讓你的網頁更迷人： 變更其他字型 改變標題顏色 改變物件大小 JavaScript 建立完使用者介面後，我們要專注在 JavaScript 上，提供網頁邏輯處理的能力。我們將工作分為下列步驟： 建立常數 事件監聽者 - 開始遊戲 事件監聽者 - 輸入文字 首先，我們先編輯檔案 scriptjs。 建立常數 加入一些變數給程式使用。同樣地，就像食譜一樣，我們需要的食材如下： 矩陣，儲存所有引文 空矩陣，儲存單一引文的所有單字 變數，儲存空矩陣的索引，標記玩家現在面對的單字 變數，紀錄玩家點擊開始時的時間 我們也需要將使用者介面上的物件做連結： 文字框 (typed-value) 顯示引文 (quote) 訊息欄 (message) javascript // 在檔案 scriptjs 中\n// 所有的引文內容\nconst quotes = [\n'When you have eliminated the impossible, whatever remains, however improbable, must be the truth",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 644,
    "chunk_index": 15,
    "total_chunks": 43
  },
  {
    "id": "ffcb6d484a6316a05188575206b69f67",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "/ 在 style css 中 / highlight { background-color: yellow; }error { background-color: lightcoral; border: red; } ``` ✅ 處理 CSS 時，你可以規劃任何你想要的介面布局。花點時間讓你的網頁更迷人： 變更其他字型 改變標題顏色 改變物件大小 JavaScript 建立完使用者介面後，我們要專注在 JavaScript 上，提供網頁邏輯處理的能力。我們將工作分為下列步驟： 建立常數 事件監聽者 - 開始遊戲 事件監聽者 - 輸入文字 首先，我們先編輯檔案 scriptjs。 建立常數 加入一些變數給程式使用。同樣地，就像食譜一樣，我們需要的食材如下： 矩陣，儲存所有引文 空矩陣，儲存單一引文的所有單字 變數，儲存空矩陣的索引，標記玩家現在面對的單字 變數，紀錄玩家點擊開始時的時間 我們也需要將使用者介面上的物件做連結： 文字框 (typed-value) 顯示引文 (quote) 訊息欄 (message) javascript // 在檔案 scriptjs 中 // 所有的引文內容 const quotes = [ 'When you have eliminated the impossible, whatever remains, however improbable, must be the truth',\n'There is nothing more deceptive than an obvious fact ',\n'I ought to know by this time that when a fact appears to be opposed to a long train of deductions it invariably proves to be capable of bearing some other interpretation ',\n'I never make exceptions",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 16,
    "total_chunks": 43
  },
  {
    "id": "476776245a91d0c6f9e88f66a78196a0",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "顯示引文 (quote) 訊息欄 (message) javascript // 在檔案 scriptjs 中 // 所有的引文內容 const quotes = [ 'When you have eliminated the impossible, whatever remains, however improbable, must be the truth', 'There is nothing more deceptive than an obvious fact ', 'I ought to know by this time that when a fact appears to be opposed to a long train of deductions it invariably proves to be capable of bearing some other interpretation ', 'I never make exceptionsAn exception disproves the rule ',\n'What one man can invent another can discover ',\n'Nothing clears up a case so much as stating it to another person ',\n'Education never ends, Watson It is a series of lessons, with the greatest for the last ',\n];\n// 儲存單字列表及目前要輸入的單字索引\nlet words = [];\nlet wordIndex = 0;\n// 開始時間\nlet startTime = Date now();\n// 網頁物件連結\nconst quoteElement = document getElementById('quote');\nconst messageElement = document getElementById('message');\nconst typedValueElement = document getElementById('typed-value');\n✅ 試著加入更多的引文到你的遊戲中。\n筆記 我們可以接收任何物件，只要使用程式碼 document getElementById。因為我們需要定期參考這些元素，所以使用常數來確認是否有單字輸入錯誤的問題。框架如 Vue",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 360,
    "chunk_index": 17,
    "total_chunks": 43
  },
  {
    "id": "681f1b4a24b48d9bc3bc2f112250b67d",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "can discover ', 'Nothing clears up a case so much as stating it to another person ', 'Education never ends, Watson It is a series of lessons, with the greatest for the last ', ]; // 儲存單字列表及目前要輸入的單字索引 let words = []; let wordIndex = 0; // 開始時間 let startTime = Date now(); // 網頁物件連結 const quoteElement = document getElementById('quote'); const messageElement = document getElementById('message'); const typedValueElement = document getElementById('typed-value'); ✅ 試著加入更多的引文到你的遊戲中。 筆記 我們可以接收任何物件，只要使用程式碼 document getElementById。因為我們需要定期參考這些元素，所以使用常數來確認是否有單字輸入錯誤的問題。框架如 Vuejs 或 React 可以幫助你更好管理你的程式碼。\n花點時間觀看下列關於 const、let 與 var 的影片。\n點擊上方圖片以觀賞關於變數的影片。\n加入開始邏輯\n為了開始我們的遊戲，玩家會點擊開始按鈕。當然，我們不知道何時玩家會開始遊戲，這就是為什麼我們使用事件監聽者到程式中。一個事件監聽者允許我們監看事件的觸發與對應的回應程式。在這個例子，我們希望當使用者點擊開始時，執行某些程式。\n當玩家點擊 start 按鈕後，我們需要挑選一段引文、設定使用者介面並追蹤現在玩家的要輸入的單字與時間。下列為我們需要新增的程式碼，我們會在之後逐行解釋。\n```javascript\n// 在 script",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 580,
    "chunk_index": 18,
    "total_chunks": 43
  },
  {
    "id": "de3b3c95be8c3f48d28e7d36292fe4bb",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "never ends, Watson It is a series of lessons, with the greatest for the last ', ]; // 儲存單字列表及目前要輸入的單字索引 let words = []; let wordIndex = 0; // 開始時間 let startTime = Date now(); // 網頁物件連結 const quoteElement = document getElementById('quote'); const messageElement = document getElementById('message'); const typedValueElement = document getElementById('typed-value'); ✅ 試著加入更多的引文到你的遊戲中。 筆記 我們可以接收任何物件，只要使用程式碼 document getElementById。因為我們需要定期參考這些元素，所以使用常數來確認是否有單字輸入錯誤的問題。框架如 Vuejs 或 React 可以幫助你更好管理你的程式碼。 花點時間觀看下列關於 const、let 與 var 的影片。 點擊上方圖片以觀賞關於變數的影片。 加入開始邏輯 為了開始我們的遊戲，玩家會點擊開始按鈕。當然，我們不知道何時玩家會開始遊戲，這就是為什麼我們使用事件監聽者到程式中。一個事件監聽者允許我們監看事件的觸發與對應的回應程式。在這個例子，我們希望當使用者點擊開始時，執行某些程式。 當玩家點擊 start 按鈕後，我們需要挑選一段引文、設定使用者介面並追蹤現在玩家的要輸入的單字與時間。下列為我們需要新增的程式碼，我們會在之後逐行解釋。 ```javascript // 在 scriptjs 末端\ndocument",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 567,
    "chunk_index": 19,
    "total_chunks": 43
  },
  {
    "id": "9ac109dc2545a7427421bd2b8f4ee6b4",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "Watson It is a series of lessons, with the greatest for the last ', ]; // 儲存單字列表及目前要輸入的單字索引 let words = []; let wordIndex = 0; // 開始時間 let startTime = Date now(); // 網頁物件連結 const quoteElement = document getElementById('quote'); const messageElement = document getElementById('message'); const typedValueElement = document getElementById('typed-value'); ✅ 試著加入更多的引文到你的遊戲中。 筆記 我們可以接收任何物件，只要使用程式碼 document getElementById。因為我們需要定期參考這些元素，所以使用常數來確認是否有單字輸入錯誤的問題。框架如 Vuejs 或 React 可以幫助你更好管理你的程式碼。 花點時間觀看下列關於 const、let 與 var 的影片。 點擊上方圖片以觀賞關於變數的影片。 加入開始邏輯 為了開始我們的遊戲，玩家會點擊開始按鈕。當然，我們不知道何時玩家會開始遊戲，這就是為什麼我們使用事件監聽者到程式中。一個事件監聽者允許我們監看事件的觸發與對應的回應程式。在這個例子，我們希望當使用者點擊開始時，執行某些程式。 當玩家點擊 start 按鈕後，我們需要挑選一段引文、設定使用者介面並追蹤現在玩家的要輸入的單字與時間。下列為我們需要新增的程式碼，我們會在之後逐行解釋。 ```javascript // 在 scriptjs 末端 documentgetElementById('start')",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 569,
    "chunk_index": 20,
    "total_chunks": 43
  },
  {
    "id": "9f3cf67c58d10824e502a59d13680f84",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "Watson It is a series of lessons, with the greatest for the last ', ]; // 儲存單字列表及目前要輸入的單字索引 let words = []; let wordIndex = 0; // 開始時間 let startTime = Date now(); // 網頁物件連結 const quoteElement = document getElementById('quote'); const messageElement = document getElementById('message'); const typedValueElement = document getElementById('typed-value'); ✅ 試著加入更多的引文到你的遊戲中。 筆記 我們可以接收任何物件，只要使用程式碼 document getElementById。因為我們需要定期參考這些元素，所以使用常數來確認是否有單字輸入錯誤的問題。框架如 Vuejs 或 React 可以幫助你更好管理你的程式碼。 花點時間觀看下列關於 const、let 與 var 的影片。 點擊上方圖片以觀賞關於變數的影片。 加入開始邏輯 為了開始我們的遊戲，玩家會點擊開始按鈕。當然，我們不知道何時玩家會開始遊戲，這就是為什麼我們使用事件監聽者到程式中。一個事件監聽者允許我們監看事件的觸發與對應的回應程式。在這個例子，我們希望當使用者點擊開始時，執行某些程式。 當玩家點擊 start 按鈕後，我們需要挑選一段引文、設定使用者介面並追蹤現在玩家的要輸入的單字與時間。下列為我們需要新增的程式碼，我們會在之後逐行解釋。 ```javascript // 在 scriptjs 末端 documentgetElementById('start')addEventListener('click', () => {\n// 取得一行引文\nconst quoteIndex = Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 590,
    "chunk_index": 21,
    "total_chunks": 43
  },
  {
    "id": "066ff8a361a398f4c63011b0b9b575ce",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "greatest for the last ', ]; // 儲存單字列表及目前要輸入的單字索引 let words = []; let wordIndex = 0; // 開始時間 let startTime = Date now(); // 網頁物件連結 const quoteElement = document getElementById('quote'); const messageElement = document getElementById('message'); const typedValueElement = document getElementById('typed-value'); ✅ 試著加入更多的引文到你的遊戲中。 筆記 我們可以接收任何物件，只要使用程式碼 document getElementById。因為我們需要定期參考這些元素，所以使用常數來確認是否有單字輸入錯誤的問題。框架如 Vuejs 或 React 可以幫助你更好管理你的程式碼。 花點時間觀看下列關於 const、let 與 var 的影片。 點擊上方圖片以觀賞關於變數的影片。 加入開始邏輯 為了開始我們的遊戲，玩家會點擊開始按鈕。當然，我們不知道何時玩家會開始遊戲，這就是為什麼我們使用事件監聽者到程式中。一個事件監聽者允許我們監看事件的觸發與對應的回應程式。在這個例子，我們希望當使用者點擊開始時，執行某些程式。 當玩家點擊 start 按鈕後，我們需要挑選一段引文、設定使用者介面並追蹤現在玩家的要輸入的單字與時間。下列為我們需要新增的程式碼，我們會在之後逐行解釋。 ```javascript // 在 scriptjs 末端 documentgetElementById('start')addEventListener('click', () => { // 取得一行引文 const quoteIndex = Mathfloor(Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 581,
    "chunk_index": 22,
    "total_chunks": 43
  },
  {
    "id": "2a386a194ca8080068256ec8b2f45dfa",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "greatest for the last ', ]; // 儲存單字列表及目前要輸入的單字索引 let words = []; let wordIndex = 0; // 開始時間 let startTime = Date now(); // 網頁物件連結 const quoteElement = document getElementById('quote'); const messageElement = document getElementById('message'); const typedValueElement = document getElementById('typed-value'); ✅ 試著加入更多的引文到你的遊戲中。 筆記 我們可以接收任何物件，只要使用程式碼 document getElementById。因為我們需要定期參考這些元素，所以使用常數來確認是否有單字輸入錯誤的問題。框架如 Vuejs 或 React 可以幫助你更好管理你的程式碼。 花點時間觀看下列關於 const、let 與 var 的影片。 點擊上方圖片以觀賞關於變數的影片。 加入開始邏輯 為了開始我們的遊戲，玩家會點擊開始按鈕。當然，我們不知道何時玩家會開始遊戲，這就是為什麼我們使用事件監聽者到程式中。一個事件監聽者允許我們監看事件的觸發與對應的回應程式。在這個例子，我們希望當使用者點擊開始時，執行某些程式。 當玩家點擊 start 按鈕後，我們需要挑選一段引文、設定使用者介面並追蹤現在玩家的要輸入的單字與時間。下列為我們需要新增的程式碼，我們會在之後逐行解釋。 ```javascript // 在 scriptjs 末端 documentgetElementById('start')addEventListener('click', () => { // 取得一行引文 const quoteIndex = Mathfloor(Mathrandom() * quotes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 585,
    "chunk_index": 23,
    "total_chunks": 43
  },
  {
    "id": "ae6d7677ea67e0ca54c1fdef4982437b",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "the last ', ]; // 儲存單字列表及目前要輸入的單字索引 let words = []; let wordIndex = 0; // 開始時間 let startTime = Date now(); // 網頁物件連結 const quoteElement = document getElementById('quote'); const messageElement = document getElementById('message'); const typedValueElement = document getElementById('typed-value'); ✅ 試著加入更多的引文到你的遊戲中。 筆記 我們可以接收任何物件，只要使用程式碼 document getElementById。因為我們需要定期參考這些元素，所以使用常數來確認是否有單字輸入錯誤的問題。框架如 Vuejs 或 React 可以幫助你更好管理你的程式碼。 花點時間觀看下列關於 const、let 與 var 的影片。 點擊上方圖片以觀賞關於變數的影片。 加入開始邏輯 為了開始我們的遊戲，玩家會點擊開始按鈕。當然，我們不知道何時玩家會開始遊戲，這就是為什麼我們使用事件監聽者到程式中。一個事件監聽者允許我們監看事件的觸發與對應的回應程式。在這個例子，我們希望當使用者點擊開始時，執行某些程式。 當玩家點擊 start 按鈕後，我們需要挑選一段引文、設定使用者介面並追蹤現在玩家的要輸入的單字與時間。下列為我們需要新增的程式碼，我們會在之後逐行解釋。 ```javascript // 在 scriptjs 末端 documentgetElementById('start')addEventListener('click', () => { // 取得一行引文 const quoteIndex = Mathfloor(Mathrandom() * quoteslength);\nconst quote = quotes[quoteIndex];\n// 將引文分成許多單字，存在矩陣中。\nwords = quote",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 617,
    "chunk_index": 24,
    "total_chunks": 43
  },
  {
    "id": "df624a8f5a7c745dcb9a4044183b9f69",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "[]; let wordIndex = 0; // 開始時間 let startTime = Date now(); // 網頁物件連結 const quoteElement = document getElementById('quote'); const messageElement = document getElementById('message'); const typedValueElement = document getElementById('typed-value'); ✅ 試著加入更多的引文到你的遊戲中。 筆記 我們可以接收任何物件，只要使用程式碼 document getElementById。因為我們需要定期參考這些元素，所以使用常數來確認是否有單字輸入錯誤的問題。框架如 Vuejs 或 React 可以幫助你更好管理你的程式碼。 花點時間觀看下列關於 const、let 與 var 的影片。 點擊上方圖片以觀賞關於變數的影片。 加入開始邏輯 為了開始我們的遊戲，玩家會點擊開始按鈕。當然，我們不知道何時玩家會開始遊戲，這就是為什麼我們使用事件監聽者到程式中。一個事件監聽者允許我們監看事件的觸發與對應的回應程式。在這個例子，我們希望當使用者點擊開始時，執行某些程式。 當玩家點擊 start 按鈕後，我們需要挑選一段引文、設定使用者介面並追蹤現在玩家的要輸入的單字與時間。下列為我們需要新增的程式碼，我們會在之後逐行解釋。 ```javascript // 在 scriptjs 末端 documentgetElementById('start')addEventListener('click', () => { // 取得一行引文 const quoteIndex = Mathfloor(Mathrandom() * quoteslength); const quote = quotes[quoteIndex]; // 將引文分成許多單字，存在矩陣中。 words = quotesplit(' ');\n// 重制單字索引來做追蹤\nwordIndex = 0;\n// 更新使用者介面\n// 建立 span 元素的矩陣，設定 class 用。\nconst spanWords = words",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 651,
    "chunk_index": 25,
    "total_chunks": 43
  },
  {
    "id": "e64e3b7c2cc97cd1b0a1d4fb2ffc40d0",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "getElementById('quote'); const messageElement = document getElementById('message'); const typedValueElement = document getElementById('typed-value'); ✅ 試著加入更多的引文到你的遊戲中。 筆記 我們可以接收任何物件，只要使用程式碼 document getElementById。因為我們需要定期參考這些元素，所以使用常數來確認是否有單字輸入錯誤的問題。框架如 Vuejs 或 React 可以幫助你更好管理你的程式碼。 花點時間觀看下列關於 const、let 與 var 的影片。 點擊上方圖片以觀賞關於變數的影片。 加入開始邏輯 為了開始我們的遊戲，玩家會點擊開始按鈕。當然，我們不知道何時玩家會開始遊戲，這就是為什麼我們使用事件監聽者到程式中。一個事件監聽者允許我們監看事件的觸發與對應的回應程式。在這個例子，我們希望當使用者點擊開始時，執行某些程式。 當玩家點擊 start 按鈕後，我們需要挑選一段引文、設定使用者介面並追蹤現在玩家的要輸入的單字與時間。下列為我們需要新增的程式碼，我們會在之後逐行解釋。 ```javascript // 在 scriptjs 末端 documentgetElementById('start')addEventListener('click', () => { // 取得一行引文 const quoteIndex = Mathfloor(Mathrandom() * quoteslength); const quote = quotes[quoteIndex]; // 將引文分成許多單字，存在矩陣中。 words = quotesplit(' '); // 重制單字索引來做追蹤 wordIndex = 0; // 更新使用者介面 // 建立 span 元素的矩陣，設定 class 用。 const spanWords = wordsmap(function(word) { return <span>${word} </span>});\n// 轉換成字串並以 innerHTML 顯示引文\nquoteElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 650,
    "chunk_index": 26,
    "total_chunks": 43
  },
  {
    "id": "787a9214631c1bb6b7f0ddaaa15a2acf",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "document getElementById('typed-value'); ✅ 試著加入更多的引文到你的遊戲中。 筆記 我們可以接收任何物件，只要使用程式碼 document getElementById。因為我們需要定期參考這些元素，所以使用常數來確認是否有單字輸入錯誤的問題。框架如 Vuejs 或 React 可以幫助你更好管理你的程式碼。 花點時間觀看下列關於 const、let 與 var 的影片。 點擊上方圖片以觀賞關於變數的影片。 加入開始邏輯 為了開始我們的遊戲，玩家會點擊開始按鈕。當然，我們不知道何時玩家會開始遊戲，這就是為什麼我們使用事件監聽者到程式中。一個事件監聽者允許我們監看事件的觸發與對應的回應程式。在這個例子，我們希望當使用者點擊開始時，執行某些程式。 當玩家點擊 start 按鈕後，我們需要挑選一段引文、設定使用者介面並追蹤現在玩家的要輸入的單字與時間。下列為我們需要新增的程式碼，我們會在之後逐行解釋。 ```javascript // 在 scriptjs 末端 documentgetElementById('start')addEventListener('click', () => { // 取得一行引文 const quoteIndex = Mathfloor(Mathrandom() * quoteslength); const quote = quotes[quoteIndex]; // 將引文分成許多單字，存在矩陣中。 words = quotesplit(' '); // 重制單字索引來做追蹤 wordIndex = 0; // 更新使用者介面 // 建立 span 元素的矩陣，設定 class 用。 const spanWords = wordsmap(function(word) { return <span>${word} </span>}); // 轉換成字串並以 innerHTML 顯示引文 quoteElementinnerHTML = spanWords",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 633,
    "chunk_index": 27,
    "total_chunks": 43
  },
  {
    "id": "02135967e0aa918af0dc670b2a09c11a",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "✅ 試著加入更多的引文到你的遊戲中。 筆記 我們可以接收任何物件，只要使用程式碼 document getElementById。因為我們需要定期參考這些元素，所以使用常數來確認是否有單字輸入錯誤的問題。框架如 Vuejs 或 React 可以幫助你更好管理你的程式碼。 花點時間觀看下列關於 const、let 與 var 的影片。 點擊上方圖片以觀賞關於變數的影片。 加入開始邏輯 為了開始我們的遊戲，玩家會點擊開始按鈕。當然，我們不知道何時玩家會開始遊戲，這就是為什麼我們使用事件監聽者到程式中。一個事件監聽者允許我們監看事件的觸發與對應的回應程式。在這個例子，我們希望當使用者點擊開始時，執行某些程式。 當玩家點擊 start 按鈕後，我們需要挑選一段引文、設定使用者介面並追蹤現在玩家的要輸入的單字與時間。下列為我們需要新增的程式碼，我們會在之後逐行解釋。 ```javascript // 在 scriptjs 末端 documentgetElementById('start')addEventListener('click', () => { // 取得一行引文 const quoteIndex = Mathfloor(Mathrandom() * quoteslength); const quote = quotes[quoteIndex]; // 將引文分成許多單字，存在矩陣中。 words = quotesplit(' '); // 重制單字索引來做追蹤 wordIndex = 0; // 更新使用者介面 // 建立 span 元素的矩陣，設定 class 用。 const spanWords = wordsmap(function(word) { return <span>${word} </span>}); // 轉換成字串並以 innerHTML 顯示引文 quoteElementinnerHTML = spanWordsjoin('');\n// 標記第一個單字\nquoteElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 643,
    "chunk_index": 28,
    "total_chunks": 43
  },
  {
    "id": "85a3e18195cad83223ea2dbe8332af8b",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "我們可以接收任何物件，只要使用程式碼 document getElementById。因為我們需要定期參考這些元素，所以使用常數來確認是否有單字輸入錯誤的問題。框架如 Vuejs 或 React 可以幫助你更好管理你的程式碼。 花點時間觀看下列關於 const、let 與 var 的影片。 點擊上方圖片以觀賞關於變數的影片。 加入開始邏輯 為了開始我們的遊戲，玩家會點擊開始按鈕。當然，我們不知道何時玩家會開始遊戲，這就是為什麼我們使用事件監聽者到程式中。一個事件監聽者允許我們監看事件的觸發與對應的回應程式。在這個例子，我們希望當使用者點擊開始時，執行某些程式。 當玩家點擊 start 按鈕後，我們需要挑選一段引文、設定使用者介面並追蹤現在玩家的要輸入的單字與時間。下列為我們需要新增的程式碼，我們會在之後逐行解釋。 ```javascript // 在 scriptjs 末端 documentgetElementById('start')addEventListener('click', () => { // 取得一行引文 const quoteIndex = Mathfloor(Mathrandom() * quoteslength); const quote = quotes[quoteIndex]; // 將引文分成許多單字，存在矩陣中。 words = quotesplit(' '); // 重制單字索引來做追蹤 wordIndex = 0; // 更新使用者介面 // 建立 span 元素的矩陣，設定 class 用。 const spanWords = wordsmap(function(word) { return <span>${word} </span>}); // 轉換成字串並以 innerHTML 顯示引文 quoteElementinnerHTML = spanWordsjoin(''); // 標記第一個單字 quoteElementchildNodes[0]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 618,
    "chunk_index": 29,
    "total_chunks": 43
  },
  {
    "id": "fbe992b5495a4ae3b1920469795aaf96",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "我們可以接收任何物件，只要使用程式碼 document getElementById。因為我們需要定期參考這些元素，所以使用常數來確認是否有單字輸入錯誤的問題。框架如 Vuejs 或 React 可以幫助你更好管理你的程式碼。 花點時間觀看下列關於 const、let 與 var 的影片。 點擊上方圖片以觀賞關於變數的影片。 加入開始邏輯 為了開始我們的遊戲，玩家會點擊開始按鈕。當然，我們不知道何時玩家會開始遊戲，這就是為什麼我們使用事件監聽者到程式中。一個事件監聽者允許我們監看事件的觸發與對應的回應程式。在這個例子，我們希望當使用者點擊開始時，執行某些程式。 當玩家點擊 start 按鈕後，我們需要挑選一段引文、設定使用者介面並追蹤現在玩家的要輸入的單字與時間。下列為我們需要新增的程式碼，我們會在之後逐行解釋。 ```javascript // 在 scriptjs 末端 documentgetElementById('start')addEventListener('click', () => { // 取得一行引文 const quoteIndex = Mathfloor(Mathrandom() * quoteslength); const quote = quotes[quoteIndex]; // 將引文分成許多單字，存在矩陣中。 words = quotesplit(' '); // 重制單字索引來做追蹤 wordIndex = 0; // 更新使用者介面 // 建立 span 元素的矩陣，設定 class 用。 const spanWords = wordsmap(function(word) { return <span>${word} </span>}); // 轉換成字串並以 innerHTML 顯示引文 quoteElementinnerHTML = spanWordsjoin(''); // 標記第一個單字 quoteElementchildNodes[0]className = 'highlight';\n// 清除訊息欄之前的訊息\nmessageElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 641,
    "chunk_index": 30,
    "total_chunks": 43
  },
  {
    "id": "ff85eb19ae6d6f56a16e1d135601edfb",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "React 可以幫助你更好管理你的程式碼。 花點時間觀看下列關於 const、let 與 var 的影片。 點擊上方圖片以觀賞關於變數的影片。 加入開始邏輯 為了開始我們的遊戲，玩家會點擊開始按鈕。當然，我們不知道何時玩家會開始遊戲，這就是為什麼我們使用事件監聽者到程式中。一個事件監聽者允許我們監看事件的觸發與對應的回應程式。在這個例子，我們希望當使用者點擊開始時，執行某些程式。 當玩家點擊 start 按鈕後，我們需要挑選一段引文、設定使用者介面並追蹤現在玩家的要輸入的單字與時間。下列為我們需要新增的程式碼，我們會在之後逐行解釋。 ```javascript // 在 scriptjs 末端 documentgetElementById('start')addEventListener('click', () => { // 取得一行引文 const quoteIndex = Mathfloor(Mathrandom() * quoteslength); const quote = quotes[quoteIndex]; // 將引文分成許多單字，存在矩陣中。 words = quotesplit(' '); // 重制單字索引來做追蹤 wordIndex = 0; // 更新使用者介面 // 建立 span 元素的矩陣，設定 class 用。 const spanWords = wordsmap(function(word) { return <span>${word} </span>}); // 轉換成字串並以 innerHTML 顯示引文 quoteElementinnerHTML = spanWordsjoin(''); // 標記第一個單字 quoteElementchildNodes[0]className = 'highlight'; // 清除訊息欄之前的訊息 messageElementinnerText = '';\n// 設定文字框\n// 清除文字框\ntypedValueElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 584,
    "chunk_index": 31,
    "total_chunks": 43
  },
  {
    "id": "ac1bdd97f308f54866fc067d2f4cce56",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "點擊上方圖片以觀賞關於變數的影片。 加入開始邏輯 為了開始我們的遊戲，玩家會點擊開始按鈕。當然，我們不知道何時玩家會開始遊戲，這就是為什麼我們使用事件監聽者到程式中。一個事件監聽者允許我們監看事件的觸發與對應的回應程式。在這個例子，我們希望當使用者點擊開始時，執行某些程式。 當玩家點擊 start 按鈕後，我們需要挑選一段引文、設定使用者介面並追蹤現在玩家的要輸入的單字與時間。下列為我們需要新增的程式碼，我們會在之後逐行解釋。 ```javascript // 在 scriptjs 末端 documentgetElementById('start')addEventListener('click', () => { // 取得一行引文 const quoteIndex = Mathfloor(Mathrandom() * quoteslength); const quote = quotes[quoteIndex]; // 將引文分成許多單字，存在矩陣中。 words = quotesplit(' '); // 重制單字索引來做追蹤 wordIndex = 0; // 更新使用者介面 // 建立 span 元素的矩陣，設定 class 用。 const spanWords = wordsmap(function(word) { return <span>${word} </span>}); // 轉換成字串並以 innerHTML 顯示引文 quoteElementinnerHTML = spanWordsjoin(''); // 標記第一個單字 quoteElementchildNodes[0]className = 'highlight'; // 清除訊息欄之前的訊息 messageElementinnerText = ''; // 設定文字框 // 清除文字框 typedValueElementvalue = '';\n// 設定 focus\ntypedValueElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 550,
    "chunk_index": 32,
    "total_chunks": 43
  },
  {
    "id": "7a0900caf2862cec22811b5224ad4948",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "```javascript // 在 scriptjs 末端 documentgetElementById('start')addEventListener('click', () => { // 取得一行引文 const quoteIndex = Mathfloor(Mathrandom() * quoteslength); const quote = quotes[quoteIndex]; // 將引文分成許多單字，存在矩陣中。 words = quotesplit(' '); // 重制單字索引來做追蹤 wordIndex = 0; // 更新使用者介面 // 建立 span 元素的矩陣，設定 class 用。 const spanWords = wordsmap(function(word) { return <span>${word} </span>}); // 轉換成字串並以 innerHTML 顯示引文 quoteElementinnerHTML = spanWordsjoin(''); // 標記第一個單字 quoteElementchildNodes[0]className = 'highlight'; // 清除訊息欄之前的訊息 messageElementinnerText = ''; // 設定文字框 // 清除文字框 typedValueElementvalue = ''; // 設定 focus typedValueElementfocus();\n// 設定事件驅動程式\n// 開始計時器\nstartTime = new Date() getTime();\n});\n```\n我們來分解程式碼吧！\n設定單字追蹤\n使用 Math floor 和 Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 320,
    "chunk_index": 33,
    "total_chunks": 43
  },
  {
    "id": "e7a343597d9cf042e0edc6b44e24eb7a",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "quote = quotes[quoteIndex]; // 將引文分成許多單字，存在矩陣中。 words = quotesplit(' '); // 重制單字索引來做追蹤 wordIndex = 0; // 更新使用者介面 // 建立 span 元素的矩陣，設定 class 用。 const spanWords = wordsmap(function(word) { return <span>${word} </span>}); // 轉換成字串並以 innerHTML 顯示引文 quoteElementinnerHTML = spanWordsjoin(''); // 標記第一個單字 quoteElementchildNodes[0]className = 'highlight'; // 清除訊息欄之前的訊息 messageElementinnerText = ''; // 設定文字框 // 清除文字框 typedValueElementvalue = ''; // 設定 focus typedValueElementfocus(); // 設定事件驅動程式 // 開始計時器 startTime = new Date() getTime(); }); ``` 我們來分解程式碼吧！ 設定單字追蹤 使用 Math floor 和 Mathrandom 讓我們能隨機從矩陣 quotes 中挑選一行引文\n轉換 quote 成 words 組成的矩陣，追蹤目前玩家正在輸入的單字\nwordIndex 設定為 0，玩家會從第一的單字開始輸入\n設定使用者介面\n建立矩陣 spanWords，將每一個單字包在 span 元素中\n這讓我們能高光標記單字\njoin 矩陣來建立字串，我們可以在 quoteElement 上更新 innerHTML\n這會顯示引文給玩家檢視\n設定第一個 span 元素的 className 成 highlight，來標記單字呈黃色\n修改 messageElement的 innerText 成 ''，這會清除訊息欄的內容\n設定文字框\n清除目前 typedValueElement 的 value\n設定 typedValueElement 成 focus\n呼叫 getTime 來啟始計時器\n加入打字邏輯\n當玩家開始打字時，input 事件會被觸發。對應的事件監聽者需要檢查玩家是否輸入正確的單字，監控目前的遊戲狀況。回到檔案 script",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 658,
    "chunk_index": 34,
    "total_chunks": 43
  },
  {
    "id": "640b17fccae1d20dcbb76dfa88d904c9",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "清除文字框 typedValueElementvalue = ''; // 設定 focus typedValueElementfocus(); // 設定事件驅動程式 // 開始計時器 startTime = new Date() getTime(); }); ``` 我們來分解程式碼吧！ 設定單字追蹤 使用 Math floor 和 Mathrandom 讓我們能隨機從矩陣 quotes 中挑選一行引文 轉換 quote 成 words 組成的矩陣，追蹤目前玩家正在輸入的單字 wordIndex 設定為 0，玩家會從第一的單字開始輸入 設定使用者介面 建立矩陣 spanWords，將每一個單字包在 span 元素中 這讓我們能高光標記單字 join 矩陣來建立字串，我們可以在 quoteElement 上更新 innerHTML 這會顯示引文給玩家檢視 設定第一個 span 元素的 className 成 highlight，來標記單字呈黃色 修改 messageElement的 innerText 成 ''，這會清除訊息欄的內容 設定文字框 清除目前 typedValueElement 的 value 設定 typedValueElement 成 focus 呼叫 getTime 來啟始計時器 加入打字邏輯 當玩家開始打字時，input 事件會被觸發。對應的事件監聽者需要檢查玩家是否輸入正確的單字，監控目前的遊戲狀況。回到檔案 scriptjs，加入下方程式碼到檔案最下方。我們會在後續解釋程式碼。\n```javascript\n// script",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 35,
    "total_chunks": 43
  },
  {
    "id": "4279b24c5969cecc8d19bf79b74fb8a1",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "''; // 設定 focus typedValueElementfocus(); // 設定事件驅動程式 // 開始計時器 startTime = new Date() getTime(); }); ``` 我們來分解程式碼吧！ 設定單字追蹤 使用 Math floor 和 Mathrandom 讓我們能隨機從矩陣 quotes 中挑選一行引文 轉換 quote 成 words 組成的矩陣，追蹤目前玩家正在輸入的單字 wordIndex 設定為 0，玩家會從第一的單字開始輸入 設定使用者介面 建立矩陣 spanWords，將每一個單字包在 span 元素中 這讓我們能高光標記單字 join 矩陣來建立字串，我們可以在 quoteElement 上更新 innerHTML 這會顯示引文給玩家檢視 設定第一個 span 元素的 className 成 highlight，來標記單字呈黃色 修改 messageElement的 innerText 成 ''，這會清除訊息欄的內容 設定文字框 清除目前 typedValueElement 的 value 設定 typedValueElement 成 focus 呼叫 getTime 來啟始計時器 加入打字邏輯 當玩家開始打字時，input 事件會被觸發。對應的事件監聽者需要檢查玩家是否輸入正確的單字，監控目前的遊戲狀況。回到檔案 scriptjs，加入下方程式碼到檔案最下方。我們會在後續解釋程式碼。 ```javascript // scriptjs 最末端\ntypedValueElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 505,
    "chunk_index": 36,
    "total_chunks": 43
  },
  {
    "id": "8b8118dd4e71b48b6e6a1a7576fcbdca",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "設定 focus typedValueElementfocus(); // 設定事件驅動程式 // 開始計時器 startTime = new Date() getTime(); }); ``` 我們來分解程式碼吧！ 設定單字追蹤 使用 Math floor 和 Mathrandom 讓我們能隨機從矩陣 quotes 中挑選一行引文 轉換 quote 成 words 組成的矩陣，追蹤目前玩家正在輸入的單字 wordIndex 設定為 0，玩家會從第一的單字開始輸入 設定使用者介面 建立矩陣 spanWords，將每一個單字包在 span 元素中 這讓我們能高光標記單字 join 矩陣來建立字串，我們可以在 quoteElement 上更新 innerHTML 這會顯示引文給玩家檢視 設定第一個 span 元素的 className 成 highlight，來標記單字呈黃色 修改 messageElement的 innerText 成 ''，這會清除訊息欄的內容 設定文字框 清除目前 typedValueElement 的 value 設定 typedValueElement 成 focus 呼叫 getTime 來啟始計時器 加入打字邏輯 當玩家開始打字時，input 事件會被觸發。對應的事件監聽者需要檢查玩家是否輸入正確的單字，監控目前的遊戲狀況。回到檔案 scriptjs，加入下方程式碼到檔案最下方。我們會在後續解釋程式碼。 ```javascript // scriptjs 最末端 typedValueElementaddEventListener('input', () => {\n// 取得目前的單字\nconst currentWord = words[wordIndex];\n// 取得目前輸入的數值\nconst typedValue = typedValueElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 548,
    "chunk_index": 37,
    "total_chunks": 43
  },
  {
    "id": "6667acf8c289894942eafb9b53527670",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "設定單字追蹤 使用 Math floor 和 Mathrandom 讓我們能隨機從矩陣 quotes 中挑選一行引文 轉換 quote 成 words 組成的矩陣，追蹤目前玩家正在輸入的單字 wordIndex 設定為 0，玩家會從第一的單字開始輸入 設定使用者介面 建立矩陣 spanWords，將每一個單字包在 span 元素中 這讓我們能高光標記單字 join 矩陣來建立字串，我們可以在 quoteElement 上更新 innerHTML 這會顯示引文給玩家檢視 設定第一個 span 元素的 className 成 highlight，來標記單字呈黃色 修改 messageElement的 innerText 成 ''，這會清除訊息欄的內容 設定文字框 清除目前 typedValueElement 的 value 設定 typedValueElement 成 focus 呼叫 getTime 來啟始計時器 加入打字邏輯 當玩家開始打字時，input 事件會被觸發。對應的事件監聽者需要檢查玩家是否輸入正確的單字，監控目前的遊戲狀況。回到檔案 scriptjs，加入下方程式碼到檔案最下方。我們會在後續解釋程式碼。 ```javascript // scriptjs 最末端 typedValueElementaddEventListener('input', () => { // 取得目前的單字 const currentWord = words[wordIndex]; // 取得目前輸入的數值 const typedValue = typedValueElementvalue;\nif (typedValue === currentWord && wordIndex === words",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 507,
    "chunk_index": 38,
    "total_chunks": 43
  },
  {
    "id": "b4f80a20427ad3370dafdc930eef353a",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "中挑選一行引文 轉換 quote 成 words 組成的矩陣，追蹤目前玩家正在輸入的單字 wordIndex 設定為 0，玩家會從第一的單字開始輸入 設定使用者介面 建立矩陣 spanWords，將每一個單字包在 span 元素中 這讓我們能高光標記單字 join 矩陣來建立字串，我們可以在 quoteElement 上更新 innerHTML 這會顯示引文給玩家檢視 設定第一個 span 元素的 className 成 highlight，來標記單字呈黃色 修改 messageElement的 innerText 成 ''，這會清除訊息欄的內容 設定文字框 清除目前 typedValueElement 的 value 設定 typedValueElement 成 focus 呼叫 getTime 來啟始計時器 加入打字邏輯 當玩家開始打字時，input 事件會被觸發。對應的事件監聽者需要檢查玩家是否輸入正確的單字，監控目前的遊戲狀況。回到檔案 scriptjs，加入下方程式碼到檔案最下方。我們會在後續解釋程式碼。 ```javascript // scriptjs 最末端 typedValueElementaddEventListener('input', () => { // 取得目前的單字 const currentWord = words[wordIndex]; // 取得目前輸入的數值 const typedValue = typedValueElementvalue; if (typedValue === currentWord && wordIndex === wordslength - 1) {\n// 句子最末端\n// 顯示成功\nconst elapsedTime = new Date()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 39,
    "total_chunks": 43
  },
  {
    "id": "b318bb9d6af6b99b154e3cd9a3994f6b",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "span 元素中 這讓我們能高光標記單字 join 矩陣來建立字串，我們可以在 quoteElement 上更新 innerHTML 這會顯示引文給玩家檢視 設定第一個 span 元素的 className 成 highlight，來標記單字呈黃色 修改 messageElement的 innerText 成 ''，這會清除訊息欄的內容 設定文字框 清除目前 typedValueElement 的 value 設定 typedValueElement 成 focus 呼叫 getTime 來啟始計時器 加入打字邏輯 當玩家開始打字時，input 事件會被觸發。對應的事件監聽者需要檢查玩家是否輸入正確的單字，監控目前的遊戲狀況。回到檔案 scriptjs，加入下方程式碼到檔案最下方。我們會在後續解釋程式碼。 ```javascript // scriptjs 最末端 typedValueElementaddEventListener('input', () => { // 取得目前的單字 const currentWord = words[wordIndex]; // 取得目前輸入的數值 const typedValue = typedValueElementvalue; if (typedValue === currentWord && wordIndex === wordslength - 1) { // 句子最末端 // 顯示成功 const elapsedTime = new Date()getTime() - startTime;\nconst message = CONGRATULATIONS You finished in ${elapsedTime / 1000} seconds ;\nmessageElement innerText = message;\n} else if (typedValue endsWith(' ') && typedValue trim() === currentWord) {\n// 單字最末端\n// 清除輸入的數值，準備給新的單字使用\ntypedValueElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 40,
    "total_chunks": 43
  },
  {
    "id": "13047688de145c61743bf9a80df28d96",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "scriptjs，加入下方程式碼到檔案最下方。我們會在後續解釋程式碼。 ```javascript // scriptjs 最末端 typedValueElementaddEventListener('input', () => { // 取得目前的單字 const currentWord = words[wordIndex]; // 取得目前輸入的數值 const typedValue = typedValueElementvalue; if (typedValue === currentWord && wordIndex === wordslength - 1) { // 句子最末端 // 顯示成功 const elapsedTime = new Date()getTime() - startTime; const message = CONGRATULATIONS You finished in ${elapsedTime / 1000} seconds ; messageElement innerText = message; } else if (typedValue endsWith(' ') && typedValue trim() === currentWord) { // 單字最末端 // 清除輸入的數值，準備給新的單字使用 typedValueElementvalue = '';\n// 移動到下一個單字\nwordIndex++;\n// 重設所有引文子元素的 class 名稱\nfor (const wordElement of quoteElement childNodes) {\nwordElement className = '';\n}\n// 標記新單字\nquoteElement childNodes[wordIndex] className = 'highlight';\n} else if (currentWord startsWith(typedValue)) {\n// 單字目前輸入正確\n// 標記下一個單字\ntypedValueElement className = '';\n} else {\n// 單字輸入錯誤\ntypedValueElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 369,
    "chunk_index": 41,
    "total_chunks": 43
  },
  {
    "id": "8beb356165954b2e9e0b628cccab56d1",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "Typing game",
    "content": "finished in ${elapsedTime / 1000} seconds ; messageElement innerText = message; } else if (typedValue endsWith(' ') && typedValue trim() === currentWord) { // 單字最末端 // 清除輸入的數值，準備給新的單字使用 typedValueElementvalue = ''; // 移動到下一個單字 wordIndex++; // 重設所有引文子元素的 class 名稱 for (const wordElement of quoteElement childNodes) { wordElement className = ''; } // 標記新單字 quoteElement childNodes[wordIndex] className = 'highlight'; } else if (currentWord startsWith(typedValue)) { // 單字目前輸入正確 // 標記下一個單字 typedValueElement className = ''; } else { // 單字輸入錯誤 typedValueElementclassName = 'error';\n}\n});\n```\n讓我們分解程式碼吧！我們開始取得目前的單字與玩家輸入的數值。我們建立一系列的邏輯，檢查引文是否輸入完成，單字是否輸入完成，單字是否正確、是否錯誤。\n引文完成，檢查 typedValue 與 currentWord 相等且 wordIndex 與 words 的 length 減一相等。\n計算 elapsedTime ，利用目前時間減去 startTime 取得遊戲時長\nelapsedTime 除以 1,000 ，轉化毫秒單位為秒單位\n顯示成功訊息\n單字完成，以 typedValue 間的空白為界，檢查 typedValue 是否與 currentWord 相等\n設定 typedElement 的 value 成 '' ，準備給下一個單字輸入進來\n增加 wordIndex 到下一個單字\n進迴圈，每一個 quoteElement 的 childNodes ，它們的 className 都被設為 '' ，代表預設的單字呈現規則\n設定單字的 className 成 highlight 來標記為下一個被輸入的單字\n單字目前輸入正確但未完成，從 typedValue 開始檢查 currentWord\n確保清除 typedValueElement 的 className，顯示預設的呈現方式。\n若此時輸入錯誤，我們加上錯誤規則\n設定 typedValueElement 的 className 成 error\n測試你的應用程式\n我們做到最後了！最後一步就是確保我們的應用程式運作正常。試試看！不要擔心程式出現錯誤，所有的開發者都會面臨錯誤。有需要時，檢查程式訊息並偵錯。\n點擊按鈕 start，馬上開始輸入單字！你可以看看這預覽動畫。\n🚀 挑戰\n加入更多功能。\n在完成遊戲時，關閉 input 事件監聽者；遊戲重新開始時，再重新開啟它。\n當玩家完成引文時，關閉文字框\n以對話窗格的方式顯示恭賀訊息\n利用 localStorage 儲存最高分的資料\n課後測驗\n課後測驗\n複習與自學\n在瀏覽器上閱讀所有開發者可運用的事件，想想你能在什麼樣的場合使用各個事件。\n作業\n建立一款新的鍵盤遊戲",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16682,
      "relative_path": "git_repos\\web-dev-beginners\\4-typing-game\\typing-game\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 1020,
    "chunk_index": 42,
    "total_chunks": 43
  },
  {
    "id": "6fc2bf5caddb9de94aac6699765a9949",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\solution\\index.html",
    "source_type": "git_repo",
    "title": "Welcome to my Virtual Terrarium",
    "content": "Welcome to my Virtual Terrarium\nMy Terrarium",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 2638,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\solution\\index.html",
      "source_type": "git_repo"
    },
    "token_count": 10,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4412dde76f2c8b7a22ed89f23ca8608b",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\solution\\README.md",
    "source_type": "git_repo",
    "title": "My Terrarium: A project to learn about HTML, CSS, and DOM manipulation using JavaScript 🌵🌱",
    "content": "My Terrarium: A project to learn about HTML, CSS, and DOM manipulation using JavaScript 🌵🌱\nA small drag and drop code-meditation. With a little HTML, JS and CSS, you can build a web interface, style it, and add an interaction.\nCredits\nWritten with ♥️  by Jen Looper\nThe terrarium created via CSS was inspired by Jakub Mandra's glass jar codepen.\nThe artwork was hand drawn by Jen Looper using Procreate.\nDeploy your Terrarium\nYou can deploy, or publish your terrarium to the web using Azure Static Web Apps.\nFork this repo\nPress this button\nWalk through the wizard creating your app. Make sure you set the app root to either be /solution or the root of your codebase. There's no API in this app, so don't worry about adding that. A .github folder will be created in your forked repo that will help Azure Static Web Apps' build service build and publish your app to a new URL.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1278,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\solution\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 211,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "885cd00cad262dcd96fbb00605e31de2",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\solution\\script.js",
    "source_type": "git_repo",
    "title": "script",
    "content": "/*The solution to draggable elements was inspired by w3schools solution on creating a [Draggable HTML Element](https://www.w3schools.com/howto/howto_js_draggable.asp).*/\n\ndragElement(document.getElementById('plant1'));\ndragElement(document.getElementById('plant2'));\ndragElement(document.getElementById('plant3'));\ndragElement(document.getElementById('plant4'));\ndragElement(document.getElementById('plant5'));\ndragElement(document.getElementById('plant6'));\ndragElement(document.getElementById('plant7'));\ndragElement(document.getElementById('plant8'));\ndragElement(document.getElementById('plant9'));\ndragElement(document.getElementById('plant10'));\ndragElement(document.getElementById('plant11'));\ndragElement(document.getElementById('plant12'));\ndragElement(document.getElementById('plant13'));\ndragElement(document.getElementById('plant14'));\n\n/*\"A closure is the combination of a function bundled together (enclosed) \nwith references to its surrounding state (the lexical environment). \nIn other words, a closure gives you access to an outer function’s scope \nfrom an inner function.\" Create a closure so that you can track the dragged element*/\n\nfunction dragElement(terrariumElement) {\n\t//set 4 positions for positioning on the screen\n\tlet pos1 = 0,\n\t\tpos2 = 0,\n\t\tpos3 = 0,\n\t\tpos4 = 0;\n\tterrariumElement.onpointerdown = pointerDrag;\n\nfunction pointerDrag(e) {\n\t\te.preventDefault();\n\t\tconsole.log(e);\n\t\t// get the initial mouse cursor position for pos3 and pos4\n\t\tpos3 = e.clientX;\n\t\tpos4 = e.clientY;\n\t\t// when the mouse moves, start the drag\n\t\tdocument.onpointermove = elementDrag;\n\t\t// when the mouse is lifted, stop the drag\n\t\tdocument.onpointerup = stopElementDrag;\n\t}",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 2465,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\solution\\script.js",
      "source_type": "git_repo"
    },
    "token_count": 364,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "dd26043ee8b89bf3f0522096c7453219",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\solution\\script.js",
    "source_type": "git_repo",
    "title": "script",
    "content": "the dragged element*/ function dragElement(terrariumElement) { //set 4 positions for positioning on the screen let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0; terrariumElement.onpointerdown = pointerDrag; function pointerDrag(e) { e.preventDefault(); console.log(e); // get the initial mouse cursor position for pos3 and pos4 pos3 = e.clientX; pos4 = e.clientY; // when the mouse moves, start the drag document.onpointermove = elementDrag; // when the mouse is lifted, stop the drag document.onpointerup = stopElementDrag; }\n\nfunction elementDrag(e) {\n\t\t// calculate the new cursor position\n\t\t// pos1 = where the Xmouse WAS - where it IS\n\t\tpos1 = pos3 - e.clientX;\n\t\t// pos2 = where the Ymouse WAS - where it IS\n\t\tpos2 = pos4 - e.clientY;\n\t\t//reset pos3 to current location of Xmouse\n\t\tpos3 = e.clientX;\n\t\t//reset pos4 to current location of Ymouse\n\t\tpos4 = e.clientY;\n\t\tconsole.log(pos1, pos2, pos3, pos4);\n\t\t// set the element's new position:\n\t\tterrariumElement.style.top = terrariumElement.offsetTop - pos2 + 'px';\n\t\tterrariumElement.style.left = terrariumElement.offsetLeft - pos1 + 'px';\n\t}\n\nfunction stopElementDrag() {\n\t\t// stop calculating when mouse is released\n\t\tdocument.onpointerup = null;\n\t\tdocument.onpointermove = null;\n\t}\n}",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 2465,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\solution\\script.js",
      "source_type": "git_repo"
    },
    "token_count": 341,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "fc87b6c4d236c62a58e77075c72c781d",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\solution\\style.css",
    "source_type": "git_repo",
    "title": "style",
    "content": "body {\n\tfont-family: helvetica, arial, sans-serif;\n}\n\nh1 {\n\tcolor: #3a241d;\n\ttext-align: center;\n}\n\n#left-container {\n\tleft: 0px;\n}\n\n#right-container {\n\tright: 0px;\n}\n\n.container {\n\tbackground-color: #eee;\n\twidth: 15%;\n\ttop: 0px;\n\tposition: absolute;\n\theight: 100%;\n\tpadding: 10px;\n}\n\n.plant-holder {\n\tposition: relative;\n\theight: 13%;\n\tleft: -10px;\n}\n\n.plant {\n\tposition: absolute;\n\tmax-width: 150%;\n\tmax-height: 150%;\n\tz-index: 2;\n}\n\n/*https://codepen.io/Rotarepmi/pen/rjpNZY*/\n\n.jar-walls {\n\theight: 80%;\n\twidth: 60%;\n\tbackground: #d1e1df;\n\tborder-radius: 1rem;\n\tposition: absolute;\n\tbottom: 0.5%;\n\tleft: 20%;\n\topacity: 0.5;\n\tz-index: 1;\n}\n\n.jar-top {\n\twidth: 50%;\n\theight: 5%;\n\tbackground: #d1e1df;\n\tposition: absolute;\n\tbottom: 80.5%;\n\tleft: 25%;\n\topacity: 0.7;\n\tz-index: 1;\n}\n\n.jar-bottom {\n\twidth: 50%;\n\theight: 1%;\n\tbackground: #d1e1df;\n\tposition: absolute;\n\tbottom: 0%;\n\tleft: 25%;\n\topacity: 0.7;\n}\n\n.dirt {\n\twidth: 60%;\n\theight: 5%;\n\tbackground: #3a241d;\n\tposition: absolute;\n\tborder-radius: 0 0 1rem 1rem;\n\tbottom: 1%;\n\tleft: 20%;\n\topacity: 0.7;\n\tz-index: -1;\n}\n\n.jar-glossy-long {\n\twidth: 3%;\n\theight: 20%;\n\tborder-radius: 2rem;\n\tbackground: #ddfbff;\n\tposition: absolute;\n\tbottom: 20%;\n\tleft: 5%;\n}\n\n.jar-glossy-short {\n\twidth: 3%;\n\theight: 5%;\n\tborder-radius: 2rem;\n\tbackground: #ddfbff;\n\tposition: absolute;\n\tbottom: 45%;\n\tleft: 5%;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 1454,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\solution\\style.css",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6328439627152a5a9ad7ca76d5a55fe1",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\assignment.es.md",
    "source_type": "git_repo",
    "title": "Trabaja un poco más con DOM",
    "content": "Trabaja un poco más con DOM\nInstrucciones\nInvestigue el DOM un poco más 'adoptando' un elemento DOM. Visite la lista de interfaces DOM de MDN y elija una. Encuéntrelo en un sitio web en la web y escriba una explicación de cómo se usa.\nRúbrica\n| Criterios | Ejemplar | Adecuado | Necesita mejorar |\n| -------- | --------------------------------------------- | ------------------------------------------------ | ----------------------- |\n| | Se presenta la redacción del párrafo, con ejemplo | Se presenta la redacción del párrafo, sin ejemplo | No se presenta ninguna reseña |",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 678,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\assignment.es.md",
      "source_type": "git_repo"
    },
    "token_count": 139,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7d23d155ee3c1aa228a08ffcc8e48ae9",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\assignment.fr.md",
    "source_type": "git_repo",
    "title": "Travailler un peu plus avec le DOM",
    "content": "Travailler un peu plus avec le DOM\nInstructions\nRecherchez un peu plus sur le DOM en 'adoptant' un élément du DOM. Visitez la liste des interfaces DOM de MDN  et choisissez-en une. Trouvez une de ces utilisations dans un site sur le web et rédigez une explication sur la façon dont elle est utilisée.\nRubrique\n| Critères | Exemplaire                                     | Adéquat                                         | Besoin d'amélioration       |\n| -------- | --------------------------------------------- | ------------------------------------------------ | ----------------------- |\n|          | La rédaction du paragraphe est présentée, avec un exemple | La rédaction du paragraphe est présentée, sans exemple | Aucune rédaction n'est présentée |",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 866,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\assignment.fr.md",
      "source_type": "git_repo"
    },
    "token_count": 163,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "49e7fc9c2ef98d1691a180bd367bfa7e",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\assignment.it.md",
    "source_type": "git_repo",
    "title": "Lavorare un po' di più con il DOM",
    "content": "Lavorare un po' di più con il DOM\nIstruzioni\nFare ulteriore ricerca sul DOM \"adottando\" un elemento DOM. Visitare l' elenco delle interfacce DOM di MDN e sceglierne una. Trovarla in uso su un sito web, e scrivere una spiegazione di come viene utilizzata.\nRubrica\n| Criteri | Ottimo | Adeguato | Necessita miglioramento |\n| -------- | --------------------------------------------- | ------------------------------------------------ | ----------------------- |\n|          | Viene presentata la redazione del paragrafo, con un esempio | Viene presentata la redazione del paragrafo, senza esempio | Non viene presentato alcun resoconto |",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 731,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\assignment.it.md",
      "source_type": "git_repo"
    },
    "token_count": 160,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8ccc6faad68bfafcd2d448915f6c9d69",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\assignment.hi.md",
    "source_type": "git_repo",
    "title": "DOM के साथ थोड़ा और काम करें",
    "content": "DOM के साथ थोड़ा और काम करें\nअनुदेश\nDOM तत्व को 'अपनाकर' DOM को थोड़ा और रिसर्च करें. MDN की डॉम इंटरफेसेस सुचि पे जाये और एक चयन करे . इसे वेब में एक वेब साइट पर उपयोग किया जा रहा है, और यह कैसे उपयोग किया जाता है एक व्याख्या लिखें।\nशीर्ष\n| मानदंड | उदाहरणात्मक                                      | पर्याप्त                                              | सुधार की जरूरत                       |\n| ------ | ------------------------------------------------ | ----------------------------------------------------- | ------------------------------------ |\n|        | उदाहरण के साथ अनुच्छेद लेखन प्रस्तुत किया गया है | बिना उदाहरण के साथ अनुच्छेद लेखन प्रस्तुत किया गया है | कोई राइटअप प्रस्तुत नहीं किया गया है |",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1444,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\assignment.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 440,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "57de605e6226156f575716685b45c41e",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\assignment.ja.md",
    "source_type": "git_repo",
    "title": "DOM をもう少し使いこなす",
    "content": "DOM をもう少し使いこなす\n説明書\nDOM 要素を「採用」することで、もう少し DOM を研究してみましょう。MDN の DOM インターフェイス一覧にアクセスして、一つ選びます。それが Web 上の Web サイトで使われているのを Web 上で見つけて、それがどのように使われているかの説明を書きます。\nルーブリック\n| 基準 | 模範的な例                                     | 適切な                                         | 改善が必要       |\n| -------- | --------------------------------------------- | ------------------------------------------------ | ----------------------- |\n|          | 段落書きを例に挙げて紹介します。 | 例示せずに、段落書きを提示 | 書き込みはありません。 |",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 919,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\assignment.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 239,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2aa76e78b0e20c3b56b12a5d0ac5a272",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\assignment.ko.md",
    "source_type": "git_repo",
    "title": "DOM으로 좀 더 작업하기",
    "content": "DOM으로 좀 더 작업하기\n설명\nDOM 요소를 '채택'하여 DOM 을 조금 더 조사합니다. MDN 의 DOM 인터페이스 목록을 방문하여 하나를 선택합니다. 웹의 웹 사이트에서 사용중인 것을 찾아 사용 방법에 대한 설명을 작성해봅니다.\n평가 기준\n기준 | 모범 답안 | 적당한 답안 | 개선이 필요한 답안\n--- | --- | --- | ---\n| 예시와 함께 단락으로 작성한 경우 | 단락으로 작성했지만 예시가 없는 경우 | 기록이 없는 경우",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 618,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\assignment.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 193,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c63fb802dab2018ec6f4b2d4d8b9396d",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\assignment.nl.md",
    "source_type": "git_repo",
    "title": "Werk wat meer met de DOM",
    "content": "Werk wat meer met de DOM\nInstructies\nOnderzoek de DOM een beetje meer door een DOM-element te 'adopteren'. Bezoek de lijst met DOM-interfaces van MDN en kies er een. Zoek dat het wordt gebruikt op een website op internet en schrijf een uitleg over hoe het wordt gebruikt.\nRubriek\n| Criteria | Voorbeeldig                                     | Voldoende                                         | Moet worden verbeterd       |\n| -------- | --------------------------------------------- | ------------------------------------------------ | ----------------------- |\n|          | Er wordt een alinea-opsomming gegeven, met een voorbeeld | Paragraafopmaak wordt gepresenteerd, zonder voorbeeld | Er wordt geen beschrijving gepresenteerd |",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 828,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\assignment.nl.md",
      "source_type": "git_repo"
    },
    "token_count": 160,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f62a737803fd02ae44cc2086392c4cfe",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\assignment.ms.md",
    "source_type": "git_repo",
    "title": "Bekerja sedikit dengan DOM",
    "content": "Bekerja sedikit dengan DOM\nArahan\nMengkaji DOM sedikit dengan 'menerapkan' elemen DOM. Lawati laman MDN senarai antara muka DOM dan pilih satu. Cari ia digunakan di laman web di web, dan tulis penjelasan bagaimana ia digunakan.\nRubrik\n| Kriteria | Contoh                                     | Mencukupi                                         | Usaha Lagi       |\n| -------- | --------------------------------------------- | ------------------------------------------------ | ----------------------- |\n|          | Penulisan perenggan dibentangkan, dengan contoh | Penulisan perenggan dibentangkan, tanpa contoh | Tiada penulisan perenggan dibentangkan |",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 746,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\assignment.ms.md",
      "source_type": "git_repo"
    },
    "token_count": 154,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "438576f832cc74c21ea799160a48be58",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\assignment.pt.md",
    "source_type": "git_repo",
    "title": "Trabalhe um pouco mais com a DOM",
    "content": "Trabalhe um pouco mais com a DOM\nInstruções\nPesquise a DOM um pouco mais 'adotando' um elemento DOM. Visite a lista de interfaces DOM do MDN e escolha uma. Encontre-o em um web site e escreva uma explicação de como ele é usado.\nRubrica\n| Criterio | Exemplar                                     | Adequado                                         | Precisa de melhoria       |\n| -------- | --------------------------------------------- | ------------------------------------------------ | ----------------------- |\n|          | A redação do parágrafo é apresentada com exemplo |  redação do parágrafo é apresentada sem exemplo | Nenhum texto é apresentado |",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 761,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\assignment.pt.md",
      "source_type": "git_repo"
    },
    "token_count": 140,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a6fa42280a223bfcf76252f4b5f57391",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\assignment.zh-cn.md",
    "source_type": "git_repo",
    "title": "用 DOM 干更多事",
    "content": "用 DOM 干更多事\n说明\n选取一个 DOM 元素，并通过它对 DOM 进行更深入的研究。访问 MDN 的 DOM 接口的清单 并挑选一个。在网络上寻找一个使用了这个元素的网页，并解释如何使用它。\n评价表\n| 指标 | 优秀 | 良好 | 尚可进步 |\n| --- | ---- | ---- | ------- |\n|     | 写了一段话，并且附带例子 | 写了一段话，没有附带例子 | 没有记录 |",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 517,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\assignment.zh-cn.md",
      "source_type": "git_repo"
    },
    "token_count": 157,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "89b2ab36916e1a0d81cceb7e5e2ad697",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\assignment.zh-tw.md",
    "source_type": "git_repo",
    "title": "用 DOM 做更多事",
    "content": "用 DOM 做更多事\n簡介\n調查其中一項 DOM 的元素。造訪 MDN 關於 DOM 介面的清單挑選其中一項。在網路上找尋一個使用這項元素的網頁，並解釋如何使用它。\n學習評量\n| 作業內容 | 優良                   | 普通             | 待改進           |\n| -------- | ---------------------- | ---------------- | ---------------- |\n|          | 完整的評論文章附帶例子 | 評論文章不帶例子 | 評論文章並不完整 |",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 573,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\assignment.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 184,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ca513680ed92ce7c90b4d918b545c529",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.es.md",
    "source_type": "git_repo",
    "title": "Terrarium Project Part 3: DOM Manipulación y cierre",
    "content": "Terrarium Project Part 3: DOM Manipulación y cierre\nBoceto de Tomomi Imura\nPre-lecture prueba\nIntroducción:\nManipular el DOM, o el \"Modelo de objetos de documento\", es un aspecto clave del desarrollo web Según MDN, \"El modelo de objetos de documento (DOM) es la representación de datos de los objetos que componen la estructura y contenido de un documento en la web \" Los desafíos en torno a la manipulación de DOM en la web a menudo han sido el ímpetu detrás del uso de frameworks de JavaScript en lugar de JavaScript vanilla para administrar el DOM, ¡pero lo administraremos por nuestra cuenta Además, esta lección presentará la idea de un cierre de JavaScript, que puede considerar como una función encerrada por otra función para que la función interna tenga acceso al alcance de la función externa Usaremos un cierre para manipular el DOM Piense en el DOM como un árbol, que representa todas las formas en que se puede manipular un documento de página web Se han escrito varias API (interfaces de programas de aplicación) para que los programadores, utilizando el lenguaje de programación de su elección, puedan acceder al DOM y editarlo, cambiarlo, reorganizarlo y administrarlo de otro modo Una representación del DOM y el marcado HTML a modo de referencia De Olfa Nasraoui\nEn esta lección, completaremos nuestro proyecto de terrario interactivo creando el JavaScript que permitirá al usuario manipular las plantas en la página Requisito previo:\nDebería tener el HTML y CSS para su terrario construido Al final de esta lección, podrá mover las plantas dentro y fuera del terrario arrastrándolas Tarea:\nEn su carpeta de terrario, cree un nuevo archivo llamado script js Importe ese archivo en la sección <head>:\nhtml\n<script src=\" /script js\" defer></script>\n> Nota: use defer cuando importe un archivo JavaScript externo en el archivo html para permitir que JavaScript se ejecute solo después de que el archivo HTML se haya cargado por completo",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.es.md",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "7653a002f3e1271bca21378e32376d77",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.es.md",
    "source_type": "git_repo",
    "title": "Terrarium Project Part 3: DOM Manipulación y cierre",
    "content": "su terrario construido Al final de esta lección, podrá mover las plantas dentro y fuera del terrario arrastrándolas Tarea: En su carpeta de terrario, cree un nuevo archivo llamado script js Importe ese archivo en la sección <head>: html <script src=\" /script js\" defer></script> > Nota: use defer cuando importe un archivo JavaScript externo en el archivo html para permitir que JavaScript se ejecute solo después de que el archivo HTML se haya cargado por completoTambién podría usar el atributo async, que permite que el script se ejecute mientras se analiza el archivo HTML, pero en nuestro caso, es importante tener los elementos HTML completamente disponibles para arrastrar antes de permitir que se ejecute el script de arrastre 1 Los elementos DOM\nLo primero que debe hacer es crear referencias a los elementos que desea manipular en el DOM En nuestro caso, son las 14 plantas que esperan actualmente en las barras laterales Tarea:\nhtml\ndragElement(document getElementById('plant1'));\ndragElement(document getElementById('plant2'));\ndragElement(document getElementById('plant3'));\ndragElement(document getElementById('plant4'));\ndragElement(document getElementById('plant5'));\ndragElement(document getElementById('plant6'));\ndragElement(document getElementById('plant7'));\ndragElement(document getElementById('plant8'));\ndragElement(document getElementById('plant9'));\ndragElement(document getElementById('plant10'));\ndragElement(document getElementById('plant11'));\ndragElement(document getElementById('plant12'));\ndragElement(document getElementById('plant13'));\ndragElement(document getElementById('plant14'));\n¿Que está pasando aqui Está haciendo referencia al documento y mirando a través de su DOM para encontrar un elemento con un Id particular ¿Recuerda en la primera lección sobre HTML que le dio ID individuales a cada imagen de planta (id = \"plant1\") Ahora harás uso de ese esfuerzo Después de identificar cada elemento, pasa ese elemento a una función llamada dragElement que creará en un minuto Por lo tanto, el elemento en el HTML ahora está habilitado para arrastrar, o lo estará en breve ✅ ¿Por qué hacemos referencia a elementos por Id ¿Por qué no por su clase de CSS Puede consultar la lección anterior sobre CSS para responder a esta pregunta 2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.es.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "6a146327c6e62c464748e3e693f4d8d9",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.es.md",
    "source_type": "git_repo",
    "title": "Terrarium Project Part 3: DOM Manipulación y cierre",
    "content": "planta (id = \"plant1\") Ahora harás uso de ese esfuerzo Después de identificar cada elemento, pasa ese elemento a una función llamada dragElement que creará en un minuto Por lo tanto, el elemento en el HTML ahora está habilitado para arrastrar, o lo estará en breve ✅ ¿Por qué hacemos referencia a elementos por Id ¿Por qué no por su clase de CSS Puede consultar la lección anterior sobre CSS para responder a esta pregunta 2El cierre\nAhora está listo para crear el cierre dragElement, que es una función externa que encierra una función o funciones internas (en nuestro caso, tendremos tres) Los cierres son útiles cuando una o más funciones necesitan acceder al alcance de una función externa He aquí un ejemplo:\njavascript\nfunction displayCandy(){\nlet candy = ['jellybeans];\nfunction addCandy(candyType) {\ncandy push(candyType)\n}\naddCandy('gumdrops');\n}\ndisplayCandy();\nconsole log(candy)\nEn este ejemplo, la función displayCandy rodea una función que inserta un nuevo tipo de caramelo en una matriz que ya existe en la función Si tuviera que ejecutar este código, la matriz candy no estaría definida, ya que es una variable local (local al cierre) ✅ ¿Cómo se puede hacer accesible la matriz de candy Intente moverlo fuera del cierre De esta manera, la matriz se vuelve global, en lugar de permanecer solo disponible para el alcance local del cierre Tarea:\nDebajo de las declaraciones de elementos en script js, crea una función:\njavascript\nfunction dragElement(terrariumElement) {\n//establecer 4 posiciones para posicionar en la pantalla\nlet pos1 = 0,\npos2 = 0,\npos3 = 0,\npos4 = 0;\nterrariumElement onpointerdown = pointerDrag;\n}\ndragElement obtiene su objetoterrariumElement de las declaraciones en la parte superior del script Luego, establece algunas posiciones locales en \"0\" para el objeto pasado a la función Estas son las variables locales que se manipularán para cada elemento a medida que agrega la funcionalidad de arrastrar y soltar dentro del cierre de cada elemento",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.es.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "73a07e5867384d4a208060c5b0b8b18a",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.es.md",
    "source_type": "git_repo",
    "title": "Terrarium Project Part 3: DOM Manipulación y cierre",
    "content": "posicionar en la pantalla let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0; terrariumElement onpointerdown = pointerDrag; } dragElement obtiene su objetoterrariumElement de las declaraciones en la parte superior del script Luego, establece algunas posiciones locales en \"0\" para el objeto pasado a la función Estas son las variables locales que se manipularán para cada elemento a medida que agrega la funcionalidad de arrastrar y soltar dentro del cierre de cada elementoEl terrario estará poblado por estos elementos arrastrados, por lo que la aplicación debe realizar un seguimiento de dónde se colocan Además, al terrariumElement que se pasa a esta función se le asigna un evento pointerdown, que forma parte de las API web diseñadas para ayudar con la gestión del DOM Onpointerdown se dispara cuando se presiona un botón, o en nuestro caso, se toca un elemento que se puede arrastrar Este controlador de eventos funciona tanto en navegadores web como móviles, con algunas excepciones ✅ El controlador de eventos onclick tiene mucho más soporte entre navegadores; ¿Por qué no lo usarías aquí Piense en el tipo exacto de interacción de pantalla que está intentando crear aquí 3 La función Pointerdrag\nEl terrariumElement está listo para ser arrastrado; cuando se dispara el evento onpointerdown, se invoca la función pointerDrag Agrega esa función justo debajo de esta línea: terrariumElement onpointerdown = pointerDrag;:\nTarea:\njavascript\nfunction pointerDrag(e) {\ne preventDefault();\nconsole log(e);\npos3 = e clientX;\npos4 = e clientY;\n}\nSuceden varias cosas Primero, evita que ocurran los eventos predeterminados que normalmente ocurren en el puntero hacia abajo usando e preventDefault (); De esta manera, tiene más control sobre el comportamiento de la interfaz Regrese a esta línea cuando haya construido el archivo de script por completo y pruébelo sin e preventDefault ()- ¿qué sucede En segundo lugar, abra index html en una ventana del navegador e inspeccione la interfaz Cuando hace clic en una planta, puede ver cómo se captura el evento 'e'",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.es.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "75775ef804bb4e732c48e8eedba62263",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.es.md",
    "source_type": "git_repo",
    "title": "Terrarium Project Part 3: DOM Manipulación y cierre",
    "content": "eventos predeterminados que normalmente ocurren en el puntero hacia abajo usando e preventDefault (); De esta manera, tiene más control sobre el comportamiento de la interfaz Regrese a esta línea cuando haya construido el archivo de script por completo y pruébelo sin e preventDefault ()- ¿qué sucede En segundo lugar, abra index html en una ventana del navegador e inspeccione la interfaz Cuando hace clic en una planta, puede ver cómo se captura el evento 'e'¡Profundice en el evento para ver cuánta información recopila un evento de puntero hacia abajo A continuación, observe cómo las variables locales pos3 ypos4 se establecen en e clientX Puede encontrar los valores de e en el panel de inspección Estos valores capturan las coordenadas X e Y de la planta en el momento en que hace clic en ella o la toca Necesitará un control detallado sobre el comportamiento de las plantas al hacer clic en ellas y arrastrarlas, de modo que pueda realizar un seguimiento de sus coordenadas ✅ ¿Está cada vez más claro por qué toda esta aplicación está construida con un gran cierre Si no fuera así, ¿cómo mantendría el alcance para cada una de las 14 plantas arrastrables Complete la función inicial agregando dos manipulaciones de eventos de puntero más en pos4 = e clientY:\nhtml\ndocument onpointermove = elementDrag;\ndocument onpointerup = stopElementDrag;\nAhora está indicando que desea que la planta se arrastre junto con el puntero mientras la mueve, y que el gesto de arrastre se detenga cuando anule la selección de la planta Onpointermove y onpointerup son partes de la misma API que onpointerdown La interfaz arrojará errores ahora ya que aún no ha definido las funciones elementDrag y stopElementDrag, así que compárelas a continuación 4 Las funciones elementDrag y stopElementDrag\nCompletarás tu cierre agregando dos funciones internas más que se encargarán de lo que sucede cuando arrastras una planta y dejas de arrastrarla El comportamiento que desea es que pueda arrastrar cualquier planta en cualquier momento y colocarla en cualquier lugar de la pantalla",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.es.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "641a7c99ea28cf5473b54f662efc5f6a",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.es.md",
    "source_type": "git_repo",
    "title": "Terrarium Project Part 3: DOM Manipulación y cierre",
    "content": "la misma API que onpointerdown La interfaz arrojará errores ahora ya que aún no ha definido las funciones elementDrag y stopElementDrag, así que compárelas a continuación 4 Las funciones elementDrag y stopElementDrag Completarás tu cierre agregando dos funciones internas más que se encargarán de lo que sucede cuando arrastras una planta y dejas de arrastrarla El comportamiento que desea es que pueda arrastrar cualquier planta en cualquier momento y colocarla en cualquier lugar de la pantallaEsta interfaz no tiene opiniones (no hay zona de caída, por ejemplo) para permitirle diseñar su terrario exactamente como le gusta agregando, quitando y reposicionando plantas Tarea:\nAgrega la función elementDrag justo después del corchete de cierre de pointerDrag:\njavascript\nfunction elementDrag(e) {\npos1 = pos3 - e clientX;\npos2 = pos4 - e clientY;\npos3 = e clientX;\npos4 = e clientY;\nconsole log(pos1, pos2, pos3, pos4);\nterrariumElement style top = terrariumElement offsetTop - pos2 + 'px';\nterrariumElement style left = terrariumElement offsetLeft - pos1 + 'px';\n}\nEn esta función, usted edita mucho las posiciones iniciales 1-4 que establece como variables locales en la función externa ¿Que está pasando aqui A medida que arrastra, reasigna pos1 haciéndolo igual a pos3 (que configuró anteriormente como e clientX) menos el valor actual de e clientX Realiza una operación similar a pos2 Luego, restablece pos3 y pos4 a las nuevas coordenadas X e Y del elemento Puede ver estos cambios en la consola mientras arrastra Luego, manipula el estilo CSS de la planta para establecer su nueva posición en función de las nuevas posiciones de pos1 ypos2, calculando las coordenadas X e Y superior e izquierda de la planta en función de la comparación de su desplazamiento con estas nuevas posiciones OffsetTop y offsetLeft son propiedades CSS que establecen la posición de un elemento basándose en la de su padre; su padre puede ser cualquier elemento que no esté posicionado como \"estático\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.es.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "6f758fc277843c53f2af8f3eb8449eac",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.es.md",
    "source_type": "git_repo",
    "title": "Terrarium Project Part 3: DOM Manipulación y cierre",
    "content": "manipula el estilo CSS de la planta para establecer su nueva posición en función de las nuevas posiciones de pos1 ypos2, calculando las coordenadas X e Y superior e izquierda de la planta en función de la comparación de su desplazamiento con estas nuevas posiciones OffsetTop y offsetLeft son propiedades CSS que establecen la posición de un elemento basándose en la de su padre; su padre puede ser cualquier elemento que no esté posicionado como \"estático\"Todo este recálculo de posicionamiento le permite afinar el comportamiento del terrario y sus plantas Tarea:\nLa tarea final para completar la interfaz es agregar la función closeElementDrag después del corchete de cierre de elementDrag:\njavascript\nfunction stopElementDrag() {\ndocument onpointerup = null;\ndocument onpointermove = null;\n}\nEsta pequeña función restablece los eventos onpointerup y onpointermove para que pueda reiniciar el progreso de su planta comenzando a arrastrarla nuevamente, o comenzar a arrastrar una nueva planta ✅ ¿Qué sucede si no configura estos eventos como nulos ¡Ahora has completado tu proyecto 🥇¡Felicitaciones Has terminado tu hermoso terrario 🚀Challenge: agregue un nuevo controlador de eventos a su cierre para hacer algo más en las plantas; por ejemplo, haga doble clic en una planta para traerla al frente ¡Se creativo Post-lecture prueba\nRevisión y autoestudio\nSi bien arrastrar elementos por la pantalla parece trivial, hay muchas formas de hacerlo y muchas trampas, según el efecto que busque De hecho, hay una API de arrastrar y soltar completa que puedes probar No lo usamos en este módulo porque el efecto que queríamos era algo diferente, pero pruebe esta API en su propio proyecto y vea lo que puede lograr ** Tarea: Trabajar un poco más con el DOM",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.es.md",
      "source_type": "git_repo"
    },
    "token_count": 427,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "7957c79aa5d0ad16ce4a900179a2aab5",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.fr.md",
    "source_type": "git_repo",
    "title": "Projet Terrarium Partie 3 : Manipulation du DOM et notion de closure (fermeture)",
    "content": "Projet Terrarium Partie 3 : Manipulation du DOM et notion de closure (fermeture)\nSketchnote par Tomomi Imura\nQuiz préalable\nQuiz préalable\nIntroduction\nLa manipulation du DOM, ou \"Document Object Model\", est un aspect essentiel du développement web Selon MDN, \"le Document Object Model (DOM) est la représentation des données des objets qui comprennent la structure et le contenu d'un document sur le Web\" Les défis autour de la manipulation du DOM sur le web ont souvent été à l'origine de l'utilisation de frameworks JavaScript au lieu de vanilla JavaScript pour gérer le DOM, mais nous nous débrouillerons seuls En outre, cette leçon présente l'idée d'une fermeture JavaScript, que vous pouvez considérer comme une fonction entourée d'une autre fonction, de sorte que la fonction interne ait accès à la portée de la fonction externe Les fermetures JavaScript sont un sujet vaste et complexe Cette leçon aborde l'idée la plus élémentaire : dans le code de ce terrarium, vous trouverez une fermeture : une fonction interne et une fonction externe construites de manière à permettre à la fonction interne d'accéder à la portée de la fonction externe Pour de plus amples informations sur la façon dont cela fonctionne, veuillez consulter la documentation approfondie Nous allons utiliser une fermeture pour manipuler le DOM Imaginez le DOM comme un arbre, représentant toutes les façons dont un document de page Web peut être manipulé Diverses API (interfaces de programme d'application) ont été écrites pour que les programmeurs, en utilisant le langage de programmation de leur choix, puissent accéder au DOM et l'éditer, le modifier, le réorganiser et le gérer Une représentation du DOM et du balisage HTML qui y fait référence De Olfa Nasraoui\nDans cette leçon, nous allons compléter notre projet de terrarium interactif en créant le JavaScript qui permettra à un utilisateur de manipuler les plantes sur la page Pré-requis\nVous devriez avoir construit le HTML et le CSS de votre terrarium",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14837,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.fr.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 9
  },
  {
    "id": "a4555c0316329434fc8ac1cf308d53fa",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.fr.md",
    "source_type": "git_repo",
    "title": "Projet Terrarium Partie 3 : Manipulation du DOM et notion de closure (fermeture)",
    "content": "utilisant le langage de programmation de leur choix, puissent accéder au DOM et l'éditer, le modifier, le réorganiser et le gérer Une représentation du DOM et du balisage HTML qui y fait référence De Olfa Nasraoui Dans cette leçon, nous allons compléter notre projet de terrarium interactif en créant le JavaScript qui permettra à un utilisateur de manipuler les plantes sur la page Pré-requis Vous devriez avoir construit le HTML et le CSS de votre terrariumÀ la fin de cette leçon, vous serez en mesure de faire entrer et sortir les plantes du terrarium en les faisant glisser Tâche\nDans le dossier de votre terrarium, créez un nouveau fichier appelé script js Importez ce fichier dans la section <head> :\nhtml\n<script src=\" /script js\" defer></script>\n> Remarque : utilisez l'attribut defer lors de l'importation d'un fichier JavaScript externe dans le fichier HTML afin de permettre au JavaScript de s'exécuter uniquement après le chargement complet du fichier HTML Vous pourriez également utiliser l'attribut async, qui permet au script de s'exécuter pendant l'analyse du fichier HTML, mais dans notre cas, il est important que les éléments HTML soient entièrement disponibles pour le glisser avant de permettre l'exécution du script de glisser Les éléments du DOM\nLa première chose à faire est de créer des références aux éléments que vous voulez manipuler dans le DOM Dans notre cas, il s'agit des 14 plantes actuellement en attente dans les barres latérales Tâche\nhtml\ndragElement(document getElementById('plant1'));\ndragElement(document getElementById('plant2'));\ndragElement(document getElementById('plant3'));\ndragElement(document getElementById('plant4'));\ndragElement(document getElementById('plant5'));\ndragElement(document getElementById('plant6'));\ndragElement(document getElementById('plant7'));\ndragElement(document getElementById('plant8'));\ndragElement(document getElementById('plant9'));\ndragElement(document getElementById('plant10'));\ndragElement(document getElementById('plant11'));\ndragElement(document getElementById('plant12'));\ndragElement(document getElementById('plant13'));\ndragElement(document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14837,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.fr.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 9
  },
  {
    "id": "2942caea88834f11f5cdc115d78c4434",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.fr.md",
    "source_type": "git_repo",
    "title": "Projet Terrarium Partie 3 : Manipulation du DOM et notion de closure (fermeture)",
    "content": "glisser avant de permettre l'exécution du script de glisser Les éléments du DOM La première chose à faire est de créer des références aux éléments que vous voulez manipuler dans le DOM Dans notre cas, il s'agit des 14 plantes actuellement en attente dans les barres latérales Tâche html dragElement(document getElementById('plant1')); dragElement(document getElementById('plant2')); dragElement(document getElementById('plant3')); dragElement(document getElementById('plant4')); dragElement(document getElementById('plant5')); dragElement(document getElementById('plant6')); dragElement(document getElementById('plant7')); dragElement(document getElementById('plant8')); dragElement(document getElementById('plant9')); dragElement(document getElementById('plant10')); dragElement(document getElementById('plant11')); dragElement(document getElementById('plant12')); dragElement(document getElementById('plant13')); dragElement(documentgetElementById('plant14'));\nQue se passe-t-il ici Vous faites référence au document et cherchez dans son DOM un élément avec un Id particulier Vous vous souvenez que dans la première leçon sur le HTML, vous avez donné des Ids individuels à chaque image de plante (id=\"plant1\") Vous allez maintenant mettre à profit cet effort Après avoir identifié chaque élément, vous passez cet élément à une fonction appelée dragElement que vous allez construire dans une minute Ainsi, l'élément dans le HTML est maintenant capable de glisser, ou le sera bientôt ✅ Pourquoi référençons-nous les éléments par leur Id Pourquoi pas par leur classe CSS Vous pouvez vous référer à la leçon précédente sur les CSS pour répondre à cette question La fermeture\nVous êtes maintenant prêt à créer la fermeture dragElement, qui est une fonction externe entourant une ou plusieurs fonctions internes (dans notre cas, nous en aurons trois) Les fermetures sont utiles lorsqu'une ou plusieurs fonctions doivent accéder à la portée d'une fonction externe Voici un exemple :\njavascript\nfunction displayCandy(){\nlet candy = ['jellybeans'];\nfunction addCandy(candyType) {\ncandy push(candyType)\n}\naddCandy('gumdrops');\n}\ndisplayCandy();\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14837,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.fr.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 2,
    "total_chunks": 9
  },
  {
    "id": "212b57fff82e14e19fccb5a1e3b338a6",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.fr.md",
    "source_type": "git_repo",
    "title": "Projet Terrarium Partie 3 : Manipulation du DOM et notion de closure (fermeture)",
    "content": "leçon précédente sur les CSS pour répondre à cette question La fermeture Vous êtes maintenant prêt à créer la fermeture dragElement, qui est une fonction externe entourant une ou plusieurs fonctions internes (dans notre cas, nous en aurons trois) Les fermetures sont utiles lorsqu'une ou plusieurs fonctions doivent accéder à la portée d'une fonction externe Voici un exemple : javascript function displayCandy(){ let candy = ['jellybeans']; function addCandy(candyType) { candy push(candyType) } addCandy('gumdrops'); } displayCandy(); consolelog(candy)\nDans cet exemple, la fonction displayCandy entoure une fonction qui pousse un nouveau type de bonbon dans un tableau qui existe déjà dans la fonction Si vous deviez exécuter ce code, le tableau candy serait indéfini, car il s'agit d'une variable locale (locale à la fermeture) ✅ Comment pouvez-vous rendre le tableau candy accessible Essayez de le déplacer à l'extérieur de la fermeture De cette façon, le tableau devient global, plutôt que de rester uniquement disponible à la portée locale de la fermeture Tâche\nSous les déclarations d'éléments dans script js, créez une fonction :\njavascript\nfunction dragElement(terrariumElement) {\n// Définir 4 positions pour le positionnement sur l'écran\nlet pos1 = 0,\npos2 = 0,\npos3 = 0,\npos4 = 0;\nterrariumElement onpointerdown = pointerDrag;\n}\ndragElement obtient son objet terrariumElement à partir des déclarations en haut du script Ensuite, vous définissez quelques positions locales à 0 pour l'objet passé dans la fonction Ce sont les variables locales qui seront manipulées pour chaque élément au fur et à mesure que vous ajouterez la fonctionnalité de glisser-déposer dans la fermeture à chaque élément Le terrarium sera peuplé par ces éléments glissés, l'application doit donc garder la trace de l'endroit où ils sont placés",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14837,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.fr.md",
      "source_type": "git_repo"
    },
    "token_count": 464,
    "chunk_index": 3,
    "total_chunks": 9
  },
  {
    "id": "84e7c878ff5e8ffd61b018cd0d311864",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.fr.md",
    "source_type": "git_repo",
    "title": "Projet Terrarium Partie 3 : Manipulation du DOM et notion de closure (fermeture)",
    "content": "dragElement obtient son objet terrariumElement à partir des déclarations en haut du script Ensuite, vous définissez quelques positions locales à 0 pour l'objet passé dans la fonction Ce sont les variables locales qui seront manipulées pour chaque élément au fur et à mesure que vous ajouterez la fonctionnalité de glisser-déposer dans la fermeture à chaque élément Le terrarium sera peuplé par ces éléments glissés, l'application doit donc garder la trace de l'endroit où ils sont placésEn outre, l'élément terrariumElement qui est passé à cette fonction se voit attribuer un événement pointerdown, qui fait partie des web APIs conçus pour aider à la gestion du DOM L'événement onpointerdown se déclenche lorsqu'on appuie sur un bouton ou, dans notre cas, lorsqu'on touche un élément glissant Ce gestionnaire d'événements fonctionne à la fois sur les navigateurs Web et mobiles, à quelques exceptions près ✅ Le gestionnaire d'événement onclick est bien mieux supporté par les différents navigateurs ; pourquoi ne l'utiliseriez-vous pas ici Pensez au type exact d'interaction à l'écran que vous essayez de créer ici La fonction Pointerdrag\nLe terrariumElement est prêt à être déplacé ; lorsque l'événement onpointerdown est déclenché, la fonction pointerDrag est invoquée Ajoutez cette fonction juste sous cette ligne : terrariumElement onpointerdown = pointerDrag; :\nTâche\njavascript\nfunction pointerDrag(e) {\ne preventDefault();\nconsole log(e);\npos3 = e clientX;\npos4 = e clientY;\n}\nPlusieurs choses se produisent Premièrement, vous empêchez les événements par défaut qui se produisent normalement lors d'un pointeur vers le bas de se produire en utilisant e preventDefault(); De cette façon, vous avez plus de contrôle sur le comportement de l'interface Revenez à cette ligne lorsque vous avez construit le fichier de script complètement et essayez-le sans e preventDefault() - que se passe-t-il Ensuite, ouvrez index html dans une fenêtre du navigateur, et inspectez l'interface",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14837,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.fr.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 4,
    "total_chunks": 9
  },
  {
    "id": "d6b502b10ca23f90217bf005124770ee",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.fr.md",
    "source_type": "git_repo",
    "title": "Projet Terrarium Partie 3 : Manipulation du DOM et notion de closure (fermeture)",
    "content": "} Plusieurs choses se produisent Premièrement, vous empêchez les événements par défaut qui se produisent normalement lors d'un pointeur vers le bas de se produire en utilisant e preventDefault(); De cette façon, vous avez plus de contrôle sur le comportement de l'interface Revenez à cette ligne lorsque vous avez construit le fichier de script complètement et essayez-le sans e preventDefault() - que se passe-t-il Ensuite, ouvrez index html dans une fenêtre du navigateur, et inspectez l'interfaceLorsque vous cliquez sur une plante, vous pouvez voir comment l'événement 'e' est capturé Creusez dans l'événement pour voir combien d'informations sont recueillies par un événement de type \"pointeur vers le bas\" Ensuite, notez comment les variables locales pos3 et pos4 sont définies sur e clientX Vous pouvez trouver les valeurs e dans le volet d'inspection Ces valeurs capturent les coordonnées x et y de la plante au moment où vous cliquez dessus ou la touchez Vous aurez besoin d'un contrôle précis sur le comportement des plantes lorsque vous cliquerez dessus et les ferez glisser, afin de garder une trace de leurs coordonnées ✅ On comprend mieux pourquoi toute cette application est construite avec une seule grosse fermeture Si ce n'était pas le cas, comment maintiendriez-vous la portée de chacune des 14 plantes glissantes Complétez la fonction initiale en ajoutant deux autres manipulations d'événements de pointeurs sous pos4 = e clientY :\nhtml\ndocument onpointermove = elementDrag;\ndocument onpointerup = stopElementDrag;\nVous indiquez maintenant que vous voulez que la plante soit déplacée avec le pointeur lorsque vous la déplacez, et que le geste de déplacement s'arrête lorsque vous désélectionnez la plante onpointertermove et onpointerup font partie de la même API que onpointerdown L'interface lancera des erreurs maintenant car vous n'avez pas encore défini les fonctions elementDrag et stopElementDrag, donc construisez-les ensuite",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14837,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.fr.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 5,
    "total_chunks": 9
  },
  {
    "id": "7da33ca7dca8c40ff26b0ba5bff10482",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.fr.md",
    "source_type": "git_repo",
    "title": "Projet Terrarium Partie 3 : Manipulation du DOM et notion de closure (fermeture)",
    "content": "pointeurs sous pos4 = e clientY : html document onpointermove = elementDrag; document onpointerup = stopElementDrag; Vous indiquez maintenant que vous voulez que la plante soit déplacée avec le pointeur lorsque vous la déplacez, et que le geste de déplacement s'arrête lorsque vous désélectionnez la plante onpointertermove et onpointerup font partie de la même API que onpointerdown L'interface lancera des erreurs maintenant car vous n'avez pas encore défini les fonctions elementDrag et stopElementDrag, donc construisez-les ensuiteLes fonctions elementDrag et stopElementDrag\nVous compléterez votre fermeture en ajoutant deux autres fonctions internes qui géreront ce qui se passe lorsque vous faites glisser une plante et que vous arrêtez de la faire glisser Le comportement que vous souhaitez est que vous puissiez glisser n'importe quelle plante à tout moment et la placer n'importe où sur l'écran Cette interface est assez libre (il n'y a pas de zone de dépôt par exemple) pour vous permettre de concevoir votre terrarium exactement comme vous le souhaitez en ajoutant, en retirant et en repositionnant les plantes Tâche\nAjoutez la fonction elementDrag juste après le crochet fermant de pointerDrag :\njavascript\nfunction elementDrag(e) {\npos1 = pos3 - e clientX;\npos2 = pos4 - e clientY;\npos3 = e clientX;\npos4 = e clientY;\nconsole log(pos1, pos2, pos3, pos4);\nterrariumElement style top = terrariumElement offsetTop - pos2 + 'px';\nterrariumElement style left = terrariumElement offsetLeft - pos1 + 'px';\n}\nDans cette fonction, vous effectuez de nombreuses modifications des positions initiales 1-4 que vous avez définies comme variables locales dans la fonction externe Que se passe-t-il ici En glissant, vous réassignez pos1 en le rendant égal à pos3 (que vous avez défini précédemment comme e clientX) moins la valeur actuelle de e clientX Vous effectuez une opération similaire pour pos2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14837,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.fr.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 6,
    "total_chunks": 9
  },
  {
    "id": "d44f35fab242cf55f6c4ae7a539bb443",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.fr.md",
    "source_type": "git_repo",
    "title": "Projet Terrarium Partie 3 : Manipulation du DOM et notion de closure (fermeture)",
    "content": "offsetTop - pos2 + 'px'; terrariumElement style left = terrariumElement offsetLeft - pos1 + 'px'; } Dans cette fonction, vous effectuez de nombreuses modifications des positions initiales 1-4 que vous avez définies comme variables locales dans la fonction externe Que se passe-t-il ici En glissant, vous réassignez pos1 en le rendant égal à pos3 (que vous avez défini précédemment comme e clientX) moins la valeur actuelle de e clientX Vous effectuez une opération similaire pour pos2Ensuite, vous réinitialisez pos3 et pos4 aux nouvelles coordonnées X et Y de l'élément Vous pouvez observer ces changements dans la console pendant que vous faites glisser l'élément Ensuite, vous manipulez le style css de la plante pour définir sa nouvelle position en fonction des nouvelles positions de pos1 et pos2, en calculant les coordonnées X et Y du haut et de la gauche de la plante en comparant son décalage avec ces nouvelles positions offsetTop et offsetLeft sont des propriétés CSS qui définissent la position d'un élément en fonction de celle de son parent ; son parent peut être n'importe quel élément qui n'est pas positionné comme static Tous ces recalculs de positionnement permettent d'affiner le comportement du terrarium et de ses plantes Tâche\nLa dernière tâche pour compléter l'interface est d'ajouter la fonction stopElementDrag après l'accolade de fermeture de elementDrag :\njavascript\nfunction stopElementDrag() {\ndocument onpointerup = null;\ndocument onpointermove = null;\n}\nCette petite fonction réinitialise les événements onpointerup et onpointermove afin que vous puissiez soit relancer la progression de votre plante en recommençant à la faire glisser, soit commencer à faire glisser une nouvelle plante ✅ Que se passe-t-il si vous ne mettez pas ces événements à zéro Vous avez maintenant terminé votre projet 🥇Félicitations Tu as terminé ton magnifique terrarium",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14837,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.fr.md",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 7,
    "total_chunks": 9
  },
  {
    "id": "fa3e332f5869298975edb980c24240ef",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.fr.md",
    "source_type": "git_repo",
    "title": "Projet Terrarium Partie 3 : Manipulation du DOM et notion de closure (fermeture)",
    "content": "de elementDrag : javascript function stopElementDrag() { document onpointerup = null; document onpointermove = null; } Cette petite fonction réinitialise les événements onpointerup et onpointermove afin que vous puissiez soit relancer la progression de votre plante en recommençant à la faire glisser, soit commencer à faire glisser une nouvelle plante ✅ Que se passe-t-il si vous ne mettez pas ces événements à zéro Vous avez maintenant terminé votre projet 🥇Félicitations Tu as terminé ton magnifique terrarium🚀 Défi\nAjoutez un nouveau gestionnaire d'événements à votre fermeture pour faire quelque chose de plus aux plantes ; par exemple, double-cliquez sur une plante pour la mettre en avant Soyez créatif Quiz de validation des connaissances\nQuiz de validation des connaissances\nExamen et étude personnelle\nSi faire glisser des éléments à l'écran semble trivial, il existe de nombreuses façons de le faire et de nombreux pièges, en fonction de l'effet recherché En fait, il existe toute une API de glisser-déposer que vous pouvez essayer Nous ne l'avons pas utilisée dans ce module car l'effet recherché était quelque peu différent, mais essayez cette API sur votre propre projet et voyez ce que vous pouvez réaliser Vous trouverez plus d'informations sur les événements liés aux pointeurs sur le site W3C docs et sur le site MDN web docs Vérifiez toujours les capacités du navigateur en utilisant CanIUse com Affectation\nTravailler un peu plus avec le DOM",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14837,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.fr.md",
      "source_type": "git_repo"
    },
    "token_count": 365,
    "chunk_index": 8,
    "total_chunks": 9
  },
  {
    "id": "dc36cb8f398d2e3ca86eae0ed051e627",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.it.md",
    "source_type": "git_repo",
    "title": "Progetto Terrario Parte 3: Manipolazione del DOM e Closure",
    "content": "Progetto Terrario Parte 3: Manipolazione del DOM e Closure\nSketchnote di Tomomi Imura\nQuiz Pre-Lezione\nQuiz Pre-Lezione\nIntroduzione\nLa manipolazione del DOM, acronimo per \"Document Object Model\", è un aspetto chiave dello sviluppo web Secondo MDN, \"Il Document Object Model (DOM) è la rappresentazione dei dati degli oggetti che compongono la struttura e il contenuto di un documento sul web\" Le sfide intorno alla manipolazione del DOM sul Web sono state spesso l'impulso dietro l'utilizzo di infrastrutture (framework) JavaScript invece di JavaScript puro (vanilla) per gestire il DOM, ma ce la faremo da soli Inoltre, questa lezione introdurrà l'idea di una closure JavaScript, che si può intendere come una funzione racchiusa da un'altra funzione in modo che la funzione più interna abbia accesso all'ambito della funzione più esterna Le closure JavaScript sono un argomento vasto e complesso Questa lezione tocca l'idea più basilare che nel codice di questo terrario si troverà una closure: una funzione interna e una funzione esterna costruite in modo da consentire alla funzione interna di accedere all'ambito della funzione esterna Per molte più informazioni su come funziona, visitare l'ampia documentazione Verra usata una closure per manipolare il DOM Si pensi al DOM come a un albero, che rappresenta tutti i modi in cui un documento di una pagina web può essere manipolato Sono state scritte varie API (Application Program Interfaces) in modo che i programmatori, utilizzando linguaggio di programmazione di propria scelta, possano accedere al DOM e modificarlo, cambiarlo, riorganizzarlo e gestirlo in altro modo Una rappresentazione del DOM e del markup HTML che lo indirizza Da Olfa Nasraoui\nIn questa lezione, verrà completato il progetto di terrario interattivo creando il codice JavaScript che consentirà a un utente di manipolare le piante sulla pagina",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14112,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.it.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 9
  },
  {
    "id": "45a6660237ea766eccc1fee68bb1add1",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.it.md",
    "source_type": "git_repo",
    "title": "Progetto Terrario Parte 3: Manipolazione del DOM e Closure",
    "content": "web può essere manipolato Sono state scritte varie API (Application Program Interfaces) in modo che i programmatori, utilizzando linguaggio di programmazione di propria scelta, possano accedere al DOM e modificarlo, cambiarlo, riorganizzarlo e gestirlo in altro modo Una rappresentazione del DOM e del markup HTML che lo indirizza Da Olfa Nasraoui In questa lezione, verrà completato il progetto di terrario interattivo creando il codice JavaScript che consentirà a un utente di manipolare le piante sulla paginaPre-requisiti\nSi dovrebbe avere il codice HTML e CSS per il proprio terrario costruito Alla fine di questa lezione si sarà in grado di spostare le piante dentro e fuori dal terrario trascinandole Attività\nNella cartella terrarium, creare un nuovo file chiamato script js Importare quel file nella sezione  <head>:\nhtml\n<script src=\" /script js\" defer></script>\n> Nota: utilizzare defer quando si importa un file JavaScript esterno nel file html in modo da consentire l'esecuzione di JavaScript solo dopo che il file HTML è stato completamente caricato È anche possibile utilizzare l'attributo async, che consente l'esecuzione dello script durante l'analisi del file HTML, ma in questo caso, è importante avere gli elementi HTML completamente disponibili per il trascinamento prima di consentire l'esecuzione dello script di trascinamento Gli elementi DOM\nLa prima cosa da fare è creare i riferimenti agli elementi che si vogliono manipolare nel DOM Nel nostro caso, sono le 14 piante attualmente in attesa nelle barre laterali Attività\njavascript\ndragElement(document getElementById('plant1'));\ndragElement(document getElementById('plant2'));\ndragElement(document getElementById('plant3'));\ndragElement(document getElementById('plant4'));\ndragElement(document getElementById('plant5'));\ndragElement(document getElementById('plant6'));\ndragElement(document getElementById('plant7'));\ndragElement(document getElementById('plant8'));\ndragElement(document getElementById('plant9'));\ndragElement(document getElementById('plant10'));\ndragElement(document getElementById('plant11'));\ndragElement(document getElementById('plant12'));\ndragElement(document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14112,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.it.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 9
  },
  {
    "id": "121089bbd153a11414183be57cea5b6b",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.it.md",
    "source_type": "git_repo",
    "title": "Progetto Terrario Parte 3: Manipolazione del DOM e Closure",
    "content": "gli elementi HTML completamente disponibili per il trascinamento prima di consentire l'esecuzione dello script di trascinamento Gli elementi DOM La prima cosa da fare è creare i riferimenti agli elementi che si vogliono manipolare nel DOM Nel nostro caso, sono le 14 piante attualmente in attesa nelle barre laterali Attività javascript dragElement(document getElementById('plant1')); dragElement(document getElementById('plant2')); dragElement(document getElementById('plant3')); dragElement(document getElementById('plant4')); dragElement(document getElementById('plant5')); dragElement(document getElementById('plant6')); dragElement(document getElementById('plant7')); dragElement(document getElementById('plant8')); dragElement(document getElementById('plant9')); dragElement(document getElementById('plant10')); dragElement(document getElementById('plant11')); dragElement(document getElementById('plant12')); dragElement(documentgetElementById('plant13'));\ndragElement(document getElementById('plant14'));\nCosa sta succedendo qui Si sta referenziando il documento e guardando attraverso il suo DOM per trovare un elemento con un ID particolare Si ricorda nella prima lezione sull'HTML che sono stati forniti ID individuali a ciascuna immagine della pianta (id = \"plant1\") Ora si farà uso di quello sforzo Dopo aver identificato ogni elemento, lo si passi a una funzione chiamata dragElement che verrà creata a breve Quindi l'elemento nell'HTML è ora abilitato al trascinamento, o lo sarà a breve ✅ Perché gli elementi vengono referenziati in base al loro Id Perché non la loro classe CSS Si può fare riferimento alla lezione precedente su CSS per rispondere a questa domanda Closure\nOra si è pronti per creare la closure dragElement, che è una funzione esterna che racchiude una o più funzioni interne (nel nostro caso, ne avremo tre) Le closure sono utili quando una o più funzioni devono accedere all'ambito di una funzione più esterna Ecco un esempio:\njavascript\nfunction displayCandy(){\nlet candy = ['jellybeans'];\nfunction addCandy(candyType) {\ncandy",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14112,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.it.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 9
  },
  {
    "id": "94ff5f50ff24e8220e4aecb411c9eef7",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.it.md",
    "source_type": "git_repo",
    "title": "Progetto Terrario Parte 3: Manipolazione del DOM e Closure",
    "content": "loro classe CSS Si può fare riferimento alla lezione precedente su CSS per rispondere a questa domanda Closure Ora si è pronti per creare la closure dragElement, che è una funzione esterna che racchiude una o più funzioni interne (nel nostro caso, ne avremo tre) Le closure sono utili quando una o più funzioni devono accedere all'ambito di una funzione più esterna Ecco un esempio: javascript function displayCandy(){ let candy = ['jellybeans']; function addCandy(candyType) { candypush(candyType)\n}\naddCandy('gumdrops');\n}\ndisplayCandy();\nconsole log(candy)\nIn questo esempio, la funzione displayCandy circonda una funzione che inserisce un nuovo tipo di caramella in una matrice già esistente nella funzione Se si dovesse eseguire questo codice, l'array candy non sarebbe definito, poiché è una variabile locale (locale alla closure) ✅ Come si può rendere accessibile l'array candy Si provi a spostarlo fuori dalla closure In questo modo, l'array diventa globale, anziché rimanere disponibile solo per l'ambito locale della closure Attività\nSotto le dichiarazioni degli elementi in script js, creare una funzione:\njavascript\nfunction dragElement(terrariumElement) {\n//imposta 4 posizioni per il posizionamento sullo schermo\nlet pos1 = 0,\npos2 = 0,\npos3 = 0,\npos4 = 0;\nterrariumElement onpointerdown = pointerDrag;\n}\ndragElement ottiene il suo oggetto terrariumElement dalle dichiarazioni nella parte superiore dello script Quindi, si impostano alcune posizioni locali su 0 per l'oggetto passato alla funzione Queste sono le variabili locali che verranno manipolate per ogni elemento quando si aggiunge la funzionalità di trascinamento all'interno della closure a ciascun elemento Il terrario sarà popolato da questi elementi trascinati, quindi l'applicazione deve tenere traccia di dove sono posizionati",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14112,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.it.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 3,
    "total_chunks": 9
  },
  {
    "id": "d7264a9c198aee76b6a611245138e704",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.it.md",
    "source_type": "git_repo",
    "title": "Progetto Terrario Parte 3: Manipolazione del DOM e Closure",
    "content": "0, pos4 = 0; terrariumElement onpointerdown = pointerDrag; } dragElement ottiene il suo oggetto terrariumElement dalle dichiarazioni nella parte superiore dello script Quindi, si impostano alcune posizioni locali su 0 per l'oggetto passato alla funzione Queste sono le variabili locali che verranno manipolate per ogni elemento quando si aggiunge la funzionalità di trascinamento all'interno della closure a ciascun elemento Il terrario sarà popolato da questi elementi trascinati, quindi l'applicazione deve tenere traccia di dove sono posizionatiInoltre, al terrariumElement passato a questa funzione viene assegnato un  evento di riconoscimento pressione pulsante (pointerdown), che fa parte delle API web progettate per aiutare con la gestione del DOM onpointerdown si attiva quando viene premuto un pulsante o, in questo caso, viene toccato un elemento trascinabile Questo gestore di evento funziona sia su browser web che su browser di dispositivi mobili, con poche eccezioni ✅ Il gestore di evento onclick ha molto più supporto intra-browser; perché non viene usato qui Si pensi al tipo esatto di interazione con lo schermo che si sta cercando di creare qui La funzione Pointerdrag\nIl terrariumElement è pronto per essere trascinato in giro; quando viene generato l'evento onpointerdown, viene richiamata la funzione pointerDrag Aggiungere quella funzione proprio sotto questa riga: terrariumElement onpointerdown = pointerDrag;:\nAttività\njavascript\nfunction pointerDrag(e) {\ne preventDefault();\nconsole log(e);\npos3 = e clientX;\npos4 = e clientY;\n}\nSuccedono molte cose Innanzitutto, si impedisce che si verifichino gli eventi predefiniti che normalmente si verificano su pointerdown utilizzando e preventDefault(); In questo modo si ha un maggiore controllo sul comportamento dell'interfaccia Tornare su questa riga quando si è costruito completamente il file di script e provarlo senza e preventDefault() - cosa succede Secondo, aprire index",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14112,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.it.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 4,
    "total_chunks": 9
  },
  {
    "id": "621da9b429ffb6cb61e9357c2eca4be3",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.it.md",
    "source_type": "git_repo",
    "title": "Progetto Terrario Parte 3: Manipolazione del DOM e Closure",
    "content": "= pointerDrag;: Attività javascript function pointerDrag(e) { e preventDefault(); console log(e); pos3 = e clientX; pos4 = e clientY; } Succedono molte cose Innanzitutto, si impedisce che si verifichino gli eventi predefiniti che normalmente si verificano su pointerdown utilizzando e preventDefault(); In questo modo si ha un maggiore controllo sul comportamento dell'interfaccia Tornare su questa riga quando si è costruito completamente il file di script e provarlo senza e preventDefault() - cosa succede Secondo, aprire indexhtml in una finestra del browser e controllare l'interfaccia Quando si fa clic su una pianta, puoi vedere come viene catturato l'evento \"e\" Analizzare l'evento per vedere quante informazioni vengono raccolte da un evento pointerdown Successivamente, notare come le variabili locali pos3 e pos4 sono impostate su e clientX È possibile trovare i valori di e nel riquadro di ispezione Questi valori catturano le coordinate x e y della pianta nel momento in cui si fa clic su di essa o si tocca Si avrà bisogno di un controllo preciso sul comportamento delle piante mentre si fa clic e si trascinano, in modo da tenere traccia delle loro coordinate ✅ Sta diventando più chiaro il motivo per cui l'intera app è costruita con un'unica grande closure Se non lo fosse, come si manterrebbe l'ambito di ciascuna delle 14 piante trascinabili Completare la funzione iniziale aggiungendo altre due manipolazioni di eventi del puntatore sotto pos4 = e clientY:\nhtml\ndocument onpointermove = elementDrag;\ndocument onpointerup = stopElementDrag;\nOra si sta indicando che si vuole che la pianta venga trascinata insieme al puntatore mentre lo si muove e che il gesto di trascinamento si interrompa quando si deseleziona la pianta onpointermove e onpointerup sono tutte parti della stessa API come onpointerdown",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14112,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.it.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 5,
    "total_chunks": 9
  },
  {
    "id": "fac47c4699f62afaf9458c8f34ba1d74",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.it.md",
    "source_type": "git_repo",
    "title": "Progetto Terrario Parte 3: Manipolazione del DOM e Closure",
    "content": "l'ambito di ciascuna delle 14 piante trascinabili Completare la funzione iniziale aggiungendo altre due manipolazioni di eventi del puntatore sotto pos4 = e clientY: html document onpointermove = elementDrag; document onpointerup = stopElementDrag; Ora si sta indicando che si vuole che la pianta venga trascinata insieme al puntatore mentre lo si muove e che il gesto di trascinamento si interrompa quando si deseleziona la pianta onpointermove e onpointerup sono tutte parti della stessa API come onpointerdownL'interfaccia genererà errori ora poiché non si sono ancora definite le funzioni elementDrag e stopElementDrag, quindi verranno create successivamente Le funzioni elementDrag e stopElementDrag\nLa closure verrà completata aggiungendo altre due funzioni interne che gestiranno ciò che accade quando si trascina una pianta e si smette di trascinarla Il comportamento desiderato è che si possa trascinare qualsiasi pianta in qualsiasi momento e posizionarla ovunque sullo schermo Questa interfaccia è abbastanza rigida (non esiste una zona di rilascio, ad esempio) per consentire di progettare il proprio terrario esattamente come si preferisce aggiungendo, rimuovendo e riposizionando le piante Attività\nAggiungere la funzione elementDrag subito dopo la parentesi graffa di chiusura di pointerDrag:\njavascript\nfunction elementDrag(e) {\npos1 = pos3 - e clientX;\npos2 = pos4 - e clientY;\npos3 = e clientX;\npos4 = e clientY;\nconsole log(pos1, pos2, pos3, pos4);\nterrariumElement style top = terrariumElement offsetTop - pos2 + 'px';\nterrariumElement style left = terrariumElement offsetLeft - pos1 + 'px';\n}\nIn questa funzione, si faranno molte modifiche alle posizioni iniziali 1-4 che verranno impostate come variabili locali nella funzione esterna Cosa sta succedendo qui",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14112,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.it.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 6,
    "total_chunks": 9
  },
  {
    "id": "7df8b82a4579f653f862a9d7fe182041",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.it.md",
    "source_type": "git_repo",
    "title": "Progetto Terrario Parte 3: Manipolazione del DOM e Closure",
    "content": "di pointerDrag: javascript function elementDrag(e) { pos1 = pos3 - e clientX; pos2 = pos4 - e clientY; pos3 = e clientX; pos4 = e clientY; console log(pos1, pos2, pos3, pos4); terrariumElement style top = terrariumElement offsetTop - pos2 + 'px'; terrariumElement style left = terrariumElement offsetLeft - pos1 + 'px'; } In questa funzione, si faranno molte modifiche alle posizioni iniziali 1-4 che verranno impostate come variabili locali nella funzione esterna Cosa sta succedendo quiMentre si trascina, pos1 viene riassegnato rendendolo uguale a pos3 (che precedenza si è impostato come e clientX) meno il valore corrente di e clientX Eseguire un'operazione simile per pos2 Quindi, reimpostare pos3 e pos4 sulle nuove coordinate X e Y dell'elemento E' possibile monitorare questi cambiamenti nella console mentre si trascina Quindi, è stato manipolato lo stile css della pianta per impostare la sua nuova posizione in base alle nuove posizioni di pos1 e pos2, calcolando le coordinate X e Y superiore e sinistra della pianta in base al confronto del suo scostamento con queste nuove posizioni offsetTop e offsetLeft sono proprietà CSS che impostano la posizione di un elemento in base a quella del suo genitore; il suo genitore può essere qualsiasi elemento che non è posizionato come static Tutto questo ricalcolo del posizionamento consente di mettere a punto il comportamento del terrario e delle sue piante Attività\nIl compito finale per completare l'interfaccia è aggiungere la funzione stopElementDrag dopo la parentesi graffa di chiusura di elementDrag:\njavascript\nfunction stopElementDrag() {\ndocument onpointerup = null;\ndocument",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14112,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.it.md",
      "source_type": "git_repo"
    },
    "token_count": 441,
    "chunk_index": 7,
    "total_chunks": 9
  },
  {
    "id": "af4466ba2056f7227498b4f0fbe1a4cc",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.it.md",
    "source_type": "git_repo",
    "title": "Progetto Terrario Parte 3: Manipolazione del DOM e Closure",
    "content": "proprietà CSS che impostano la posizione di un elemento in base a quella del suo genitore; il suo genitore può essere qualsiasi elemento che non è posizionato come static Tutto questo ricalcolo del posizionamento consente di mettere a punto il comportamento del terrario e delle sue piante Attività Il compito finale per completare l'interfaccia è aggiungere la funzione stopElementDrag dopo la parentesi graffa di chiusura di elementDrag: javascript function stopElementDrag() { document onpointerup = null; documentonpointermove = null;\n}\nQuesta piccola funzione reimposta gli eventi onpointerup e onpointermove in modo che si possa riavviare il progresso della pianta iniziando a trascinarla di nuovo, o iniziare a trascinare una nuova pianta ✅ Cosa succede se non si impostano questi eventi su null Ora tsdi è completato il progetto 🥇Congratulazioni Il meraviglioso terrario è finito\n🚀 Sfida\nAggiungere un nuovo gestore di eventi alla closure per fare qualcosa di più con le piante; ad esempio, fare doppio clic su una pianta per portarla in primo piano Si dia sfogo alla propria creatività Quiz Post-Lezione\nQuiz post-lezione\nRevisione e Auto Apprendimento\nMentre trascinare elementi sullo schermo sembra banale, ci sono molti modi per farlo e molte insidie, a seconda dell'effetto che si cerca In effetti, esiste un'intera API di trascinamento della selezione che si può provare Non è stata usata in questo modulo perché l'effetto che si voleva era leggermente diverso, tuttavia provare questa API sul proprio progetto per vedere cosa si può ottenere Trovare ulteriori informazioni sugli eventi di puntamento nei documenti W3C e nei documenti Web MDN Controllare sempre le funzionalità del browser utilizzando CanIUse com Compito\nLavorare un po' di più con il DOM",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14112,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.it.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 8,
    "total_chunks": 9
  },
  {
    "id": "39c780c016d172a6d4c04d8e2b159852",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "टेरारियम प्रोजेक्ट पार्ट 3: DOM मैनिपुलेशन और एक क्लोजर",
    "content": "टेरारियम प्रोजेक्ट पार्ट 3: DOM मैनिपुलेशन और एक क्लोजर\nटोमोमी इमुरा द्वारा स्केचनेट\nपूर्व व्याख्यान प्रश्नोत्तरी\nपूर्व व्याख्यान प्रश्नोत्तरी\nपरिचय\nDOM, या \"Document Object Model\" में हेरफेर, वेब विकास का एक प्रमुख पहलू है। MDN के अनुसार, \"The Document Object Model (DOM) संरचना को समाहित करने वाली वस्तुओं का डेटा प्रतिनिधित्व है। और वेब पर एक दस्तावेज़ की सामग्री। \" वेब पर DOM हेरफेर के आसपास की चुनौतियाँ अक्सर DOM का प्रबंधन करने के लिए वैनिला जावास्क्रिप्ट के बजाय जावास्क्रिप्ट चौखटे का उपयोग करने के पीछे होती हैं, लेकिन हम अपने दम पर प्रबंधित करेंगे",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 35
  },
  {
    "id": "395fc0ba3cb16189945ae870dcad1bbf",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "टेरारियम प्रोजेक्ट पार्ट 3: DOM मैनिपुलेशन और एक क्लोजर",
    "content": "परिचय DOM, या \"Document Object Model\" में हेरफेर, वेब विकास का एक प्रमुख पहलू है। MDN के अनुसार, \"The Document Object Model (DOM) संरचना को समाहित करने वाली वस्तुओं का डेटा प्रतिनिधित्व है। और वेब पर एक दस्तावेज़ की सामग्री। \" वेब पर DOM हेरफेर के आसपास की चुनौतियाँ अक्सर DOM का प्रबंधन करने के लिए वैनिला जावास्क्रिप्ट के बजाय जावास्क्रिप्ट चौखटे का उपयोग करने के पीछे होती हैं, लेकिन हम अपने दम पर प्रबंधित करेंगेइसके अलावा, यह पाठ एक जावास्क्रिप्ट क्लोजर के विचार को पेश करेगा, जिसे आप दूसरे से संलग्न फ़ंक्शन के रूप में सोच सकते हैं कार्य करें ताकि आंतरिक फ़ंक्शन बाहरी फ़ंक्शन के दायरे तक पहुंच सके।\nजावास्क्रिप्ट क्लोजर एक विशाल और जटिल विषय है। यह सबक सबसे बुनियादी विचार पर छूता है कि इस टेरारियम के कोड में, आपको एक बंद मिलेगा: एक आंतरिक फ़ंक्शन और एक बाहरी फ़ंक्शन, जो बाहरी फ़ंक्शन के दायरे में आंतरिक फ़ंक्शन का उपयोग करने की अनुमति देता है। यह कैसे काम करता है, इस बारे में अधिक जानकारी के लिए, कृपया व्यापक प्रलेखन पर जाएँ।\nहम DOM को हेरफेर करने के लिए एक क्लोशर का उपयोग करेंगे।\nDOM को एक पेड़ के रूप में सोचें, उन सभी तरीकों का प्रतिनिधित्व करता है जो एक वेब पेज दस्तावेज़ में हेरफेर किया जा सकता है। विभिन्न एपीआई (एप्लिकेशन प्रोग्राम इंटरफेस) लिखे गए हैं ताकि प्रोग्रामर अपनी पसंद की प्रोग्रामिंग भाषा का उपयोग करके, DOM तक पहुंच सकें और इसे संपादित, बदल सकें, पुनर्व्यवस्थित कर सकें और अन्यथा इसका प्रबंधन कर सकें।\nDOM और HTML मार्कअप का प्रतिनिधित्व जो इसे संदर्भित करता है। ओलाफा नसरौई से\nइस पाठ में, हम जावास्क्रिप्ट बनाकर अपनी इंटरैक्टिव टेरारियम परियोजना को पूरा करेंगे जो उपयोगकर्ता को पृष्ठ पर पौधों को हेरफेर करने की अनुमति देगा।\nशर्त\nआपके पास निर्मित टेरारियम के लिए आपके पास HTML और CSS होना चाहिए। इस पाठ के अंत तक आप पौधों को खींचकर टेरारियम में ले जा सकेंगे।\nटास्क\nअपने टेरारियम फ़ोल्डर में, script",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 1607,
    "chunk_index": 1,
    "total_chunks": 35
  },
  {
    "id": "43deb6b8341021d16743aaf3d42186ee",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "टेरारियम प्रोजेक्ट पार्ट 3: DOM मैनिपुलेशन और एक क्लोजर",
    "content": "प्रबंधन कर सकें। DOM और HTML मार्कअप का प्रतिनिधित्व जो इसे संदर्भित करता है। ओलाफा नसरौई से इस पाठ में, हम जावास्क्रिप्ट बनाकर अपनी इंटरैक्टिव टेरारियम परियोजना को पूरा करेंगे जो उपयोगकर्ता को पृष्ठ पर पौधों को हेरफेर करने की अनुमति देगा। शर्त आपके पास निर्मित टेरारियम के लिए आपके पास HTML और CSS होना चाहिए। इस पाठ के अंत तक आप पौधों को खींचकर टेरारियम में ले जा सकेंगे। टास्क अपने टेरारियम फ़ोल्डर में, scriptjs नामक एक नई फ़ाइल बनाएँ। उस फ़ाइल को <head> अनुभाग में आयात करें:\nhtml\n<script src=\" /script",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 2,
    "total_chunks": 35
  },
  {
    "id": "7999310f43999b8d906427129bcba442",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "टेरारियम प्रोजेक्ट पार्ट 3: DOM मैनिपुलेशन और एक क्लोजर",
    "content": "इस पाठ में, हम जावास्क्रिप्ट बनाकर अपनी इंटरैक्टिव टेरारियम परियोजना को पूरा करेंगे जो उपयोगकर्ता को पृष्ठ पर पौधों को हेरफेर करने की अनुमति देगा। शर्त आपके पास निर्मित टेरारियम के लिए आपके पास HTML और CSS होना चाहिए। इस पाठ के अंत तक आप पौधों को खींचकर टेरारियम में ले जा सकेंगे। टास्क अपने टेरारियम फ़ोल्डर में, scriptjs नामक एक नई फ़ाइल बनाएँ। उस फ़ाइल को <head> अनुभाग में आयात करें: html <script src=\" /scriptjs\" defer></script>\n> नोट: HTML फ़ाइल में एक बाहरी जावास्क्रिप्ट फ़ाइल आयात करते समय defer का उपयोग करें ताकि HTML फ़ाइल पूरी तरह से लोड होने के बाद ही जावास्क्रिप्ट निष्पादित हो सके। आप async विशेषता का भी उपयोग कर सकते हैं, जो स्क्रिप्ट को निष्पादित करने की अनुमति देता है जबकि HTML फ़ाइल पार्सिंग है, लेकिन हमारे मामले में, ड्रैग स्क्रिप्ट को निष्पादित करने की अनुमति देने से पहले HTML तत्वों को खींचने के लिए पूरी तरह से उपलब्ध होना आवश्यक है।\nडोम तत्व\nपहली चीज जो आपको करने की ज़रूरत है वह उन तत्वों के संदर्भ बनाना है जिन्हें आप DOM में हेरफेर करना चाहते हैं। हमारे मामले में, वे 14 पौधे हैं जो वर्तमान में साइड बार में इंतजार कर रहे हैं।\nटास्क\nhtml\ndragElement(document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 975,
    "chunk_index": 3,
    "total_chunks": 35
  },
  {
    "id": "d8c87d714016b83178d101d87d18bd2e",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "टेरारियम प्रोजेक्ट पार्ट 3: DOM मैनिपुलेशन और एक क्लोजर",
    "content": "HTML फ़ाइल पार्सिंग है, लेकिन हमारे मामले में, ड्रैग स्क्रिप्ट को निष्पादित करने की अनुमति देने से पहले HTML तत्वों को खींचने के लिए पूरी तरह से उपलब्ध होना आवश्यक है। डोम तत्व पहली चीज जो आपको करने की ज़रूरत है वह उन तत्वों के संदर्भ बनाना है जिन्हें आप DOM में हेरफेर करना चाहते हैं। हमारे मामले में, वे 14 पौधे हैं जो वर्तमान में साइड बार में इंतजार कर रहे हैं। टास्क html dragElement(documentgetElementById('plant1'));\ndragElement(document getElementById('plant2'));\ndragElement(document getElementById('plant3'));\ndragElement(document getElementById('plant4'));\ndragElement(document getElementById('plant5'));\ndragElement(document getElementById('plant6'));\ndragElement(document getElementById('plant7'));\ndragElement(document getElementById('plant8'));\ndragElement(document getElementById('plant9'));\ndragElement(document getElementById('plant10'));\ndragElement(document getElementById('plant11'));\ndragElement(document getElementById('plant12'));\ndragElement(document getElementById('plant13'));\ndragElement(document getElementById('plant14'));\nयहाँ क्या चल रहा है",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 4,
    "total_chunks": 35
  },
  {
    "id": "1d36b638418ce7d6e2450fae54ee4868",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "टेरारियम प्रोजेक्ट पार्ट 3: DOM मैनिपुलेशन और एक क्लोजर",
    "content": "डोम तत्व पहली चीज जो आपको करने की ज़रूरत है वह उन तत्वों के संदर्भ बनाना है जिन्हें आप DOM में हेरफेर करना चाहते हैं। हमारे मामले में, वे 14 पौधे हैं जो वर्तमान में साइड बार में इंतजार कर रहे हैं। टास्क html dragElement(documentgetElementById('plant1')); dragElement(document getElementById('plant2')); dragElement(document getElementById('plant3')); dragElement(document getElementById('plant4')); dragElement(document getElementById('plant5')); dragElement(document getElementById('plant6')); dragElement(document getElementById('plant7')); dragElement(document getElementById('plant8')); dragElement(document getElementById('plant9')); dragElement(document getElementById('plant10')); dragElement(document getElementById('plant11')); dragElement(document getElementById('plant12')); dragElement(document getElementById('plant13')); dragElement(document getElementById('plant14')); यहाँ क्या चल रहा हैआप दस्तावेज़ को संदर्भित कर रहे हैं और किसी विशेष आईडी के साथ एक तत्व खोजने के लिए इसके DOM के माध्यम से देख रहे हैं। HTML पर पहले पाठ में याद रखें कि आपने प्रत्येक संयंत्र छवि (id=\"plant1\") के लिए अलग-अलग Ids दिए हैं",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 533,
    "chunk_index": 5,
    "total_chunks": 35
  },
  {
    "id": "db275209844670880c9425d2eb590cdd",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "टेरारियम प्रोजेक्ट पार्ट 3: DOM मैनिपुलेशन और एक क्लोजर",
    "content": "dragElement(documentgetElementById('plant1')); dragElement(document getElementById('plant2')); dragElement(document getElementById('plant3')); dragElement(document getElementById('plant4')); dragElement(document getElementById('plant5')); dragElement(document getElementById('plant6')); dragElement(document getElementById('plant7')); dragElement(document getElementById('plant8')); dragElement(document getElementById('plant9')); dragElement(document getElementById('plant10')); dragElement(document getElementById('plant11')); dragElement(document getElementById('plant12')); dragElement(document getElementById('plant13')); dragElement(document getElementById('plant14')); यहाँ क्या चल रहा हैआप दस्तावेज़ को संदर्भित कर रहे हैं और किसी विशेष आईडी के साथ एक तत्व खोजने के लिए इसके DOM के माध्यम से देख रहे हैं। HTML पर पहले पाठ में याद रखें कि आपने प्रत्येक संयंत्र छवि (id=\"plant1\") के लिए अलग-अलग Ids दिए हैंअब आप उस प्रयास का उपयोग करेंगे। प्रत्येक तत्व की पहचान करने के बाद, आप उस आइटम को dragElement नामक एक फ़ंक्शन में पास करते हैं जिसे आप एक मिनट में बनाएंगे। इस प्रकार, HTML में तत्व अब ड्रैग-सक्षम है, या शीघ्र ही होगा।\n✅ हम आईडी द्वारा तत्वों का संदर्भ क्यों देते हैं",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 588,
    "chunk_index": 6,
    "total_chunks": 35
  },
  {
    "id": "1de306b25df5307964b0bb41c6f92440",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "टेरारियम प्रोजेक्ट पार्ट 3: DOM मैनिपुलेशन और एक क्लोजर",
    "content": "से देख रहे हैं। HTML पर पहले पाठ में याद रखें कि आपने प्रत्येक संयंत्र छवि (id=\"plant1\") के लिए अलग-अलग Ids दिए हैंअब आप उस प्रयास का उपयोग करेंगे। प्रत्येक तत्व की पहचान करने के बाद, आप उस आइटम को dragElement नामक एक फ़ंक्शन में पास करते हैं जिसे आप एक मिनट में बनाएंगे। इस प्रकार, HTML में तत्व अब ड्रैग-सक्षम है, या शीघ्र ही होगा। ✅ हम आईडी द्वारा तत्वों का संदर्भ क्यों देते हैंउनके CSS क्लास के द्वारा क्यों नहीं",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 377,
    "chunk_index": 7,
    "total_chunks": 35
  },
  {
    "id": "3ad995fbf9795abf4618b52b8063de14",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "टेरारियम प्रोजेक्ट पार्ट 3: DOM मैनिपुलेशन और एक क्लोजर",
    "content": "पहले पाठ में याद रखें कि आपने प्रत्येक संयंत्र छवि (id=\"plant1\") के लिए अलग-अलग Ids दिए हैंअब आप उस प्रयास का उपयोग करेंगे। प्रत्येक तत्व की पहचान करने के बाद, आप उस आइटम को dragElement नामक एक फ़ंक्शन में पास करते हैं जिसे आप एक मिनट में बनाएंगे। इस प्रकार, HTML में तत्व अब ड्रैग-सक्षम है, या शीघ्र ही होगा। ✅ हम आईडी द्वारा तत्वों का संदर्भ क्यों देते हैंउनके CSS क्लास के द्वारा क्यों नहींआप इस प्रश्न का उत्तर देने के लिए CSS के पिछले पाठ का उल्लेख कर सकते हैं।\nथे क्लोशर\nअब आप DragElement बंद करने के लिए तैयार हैं, जो एक बाहरी फ़ंक्शन है जो एक आंतरिक फ़ंक्शन या फ़ंक्शन को संलग्न करता है (हमारे मामले में, हमारे पास तीन होंगे)।\nबाहरी फ़ंक्शन के कार्यक्षेत्र तक पहुँचने के लिए क्लोज़र उपयोगी होते हैं। यहाँ एक उदाहरण है:\njavascript\nfunction displayCandy(){\nlet candy = ['jellybeans'];\nfunction addCandy(candyType) {\ncandy",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 702,
    "chunk_index": 8,
    "total_chunks": 35
  },
  {
    "id": "365ddc342bc52ca78662e2045504d03d",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "टेरारियम प्रोजेक्ट पार्ट 3: DOM मैनिपुलेशन और एक क्लोजर",
    "content": "इस प्रश्न का उत्तर देने के लिए CSS के पिछले पाठ का उल्लेख कर सकते हैं। थे क्लोशर अब आप DragElement बंद करने के लिए तैयार हैं, जो एक बाहरी फ़ंक्शन है जो एक आंतरिक फ़ंक्शन या फ़ंक्शन को संलग्न करता है (हमारे मामले में, हमारे पास तीन होंगे)। बाहरी फ़ंक्शन के कार्यक्षेत्र तक पहुँचने के लिए क्लोज़र उपयोगी होते हैं। यहाँ एक उदाहरण है: javascript function displayCandy(){ let candy = ['jellybeans']; function addCandy(candyType) { candypush(candyType)\n}\naddCandy('gumdrops');\n}\ndisplayCandy();\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 357,
    "chunk_index": 9,
    "total_chunks": 35
  },
  {
    "id": "2a65bfc60e053bd9bd0449db3a5bab2c",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "टेरारियम प्रोजेक्ट पार्ट 3: DOM मैनिपुलेशन और एक क्लोजर",
    "content": "के लिए CSS के पिछले पाठ का उल्लेख कर सकते हैं। थे क्लोशर अब आप DragElement बंद करने के लिए तैयार हैं, जो एक बाहरी फ़ंक्शन है जो एक आंतरिक फ़ंक्शन या फ़ंक्शन को संलग्न करता है (हमारे मामले में, हमारे पास तीन होंगे)। बाहरी फ़ंक्शन के कार्यक्षेत्र तक पहुँचने के लिए क्लोज़र उपयोगी होते हैं। यहाँ एक उदाहरण है: javascript function displayCandy(){ let candy = ['jellybeans']; function addCandy(candyType) { candypush(candyType) } addCandy('gumdrops'); } displayCandy(); consolelog(candy)\nइस उदाहरण में, DisplayCandy फ़ंक्शन एक फ़ंक्शन को घेरता है जो एक नए कैंडी प्रकार को एक सरणी में धकेलता है जो पहले से ही फ़ंक्शन में मौजूद है। यदि आप इस कोड को चलाते हैं, तो candy सरणी अपरिभाषित होगी, क्योंकि यह एक स्थानीय चर (बंद करने के लिए स्थानीय) है।\n✅ आप candy अरै को कैसे सुलभ बना सकते हैं",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 615,
    "chunk_index": 10,
    "total_chunks": 35
  },
  {
    "id": "eddae3c2a7c7fb3adb40b390edba03e6",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "टेरारियम प्रोजेक्ट पार्ट 3: DOM मैनिपुलेशन और एक क्लोजर",
    "content": "displayCandy(){ let candy = ['jellybeans']; function addCandy(candyType) { candypush(candyType) } addCandy('gumdrops'); } displayCandy(); consolelog(candy) इस उदाहरण में, DisplayCandy फ़ंक्शन एक फ़ंक्शन को घेरता है जो एक नए कैंडी प्रकार को एक सरणी में धकेलता है जो पहले से ही फ़ंक्शन में मौजूद है। यदि आप इस कोड को चलाते हैं, तो candy सरणी अपरिभाषित होगी, क्योंकि यह एक स्थानीय चर (बंद करने के लिए स्थानीय) है। ✅ आप candy अरै को कैसे सुलभ बना सकते हैंइसे बंद करने के बाहर ले जाने की कोशिश करें। इस तरह, यह सरणी वैश्विक हो जाती है, बजाए केवल बंद होने के स्थानीय दायरे के उपलब्ध होने के।\nटास्क\nScript",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 463,
    "chunk_index": 11,
    "total_chunks": 35
  },
  {
    "id": "9930b51158319640710f5114a911b377",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "टेरारियम प्रोजेक्ट पार्ट 3: DOM मैनिपुलेशन और एक क्लोजर",
    "content": "एक सरणी में धकेलता है जो पहले से ही फ़ंक्शन में मौजूद है। यदि आप इस कोड को चलाते हैं, तो candy सरणी अपरिभाषित होगी, क्योंकि यह एक स्थानीय चर (बंद करने के लिए स्थानीय) है। ✅ आप candy अरै को कैसे सुलभ बना सकते हैंइसे बंद करने के बाहर ले जाने की कोशिश करें। इस तरह, यह सरणी वैश्विक हो जाती है, बजाए केवल बंद होने के स्थानीय दायरे के उपलब्ध होने के। टास्क Scriptjs में तत्व घोषणाओं के तहत, एक फ़ंक्शन बनाएँ:\njavascript\nfunction dragElement(terrariumElement) {\n//set 4 positions for positioning on the screen\nlet pos1 = 0,\npos2 = 0,\npos3 = 0,\npos4 = 0;\nterrariumElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 435,
    "chunk_index": 12,
    "total_chunks": 35
  },
  {
    "id": "924b7d2cd9cf6b427d82e880938f5e30",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "टेरारियम प्रोजेक्ट पार्ट 3: DOM मैनिपुलेशन और एक क्लोजर",
    "content": "स्थानीय) है। ✅ आप candy अरै को कैसे सुलभ बना सकते हैंइसे बंद करने के बाहर ले जाने की कोशिश करें। इस तरह, यह सरणी वैश्विक हो जाती है, बजाए केवल बंद होने के स्थानीय दायरे के उपलब्ध होने के। टास्क Scriptjs में तत्व घोषणाओं के तहत, एक फ़ंक्शन बनाएँ: javascript function dragElement(terrariumElement) { //set 4 positions for positioning on the screen let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0; terrariumElementonpointerdown = pointerDrag;\n}\ndragElement स्क्रिप्ट के शीर्ष पर घोषणाओं से अपनी terrariumElement वस्तु प्राप्त करें। फिर, आप फ़ंक्शन में पारित ऑब्जेक्ट के लिए 0 पर कुछ स्थानीय स्थिति निर्धारित करते हैं। ये स्थानीय चर हैं जिन्हें प्रत्येक तत्व के लिए हेरफेर किया जाएगा क्योंकि आप प्रत्येक तत्व को बंद करने के भीतर खींचें और ड्रॉप कार्यक्षमता जोड़ते हैं। टेरारियम को इन घसीटे गए तत्वों द्वारा पॉपुलेट किया जाएगा, इसलिए एप्लिकेशन को इस बात पर नज़र रखने की आवश्यकता है कि उन्हें कहाँ रखा गया है।\nइसके अलावा, इस फ़ंक्शन को पारित किए जाने वाले टेरारियम ईमेंट को एक onpointerdown ईवेंट सौंपा गया है, जो वेब एपीआई का एक हिस्सा है। डोम प्रबंधन के साथ मदद करने के लिए। onpointerdown एक बटन धकेलने पर, या हमारे मामले में, एक ड्रैग करने योग्य तत्व को छू जाता है। यह ईवेंट हैंडलर कुछ अपवादों के साथ वेब और मोबाइल ब्राउज़र दोनों पर काम करता है।\n✅ ईवेंट हैंडलर onclick को अधिक समर्थन क्रॉस-ब्राउज़र है; आप इसका उपयोग यहां क्यों नहीं करेंगे",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 1129,
    "chunk_index": 13,
    "total_chunks": 35
  },
  {
    "id": "19e7f49d2f9573ed4b477c3c58937010",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "टेरारियम प्रोजेक्ट पार्ट 3: DOM मैनिपुलेशन और एक क्लोजर",
    "content": "जाने वाले टेरारियम ईमेंट को एक onpointerdown ईवेंट सौंपा गया है, जो वेब एपीआई का एक हिस्सा है। डोम प्रबंधन के साथ मदद करने के लिए। onpointerdown एक बटन धकेलने पर, या हमारे मामले में, एक ड्रैग करने योग्य तत्व को छू जाता है। यह ईवेंट हैंडलर कुछ अपवादों के साथ वेब और मोबाइल ब्राउज़र दोनों पर काम करता है। ✅ ईवेंट हैंडलर onclick को अधिक समर्थन क्रॉस-ब्राउज़र है; आप इसका उपयोग यहां क्यों नहीं करेंगेस्क्रीन निर्माण के सटीक प्रकार के बारे में सोचें जिसे आप यहाँ बनाने का प्रयास कर रहे हैं।\nपॉइंटरड्रैग फ़ंक्शन\nterrariumElement को घसीटने के लिए तैयार है; जब onpointerdown ईवेंट को निकाल दिया जाता है, तो फ़ंक्शन पॉइंटरड्रैग को आमंत्रित किया जाता है। इस पंक्ति के नीचे उस फ़ंक्शन को जोड़ें: terrariumElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 646,
    "chunk_index": 14,
    "total_chunks": 35
  },
  {
    "id": "eb7a554da8411313dc1064ff5fd9e3b9",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "टेरारियम प्रोजेक्ट पार्ट 3: DOM मैनिपुलेशन और एक क्लोजर",
    "content": "वेब और मोबाइल ब्राउज़र दोनों पर काम करता है। ✅ ईवेंट हैंडलर onclick को अधिक समर्थन क्रॉस-ब्राउज़र है; आप इसका उपयोग यहां क्यों नहीं करेंगेस्क्रीन निर्माण के सटीक प्रकार के बारे में सोचें जिसे आप यहाँ बनाने का प्रयास कर रहे हैं। पॉइंटरड्रैग फ़ंक्शन terrariumElement को घसीटने के लिए तैयार है; जब onpointerdown ईवेंट को निकाल दिया जाता है, तो फ़ंक्शन पॉइंटरड्रैग को आमंत्रित किया जाता है। इस पंक्ति के नीचे उस फ़ंक्शन को जोड़ें: terrariumElementonpointerdown = pointerDrag;:\nटास्क\njavascript\nfunction pointerDrag(e) {\ne preventDefault();\nconsole log(e);\npos3 = e clientX;\npos4 = e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 447,
    "chunk_index": 15,
    "total_chunks": 35
  },
  {
    "id": "2acac433ee05cc56f3765827b09eb052",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "टेरारियम प्रोजेक्ट पार्ट 3: DOM मैनिपुलेशन और एक क्लोजर",
    "content": "आप इसका उपयोग यहां क्यों नहीं करेंगेस्क्रीन निर्माण के सटीक प्रकार के बारे में सोचें जिसे आप यहाँ बनाने का प्रयास कर रहे हैं। पॉइंटरड्रैग फ़ंक्शन terrariumElement को घसीटने के लिए तैयार है; जब onpointerdown ईवेंट को निकाल दिया जाता है, तो फ़ंक्शन पॉइंटरड्रैग को आमंत्रित किया जाता है। इस पंक्ति के नीचे उस फ़ंक्शन को जोड़ें: terrariumElementonpointerdown = pointerDrag;: टास्क javascript function pointerDrag(e) { e preventDefault(); console log(e); pos3 = e clientX; pos4 = eclientY;\n}\nकई चीजें होती हैं। सबसे पहले, आप डिफ़ॉल्ट ईवेंट्स को इंगित करते हैं जो आमतौर पर पॉइंटरडाउन पर होता है e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 16,
    "total_chunks": 35
  },
  {
    "id": "e38e310bf6c58e0777256895770d8947",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "टेरारियम प्रोजेक्ट पार्ट 3: DOM मैनिपुलेशन और एक क्लोजर",
    "content": "रहे हैं। पॉइंटरड्रैग फ़ंक्शन terrariumElement को घसीटने के लिए तैयार है; जब onpointerdown ईवेंट को निकाल दिया जाता है, तो फ़ंक्शन पॉइंटरड्रैग को आमंत्रित किया जाता है। इस पंक्ति के नीचे उस फ़ंक्शन को जोड़ें: terrariumElementonpointerdown = pointerDrag;: टास्क javascript function pointerDrag(e) { e preventDefault(); console log(e); pos3 = e clientX; pos4 = eclientY; } कई चीजें होती हैं। सबसे पहले, आप डिफ़ॉल्ट ईवेंट्स को इंगित करते हैं जो आमतौर पर पॉइंटरडाउन पर होता है epreventDefault (); का उपयोग करके। इस तरह से आपके पास इंटरफ़ेस के व्यवहार पर अधिक नियंत्रण है।\nजब आप पूरी तरह से स्क्रिप्ट फ़ाइल का निर्माण कर चुके हों और e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 17,
    "total_chunks": 35
  },
  {
    "id": "8f76dfaac9a7fa4c0ce9303f2d76b361",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "टेरारियम प्रोजेक्ट पार्ट 3: DOM मैनिपुलेशन और एक क्लोजर",
    "content": "नीचे उस फ़ंक्शन को जोड़ें: terrariumElementonpointerdown = pointerDrag;: टास्क javascript function pointerDrag(e) { e preventDefault(); console log(e); pos3 = e clientX; pos4 = eclientY; } कई चीजें होती हैं। सबसे पहले, आप डिफ़ॉल्ट ईवेंट्स को इंगित करते हैं जो आमतौर पर पॉइंटरडाउन पर होता है epreventDefault (); का उपयोग करके। इस तरह से आपके पास इंटरफ़ेस के व्यवहार पर अधिक नियंत्रण है। जब आप पूरी तरह से स्क्रिप्ट फ़ाइल का निर्माण कर चुके हों और epreventDefault () के बिना प्रयास करें - इस पंक्ति में वापस आएं - क्या होता है दूसरा, ब्राउज़र विंडो में index",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 406,
    "chunk_index": 18,
    "total_chunks": 35
  },
  {
    "id": "9e0883efc0c7f39314995197168a7c13",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "टेरारियम प्रोजेक्ट पार्ट 3: DOM मैनिपुलेशन और एक क्लोजर",
    "content": "clientX; pos4 = eclientY; } कई चीजें होती हैं। सबसे पहले, आप डिफ़ॉल्ट ईवेंट्स को इंगित करते हैं जो आमतौर पर पॉइंटरडाउन पर होता है epreventDefault (); का उपयोग करके। इस तरह से आपके पास इंटरफ़ेस के व्यवहार पर अधिक नियंत्रण है। जब आप पूरी तरह से स्क्रिप्ट फ़ाइल का निर्माण कर चुके हों और epreventDefault () के बिना प्रयास करें - इस पंक्ति में वापस आएं - क्या होता है दूसरा, ब्राउज़र विंडो में indexhtml खोलें, और इंटरफ़ेस का निरीक्षण करें। जब आप किसी प्लांट पर क्लिक करते हैं, तो आप देख सकते हैं कि 'e' ईवेंट कैसे कैप्चर किया जाता है। घटना में खुदाई करके देखें कि एक सूचक डाउन घटना द्वारा कितनी जानकारी एकत्र की जाती है",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 556,
    "chunk_index": 19,
    "total_chunks": 35
  },
  {
    "id": "6317f4b334cc7be97fc10a0f7c5157dc",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "टेरारियम प्रोजेक्ट पार्ट 3: DOM मैनिपुलेशन और एक क्लोजर",
    "content": "पूरी तरह से स्क्रिप्ट फ़ाइल का निर्माण कर चुके हों और epreventDefault () के बिना प्रयास करें - इस पंक्ति में वापस आएं - क्या होता है दूसरा, ब्राउज़र विंडो में indexhtml खोलें, और इंटरफ़ेस का निरीक्षण करें। जब आप किसी प्लांट पर क्लिक करते हैं, तो आप देख सकते हैं कि 'e' ईवेंट कैसे कैप्चर किया जाता है। घटना में खुदाई करके देखें कि एक सूचक डाउन घटना द्वारा कितनी जानकारी एकत्र की जाती हैइसके बाद, ध्यान दें कि कैसे स्थानीय चर pos3 औरpos4 को e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 398,
    "chunk_index": 20,
    "total_chunks": 35
  },
  {
    "id": "dd2e6d3586b340cd24668bec77cecd9f",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "टेरारियम प्रोजेक्ट पार्ट 3: DOM मैनिपुलेशन और एक क्लोजर",
    "content": "epreventDefault () के बिना प्रयास करें - इस पंक्ति में वापस आएं - क्या होता है दूसरा, ब्राउज़र विंडो में indexhtml खोलें, और इंटरफ़ेस का निरीक्षण करें। जब आप किसी प्लांट पर क्लिक करते हैं, तो आप देख सकते हैं कि 'e' ईवेंट कैसे कैप्चर किया जाता है। घटना में खुदाई करके देखें कि एक सूचक डाउन घटना द्वारा कितनी जानकारी एकत्र की जाती हैइसके बाद, ध्यान दें कि कैसे स्थानीय चर pos3 औरpos4 को eclientX पर सेट किया जाता है। आप निरीक्षण फलक में e मान पा सकते हैं। ये मान उस समय संयंत्र के x और y निर्देशांक को कैप्चर करते हैं जब आप उस पर क्लिक करते हैं या उसे स्पर्श करते हैं। जब आप क्लिक करते हैं और उन्हें खींचते हैं, तो आपको पौधों के व्यवहार पर ठीक-ठीक नियंत्रण की आवश्यकता होगी, इसलिए आप उनके निर्देशांक पर नज़र रखें।\n✅ क्या यह अधिक स्पष्ट हो रहा है कि इस पूरे ऐप को एक बड़े क्लोजर के साथ क्यों बनाया गया है",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 747,
    "chunk_index": 21,
    "total_chunks": 35
  },
  {
    "id": "4c7c675f887a727b8a24a62b623ce7a3",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "टेरारियम प्रोजेक्ट पार्ट 3: DOM मैनिपुलेशन और एक क्लोजर",
    "content": "हैं। ये मान उस समय संयंत्र के x और y निर्देशांक को कैप्चर करते हैं जब आप उस पर क्लिक करते हैं या उसे स्पर्श करते हैं। जब आप क्लिक करते हैं और उन्हें खींचते हैं, तो आपको पौधों के व्यवहार पर ठीक-ठीक नियंत्रण की आवश्यकता होगी, इसलिए आप उनके निर्देशांक पर नज़र रखें। ✅ क्या यह अधिक स्पष्ट हो रहा है कि इस पूरे ऐप को एक बड़े क्लोजर के साथ क्यों बनाया गया हैयदि यह नहीं था, तो आप 14 ड्रैगेबल पौधों में से प्रत्येक के लिए गुंजाइश कैसे बनाए रखेंगे pos4 = e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 439,
    "chunk_index": 22,
    "total_chunks": 35
  },
  {
    "id": "419b4df61e25266ac45496b5bf4c6761",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "टेरारियम प्रोजेक्ट पार्ट 3: DOM मैनिपुलेशन और एक क्लोजर",
    "content": "करते हैं या उसे स्पर्श करते हैं। जब आप क्लिक करते हैं और उन्हें खींचते हैं, तो आपको पौधों के व्यवहार पर ठीक-ठीक नियंत्रण की आवश्यकता होगी, इसलिए आप उनके निर्देशांक पर नज़र रखें। ✅ क्या यह अधिक स्पष्ट हो रहा है कि इस पूरे ऐप को एक बड़े क्लोजर के साथ क्यों बनाया गया हैयदि यह नहीं था, तो आप 14 ड्रैगेबल पौधों में से प्रत्येक के लिए गुंजाइश कैसे बनाए रखेंगे pos4 = eclientY के तहत दो और पॉइंटर इवेंट जोड़-तोड़ जोड़कर प्रारंभिक कार्य पूरा करें:\nhtml\ndocument onpointermove = elementDrag;\ndocument",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 450,
    "chunk_index": 23,
    "total_chunks": 35
  },
  {
    "id": "3155cda35a4238313e01f2e237befab1",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "टेरारियम प्रोजेक्ट पार्ट 3: DOM मैनिपुलेशन और एक क्लोजर",
    "content": "पौधों के व्यवहार पर ठीक-ठीक नियंत्रण की आवश्यकता होगी, इसलिए आप उनके निर्देशांक पर नज़र रखें। ✅ क्या यह अधिक स्पष्ट हो रहा है कि इस पूरे ऐप को एक बड़े क्लोजर के साथ क्यों बनाया गया हैयदि यह नहीं था, तो आप 14 ड्रैगेबल पौधों में से प्रत्येक के लिए गुंजाइश कैसे बनाए रखेंगे pos4 = eclientY के तहत दो और पॉइंटर इवेंट जोड़-तोड़ जोड़कर प्रारंभिक कार्य पूरा करें: html document onpointermove = elementDrag; documentonpointerup = stopElementDrag;\nअब आप यह संकेत दे रहे हैं कि आप चाहते हैं कि प्लांट आपको पॉइंटर के साथ-साथ खींचे, और जब आप प्लांट को अचयनित करते हैं, तब उसे रोकने के लिए जेस्चर को खींचे। onpointermove औरonpointerup एक ही API के सभी भाग onpointerdown के रूप में हैं। इंटरफ़ेस अब त्रुटियों को फेंक देगा क्योंकि आपने अभी तक elementDrag और stopElementDrag फ़ंक्शन को परिभाषित नहीं किया है, इसलिए उन लोगों का निर्माण करेंt",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 704,
    "chunk_index": 24,
    "total_chunks": 35
  },
  {
    "id": "c9b1570a838be5e68e53d5306b2aff95",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "टेरारियम प्रोजेक्ट पार्ट 3: DOM मैनिपुलेशन और एक क्लोजर",
    "content": "elementDrag; documentonpointerup = stopElementDrag; अब आप यह संकेत दे रहे हैं कि आप चाहते हैं कि प्लांट आपको पॉइंटर के साथ-साथ खींचे, और जब आप प्लांट को अचयनित करते हैं, तब उसे रोकने के लिए जेस्चर को खींचे। onpointermove औरonpointerup एक ही API के सभी भाग onpointerdown के रूप में हैं। इंटरफ़ेस अब त्रुटियों को फेंक देगा क्योंकि आपने अभी तक elementDrag और stopElementDrag फ़ंक्शन को परिभाषित नहीं किया है, इसलिए उन लोगों का निर्माण करेंtelementDrag और stopElementDrag फंगक्शनस\nआप दो और आंतरिक कार्यों को जोड़कर अपने बंद को पूरा करेंगे जो तब होगा जब आप किसी पौधे को खींचते हैं और उसे खींचना बंद कर देंगे। जो व्यवहार आप चाहते हैं, वह यह है कि आप किसी भी समय किसी भी पौधे को खींच सकते हैं और स्क्रीन पर कहीं भी रख सकते हैं। यह इंटरफ़ेस काफी गैर-राय है (उदाहरण के लिए कोई ड्रॉप ज़ोन नहीं है) आपको अपने टेरारियम को ठीक उसी तरह से डिज़ाइन करने की अनुमति देता है, जैसे आप पौधों को जोड़कर, हटाकर और रिपोजिट करके।\nटास्क\nPointerDrag के समापन घुंघराले ब्रैकेट के ठीक बाद elementDrag फ़ंक्शन जोड़ें।\njavascript\nfunction elementDrag(e) {\npos1 = pos3 - e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 878,
    "chunk_index": 25,
    "total_chunks": 35
  },
  {
    "id": "73513a5e6d6216323cd0ca68892fc6b6",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "टेरारियम प्रोजेक्ट पार्ट 3: DOM मैनिपुलेशन और एक क्लोजर",
    "content": "आप किसी भी समय किसी भी पौधे को खींच सकते हैं और स्क्रीन पर कहीं भी रख सकते हैं। यह इंटरफ़ेस काफी गैर-राय है (उदाहरण के लिए कोई ड्रॉप ज़ोन नहीं है) आपको अपने टेरारियम को ठीक उसी तरह से डिज़ाइन करने की अनुमति देता है, जैसे आप पौधों को जोड़कर, हटाकर और रिपोजिट करके। टास्क PointerDrag के समापन घुंघराले ब्रैकेट के ठीक बाद elementDrag फ़ंक्शन जोड़ें। javascript function elementDrag(e) { pos1 = pos3 - eclientX;\npos2 = pos4 - e clientY;\npos3 = e clientX;\npos4 = e clientY;\nconsole log(pos1, pos2, pos3, pos4);\nterrariumElement style top = terrariumElement offsetTop - pos2 + 'px';\nterrariumElement style left = terrariumElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 413,
    "chunk_index": 26,
    "total_chunks": 35
  },
  {
    "id": "7dbf66faacc9a51ce6fc3971335c9c9a",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "टेरारियम प्रोजेक्ट पार्ट 3: DOM मैनिपुलेशन और एक क्लोजर",
    "content": "टेरारियम को ठीक उसी तरह से डिज़ाइन करने की अनुमति देता है, जैसे आप पौधों को जोड़कर, हटाकर और रिपोजिट करके। टास्क PointerDrag के समापन घुंघराले ब्रैकेट के ठीक बाद elementDrag फ़ंक्शन जोड़ें। javascript function elementDrag(e) { pos1 = pos3 - eclientX; pos2 = pos4 - e clientY; pos3 = e clientX; pos4 = e clientY; console log(pos1, pos2, pos3, pos4); terrariumElement style top = terrariumElement offsetTop - pos2 + 'px'; terrariumElement style left = terrariumElementoffsetLeft - pos1 + 'px';\n}\nइस फ़ंक्शन में, आप प्रारंभिक पदों 1-4 का बहुत अधिक संपादन करते हैं जो आप बाहरी फ़ंक्शन में स्थानीय चर के रूप में सेट करते हैं। यहाँ क्या चल रहा है जैसा कि आप खींचते हैं, आप pos1 कोpos3 (जिसे आप पहले e clientX के रूप में सेट करते हैं) के बराबर करके वर्तमानe",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 27,
    "total_chunks": 35
  },
  {
    "id": "b6c2d960066b194ad989a4f54f405901",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "टेरारियम प्रोजेक्ट पार्ट 3: DOM मैनिपुलेशन और एक क्लोजर",
    "content": "pos3, pos4); terrariumElement style top = terrariumElement offsetTop - pos2 + 'px'; terrariumElement style left = terrariumElementoffsetLeft - pos1 + 'px'; } इस फ़ंक्शन में, आप प्रारंभिक पदों 1-4 का बहुत अधिक संपादन करते हैं जो आप बाहरी फ़ंक्शन में स्थानीय चर के रूप में सेट करते हैं। यहाँ क्या चल रहा है जैसा कि आप खींचते हैं, आप pos1 कोpos3 (जिसे आप पहले e clientX के रूप में सेट करते हैं) के बराबर करके वर्तमानeclientX मान को पुन: असाइन करते हैं। आप pos2 के समान ऑपरेशन करते हैं। फिर, आप तत्व के नए X और Y निर्देशांक के लिए pos3 और pos4 को रीसेट करते हैं। जैसे ही आप ड्रैग करते हैं आप इन बदलावों को कंसोल में देख सकते हैं। फिर, आप प्लांट की सीएसएस शैली में हेरफेर करते हैं, ताकि पॉज़ के शीर्ष और बाएं एक्स और वाई निर्देशांक की गणना इन नए पदों के साथ तुलना करने के आधार पर pos1 और pos2 के नए पदों के आधार पर अपनी नई स्थिति निर्धारित कर सकें।\noffsetTop और offsetLeft सीएसएस गुण हैं जो एक तत्व की स्थिति को उसके पेरेंट्स के आधार पर निर्धारित करते हैं; इसका मूल कोई भी तत्व हो सकता है जिसे static के रूप में तैनात नहीं किया जाता है।\nस्थिति के इस सभी पुनर्गणना से आपको टेरारियम और उसके पौधों के व्यवहार को ठीक करने की अनुमति मिलती है।\nटास्क\nइंटरफ़ेस को पूरा करने के लिए अंतिम कार्य elementDrag के समापन कर्ली ब्रैकेट के बाद stopElementDrag फ़ंक्शन को जोड़ना है:\njavascript\nfunction stopElementDrag() {\ndocument",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 1039,
    "chunk_index": 28,
    "total_chunks": 35
  },
  {
    "id": "431fe698195c2de888a01a3335917b15",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "टेरारियम प्रोजेक्ट पार्ट 3: DOM मैनिपुलेशन और एक क्लोजर",
    "content": "तत्व की स्थिति को उसके पेरेंट्स के आधार पर निर्धारित करते हैं; इसका मूल कोई भी तत्व हो सकता है जिसे static के रूप में तैनात नहीं किया जाता है। स्थिति के इस सभी पुनर्गणना से आपको टेरारियम और उसके पौधों के व्यवहार को ठीक करने की अनुमति मिलती है। टास्क इंटरफ़ेस को पूरा करने के लिए अंतिम कार्य elementDrag के समापन कर्ली ब्रैकेट के बाद stopElementDrag फ़ंक्शन को जोड़ना है: javascript function stopElementDrag() { documentonpointerup = null;\ndocument",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 341,
    "chunk_index": 29,
    "total_chunks": 35
  },
  {
    "id": "d8bcb2f45dd7f1501c178911ee1e6c2b",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "टेरारियम प्रोजेक्ट पार्ट 3: DOM मैनिपुलेशन और एक क्लोजर",
    "content": "को उसके पेरेंट्स के आधार पर निर्धारित करते हैं; इसका मूल कोई भी तत्व हो सकता है जिसे static के रूप में तैनात नहीं किया जाता है। स्थिति के इस सभी पुनर्गणना से आपको टेरारियम और उसके पौधों के व्यवहार को ठीक करने की अनुमति मिलती है। टास्क इंटरफ़ेस को पूरा करने के लिए अंतिम कार्य elementDrag के समापन कर्ली ब्रैकेट के बाद stopElementDrag फ़ंक्शन को जोड़ना है: javascript function stopElementDrag() { documentonpointerup = null; documentonpointermove = null;\n}\nयह छोटा फ़ंक्शन onpointerup और onpointermove इवेंट्स को रीसेट करता है ताकि आप या तो अपने प्लांट की प्रगति को फिर से खींचना शुरू कर सकें, या एक नए प्लांट को खींचना शुरू कर सकें।\n✅ यदि आप इन घटनाओं को नल करने के लिए सेट नहीं करते हैं तो क्या होगा",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 557,
    "chunk_index": 30,
    "total_chunks": 35
  },
  {
    "id": "ca6be1cb05b990e664183d9912c83107",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "टेरारियम प्रोजेक्ट पार्ट 3: DOM मैनिपुलेशन और एक क्लोजर",
    "content": "कार्य elementDrag के समापन कर्ली ब्रैकेट के बाद stopElementDrag फ़ंक्शन को जोड़ना है: javascript function stopElementDrag() { documentonpointerup = null; documentonpointermove = null; } यह छोटा फ़ंक्शन onpointerup और onpointermove इवेंट्स को रीसेट करता है ताकि आप या तो अपने प्लांट की प्रगति को फिर से खींचना शुरू कर सकें, या एक नए प्लांट को खींचना शुरू कर सकें। ✅ यदि आप इन घटनाओं को नल करने के लिए सेट नहीं करते हैं तो क्या होगाअब आपने अपना प्रोजेक्ट पूरा कर लिया है 🥇बधाई हो",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 350,
    "chunk_index": 31,
    "total_chunks": 35
  },
  {
    "id": "e3441d329952c513e12f2dd6dc4afecb",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "टेरारियम प्रोजेक्ट पार्ट 3: DOM मैनिपुलेशन और एक क्लोजर",
    "content": "फ़ंक्शन को जोड़ना है: javascript function stopElementDrag() { documentonpointerup = null; documentonpointermove = null; } यह छोटा फ़ंक्शन onpointerup और onpointermove इवेंट्स को रीसेट करता है ताकि आप या तो अपने प्लांट की प्रगति को फिर से खींचना शुरू कर सकें, या एक नए प्लांट को खींचना शुरू कर सकें। ✅ यदि आप इन घटनाओं को नल करने के लिए सेट नहीं करते हैं तो क्या होगाअब आपने अपना प्रोजेक्ट पूरा कर लिया है 🥇बधाई होआपने अपना सुंदर टेरारियम पूरा कर लिया है। समाप्त टेरारियम\n🚀चुनौती\nपौधों को कुछ और करने के लिए अपने क्लोशर करने के लिए नया ईवेंट हैंडलर जोड़ें; उदाहरण के लिए, किसी पौधे को सामने लाने के लिए उस पर डबल-क्लिक करें। रचनात्मक हो",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 541,
    "chunk_index": 32,
    "total_chunks": 35
  },
  {
    "id": "22b642c9fe6d5e3a7507ec89da429612",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "टेरारियम प्रोजेक्ट पार्ट 3: DOM मैनिपुलेशन और एक क्लोजर",
    "content": "एक नए प्लांट को खींचना शुरू कर सकें। ✅ यदि आप इन घटनाओं को नल करने के लिए सेट नहीं करते हैं तो क्या होगाअब आपने अपना प्रोजेक्ट पूरा कर लिया है 🥇बधाई होआपने अपना सुंदर टेरारियम पूरा कर लिया है। समाप्त टेरारियम 🚀चुनौती पौधों को कुछ और करने के लिए अपने क्लोशर करने के लिए नया ईवेंट हैंडलर जोड़ें; उदाहरण के लिए, किसी पौधे को सामने लाने के लिए उस पर डबल-क्लिक करें। रचनात्मक होव्याख्यान उपरांत प्रश्नोत्तरी\nव्याख्यान उपरांत प्रश्नोत्तरी\nसमीक्षा और स्व अध्ययन\nस्क्रीन के चारों ओर तत्वों को खींचते समय तुच्छ लगता है, ऐसा करने के कई तरीके और कई नुकसान हैं, जो आपके चाहने वाले प्रभाव पर निर्भर करता है। वास्तव में, एक संपूर्ण ड्रैग एंड ड्रॉप एपीआई है जिसे आप आज़मा सकते हैं। हमने इसका उपयोग इस मॉड्यूल में नहीं किया क्योंकि हम जो प्रभाव चाहते थे वह कुछ अलग था, लेकिन इस एपीआई को अपने प्रोजेक्ट पर आज़माएँ और देखें कि आप क्या हासिल कर सकते हैं।\nW3C डॉक्स और MDN वेब डॉक्स पर सूचक घटनाओं के बारे में अधिक जानकारी प्राप्त करें।\nहमेशा [CanIUse",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 926,
    "chunk_index": 33,
    "total_chunks": 35
  },
  {
    "id": "db394543f2b60b5e4fa506eec744b325",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
    "source_type": "git_repo",
    "title": "टेरारियम प्रोजेक्ट पार्ट 3: DOM मैनिपुलेशन और एक क्लोजर",
    "content": "जो आपके चाहने वाले प्रभाव पर निर्भर करता है। वास्तव में, एक संपूर्ण ड्रैग एंड ड्रॉप एपीआई है जिसे आप आज़मा सकते हैं। हमने इसका उपयोग इस मॉड्यूल में नहीं किया क्योंकि हम जो प्रभाव चाहते थे वह कुछ अलग था, लेकिन इस एपीआई को अपने प्रोजेक्ट पर आज़माएँ और देखें कि आप क्या हासिल कर सकते हैं। W3C डॉक्स और MDN वेब डॉक्स पर सूचक घटनाओं के बारे में अधिक जानकारी प्राप्त करें। हमेशा [CanIUsecom] (https://caniuse com/) का उपयोग करके ब्राउज़र क्षमताओं की जाँच करें।\nअसाइनमेंट\nDOM के साथ थोड़ा और काम करें",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26923,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.hi.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 34,
    "total_chunks": 35
  },
  {
    "id": "190e044ae716c4dfcd1127cdea70ed2a",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "Terrarium 프로젝트 파트 3: DOM 조작과 클로저",
    "content": "Terrarium 프로젝트 파트 3: DOM 조작과 클로저\nSketchnote by Tomomi Imura\n강의 전 퀴즈\nPre-lecture quiz\n소개\nDOM 또는 \"Document Object Model\"을 조작하는 것은 웹 개발의 핵심입니다 MDN에 따르면, \"The Document Object Model (DOM) is the data representation of the objects that comprise the structure and content of a document on the web \" 이라고 합니다 웹의 DOM 조작과 관련하여 간혹 DOM을 관리하기 위해 순수 JavaScript 대신 JavaScript 프레임워크를 도전하게 되는 원동력이지만, 우리는 스스로 관리할 것입니다 추가로, 이 강의에서는 JavaScript closure에 대한 아이디어를 소개합니다 내부 함수가 외부 함수의 범위에 접근할 수 있도록 합니다 DOM을 조작하기 위해 클로저를 사용할 예정입니다 DOM을 웹 페이지 문서를 제어할 수 있는 모든 방법으로 나타낼 수 있는 트리로 생각하십시오 프로그래머가 선택한 프로그래밍 언어를 사용하여 DOM에 접근하고 편집, 변경, 재배치하며 관리할 수 있는 다양한 API(Application Program Interfaces)가 작성되어 있습니다 DOM과 참조하는 HTML 마크업의 표현입니다 From Olfa Nasraoui\n이 강의에서는, 사용자가 페이지에서 식물을 조작할 수 있는 JavaScript를 작성하여 대화식 terrarium 프로젝트를 완료합니다 준비물\nterrarium에 대한 HTML과 CSS를 작성해두어야 합니다 이 강의가 끝나면 식물을 드래그하여 terrarium에서 이동할 수 있습니다 작업\nterrarium 폴더에서, script",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13384,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 14
  },
  {
    "id": "b3a673b7de820ba2e37969e42f9710f1",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "Terrarium 프로젝트 파트 3: DOM 조작과 클로저",
    "content": "예정입니다 DOM을 웹 페이지 문서를 제어할 수 있는 모든 방법으로 나타낼 수 있는 트리로 생각하십시오 프로그래머가 선택한 프로그래밍 언어를 사용하여 DOM에 접근하고 편집, 변경, 재배치하며 관리할 수 있는 다양한 API(Application Program Interfaces)가 작성되어 있습니다 DOM과 참조하는 HTML 마크업의 표현입니다 From Olfa Nasraoui 이 강의에서는, 사용자가 페이지에서 식물을 조작할 수 있는 JavaScript를 작성하여 대화식 terrarium 프로젝트를 완료합니다 준비물 terrarium에 대한 HTML과 CSS를 작성해두어야 합니다 이 강의가 끝나면 식물을 드래그하여 terrarium에서 이동할 수 있습니다 작업 terrarium 폴더에서, scriptjs라고 불리는 파일을 만듭니다 파일의 <head> 부분에 넣습니다:\nhtml\n<script src=\" /script js\" defer></script>\n> Note: 외부 JavaScript 파일을 html 파일로 가져올 때 defer 를 사용하여 HTML 파일이 완전히 불러질 때만 JavaScript가 실행되도록 합니다 HTML 파일이 파싱되는 동안 스크립트를 실행할 수 있는 async 속성을 사용할 수 있지만, 우리는 드래그 스크립트를 실행하기 전에 HTML 요소를 완전히 드래그할 수 있어야 한다는 점이 중요합니다 DOM 요소\n가장 먼저 할 일은 DOM에서 조작하려는 요소에 대한 참조를 만드는 것입니다 우리의 경우, 현재 사이드바에서 대기하고 있는 14개의 식물입니다 작업\nhtml\ndragElement(document getElementById('plant1'));\ndragElement(document getElementById('plant2'));\ndragElement(document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13384,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 14
  },
  {
    "id": "d0130e2f3d87c8ecfaf6fa14e55cdb99",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "Terrarium 프로젝트 파트 3: DOM 조작과 클로저",
    "content": "defer></script> > Note: 외부 JavaScript 파일을 html 파일로 가져올 때 defer 를 사용하여 HTML 파일이 완전히 불러질 때만 JavaScript가 실행되도록 합니다 HTML 파일이 파싱되는 동안 스크립트를 실행할 수 있는 async 속성을 사용할 수 있지만, 우리는 드래그 스크립트를 실행하기 전에 HTML 요소를 완전히 드래그할 수 있어야 한다는 점이 중요합니다 DOM 요소 가장 먼저 할 일은 DOM에서 조작하려는 요소에 대한 참조를 만드는 것입니다 우리의 경우, 현재 사이드바에서 대기하고 있는 14개의 식물입니다 작업 html dragElement(document getElementById('plant1')); dragElement(document getElementById('plant2')); dragElement(documentgetElementById('plant3'));\ndragElement(document getElementById('plant4'));\ndragElement(document getElementById('plant5'));\ndragElement(document getElementById('plant6'));\ndragElement(document getElementById('plant7'));\ndragElement(document getElementById('plant8'));\ndragElement(document getElementById('plant9'));\ndragElement(document getElementById('plant10'));\ndragElement(document getElementById('plant11'));\ndragElement(document getElementById('plant12'));\ndragElement(document getElementById('plant13'));\ndragElement(document getElementById('plant14'));\n여기서 어떤 일이 일어나고 있나요 특정 Id의 요소를 찾기 위해 문서를 참조하려고 해당 DOM을 봅니다 HTML에 대한 첫번째 강의에서 각 식물 이미지(id=\"plant1\")에 개별 Id를 준 것을 기억하시나요 이제 그 노력을 쓰겠습니다 각 요소를 식별한 후, 1분 안에 작성될 dragElement라고 불리는 함수에 해당 아이템을 전달합니다 따라서 HTML의 요소는 이제 드래그를 할 수 있거나 곧 합니다",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13384,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 2,
    "total_chunks": 14
  },
  {
    "id": "85f7b9845e5ea05acf99b6df92391f47",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "Terrarium 프로젝트 파트 3: DOM 조작과 클로저",
    "content": "dragElement(document getElementById('plant4')); dragElement(document getElementById('plant5')); dragElement(document getElementById('plant6')); dragElement(document getElementById('plant7')); dragElement(document getElementById('plant8')); dragElement(document getElementById('plant9')); dragElement(document getElementById('plant10')); dragElement(document getElementById('plant11')); dragElement(document getElementById('plant12')); dragElement(document getElementById('plant13')); dragElement(document getElementById('plant14')); 여기서 어떤 일이 일어나고 있나요 특정 Id의 요소를 찾기 위해 문서를 참조하려고 해당 DOM을 봅니다 HTML에 대한 첫번째 강의에서 각 식물 이미지(id=\"plant1\")에 개별 Id를 준 것을 기억하시나요 이제 그 노력을 쓰겠습니다 각 요소를 식별한 후, 1분 안에 작성될 dragElement라고 불리는 함수에 해당 아이템을 전달합니다 따라서 HTML의 요소는 이제 드래그를 할 수 있거나 곧 합니다✅ 왜 우리는 Id로 요소를 참조하나요 CSS 클래스가 아닌 이유는 무엇일까요 이 질문에 답하기 위해 CSS에 대한 전 강의를 참조할 수 있습니다 클로저\n이제 내부 함수를 감싸는 외부 함수인 dragElement 클로저를 만들 준비가 되었습니다(이 경우에는, 3개가 있습니다) 클로저는 하나 이상의 함수가 외부 함수의 범위로 접근하는 순간 유용합니다 예시는 다음과 같습니다:\njavascript\nfunction displayCandy(){\nlet candy = ['jellybeans'];\nfunction addCandy(candyType) {\ncandy push(candyType)\n}\naddCandy('gumdrops');\n}\ndisplayCandy();\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13384,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 3,
    "total_chunks": 14
  },
  {
    "id": "edd24ef34e50667b46137a6aa9970ff6",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "Terrarium 프로젝트 파트 3: DOM 조작과 클로저",
    "content": "따라서 HTML의 요소는 이제 드래그를 할 수 있거나 곧 합니다✅ 왜 우리는 Id로 요소를 참조하나요 CSS 클래스가 아닌 이유는 무엇일까요 이 질문에 답하기 위해 CSS에 대한 전 강의를 참조할 수 있습니다 클로저 이제 내부 함수를 감싸는 외부 함수인 dragElement 클로저를 만들 준비가 되었습니다(이 경우에는, 3개가 있습니다) 클로저는 하나 이상의 함수가 외부 함수의 범위로 접근하는 순간 유용합니다 예시는 다음과 같습니다: javascript function displayCandy(){ let candy = ['jellybeans']; function addCandy(candyType) { candy push(candyType) } addCandy('gumdrops'); } displayCandy(); consolelog(candy)\n이 예제에서, displayCandy 함수는 새 캔디 타입을 이미 존재하는 배열로 푸시하는 함수를 감쌉니다 이 코드를 실행한다면, candy 배열은 지역 변수(클로저 로컬)이므로 정의되지 않습니다 ✅ candy 배열에 어떻게 접근할 수 있습니까 클로저 밖으로 이동해보세요 이 방식은 배열이 클로저의 로컬뿐만 아니라, 전역 범위에서도 사용할 수 있습니다 작업\nscript js의 요소 선언 아래, 함수를 만듭니다:\njavascript\nfunction dragElement(terrariumElement) {\n//set 4 positions for positioning on the screen\nlet pos1 = 0,\npos2 = 0,\npos3 = 0,\npos4 = 0;\nterrariumElement onpointerdown = pointerDrag;\n}\ndragElement는 스크립트 상단의 선언에서 terrariumElement 객체를 가져옵니다",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13384,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 4,
    "total_chunks": 14
  },
  {
    "id": "42a97303e7f9bbbe7af080dd231e8cf0",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "Terrarium 프로젝트 파트 3: DOM 조작과 클로저",
    "content": "이 코드를 실행한다면, candy 배열은 지역 변수(클로저 로컬)이므로 정의되지 않습니다 ✅ candy 배열에 어떻게 접근할 수 있습니까 클로저 밖으로 이동해보세요 이 방식은 배열이 클로저의 로컬뿐만 아니라, 전역 범위에서도 사용할 수 있습니다 작업 script js의 요소 선언 아래, 함수를 만듭니다: javascript function dragElement(terrariumElement) { //set 4 positions for positioning on the screen let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0; terrariumElement onpointerdown = pointerDrag; } dragElement는 스크립트 상단의 선언에서 terrariumElement 객체를 가져옵니다그러고, 함수에 전달된 객체의 일부 로컬 위치를 0으로 설정합니다 클로저 안에서 드래그 앤 드롭 기능을 각 요소에 추가할 때 각 요소에 대해 조작될 지역 변수입니다 terrarium에 드래그된 요소로 채워지므로, 애플리케이션은 배치된 위치를 추적해야 합니다 추가로, 이 함수에 전달되는 terrariumElement에는 DOM 관리에 도움이 되도록 설계된 web APIs의 일부인 pointerdown 이벤트가 할당됩니다 onpointerdown은 버튼이 눌리거나 드래그 하는 요소가 터치될 때 발생합니다 이 이벤트 핸들러는 몇 가지 예외를 제외하고, 웹과 모바일 브라우저 다 작동합니다 ✅ event handler onclick은 크로스 브라우저 지원이 훨씬 더 많습니다 왜 여기서 사용하지 않나요",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13384,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 5,
    "total_chunks": 14
  },
  {
    "id": "a4f04707253d3ae9bddba9d1b42a8451",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "Terrarium 프로젝트 파트 3: DOM 조작과 클로저",
    "content": "클로저 안에서 드래그 앤 드롭 기능을 각 요소에 추가할 때 각 요소에 대해 조작될 지역 변수입니다 terrarium에 드래그된 요소로 채워지므로, 애플리케이션은 배치된 위치를 추적해야 합니다 추가로, 이 함수에 전달되는 terrariumElement에는 DOM 관리에 도움이 되도록 설계된 web APIs의 일부인 pointerdown 이벤트가 할당됩니다 onpointerdown은 버튼이 눌리거나 드래그 하는 요소가 터치될 때 발생합니다 이 이벤트 핸들러는 몇 가지 예외를 제외하고, 웹과 모바일 브라우저 다 작동합니다 ✅ event handler onclick은 크로스 브라우저 지원이 훨씬 더 많습니다 왜 여기서 사용하지 않나요여기에서 만들고자 하는 정확한 화면 상호작용 타입에 대해 생각해보세요 Pointerdrag 함수\nterrariumElement를 드래그할 준비가 되었습니다; onpointerdown 이벤트가 시작되면, pointerDrag 함수가 호출됩니다 줄 바로 아래에 해당 함수를 추가하시기 바랍니다: terrariumElement onpointerdown = pointerDrag;:\n작업\njavascript\nfunction pointerDrag(e) {\ne preventDefault();\nconsole log(e);\npos3 = e clientX;\npos4 = e clientY;\n}\n몇 가지 일이 발생합니다 처음으로, e preventDefault();를 사용하여 포인터 다운 시 일상적으로 발생하는 기본 이벤트가 발생하지 않도록 합니다 이러면 인터페이스의 동작을 더 잘 제어할 수 있습니다 스크립트 파일을 완전히 작성했으면 이 줄로 돌아와서 e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13384,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 6,
    "total_chunks": 14
  },
  {
    "id": "2463d899829757d154c4c5f51f1d6ab1",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "Terrarium 프로젝트 파트 3: DOM 조작과 클로저",
    "content": "생각해보세요 Pointerdrag 함수 terrariumElement를 드래그할 준비가 되었습니다; onpointerdown 이벤트가 시작되면, pointerDrag 함수가 호출됩니다 줄 바로 아래에 해당 함수를 추가하시기 바랍니다: terrariumElement onpointerdown = pointerDrag;: 작업 javascript function pointerDrag(e) { e preventDefault(); console log(e); pos3 = e clientX; pos4 = e clientY; } 몇 가지 일이 발생합니다 처음으로, e preventDefault();를 사용하여 포인터 다운 시 일상적으로 발생하는 기본 이벤트가 발생하지 않도록 합니다 이러면 인터페이스의 동작을 더 잘 제어할 수 있습니다 스크립트 파일을 완전히 작성했으면 이 줄로 돌아와서 epreventDefault() 없이 시도해보세요 - 어떻게 되나요 두 번째로는, 브라우저 창에서 index html을 열고, 인터페이스를 검사합니다 식물을 클릭하면, 'e' 이벤트가 캡처되는 방식을 볼 수 있습니다 이벤트를 뜯어보면서 한 번의 포인터 다운 이벤트로 얼마나 많은 정보가 수집되는지 확인해보시기 바랍니다 다음으로 지역 변수 'pos3'과 'pos4'가 어떻게 e clientX 로 설정되어 있는 지 확인합니다 검사 창에서 e 값을 찾을 수 있습니다 이 값은 식물을 클릭하거나 터치하는 순간 식물의 x 와 y 좌표를 캡처합니다 식물을 클릭하고 드래그할 때 식물의 동작을 세밀하게 제어하여 좌표를 추적해야 합니다",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13384,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 7,
    "total_chunks": 14
  },
  {
    "id": "975b09c554bd32eb34ec99ddc55472e3",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "Terrarium 프로젝트 파트 3: DOM 조작과 클로저",
    "content": "어떻게 되나요 두 번째로는, 브라우저 창에서 index html을 열고, 인터페이스를 검사합니다 식물을 클릭하면, 'e' 이벤트가 캡처되는 방식을 볼 수 있습니다 이벤트를 뜯어보면서 한 번의 포인터 다운 이벤트로 얼마나 많은 정보가 수집되는지 확인해보시기 바랍니다 다음으로 지역 변수 'pos3'과 'pos4'가 어떻게 e clientX 로 설정되어 있는 지 확인합니다 검사 창에서 e 값을 찾을 수 있습니다 이 값은 식물을 클릭하거나 터치하는 순간 식물의 x 와 y 좌표를 캡처합니다 식물을 클릭하고 드래그할 때 식물의 동작을 세밀하게 제어하여 좌표를 추적해야 합니다✅ 하나의 앱이 하나의 큰 클로저로 만들어진 이유가 더 분명해지나요 아니라면, 14개의 드래그 가능한 식물을 어떻게 각각의 범위를 지킬까요 pos4 = e clientY 아래에 포인터 이벤트 조작을 2개 더 추가하여 함수 초기화를 완료합니다:\nhtml\ndocument onpointermove = elementDrag;\ndocument onpointerup = stopElementDrag;\n제 식물을 이동할 때 포인터와 함께 식물을 끌고, 식물 선택을 취소할 때 드래그 제스처를 중지하도록 지정합니다 onpointermove 와 onpointerup은 모두 onpointerdown과 동일한 API의 일부입니다",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13384,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 8,
    "total_chunks": 14
  },
  {
    "id": "23ff8af86b30a2149efc5e85672cf30c",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "Terrarium 프로젝트 파트 3: DOM 조작과 클로저",
    "content": "식물을 클릭하고 드래그할 때 식물의 동작을 세밀하게 제어하여 좌표를 추적해야 합니다✅ 하나의 앱이 하나의 큰 클로저로 만들어진 이유가 더 분명해지나요 아니라면, 14개의 드래그 가능한 식물을 어떻게 각각의 범위를 지킬까요 pos4 = e clientY 아래에 포인터 이벤트 조작을 2개 더 추가하여 함수 초기화를 완료합니다: html document onpointermove = elementDrag; document onpointerup = stopElementDrag; 제 식물을 이동할 때 포인터와 함께 식물을 끌고, 식물 선택을 취소할 때 드래그 제스처를 중지하도록 지정합니다 onpointermove 와 onpointerup은 모두 onpointerdown과 동일한 API의 일부입니다아직 elementDrag 및 stopElementDrag 함수를 정의하지 않아 인터페이스에서 오류가 발생하므로, 다음에 작성하십시오 elementDrag와 stopElementDrag 함수\n식물을 드래그하고 멈출 때 일어나는 일을 처리하는 두 내부 함수를 더 추가하여 클로저를 완료합니다 원하는 동작은 언제든지 식물을 드래그하여 화면의 아무 곳에 둘 수 있다는 것입니다 이 인터페이스는 식물을 추가, 제거 그리고 재배치하여 원하는대로 terrarium을 정확하게 디자인할 수 있도록 (예를 들어 drop zone이 없음)하는 것에 의견이 없습니다",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13384,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 9,
    "total_chunks": 14
  },
  {
    "id": "184e07d9af4c535a9a214baa79ea6b33",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "Terrarium 프로젝트 파트 3: DOM 조작과 클로저",
    "content": "선택을 취소할 때 드래그 제스처를 중지하도록 지정합니다 onpointermove 와 onpointerup은 모두 onpointerdown과 동일한 API의 일부입니다아직 elementDrag 및 stopElementDrag 함수를 정의하지 않아 인터페이스에서 오류가 발생하므로, 다음에 작성하십시오 elementDrag와 stopElementDrag 함수 식물을 드래그하고 멈출 때 일어나는 일을 처리하는 두 내부 함수를 더 추가하여 클로저를 완료합니다 원하는 동작은 언제든지 식물을 드래그하여 화면의 아무 곳에 둘 수 있다는 것입니다 이 인터페이스는 식물을 추가, 제거 그리고 재배치하여 원하는대로 terrarium을 정확하게 디자인할 수 있도록 (예를 들어 drop zone이 없음)하는 것에 의견이 없습니다작업\npointerDrag의 닫는 중괄호 바로 뒤에 elementDrag 함수를 추가합니다:\njavascript\nfunction elementDrag(e) {\npos1 = pos3 - e clientX;\npos2 = pos4 - e clientY;\npos3 = e clientX;\npos4 = e clientY;\nconsole log(pos1, pos2, pos3, pos4);\nterrariumElement style top = terrariumElement offsetTop - pos2 + 'px';\nterrariumElement style left = terrariumElement offsetLeft - pos1 + 'px';\n}\n이 함수에서는, 외부 함수에서 로컬 변수로 설정한 초기 위치 1-4를 많이 편집합니다 여기서 어떤 일이 일어나고 있습니까 드래그할 때, pos1을 현재 e clientX 값을 뺀 pos3(이전에e clientX로 설정)과 동일하게 만들어 pos1을 다시 할당합니다 pos2와 유사한 작업을 수행합니다",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13384,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 10,
    "total_chunks": 14
  },
  {
    "id": "79b4ea08154a615154910f1cb8564587",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "Terrarium 프로젝트 파트 3: DOM 조작과 클로저",
    "content": "= pos4 - e clientY; pos3 = e clientX; pos4 = e clientY; console log(pos1, pos2, pos3, pos4); terrariumElement style top = terrariumElement offsetTop - pos2 + 'px'; terrariumElement style left = terrariumElement offsetLeft - pos1 + 'px'; } 이 함수에서는, 외부 함수에서 로컬 변수로 설정한 초기 위치 1-4를 많이 편집합니다 여기서 어떤 일이 일어나고 있습니까 드래그할 때, pos1을 현재 e clientX 값을 뺀 pos3(이전에e clientX로 설정)과 동일하게 만들어 pos1을 다시 할당합니다 pos2와 유사한 작업을 수행합니다그런 뒤에, pos3과 pos4를 요소의 새로운 X 와 Y 좌표로 다시 설정합니다 드래그하면 콘솔에서 변경 사항을 볼 수 있습니다 그런 뒤에, 식물의 css 스타일을 조작하여 pos1과 pos2의 새로운 위치를 기반으로 위치를 설정하고, 오프셋을 이러한 새 위치와 비교하여 식물의 위쪽과 왼쪽 XY 좌표를 계산합니다 offsetTop과 offsetLeft는 상위 위치를 기준으로 요소의 위치를 설정하는 CSS 속성입니다 상위는 static으로 두지 않은 모든 요소가 될 수 있습니다 모든 위치 다시 계산하며 terrarium과 그 식물의 움직임을 미세하세 조정할 수 있습니다 작업\n인터페이스를 완성하기 위한 마지막 작업은 elementDrag의 닫는 중괄호 뒤에 closeElementDrag 함수를 추가하는 것입니다:\njavascript\nfunction stopElementDrag() {\ndocument onpointerup = null;\ndocument",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13384,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 11,
    "total_chunks": 14
  },
  {
    "id": "beb4113c49fb5dd4f8f72e66d6e8e549",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "Terrarium 프로젝트 파트 3: DOM 조작과 클로저",
    "content": "식물의 css 스타일을 조작하여 pos1과 pos2의 새로운 위치를 기반으로 위치를 설정하고, 오프셋을 이러한 새 위치와 비교하여 식물의 위쪽과 왼쪽 XY 좌표를 계산합니다 offsetTop과 offsetLeft는 상위 위치를 기준으로 요소의 위치를 설정하는 CSS 속성입니다 상위는 static으로 두지 않은 모든 요소가 될 수 있습니다 모든 위치 다시 계산하며 terrarium과 그 식물의 움직임을 미세하세 조정할 수 있습니다 작업 인터페이스를 완성하기 위한 마지막 작업은 elementDrag의 닫는 중괄호 뒤에 closeElementDrag 함수를 추가하는 것입니다: javascript function stopElementDrag() { document onpointerup = null; documentonpointermove = null;\n}\n이 작은 함수는 onpointerup과 onpointermove 이벤트를 다시 설정하므로 다시 드래그하여 식물의 진행 상황을 다시 시작하거나, 새 식물을 드래그할 수 있습니다 ✅ 이러한 이벤트를 null로 설정하지 않으면 어떻게 될까요 이제 프로젝트를 완료했습니다 🥇 축하합니다 아름다운 terrarium을 완성했습니다 🚀 도전\n클로저에 새로운 이벤트 핸들러를 추가하여 식물에 더 많은 일을 시킵니다 예를 들어, 식물을 더블 클릭하여 앞으로 가져옵니다 창의력을 발휘하십시오",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13384,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 455,
    "chunk_index": 12,
    "total_chunks": 14
  },
  {
    "id": "ada50e8baab273d86a4a7e5d8732b55a",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ko.md",
    "source_type": "git_repo",
    "title": "Terrarium 프로젝트 파트 3: DOM 조작과 클로저",
    "content": "닫는 중괄호 뒤에 closeElementDrag 함수를 추가하는 것입니다: javascript function stopElementDrag() { document onpointerup = null; documentonpointermove = null; } 이 작은 함수는 onpointerup과 onpointermove 이벤트를 다시 설정하므로 다시 드래그하여 식물의 진행 상황을 다시 시작하거나, 새 식물을 드래그할 수 있습니다 ✅ 이러한 이벤트를 null로 설정하지 않으면 어떻게 될까요 이제 프로젝트를 완료했습니다 🥇 축하합니다 아름다운 terrarium을 완성했습니다 🚀 도전 클로저에 새로운 이벤트 핸들러를 추가하여 식물에 더 많은 일을 시킵니다 예를 들어, 식물을 더블 클릭하여 앞으로 가져옵니다 창의력을 발휘하십시오강의 후 퀴즈\nPost-lecture quiz\n리뷰 & 자기주도 학습\n화면에서 요소를 드래그하는 것은 사소한 것처럼 보이지만, 원하는 효과에 따라 여러 가지 방식과 함정이 있습니다 실제로, 시도할 수 있는 전체 drag and drop API가 있습니다 우리가 원하는 효과가 다소 다르기 때문에 이 모듈에서는 사용하지 않았지만, 그러나 이 API를 자신의 프로젝트에서 시도해보고 얻을 수 있는 게 무엇인지 확인하시기 바랍니다 포인터 이벤트에 대한 자세한 내용은 W3C docs와 MDN web docs에서 확인하세요 항상 CanIUse com으로 브라우저 기능을 확인하십시오 과제\nWork a bit more with the DOM",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13384,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ko.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 13,
    "total_chunks": 14
  },
  {
    "id": "de9c1284e4791f28245eed6c5250dab3",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ms.md",
    "source_type": "git_repo",
    "title": "Projek Terrarium Bahagian 3: Memanipulasi DOM dan Penutupan",
    "content": "Projek Terrarium Bahagian 3: Memanipulasi DOM dan Penutupan\nSketchnote karya Tomomi Imura\nKuiz Pra Kuliah\nKuiz Pra Kuliah\nPengenalan\nMemanipulasi DOM, atau \"Document Object Model\", adalah aspek penting dalam pengembangan web Menurut MDN, \"Document Object Model (DOM) adalah representasi data dari objek yang terdiri dari struktur dan kandungan dokumen di web \" Cabaran di sekitar manipulasi DOM di web sering menjadi dorongan di belakang menggunakan kerangka kerja JavaScript dan bukannya JavaScript vanila untuk menguruskan DOM, tetapi kami akan menguruskannya sendiri Selain itu, pelajaran ini akan memperkenalkan idea Penutupan JavaScript, yang dapat anda fikirkan sebagai fungsi yang dilampirkan oleh yang lain berfungsi sehingga fungsi dalaman mempunyai akses ke ruang fungsi scope luar Penutupan JavaScript adalah topik yang luas dan kompleks Pelajaran ini menyentuh idea paling asas bahawa dalam kod terarium ini, anda akan menemui penutup: fungsi dalaman dan fungsi luar yang dibina dengan cara yang membolehkan fungsi dalaman mengakses ke ruang lingkup fungsi luar Untuk lebih banyak maklumat mengenai cara ini berfungsi, sila lawati dokumentasi yang luas Kami akan menggunakan penutup untuk memanipulasi DOM Fikirkan DOM sebagai pokok, mewakili semua cara dokumen laman web dapat dimanipulasi Berbagai API (Interface Program Aplikasi) telah ditulis sehingga pengaturcara, menggunakan bahasa pilihan program mereka, dapat mengakses DOM dan mengedit, mengubah, menyusun semula, dan sebaliknya mengaturnya Perwakilan DOM dan markup HTML yang merujuknya Oleh Olfa Nasraoui\nDalam pelajaran ini, kami akan menyelesaikan projek terarium interaktif kami dengan membuat JavaScript yang akan membolehkan pengguna memanipulasi tanaman di halaman",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13571,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ms.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 0,
    "total_chunks": 10
  },
  {
    "id": "a83a9409654d6f81bbeed59cf9f1d10b",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ms.md",
    "source_type": "git_repo",
    "title": "Projek Terrarium Bahagian 3: Memanipulasi DOM dan Penutupan",
    "content": "luas Kami akan menggunakan penutup untuk memanipulasi DOM Fikirkan DOM sebagai pokok, mewakili semua cara dokumen laman web dapat dimanipulasi Berbagai API (Interface Program Aplikasi) telah ditulis sehingga pengaturcara, menggunakan bahasa pilihan program mereka, dapat mengakses DOM dan mengedit, mengubah, menyusun semula, dan sebaliknya mengaturnya Perwakilan DOM dan markup HTML yang merujuknya Oleh Olfa Nasraoui Dalam pelajaran ini, kami akan menyelesaikan projek terarium interaktif kami dengan membuat JavaScript yang akan membolehkan pengguna memanipulasi tanaman di halamanPrasyarat\nAnda harus mempunyai HTML dan CSS untuk terarium anda Pada akhir pelajaran ini, anda akan dapat memindahkan tanaman ke dalam dan keluar dari terarium dengan menyeretnya Tugas\nDalam folder terarium anda, buat fail baru yang disebut script js Import fail itu di bahagian <head>:\nhtml\n<script src=\" /script js\" defer></script>\n> Catatan: gunakan defer ketika mengimpor file JavaScript eksternal ke dalam file html sehingga memungkinkan JavaScript dijalankan hanya setelah file HTML dimuat sepenuhnya Anda juga boleh menggunakan atribut async, yang membolehkan skrip dijalankan semasa fail HTML dihuraikan, tetapi dalam kes kami, penting untuk memiliki elemen HTML sepenuhnya tersedia untuk menyeret sebelum kami membiarkan skrip seret dijalankan Elemen DOM\nPerkara pertama yang perlu anda lakukan ialah membuat rujukan pada elemen yang ingin anda manipulasi dalam DOM Dalam kes kami, mereka adalah 14 tanaman yang sedang menunggu di bar sisi Tugas\nhtml\ndragElement(document getElementById('plant1'));\ndragElement(document getElementById('plant2'));\ndragElement(document getElementById('plant3'));\ndragElement(document getElementById('plant4'));\ndragElement(document getElementById('plant5'));\ndragElement(document getElementById('plant6'));\ndragElement(document getElementById('plant7'));\ndragElement(document getElementById('plant8'));\ndragElement(document getElementById('plant9'));\ndragElement(document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13571,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ms.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 10
  },
  {
    "id": "1194f1ad355388900510d57892617571",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ms.md",
    "source_type": "git_repo",
    "title": "Projek Terrarium Bahagian 3: Memanipulasi DOM dan Penutupan",
    "content": "semasa fail HTML dihuraikan, tetapi dalam kes kami, penting untuk memiliki elemen HTML sepenuhnya tersedia untuk menyeret sebelum kami membiarkan skrip seret dijalankan Elemen DOM Perkara pertama yang perlu anda lakukan ialah membuat rujukan pada elemen yang ingin anda manipulasi dalam DOM Dalam kes kami, mereka adalah 14 tanaman yang sedang menunggu di bar sisi Tugas html dragElement(document getElementById('plant1')); dragElement(document getElementById('plant2')); dragElement(document getElementById('plant3')); dragElement(document getElementById('plant4')); dragElement(document getElementById('plant5')); dragElement(document getElementById('plant6')); dragElement(document getElementById('plant7')); dragElement(document getElementById('plant8')); dragElement(document getElementById('plant9')); dragElement(documentgetElementById('plant10'));\ndragElement(document getElementById('plant11'));\ndragElement(document getElementById('plant12'));\ndragElement(document getElementById('plant13'));\ndragElement(document getElementById('plant14'));\nApa yang berlaku di sini Anda merujuk dokumen dan mencari melalui DOM untuk mencari elemen dengan Id tertentu Masih ingat pada pelajaran pertama mengenai HTML bahawa anda memberikan Id individu untuk setiap gambar tumbuhan (id=\" plant1\") Sekarang anda akan menggunakan usaha itu Setelah mengenal pasti setiap elemen, anda meneruskan item tersebut ke fungsi yang disebut dragElement yang akan anda bina dalam satu minit Oleh itu, elemen dalam HTML kini diaktifkan seret, atau tidak lama lagi ✅ Mengapakah kita merujuk elemen dengan Id Mengapa tidak oleh kelas CSS mereka Anda mungkin merujuk kepada pelajaran CSS sebelumnya untuk menjawab soalan ini Penutupan\nSekarang anda sudah bersedia untuk membuat penutupan dragElement, yang merupakan fungsi luar yang merangkumi fungsi atau fungsi dalaman (dalam kes kita, kita akan mempunyai tiga) Penutupan berguna apabila satu atau lebih fungsi perlu memasuki ruang lingkup fungsi luar",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13571,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ms.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 2,
    "total_chunks": 10
  },
  {
    "id": "e71dbc57b0b1be6e0f7dffb857ae0c65",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ms.md",
    "source_type": "git_repo",
    "title": "Projek Terrarium Bahagian 3: Memanipulasi DOM dan Penutupan",
    "content": "minit Oleh itu, elemen dalam HTML kini diaktifkan seret, atau tidak lama lagi ✅ Mengapakah kita merujuk elemen dengan Id Mengapa tidak oleh kelas CSS mereka Anda mungkin merujuk kepada pelajaran CSS sebelumnya untuk menjawab soalan ini Penutupan Sekarang anda sudah bersedia untuk membuat penutupan dragElement, yang merupakan fungsi luar yang merangkumi fungsi atau fungsi dalaman (dalam kes kita, kita akan mempunyai tiga) Penutupan berguna apabila satu atau lebih fungsi perlu memasuki ruang lingkup fungsi luarInilah contohnya:\njavascript\nfunction displayCandy(){\nlet candy = ['jellybeans'];\nfunction addCandy(candyType) {\ncandy push(candyType)\n}\naddCandy('gumdrops');\n}\ndisplayCandy();\nconsole log(candy)\nDalam contoh ini, fungsi displayCandy mengelilingi fungsi yang mendorong jenis permen baru ke dalam array yang sudah ada dalam fungsi tersebut Sekiranya anda menjalankan kod ini, array candy tidak akan ditentukan, kerana ini adalah pemboleh ubah tempatan (tempatan hingga penutupan) ✅ Bagaimanakah anda boleh membuat array candy dapat diakses Cuba gerakkannya di luar penutup Dengan cara ini, susunan menjadi global, dan bukannya hanya tersedia untuk skop tempatan penutupan Tugas\nDi bawah deklarasi elemen dalam script js, buat fungsi:\njavascript\nfunction dragElement(terrariumElement) {\n//tetapkan 4 kedudukan untuk penentuan kedudukan di skrin\nlet pos1 = 0,\npos2 = 0,\npos3 = 0,\npos4 = 0;\nterrariumElement onpointerdown = pointerDrag;\n}\ndragElement dapatkan objekterrariumElement dari pernyataan di bahagian atas skrip Kemudian, anda menetapkan beberapa kedudukan tempatan pada 0 untuk objek yang dilewatkan ke dalam fungsi",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13571,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ms.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 3,
    "total_chunks": 10
  },
  {
    "id": "c2c21ba47ffc6868145a484c5e809571",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ms.md",
    "source_type": "git_repo",
    "title": "Projek Terrarium Bahagian 3: Memanipulasi DOM dan Penutupan",
    "content": "ini, susunan menjadi global, dan bukannya hanya tersedia untuk skop tempatan penutupan Tugas Di bawah deklarasi elemen dalam script js, buat fungsi: javascript function dragElement(terrariumElement) { //tetapkan 4 kedudukan untuk penentuan kedudukan di skrin let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0; terrariumElement onpointerdown = pointerDrag; } dragElement dapatkan objekterrariumElement dari pernyataan di bahagian atas skrip Kemudian, anda menetapkan beberapa kedudukan tempatan pada 0 untuk objek yang dilewatkan ke dalam fungsiIni adalah pemboleh ubah tempatan yang akan dimanipulasi untuk setiap elemen semasa anda menambahkan fungsi seret dan lepas dalam penutupan ke setiap elemen Terarium akan dihuni oleh unsur-unsur yang diseret ini, jadi aplikasinya perlu memantau lokasi mereka ditempatkan Selain itu, elemen terarium yang diteruskan ke fungsi ini diberikan acara pointerdown, yang merupakan sebahagian dari web API yang dirancang untuk membantu pengurusan DOM onpointerdown menyala apabila butang ditekan, atau dalam kes kita, elemen yang boleh diseret disentuh Pengendali acara ini berfungsi pada penyemak imbas web dan mudah alih, dengan beberapa pengecualian ✅ Pengendali acara (event handler) onclick mempunyai sokongan penyemak imbas yang lebih banyak; mengapa anda tidak menggunakannya di sini Fikirkan jenis interaksi skrin yang tepat yang ingin anda buat di sini Fungsi Pointerdrag\nTerariumElement siap diseret; apabila peristiwa onpointerdown dipecat, fungsi pointerDrag dipanggil Tambahkan fungsi itu tepat di bawah baris ini: terrariumElement onpointerdown = pointerDrag;:\nTugas\njavascript\nfunction pointerDrag(e) {\ne preventDefault();\nconsole log(e);\npos3 = e clientX;\npos4 = e clientY;\n}\nBeberapa perkara berlaku",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13571,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ms.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 4,
    "total_chunks": 10
  },
  {
    "id": "97ed5543bf3e57122aa3a45fe011b6dc",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ms.md",
    "source_type": "git_repo",
    "title": "Projek Terrarium Bahagian 3: Memanipulasi DOM dan Penutupan",
    "content": "✅ Pengendali acara (event handler) onclick mempunyai sokongan penyemak imbas yang lebih banyak; mengapa anda tidak menggunakannya di sini Fikirkan jenis interaksi skrin yang tepat yang ingin anda buat di sini Fungsi Pointerdrag TerariumElement siap diseret; apabila peristiwa onpointerdown dipecat, fungsi pointerDrag dipanggil Tambahkan fungsi itu tepat di bawah baris ini: terrariumElement onpointerdown = pointerDrag;: Tugas javascript function pointerDrag(e) { e preventDefault(); console log(e); pos3 = e clientX; pos4 = e clientY; } Beberapa perkara berlakuPertama, anda mencegah kejadian lalai yang biasanya berlaku pada pointerdown tidak berlaku dengan menggunakan e preventDefault (); Dengan cara ini anda mempunyai lebih banyak kawalan terhadap tingkah laku antara muka Kembali ke baris ini apabila anda telah membina fail skrip sepenuhnya dan mencubanya tanpa e preventDefault () - apa yang berlaku Kedua, buka index html di tetingkap penyemak imbas, dan periksa antara muka Apabila anda mengklik kilang, anda dapat melihat bagaimana peristiwa 'e' ditangkap Gali acara untuk melihat berapa banyak maklumat yang dikumpulkan oleh satu acara penunjuk ke bawah Seterusnya, perhatikan bagaimana pemboleh ubah tempatan pos3 danpos4 ditetapkan ke e clientX Anda boleh mendapatkan nilai e di panel pemeriksaan Nilai-nilai ini menangkap koordinat x dan y loji pada saat anda mengklik atau menyentuhnya Anda memerlukan kawalan yang terperinci terhadap tingkah laku tanaman semasa anda mengklik dan menyeretnya, jadi anda terus mengawasi koordinatnya ✅ Adakah semakin jelas mengapa keseluruhan aplikasi ini dibina dengan satu penutupan besar",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13571,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ms.md",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 5,
    "total_chunks": 10
  },
  {
    "id": "dbfd1540ac4ffb99d3815178a37d5e12",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ms.md",
    "source_type": "git_repo",
    "title": "Projek Terrarium Bahagian 3: Memanipulasi DOM dan Penutupan",
    "content": "banyak maklumat yang dikumpulkan oleh satu acara penunjuk ke bawah Seterusnya, perhatikan bagaimana pemboleh ubah tempatan pos3 danpos4 ditetapkan ke e clientX Anda boleh mendapatkan nilai e di panel pemeriksaan Nilai-nilai ini menangkap koordinat x dan y loji pada saat anda mengklik atau menyentuhnya Anda memerlukan kawalan yang terperinci terhadap tingkah laku tanaman semasa anda mengklik dan menyeretnya, jadi anda terus mengawasi koordinatnya ✅ Adakah semakin jelas mengapa keseluruhan aplikasi ini dibina dengan satu penutupan besarSekiranya tidak, bagaimana anda mengekalkan ruang lingkup bagi setiap 14 tumbuhan yang boleh diseret Selesaikan fungsi awal dengan menambahkan dua lagi manipulasi peristiwa penunjuk di bawah pos4 = e clientY:\nhtml\ndocument onpointermove = elementDrag;\ndocument onpointerup = stopElementDrag;\nSekarang anda menunjukkan bahawa anda mahu kilang diseret bersama-sama dengan penunjuk semasa anda menggerakkannya, dan agar gerakan seret berhenti ketika anda membatalkan pilihan kilang onpointermove danonpointerup adalah semua bahagian dari API yang sama dengan onpointerdown Antaramuka akan membuang ralat sekarang kerana anda belum menentukan fungsi elementDrag danstopElementDrag, jadi bina yang seterusnya Fungsi elementDrag dan stopElementDrag\nAnda akan menyelesaikan penutupan anda dengan menambahkan dua fungsi dalaman yang akan menangani apa yang berlaku semasa anda menyeret kilang dan berhenti menyeretnya Tingkah laku yang anda mahukan ialah anda boleh menyeret mana-mana tanaman pada bila-bila masa dan meletakkannya di mana sahaja di skrin",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13571,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ms.md",
      "source_type": "git_repo"
    },
    "token_count": 457,
    "chunk_index": 6,
    "total_chunks": 10
  },
  {
    "id": "c4b4f789c10968ee6a46a239b1b93b62",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ms.md",
    "source_type": "git_repo",
    "title": "Projek Terrarium Bahagian 3: Memanipulasi DOM dan Penutupan",
    "content": "kilang onpointermove danonpointerup adalah semua bahagian dari API yang sama dengan onpointerdown Antaramuka akan membuang ralat sekarang kerana anda belum menentukan fungsi elementDrag danstopElementDrag, jadi bina yang seterusnya Fungsi elementDrag dan stopElementDrag Anda akan menyelesaikan penutupan anda dengan menambahkan dua fungsi dalaman yang akan menangani apa yang berlaku semasa anda menyeret kilang dan berhenti menyeretnya Tingkah laku yang anda mahukan ialah anda boleh menyeret mana-mana tanaman pada bila-bila masa dan meletakkannya di mana sahaja di skrinAntaramuka ini agak tidak diingini (tidak ada zon penurunan) untuk membolehkan anda merancang terarium anda dengan tepat seperti yang anda suka dengan menambah, membuang, dan memasang semula tanaman Tugas\nTambahkan fungsi elementDrag tepat setelah pendakap keriting penutuppointerDrag:\njavascript\nfunction elementDrag(e) {\npos1 = pos3 - e clientX;\npos2 = pos4 - e clientY;\npos3 = e clientX;\npos4 = e clientY;\nconsole log(pos1, pos2, pos3, pos4);\nterrariumElement style top = terrariumElement offsetTop - pos2 + 'px';\nterrariumElement style left = terrariumElement offsetLeft - pos1 + 'px';\n}\nDalam fungsi ini, anda melakukan banyak pengeditan pada posisi awal 1-4 yang anda tetapkan sebagai pemboleh ubah tempatan dalam fungsi luar Apa yang berlaku di sini Semasa anda menyeret, anda menetapkan semula pos1 dengan menjadikannya sama denganpos3 (yang anda tetapkan lebih awal sebagai e clientX) tolak nilai e clientX semasa Anda melakukan operasi yang serupa dengan pos2 Kemudian, anda menetapkan semula pos3 dan pos4 ke koordinat X dan Y elemen yang baru Anda boleh melihat perubahan ini di konsol semasa anda menyeret",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13571,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ms.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 7,
    "total_chunks": 10
  },
  {
    "id": "4f7ccf4e2fc1f832eb12758f1b137b83",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ms.md",
    "source_type": "git_repo",
    "title": "Projek Terrarium Bahagian 3: Memanipulasi DOM dan Penutupan",
    "content": "pengeditan pada posisi awal 1-4 yang anda tetapkan sebagai pemboleh ubah tempatan dalam fungsi luar Apa yang berlaku di sini Semasa anda menyeret, anda menetapkan semula pos1 dengan menjadikannya sama denganpos3 (yang anda tetapkan lebih awal sebagai e clientX) tolak nilai e clientX semasa Anda melakukan operasi yang serupa dengan pos2 Kemudian, anda menetapkan semula pos3 dan pos4 ke koordinat X dan Y elemen yang baru Anda boleh melihat perubahan ini di konsol semasa anda menyeretKemudian, anda memanipulasi gaya css kilang untuk menetapkan kedudukan barunya berdasarkan kedudukan baru pos1 danpos2, mengira koordinat X dan Y bahagian atas dan kiri kilang berdasarkan membandingkan ofsetnya dengan kedudukan baru ini offsetTop danoffsetLeft adalah sifat CSS yang menetapkan kedudukan elemen berdasarkan kedudukan induknya; induknya boleh menjadi unsur apa pun yang tidak diposisikan sebagai statik Semua pengiraan semula kedudukan ini membolehkan anda menyesuaikan tingkah laku terarium dan tanamannya Tugas\nTugas terakhir untuk melengkapkan antara muka adalah dengan menambahkan fungsi stopElementDrag setelah pendakap keritingelementDrag:\njavascript\nfunction stopElementDrag() {\ndocument onpointerup = null;\ndocument onpointermove = null;\n}\nFungsi kecil ini menetapkan semula peristiwa onpointerup dan onpointermove sehingga anda dapat memulakan semula kemajuan tanaman anda dengan mula menyeretnya lagi, atau mula menyeret loji baru ✅ Apakah yang berlaku jika anda tidak menetapkan peristiwa ini menjadi null Sekarang anda telah menyelesaikan projek anda 🥇 Tahniah Anda telah menyelesaikan terarium yang indah",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13571,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ms.md",
      "source_type": "git_repo"
    },
    "token_count": 456,
    "chunk_index": 8,
    "total_chunks": 10
  },
  {
    "id": "d2acd7bab72453124ff89986be36830b",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ms.md",
    "source_type": "git_repo",
    "title": "Projek Terrarium Bahagian 3: Memanipulasi DOM dan Penutupan",
    "content": "melengkapkan antara muka adalah dengan menambahkan fungsi stopElementDrag setelah pendakap keritingelementDrag: javascript function stopElementDrag() { document onpointerup = null; document onpointermove = null; } Fungsi kecil ini menetapkan semula peristiwa onpointerup dan onpointermove sehingga anda dapat memulakan semula kemajuan tanaman anda dengan mula menyeretnya lagi, atau mula menyeret loji baru ✅ Apakah yang berlaku jika anda tidak menetapkan peristiwa ini menjadi null Sekarang anda telah menyelesaikan projek anda 🥇 Tahniah Anda telah menyelesaikan terarium yang indah🚀Cabaran\nTambahkan pengendali acara (event handler) baharu ke penutupan anda untuk melakukan sesuatu yang lebih banyak pada tanaman; contohnya, klik dua kali loji untuk membawanya ke hadapan Dapatkan kreatif Kuiz Pasca Kuliah\nKuiz Pasca Kuliah\nMengkaji & Belajar Sendiri\nWalaupun menyeret elemen di sekitar skrin kelihatan remeh, ada banyak cara untuk melakukan ini dan banyak perangkap, bergantung pada kesan yang anda cari Sebenarnya, terdapat keseluruhan [drag and drop API] (https://developer mozilla org/docs/Web/API/HTML_Drag_and_Drop_API) yang boleh anda cuba Kami tidak menggunakannya dalam modul ini kerana kesan yang kami mahukan agak berbeza, tetapi cuba API ini pada projek anda sendiri dan lihat apa yang boleh anda capai Dapatkan lebih banyak maklumat mengenai peristiwa penunjuk pada dokumen W3C dan di dokumen web MDN Sentiasa periksa keupayaan penyemak imbas menggunakan CanIUse com Tugasan\nBekerja sedikit dengan DOM",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13571,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ms.md",
      "source_type": "git_repo"
    },
    "token_count": 430,
    "chunk_index": 9,
    "total_chunks": 10
  },
  {
    "id": "81ea9067e54878d6f06f7168d0ab221e",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.pt.md",
    "source_type": "git_repo",
    "title": "Projeto Terrarium Parte 3:  Manipulação do DOM e fechamento",
    "content": "Projeto Terrarium Parte 3:  Manipulação do DOM e fechamento\nEsboço de Tomomi Imura\nQuiz pré-leitura\nQuiz pré-leitura\nIntrodução\nManipular o DOM, ou o \"Modelo de objeto de documento\", é um aspecto chave do desenvolvimento web Segundo MDN, \"O DOM (Document Object Model) é a representação de dados dos objetos que compõem a estrutura e o conteúdo de um documento na Web \" Os desafios em torno da manipulação do DOM na web, muitas vezes tem sido o ímpeto por trás do uso de frameworks JavaScript em vez de JavaScript vanilla para gerenciar o DOM, mas vamos gerenciar por conta própria Além disso, essa lição apresentará a ideia de um closure(encerramento) de JavaScript, que você pode considerar como uma função delimitada por outra função, de modo que a função interna tenha acesso ao escopo da função externa Os closures (fechamentos) de JavaScript são um tópico vasto e complexo Esta lição toca na ideia mais básica de que no código deste terrário, você encontrará um closure: uma função interna e uma função externa construída de forma a permitir que a função interna acesse o escopo da função externa Para obter mais informações sobre como isso funciona, visite a extensa documentação Usaremos um closure para manipular o DOM Pense no DOM como uma árvore, representando todas as maneiras como um documento de página da web pode ser manipulado Várias APIs (interfaces de programa de aplicativo) foram escritas para que os programadores, usando sua linguagem de programação de escolha, possam acessar o DOM e editar, alterar, reorganizar e de outra forma gerenciá-lo Uma representação do DOM e a marcação HTML que faz referência a ele De Olfa Nasraoui\nNesta lição, concluiremos nosso projeto de terrário interativo criando o JavaScript que permitirá ao usuário manipular as plantas na página Pré-requisitos\nVocê deve ter construído o HTML e CSS para o seu terrário Ao final desta lição, você será capaz de mover as plantas para dentro e para fora do terrário arrastando-as",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13757,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.pt.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 8
  },
  {
    "id": "296e47852bd1afc8d52c880a0470267a",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.pt.md",
    "source_type": "git_repo",
    "title": "Projeto Terrarium Parte 3:  Manipulação do DOM e fechamento",
    "content": "editar, alterar, reorganizar e de outra forma gerenciá-lo Uma representação do DOM e a marcação HTML que faz referência a ele De Olfa Nasraoui Nesta lição, concluiremos nosso projeto de terrário interativo criando o JavaScript que permitirá ao usuário manipular as plantas na página Pré-requisitos Você deve ter construído o HTML e CSS para o seu terrário Ao final desta lição, você será capaz de mover as plantas para dentro e para fora do terrário arrastando-asTarefa\nNa pasta do seu terrário, crie um novo arquivo chamado script js Importe esse arquivo na seção <head>:\nhtml\n<script src=\" /script js\" defer></script>\nNota: use defer ao importar um arquivo JavaScript externo para o arquivo html, de modo a permitir que o JavaScript seja executado somente depois que o arquivo HTML tiver sido totalmente carregado Você também pode usar o atributo async, que permite que o script seja executado enquanto o arquivo HTML está sendo analisado, mas, em nosso caso, é importante ter os elementos HTML totalmente disponíveis para arrastar antes de permitir que o script de arrastar seja executado Os elementos DOM\nA primeira coisa que você precisa fazer é criar referências aos elementos que deseja manipular no DOM No nosso caso, são as 14 plantas que aguardam atualmente nas barras laterais Tarefa\nhtml\ndragElement(document getElementById('plant1'));\ndragElement(document getElementById('plant2'));\ndragElement(document getElementById('plant3'));\ndragElement(document getElementById('plant4'));\ndragElement(document getElementById('plant5'));\ndragElement(document getElementById('plant6'));\ndragElement(document getElementById('plant7'));\ndragElement(document getElementById('plant8'));\ndragElement(document getElementById('plant9'));\ndragElement(document getElementById('plant10'));\ndragElement(document getElementById('plant11'));\ndragElement(document getElementById('plant12'));\ndragElement(document getElementById('plant13'));\ndragElement(document getElementById('plant14'));\nO que está acontecendo aqui Você está referenciando o documento e olhando através de seu DOM para encontrar um elemento com um Id específico Lembra na primeira lição sobre HTML que você deu Ids individuais para cada imagem de planta (id = \"plant1\")",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13757,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.pt.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 8
  },
  {
    "id": "ae6d9a6218b04105ad2b5386188f6d63",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.pt.md",
    "source_type": "git_repo",
    "title": "Projeto Terrarium Parte 3:  Manipulação do DOM e fechamento",
    "content": "nas barras laterais Tarefa html dragElement(document getElementById('plant1')); dragElement(document getElementById('plant2')); dragElement(document getElementById('plant3')); dragElement(document getElementById('plant4')); dragElement(document getElementById('plant5')); dragElement(document getElementById('plant6')); dragElement(document getElementById('plant7')); dragElement(document getElementById('plant8')); dragElement(document getElementById('plant9')); dragElement(document getElementById('plant10')); dragElement(document getElementById('plant11')); dragElement(document getElementById('plant12')); dragElement(document getElementById('plant13')); dragElement(document getElementById('plant14')); O que está acontecendo aqui Você está referenciando o documento e olhando através de seu DOM para encontrar um elemento com um Id específico Lembra na primeira lição sobre HTML que você deu Ids individuais para cada imagem de planta (id = \"plant1\")Agora você fará uso disso Depois de identificar cada elemento, você passa esse item para uma função chamada dragElement que construirá em um minuto Portanto, o elemento no HTML agora está ativado para arrastar, ou será em breve ✅ Por que referenciamos elementos por Id Por que não por sua classe CSS Você pode consultar a lição anterior sobre CSS para responder a esta pergunta O Closure(fechamento)\nAgora você está pronto para criar o closure(fechamento) dragElement, que é uma função externa que inclui uma função ou funções internas (em nosso caso, teremos três) Os closures(fechamentos) são úteis quando uma ou mais funções precisam acessar o escopo de uma função externa Aqui está um exemplo:\njavascript\nfunction mostrarDoce(){\nlet doce = ['jujubas'];\nfunction adicionarDoce(tipoDeDoce) {\ndoce push(tipoDeDoce)\n}\nadicionarDoce('gomas');\n}\nmostrarDoce();\nconsole log(doce)\nNeste exemplo, a função mostrarDoce envolve uma função que coloca um novo tipo de doce em uma matriz que já existe na função Se você executasse este código, o array doce seria indefinido, pois é uma variável local (local para o fechamento) ✅ Como você pode tornar o conjunto de doces acessível",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13757,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.pt.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 2,
    "total_chunks": 8
  },
  {
    "id": "3e312b03222c13f719f736e6f5d07569",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.pt.md",
    "source_type": "git_repo",
    "title": "Projeto Terrarium Parte 3:  Manipulação do DOM e fechamento",
    "content": "função externa Aqui está um exemplo: javascript function mostrarDoce(){ let doce = ['jujubas']; function adicionarDoce(tipoDeDoce) { doce push(tipoDeDoce) } adicionarDoce('gomas'); } mostrarDoce(); console log(doce) Neste exemplo, a função mostrarDoce envolve uma função que coloca um novo tipo de doce em uma matriz que já existe na função Se você executasse este código, o array doce seria indefinido, pois é uma variável local (local para o fechamento) ✅ Como você pode tornar o conjunto de doces acessívelTente movê-lo para fora do fechamento Dessa forma, o array torna-se global, ao invés de ficar disponível apenas para o escopo local do fechamento Tarefa\nNas declarações de elemento em script js, crie uma função:\njavascript\nfunction dragElement(terrariumElement) {\n//definir 4 posições para posicionamento na tela\nlet pos1 = 0,\npos2 = 0,\npos3 = 0,\npos4 = 0;\nterrariumElement onpointerdown = pointerDrag;\n}\ndragElement obtém seu objeto terrariumElement das declarações na parte superior do script Em seguida, você define algumas posições locais em 0 para o objeto passado para a função Essas são as variáveis ​​locais que serão manipuladas para cada elemento à medida que você adiciona a funcionalidade de arrastar e soltar no fechamento de cada elemento O terrário será preenchido por esses elementos arrastados, então o aplicativo precisa manter o controle de onde eles são colocados Além disso, o terrariumElement que é passado para essa função é atribuído a um evento pointerdown, que faz parte das APIs da web projetadas para ajudar no gerenciamento de DOM Onpointerdown dispara quando um botão é pressionado ou, em nosso caso, um elemento arrastável é tocado Este manipulador de eventos funciona em navegadores web e mobile, com algumas exceções ✅ O manipulador de eventos onclick tem muito mais suporte para vários navegadores; por que você não usaria aqui",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13757,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.pt.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 3,
    "total_chunks": 8
  },
  {
    "id": "bcc4f4531c9fc7a70ddb936352977efc",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.pt.md",
    "source_type": "git_repo",
    "title": "Projeto Terrarium Parte 3:  Manipulação do DOM e fechamento",
    "content": "o terrariumElement que é passado para essa função é atribuído a um evento pointerdown, que faz parte das APIs da web projetadas para ajudar no gerenciamento de DOM Onpointerdown dispara quando um botão é pressionado ou, em nosso caso, um elemento arrastável é tocado Este manipulador de eventos funciona em navegadores web e mobile, com algumas exceções ✅ O manipulador de eventos onclick tem muito mais suporte para vários navegadores; por que você não usaria aquiPense no tipo exato de interação de tela que você está tentando criar aqui A função Pointerdrag\nO terrariumElement está pronto para ser arrastado; quando o evento onpointerdown é disparado, a função pointerDrag é chamada Adicione essa função logo abaixo desta linha: terrariumElement onpointerdown = pointerDrag;:\nTarefa\njavascript\nfunction pointerDrag(e) {\ne preventDefault();\nconsole log(e);\npos3 = e clientX;\npos4 = e clientY;\n}\nVárias coisas acontecem Primeiro, você evita que os eventos padrão que normalmente acontecem em pointerdown ocorram usando e preventDefault (); Dessa forma, você tem mais controle sobre o comportamento da interface Volte a esta linha quando tiver criado o arquivo de script completamente e tente sem e preventDefault() - o que acontece Em segundo lugar, abra index html em uma janela do navegador e inspecione a interface Ao clicar em uma planta, você pode ver como o evento 'e' é capturado Explore o evento para ver quanta informação é coletada por um evento de ponteiro para baixo A seguir, observe como as variáveis ​​locais pos3 e pos4 são definidas como e clientX Você pode encontrar os valores e  no painel de inspeção Esses valores capturam as coordenadas xey da planta no momento em que você clica ou toca nela Você precisará de um controle refinado sobre o comportamento das plantas ao clicar e arrastá-las, para manter o controle de suas coordenadas ✅ Está ficando mais claro por que todo esse aplicativo é construído com um grande fechamento",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13757,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.pt.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 4,
    "total_chunks": 8
  },
  {
    "id": "1179243b971fc82e90aacab5a146c370",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.pt.md",
    "source_type": "git_repo",
    "title": "Projeto Terrarium Parte 3:  Manipulação do DOM e fechamento",
    "content": "as variáveis ​​locais pos3 e pos4 são definidas como e clientX Você pode encontrar os valores e no painel de inspeção Esses valores capturam as coordenadas xey da planta no momento em que você clica ou toca nela Você precisará de um controle refinado sobre o comportamento das plantas ao clicar e arrastá-las, para manter o controle de suas coordenadas ✅ Está ficando mais claro por que todo esse aplicativo é construído com um grande fechamentoSe não fosse, como você manteria o escopo para cada uma das 14 plantas arrastáveis Conclua a função inicial adicionando mais duas manipulações de eventos de ponteiro em pos4 = e clientY:\nhtml\ndocument onpointermove = elementDrag;\ndocument onpointerup = stopElementDrag;\nAgora você está indicando que deseja que a planta seja arrastada junto com o ponteiro conforme você a move e que o gesto de arrastar pare quando você desmarcar a planta onpointermove e onpointerup são partes da mesma API que onpointerdown A interface lançará erros agora, pois você ainda não definiu as funções elementDrag e stopElementDrag, então crie-as a seguir As funções elementDrag e stopElementDrag\nVocê completará seu fechamento adicionando mais duas funções internas que irão lidar com o que acontece quando você arrasta uma planta e para de arrastá-la O comportamento que você deseja é que você possa arrastar qualquer planta a qualquer momento e colocá-la em qualquer lugar da tela Esta interface é bastante neutra (não há zona de queda, por exemplo) para permitir que você projete seu terrário exatamente como você gosta, adicionando, removendo e reposicionando plantas Tarefa\nAdicione a função elementDrag logo após a chave de fechamento de pointerDrag:\njavascript\nfunction elementDrag(e) {\npos1 = pos3 - e clientX;\npos2 = pos4 - e clientY;\npos3 = e clientX;\npos4 = e clientY;\nconsole log(pos1, pos2, pos3, pos4);\nterrariumElement style top = terrariumElement offsetTop - pos2 + 'px';\nterrariumElement style",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13757,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.pt.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 5,
    "total_chunks": 8
  },
  {
    "id": "384f3634036620e2250b5bf3b67efc94",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.pt.md",
    "source_type": "git_repo",
    "title": "Projeto Terrarium Parte 3:  Manipulação do DOM e fechamento",
    "content": "há zona de queda, por exemplo) para permitir que você projete seu terrário exatamente como você gosta, adicionando, removendo e reposicionando plantas Tarefa Adicione a função elementDrag logo após a chave de fechamento de pointerDrag: javascript function elementDrag(e) { pos1 = pos3 - e clientX; pos2 = pos4 - e clientY; pos3 = e clientX; pos4 = e clientY; console log(pos1, pos2, pos3, pos4); terrariumElement style top = terrariumElement offsetTop - pos2 + 'px'; terrariumElement styleleft = terrariumElement offsetLeft - pos1 + 'px';\n}\nNesta função, você edita várias vezes as posições iniciais 1-4 que definiu como variáveis ​​locais na função externa O que está acontecendo aqui Conforme você arrasta, você reatribui pos1 tornando-o igual a pos3 (que você definiu anteriormente como e clientX) menos o valor atual de e clientX Você faz uma operação semelhante à pos2 Em seguida, você redefine pos3 e pos4 para as novas coordenadas X e Y do elemento Você pode observar essas mudanças no console enquanto arrasta Em seguida, você manipula o estilo CSS da planta para definir sua nova posição com base nas novas posições de pos1 e pos2, calculando as coordenadas X e Y superior e esquerda da planta com base na comparação de seu deslocamento com essas novas posições OffsetTop e offsetLeft são propriedades CSS que definem a posição de um elemento com base na posição de seu pai; seu pai pode ser qualquer elemento que não esteja posicionado como static Todo este recálculo de posicionamento permite afinar o comportamento do terrário e das suas plantas Tarefa\nA tarefa final para completar a interface é adicionar a função stopElementDrag após a chave de fechamento de elementDrag:\njavascript\nfunction stopElementDrag() {\ndocument onpointerup = null;\ndocument",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13757,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.pt.md",
      "source_type": "git_repo"
    },
    "token_count": 456,
    "chunk_index": 6,
    "total_chunks": 8
  },
  {
    "id": "5104d2e1a0367ce3b912ace8f956f332",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.pt.md",
    "source_type": "git_repo",
    "title": "Projeto Terrarium Parte 3:  Manipulação do DOM e fechamento",
    "content": "OffsetTop e offsetLeft são propriedades CSS que definem a posição de um elemento com base na posição de seu pai; seu pai pode ser qualquer elemento que não esteja posicionado como static Todo este recálculo de posicionamento permite afinar o comportamento do terrário e das suas plantas Tarefa A tarefa final para completar a interface é adicionar a função stopElementDrag após a chave de fechamento de elementDrag: javascript function stopElementDrag() { document onpointerup = null; documentonpointermove = null;\n}\nEsta pequena função redefine os eventos onpointerup e onpointermove para que você possa reiniciar o progresso de sua planta, começando a arrastá-la novamente, ou começar a arrastar uma nova planta ✅ O que acontece se você não definir esses eventos como nulos Agora você concluiu seu projeto 🥇 Parabéns Você terminou seu lindo terrário 🚀Desafio\nAdicione um novo manipulador de eventos ao seu fechamento para fazer algo mais para as plantas; por exemplo, clique duas vezes em uma planta para trazê-la para a frente Seja criativo Quiz pós-leitura\nQuiz pós-leitura\nRevisão & auto-estudo\nEmbora arrastar elementos pela tela pareça trivial, existem muitas maneiras de fazer isso e muitas armadilhas, dependendo do efeito que você busca Na verdade, existe toda uma API de arrastrar e soltar que você pode experimentar Não a usamos neste módulo porque o efeito que queríamos era um pouco diferente, mas experimente esta API em seu próprio projeto e veja o que você pode conseguir Encontre mais informações sobre eventos de ponteiro nos documentos W3C e MDN web docs Sempre verifique os recursos do navegador usando CanIUse\nTarefa\nTrabalhar um pouco mais com o DOM",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13757,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.pt.md",
      "source_type": "git_repo"
    },
    "token_count": 414,
    "chunk_index": 7,
    "total_chunks": 8
  },
  {
    "id": "3afa5c8d0f009ee30aece61d7cbbecf5",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "テラリウムプロジェクト その3: DOM の操作とクロージャ\nSketchnote by Tomomi Imura\nレッスン前の小テスト\nレッスン前の小テスト\nイントロダクション\nDOM (Document Object Model) を操作することは、Web  開発の重要な要素です。MDN によると、\"Document Object Model (DOM) は、Web 上のドキュメントの構造とコンテンツを構成するオブジェクトのデータ表現である\" とのことです。Web 上での DOM 操作の難しさから、バニラ JavaScript ではなく、JavaScript のフレームワークを使って DOM を管理することが多くなっていますが、ここでは自分たちで管理していきましょう",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 225,
    "chunk_index": 0,
    "total_chunks": 61
  },
  {
    "id": "97e64beae01d7019aaacbbc946d21a8e",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "テラリウムプロジェクト その3: DOM の操作とクロージャ\nSketchnote by Tomomi Imura\nレッスン前の小テスト\nレッスン前の小テスト\nイントロダクション\nDOM (Document Object Model) を操作することは、Web  開発の重要な要素です。MDN によると、\"Document Object Model (DOM) は、Web 上のドキュメントの構造とコンテンツを構成するオブジェクトのデータ表現である\" とのことです。Web 上での DOM 操作の難しさから、バニラ JavaScript ではなく、JavaScript のフレームワークを使って DOM を管理することが多くなっていますが、ここでは自分たちで管理していきましょうまた、このレッスンでは、JavaScript クロージャという考え方を紹介します。これは、関数を別の関数で囲んで、内側の関数が外側の関数のスコープにアクセスできるようにしたものと考えてください。\nJavaScript のクロージャは広大で複雑なトピックです。このレッスンでは、このテラリウムのコードの中にクロージャがある、すなわち内側の関数と外側の関数は、内側の関数が外側の関数のスコープにアクセスできるように構築されているという最も基本的な考え方に触れます。これがどのように動作するかについての詳細な情報は 詳細なドキュメント を参照してください。\nクロージャを使って DOM を操作します。\nDOM をツリーと考え、Web ページのドキュメントを操作できるすべての方法を表しています。様々な API (Application Program Interfaces) が書かれており、プログラマーが自分の好きなプログラミング言語を使って DOM にアクセスし、編集、変更、再配置、その他の管理ができるようになっています。\nDOM とそれを参照する HTML マークアップの表現。Olfa Nasraoui より\nこのレッスンでは、ユーザーがページ上の植物を操作できるようにする JavaScript を作成して、インタラクティブなテラリウムプロジェクトを完成させます。\n前提条件\nテラリウムの HTML と CSS が完成しているはずです。このレッスンが終わる頃には、植物をドラッグしてテラリウムの中に入れたり出したりできるようになります。\nタスク\nterrarium フォルダ内に script",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 780,
    "chunk_index": 1,
    "total_chunks": 61
  },
  {
    "id": "a49ae8465cb3e571f3dd014c9207c217",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "テラリウムプロジェクト その3: DOM の操作とクロージャ\nSketchnote by Tomomi Imura\nレッスン前の小テスト\nレッスン前の小テスト\nイントロダクション\nDOM (Document Object Model) を操作することは、Web  開発の重要な要素です。MDN によると、\"Document Object Model (DOM) は、Web 上のドキュメントの構造とコンテンツを構成するオブジェクトのデータ表現である\" とのことです。Web 上での DOM 操作の難しさから、バニラ JavaScript ではなく、JavaScript のフレームワークを使って DOM を管理することが多くなっていますが、ここでは自分たちで管理していきましょうまた、このレッスンでは、JavaScript クロージャという考え方を紹介します。これは、関数を別の関数で囲んで、内側の関数が外側の関数のスコープにアクセスできるようにしたものと考えてください。\nJavaScript のクロージャは広大で複雑なトピックです。このレッスンでは、このテラリウムのコードの中にクロージャがある、すなわち内側の関数と外側の関数は、内側の関数が外側の関数のスコープにアクセスできるように構築されているという最も基本的な考え方に触れます。これがどのように動作するかについての詳細な情報は 詳細なドキュメント を参照してください。\nクロージャを使って DOM を操作します。\nDOM をツリーと考え、Web ページのドキュメントを操作できるすべての方法を表しています。様々な API (Application Program Interfaces) が書かれており、プログラマーが自分の好きなプログラミング言語を使って DOM にアクセスし、編集、変更、再配置、その他の管理ができるようになっています。\nDOM とそれを参照する HTML マークアップの表現。Olfa Nasraoui より\nこのレッスンでは、ユーザーがページ上の植物を操作できるようにする JavaScript を作成して、インタラクティブなテラリウムプロジェクトを完成させます。\n前提条件\nテラリウムの HTML と CSS が完成しているはずです。このレッスンが終わる頃には、植物をドラッグしてテラリウムの中に入れたり出したりできるようになります。\nタスク\nterrarium フォルダ内に scriptjs というファイルを作成します。このファイルを <head> セクションにインポートします。\n```html\n```\n> 注: HTML ファイルが完全に読み込まれた後にのみ JavaScript を実行できるようにするために、外部の JavaScript ファイルを HTML ファイルにインポートする際には defer を使用してください。また、async 属性を使用することもできます。これは HTML ファイルのパース中にスクリプトを実行できるようにしますが、私たちの場合は、ドラッグスクリプトを実行する前に HTML 要素を完全に利用できるようにしておくことが重要です。\nDOM 要素\nまず最初に必要なのは、DOM で操作したい要素への参照を作成することです。私たちの場合、それらは現在サイドバーで待機している14個の植物です。\nタスク\njavascript\ndragElement(document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1076,
    "chunk_index": 2,
    "total_chunks": 61
  },
  {
    "id": "3d7f732b50bdd5ddf42151a62823281a",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "上のドキュメントの構造とコンテンツを構成するオブジェクトのデータ表現である\" とのことです。Web 上での DOM 操作の難しさから、バニラ JavaScript ではなく、JavaScript のフレームワークを使って DOM を管理することが多くなっていますが、ここでは自分たちで管理していきましょうまた、このレッスンでは、JavaScript クロージャという考え方を紹介します。これは、関数を別の関数で囲んで、内側の関数が外側の関数のスコープにアクセスできるようにしたものと考えてください。 JavaScript のクロージャは広大で複雑なトピックです。このレッスンでは、このテラリウムのコードの中にクロージャがある、すなわち内側の関数と外側の関数は、内側の関数が外側の関数のスコープにアクセスできるように構築されているという最も基本的な考え方に触れます。これがどのように動作するかについての詳細な情報は 詳細なドキュメント を参照してください。 クロージャを使って DOM を操作します。 DOM をツリーと考え、Web ページのドキュメントを操作できるすべての方法を表しています。様々な API (Application Program Interfaces) が書かれており、プログラマーが自分の好きなプログラミング言語を使って DOM にアクセスし、編集、変更、再配置、その他の管理ができるようになっています。 DOM とそれを参照する HTML マークアップの表現。Olfa Nasraoui より このレッスンでは、ユーザーがページ上の植物を操作できるようにする JavaScript を作成して、インタラクティブなテラリウムプロジェクトを完成させます。 前提条件 テラリウムの HTML と CSS が完成しているはずです。このレッスンが終わる頃には、植物をドラッグしてテラリウムの中に入れたり出したりできるようになります。 タスク terrarium フォルダ内に scriptjs というファイルを作成します。このファイルを <head> セクションにインポートします。 ```html ``` > 注: HTML ファイルが完全に読み込まれた後にのみ JavaScript を実行できるようにするために、外部の JavaScript ファイルを HTML ファイルにインポートする際には defer を使用してください。また、async 属性を使用することもできます。これは HTML ファイルのパース中にスクリプトを実行できるようにしますが、私たちの場合は、ドラッグスクリプトを実行する前に HTML 要素を完全に利用できるようにしておくことが重要です。 DOM 要素 まず最初に必要なのは、DOM で操作したい要素への参照を作成することです。私たちの場合、それらは現在サイドバーで待機している14個の植物です。 タスク javascript dragElement(documentgetElementById('plant1'));\ndragElement(document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 975,
    "chunk_index": 3,
    "total_chunks": 61
  },
  {
    "id": "97dfa6f5bcad7c5728c267f5cdc91654",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "とのことです。Web 上での DOM 操作の難しさから、バニラ JavaScript ではなく、JavaScript のフレームワークを使って DOM を管理することが多くなっていますが、ここでは自分たちで管理していきましょうまた、このレッスンでは、JavaScript クロージャという考え方を紹介します。これは、関数を別の関数で囲んで、内側の関数が外側の関数のスコープにアクセスできるようにしたものと考えてください。 JavaScript のクロージャは広大で複雑なトピックです。このレッスンでは、このテラリウムのコードの中にクロージャがある、すなわち内側の関数と外側の関数は、内側の関数が外側の関数のスコープにアクセスできるように構築されているという最も基本的な考え方に触れます。これがどのように動作するかについての詳細な情報は 詳細なドキュメント を参照してください。 クロージャを使って DOM を操作します。 DOM をツリーと考え、Web ページのドキュメントを操作できるすべての方法を表しています。様々な API (Application Program Interfaces) が書かれており、プログラマーが自分の好きなプログラミング言語を使って DOM にアクセスし、編集、変更、再配置、その他の管理ができるようになっています。 DOM とそれを参照する HTML マークアップの表現。Olfa Nasraoui より このレッスンでは、ユーザーがページ上の植物を操作できるようにする JavaScript を作成して、インタラクティブなテラリウムプロジェクトを完成させます。 前提条件 テラリウムの HTML と CSS が完成しているはずです。このレッスンが終わる頃には、植物をドラッグしてテラリウムの中に入れたり出したりできるようになります。 タスク terrarium フォルダ内に scriptjs というファイルを作成します。このファイルを <head> セクションにインポートします。 ```html ``` > 注: HTML ファイルが完全に読み込まれた後にのみ JavaScript を実行できるようにするために、外部の JavaScript ファイルを HTML ファイルにインポートする際には defer を使用してください。また、async 属性を使用することもできます。これは HTML ファイルのパース中にスクリプトを実行できるようにしますが、私たちの場合は、ドラッグスクリプトを実行する前に HTML 要素を完全に利用できるようにしておくことが重要です。 DOM 要素 まず最初に必要なのは、DOM で操作したい要素への参照を作成することです。私たちの場合、それらは現在サイドバーで待機している14個の植物です。 タスク javascript dragElement(documentgetElementById('plant1')); dragElement(documentgetElementById('plant2'));\ndragElement(document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 942,
    "chunk_index": 4,
    "total_chunks": 61
  },
  {
    "id": "f8f26640c7e05f7f26e96f16277a375e",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "上での DOM 操作の難しさから、バニラ JavaScript ではなく、JavaScript のフレームワークを使って DOM を管理することが多くなっていますが、ここでは自分たちで管理していきましょうまた、このレッスンでは、JavaScript クロージャという考え方を紹介します。これは、関数を別の関数で囲んで、内側の関数が外側の関数のスコープにアクセスできるようにしたものと考えてください。 JavaScript のクロージャは広大で複雑なトピックです。このレッスンでは、このテラリウムのコードの中にクロージャがある、すなわち内側の関数と外側の関数は、内側の関数が外側の関数のスコープにアクセスできるように構築されているという最も基本的な考え方に触れます。これがどのように動作するかについての詳細な情報は 詳細なドキュメント を参照してください。 クロージャを使って DOM を操作します。 DOM をツリーと考え、Web ページのドキュメントを操作できるすべての方法を表しています。様々な API (Application Program Interfaces) が書かれており、プログラマーが自分の好きなプログラミング言語を使って DOM にアクセスし、編集、変更、再配置、その他の管理ができるようになっています。 DOM とそれを参照する HTML マークアップの表現。Olfa Nasraoui より このレッスンでは、ユーザーがページ上の植物を操作できるようにする JavaScript を作成して、インタラクティブなテラリウムプロジェクトを完成させます。 前提条件 テラリウムの HTML と CSS が完成しているはずです。このレッスンが終わる頃には、植物をドラッグしてテラリウムの中に入れたり出したりできるようになります。 タスク terrarium フォルダ内に scriptjs というファイルを作成します。このファイルを <head> セクションにインポートします。 ```html ``` > 注: HTML ファイルが完全に読み込まれた後にのみ JavaScript を実行できるようにするために、外部の JavaScript ファイルを HTML ファイルにインポートする際には defer を使用してください。また、async 属性を使用することもできます。これは HTML ファイルのパース中にスクリプトを実行できるようにしますが、私たちの場合は、ドラッグスクリプトを実行する前に HTML 要素を完全に利用できるようにしておくことが重要です。 DOM 要素 まず最初に必要なのは、DOM で操作したい要素への参照を作成することです。私たちの場合、それらは現在サイドバーで待機している14個の植物です。 タスク javascript dragElement(documentgetElementById('plant1')); dragElement(documentgetElementById('plant2')); dragElement(documentgetElementById('plant3'));\ndragElement(document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 944,
    "chunk_index": 5,
    "total_chunks": 61
  },
  {
    "id": "4a2eea48b080edf93daec0e8a0374abd",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "DOM 操作の難しさから、バニラ JavaScript ではなく、JavaScript のフレームワークを使って DOM を管理することが多くなっていますが、ここでは自分たちで管理していきましょうまた、このレッスンでは、JavaScript クロージャという考え方を紹介します。これは、関数を別の関数で囲んで、内側の関数が外側の関数のスコープにアクセスできるようにしたものと考えてください。 JavaScript のクロージャは広大で複雑なトピックです。このレッスンでは、このテラリウムのコードの中にクロージャがある、すなわち内側の関数と外側の関数は、内側の関数が外側の関数のスコープにアクセスできるように構築されているという最も基本的な考え方に触れます。これがどのように動作するかについての詳細な情報は 詳細なドキュメント を参照してください。 クロージャを使って DOM を操作します。 DOM をツリーと考え、Web ページのドキュメントを操作できるすべての方法を表しています。様々な API (Application Program Interfaces) が書かれており、プログラマーが自分の好きなプログラミング言語を使って DOM にアクセスし、編集、変更、再配置、その他の管理ができるようになっています。 DOM とそれを参照する HTML マークアップの表現。Olfa Nasraoui より このレッスンでは、ユーザーがページ上の植物を操作できるようにする JavaScript を作成して、インタラクティブなテラリウムプロジェクトを完成させます。 前提条件 テラリウムの HTML と CSS が完成しているはずです。このレッスンが終わる頃には、植物をドラッグしてテラリウムの中に入れたり出したりできるようになります。 タスク terrarium フォルダ内に scriptjs というファイルを作成します。このファイルを <head> セクションにインポートします。 ```html ``` > 注: HTML ファイルが完全に読み込まれた後にのみ JavaScript を実行できるようにするために、外部の JavaScript ファイルを HTML ファイルにインポートする際には defer を使用してください。また、async 属性を使用することもできます。これは HTML ファイルのパース中にスクリプトを実行できるようにしますが、私たちの場合は、ドラッグスクリプトを実行する前に HTML 要素を完全に利用できるようにしておくことが重要です。 DOM 要素 まず最初に必要なのは、DOM で操作したい要素への参照を作成することです。私たちの場合、それらは現在サイドバーで待機している14個の植物です。 タスク javascript dragElement(documentgetElementById('plant1')); dragElement(documentgetElementById('plant2')); dragElement(documentgetElementById('plant3')); dragElement(documentgetElementById('plant4'));\ndragElement(document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 950,
    "chunk_index": 6,
    "total_chunks": 61
  },
  {
    "id": "3fdfd33fc772c60d2c24d4f3919b7f87",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "操作の難しさから、バニラ JavaScript ではなく、JavaScript のフレームワークを使って DOM を管理することが多くなっていますが、ここでは自分たちで管理していきましょうまた、このレッスンでは、JavaScript クロージャという考え方を紹介します。これは、関数を別の関数で囲んで、内側の関数が外側の関数のスコープにアクセスできるようにしたものと考えてください。 JavaScript のクロージャは広大で複雑なトピックです。このレッスンでは、このテラリウムのコードの中にクロージャがある、すなわち内側の関数と外側の関数は、内側の関数が外側の関数のスコープにアクセスできるように構築されているという最も基本的な考え方に触れます。これがどのように動作するかについての詳細な情報は 詳細なドキュメント を参照してください。 クロージャを使って DOM を操作します。 DOM をツリーと考え、Web ページのドキュメントを操作できるすべての方法を表しています。様々な API (Application Program Interfaces) が書かれており、プログラマーが自分の好きなプログラミング言語を使って DOM にアクセスし、編集、変更、再配置、その他の管理ができるようになっています。 DOM とそれを参照する HTML マークアップの表現。Olfa Nasraoui より このレッスンでは、ユーザーがページ上の植物を操作できるようにする JavaScript を作成して、インタラクティブなテラリウムプロジェクトを完成させます。 前提条件 テラリウムの HTML と CSS が完成しているはずです。このレッスンが終わる頃には、植物をドラッグしてテラリウムの中に入れたり出したりできるようになります。 タスク terrarium フォルダ内に scriptjs というファイルを作成します。このファイルを <head> セクションにインポートします。 ```html ``` > 注: HTML ファイルが完全に読み込まれた後にのみ JavaScript を実行できるようにするために、外部の JavaScript ファイルを HTML ファイルにインポートする際には defer を使用してください。また、async 属性を使用することもできます。これは HTML ファイルのパース中にスクリプトを実行できるようにしますが、私たちの場合は、ドラッグスクリプトを実行する前に HTML 要素を完全に利用できるようにしておくことが重要です。 DOM 要素 まず最初に必要なのは、DOM で操作したい要素への参照を作成することです。私たちの場合、それらは現在サイドバーで待機している14個の植物です。 タスク javascript dragElement(documentgetElementById('plant1')); dragElement(documentgetElementById('plant2')); dragElement(documentgetElementById('plant3')); dragElement(documentgetElementById('plant4')); dragElement(documentgetElementById('plant5'));\ndragElement(document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 957,
    "chunk_index": 7,
    "total_chunks": 61
  },
  {
    "id": "06e62cdf3f36b41c9d38113e9fd5ec59",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "JavaScript ではなく、JavaScript のフレームワークを使って DOM を管理することが多くなっていますが、ここでは自分たちで管理していきましょうまた、このレッスンでは、JavaScript クロージャという考え方を紹介します。これは、関数を別の関数で囲んで、内側の関数が外側の関数のスコープにアクセスできるようにしたものと考えてください。 JavaScript のクロージャは広大で複雑なトピックです。このレッスンでは、このテラリウムのコードの中にクロージャがある、すなわち内側の関数と外側の関数は、内側の関数が外側の関数のスコープにアクセスできるように構築されているという最も基本的な考え方に触れます。これがどのように動作するかについての詳細な情報は 詳細なドキュメント を参照してください。 クロージャを使って DOM を操作します。 DOM をツリーと考え、Web ページのドキュメントを操作できるすべての方法を表しています。様々な API (Application Program Interfaces) が書かれており、プログラマーが自分の好きなプログラミング言語を使って DOM にアクセスし、編集、変更、再配置、その他の管理ができるようになっています。 DOM とそれを参照する HTML マークアップの表現。Olfa Nasraoui より このレッスンでは、ユーザーがページ上の植物を操作できるようにする JavaScript を作成して、インタラクティブなテラリウムプロジェクトを完成させます。 前提条件 テラリウムの HTML と CSS が完成しているはずです。このレッスンが終わる頃には、植物をドラッグしてテラリウムの中に入れたり出したりできるようになります。 タスク terrarium フォルダ内に scriptjs というファイルを作成します。このファイルを <head> セクションにインポートします。 ```html ``` > 注: HTML ファイルが完全に読み込まれた後にのみ JavaScript を実行できるようにするために、外部の JavaScript ファイルを HTML ファイルにインポートする際には defer を使用してください。また、async 属性を使用することもできます。これは HTML ファイルのパース中にスクリプトを実行できるようにしますが、私たちの場合は、ドラッグスクリプトを実行する前に HTML 要素を完全に利用できるようにしておくことが重要です。 DOM 要素 まず最初に必要なのは、DOM で操作したい要素への参照を作成することです。私たちの場合、それらは現在サイドバーで待機している14個の植物です。 タスク javascript dragElement(documentgetElementById('plant1')); dragElement(documentgetElementById('plant2')); dragElement(documentgetElementById('plant3')); dragElement(documentgetElementById('plant4')); dragElement(documentgetElementById('plant5')); dragElement(documentgetElementById('plant6'));\ndragElement(document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 955,
    "chunk_index": 8,
    "total_chunks": 61
  },
  {
    "id": "560f4a3e763a5c6ef9d008307f33fec5",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "ではなく、JavaScript のフレームワークを使って DOM を管理することが多くなっていますが、ここでは自分たちで管理していきましょうまた、このレッスンでは、JavaScript クロージャという考え方を紹介します。これは、関数を別の関数で囲んで、内側の関数が外側の関数のスコープにアクセスできるようにしたものと考えてください。 JavaScript のクロージャは広大で複雑なトピックです。このレッスンでは、このテラリウムのコードの中にクロージャがある、すなわち内側の関数と外側の関数は、内側の関数が外側の関数のスコープにアクセスできるように構築されているという最も基本的な考え方に触れます。これがどのように動作するかについての詳細な情報は 詳細なドキュメント を参照してください。 クロージャを使って DOM を操作します。 DOM をツリーと考え、Web ページのドキュメントを操作できるすべての方法を表しています。様々な API (Application Program Interfaces) が書かれており、プログラマーが自分の好きなプログラミング言語を使って DOM にアクセスし、編集、変更、再配置、その他の管理ができるようになっています。 DOM とそれを参照する HTML マークアップの表現。Olfa Nasraoui より このレッスンでは、ユーザーがページ上の植物を操作できるようにする JavaScript を作成して、インタラクティブなテラリウムプロジェクトを完成させます。 前提条件 テラリウムの HTML と CSS が完成しているはずです。このレッスンが終わる頃には、植物をドラッグしてテラリウムの中に入れたり出したりできるようになります。 タスク terrarium フォルダ内に scriptjs というファイルを作成します。このファイルを <head> セクションにインポートします。 ```html ``` > 注: HTML ファイルが完全に読み込まれた後にのみ JavaScript を実行できるようにするために、外部の JavaScript ファイルを HTML ファイルにインポートする際には defer を使用してください。また、async 属性を使用することもできます。これは HTML ファイルのパース中にスクリプトを実行できるようにしますが、私たちの場合は、ドラッグスクリプトを実行する前に HTML 要素を完全に利用できるようにしておくことが重要です。 DOM 要素 まず最初に必要なのは、DOM で操作したい要素への参照を作成することです。私たちの場合、それらは現在サイドバーで待機している14個の植物です。 タスク javascript dragElement(documentgetElementById('plant1')); dragElement(documentgetElementById('plant2')); dragElement(documentgetElementById('plant3')); dragElement(documentgetElementById('plant4')); dragElement(documentgetElementById('plant5')); dragElement(documentgetElementById('plant6')); dragElement(documentgetElementById('plant7'));\ndragElement(document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 962,
    "chunk_index": 9,
    "total_chunks": 61
  },
  {
    "id": "aceefdae5129ca436753a0c73b78c456",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "のフレームワークを使って DOM を管理することが多くなっていますが、ここでは自分たちで管理していきましょうまた、このレッスンでは、JavaScript クロージャという考え方を紹介します。これは、関数を別の関数で囲んで、内側の関数が外側の関数のスコープにアクセスできるようにしたものと考えてください。 JavaScript のクロージャは広大で複雑なトピックです。このレッスンでは、このテラリウムのコードの中にクロージャがある、すなわち内側の関数と外側の関数は、内側の関数が外側の関数のスコープにアクセスできるように構築されているという最も基本的な考え方に触れます。これがどのように動作するかについての詳細な情報は 詳細なドキュメント を参照してください。 クロージャを使って DOM を操作します。 DOM をツリーと考え、Web ページのドキュメントを操作できるすべての方法を表しています。様々な API (Application Program Interfaces) が書かれており、プログラマーが自分の好きなプログラミング言語を使って DOM にアクセスし、編集、変更、再配置、その他の管理ができるようになっています。 DOM とそれを参照する HTML マークアップの表現。Olfa Nasraoui より このレッスンでは、ユーザーがページ上の植物を操作できるようにする JavaScript を作成して、インタラクティブなテラリウムプロジェクトを完成させます。 前提条件 テラリウムの HTML と CSS が完成しているはずです。このレッスンが終わる頃には、植物をドラッグしてテラリウムの中に入れたり出したりできるようになります。 タスク terrarium フォルダ内に scriptjs というファイルを作成します。このファイルを <head> セクションにインポートします。 ```html ``` > 注: HTML ファイルが完全に読み込まれた後にのみ JavaScript を実行できるようにするために、外部の JavaScript ファイルを HTML ファイルにインポートする際には defer を使用してください。また、async 属性を使用することもできます。これは HTML ファイルのパース中にスクリプトを実行できるようにしますが、私たちの場合は、ドラッグスクリプトを実行する前に HTML 要素を完全に利用できるようにしておくことが重要です。 DOM 要素 まず最初に必要なのは、DOM で操作したい要素への参照を作成することです。私たちの場合、それらは現在サイドバーで待機している14個の植物です。 タスク javascript dragElement(documentgetElementById('plant1')); dragElement(documentgetElementById('plant2')); dragElement(documentgetElementById('plant3')); dragElement(documentgetElementById('plant4')); dragElement(documentgetElementById('plant5')); dragElement(documentgetElementById('plant6')); dragElement(documentgetElementById('plant7')); dragElement(documentgetElementById('plant8'));\ndragElement(document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 966,
    "chunk_index": 10,
    "total_chunks": 61
  },
  {
    "id": "6d00cfde34ed1a57fa4de90090595af7",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "DOM を管理することが多くなっていますが、ここでは自分たちで管理していきましょうまた、このレッスンでは、JavaScript クロージャという考え方を紹介します。これは、関数を別の関数で囲んで、内側の関数が外側の関数のスコープにアクセスできるようにしたものと考えてください。 JavaScript のクロージャは広大で複雑なトピックです。このレッスンでは、このテラリウムのコードの中にクロージャがある、すなわち内側の関数と外側の関数は、内側の関数が外側の関数のスコープにアクセスできるように構築されているという最も基本的な考え方に触れます。これがどのように動作するかについての詳細な情報は 詳細なドキュメント を参照してください。 クロージャを使って DOM を操作します。 DOM をツリーと考え、Web ページのドキュメントを操作できるすべての方法を表しています。様々な API (Application Program Interfaces) が書かれており、プログラマーが自分の好きなプログラミング言語を使って DOM にアクセスし、編集、変更、再配置、その他の管理ができるようになっています。 DOM とそれを参照する HTML マークアップの表現。Olfa Nasraoui より このレッスンでは、ユーザーがページ上の植物を操作できるようにする JavaScript を作成して、インタラクティブなテラリウムプロジェクトを完成させます。 前提条件 テラリウムの HTML と CSS が完成しているはずです。このレッスンが終わる頃には、植物をドラッグしてテラリウムの中に入れたり出したりできるようになります。 タスク terrarium フォルダ内に scriptjs というファイルを作成します。このファイルを <head> セクションにインポートします。 ```html ``` > 注: HTML ファイルが完全に読み込まれた後にのみ JavaScript を実行できるようにするために、外部の JavaScript ファイルを HTML ファイルにインポートする際には defer を使用してください。また、async 属性を使用することもできます。これは HTML ファイルのパース中にスクリプトを実行できるようにしますが、私たちの場合は、ドラッグスクリプトを実行する前に HTML 要素を完全に利用できるようにしておくことが重要です。 DOM 要素 まず最初に必要なのは、DOM で操作したい要素への参照を作成することです。私たちの場合、それらは現在サイドバーで待機している14個の植物です。 タスク javascript dragElement(documentgetElementById('plant1')); dragElement(documentgetElementById('plant2')); dragElement(documentgetElementById('plant3')); dragElement(documentgetElementById('plant4')); dragElement(documentgetElementById('plant5')); dragElement(documentgetElementById('plant6')); dragElement(documentgetElementById('plant7')); dragElement(documentgetElementById('plant8')); dragElement(documentgetElementById('plant9'));\ndragElement(document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 963,
    "chunk_index": 11,
    "total_chunks": 61
  },
  {
    "id": "00b47e09d25a60ddf51ee88a23a72e14",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "を管理することが多くなっていますが、ここでは自分たちで管理していきましょうまた、このレッスンでは、JavaScript クロージャという考え方を紹介します。これは、関数を別の関数で囲んで、内側の関数が外側の関数のスコープにアクセスできるようにしたものと考えてください。 JavaScript のクロージャは広大で複雑なトピックです。このレッスンでは、このテラリウムのコードの中にクロージャがある、すなわち内側の関数と外側の関数は、内側の関数が外側の関数のスコープにアクセスできるように構築されているという最も基本的な考え方に触れます。これがどのように動作するかについての詳細な情報は 詳細なドキュメント を参照してください。 クロージャを使って DOM を操作します。 DOM をツリーと考え、Web ページのドキュメントを操作できるすべての方法を表しています。様々な API (Application Program Interfaces) が書かれており、プログラマーが自分の好きなプログラミング言語を使って DOM にアクセスし、編集、変更、再配置、その他の管理ができるようになっています。 DOM とそれを参照する HTML マークアップの表現。Olfa Nasraoui より このレッスンでは、ユーザーがページ上の植物を操作できるようにする JavaScript を作成して、インタラクティブなテラリウムプロジェクトを完成させます。 前提条件 テラリウムの HTML と CSS が完成しているはずです。このレッスンが終わる頃には、植物をドラッグしてテラリウムの中に入れたり出したりできるようになります。 タスク terrarium フォルダ内に scriptjs というファイルを作成します。このファイルを <head> セクションにインポートします。 ```html ``` > 注: HTML ファイルが完全に読み込まれた後にのみ JavaScript を実行できるようにするために、外部の JavaScript ファイルを HTML ファイルにインポートする際には defer を使用してください。また、async 属性を使用することもできます。これは HTML ファイルのパース中にスクリプトを実行できるようにしますが、私たちの場合は、ドラッグスクリプトを実行する前に HTML 要素を完全に利用できるようにしておくことが重要です。 DOM 要素 まず最初に必要なのは、DOM で操作したい要素への参照を作成することです。私たちの場合、それらは現在サイドバーで待機している14個の植物です。 タスク javascript dragElement(documentgetElementById('plant1')); dragElement(documentgetElementById('plant2')); dragElement(documentgetElementById('plant3')); dragElement(documentgetElementById('plant4')); dragElement(documentgetElementById('plant5')); dragElement(documentgetElementById('plant6')); dragElement(documentgetElementById('plant7')); dragElement(documentgetElementById('plant8')); dragElement(documentgetElementById('plant9')); dragElement(documentgetElementById('plant10'));\ndragElement(document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 971,
    "chunk_index": 12,
    "total_chunks": 61
  },
  {
    "id": "42b8435e01b095ebb70b58659c281cc4",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "クロージャという考え方を紹介します。これは、関数を別の関数で囲んで、内側の関数が外側の関数のスコープにアクセスできるようにしたものと考えてください。 JavaScript のクロージャは広大で複雑なトピックです。このレッスンでは、このテラリウムのコードの中にクロージャがある、すなわち内側の関数と外側の関数は、内側の関数が外側の関数のスコープにアクセスできるように構築されているという最も基本的な考え方に触れます。これがどのように動作するかについての詳細な情報は 詳細なドキュメント を参照してください。 クロージャを使って DOM を操作します。 DOM をツリーと考え、Web ページのドキュメントを操作できるすべての方法を表しています。様々な API (Application Program Interfaces) が書かれており、プログラマーが自分の好きなプログラミング言語を使って DOM にアクセスし、編集、変更、再配置、その他の管理ができるようになっています。 DOM とそれを参照する HTML マークアップの表現。Olfa Nasraoui より このレッスンでは、ユーザーがページ上の植物を操作できるようにする JavaScript を作成して、インタラクティブなテラリウムプロジェクトを完成させます。 前提条件 テラリウムの HTML と CSS が完成しているはずです。このレッスンが終わる頃には、植物をドラッグしてテラリウムの中に入れたり出したりできるようになります。 タスク terrarium フォルダ内に scriptjs というファイルを作成します。このファイルを <head> セクションにインポートします。 ```html ``` > 注: HTML ファイルが完全に読み込まれた後にのみ JavaScript を実行できるようにするために、外部の JavaScript ファイルを HTML ファイルにインポートする際には defer を使用してください。また、async 属性を使用することもできます。これは HTML ファイルのパース中にスクリプトを実行できるようにしますが、私たちの場合は、ドラッグスクリプトを実行する前に HTML 要素を完全に利用できるようにしておくことが重要です。 DOM 要素 まず最初に必要なのは、DOM で操作したい要素への参照を作成することです。私たちの場合、それらは現在サイドバーで待機している14個の植物です。 タスク javascript dragElement(documentgetElementById('plant1')); dragElement(documentgetElementById('plant2')); dragElement(documentgetElementById('plant3')); dragElement(documentgetElementById('plant4')); dragElement(documentgetElementById('plant5')); dragElement(documentgetElementById('plant6')); dragElement(documentgetElementById('plant7')); dragElement(documentgetElementById('plant8')); dragElement(documentgetElementById('plant9')); dragElement(documentgetElementById('plant10')); dragElement(documentgetElementById('plant11'));\ndragElement(document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 939,
    "chunk_index": 13,
    "total_chunks": 61
  },
  {
    "id": "1a3cb3d0e2677fd5d9d60534bd372990",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "JavaScript のクロージャは広大で複雑なトピックです。このレッスンでは、このテラリウムのコードの中にクロージャがある、すなわち内側の関数と外側の関数は、内側の関数が外側の関数のスコープにアクセスできるように構築されているという最も基本的な考え方に触れます。これがどのように動作するかについての詳細な情報は 詳細なドキュメント を参照してください。 クロージャを使って DOM を操作します。 DOM をツリーと考え、Web ページのドキュメントを操作できるすべての方法を表しています。様々な API (Application Program Interfaces) が書かれており、プログラマーが自分の好きなプログラミング言語を使って DOM にアクセスし、編集、変更、再配置、その他の管理ができるようになっています。 DOM とそれを参照する HTML マークアップの表現。Olfa Nasraoui より このレッスンでは、ユーザーがページ上の植物を操作できるようにする JavaScript を作成して、インタラクティブなテラリウムプロジェクトを完成させます。 前提条件 テラリウムの HTML と CSS が完成しているはずです。このレッスンが終わる頃には、植物をドラッグしてテラリウムの中に入れたり出したりできるようになります。 タスク terrarium フォルダ内に scriptjs というファイルを作成します。このファイルを <head> セクションにインポートします。 ```html ``` > 注: HTML ファイルが完全に読み込まれた後にのみ JavaScript を実行できるようにするために、外部の JavaScript ファイルを HTML ファイルにインポートする際には defer を使用してください。また、async 属性を使用することもできます。これは HTML ファイルのパース中にスクリプトを実行できるようにしますが、私たちの場合は、ドラッグスクリプトを実行する前に HTML 要素を完全に利用できるようにしておくことが重要です。 DOM 要素 まず最初に必要なのは、DOM で操作したい要素への参照を作成することです。私たちの場合、それらは現在サイドバーで待機している14個の植物です。 タスク javascript dragElement(documentgetElementById('plant1')); dragElement(documentgetElementById('plant2')); dragElement(documentgetElementById('plant3')); dragElement(documentgetElementById('plant4')); dragElement(documentgetElementById('plant5')); dragElement(documentgetElementById('plant6')); dragElement(documentgetElementById('plant7')); dragElement(documentgetElementById('plant8')); dragElement(documentgetElementById('plant9')); dragElement(documentgetElementById('plant10')); dragElement(documentgetElementById('plant11')); dragElement(documentgetElementById('plant12'));\ndragElement(document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 878,
    "chunk_index": 14,
    "total_chunks": 61
  },
  {
    "id": "c73c9fbde9c25499c34432262367fcda",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "のクロージャは広大で複雑なトピックです。このレッスンでは、このテラリウムのコードの中にクロージャがある、すなわち内側の関数と外側の関数は、内側の関数が外側の関数のスコープにアクセスできるように構築されているという最も基本的な考え方に触れます。これがどのように動作するかについての詳細な情報は 詳細なドキュメント を参照してください。 クロージャを使って DOM を操作します。 DOM をツリーと考え、Web ページのドキュメントを操作できるすべての方法を表しています。様々な API (Application Program Interfaces) が書かれており、プログラマーが自分の好きなプログラミング言語を使って DOM にアクセスし、編集、変更、再配置、その他の管理ができるようになっています。 DOM とそれを参照する HTML マークアップの表現。Olfa Nasraoui より このレッスンでは、ユーザーがページ上の植物を操作できるようにする JavaScript を作成して、インタラクティブなテラリウムプロジェクトを完成させます。 前提条件 テラリウムの HTML と CSS が完成しているはずです。このレッスンが終わる頃には、植物をドラッグしてテラリウムの中に入れたり出したりできるようになります。 タスク terrarium フォルダ内に scriptjs というファイルを作成します。このファイルを <head> セクションにインポートします。 ```html ``` > 注: HTML ファイルが完全に読み込まれた後にのみ JavaScript を実行できるようにするために、外部の JavaScript ファイルを HTML ファイルにインポートする際には defer を使用してください。また、async 属性を使用することもできます。これは HTML ファイルのパース中にスクリプトを実行できるようにしますが、私たちの場合は、ドラッグスクリプトを実行する前に HTML 要素を完全に利用できるようにしておくことが重要です。 DOM 要素 まず最初に必要なのは、DOM で操作したい要素への参照を作成することです。私たちの場合、それらは現在サイドバーで待機している14個の植物です。 タスク javascript dragElement(documentgetElementById('plant1')); dragElement(documentgetElementById('plant2')); dragElement(documentgetElementById('plant3')); dragElement(documentgetElementById('plant4')); dragElement(documentgetElementById('plant5')); dragElement(documentgetElementById('plant6')); dragElement(documentgetElementById('plant7')); dragElement(documentgetElementById('plant8')); dragElement(documentgetElementById('plant9')); dragElement(documentgetElementById('plant10')); dragElement(documentgetElementById('plant11')); dragElement(documentgetElementById('plant12')); dragElement(documentgetElementById('plant13'));\ndragElement(document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 886,
    "chunk_index": 15,
    "total_chunks": 61
  },
  {
    "id": "6456b719fe348ae66ebb2f6a7219c778",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "詳細なドキュメント を参照してください。 クロージャを使って DOM を操作します。 DOM をツリーと考え、Web ページのドキュメントを操作できるすべての方法を表しています。様々な API (Application Program Interfaces) が書かれており、プログラマーが自分の好きなプログラミング言語を使って DOM にアクセスし、編集、変更、再配置、その他の管理ができるようになっています。 DOM とそれを参照する HTML マークアップの表現。Olfa Nasraoui より このレッスンでは、ユーザーがページ上の植物を操作できるようにする JavaScript を作成して、インタラクティブなテラリウムプロジェクトを完成させます。 前提条件 テラリウムの HTML と CSS が完成しているはずです。このレッスンが終わる頃には、植物をドラッグしてテラリウムの中に入れたり出したりできるようになります。 タスク terrarium フォルダ内に scriptjs というファイルを作成します。このファイルを <head> セクションにインポートします。 ```html ``` > 注: HTML ファイルが完全に読み込まれた後にのみ JavaScript を実行できるようにするために、外部の JavaScript ファイルを HTML ファイルにインポートする際には defer を使用してください。また、async 属性を使用することもできます。これは HTML ファイルのパース中にスクリプトを実行できるようにしますが、私たちの場合は、ドラッグスクリプトを実行する前に HTML 要素を完全に利用できるようにしておくことが重要です。 DOM 要素 まず最初に必要なのは、DOM で操作したい要素への参照を作成することです。私たちの場合、それらは現在サイドバーで待機している14個の植物です。 タスク javascript dragElement(documentgetElementById('plant1')); dragElement(documentgetElementById('plant2')); dragElement(documentgetElementById('plant3')); dragElement(documentgetElementById('plant4')); dragElement(documentgetElementById('plant5')); dragElement(documentgetElementById('plant6')); dragElement(documentgetElementById('plant7')); dragElement(documentgetElementById('plant8')); dragElement(documentgetElementById('plant9')); dragElement(documentgetElementById('plant10')); dragElement(documentgetElementById('plant11')); dragElement(documentgetElementById('plant12')); dragElement(documentgetElementById('plant13')); dragElement(documentgetElementById('plant14'));\n何が起こっているのでしょうか",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 759,
    "chunk_index": 16,
    "total_chunks": 61
  },
  {
    "id": "6bc0cf5806a26fadd651035ba252dc94",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "を参照してください。 クロージャを使って DOM を操作します。 DOM をツリーと考え、Web ページのドキュメントを操作できるすべての方法を表しています。様々な API (Application Program Interfaces) が書かれており、プログラマーが自分の好きなプログラミング言語を使って DOM にアクセスし、編集、変更、再配置、その他の管理ができるようになっています。 DOM とそれを参照する HTML マークアップの表現。Olfa Nasraoui より このレッスンでは、ユーザーがページ上の植物を操作できるようにする JavaScript を作成して、インタラクティブなテラリウムプロジェクトを完成させます。 前提条件 テラリウムの HTML と CSS が完成しているはずです。このレッスンが終わる頃には、植物をドラッグしてテラリウムの中に入れたり出したりできるようになります。 タスク terrarium フォルダ内に scriptjs というファイルを作成します。このファイルを <head> セクションにインポートします。 ```html ``` > 注: HTML ファイルが完全に読み込まれた後にのみ JavaScript を実行できるようにするために、外部の JavaScript ファイルを HTML ファイルにインポートする際には defer を使用してください。また、async 属性を使用することもできます。これは HTML ファイルのパース中にスクリプトを実行できるようにしますが、私たちの場合は、ドラッグスクリプトを実行する前に HTML 要素を完全に利用できるようにしておくことが重要です。 DOM 要素 まず最初に必要なのは、DOM で操作したい要素への参照を作成することです。私たちの場合、それらは現在サイドバーで待機している14個の植物です。 タスク javascript dragElement(documentgetElementById('plant1')); dragElement(documentgetElementById('plant2')); dragElement(documentgetElementById('plant3')); dragElement(documentgetElementById('plant4')); dragElement(documentgetElementById('plant5')); dragElement(documentgetElementById('plant6')); dragElement(documentgetElementById('plant7')); dragElement(documentgetElementById('plant8')); dragElement(documentgetElementById('plant9')); dragElement(documentgetElementById('plant10')); dragElement(documentgetElementById('plant11')); dragElement(documentgetElementById('plant12')); dragElement(documentgetElementById('plant13')); dragElement(documentgetElementById('plant14')); 何が起こっているのでしょうかドキュメントを参照し、特定の ID を持つ要素を見つけるために DOM を調べています。HTML の最初のレッスンで、各植物画像に個別の ID (id=\"plant1\") を与えたことを覚えていますか",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 832,
    "chunk_index": 17,
    "total_chunks": 61
  },
  {
    "id": "9f10fac6bebad2d88d4a10a4c0d5ecc9",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "(Application Program Interfaces) が書かれており、プログラマーが自分の好きなプログラミング言語を使って DOM にアクセスし、編集、変更、再配置、その他の管理ができるようになっています。 DOM とそれを参照する HTML マークアップの表現。Olfa Nasraoui より このレッスンでは、ユーザーがページ上の植物を操作できるようにする JavaScript を作成して、インタラクティブなテラリウムプロジェクトを完成させます。 前提条件 テラリウムの HTML と CSS が完成しているはずです。このレッスンが終わる頃には、植物をドラッグしてテラリウムの中に入れたり出したりできるようになります。 タスク terrarium フォルダ内に scriptjs というファイルを作成します。このファイルを <head> セクションにインポートします。 ```html ``` > 注: HTML ファイルが完全に読み込まれた後にのみ JavaScript を実行できるようにするために、外部の JavaScript ファイルを HTML ファイルにインポートする際には defer を使用してください。また、async 属性を使用することもできます。これは HTML ファイルのパース中にスクリプトを実行できるようにしますが、私たちの場合は、ドラッグスクリプトを実行する前に HTML 要素を完全に利用できるようにしておくことが重要です。 DOM 要素 まず最初に必要なのは、DOM で操作したい要素への参照を作成することです。私たちの場合、それらは現在サイドバーで待機している14個の植物です。 タスク javascript dragElement(documentgetElementById('plant1')); dragElement(documentgetElementById('plant2')); dragElement(documentgetElementById('plant3')); dragElement(documentgetElementById('plant4')); dragElement(documentgetElementById('plant5')); dragElement(documentgetElementById('plant6')); dragElement(documentgetElementById('plant7')); dragElement(documentgetElementById('plant8')); dragElement(documentgetElementById('plant9')); dragElement(documentgetElementById('plant10')); dragElement(documentgetElementById('plant11')); dragElement(documentgetElementById('plant12')); dragElement(documentgetElementById('plant13')); dragElement(documentgetElementById('plant14')); 何が起こっているのでしょうかドキュメントを参照し、特定の ID を持つ要素を見つけるために DOM を調べています。HTML の最初のレッスンで、各植物画像に個別の ID (id=\"plant1\") を与えたことを覚えていますか今度はその努力を利用してみましょう。各要素を識別した後、その項目を dragElement という関数に渡します。これで、HTML 内の要素がドラッグ可能になりました。\n✅ なぜ Id で要素を参照するのか",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 854,
    "chunk_index": 18,
    "total_chunks": 61
  },
  {
    "id": "6976776b9094ec6d665c40bf215c88dc",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "とそれを参照する HTML マークアップの表現。Olfa Nasraoui より このレッスンでは、ユーザーがページ上の植物を操作できるようにする JavaScript を作成して、インタラクティブなテラリウムプロジェクトを完成させます。 前提条件 テラリウムの HTML と CSS が完成しているはずです。このレッスンが終わる頃には、植物をドラッグしてテラリウムの中に入れたり出したりできるようになります。 タスク terrarium フォルダ内に scriptjs というファイルを作成します。このファイルを <head> セクションにインポートします。 ```html ``` > 注: HTML ファイルが完全に読み込まれた後にのみ JavaScript を実行できるようにするために、外部の JavaScript ファイルを HTML ファイルにインポートする際には defer を使用してください。また、async 属性を使用することもできます。これは HTML ファイルのパース中にスクリプトを実行できるようにしますが、私たちの場合は、ドラッグスクリプトを実行する前に HTML 要素を完全に利用できるようにしておくことが重要です。 DOM 要素 まず最初に必要なのは、DOM で操作したい要素への参照を作成することです。私たちの場合、それらは現在サイドバーで待機している14個の植物です。 タスク javascript dragElement(documentgetElementById('plant1')); dragElement(documentgetElementById('plant2')); dragElement(documentgetElementById('plant3')); dragElement(documentgetElementById('plant4')); dragElement(documentgetElementById('plant5')); dragElement(documentgetElementById('plant6')); dragElement(documentgetElementById('plant7')); dragElement(documentgetElementById('plant8')); dragElement(documentgetElementById('plant9')); dragElement(documentgetElementById('plant10')); dragElement(documentgetElementById('plant11')); dragElement(documentgetElementById('plant12')); dragElement(documentgetElementById('plant13')); dragElement(documentgetElementById('plant14')); 何が起こっているのでしょうかドキュメントを参照し、特定の ID を持つ要素を見つけるために DOM を調べています。HTML の最初のレッスンで、各植物画像に個別の ID (id=\"plant1\") を与えたことを覚えていますか今度はその努力を利用してみましょう。各要素を識別した後、その項目を dragElement という関数に渡します。これで、HTML 内の要素がドラッグ可能になりました。 ✅ なぜ Id で要素を参照するのかなぜ CSS クラスではなく Id で要素を参照するのでしょうか",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 807,
    "chunk_index": 19,
    "total_chunks": 61
  },
  {
    "id": "d49fb7db5afef7e6216d33fd60b96de5",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "より このレッスンでは、ユーザーがページ上の植物を操作できるようにする JavaScript を作成して、インタラクティブなテラリウムプロジェクトを完成させます。 前提条件 テラリウムの HTML と CSS が完成しているはずです。このレッスンが終わる頃には、植物をドラッグしてテラリウムの中に入れたり出したりできるようになります。 タスク terrarium フォルダ内に scriptjs というファイルを作成します。このファイルを <head> セクションにインポートします。 ```html ``` > 注: HTML ファイルが完全に読み込まれた後にのみ JavaScript を実行できるようにするために、外部の JavaScript ファイルを HTML ファイルにインポートする際には defer を使用してください。また、async 属性を使用することもできます。これは HTML ファイルのパース中にスクリプトを実行できるようにしますが、私たちの場合は、ドラッグスクリプトを実行する前に HTML 要素を完全に利用できるようにしておくことが重要です。 DOM 要素 まず最初に必要なのは、DOM で操作したい要素への参照を作成することです。私たちの場合、それらは現在サイドバーで待機している14個の植物です。 タスク javascript dragElement(documentgetElementById('plant1')); dragElement(documentgetElementById('plant2')); dragElement(documentgetElementById('plant3')); dragElement(documentgetElementById('plant4')); dragElement(documentgetElementById('plant5')); dragElement(documentgetElementById('plant6')); dragElement(documentgetElementById('plant7')); dragElement(documentgetElementById('plant8')); dragElement(documentgetElementById('plant9')); dragElement(documentgetElementById('plant10')); dragElement(documentgetElementById('plant11')); dragElement(documentgetElementById('plant12')); dragElement(documentgetElementById('plant13')); dragElement(documentgetElementById('plant14')); 何が起こっているのでしょうかドキュメントを参照し、特定の ID を持つ要素を見つけるために DOM を調べています。HTML の最初のレッスンで、各植物画像に個別の ID (id=\"plant1\") を与えたことを覚えていますか今度はその努力を利用してみましょう。各要素を識別した後、その項目を dragElement という関数に渡します。これで、HTML 内の要素がドラッグ可能になりました。 ✅ なぜ Id で要素を参照するのかなぜ CSS クラスではなく Id で要素を参照するのでしょうかこの質問に答えるには、前回の CSS のレッスンを参照してください。\nクロージャ\nこれで、内部の関数や関数 (ここでは3つの関数) を囲む外部関数である dragElement クロージャを作成する準備が整いました。\nクロージャは、1つ以上の関数が外部関数のスコープにアクセスする必要がある場合に便利です。以下に例を示します。\njavascript\nfunction displayCandy(){\nlet candy = ['jellybeans'];\nfunction addCandy(candyType) {\ncandy",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 942,
    "chunk_index": 20,
    "total_chunks": 61
  },
  {
    "id": "662e8d58d0ef91539d3bccae101dd526",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "注: HTML ファイルが完全に読み込まれた後にのみ JavaScript を実行できるようにするために、外部の JavaScript ファイルを HTML ファイルにインポートする際には defer を使用してください。また、async 属性を使用することもできます。これは HTML ファイルのパース中にスクリプトを実行できるようにしますが、私たちの場合は、ドラッグスクリプトを実行する前に HTML 要素を完全に利用できるようにしておくことが重要です。 DOM 要素 まず最初に必要なのは、DOM で操作したい要素への参照を作成することです。私たちの場合、それらは現在サイドバーで待機している14個の植物です。 タスク javascript dragElement(documentgetElementById('plant1')); dragElement(documentgetElementById('plant2')); dragElement(documentgetElementById('plant3')); dragElement(documentgetElementById('plant4')); dragElement(documentgetElementById('plant5')); dragElement(documentgetElementById('plant6')); dragElement(documentgetElementById('plant7')); dragElement(documentgetElementById('plant8')); dragElement(documentgetElementById('plant9')); dragElement(documentgetElementById('plant10')); dragElement(documentgetElementById('plant11')); dragElement(documentgetElementById('plant12')); dragElement(documentgetElementById('plant13')); dragElement(documentgetElementById('plant14')); 何が起こっているのでしょうかドキュメントを参照し、特定の ID を持つ要素を見つけるために DOM を調べています。HTML の最初のレッスンで、各植物画像に個別の ID (id=\"plant1\") を与えたことを覚えていますか今度はその努力を利用してみましょう。各要素を識別した後、その項目を dragElement という関数に渡します。これで、HTML 内の要素がドラッグ可能になりました。 ✅ なぜ Id で要素を参照するのかなぜ CSS クラスではなく Id で要素を参照するのでしょうかこの質問に答えるには、前回の CSS のレッスンを参照してください。 クロージャ これで、内部の関数や関数 (ここでは3つの関数) を囲む外部関数である dragElement クロージャを作成する準備が整いました。 クロージャは、1つ以上の関数が外部関数のスコープにアクセスする必要がある場合に便利です。以下に例を示します。 javascript function displayCandy(){ let candy = ['jellybeans']; function addCandy(candyType) { candypush(candyType)\n}\naddCandy('gumdrops');\n}\ndisplayCandy();\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 769,
    "chunk_index": 21,
    "total_chunks": 61
  },
  {
    "id": "438db13277a921b064974b701a499446",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "JavaScript ファイルを HTML ファイルにインポートする際には defer を使用してください。また、async 属性を使用することもできます。これは HTML ファイルのパース中にスクリプトを実行できるようにしますが、私たちの場合は、ドラッグスクリプトを実行する前に HTML 要素を完全に利用できるようにしておくことが重要です。 DOM 要素 まず最初に必要なのは、DOM で操作したい要素への参照を作成することです。私たちの場合、それらは現在サイドバーで待機している14個の植物です。 タスク javascript dragElement(documentgetElementById('plant1')); dragElement(documentgetElementById('plant2')); dragElement(documentgetElementById('plant3')); dragElement(documentgetElementById('plant4')); dragElement(documentgetElementById('plant5')); dragElement(documentgetElementById('plant6')); dragElement(documentgetElementById('plant7')); dragElement(documentgetElementById('plant8')); dragElement(documentgetElementById('plant9')); dragElement(documentgetElementById('plant10')); dragElement(documentgetElementById('plant11')); dragElement(documentgetElementById('plant12')); dragElement(documentgetElementById('plant13')); dragElement(documentgetElementById('plant14')); 何が起こっているのでしょうかドキュメントを参照し、特定の ID を持つ要素を見つけるために DOM を調べています。HTML の最初のレッスンで、各植物画像に個別の ID (id=\"plant1\") を与えたことを覚えていますか今度はその努力を利用してみましょう。各要素を識別した後、その項目を dragElement という関数に渡します。これで、HTML 内の要素がドラッグ可能になりました。 ✅ なぜ Id で要素を参照するのかなぜ CSS クラスではなく Id で要素を参照するのでしょうかこの質問に答えるには、前回の CSS のレッスンを参照してください。 クロージャ これで、内部の関数や関数 (ここでは3つの関数) を囲む外部関数である dragElement クロージャを作成する準備が整いました。 クロージャは、1つ以上の関数が外部関数のスコープにアクセスする必要がある場合に便利です。以下に例を示します。 javascript function displayCandy(){ let candy = ['jellybeans']; function addCandy(candyType) { candypush(candyType) } addCandy('gumdrops'); } displayCandy(); consolelog(candy)\nこの例では、displayCandy 関数は、新しい candy 型を関数内に既に存在する配列にプッシュする関数を囲んでいます。このコードを実行した場合、candy 配列はローカル変数 (クロージャのローカル) であるため、未定義になってしまいます。\n✅ 配列 candy にアクセスできるようにするにはどうすればよいでしょうか",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 863,
    "chunk_index": 22,
    "total_chunks": 61
  },
  {
    "id": "7b1225f05f3805c89ab6838e84c61294",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "DOM 要素 まず最初に必要なのは、DOM で操作したい要素への参照を作成することです。私たちの場合、それらは現在サイドバーで待機している14個の植物です。 タスク javascript dragElement(documentgetElementById('plant1')); dragElement(documentgetElementById('plant2')); dragElement(documentgetElementById('plant3')); dragElement(documentgetElementById('plant4')); dragElement(documentgetElementById('plant5')); dragElement(documentgetElementById('plant6')); dragElement(documentgetElementById('plant7')); dragElement(documentgetElementById('plant8')); dragElement(documentgetElementById('plant9')); dragElement(documentgetElementById('plant10')); dragElement(documentgetElementById('plant11')); dragElement(documentgetElementById('plant12')); dragElement(documentgetElementById('plant13')); dragElement(documentgetElementById('plant14')); 何が起こっているのでしょうかドキュメントを参照し、特定の ID を持つ要素を見つけるために DOM を調べています。HTML の最初のレッスンで、各植物画像に個別の ID (id=\"plant1\") を与えたことを覚えていますか今度はその努力を利用してみましょう。各要素を識別した後、その項目を dragElement という関数に渡します。これで、HTML 内の要素がドラッグ可能になりました。 ✅ なぜ Id で要素を参照するのかなぜ CSS クラスではなく Id で要素を参照するのでしょうかこの質問に答えるには、前回の CSS のレッスンを参照してください。 クロージャ これで、内部の関数や関数 (ここでは3つの関数) を囲む外部関数である dragElement クロージャを作成する準備が整いました。 クロージャは、1つ以上の関数が外部関数のスコープにアクセスする必要がある場合に便利です。以下に例を示します。 javascript function displayCandy(){ let candy = ['jellybeans']; function addCandy(candyType) { candypush(candyType) } addCandy('gumdrops'); } displayCandy(); consolelog(candy) この例では、displayCandy 関数は、新しい candy 型を関数内に既に存在する配列にプッシュする関数を囲んでいます。このコードを実行した場合、candy 配列はローカル変数 (クロージャのローカル) であるため、未定義になってしまいます。 ✅ 配列 candy にアクセスできるようにするにはどうすればよいでしょうかクロージャの外に移動させてみてください。こうすることで、配列がグローバルになり、クロージャのローカルスコープでのみ利用できるようになります。\nタスク\nscript",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 804,
    "chunk_index": 23,
    "total_chunks": 61
  },
  {
    "id": "b7e479222599a6937acf3e15c6c2e5df",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "まず最初に必要なのは、DOM で操作したい要素への参照を作成することです。私たちの場合、それらは現在サイドバーで待機している14個の植物です。 タスク javascript dragElement(documentgetElementById('plant1')); dragElement(documentgetElementById('plant2')); dragElement(documentgetElementById('plant3')); dragElement(documentgetElementById('plant4')); dragElement(documentgetElementById('plant5')); dragElement(documentgetElementById('plant6')); dragElement(documentgetElementById('plant7')); dragElement(documentgetElementById('plant8')); dragElement(documentgetElementById('plant9')); dragElement(documentgetElementById('plant10')); dragElement(documentgetElementById('plant11')); dragElement(documentgetElementById('plant12')); dragElement(documentgetElementById('plant13')); dragElement(documentgetElementById('plant14')); 何が起こっているのでしょうかドキュメントを参照し、特定の ID を持つ要素を見つけるために DOM を調べています。HTML の最初のレッスンで、各植物画像に個別の ID (id=\"plant1\") を与えたことを覚えていますか今度はその努力を利用してみましょう。各要素を識別した後、その項目を dragElement という関数に渡します。これで、HTML 内の要素がドラッグ可能になりました。 ✅ なぜ Id で要素を参照するのかなぜ CSS クラスではなく Id で要素を参照するのでしょうかこの質問に答えるには、前回の CSS のレッスンを参照してください。 クロージャ これで、内部の関数や関数 (ここでは3つの関数) を囲む外部関数である dragElement クロージャを作成する準備が整いました。 クロージャは、1つ以上の関数が外部関数のスコープにアクセスする必要がある場合に便利です。以下に例を示します。 javascript function displayCandy(){ let candy = ['jellybeans']; function addCandy(candyType) { candypush(candyType) } addCandy('gumdrops'); } displayCandy(); consolelog(candy) この例では、displayCandy 関数は、新しい candy 型を関数内に既に存在する配列にプッシュする関数を囲んでいます。このコードを実行した場合、candy 配列はローカル変数 (クロージャのローカル) であるため、未定義になってしまいます。 ✅ 配列 candy にアクセスできるようにするにはどうすればよいでしょうかクロージャの外に移動させてみてください。こうすることで、配列がグローバルになり、クロージャのローカルスコープでのみ利用できるようになります。 タスク scriptjs の要素宣言の下に、関数を作成します。\njavascript\nfunction dragElement(terrariumElement) {\n//スクリーン上の位置のための 4 つの位置を置きます\nlet pos1 = 0,\npos2 = 0,\npos3 = 0,\npos4 = 0;\nterrariumElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 879,
    "chunk_index": 24,
    "total_chunks": 61
  },
  {
    "id": "4810ef49a42c068baee731a3fbb0bcb7",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "を調べています。HTML の最初のレッスンで、各植物画像に個別の ID (id=\"plant1\") を与えたことを覚えていますか今度はその努力を利用してみましょう。各要素を識別した後、その項目を dragElement という関数に渡します。これで、HTML 内の要素がドラッグ可能になりました。 ✅ なぜ Id で要素を参照するのかなぜ CSS クラスではなく Id で要素を参照するのでしょうかこの質問に答えるには、前回の CSS のレッスンを参照してください。 クロージャ これで、内部の関数や関数 (ここでは3つの関数) を囲む外部関数である dragElement クロージャを作成する準備が整いました。 クロージャは、1つ以上の関数が外部関数のスコープにアクセスする必要がある場合に便利です。以下に例を示します。 javascript function displayCandy(){ let candy = ['jellybeans']; function addCandy(candyType) { candypush(candyType) } addCandy('gumdrops'); } displayCandy(); consolelog(candy) この例では、displayCandy 関数は、新しい candy 型を関数内に既に存在する配列にプッシュする関数を囲んでいます。このコードを実行した場合、candy 配列はローカル変数 (クロージャのローカル) であるため、未定義になってしまいます。 ✅ 配列 candy にアクセスできるようにするにはどうすればよいでしょうかクロージャの外に移動させてみてください。こうすることで、配列がグローバルになり、クロージャのローカルスコープでのみ利用できるようになります。 タスク scriptjs の要素宣言の下に、関数を作成します。 javascript function dragElement(terrariumElement) { //スクリーン上の位置のための 4 つの位置を置きます let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0; terrariumElementonpointerdown = pointerDrag;\n}\ndragElement はスクリプトの先頭にある宣言から terrariumElement オブジェクトを取得します。そして、関数に渡されたオブジェクトのローカル位置を 0 に設定します。これらは、クロージャ内で各要素にドラッグ＆ドロップ機能を追加する際に、各要素に対して操作されるローカル変数です。テラリウムにはこれらの要素がドラッグされて配置されるので、アプリケーションはこれらの要素がどこに配置されたかを把握しておく必要があります。\nさらに、この関数に渡された terrariumElement には pointerdown イベントが割り当てられており、これは DOM の管理を支援するために設計された Web API の一部です。onpointerdown は、ボタンが押されたとき、あるいはドラッグ可能な要素がタッチされたときに発生します。このイベントハンドラは、いくつかの例外を除いて、Web ブラウザとモバイルブラウザの両方で動作します。\n✅ イベントハンドラの onclick はクロスブラウザに対応しています。ここで使用する理由は何でしょうか",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1030,
    "chunk_index": 25,
    "total_chunks": 61
  },
  {
    "id": "8cda7c0c0b4376568df5951ee9d47de4",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "javascript function displayCandy(){ let candy = ['jellybeans']; function addCandy(candyType) { candypush(candyType) } addCandy('gumdrops'); } displayCandy(); consolelog(candy) この例では、displayCandy 関数は、新しい candy 型を関数内に既に存在する配列にプッシュする関数を囲んでいます。このコードを実行した場合、candy 配列はローカル変数 (クロージャのローカル) であるため、未定義になってしまいます。 ✅ 配列 candy にアクセスできるようにするにはどうすればよいでしょうかクロージャの外に移動させてみてください。こうすることで、配列がグローバルになり、クロージャのローカルスコープでのみ利用できるようになります。 タスク scriptjs の要素宣言の下に、関数を作成します。 javascript function dragElement(terrariumElement) { //スクリーン上の位置のための 4 つの位置を置きます let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0; terrariumElementonpointerdown = pointerDrag; } dragElement はスクリプトの先頭にある宣言から terrariumElement オブジェクトを取得します。そして、関数に渡されたオブジェクトのローカル位置を 0 に設定します。これらは、クロージャ内で各要素にドラッグ＆ドロップ機能を追加する際に、各要素に対して操作されるローカル変数です。テラリウムにはこれらの要素がドラッグされて配置されるので、アプリケーションはこれらの要素がどこに配置されたかを把握しておく必要があります。 さらに、この関数に渡された terrariumElement には pointerdown イベントが割り当てられており、これは DOM の管理を支援するために設計された Web API の一部です。onpointerdown は、ボタンが押されたとき、あるいはドラッグ可能な要素がタッチされたときに発生します。このイベントハンドラは、いくつかの例外を除いて、Web ブラウザとモバイルブラウザの両方で動作します。 ✅ イベントハンドラの onclick はクロスブラウザに対応しています。ここで使用する理由は何でしょうかここで作成しようとしているスクリーンインタラクションの正確なタイプを考えてみてください。\nPointerdrag 関数\nテラリウム要素をドラッグする準備ができました。イベント onpointerdown が発生すると、関数 pointerDrag が呼び出されます。この行のすぐ下にこの関数を追加します: terrariumElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 847,
    "chunk_index": 26,
    "total_chunks": 61
  },
  {
    "id": "69ae345d171c9bb05bf6495506156a9e",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "addCandy(candyType) { candypush(candyType) } addCandy('gumdrops'); } displayCandy(); consolelog(candy) この例では、displayCandy 関数は、新しい candy 型を関数内に既に存在する配列にプッシュする関数を囲んでいます。このコードを実行した場合、candy 配列はローカル変数 (クロージャのローカル) であるため、未定義になってしまいます。 ✅ 配列 candy にアクセスできるようにするにはどうすればよいでしょうかクロージャの外に移動させてみてください。こうすることで、配列がグローバルになり、クロージャのローカルスコープでのみ利用できるようになります。 タスク scriptjs の要素宣言の下に、関数を作成します。 javascript function dragElement(terrariumElement) { //スクリーン上の位置のための 4 つの位置を置きます let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0; terrariumElementonpointerdown = pointerDrag; } dragElement はスクリプトの先頭にある宣言から terrariumElement オブジェクトを取得します。そして、関数に渡されたオブジェクトのローカル位置を 0 に設定します。これらは、クロージャ内で各要素にドラッグ＆ドロップ機能を追加する際に、各要素に対して操作されるローカル変数です。テラリウムにはこれらの要素がドラッグされて配置されるので、アプリケーションはこれらの要素がどこに配置されたかを把握しておく必要があります。 さらに、この関数に渡された terrariumElement には pointerdown イベントが割り当てられており、これは DOM の管理を支援するために設計された Web API の一部です。onpointerdown は、ボタンが押されたとき、あるいはドラッグ可能な要素がタッチされたときに発生します。このイベントハンドラは、いくつかの例外を除いて、Web ブラウザとモバイルブラウザの両方で動作します。 ✅ イベントハンドラの onclick はクロスブラウザに対応しています。ここで使用する理由は何でしょうかここで作成しようとしているスクリーンインタラクションの正確なタイプを考えてみてください。 Pointerdrag 関数 テラリウム要素をドラッグする準備ができました。イベント onpointerdown が発生すると、関数 pointerDrag が呼び出されます。この行のすぐ下にこの関数を追加します: terrariumElementonpointerdown = pointerDrag;\nTask\njavascript\nfunction pointerDrag(e) {\ne",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 850,
    "chunk_index": 27,
    "total_chunks": 61
  },
  {
    "id": "21f70ec1217724e1186d9669d957f349",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "この例では、displayCandy 関数は、新しい candy 型を関数内に既に存在する配列にプッシュする関数を囲んでいます。このコードを実行した場合、candy 配列はローカル変数 (クロージャのローカル) であるため、未定義になってしまいます。 ✅ 配列 candy にアクセスできるようにするにはどうすればよいでしょうかクロージャの外に移動させてみてください。こうすることで、配列がグローバルになり、クロージャのローカルスコープでのみ利用できるようになります。 タスク scriptjs の要素宣言の下に、関数を作成します。 javascript function dragElement(terrariumElement) { //スクリーン上の位置のための 4 つの位置を置きます let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0; terrariumElementonpointerdown = pointerDrag; } dragElement はスクリプトの先頭にある宣言から terrariumElement オブジェクトを取得します。そして、関数に渡されたオブジェクトのローカル位置を 0 に設定します。これらは、クロージャ内で各要素にドラッグ＆ドロップ機能を追加する際に、各要素に対して操作されるローカル変数です。テラリウムにはこれらの要素がドラッグされて配置されるので、アプリケーションはこれらの要素がどこに配置されたかを把握しておく必要があります。 さらに、この関数に渡された terrariumElement には pointerdown イベントが割り当てられており、これは DOM の管理を支援するために設計された Web API の一部です。onpointerdown は、ボタンが押されたとき、あるいはドラッグ可能な要素がタッチされたときに発生します。このイベントハンドラは、いくつかの例外を除いて、Web ブラウザとモバイルブラウザの両方で動作します。 ✅ イベントハンドラの onclick はクロスブラウザに対応しています。ここで使用する理由は何でしょうかここで作成しようとしているスクリーンインタラクションの正確なタイプを考えてみてください。 Pointerdrag 関数 テラリウム要素をドラッグする準備ができました。イベント onpointerdown が発生すると、関数 pointerDrag が呼び出されます。この行のすぐ下にこの関数を追加します: terrariumElementonpointerdown = pointerDrag; Task javascript function pointerDrag(e) { epreventDefault();\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 817,
    "chunk_index": 28,
    "total_chunks": 61
  },
  {
    "id": "ad1d4ef5bc6f6e95f9a49e7a84509862",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "関数は、新しい candy 型を関数内に既に存在する配列にプッシュする関数を囲んでいます。このコードを実行した場合、candy 配列はローカル変数 (クロージャのローカル) であるため、未定義になってしまいます。 ✅ 配列 candy にアクセスできるようにするにはどうすればよいでしょうかクロージャの外に移動させてみてください。こうすることで、配列がグローバルになり、クロージャのローカルスコープでのみ利用できるようになります。 タスク scriptjs の要素宣言の下に、関数を作成します。 javascript function dragElement(terrariumElement) { //スクリーン上の位置のための 4 つの位置を置きます let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0; terrariumElementonpointerdown = pointerDrag; } dragElement はスクリプトの先頭にある宣言から terrariumElement オブジェクトを取得します。そして、関数に渡されたオブジェクトのローカル位置を 0 に設定します。これらは、クロージャ内で各要素にドラッグ＆ドロップ機能を追加する際に、各要素に対して操作されるローカル変数です。テラリウムにはこれらの要素がドラッグされて配置されるので、アプリケーションはこれらの要素がどこに配置されたかを把握しておく必要があります。 さらに、この関数に渡された terrariumElement には pointerdown イベントが割り当てられており、これは DOM の管理を支援するために設計された Web API の一部です。onpointerdown は、ボタンが押されたとき、あるいはドラッグ可能な要素がタッチされたときに発生します。このイベントハンドラは、いくつかの例外を除いて、Web ブラウザとモバイルブラウザの両方で動作します。 ✅ イベントハンドラの onclick はクロスブラウザに対応しています。ここで使用する理由は何でしょうかここで作成しようとしているスクリーンインタラクションの正確なタイプを考えてみてください。 Pointerdrag 関数 テラリウム要素をドラッグする準備ができました。イベント onpointerdown が発生すると、関数 pointerDrag が呼び出されます。この行のすぐ下にこの関数を追加します: terrariumElementonpointerdown = pointerDrag; Task javascript function pointerDrag(e) { epreventDefault(); consolelog(e);\npos3 = e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 815,
    "chunk_index": 29,
    "total_chunks": 61
  },
  {
    "id": "592d900b9b8ec4dbf74991f455dbe16d",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "配列はローカル変数 (クロージャのローカル) であるため、未定義になってしまいます。 ✅ 配列 candy にアクセスできるようにするにはどうすればよいでしょうかクロージャの外に移動させてみてください。こうすることで、配列がグローバルになり、クロージャのローカルスコープでのみ利用できるようになります。 タスク scriptjs の要素宣言の下に、関数を作成します。 javascript function dragElement(terrariumElement) { //スクリーン上の位置のための 4 つの位置を置きます let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0; terrariumElementonpointerdown = pointerDrag; } dragElement はスクリプトの先頭にある宣言から terrariumElement オブジェクトを取得します。そして、関数に渡されたオブジェクトのローカル位置を 0 に設定します。これらは、クロージャ内で各要素にドラッグ＆ドロップ機能を追加する際に、各要素に対して操作されるローカル変数です。テラリウムにはこれらの要素がドラッグされて配置されるので、アプリケーションはこれらの要素がどこに配置されたかを把握しておく必要があります。 さらに、この関数に渡された terrariumElement には pointerdown イベントが割り当てられており、これは DOM の管理を支援するために設計された Web API の一部です。onpointerdown は、ボタンが押されたとき、あるいはドラッグ可能な要素がタッチされたときに発生します。このイベントハンドラは、いくつかの例外を除いて、Web ブラウザとモバイルブラウザの両方で動作します。 ✅ イベントハンドラの onclick はクロスブラウザに対応しています。ここで使用する理由は何でしょうかここで作成しようとしているスクリーンインタラクションの正確なタイプを考えてみてください。 Pointerdrag 関数 テラリウム要素をドラッグする準備ができました。イベント onpointerdown が発生すると、関数 pointerDrag が呼び出されます。この行のすぐ下にこの関数を追加します: terrariumElementonpointerdown = pointerDrag; Task javascript function pointerDrag(e) { epreventDefault(); consolelog(e); pos3 = eclientX;\npos4 = e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 771,
    "chunk_index": 30,
    "total_chunks": 61
  },
  {
    "id": "dec1af0908c84495afc5246eb01a735d",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "✅ 配列 candy にアクセスできるようにするにはどうすればよいでしょうかクロージャの外に移動させてみてください。こうすることで、配列がグローバルになり、クロージャのローカルスコープでのみ利用できるようになります。 タスク scriptjs の要素宣言の下に、関数を作成します。 javascript function dragElement(terrariumElement) { //スクリーン上の位置のための 4 つの位置を置きます let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0; terrariumElementonpointerdown = pointerDrag; } dragElement はスクリプトの先頭にある宣言から terrariumElement オブジェクトを取得します。そして、関数に渡されたオブジェクトのローカル位置を 0 に設定します。これらは、クロージャ内で各要素にドラッグ＆ドロップ機能を追加する際に、各要素に対して操作されるローカル変数です。テラリウムにはこれらの要素がドラッグされて配置されるので、アプリケーションはこれらの要素がどこに配置されたかを把握しておく必要があります。 さらに、この関数に渡された terrariumElement には pointerdown イベントが割り当てられており、これは DOM の管理を支援するために設計された Web API の一部です。onpointerdown は、ボタンが押されたとき、あるいはドラッグ可能な要素がタッチされたときに発生します。このイベントハンドラは、いくつかの例外を除いて、Web ブラウザとモバイルブラウザの両方で動作します。 ✅ イベントハンドラの onclick はクロスブラウザに対応しています。ここで使用する理由は何でしょうかここで作成しようとしているスクリーンインタラクションの正確なタイプを考えてみてください。 Pointerdrag 関数 テラリウム要素をドラッグする準備ができました。イベント onpointerdown が発生すると、関数 pointerDrag が呼び出されます。この行のすぐ下にこの関数を追加します: terrariumElementonpointerdown = pointerDrag; Task javascript function pointerDrag(e) { epreventDefault(); consolelog(e); pos3 = eclientX; pos4 = eclientY;\n}\nいくつかのことが起こります。まず、e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 754,
    "chunk_index": 31,
    "total_chunks": 61
  },
  {
    "id": "c1e99b4bd8b148f64756a7cf2c8ba7c6",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "candy にアクセスできるようにするにはどうすればよいでしょうかクロージャの外に移動させてみてください。こうすることで、配列がグローバルになり、クロージャのローカルスコープでのみ利用できるようになります。 タスク scriptjs の要素宣言の下に、関数を作成します。 javascript function dragElement(terrariumElement) { //スクリーン上の位置のための 4 つの位置を置きます let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0; terrariumElementonpointerdown = pointerDrag; } dragElement はスクリプトの先頭にある宣言から terrariumElement オブジェクトを取得します。そして、関数に渡されたオブジェクトのローカル位置を 0 に設定します。これらは、クロージャ内で各要素にドラッグ＆ドロップ機能を追加する際に、各要素に対して操作されるローカル変数です。テラリウムにはこれらの要素がドラッグされて配置されるので、アプリケーションはこれらの要素がどこに配置されたかを把握しておく必要があります。 さらに、この関数に渡された terrariumElement には pointerdown イベントが割り当てられており、これは DOM の管理を支援するために設計された Web API の一部です。onpointerdown は、ボタンが押されたとき、あるいはドラッグ可能な要素がタッチされたときに発生します。このイベントハンドラは、いくつかの例外を除いて、Web ブラウザとモバイルブラウザの両方で動作します。 ✅ イベントハンドラの onclick はクロスブラウザに対応しています。ここで使用する理由は何でしょうかここで作成しようとしているスクリーンインタラクションの正確なタイプを考えてみてください。 Pointerdrag 関数 テラリウム要素をドラッグする準備ができました。イベント onpointerdown が発生すると、関数 pointerDrag が呼び出されます。この行のすぐ下にこの関数を追加します: terrariumElementonpointerdown = pointerDrag; Task javascript function pointerDrag(e) { epreventDefault(); consolelog(e); pos3 = eclientX; pos4 = eclientY; } いくつかのことが起こります。まず、epreventDefault(); を使用してポインタダウン時に通常発生するデフォルトのイベントが発生しないようにします。このようにして、インターフェイスの動作をより制御することができます。\nスクリプトファイルを完全にビルドした後、この行に戻って e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 850,
    "chunk_index": 32,
    "total_chunks": 61
  },
  {
    "id": "0abefe7c15e222a8b4ad02273e762d58",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "scriptjs の要素宣言の下に、関数を作成します。 javascript function dragElement(terrariumElement) { //スクリーン上の位置のための 4 つの位置を置きます let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0; terrariumElementonpointerdown = pointerDrag; } dragElement はスクリプトの先頭にある宣言から terrariumElement オブジェクトを取得します。そして、関数に渡されたオブジェクトのローカル位置を 0 に設定します。これらは、クロージャ内で各要素にドラッグ＆ドロップ機能を追加する際に、各要素に対して操作されるローカル変数です。テラリウムにはこれらの要素がドラッグされて配置されるので、アプリケーションはこれらの要素がどこに配置されたかを把握しておく必要があります。 さらに、この関数に渡された terrariumElement には pointerdown イベントが割り当てられており、これは DOM の管理を支援するために設計された Web API の一部です。onpointerdown は、ボタンが押されたとき、あるいはドラッグ可能な要素がタッチされたときに発生します。このイベントハンドラは、いくつかの例外を除いて、Web ブラウザとモバイルブラウザの両方で動作します。 ✅ イベントハンドラの onclick はクロスブラウザに対応しています。ここで使用する理由は何でしょうかここで作成しようとしているスクリーンインタラクションの正確なタイプを考えてみてください。 Pointerdrag 関数 テラリウム要素をドラッグする準備ができました。イベント onpointerdown が発生すると、関数 pointerDrag が呼び出されます。この行のすぐ下にこの関数を追加します: terrariumElementonpointerdown = pointerDrag; Task javascript function pointerDrag(e) { epreventDefault(); consolelog(e); pos3 = eclientX; pos4 = eclientY; } いくつかのことが起こります。まず、epreventDefault(); を使用してポインタダウン時に通常発生するデフォルトのイベントが発生しないようにします。このようにして、インターフェイスの動作をより制御することができます。 スクリプトファイルを完全にビルドした後、この行に戻って epreventDefault() を使わずに試してみてください - どうなりますか？\n次に、ブラウザのウィンドウで index",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 793,
    "chunk_index": 33,
    "total_chunks": 61
  },
  {
    "id": "3473e8fd48a873e0458b566057e0ae04",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "{ //スクリーン上の位置のための 4 つの位置を置きます let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0; terrariumElementonpointerdown = pointerDrag; } dragElement はスクリプトの先頭にある宣言から terrariumElement オブジェクトを取得します。そして、関数に渡されたオブジェクトのローカル位置を 0 に設定します。これらは、クロージャ内で各要素にドラッグ＆ドロップ機能を追加する際に、各要素に対して操作されるローカル変数です。テラリウムにはこれらの要素がドラッグされて配置されるので、アプリケーションはこれらの要素がどこに配置されたかを把握しておく必要があります。 さらに、この関数に渡された terrariumElement には pointerdown イベントが割り当てられており、これは DOM の管理を支援するために設計された Web API の一部です。onpointerdown は、ボタンが押されたとき、あるいはドラッグ可能な要素がタッチされたときに発生します。このイベントハンドラは、いくつかの例外を除いて、Web ブラウザとモバイルブラウザの両方で動作します。 ✅ イベントハンドラの onclick はクロスブラウザに対応しています。ここで使用する理由は何でしょうかここで作成しようとしているスクリーンインタラクションの正確なタイプを考えてみてください。 Pointerdrag 関数 テラリウム要素をドラッグする準備ができました。イベント onpointerdown が発生すると、関数 pointerDrag が呼び出されます。この行のすぐ下にこの関数を追加します: terrariumElementonpointerdown = pointerDrag; Task javascript function pointerDrag(e) { epreventDefault(); consolelog(e); pos3 = eclientX; pos4 = eclientY; } いくつかのことが起こります。まず、epreventDefault(); を使用してポインタダウン時に通常発生するデフォルトのイベントが発生しないようにします。このようにして、インターフェイスの動作をより制御することができます。 スクリプトファイルを完全にビルドした後、この行に戻って epreventDefault() を使わずに試してみてください - どうなりますか？ 次に、ブラウザのウィンドウで indexhtml を開き、インターフェイスを調べる。植物をクリックすると、'e' イベントがどのように捕捉されているかを確認することができます。イベントを掘り下げて、1つのポインタダウンイベントでどれだけの情報が集まっているかを確認してみましょう",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 886,
    "chunk_index": 34,
    "total_chunks": 61
  },
  {
    "id": "41ecce3e0e385dcbd9bc1684cc372f12",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "4 つの位置を置きます let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0; terrariumElementonpointerdown = pointerDrag; } dragElement はスクリプトの先頭にある宣言から terrariumElement オブジェクトを取得します。そして、関数に渡されたオブジェクトのローカル位置を 0 に設定します。これらは、クロージャ内で各要素にドラッグ＆ドロップ機能を追加する際に、各要素に対して操作されるローカル変数です。テラリウムにはこれらの要素がドラッグされて配置されるので、アプリケーションはこれらの要素がどこに配置されたかを把握しておく必要があります。 さらに、この関数に渡された terrariumElement には pointerdown イベントが割り当てられており、これは DOM の管理を支援するために設計された Web API の一部です。onpointerdown は、ボタンが押されたとき、あるいはドラッグ可能な要素がタッチされたときに発生します。このイベントハンドラは、いくつかの例外を除いて、Web ブラウザとモバイルブラウザの両方で動作します。 ✅ イベントハンドラの onclick はクロスブラウザに対応しています。ここで使用する理由は何でしょうかここで作成しようとしているスクリーンインタラクションの正確なタイプを考えてみてください。 Pointerdrag 関数 テラリウム要素をドラッグする準備ができました。イベント onpointerdown が発生すると、関数 pointerDrag が呼び出されます。この行のすぐ下にこの関数を追加します: terrariumElementonpointerdown = pointerDrag; Task javascript function pointerDrag(e) { epreventDefault(); consolelog(e); pos3 = eclientX; pos4 = eclientY; } いくつかのことが起こります。まず、epreventDefault(); を使用してポインタダウン時に通常発生するデフォルトのイベントが発生しないようにします。このようにして、インターフェイスの動作をより制御することができます。 スクリプトファイルを完全にビルドした後、この行に戻って epreventDefault() を使わずに試してみてください - どうなりますか？ 次に、ブラウザのウィンドウで indexhtml を開き、インターフェイスを調べる。植物をクリックすると、'e' イベントがどのように捕捉されているかを確認することができます。イベントを掘り下げて、1つのポインタダウンイベントでどれだけの情報が集まっているかを確認してみましょう次に、ローカル変数 pos3 と pos4 が e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 890,
    "chunk_index": 35,
    "total_chunks": 61
  },
  {
    "id": "8c64b30fbd88a1cd4463da0dfebf2962",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "0, pos2 = 0, pos3 = 0, pos4 = 0; terrariumElementonpointerdown = pointerDrag; } dragElement はスクリプトの先頭にある宣言から terrariumElement オブジェクトを取得します。そして、関数に渡されたオブジェクトのローカル位置を 0 に設定します。これらは、クロージャ内で各要素にドラッグ＆ドロップ機能を追加する際に、各要素に対して操作されるローカル変数です。テラリウムにはこれらの要素がドラッグされて配置されるので、アプリケーションはこれらの要素がどこに配置されたかを把握しておく必要があります。 さらに、この関数に渡された terrariumElement には pointerdown イベントが割り当てられており、これは DOM の管理を支援するために設計された Web API の一部です。onpointerdown は、ボタンが押されたとき、あるいはドラッグ可能な要素がタッチされたときに発生します。このイベントハンドラは、いくつかの例外を除いて、Web ブラウザとモバイルブラウザの両方で動作します。 ✅ イベントハンドラの onclick はクロスブラウザに対応しています。ここで使用する理由は何でしょうかここで作成しようとしているスクリーンインタラクションの正確なタイプを考えてみてください。 Pointerdrag 関数 テラリウム要素をドラッグする準備ができました。イベント onpointerdown が発生すると、関数 pointerDrag が呼び出されます。この行のすぐ下にこの関数を追加します: terrariumElementonpointerdown = pointerDrag; Task javascript function pointerDrag(e) { epreventDefault(); consolelog(e); pos3 = eclientX; pos4 = eclientY; } いくつかのことが起こります。まず、epreventDefault(); を使用してポインタダウン時に通常発生するデフォルトのイベントが発生しないようにします。このようにして、インターフェイスの動作をより制御することができます。 スクリプトファイルを完全にビルドした後、この行に戻って epreventDefault() を使わずに試してみてください - どうなりますか？ 次に、ブラウザのウィンドウで indexhtml を開き、インターフェイスを調べる。植物をクリックすると、'e' イベントがどのように捕捉されているかを確認することができます。イベントを掘り下げて、1つのポインタダウンイベントでどれだけの情報が集まっているかを確認してみましょう次に、ローカル変数 pos3 と pos4 が eclientX に設定されていることに注目してください。e の値はインスペクションペインで見つけることができます。これらの値は、植物をクリックしたり触ったりした瞬間の x と y の座標を取得します。植物をクリックしたりドラッグしたりしたときの動作を細かく制御する必要があるので、その座標を把握しておく必要があります。\n✅ なぜこのアプリ全体が1つの大きなクロージャで構築されているのかがより明確になってきていますか",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1071,
    "chunk_index": 36,
    "total_chunks": 61
  },
  {
    "id": "a9e7dc94861228c35399fd0827d81750",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "= 0; terrariumElementonpointerdown = pointerDrag; } dragElement はスクリプトの先頭にある宣言から terrariumElement オブジェクトを取得します。そして、関数に渡されたオブジェクトのローカル位置を 0 に設定します。これらは、クロージャ内で各要素にドラッグ＆ドロップ機能を追加する際に、各要素に対して操作されるローカル変数です。テラリウムにはこれらの要素がドラッグされて配置されるので、アプリケーションはこれらの要素がどこに配置されたかを把握しておく必要があります。 さらに、この関数に渡された terrariumElement には pointerdown イベントが割り当てられており、これは DOM の管理を支援するために設計された Web API の一部です。onpointerdown は、ボタンが押されたとき、あるいはドラッグ可能な要素がタッチされたときに発生します。このイベントハンドラは、いくつかの例外を除いて、Web ブラウザとモバイルブラウザの両方で動作します。 ✅ イベントハンドラの onclick はクロスブラウザに対応しています。ここで使用する理由は何でしょうかここで作成しようとしているスクリーンインタラクションの正確なタイプを考えてみてください。 Pointerdrag 関数 テラリウム要素をドラッグする準備ができました。イベント onpointerdown が発生すると、関数 pointerDrag が呼び出されます。この行のすぐ下にこの関数を追加します: terrariumElementonpointerdown = pointerDrag; Task javascript function pointerDrag(e) { epreventDefault(); consolelog(e); pos3 = eclientX; pos4 = eclientY; } いくつかのことが起こります。まず、epreventDefault(); を使用してポインタダウン時に通常発生するデフォルトのイベントが発生しないようにします。このようにして、インターフェイスの動作をより制御することができます。 スクリプトファイルを完全にビルドした後、この行に戻って epreventDefault() を使わずに試してみてください - どうなりますか？ 次に、ブラウザのウィンドウで indexhtml を開き、インターフェイスを調べる。植物をクリックすると、'e' イベントがどのように捕捉されているかを確認することができます。イベントを掘り下げて、1つのポインタダウンイベントでどれだけの情報が集まっているかを確認してみましょう次に、ローカル変数 pos3 と pos4 が eclientX に設定されていることに注目してください。e の値はインスペクションペインで見つけることができます。これらの値は、植物をクリックしたり触ったりした瞬間の x と y の座標を取得します。植物をクリックしたりドラッグしたりしたときの動作を細かく制御する必要があるので、その座標を把握しておく必要があります。 ✅ なぜこのアプリ全体が1つの大きなクロージャで構築されているのかがより明確になってきていますかそうでないとしたら、どのようにして14個のドラッグ可能な植物のそれぞれのスコープを維持するのでしょうか",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1107,
    "chunk_index": 37,
    "total_chunks": 61
  },
  {
    "id": "6c5c5922b974ef161f86895ef3c35fd2",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "= 0; terrariumElementonpointerdown = pointerDrag; } dragElement はスクリプトの先頭にある宣言から terrariumElement オブジェクトを取得します。そして、関数に渡されたオブジェクトのローカル位置を 0 に設定します。これらは、クロージャ内で各要素にドラッグ＆ドロップ機能を追加する際に、各要素に対して操作されるローカル変数です。テラリウムにはこれらの要素がドラッグされて配置されるので、アプリケーションはこれらの要素がどこに配置されたかを把握しておく必要があります。 さらに、この関数に渡された terrariumElement には pointerdown イベントが割り当てられており、これは DOM の管理を支援するために設計された Web API の一部です。onpointerdown は、ボタンが押されたとき、あるいはドラッグ可能な要素がタッチされたときに発生します。このイベントハンドラは、いくつかの例外を除いて、Web ブラウザとモバイルブラウザの両方で動作します。 ✅ イベントハンドラの onclick はクロスブラウザに対応しています。ここで使用する理由は何でしょうかここで作成しようとしているスクリーンインタラクションの正確なタイプを考えてみてください。 Pointerdrag 関数 テラリウム要素をドラッグする準備ができました。イベント onpointerdown が発生すると、関数 pointerDrag が呼び出されます。この行のすぐ下にこの関数を追加します: terrariumElementonpointerdown = pointerDrag; Task javascript function pointerDrag(e) { epreventDefault(); consolelog(e); pos3 = eclientX; pos4 = eclientY; } いくつかのことが起こります。まず、epreventDefault(); を使用してポインタダウン時に通常発生するデフォルトのイベントが発生しないようにします。このようにして、インターフェイスの動作をより制御することができます。 スクリプトファイルを完全にビルドした後、この行に戻って epreventDefault() を使わずに試してみてください - どうなりますか？ 次に、ブラウザのウィンドウで indexhtml を開き、インターフェイスを調べる。植物をクリックすると、'e' イベントがどのように捕捉されているかを確認することができます。イベントを掘り下げて、1つのポインタダウンイベントでどれだけの情報が集まっているかを確認してみましょう次に、ローカル変数 pos3 と pos4 が eclientX に設定されていることに注目してください。e の値はインスペクションペインで見つけることができます。これらの値は、植物をクリックしたり触ったりした瞬間の x と y の座標を取得します。植物をクリックしたりドラッグしたりしたときの動作を細かく制御する必要があるので、その座標を把握しておく必要があります。 ✅ なぜこのアプリ全体が1つの大きなクロージャで構築されているのかがより明確になってきていますかそうでないとしたら、どのようにして14個のドラッグ可能な植物のそれぞれのスコープを維持するのでしょうかpos4 = e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1111,
    "chunk_index": 38,
    "total_chunks": 61
  },
  {
    "id": "a2ac0d269fb3d192f504391a89172d99",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "terrariumElementonpointerdown = pointerDrag; } dragElement はスクリプトの先頭にある宣言から terrariumElement オブジェクトを取得します。そして、関数に渡されたオブジェクトのローカル位置を 0 に設定します。これらは、クロージャ内で各要素にドラッグ＆ドロップ機能を追加する際に、各要素に対して操作されるローカル変数です。テラリウムにはこれらの要素がドラッグされて配置されるので、アプリケーションはこれらの要素がどこに配置されたかを把握しておく必要があります。 さらに、この関数に渡された terrariumElement には pointerdown イベントが割り当てられており、これは DOM の管理を支援するために設計された Web API の一部です。onpointerdown は、ボタンが押されたとき、あるいはドラッグ可能な要素がタッチされたときに発生します。このイベントハンドラは、いくつかの例外を除いて、Web ブラウザとモバイルブラウザの両方で動作します。 ✅ イベントハンドラの onclick はクロスブラウザに対応しています。ここで使用する理由は何でしょうかここで作成しようとしているスクリーンインタラクションの正確なタイプを考えてみてください。 Pointerdrag 関数 テラリウム要素をドラッグする準備ができました。イベント onpointerdown が発生すると、関数 pointerDrag が呼び出されます。この行のすぐ下にこの関数を追加します: terrariumElementonpointerdown = pointerDrag; Task javascript function pointerDrag(e) { epreventDefault(); consolelog(e); pos3 = eclientX; pos4 = eclientY; } いくつかのことが起こります。まず、epreventDefault(); を使用してポインタダウン時に通常発生するデフォルトのイベントが発生しないようにします。このようにして、インターフェイスの動作をより制御することができます。 スクリプトファイルを完全にビルドした後、この行に戻って epreventDefault() を使わずに試してみてください - どうなりますか？ 次に、ブラウザのウィンドウで indexhtml を開き、インターフェイスを調べる。植物をクリックすると、'e' イベントがどのように捕捉されているかを確認することができます。イベントを掘り下げて、1つのポインタダウンイベントでどれだけの情報が集まっているかを確認してみましょう次に、ローカル変数 pos3 と pos4 が eclientX に設定されていることに注目してください。e の値はインスペクションペインで見つけることができます。これらの値は、植物をクリックしたり触ったりした瞬間の x と y の座標を取得します。植物をクリックしたりドラッグしたりしたときの動作を細かく制御する必要があるので、その座標を把握しておく必要があります。 ✅ なぜこのアプリ全体が1つの大きなクロージャで構築されているのかがより明確になってきていますかそうでないとしたら、どのようにして14個のドラッグ可能な植物のそれぞれのスコープを維持するのでしょうかpos4 = eclientY の下にポインタイベントの操作を2つ追加して、初期関数を完成させます。\njavascript\ndocument",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1142,
    "chunk_index": 39,
    "total_chunks": 61
  },
  {
    "id": "e6366d40c7e2dbb643c913e7ed91aec5",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "} dragElement はスクリプトの先頭にある宣言から terrariumElement オブジェクトを取得します。そして、関数に渡されたオブジェクトのローカル位置を 0 に設定します。これらは、クロージャ内で各要素にドラッグ＆ドロップ機能を追加する際に、各要素に対して操作されるローカル変数です。テラリウムにはこれらの要素がドラッグされて配置されるので、アプリケーションはこれらの要素がどこに配置されたかを把握しておく必要があります。 さらに、この関数に渡された terrariumElement には pointerdown イベントが割り当てられており、これは DOM の管理を支援するために設計された Web API の一部です。onpointerdown は、ボタンが押されたとき、あるいはドラッグ可能な要素がタッチされたときに発生します。このイベントハンドラは、いくつかの例外を除いて、Web ブラウザとモバイルブラウザの両方で動作します。 ✅ イベントハンドラの onclick はクロスブラウザに対応しています。ここで使用する理由は何でしょうかここで作成しようとしているスクリーンインタラクションの正確なタイプを考えてみてください。 Pointerdrag 関数 テラリウム要素をドラッグする準備ができました。イベント onpointerdown が発生すると、関数 pointerDrag が呼び出されます。この行のすぐ下にこの関数を追加します: terrariumElementonpointerdown = pointerDrag; Task javascript function pointerDrag(e) { epreventDefault(); consolelog(e); pos3 = eclientX; pos4 = eclientY; } いくつかのことが起こります。まず、epreventDefault(); を使用してポインタダウン時に通常発生するデフォルトのイベントが発生しないようにします。このようにして、インターフェイスの動作をより制御することができます。 スクリプトファイルを完全にビルドした後、この行に戻って epreventDefault() を使わずに試してみてください - どうなりますか？ 次に、ブラウザのウィンドウで indexhtml を開き、インターフェイスを調べる。植物をクリックすると、'e' イベントがどのように捕捉されているかを確認することができます。イベントを掘り下げて、1つのポインタダウンイベントでどれだけの情報が集まっているかを確認してみましょう次に、ローカル変数 pos3 と pos4 が eclientX に設定されていることに注目してください。e の値はインスペクションペインで見つけることができます。これらの値は、植物をクリックしたり触ったりした瞬間の x と y の座標を取得します。植物をクリックしたりドラッグしたりしたときの動作を細かく制御する必要があるので、その座標を把握しておく必要があります。 ✅ なぜこのアプリ全体が1つの大きなクロージャで構築されているのかがより明確になってきていますかそうでないとしたら、どのようにして14個のドラッグ可能な植物のそれぞれのスコープを維持するのでしょうかpos4 = eclientY の下にポインタイベントの操作を2つ追加して、初期関数を完成させます。 javascript documentonpointermove = elementDrag;\ndocument",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1139,
    "chunk_index": 40,
    "total_chunks": 61
  },
  {
    "id": "95753b9100192dbcb8b5bbad430c748b",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "terrariumElement オブジェクトを取得します。そして、関数に渡されたオブジェクトのローカル位置を 0 に設定します。これらは、クロージャ内で各要素にドラッグ＆ドロップ機能を追加する際に、各要素に対して操作されるローカル変数です。テラリウムにはこれらの要素がドラッグされて配置されるので、アプリケーションはこれらの要素がどこに配置されたかを把握しておく必要があります。 さらに、この関数に渡された terrariumElement には pointerdown イベントが割り当てられており、これは DOM の管理を支援するために設計された Web API の一部です。onpointerdown は、ボタンが押されたとき、あるいはドラッグ可能な要素がタッチされたときに発生します。このイベントハンドラは、いくつかの例外を除いて、Web ブラウザとモバイルブラウザの両方で動作します。 ✅ イベントハンドラの onclick はクロスブラウザに対応しています。ここで使用する理由は何でしょうかここで作成しようとしているスクリーンインタラクションの正確なタイプを考えてみてください。 Pointerdrag 関数 テラリウム要素をドラッグする準備ができました。イベント onpointerdown が発生すると、関数 pointerDrag が呼び出されます。この行のすぐ下にこの関数を追加します: terrariumElementonpointerdown = pointerDrag; Task javascript function pointerDrag(e) { epreventDefault(); consolelog(e); pos3 = eclientX; pos4 = eclientY; } いくつかのことが起こります。まず、epreventDefault(); を使用してポインタダウン時に通常発生するデフォルトのイベントが発生しないようにします。このようにして、インターフェイスの動作をより制御することができます。 スクリプトファイルを完全にビルドした後、この行に戻って epreventDefault() を使わずに試してみてください - どうなりますか？ 次に、ブラウザのウィンドウで indexhtml を開き、インターフェイスを調べる。植物をクリックすると、'e' イベントがどのように捕捉されているかを確認することができます。イベントを掘り下げて、1つのポインタダウンイベントでどれだけの情報が集まっているかを確認してみましょう次に、ローカル変数 pos3 と pos4 が eclientX に設定されていることに注目してください。e の値はインスペクションペインで見つけることができます。これらの値は、植物をクリックしたり触ったりした瞬間の x と y の座標を取得します。植物をクリックしたりドラッグしたりしたときの動作を細かく制御する必要があるので、その座標を把握しておく必要があります。 ✅ なぜこのアプリ全体が1つの大きなクロージャで構築されているのかがより明確になってきていますかそうでないとしたら、どのようにして14個のドラッグ可能な植物のそれぞれのスコープを維持するのでしょうかpos4 = eclientY の下にポインタイベントの操作を2つ追加して、初期関数を完成させます。 javascript documentonpointermove = elementDrag; documentonpointerup = stopElementDrag;\nこれで、植物を移動させる際にポインタに沿って植物をドラッグし、植物の選択を解除したときにドラッグジェスチャを停止させたいことを示していることになります。onpointermove と onpointerup はすべて onpointerdown と同じ API の一部である。まだ elementDrag と stopElementDrag 関数が定義されていないので、インターフェイスはエラーをスローします。\nelementDrag 関数と stopElementDrag 関数\n植物をドラッグしてドラッグを停止したときに何が起こるかを処理する内部関数をさらに 2 つ追加して、クロージャを完成させます。あなたが望む動作は、任意の植物をいつでもドラッグして、画面上のどこにでも配置できるようにすることです。このインターフェイスは、植物を追加、削除、再配置することで、あなたが好きなように正確にあなたのテラリウムをデザインできるようにするために、かなり非オピニオン的です (例えば、ドロップゾーンはありません)。\nタスク\n関数 elementDrag を pointerDrag の閉じ括弧の直後に追加する。\njavascript\nfunction elementDrag(e) {\npos1 = pos3 - e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1543,
    "chunk_index": 41,
    "total_chunks": 61
  },
  {
    "id": "8aabedf9c9cf5cd02a9e2519a6de0fa6",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "pos3 = eclientX; pos4 = eclientY; } いくつかのことが起こります。まず、epreventDefault(); を使用してポインタダウン時に通常発生するデフォルトのイベントが発生しないようにします。このようにして、インターフェイスの動作をより制御することができます。 スクリプトファイルを完全にビルドした後、この行に戻って epreventDefault() を使わずに試してみてください - どうなりますか？ 次に、ブラウザのウィンドウで indexhtml を開き、インターフェイスを調べる。植物をクリックすると、'e' イベントがどのように捕捉されているかを確認することができます。イベントを掘り下げて、1つのポインタダウンイベントでどれだけの情報が集まっているかを確認してみましょう次に、ローカル変数 pos3 と pos4 が eclientX に設定されていることに注目してください。e の値はインスペクションペインで見つけることができます。これらの値は、植物をクリックしたり触ったりした瞬間の x と y の座標を取得します。植物をクリックしたりドラッグしたりしたときの動作を細かく制御する必要があるので、その座標を把握しておく必要があります。 ✅ なぜこのアプリ全体が1つの大きなクロージャで構築されているのかがより明確になってきていますかそうでないとしたら、どのようにして14個のドラッグ可能な植物のそれぞれのスコープを維持するのでしょうかpos4 = eclientY の下にポインタイベントの操作を2つ追加して、初期関数を完成させます。 javascript documentonpointermove = elementDrag; documentonpointerup = stopElementDrag; これで、植物を移動させる際にポインタに沿って植物をドラッグし、植物の選択を解除したときにドラッグジェスチャを停止させたいことを示していることになります。onpointermove と onpointerup はすべて onpointerdown と同じ API の一部である。まだ elementDrag と stopElementDrag 関数が定義されていないので、インターフェイスはエラーをスローします。 elementDrag 関数と stopElementDrag 関数 植物をドラッグしてドラッグを停止したときに何が起こるかを処理する内部関数をさらに 2 つ追加して、クロージャを完成させます。あなたが望む動作は、任意の植物をいつでもドラッグして、画面上のどこにでも配置できるようにすることです。このインターフェイスは、植物を追加、削除、再配置することで、あなたが好きなように正確にあなたのテラリウムをデザインできるようにするために、かなり非オピニオン的です (例えば、ドロップゾーンはありません)。 タスク 関数 elementDrag を pointerDrag の閉じ括弧の直後に追加する。 javascript function elementDrag(e) { pos1 = pos3 - eclientX;\npos2 = pos4 - e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1042,
    "chunk_index": 42,
    "total_chunks": 61
  },
  {
    "id": "e7dd0eacd19a5083a29a804af8eeff69",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "eclientY; } いくつかのことが起こります。まず、epreventDefault(); を使用してポインタダウン時に通常発生するデフォルトのイベントが発生しないようにします。このようにして、インターフェイスの動作をより制御することができます。 スクリプトファイルを完全にビルドした後、この行に戻って epreventDefault() を使わずに試してみてください - どうなりますか？ 次に、ブラウザのウィンドウで indexhtml を開き、インターフェイスを調べる。植物をクリックすると、'e' イベントがどのように捕捉されているかを確認することができます。イベントを掘り下げて、1つのポインタダウンイベントでどれだけの情報が集まっているかを確認してみましょう次に、ローカル変数 pos3 と pos4 が eclientX に設定されていることに注目してください。e の値はインスペクションペインで見つけることができます。これらの値は、植物をクリックしたり触ったりした瞬間の x と y の座標を取得します。植物をクリックしたりドラッグしたりしたときの動作を細かく制御する必要があるので、その座標を把握しておく必要があります。 ✅ なぜこのアプリ全体が1つの大きなクロージャで構築されているのかがより明確になってきていますかそうでないとしたら、どのようにして14個のドラッグ可能な植物のそれぞれのスコープを維持するのでしょうかpos4 = eclientY の下にポインタイベントの操作を2つ追加して、初期関数を完成させます。 javascript documentonpointermove = elementDrag; documentonpointerup = stopElementDrag; これで、植物を移動させる際にポインタに沿って植物をドラッグし、植物の選択を解除したときにドラッグジェスチャを停止させたいことを示していることになります。onpointermove と onpointerup はすべて onpointerdown と同じ API の一部である。まだ elementDrag と stopElementDrag 関数が定義されていないので、インターフェイスはエラーをスローします。 elementDrag 関数と stopElementDrag 関数 植物をドラッグしてドラッグを停止したときに何が起こるかを処理する内部関数をさらに 2 つ追加して、クロージャを完成させます。あなたが望む動作は、任意の植物をいつでもドラッグして、画面上のどこにでも配置できるようにすることです。このインターフェイスは、植物を追加、削除、再配置することで、あなたが好きなように正確にあなたのテラリウムをデザインできるようにするために、かなり非オピニオン的です (例えば、ドロップゾーンはありません)。 タスク 関数 elementDrag を pointerDrag の閉じ括弧の直後に追加する。 javascript function elementDrag(e) { pos1 = pos3 - eclientX; pos2 = pos4 - eclientY;\npos3 = e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1039,
    "chunk_index": 43,
    "total_chunks": 61
  },
  {
    "id": "433c6b31f6ad17cb0cdb664279bd5ac5",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "を使用してポインタダウン時に通常発生するデフォルトのイベントが発生しないようにします。このようにして、インターフェイスの動作をより制御することができます。 スクリプトファイルを完全にビルドした後、この行に戻って epreventDefault() を使わずに試してみてください - どうなりますか？ 次に、ブラウザのウィンドウで indexhtml を開き、インターフェイスを調べる。植物をクリックすると、'e' イベントがどのように捕捉されているかを確認することができます。イベントを掘り下げて、1つのポインタダウンイベントでどれだけの情報が集まっているかを確認してみましょう次に、ローカル変数 pos3 と pos4 が eclientX に設定されていることに注目してください。e の値はインスペクションペインで見つけることができます。これらの値は、植物をクリックしたり触ったりした瞬間の x と y の座標を取得します。植物をクリックしたりドラッグしたりしたときの動作を細かく制御する必要があるので、その座標を把握しておく必要があります。 ✅ なぜこのアプリ全体が1つの大きなクロージャで構築されているのかがより明確になってきていますかそうでないとしたら、どのようにして14個のドラッグ可能な植物のそれぞれのスコープを維持するのでしょうかpos4 = eclientY の下にポインタイベントの操作を2つ追加して、初期関数を完成させます。 javascript documentonpointermove = elementDrag; documentonpointerup = stopElementDrag; これで、植物を移動させる際にポインタに沿って植物をドラッグし、植物の選択を解除したときにドラッグジェスチャを停止させたいことを示していることになります。onpointermove と onpointerup はすべて onpointerdown と同じ API の一部である。まだ elementDrag と stopElementDrag 関数が定義されていないので、インターフェイスはエラーをスローします。 elementDrag 関数と stopElementDrag 関数 植物をドラッグしてドラッグを停止したときに何が起こるかを処理する内部関数をさらに 2 つ追加して、クロージャを完成させます。あなたが望む動作は、任意の植物をいつでもドラッグして、画面上のどこにでも配置できるようにすることです。このインターフェイスは、植物を追加、削除、再配置することで、あなたが好きなように正確にあなたのテラリウムをデザインできるようにするために、かなり非オピニオン的です (例えば、ドロップゾーンはありません)。 タスク 関数 elementDrag を pointerDrag の閉じ括弧の直後に追加する。 javascript function elementDrag(e) { pos1 = pos3 - eclientX; pos2 = pos4 - eclientY; pos3 = eclientX;\npos4 = e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 1018,
    "chunk_index": 44,
    "total_chunks": 61
  },
  {
    "id": "d614d4b416a4785c29674d6a18e8ff6f",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "を使わずに試してみてください - どうなりますか？ 次に、ブラウザのウィンドウで indexhtml を開き、インターフェイスを調べる。植物をクリックすると、'e' イベントがどのように捕捉されているかを確認することができます。イベントを掘り下げて、1つのポインタダウンイベントでどれだけの情報が集まっているかを確認してみましょう次に、ローカル変数 pos3 と pos4 が eclientX に設定されていることに注目してください。e の値はインスペクションペインで見つけることができます。これらの値は、植物をクリックしたり触ったりした瞬間の x と y の座標を取得します。植物をクリックしたりドラッグしたりしたときの動作を細かく制御する必要があるので、その座標を把握しておく必要があります。 ✅ なぜこのアプリ全体が1つの大きなクロージャで構築されているのかがより明確になってきていますかそうでないとしたら、どのようにして14個のドラッグ可能な植物のそれぞれのスコープを維持するのでしょうかpos4 = eclientY の下にポインタイベントの操作を2つ追加して、初期関数を完成させます。 javascript documentonpointermove = elementDrag; documentonpointerup = stopElementDrag; これで、植物を移動させる際にポインタに沿って植物をドラッグし、植物の選択を解除したときにドラッグジェスチャを停止させたいことを示していることになります。onpointermove と onpointerup はすべて onpointerdown と同じ API の一部である。まだ elementDrag と stopElementDrag 関数が定義されていないので、インターフェイスはエラーをスローします。 elementDrag 関数と stopElementDrag 関数 植物をドラッグしてドラッグを停止したときに何が起こるかを処理する内部関数をさらに 2 つ追加して、クロージャを完成させます。あなたが望む動作は、任意の植物をいつでもドラッグして、画面上のどこにでも配置できるようにすることです。このインターフェイスは、植物を追加、削除、再配置することで、あなたが好きなように正確にあなたのテラリウムをデザインできるようにするために、かなり非オピニオン的です (例えば、ドロップゾーンはありません)。 タスク 関数 elementDrag を pointerDrag の閉じ括弧の直後に追加する。 javascript function elementDrag(e) { pos1 = pos3 - eclientX; pos2 = pos4 - eclientY; pos3 = eclientX; pos4 = eclientY;\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 924,
    "chunk_index": 45,
    "total_chunks": 61
  },
  {
    "id": "d5e39dd01f80a891bd79ded7bd3b8c94",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "- どうなりますか？ 次に、ブラウザのウィンドウで indexhtml を開き、インターフェイスを調べる。植物をクリックすると、'e' イベントがどのように捕捉されているかを確認することができます。イベントを掘り下げて、1つのポインタダウンイベントでどれだけの情報が集まっているかを確認してみましょう次に、ローカル変数 pos3 と pos4 が eclientX に設定されていることに注目してください。e の値はインスペクションペインで見つけることができます。これらの値は、植物をクリックしたり触ったりした瞬間の x と y の座標を取得します。植物をクリックしたりドラッグしたりしたときの動作を細かく制御する必要があるので、その座標を把握しておく必要があります。 ✅ なぜこのアプリ全体が1つの大きなクロージャで構築されているのかがより明確になってきていますかそうでないとしたら、どのようにして14個のドラッグ可能な植物のそれぞれのスコープを維持するのでしょうかpos4 = eclientY の下にポインタイベントの操作を2つ追加して、初期関数を完成させます。 javascript documentonpointermove = elementDrag; documentonpointerup = stopElementDrag; これで、植物を移動させる際にポインタに沿って植物をドラッグし、植物の選択を解除したときにドラッグジェスチャを停止させたいことを示していることになります。onpointermove と onpointerup はすべて onpointerdown と同じ API の一部である。まだ elementDrag と stopElementDrag 関数が定義されていないので、インターフェイスはエラーをスローします。 elementDrag 関数と stopElementDrag 関数 植物をドラッグしてドラッグを停止したときに何が起こるかを処理する内部関数をさらに 2 つ追加して、クロージャを完成させます。あなたが望む動作は、任意の植物をいつでもドラッグして、画面上のどこにでも配置できるようにすることです。このインターフェイスは、植物を追加、削除、再配置することで、あなたが好きなように正確にあなたのテラリウムをデザインできるようにするために、かなり非オピニオン的です (例えば、ドロップゾーンはありません)。 タスク 関数 elementDrag を pointerDrag の閉じ括弧の直後に追加する。 javascript function elementDrag(e) { pos1 = pos3 - eclientX; pos2 = pos4 - eclientY; pos3 = eclientX; pos4 = eclientY; consolelog(pos1, pos2, pos3, pos4);\nterrariumElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 928,
    "chunk_index": 46,
    "total_chunks": 61
  },
  {
    "id": "4acf3cc36893cdfec26417ea584e168d",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "を開き、インターフェイスを調べる。植物をクリックすると、'e' イベントがどのように捕捉されているかを確認することができます。イベントを掘り下げて、1つのポインタダウンイベントでどれだけの情報が集まっているかを確認してみましょう次に、ローカル変数 pos3 と pos4 が eclientX に設定されていることに注目してください。e の値はインスペクションペインで見つけることができます。これらの値は、植物をクリックしたり触ったりした瞬間の x と y の座標を取得します。植物をクリックしたりドラッグしたりしたときの動作を細かく制御する必要があるので、その座標を把握しておく必要があります。 ✅ なぜこのアプリ全体が1つの大きなクロージャで構築されているのかがより明確になってきていますかそうでないとしたら、どのようにして14個のドラッグ可能な植物のそれぞれのスコープを維持するのでしょうかpos4 = eclientY の下にポインタイベントの操作を2つ追加して、初期関数を完成させます。 javascript documentonpointermove = elementDrag; documentonpointerup = stopElementDrag; これで、植物を移動させる際にポインタに沿って植物をドラッグし、植物の選択を解除したときにドラッグジェスチャを停止させたいことを示していることになります。onpointermove と onpointerup はすべて onpointerdown と同じ API の一部である。まだ elementDrag と stopElementDrag 関数が定義されていないので、インターフェイスはエラーをスローします。 elementDrag 関数と stopElementDrag 関数 植物をドラッグしてドラッグを停止したときに何が起こるかを処理する内部関数をさらに 2 つ追加して、クロージャを完成させます。あなたが望む動作は、任意の植物をいつでもドラッグして、画面上のどこにでも配置できるようにすることです。このインターフェイスは、植物を追加、削除、再配置することで、あなたが好きなように正確にあなたのテラリウムをデザインできるようにするために、かなり非オピニオン的です (例えば、ドロップゾーンはありません)。 タスク 関数 elementDrag を pointerDrag の閉じ括弧の直後に追加する。 javascript function elementDrag(e) { pos1 = pos3 - eclientX; pos2 = pos4 - eclientY; pos3 = eclientX; pos4 = eclientY; consolelog(pos1, pos2, pos3, pos4); terrariumElementstyle",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 901,
    "chunk_index": 47,
    "total_chunks": 61
  },
  {
    "id": "28282e671e74f682fc56b08657a505aa",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "を開き、インターフェイスを調べる。植物をクリックすると、'e' イベントがどのように捕捉されているかを確認することができます。イベントを掘り下げて、1つのポインタダウンイベントでどれだけの情報が集まっているかを確認してみましょう次に、ローカル変数 pos3 と pos4 が eclientX に設定されていることに注目してください。e の値はインスペクションペインで見つけることができます。これらの値は、植物をクリックしたり触ったりした瞬間の x と y の座標を取得します。植物をクリックしたりドラッグしたりしたときの動作を細かく制御する必要があるので、その座標を把握しておく必要があります。 ✅ なぜこのアプリ全体が1つの大きなクロージャで構築されているのかがより明確になってきていますかそうでないとしたら、どのようにして14個のドラッグ可能な植物のそれぞれのスコープを維持するのでしょうかpos4 = eclientY の下にポインタイベントの操作を2つ追加して、初期関数を完成させます。 javascript documentonpointermove = elementDrag; documentonpointerup = stopElementDrag; これで、植物を移動させる際にポインタに沿って植物をドラッグし、植物の選択を解除したときにドラッグジェスチャを停止させたいことを示していることになります。onpointermove と onpointerup はすべて onpointerdown と同じ API の一部である。まだ elementDrag と stopElementDrag 関数が定義されていないので、インターフェイスはエラーをスローします。 elementDrag 関数と stopElementDrag 関数 植物をドラッグしてドラッグを停止したときに何が起こるかを処理する内部関数をさらに 2 つ追加して、クロージャを完成させます。あなたが望む動作は、任意の植物をいつでもドラッグして、画面上のどこにでも配置できるようにすることです。このインターフェイスは、植物を追加、削除、再配置することで、あなたが好きなように正確にあなたのテラリウムをデザインできるようにするために、かなり非オピニオン的です (例えば、ドロップゾーンはありません)。 タスク 関数 elementDrag を pointerDrag の閉じ括弧の直後に追加する。 javascript function elementDrag(e) { pos1 = pos3 - eclientX; pos2 = pos4 - eclientY; pos3 = eclientX; pos4 = eclientY; consolelog(pos1, pos2, pos3, pos4); terrariumElementstyletop = terrariumElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 906,
    "chunk_index": 48,
    "total_chunks": 61
  },
  {
    "id": "e876d336535a08f66ab12d234cc813b4",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "pos3 と pos4 が eclientX に設定されていることに注目してください。e の値はインスペクションペインで見つけることができます。これらの値は、植物をクリックしたり触ったりした瞬間の x と y の座標を取得します。植物をクリックしたりドラッグしたりしたときの動作を細かく制御する必要があるので、その座標を把握しておく必要があります。 ✅ なぜこのアプリ全体が1つの大きなクロージャで構築されているのかがより明確になってきていますかそうでないとしたら、どのようにして14個のドラッグ可能な植物のそれぞれのスコープを維持するのでしょうかpos4 = eclientY の下にポインタイベントの操作を2つ追加して、初期関数を完成させます。 javascript documentonpointermove = elementDrag; documentonpointerup = stopElementDrag; これで、植物を移動させる際にポインタに沿って植物をドラッグし、植物の選択を解除したときにドラッグジェスチャを停止させたいことを示していることになります。onpointermove と onpointerup はすべて onpointerdown と同じ API の一部である。まだ elementDrag と stopElementDrag 関数が定義されていないので、インターフェイスはエラーをスローします。 elementDrag 関数と stopElementDrag 関数 植物をドラッグしてドラッグを停止したときに何が起こるかを処理する内部関数をさらに 2 つ追加して、クロージャを完成させます。あなたが望む動作は、任意の植物をいつでもドラッグして、画面上のどこにでも配置できるようにすることです。このインターフェイスは、植物を追加、削除、再配置することで、あなたが好きなように正確にあなたのテラリウムをデザインできるようにするために、かなり非オピニオン的です (例えば、ドロップゾーンはありません)。 タスク 関数 elementDrag を pointerDrag の閉じ括弧の直後に追加する。 javascript function elementDrag(e) { pos1 = pos3 - eclientX; pos2 = pos4 - eclientY; pos3 = eclientX; pos4 = eclientY; consolelog(pos1, pos2, pos3, pos4); terrariumElementstyletop = terrariumElementoffsetTop - pos2 + 'px';\nterrariumElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 790,
    "chunk_index": 49,
    "total_chunks": 61
  },
  {
    "id": "049125c7f8e462378198d41dc855c6a6",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "に設定されていることに注目してください。e の値はインスペクションペインで見つけることができます。これらの値は、植物をクリックしたり触ったりした瞬間の x と y の座標を取得します。植物をクリックしたりドラッグしたりしたときの動作を細かく制御する必要があるので、その座標を把握しておく必要があります。 ✅ なぜこのアプリ全体が1つの大きなクロージャで構築されているのかがより明確になってきていますかそうでないとしたら、どのようにして14個のドラッグ可能な植物のそれぞれのスコープを維持するのでしょうかpos4 = eclientY の下にポインタイベントの操作を2つ追加して、初期関数を完成させます。 javascript documentonpointermove = elementDrag; documentonpointerup = stopElementDrag; これで、植物を移動させる際にポインタに沿って植物をドラッグし、植物の選択を解除したときにドラッグジェスチャを停止させたいことを示していることになります。onpointermove と onpointerup はすべて onpointerdown と同じ API の一部である。まだ elementDrag と stopElementDrag 関数が定義されていないので、インターフェイスはエラーをスローします。 elementDrag 関数と stopElementDrag 関数 植物をドラッグしてドラッグを停止したときに何が起こるかを処理する内部関数をさらに 2 つ追加して、クロージャを完成させます。あなたが望む動作は、任意の植物をいつでもドラッグして、画面上のどこにでも配置できるようにすることです。このインターフェイスは、植物を追加、削除、再配置することで、あなたが好きなように正確にあなたのテラリウムをデザインできるようにするために、かなり非オピニオン的です (例えば、ドロップゾーンはありません)。 タスク 関数 elementDrag を pointerDrag の閉じ括弧の直後に追加する。 javascript function elementDrag(e) { pos1 = pos3 - eclientX; pos2 = pos4 - eclientY; pos3 = eclientX; pos4 = eclientY; consolelog(pos1, pos2, pos3, pos4); terrariumElementstyletop = terrariumElementoffsetTop - pos2 + 'px'; terrariumElementstyle",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 779,
    "chunk_index": 50,
    "total_chunks": 61
  },
  {
    "id": "fccd14c42a1f8e615c61b0808e7aab96",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "に設定されていることに注目してください。e の値はインスペクションペインで見つけることができます。これらの値は、植物をクリックしたり触ったりした瞬間の x と y の座標を取得します。植物をクリックしたりドラッグしたりしたときの動作を細かく制御する必要があるので、その座標を把握しておく必要があります。 ✅ なぜこのアプリ全体が1つの大きなクロージャで構築されているのかがより明確になってきていますかそうでないとしたら、どのようにして14個のドラッグ可能な植物のそれぞれのスコープを維持するのでしょうかpos4 = eclientY の下にポインタイベントの操作を2つ追加して、初期関数を完成させます。 javascript documentonpointermove = elementDrag; documentonpointerup = stopElementDrag; これで、植物を移動させる際にポインタに沿って植物をドラッグし、植物の選択を解除したときにドラッグジェスチャを停止させたいことを示していることになります。onpointermove と onpointerup はすべて onpointerdown と同じ API の一部である。まだ elementDrag と stopElementDrag 関数が定義されていないので、インターフェイスはエラーをスローします。 elementDrag 関数と stopElementDrag 関数 植物をドラッグしてドラッグを停止したときに何が起こるかを処理する内部関数をさらに 2 つ追加して、クロージャを完成させます。あなたが望む動作は、任意の植物をいつでもドラッグして、画面上のどこにでも配置できるようにすることです。このインターフェイスは、植物を追加、削除、再配置することで、あなたが好きなように正確にあなたのテラリウムをデザインできるようにするために、かなり非オピニオン的です (例えば、ドロップゾーンはありません)。 タスク 関数 elementDrag を pointerDrag の閉じ括弧の直後に追加する。 javascript function elementDrag(e) { pos1 = pos3 - eclientX; pos2 = pos4 - eclientY; pos3 = eclientX; pos4 = eclientY; consolelog(pos1, pos2, pos3, pos4); terrariumElementstyletop = terrariumElementoffsetTop - pos2 + 'px'; terrariumElementstyleleft = terrariumElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 784,
    "chunk_index": 51,
    "total_chunks": 61
  },
  {
    "id": "772d801804020b67f5adb3b726546cf5",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "x と y の座標を取得します。植物をクリックしたりドラッグしたりしたときの動作を細かく制御する必要があるので、その座標を把握しておく必要があります。 ✅ なぜこのアプリ全体が1つの大きなクロージャで構築されているのかがより明確になってきていますかそうでないとしたら、どのようにして14個のドラッグ可能な植物のそれぞれのスコープを維持するのでしょうかpos4 = eclientY の下にポインタイベントの操作を2つ追加して、初期関数を完成させます。 javascript documentonpointermove = elementDrag; documentonpointerup = stopElementDrag; これで、植物を移動させる際にポインタに沿って植物をドラッグし、植物の選択を解除したときにドラッグジェスチャを停止させたいことを示していることになります。onpointermove と onpointerup はすべて onpointerdown と同じ API の一部である。まだ elementDrag と stopElementDrag 関数が定義されていないので、インターフェイスはエラーをスローします。 elementDrag 関数と stopElementDrag 関数 植物をドラッグしてドラッグを停止したときに何が起こるかを処理する内部関数をさらに 2 つ追加して、クロージャを完成させます。あなたが望む動作は、任意の植物をいつでもドラッグして、画面上のどこにでも配置できるようにすることです。このインターフェイスは、植物を追加、削除、再配置することで、あなたが好きなように正確にあなたのテラリウムをデザインできるようにするために、かなり非オピニオン的です (例えば、ドロップゾーンはありません)。 タスク 関数 elementDrag を pointerDrag の閉じ括弧の直後に追加する。 javascript function elementDrag(e) { pos1 = pos3 - eclientX; pos2 = pos4 - eclientY; pos3 = eclientX; pos4 = eclientY; consolelog(pos1, pos2, pos3, pos4); terrariumElementstyletop = terrariumElementoffsetTop - pos2 + 'px'; terrariumElementstyleleft = terrariumElementoffsetLeft - pos1 + 'px';\n}\nこの関数では、外部関数でローカル変数として設定した初期位置1～4の編集を多く行います。ここで何が起こっているのでしょうか",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 780,
    "chunk_index": 52,
    "total_chunks": 61
  },
  {
    "id": "6d10d367c22b7be066a85ac504f4c757",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "= eclientY の下にポインタイベントの操作を2つ追加して、初期関数を完成させます。 javascript documentonpointermove = elementDrag; documentonpointerup = stopElementDrag; これで、植物を移動させる際にポインタに沿って植物をドラッグし、植物の選択を解除したときにドラッグジェスチャを停止させたいことを示していることになります。onpointermove と onpointerup はすべて onpointerdown と同じ API の一部である。まだ elementDrag と stopElementDrag 関数が定義されていないので、インターフェイスはエラーをスローします。 elementDrag 関数と stopElementDrag 関数 植物をドラッグしてドラッグを停止したときに何が起こるかを処理する内部関数をさらに 2 つ追加して、クロージャを完成させます。あなたが望む動作は、任意の植物をいつでもドラッグして、画面上のどこにでも配置できるようにすることです。このインターフェイスは、植物を追加、削除、再配置することで、あなたが好きなように正確にあなたのテラリウムをデザインできるようにするために、かなり非オピニオン的です (例えば、ドロップゾーンはありません)。 タスク 関数 elementDrag を pointerDrag の閉じ括弧の直後に追加する。 javascript function elementDrag(e) { pos1 = pos3 - eclientX; pos2 = pos4 - eclientY; pos3 = eclientX; pos4 = eclientY; consolelog(pos1, pos2, pos3, pos4); terrariumElementstyletop = terrariumElementoffsetTop - pos2 + 'px'; terrariumElementstyleleft = terrariumElementoffsetLeft - pos1 + 'px'; } この関数では、外部関数でローカル変数として設定した初期位置1～4の編集を多く行います。ここで何が起こっているのでしょうかドラッグしながら pos1 を pos3 (先ほど e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 624,
    "chunk_index": 53,
    "total_chunks": 61
  },
  {
    "id": "9dc6416c57c68175cc60579aa4ae3ea8",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "= elementDrag; documentonpointerup = stopElementDrag; これで、植物を移動させる際にポインタに沿って植物をドラッグし、植物の選択を解除したときにドラッグジェスチャを停止させたいことを示していることになります。onpointermove と onpointerup はすべて onpointerdown と同じ API の一部である。まだ elementDrag と stopElementDrag 関数が定義されていないので、インターフェイスはエラーをスローします。 elementDrag 関数と stopElementDrag 関数 植物をドラッグしてドラッグを停止したときに何が起こるかを処理する内部関数をさらに 2 つ追加して、クロージャを完成させます。あなたが望む動作は、任意の植物をいつでもドラッグして、画面上のどこにでも配置できるようにすることです。このインターフェイスは、植物を追加、削除、再配置することで、あなたが好きなように正確にあなたのテラリウムをデザインできるようにするために、かなり非オピニオン的です (例えば、ドロップゾーンはありません)。 タスク 関数 elementDrag を pointerDrag の閉じ括弧の直後に追加する。 javascript function elementDrag(e) { pos1 = pos3 - eclientX; pos2 = pos4 - eclientY; pos3 = eclientX; pos4 = eclientY; consolelog(pos1, pos2, pos3, pos4); terrariumElementstyletop = terrariumElementoffsetTop - pos2 + 'px'; terrariumElementstyleleft = terrariumElementoffsetLeft - pos1 + 'px'; } この関数では、外部関数でローカル変数として設定した初期位置1～4の編集を多く行います。ここで何が起こっているのでしょうかドラッグしながら pos1 を pos3 (先ほど eclientX と設定したもの) から現在の e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 603,
    "chunk_index": 54,
    "total_chunks": 61
  },
  {
    "id": "8f78d036d04378f8258c2a591f81b6ef",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "= stopElementDrag; これで、植物を移動させる際にポインタに沿って植物をドラッグし、植物の選択を解除したときにドラッグジェスチャを停止させたいことを示していることになります。onpointermove と onpointerup はすべて onpointerdown と同じ API の一部である。まだ elementDrag と stopElementDrag 関数が定義されていないので、インターフェイスはエラーをスローします。 elementDrag 関数と stopElementDrag 関数 植物をドラッグしてドラッグを停止したときに何が起こるかを処理する内部関数をさらに 2 つ追加して、クロージャを完成させます。あなたが望む動作は、任意の植物をいつでもドラッグして、画面上のどこにでも配置できるようにすることです。このインターフェイスは、植物を追加、削除、再配置することで、あなたが好きなように正確にあなたのテラリウムをデザインできるようにするために、かなり非オピニオン的です (例えば、ドロップゾーンはありません)。 タスク 関数 elementDrag を pointerDrag の閉じ括弧の直後に追加する。 javascript function elementDrag(e) { pos1 = pos3 - eclientX; pos2 = pos4 - eclientY; pos3 = eclientX; pos4 = eclientY; consolelog(pos1, pos2, pos3, pos4); terrariumElementstyletop = terrariumElementoffsetTop - pos2 + 'px'; terrariumElementstyleleft = terrariumElementoffsetLeft - pos1 + 'px'; } この関数では、外部関数でローカル変数として設定した初期位置1～4の編集を多く行います。ここで何が起こっているのでしょうかドラッグしながら pos1 を pos3 (先ほど eclientX と設定したもの) から現在の eclientX の値を引いた値に等しくすることで再指定します。同様の操作を pos2 に行います。次に、pos3 と pos4 を要素の新しい X 座標と Y 座標にリセットします。これらの変更は、ドラッグしながらコンソールで見ることができます。次に、植物の css スタイルを操作して pos1 と pos2 の新しい位置をもとに植物の新しい位置を設定し、植物のオフセットと新しい位置を比較して植物の上下左右の X 座標を計算します。\noffsetTop と offsetLeft は CSS のプロパティで、要素の位置を親の位置に基づいて設定します。親は static として配置されていない要素であれば何でも構いません。\nこのように位置を再計算することで、テラリウムとその植物の挙動を微調整することができます。\nタスク\nインターフェースを完成させるための最後のタスクは、elementDrag の中括弧を閉じた後に stopElementDrag 関数を追加することです。\njavascript\nfunction stopElementDrag() {\ndocument",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 960,
    "chunk_index": 55,
    "total_chunks": 61
  },
  {
    "id": "32450a0f6b95e509f1b02a3f99d10ef2",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "pos2 = pos4 - eclientY; pos3 = eclientX; pos4 = eclientY; consolelog(pos1, pos2, pos3, pos4); terrariumElementstyletop = terrariumElementoffsetTop - pos2 + 'px'; terrariumElementstyleleft = terrariumElementoffsetLeft - pos1 + 'px'; } この関数では、外部関数でローカル変数として設定した初期位置1～4の編集を多く行います。ここで何が起こっているのでしょうかドラッグしながら pos1 を pos3 (先ほど eclientX と設定したもの) から現在の eclientX の値を引いた値に等しくすることで再指定します。同様の操作を pos2 に行います。次に、pos3 と pos4 を要素の新しい X 座標と Y 座標にリセットします。これらの変更は、ドラッグしながらコンソールで見ることができます。次に、植物の css スタイルを操作して pos1 と pos2 の新しい位置をもとに植物の新しい位置を設定し、植物のオフセットと新しい位置を比較して植物の上下左右の X 座標を計算します。 offsetTop と offsetLeft は CSS のプロパティで、要素の位置を親の位置に基づいて設定します。親は static として配置されていない要素であれば何でも構いません。 このように位置を再計算することで、テラリウムとその植物の挙動を微調整することができます。 タスク インターフェースを完成させるための最後のタスクは、elementDrag の中括弧を閉じた後に stopElementDrag 関数を追加することです。 javascript function stopElementDrag() { documentonpointerup = null;\ndocument",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 543,
    "chunk_index": 56,
    "total_chunks": 61
  },
  {
    "id": "dbc6db6cbc0a000664a5575f95939957",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "- eclientY; pos3 = eclientX; pos4 = eclientY; consolelog(pos1, pos2, pos3, pos4); terrariumElementstyletop = terrariumElementoffsetTop - pos2 + 'px'; terrariumElementstyleleft = terrariumElementoffsetLeft - pos1 + 'px'; } この関数では、外部関数でローカル変数として設定した初期位置1～4の編集を多く行います。ここで何が起こっているのでしょうかドラッグしながら pos1 を pos3 (先ほど eclientX と設定したもの) から現在の eclientX の値を引いた値に等しくすることで再指定します。同様の操作を pos2 に行います。次に、pos3 と pos4 を要素の新しい X 座標と Y 座標にリセットします。これらの変更は、ドラッグしながらコンソールで見ることができます。次に、植物の css スタイルを操作して pos1 と pos2 の新しい位置をもとに植物の新しい位置を設定し、植物のオフセットと新しい位置を比較して植物の上下左右の X 座標を計算します。 offsetTop と offsetLeft は CSS のプロパティで、要素の位置を親の位置に基づいて設定します。親は static として配置されていない要素であれば何でも構いません。 このように位置を再計算することで、テラリウムとその植物の挙動を微調整することができます。 タスク インターフェースを完成させるための最後のタスクは、elementDrag の中括弧を閉じた後に stopElementDrag 関数を追加することです。 javascript function stopElementDrag() { documentonpointerup = null; documentonpointermove = null;\n}\nこの小さな関数は onpointerup と onpointermove イベントをリセットし、植物のドラッグを再開して植物の進行を再開するか、新しい植物のドラッグを開始するようにします。\n✅ これらのイベントを null に設定しないとどうなるのでしょうか",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 651,
    "chunk_index": 57,
    "total_chunks": 61
  },
  {
    "id": "2a8154ab591e4bf34c46f589d19e3ca2",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "terrariumElementstyletop = terrariumElementoffsetTop - pos2 + 'px'; terrariumElementstyleleft = terrariumElementoffsetLeft - pos1 + 'px'; } この関数では、外部関数でローカル変数として設定した初期位置1～4の編集を多く行います。ここで何が起こっているのでしょうかドラッグしながら pos1 を pos3 (先ほど eclientX と設定したもの) から現在の eclientX の値を引いた値に等しくすることで再指定します。同様の操作を pos2 に行います。次に、pos3 と pos4 を要素の新しい X 座標と Y 座標にリセットします。これらの変更は、ドラッグしながらコンソールで見ることができます。次に、植物の css スタイルを操作して pos1 と pos2 の新しい位置をもとに植物の新しい位置を設定し、植物のオフセットと新しい位置を比較して植物の上下左右の X 座標を計算します。 offsetTop と offsetLeft は CSS のプロパティで、要素の位置を親の位置に基づいて設定します。親は static として配置されていない要素であれば何でも構いません。 このように位置を再計算することで、テラリウムとその植物の挙動を微調整することができます。 タスク インターフェースを完成させるための最後のタスクは、elementDrag の中括弧を閉じた後に stopElementDrag 関数を追加することです。 javascript function stopElementDrag() { documentonpointerup = null; documentonpointermove = null; } この小さな関数は onpointerup と onpointermove イベントをリセットし、植物のドラッグを再開して植物の進行を再開するか、新しい植物のドラッグを開始するようにします。 ✅ これらのイベントを null に設定しないとどうなるのでしょうかこれでプロジェクトが完成しました",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 631,
    "chunk_index": 58,
    "total_chunks": 61
  },
  {
    "id": "be217ab649fcb85a3c8f64185ab99ba5",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "terrariumElementstyletop = terrariumElementoffsetTop - pos2 + 'px'; terrariumElementstyleleft = terrariumElementoffsetLeft - pos1 + 'px'; } この関数では、外部関数でローカル変数として設定した初期位置1～4の編集を多く行います。ここで何が起こっているのでしょうかドラッグしながら pos1 を pos3 (先ほど eclientX と設定したもの) から現在の eclientX の値を引いた値に等しくすることで再指定します。同様の操作を pos2 に行います。次に、pos3 と pos4 を要素の新しい X 座標と Y 座標にリセットします。これらの変更は、ドラッグしながらコンソールで見ることができます。次に、植物の css スタイルを操作して pos1 と pos2 の新しい位置をもとに植物の新しい位置を設定し、植物のオフセットと新しい位置を比較して植物の上下左右の X 座標を計算します。 offsetTop と offsetLeft は CSS のプロパティで、要素の位置を親の位置に基づいて設定します。親は static として配置されていない要素であれば何でも構いません。 このように位置を再計算することで、テラリウムとその植物の挙動を微調整することができます。 タスク インターフェースを完成させるための最後のタスクは、elementDrag の中括弧を閉じた後に stopElementDrag 関数を追加することです。 javascript function stopElementDrag() { documentonpointerup = null; documentonpointermove = null; } この小さな関数は onpointerup と onpointermove イベントをリセットし、植物のドラッグを再開して植物の進行を再開するか、新しい植物のドラッグを開始するようにします。 ✅ これらのイベントを null に設定しないとどうなるのでしょうかこれでプロジェクトが完成しました🥇おめでとうございます。素敵なテラリウムが完成しましたね。\nチャレンジ\n新しいイベントハンドラをクロージャに追加して、植物にもっと何かをするようにします。例えば、植物をダブルクリックして前の方に持ってきます。創造力を発揮してください。\nレッスン後の小テスト\nレッスン後の小テスト\n復習と自己学習\n画面の周りに要素をドラッグすることは些細なことのように思えますが、これには多くの方法があり、求める効果に応じて多くの落とし穴があります。実際、試してみることができるドラッグ＆ドロップ API があります。このモジュールでは使用しませんでしたが、自分のプロジェクトでこの API を試してみて、何ができるか見てみてください。\nポインタイベントの詳細は W3C docs や MDN web docs を参照してください。\n常に CanIUse",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 954,
    "chunk_index": 59,
    "total_chunks": 61
  },
  {
    "id": "be11cc86a69f4b996bf8aa15f6dc8ef5",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
    "source_type": "git_repo",
    "title": "テラリウムプロジェクト その3: DOM の操作とクロージャ",
    "content": "eclientX と設定したもの) から現在の eclientX の値を引いた値に等しくすることで再指定します。同様の操作を pos2 に行います。次に、pos3 と pos4 を要素の新しい X 座標と Y 座標にリセットします。これらの変更は、ドラッグしながらコンソールで見ることができます。次に、植物の css スタイルを操作して pos1 と pos2 の新しい位置をもとに植物の新しい位置を設定し、植物のオフセットと新しい位置を比較して植物の上下左右の X 座標を計算します。 offsetTop と offsetLeft は CSS のプロパティで、要素の位置を親の位置に基づいて設定します。親は static として配置されていない要素であれば何でも構いません。 このように位置を再計算することで、テラリウムとその植物の挙動を微調整することができます。 タスク インターフェースを完成させるための最後のタスクは、elementDrag の中括弧を閉じた後に stopElementDrag 関数を追加することです。 javascript function stopElementDrag() { documentonpointerup = null; documentonpointermove = null; } この小さな関数は onpointerup と onpointermove イベントをリセットし、植物のドラッグを再開して植物の進行を再開するか、新しい植物のドラッグを開始するようにします。 ✅ これらのイベントを null に設定しないとどうなるのでしょうかこれでプロジェクトが完成しました🥇おめでとうございます。素敵なテラリウムが完成しましたね。 チャレンジ 新しいイベントハンドラをクロージャに追加して、植物にもっと何かをするようにします。例えば、植物をダブルクリックして前の方に持ってきます。創造力を発揮してください。 レッスン後の小テスト レッスン後の小テスト 復習と自己学習 画面の周りに要素をドラッグすることは些細なことのように思えますが、これには多くの方法があり、求める効果に応じて多くの落とし穴があります。実際、試してみることができるドラッグ＆ドロップ API があります。このモジュールでは使用しませんでしたが、自分のプロジェクトでこの API を試してみて、何ができるか見てみてください。 ポインタイベントの詳細は W3C docs や MDN web docs を参照してください。 常に CanIUsecom でブラウザの機能を確認してください。\n課題\nDOM をもう少し使いこなす",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16016,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.ja.md",
      "source_type": "git_repo"
    },
    "token_count": 881,
    "chunk_index": 60,
    "total_chunks": 61
  },
  {
    "id": "1be9694bafae551f2ee9653965ea412c",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\2-js-basics\\1-data-types\\assignment.md",
    "source_type": "git_repo",
    "title": "Data Types Practice",
    "content": "Data Types Practice\nInstructions\nImagine you are building a shopping cart. Write some documentation on the data types that you would need to complete your shopping experience. How did you arrive at your choices?\nRubric\nCriteria | Exemplary | Adequate | Needs Improvement\n--- | --- | --- | -- |\n||The six data types are listed and explored in detail, documenting their use|Four datatypes are explored|Two data types are explored|",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 450,
      "relative_path": "git_repos\\web-dev-beginners\\2-js-basics\\1-data-types\\assignment.md",
      "source_type": "git_repo"
    },
    "token_count": 90,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7d69379342c15272dcd2d224aee79c78",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\2-js-basics\\1-data-types\\README.md",
    "source_type": "git_repo",
    "title": "JavaScript Basics: Data Types",
    "content": "JavaScript Basics: Data Types\nSketchnote by Tomomi Imura\nPre-Lecture Quiz\nPre-lecture quiz\nThis lesson covers the basics of JavaScript, the language that provides interactivity on the web You can take this lesson on Microsoft Learn 🎥 Click the images above for videos about variables and data types\nLet's start with variables and the data types that populate them Variables\nVariables store values that can be used and changed throughout your code Creating and declaring a variable has the following syntax [keyword] [name] It's made up of the two parts:\nKeyword Keywords can be let or var ✅ The keyword let was introduced in ES6 and gives your variable a so called block scope It's recommended that you use let over var We will cover block scopes more in depth in future parts - The variable name, this is a name you choose yourself Task - working with variables\nDeclare a variable Let's declare a variable using the let keyword:\njavascript\nlet myVariable;\nmyVariable has now been declared using the let keyword It currently doesn't have a value Assign a value Store a value in a variable with the = operator, followed by the expected value javascript\nmyVariable = 123;\nNote: the use of = in this lesson means we make use of an \"assignment operator\", used to set a value to a variable It doesn't denote equality myVariable has now been initialized with the value 123 Refactor Replace your code with the following statement javascript\nlet myVariable = 123;\nThe above is called an explicit initialization when a variable is declared and is assigned a value at the same time Change the variable value Change the variable value in the following way:\njavascript\nmyVariable = 321;\nOnce a variable is declared, you can change its value at any point in your code with the = operator and the new value ✅ Try it You can write JavaScript right in your browser Open a browser window and navigate to Developer Tools In the console, you will find a prompt; type let myVariable = 123, press return, then type myVariable What happens Note, you'll learn more about these concepts in subsequent lessons Constants\nDeclaration and initialization of a constant follows the same concepts as a variable, with the exception of the const keyword Constants are typically declared with all uppercase letters javascript\nconst MY_VARIABLE = 123;\nConstants are similar to variables, with two exceptions:\nMust have a value Constants must be initialized, or an error will occur when running code",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9242,
      "relative_path": "git_repos\\web-dev-beginners\\2-js-basics\\1-data-types\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "f65b753732ea5d0f1e9808279be4ba6b",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\2-js-basics\\1-data-types\\README.md",
    "source_type": "git_repo",
    "title": "JavaScript Basics: Data Types",
    "content": "123, press return, then type myVariable What happens Note, you'll learn more about these concepts in subsequent lessons Constants Declaration and initialization of a constant follows the same concepts as a variable, with the exception of the const keyword Constants are typically declared with all uppercase letters javascript const MY_VARIABLE = 123; Constants are similar to variables, with two exceptions: Must have a value Constants must be initialized, or an error will occur when running codeReference cannot be changed The reference of a constant cannot be changed once initialized, or an error will occur when running code Let's look at two examples:\nSimple value The following is NOT allowed:\njavascript\nconst PI = 3;\nPI = 4; // not allowed\nObject reference is protected The following is NOT allowed javascript\nconst obj = { a: 3 };\nobj = { b: 5 } // not allowed\nObject value is not protected The following IS allowed:\njavascript\nconst obj = { a: 3 };\nobj a = 5;  // allowed\nAbove you are changing the value of the object but not the reference itself, which makes it allowed Note, a const means the reference is protected from reassignment The value is not immutable though and can change, especially if it's a complex construct like an object Data Types\nVariables can store many different types of values, like numbers and text These various types of values are known as the data type Data types are an important part of software development because it helps developers make decisions on how the code should be written and how the software should run Furthermore, some data types have unique features that help transform or extract additional information in a value ✅ Data Types are also referred to as JavaScript data primitives, as they are the lowest-level data types that are provided by the language There are 7 primitive data types: string, number, bigint, boolean, undefined, null and symbol Take a minute to visualize what each of these primitives might represent What is a zebra How about 0 true Numbers\nIn the previous section, the value of myVariable was a number data type let myVariable = 123;\nVariables can store all types of numbers, including decimals or negative numbers Numbers also can be used with arithmetic operators, covered in the next section",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9242,
      "relative_path": "git_repos\\web-dev-beginners\\2-js-basics\\1-data-types\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 451,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "673b0a3a7a7c113dc7223237ee1be9ab",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\2-js-basics\\1-data-types\\README.md",
    "source_type": "git_repo",
    "title": "JavaScript Basics: Data Types",
    "content": "are 7 primitive data types: string, number, bigint, boolean, undefined, null and symbol Take a minute to visualize what each of these primitives might represent What is a zebra How about 0 true Numbers In the previous section, the value of myVariable was a number data type let myVariable = 123; Variables can store all types of numbers, including decimals or negative numbers Numbers also can be used with arithmetic operators, covered in the next sectionArithmetic Operators\nThere are several types of operators to use when performing arithmetic functions, and some are listed here:\n| Symbol | Description                                                              | Example                          |\n| ------ | ------------------------------------------------------------------------ | -------------------------------- |\n| +    | Addition: Calculates the sum of two numbers                          | 1 + 2 //expected answer is 3   |\n| -    | Subtraction: Calculates the difference of two numbers                | 1 - 2 //expected answer is -1  |\n| *    | Multiplication: Calculates the product of two numbers                | 1 * 2 //expected answer is 2   |\n| /    | Division: Calculates the quotient of two numbers                     | 1 / 2 //expected answer is 0 5 |\n| %    | Remainder: Calculates the remainder from the division of two numbers | 1 % 2 //expected answer is 1   |\n✅ Try it Try an arithmetic operation in your browser's console Do the results surprise you Strings\nStrings are sets of characters that reside between single or double quotes 'This is a string'\n\"This is also a string\"\nlet myString = 'This is a string value stored in a variable';\nRemember to use quotes when writing a string, or else JavaScript will assume it's a variable name Formatting Strings\nStrings are textual, and will require formatting from time to time To concatenate two or more strings, or join them together, use the + operator ```javascript\nlet myString1 = \"Hello\";\nlet myString2 = \"World\";\nmyString1 + myString2 + \" \"; //HelloWorld myString1 + \" \" + myString2 + \" \"; //Hello World myString1 + \", \" + myString2 + \" \"; //Hello, World ```\n✅ Why does 1 + 1 = 2 in JavaScript, but '1' + '1' = 11 Think about it What about '1' + 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9242,
      "relative_path": "git_repos\\web-dev-beginners\\2-js-basics\\1-data-types\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "6e74a82c4c467aba72d72a239f9ff33e",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\2-js-basics\\1-data-types\\README.md",
    "source_type": "git_repo",
    "title": "JavaScript Basics: Data Types",
    "content": "concatenate two or more strings, or join them together, use the + operator ```javascript let myString1 = \"Hello\"; let myString2 = \"World\"; myString1 + myString2 + \" \"; //HelloWorld myString1 + \" \" + myString2 + \" \"; //Hello World myString1 + \", \" + myString2 + \" \"; //Hello, World ``` ✅ Why does 1 + 1 = 2 in JavaScript, but '1' + '1' = 11 Think about it What about '1' + 1Template literals are another way to format strings, except instead of quotes, the backtick  is used Anything that is not plain text must be placed inside placeholders ${ } This includes any variables that may be strings ```javascript\nlet myString1 = \"Hello\";\nlet myString2 = \"World\";\n${myString1} ${myString2} //Hello World ${myString1}, ${myString2} //Hello, World ```\nYou can achieve your formatting goals with either method, but template literals will respect any spaces and line breaks ✅ When would you use a template literal vs a plain string Booleans\nBooleans can be only two values: true or false Booleans can help make decisions on which lines of code should run when certain conditions are met In many cases, operators assist with setting the value of a Boolean and you will often notice and write variables being initialized or their values being updated with an operator let myTrueBool = true\nlet myFalseBool = false\n✅ A variable can be considered 'truthy' if it evaluates to a boolean true Interestingly, in JavaScript, all values are truthy unless defined as falsy 🚀 Challenge\nJavaScript is notorious for its surprising ways of handling datatypes on occasion Do a bit of research on these 'gotchas' For example: case sensitivity can bite Try this in your console: let age = 1; let Age = 2; age == Age (resolves false -- why ) What other gotchas can you find Post-Lecture Quiz\nPost-lecture quiz\nReview & Self Study\nTake a look at this list of JavaScript exercises and try one What did you learn Assignment\nData Types Practice",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9242,
      "relative_path": "git_repos\\web-dev-beginners\\2-js-basics\\1-data-types\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 456,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "52dbb321e146d80f5b914178b040b1b4",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\2-js-basics\\2-functions-methods\\assignment.md",
    "source_type": "git_repo",
    "title": "Fun with Functions",
    "content": "Fun with Functions\nInstructions\nCreate different functions, both functions that return something and functions that don't return anything.\nSee if you can create a function that has a mix of parameters and parameters with default values.\nRubric\n| Criteria | Exemplary                                                                              | Adequate                                                         | Needs Improvement |\n| -------- | -------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ----------------- |\n|          | Solution is offered with two or more well-performing functions with diverse parameters | Working solution is offered with one function and few parameters | Solution has bugs |",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 835,
      "relative_path": "git_repos\\web-dev-beginners\\2-js-basics\\2-functions-methods\\assignment.md",
      "source_type": "git_repo"
    },
    "token_count": 104,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "55b7d8da4aebe2d7fc04c5b4e097bdb2",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\2-js-basics\\2-functions-methods\\README.md",
    "source_type": "git_repo",
    "title": "JavaScript Basics: Methods and Functions",
    "content": "JavaScript Basics: Methods and Functions\nSketchnote by Tomomi Imura\nPre-Lecture Quiz\nPre-lecture quiz\nWhen we think about writing code, we always want to ensure our code is readable While this sounds counterintuitive, code is read many more times than it's written One core tool in a developer's toolbox to ensure maintainable code is the function 🎥 Click the image above for a video about methods and functions You can take this lesson on Microsoft Learn Functions\nAt its core, a function is a block of code we can execute on demand This is perfect for scenarios where we need to perform the same task multiple times; rather than duplicating the logic in multiple locations (which would make it hard to update when the time comes), we can centralize it in one location, and call it whenever we need the operation performed - you can even call functions from other functions Just as important is the ability to name a function While this might seem trivial, the name provides a quick way of documenting a section of code You could think of this as a label on a button If I click on a button which reads \"Cancel timer\", I know it's going to stop running the clock Creating and calling a function\nThe syntax for a function looks like the following:\njavascript\nfunction nameOfFunction() { // function definition\n// function definition/body\n}\nIf I wanted to create a function to display a greeting, it might look like this:\njavascript\nfunction displayGreeting() {\nconsole log('Hello, world ');\n}\nWhenever we want to call (or invoke) our function, we use the name of the function followed by () It's worth noting the fact our function can be defined before or after we decide to call it; the JavaScript compiler will find it for you javascript\n// calling our function\ndisplayGreeting();\nNOTE: There is a special type of function known as a method, which you've already been using In fact, we saw this in our demo above when we used console log What makes a method different from a function is a method is attached to an object (console in our example), while a function is free floating You will hear many developers use these terms interchangeably",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9500,
      "relative_path": "git_repos\\web-dev-beginners\\2-js-basics\\2-functions-methods\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 444,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "99de0917fa7d96cccdebd8292dba530b",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\2-js-basics\\2-functions-methods\\README.md",
    "source_type": "git_repo",
    "title": "JavaScript Basics: Methods and Functions",
    "content": "find it for you javascript // calling our function displayGreeting(); NOTE: There is a special type of function known as a method, which you've already been using In fact, we saw this in our demo above when we used console log What makes a method different from a function is a method is attached to an object (console in our example), while a function is free floating You will hear many developers use these terms interchangeablyFunction best practices\nThere are a handful of best practices to keep in mind when creating functions\nAs always, use descriptive names so you know what the function will do\nUse camelCasing to combine words\nKeep your functions focused on a specific task\nPassing information to a function\nTo make a function more reusable you'll often want to pass information into it If we consider our displayGreeting example above, it will only display Hello, world Not the most useful function one could create If we want to make it a little more flexible, like allowing someone to specify the name of the person to greet, we can add a parameter A parameter (also sometimes called an argument), is additional information sent to a function Parameters are listed in the definition part within parenthesis and are comma separated like so:\n```javascript\nfunction name(param, param2, param3) {\n}\n```\nWe can update our displayGreeting to accept a name and have that displayed javascript\nfunction displayGreeting(name) {\nconst message = `Hello, ${name} `;\nconsole log(message);\n}\nWhen we want to call our function and pass in the parameter, we specify it in the parenthesis javascript\ndisplayGreeting('Christopher');\n// displays \"Hello, Christopher \" when run\nDefault values\nWe can make our function even more flexible by adding more parameters But what if we don't want to require every value be specified Keeping with our greeting example, we could leave name as required (we need to know who we're greeting), but we want to allow the greeting itself to be customized as desired If someone doesn't want to customize it, we provide a default value instead To provide a default value to a parameter, we set it much in the same way we set a value for a variable - parameterName = 'defaultValue' To see a full example:\njavascript\nfunction displayGreeting(name, salutation='Hello') {\nconsole log(`${salutation}, ${name}`);\n}\nWhen we call the function, we can then decide if we want to set a value for salutation",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9500,
      "relative_path": "git_repos\\web-dev-beginners\\2-js-basics\\2-functions-methods\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "e724bd00f668e10c8e943ce230c3778b",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\2-js-basics\\2-functions-methods\\README.md",
    "source_type": "git_repo",
    "title": "JavaScript Basics: Methods and Functions",
    "content": "be customized as desired If someone doesn't want to customize it, we provide a default value instead To provide a default value to a parameter, we set it much in the same way we set a value for a variable - parameterName = 'defaultValue' To see a full example: javascript function displayGreeting(name, salutation='Hello') { console log(`${salutation}, ${name}`); } When we call the function, we can then decide if we want to set a value for salutation```javascript\ndisplayGreeting('Christopher');\n// displays \"Hello, Christopher\"\ndisplayGreeting('Christopher', 'Hi');\n// displays \"Hi, Christopher\"\n```\nReturn values\nUp until now the function we built will always output to the console Sometimes this can be exactly what we're looking for, especially when we create functions which will be calling other services But what if I want to create a helper function to perform a calculation and provide the value back so I can use it elsewhere We can do this by using a return value A return value is returned by the function, and can be stored in a variable just the same as we could store a literal value such as a string or number If a function does return something then the keyword return is used The return keyword expects a value or reference of what's being returned like so:\njavascript\nreturn myVariable;\nWe could create a function to create a greeting message and return the value back to the caller\njavascript\nfunction createGreetingMessage(name) {\nconst message = `Hello, ${name}`;\nreturn message;\n}\nWhen calling this function we'll store the value in a variable This is much the same way we'd set a variable to a static value (like const name = 'Christopher') javascript\nconst greetingMessage = createGreetingMessage('Christopher');\nFunctions as parameters for functions\nAs you progress in your programming career, you will come across functions which accept functions as parameters This neat trick is commonly used when we don't know when something is going to occur or complete, but we know we need to perform an operation in response As an example, consider setTimeout, which begins a timer and will execute code when it completes We need to tell it what code we want to execute Sounds like a perfect job for a function If you run the code below, after 3 seconds you'll see the message 3 seconds has elapsed javascript\nfunction displayDone() {\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9500,
      "relative_path": "git_repos\\web-dev-beginners\\2-js-basics\\2-functions-methods\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "b099f4df1e8035ddc27f304f80466304",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\2-js-basics\\2-functions-methods\\README.md",
    "source_type": "git_repo",
    "title": "JavaScript Basics: Methods and Functions",
    "content": "when something is going to occur or complete, but we know we need to perform an operation in response As an example, consider setTimeout, which begins a timer and will execute code when it completes We need to tell it what code we want to execute Sounds like a perfect job for a function If you run the code below, after 3 seconds you'll see the message 3 seconds has elapsed javascript function displayDone() { consolelog('3 seconds has elapsed');\n}\n// timer value is in milliseconds\nsetTimeout(displayDone, 3000);\nAnonymous functions\nLet's take another look at what we've built We're creating a function with a name which will be used one time As our application gets more complex, we can see ourselves creating a lot of functions which will only be called once This isn't ideal As it turns out, we don't always need to provide a name When we are passing a function as a parameter we can bypass creating one in advance and instead build one as part of the parameter We use the same function keyword, but instead we build it as a parameter Let's rewrite the code above to use an anonymous function:\njavascript\nsetTimeout(function() {\nconsole log('3 seconds has elapsed');\n}, 3000);\nIf you run our new code you'll notice we get the same results We've created a function, but didn't have to give it a name Fat arrow functions\nOne shortcut common in a lot of programming languages (including JavaScript) is the ability to use what's called an arrow or fat arrow function It uses a special indicator of =>, which looks like an arrow - thus the name By using =>, we are able to skip the function keyword Let's rewrite our code one more time to use a fat arrow function:\njavascript\nsetTimeout(() => {\nconsole log('3 seconds has elapsed');\n}, 3000);\nWhen to use each strategy\nYou've now seen we have three ways to pass a function as a parameter and might be wondering when to use each If you know you'll be using the function more than once, create it as normal If you'll be using it for just the one location, it's generally best to use an anonymous function Whether or not you use a fat arrow function or the more traditional function syntax is up to you, but you will notice most modern developers prefer => 🚀 Challenge\nCan you articulate in one sentence the difference between functions and methods Give it a try",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9500,
      "relative_path": "git_repos\\web-dev-beginners\\2-js-basics\\2-functions-methods\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "46218cd3f375c4fc3695a739ae009b77",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\2-js-basics\\2-functions-methods\\README.md",
    "source_type": "git_repo",
    "title": "JavaScript Basics: Methods and Functions",
    "content": "you'll be using the function more than once, create it as normal If you'll be using it for just the one location, it's generally best to use an anonymous function Whether or not you use a fat arrow function or the more traditional function syntax is up to you, but you will notice most modern developers prefer => 🚀 Challenge Can you articulate in one sentence the difference between functions and methods Give it a tryPost-Lecture Quiz\nPost-lecture quiz\nReview & Self Study\nIt's worth reading up a little more on arrow functions, as they are increasingly used in code bases Practice writing a function, and then rewriting it with this syntax Assignment\nFun with Functions",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9500,
      "relative_path": "git_repos\\web-dev-beginners\\2-js-basics\\2-functions-methods\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 136,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "ba69710ed4c4ff4f91c099dd5fe0c303",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\2-js-basics\\3-making-decisions\\assignment.md",
    "source_type": "git_repo",
    "title": "Operators",
    "content": "Operators\nInstructions\nPlay around with operators. Here's a suggestion for a program you can implement:\nYou have a set of students from two different grading systems.\nFirst grading system\nOne grading system is defined as grades being from 1-5 where 3 and above means you pass the course.\nSecond grading system\nThe other grade system has the following grades A, A-, B, B-, C, C- where A is the top grade and C is the lowest passing grade.\nThe task\nGiven the following array allStudents representing all students and their grades, construct a new array studentsWhoPass containing all students who pass.\nTIP, use a for-loop and if...else and comparison operators:\n```javascript\nlet allStudents = [\n'A',\n'B-',\n1,\n4,\n5,\n2\n]\nlet studentsWhoPass = [];\n```\nRubric\n| Criteria | Exemplary                      | Adequate                      | Needs Improvement               |\n| -------- | ------------------------------ | ----------------------------- | ------------------------------- |\n|          | Complete solution is presented | Partial solution is presented | Solution with bugs is presented |",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1190,
      "relative_path": "git_repos\\web-dev-beginners\\2-js-basics\\3-making-decisions\\assignment.md",
      "source_type": "git_repo"
    },
    "token_count": 222,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0b6202e2d4f4ccb6379dae21da97e11b",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\2-js-basics\\3-making-decisions\\README.md",
    "source_type": "git_repo",
    "title": "JavaScript Basics: Making Decisions",
    "content": "JavaScript Basics: Making Decisions\nSketchnote by Tomomi Imura\nPre-Lecture Quiz\nPre-lecture quiz\nMaking decisions and controlling the order in which your code runs makes your code reusable and robust This section covers the syntax for controlling data flow in JavaScript and its significance when used with Boolean data types\n🎥 Click the image above for a video about making decisions You can take this lesson on Microsoft Learn A Brief Recap on Booleans\nBooleans can have only two values: true or false Booleans help make decisions on which lines of code should run when certain conditions are met Set your boolean to be true or false like this:\nlet myTrueBool = true\nlet myFalseBool = false\n✅ Booleans are named after the English mathematician, philosopher and logician George Boole (1815–1864) Comparison Operators and Booleans\nOperators are used to evaluate conditions by making comparisons that will create a Boolean value The following is a list of operators that are frequently used | Symbol | Description                                                                                                                                                   | Example            |\n| ------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------ |\n| <    | Less than: Compares two values and returns the true Boolean data type if the value on the left side is less than the right                              | 5 < 6 // true    |\n| <=   | Less than or equal to: Compares two values and returns the true Boolean data type if the value on the left side is less than or equal to the right      | 5 <= 6 // true   |\n| >    | Greater than: Compares two values and returns the true Boolean data type if the value on the left side is larger than the right                         | 5 > 6 // false   |\n| >=   | Greater than or equal to: Compares two values and returns the true Boolean data type if the value on the left side is larger than or equal to the right | 5 >= 6 // false  |\n| ===  | Strict equality: Compares two values and returns the true Boolean data type if values on the right and left are equal AND are the same data type | 5 === 6 // false |\n| ==  | Inequality: Compares two values and returns the opposite Boolean value of what a strict equality operator would return                                    | 5 == 6 // true  |\n✅ Check your knowledge by writing some comparisons in your browser's console Does any returned data surprise you",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8651,
      "relative_path": "git_repos\\web-dev-beginners\\2-js-basics\\3-making-decisions\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "9fee6de00e10ebfb764bce20c7b1f43a",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\2-js-basics\\3-making-decisions\\README.md",
    "source_type": "git_repo",
    "title": "JavaScript Basics: Making Decisions",
    "content": "values and returns the true Boolean data type if values on the right and left are equal AND are the same data type | 5 === 6 // false | | == | Inequality: Compares two values and returns the opposite Boolean value of what a strict equality operator would return | 5 == 6 // true | ✅ Check your knowledge by writing some comparisons in your browser's console Does any returned data surprise youIf Statement\nThe if statement will run code in between its blocks if the condition is true javascript\nif (condition) {\n//Condition is true Code in this block will run }\nLogical operators are often used to form the condition ```javascript\nlet currentMoney;\nlet laptopPrice;\nif (currentMoney >= laptopPrice) {\n//Condition is true Code in this block will run console log(\"Getting a new laptop \");\n}\n```\nIf Else Statement\nThe else statement will run the code in between its blocks when the condition is false It's optional with an if statement ```javascript\nlet currentMoney;\nlet laptopPrice;\nif (currentMoney >= laptopPrice) {\n//Condition is true Code in this block will run console log(\"Getting a new laptop \");\n} else {\n//Condition is false Code in this block will run console log(\"Can't afford a new laptop, yet \");\n}\n```\n✅ Test your understanding of this code and the following code by running it in a browser console Change the values of the currentMoney and laptopPrice variables to change the returned console log() Switch Statement\nThe switch statement is used to perform different actions based on different conditions Use the switch statement to select one of many code blocks to be executed javascript\nswitch (expression) {\ncase x:\n// code block\nbreak;\ncase y:\n// code block\nbreak;\ndefault:\n// code block\n}\n```javascript\n// program using switch statement\nlet a = 2;\nswitch (a) {\ncase 1:\na = \"one\";\nbreak;\ncase 2:\na = \"two\";\nbreak;\ndefault:\na = \"not found\";\nbreak;\n}\nconsole log(The value is ${a});\n```\n✅ Test your understanding of this code and the following code by running it in a browser console Change the values of the variable a to change the returned console log() Logical Operators and Booleans\nDecisions might require more than one comparison, and can be strung together with logical operators to produce a Boolean value",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8651,
      "relative_path": "git_repos\\web-dev-beginners\\2-js-basics\\3-making-decisions\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "7c29ea01e716c4c08387be5609cc6303",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\2-js-basics\\3-making-decisions\\README.md",
    "source_type": "git_repo",
    "title": "JavaScript Basics: Making Decisions",
    "content": "\"one\"; break; case 2: a = \"two\"; break; default: a = \"not found\"; break; } console log(The value is ${a}); ``` ✅ Test your understanding of this code and the following code by running it in a browser console Change the values of the variable a to change the returned console log() Logical Operators and Booleans Decisions might require more than one comparison, and can be strung together with logical operators to produce a Boolean value| Symbol | Description                                                                                     | Example                                                                 |\n| ------ | ----------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------- |\n| &&   | Logical AND: Compares two Boolean expressions Returns true only if both sides are true | (5 > 6) && (5 < 6 ) //One side is false, other is true Returns false |\n| \\|\\| | Logical OR: Compares two Boolean expressions Returns true if at least one side is true     | (5 > 6) \\|\\| (5 < 6) //One side is false, other is true Returns true |\n| | Logical NOT: Returns the opposite value of a Boolean expression                             | (5 > 6) // 5 is not greater than 6, but \" \" will return true         |\nConditions and Decisions with Logical Operators\nLogical operators can be used to form conditions in if else statements ```javascript\nlet currentMoney;\nlet laptopPrice;\nlet laptopDiscountPrice = laptopPrice - laptopPrice * 0 2; //Laptop price at 20 percent off\nif (currentMoney >= laptopPrice || currentMoney >= laptopDiscountPrice) {\n//Condition is true Code in this block will run console log(\"Getting a new laptop \");\n} else {\n//Condition is true Code in this block will run console log(\"Can't afford a new laptop, yet \");\n}\n```\nNegation operator\nYou've seen so far how you can use an if else statement to create conditional logic Anything that goes into an if needs to evaluate to true/false By using the operator you can negate the expression It would look like so:\njavascript\nif ( condition) {\n// runs if condition is false\n} else {\n// runs if condition is true\n}\nTernary expressions\nif else isn't the only way to express decision logic You can also use something called a ternary operator The syntax for it looks like this:\njavascript\nlet variable = condition",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8651,
      "relative_path": "git_repos\\web-dev-beginners\\2-js-basics\\3-making-decisions\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "9dda800f97e4152a74bc4f12f850207c",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\2-js-basics\\3-making-decisions\\README.md",
    "source_type": "git_repo",
    "title": "JavaScript Basics: Making Decisions",
    "content": "into an if needs to evaluate to true/false By using the operator you can negate the expression It would look like so: javascript if ( condition) { // runs if condition is false } else { // runs if condition is true } Ternary expressions if else isn't the only way to express decision logic You can also use something called a ternary operator The syntax for it looks like this: javascript let variable = condition<return this if true> : <return this if false>\nBelow is a more tangible example:\njavascript\nlet firstNumber = 20;\nlet secondNumber = 10;\nlet biggestNumber = firstNumber > secondNumber firstNumber : secondNumber;\n✅ Take a minute to read this code a few times Do you understand how these operators are working The above states that\nif firstNumber is larger than secondNumber\nthen assign firstNumber to biggestNumber\nelse assign secondNumber The ternary expression is just a compact way of writing the code below:\njavascript\nlet biggestNumber;\nif (firstNumber > secondNumber) {\nbiggestNumber = firstNumber;\n} else {\nbiggestNumber = secondNumber;\n}\n🚀 Challenge\nCreate a program that is written first with logical operators, and then rewrite it using a ternary expression What's your preferred syntax Post-Lecture Quiz\nPost-lecture quiz\nReview & Self Study\nRead more about the many operators available to the user on MDN Go through Josh Comeau's wonderful operator lookup Assignment\nOperators",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8651,
      "relative_path": "git_repos\\web-dev-beginners\\2-js-basics\\3-making-decisions\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 299,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "9ab5028f23a844897536c894ace0d3ce",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\2-js-basics\\4-arrays-loops\\assignment.md",
    "source_type": "git_repo",
    "title": "Loop an Array",
    "content": "Loop an Array\nInstructions\nCreate a program that lists every 3rd number between 1-20 and prints it to the console.\nTIP: use a for-loop and modify the iteration-expression\nRubric\n| Criteria | Exemplary                               | Adequate                 | Needs Improvement              |\n| -------- | --------------------------------------- | ------------------------ | ------------------------------ |\n|          | Program runs correctly and is commented | Program is not commented | Program is incomplete or buggy |",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 549,
      "relative_path": "git_repos\\web-dev-beginners\\2-js-basics\\4-arrays-loops\\assignment.md",
      "source_type": "git_repo"
    },
    "token_count": 93,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "fb83a4a5c49d2c5a1b56c9edeb7f3cba",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\2-js-basics\\4-arrays-loops\\README.md",
    "source_type": "git_repo",
    "title": "JavaScript Basics: Arrays and Loops",
    "content": "JavaScript Basics: Arrays and Loops\nSketchnote by Tomomi Imura\nPre-Lecture Quiz\nPre-lecture quiz\nThis lesson covers the basics of JavaScript, the language that provides interactivity on the web In this lesson, you'll learn about arrays and loops, which are used to manipulate data 🎥 Click the images above for videos about arrays and loops You can take this lesson on Microsoft Learn Arrays\nWorking with data is a common task for any language, and it's a much easier task when data is organized in a structural format, such as arrays With arrays, data is stored in a structure similar to a list One major benefit of arrays is that you can store different types of data in one array ✅ Arrays are all around us Can you think of a real-life example of an array, such as a solar panel array The syntax for an array is a pair of square brackets javascript\nlet myArray = [];\nThis is an empty array, but arrays can be declared already populated with data Multiple values in an array are separated by a comma javascript\nlet iceCreamFlavors = [\"Chocolate\", \"Strawberry\", \"Vanilla\", \"Pistachio\", \"Rocky Road\"];\nThe array values are assigned a unique value called the index, a whole number that is assigned based on its distance from the beginning of the array In the example above, the string value \"Chocolate\" has an index of 0, and the index of \"Rocky Road\" is 4 Use the index with square brackets to retrieve, change, or insert array values ✅ Does it surprise you that arrays start at the zero index In some programming languages, indexes start at 1 There's an interesting history around this, which you can read on Wikipedia javascript\nlet iceCreamFlavors = [\"Chocolate\", \"Strawberry\", \"Vanilla\", \"Pistachio\", \"Rocky Road\"];\niceCreamFlavors[2]; //\"Vanilla\"\nYou can leverage the index to change a value, like this:\njavascript\niceCreamFlavors[4] = \"Butter Pecan\"; //Changed \"Rocky Road\" to \"Butter Pecan\"\nAnd you can insert a new value at a given index like this:\njavascript\niceCreamFlavors[5] = \"Cookie Dough\"; //Added \"Cookie Dough\"\n✅ A more common way to push values to an array is by using array operators such as array",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6371,
      "relative_path": "git_repos\\web-dev-beginners\\2-js-basics\\4-arrays-loops\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "da522cf8605ab56f9943da9dd2e82d97",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\2-js-basics\\4-arrays-loops\\README.md",
    "source_type": "git_repo",
    "title": "JavaScript Basics: Arrays and Loops",
    "content": "on Wikipedia javascript let iceCreamFlavors = [\"Chocolate\", \"Strawberry\", \"Vanilla\", \"Pistachio\", \"Rocky Road\"]; iceCreamFlavors[2]; //\"Vanilla\" You can leverage the index to change a value, like this: javascript iceCreamFlavors[4] = \"Butter Pecan\"; //Changed \"Rocky Road\" to \"Butter Pecan\" And you can insert a new value at a given index like this: javascript iceCreamFlavors[5] = \"Cookie Dough\"; //Added \"Cookie Dough\" ✅ A more common way to push values to an array is by using array operators such as arraypush()\nTo find out how many items are in an array, use the length property javascript\nlet iceCreamFlavors = [\"Chocolate\", \"Strawberry\", \"Vanilla\", \"Pistachio\", \"Rocky Road\"];\niceCreamFlavors length; //5\n✅ Try it yourself Use your browser's console to create and manipulate an array of your own creation Loops\nLoops allow us to perform repetitive or iterative tasks, and can save a lot of time and code Each iteration can vary in their variables, values, and conditions There are different types of loops in JavaScript, and they all have small differences, but essentially do the same thing: loop over data For Loop\nThe for loop requires 3 parts to iterate:\n- counter A variable that is typically initialized with a number that counts the number of iterations\n- condition Expression that uses comparison operators to cause the loop to stop when false\n- iteration-expression Runs at the end of each iteration, typically used to change the counter value\njavascript\n// Counting up to 10\nfor (let i = 0; i < 10; i++) {\nconsole log(i);\n}\n✅ Run this code in a browser console What happens when you make small changes to the counter, condition, or iteration expression Can you make it run backwards, creating a countdown While loop\nUnlike the syntax of the for loop, while loops only require a condition that will stop the loop when the condition becomes false Conditions in loops usually rely on other values like counters, and must be managed during the loop Starting values for counters must be created outside the loop, and any expressions to meet a condition, including changing the counter must be maintained inside the loop",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6371,
      "relative_path": "git_repos\\web-dev-beginners\\2-js-basics\\4-arrays-loops\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "75d78330be24fcb1cf44a2a01146c973",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\2-js-basics\\4-arrays-loops\\README.md",
    "source_type": "git_repo",
    "title": "JavaScript Basics: Arrays and Loops",
    "content": "make it run backwards, creating a countdown While loop Unlike the syntax of the for loop, while loops only require a condition that will stop the loop when the condition becomes false Conditions in loops usually rely on other values like counters, and must be managed during the loop Starting values for counters must be created outside the loop, and any expressions to meet a condition, including changing the counter must be maintained inside the loopjavascript\n//Counting up to 10\nlet i = 0;\nwhile (i < 10) {\nconsole log(i);\ni++;\n}\n✅ Why would you choose a for loop vs a while loop 17K viewers had the same question on StackOverflow, and some of the opinions might be interesting to you Loops and Arrays\nArrays are often used with loops because most conditions require the length of the array to stop the loop, and the index can also be the counter value ```javascript\nlet iceCreamFlavors = [\"Chocolate\", \"Strawberry\", \"Vanilla\", \"Pistachio\", \"Rocky Road\"];\nfor (let i = 0; i < iceCreamFlavors length; i++) {\nconsole log(iceCreamFlavors[i]);\n} //Ends when all flavors are printed\n```\n✅ Experiment with looping over an array of your own making in your browser's console 🚀 Challenge\nThere are other ways of looping over arrays other than for and while loops There are forEach, for-of, and map Rewrite your array loop using one of these techniques Post-Lecture Quiz\nPost-lecture quiz\nReview & Self Study\nArrays in JavaScript have many methods attached to them, that are extremely useful for data manipulation Read up on these methods and try some of them out (like push, pop, slice and splice) on an array of your creation Assignment\nLoop an Array",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6371,
      "relative_path": "git_repos\\web-dev-beginners\\2-js-basics\\4-arrays-loops\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 371,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "a6046026bf35796ed1709c7325f2811d",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\1-getting-started-lessons\\1-intro-to-programming-languages\\assignment.md",
    "source_type": "git_repo",
    "title": "Reading the Docs",
    "content": "Reading the Docs\nInstructions\nThere are many tools that a web developer may need that are on the MDN documentation for client-side tooling. Select 3 tools not covered in the lesson, explain why a web developer would use it, and search for a tool that falls under this category and share its documentation. Do not use the same tool example on MDN docs.\nRubric\nExemplary | Adequate | Needs Improvement\n--- | --- | -- |\n|Explained why web developer would use tool| Explained how, but not why developer would use tool| Did not mention how or why a developer would use tool  |",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 696,
      "relative_path": "git_repos\\web-dev-beginners\\1-getting-started-lessons\\1-intro-to-programming-languages\\assignment.md",
      "source_type": "git_repo"
    },
    "token_count": 129,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "94835945f70913abd085e1bda2efd16c",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "盆栽盒專案 Part 3 - DOM 元素控制與閉包\n由 Tomomi Imura 繪製\n課前測驗\n課前測驗\n大綱\n操作 DOM (Document Object Model) 是網頁開發的一項關鍵。根據 MDN 文件， 「Document Object Model (DOM) 元素能根據網頁文件的結構與內容來呈現物件」。藉由使用 JavaScript 框架而非原始的 JavaScript 程式碼來管理 DOM，在網頁上操作 DOM 的挑戰已經不比以前困難了，但這裡我們要自己來管理它們！\n此外，這堂課也會介紹有關JavaScript 閉包(Closure)的概念，你可以想像成一個函式被包在另一個函式中，以訪問外面函式範圍中的變數。\nJavaScript 閉包是個廣闊且複雜的主題。本堂課只觸及建立盆栽盒需要的最基礎概念。你能得知一個閉包為：內部函式和外部函式建立一項關係，允許內部函式存取外部函式的變數等作用域。要得知更多關於閉包的原理，請造訪觀看額外的文件。\n我們會使用閉包來操控 DOM。\n想像 DOM 就像一棵樹，表現出所有操作網頁的方式。多樣的 APIs (Application Program Interfaces) 提供程式開發者，依照自己使用的程式語言，以存取、編輯、編排等方式管理 DOM 元素。\nHTML 語法會參考 DOM 的呈現方式。出自 Olfa Nasraoui。\n在這堂課中，我們會完成我們的盆栽盒專案，建立 JavaScript 來對網頁中的植物進行互動式操作。\n開始之前\n確保盆栽盒的 HTML 與 CSS 已經編輯完成。這堂課會新增拖曳植物進出盆栽罐的功能。\n課題\n在專案資料夾中，新增檔案 script",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 702,
    "chunk_index": 0,
    "total_chunks": 51
  },
  {
    "id": "d70c16b17546289060beaa036d0696be",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "盆栽盒專案 Part 3 - DOM 元素控制與閉包\n由 Tomomi Imura 繪製\n課前測驗\n課前測驗\n大綱\n操作 DOM (Document Object Model) 是網頁開發的一項關鍵。根據 MDN 文件， 「Document Object Model (DOM) 元素能根據網頁文件的結構與內容來呈現物件」。藉由使用 JavaScript 框架而非原始的 JavaScript 程式碼來管理 DOM，在網頁上操作 DOM 的挑戰已經不比以前困難了，但這裡我們要自己來管理它們！\n此外，這堂課也會介紹有關JavaScript 閉包(Closure)的概念，你可以想像成一個函式被包在另一個函式中，以訪問外面函式範圍中的變數。\nJavaScript 閉包是個廣闊且複雜的主題。本堂課只觸及建立盆栽盒需要的最基礎概念。你能得知一個閉包為：內部函式和外部函式建立一項關係，允許內部函式存取外部函式的變數等作用域。要得知更多關於閉包的原理，請造訪觀看額外的文件。\n我們會使用閉包來操控 DOM。\n想像 DOM 就像一棵樹，表現出所有操作網頁的方式。多樣的 APIs (Application Program Interfaces) 提供程式開發者，依照自己使用的程式語言，以存取、編輯、編排等方式管理 DOM 元素。\nHTML 語法會參考 DOM 的呈現方式。出自 Olfa Nasraoui。\n在這堂課中，我們會完成我們的盆栽盒專案，建立 JavaScript 來對網頁中的植物進行互動式操作。\n開始之前\n確保盆栽盒的 HTML 與 CSS 已經編輯完成。這堂課會新增拖曳植物進出盆栽罐的功能。\n課題\n在專案資料夾中，新增檔案 scriptjs。 匯入該檔案在 HTML 檔 <head> 的部分：\nhtml\n<script src=\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 730,
    "chunk_index": 1,
    "total_chunks": 51
  },
  {
    "id": "504a1f4267dd8b184288da22f9a72a64",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "盆栽盒專案 Part 3 - DOM 元素控制與閉包\n由 Tomomi Imura 繪製\n課前測驗\n課前測驗\n大綱\n操作 DOM (Document Object Model) 是網頁開發的一項關鍵。根據 MDN 文件， 「Document Object Model (DOM) 元素能根據網頁文件的結構與內容來呈現物件」。藉由使用 JavaScript 框架而非原始的 JavaScript 程式碼來管理 DOM，在網頁上操作 DOM 的挑戰已經不比以前困難了，但這裡我們要自己來管理它們！\n此外，這堂課也會介紹有關JavaScript 閉包(Closure)的概念，你可以想像成一個函式被包在另一個函式中，以訪問外面函式範圍中的變數。\nJavaScript 閉包是個廣闊且複雜的主題。本堂課只觸及建立盆栽盒需要的最基礎概念。你能得知一個閉包為：內部函式和外部函式建立一項關係，允許內部函式存取外部函式的變數等作用域。要得知更多關於閉包的原理，請造訪觀看額外的文件。\n我們會使用閉包來操控 DOM。\n想像 DOM 就像一棵樹，表現出所有操作網頁的方式。多樣的 APIs (Application Program Interfaces) 提供程式開發者，依照自己使用的程式語言，以存取、編輯、編排等方式管理 DOM 元素。\nHTML 語法會參考 DOM 的呈現方式。出自 Olfa Nasraoui。\n在這堂課中，我們會完成我們的盆栽盒專案，建立 JavaScript 來對網頁中的植物進行互動式操作。\n開始之前\n確保盆栽盒的 HTML 與 CSS 已經編輯完成。這堂課會新增拖曳植物進出盆栽罐的功能。\n課題\n在專案資料夾中，新增檔案 scriptjs。 匯入該檔案在 HTML 檔 <head> 的部分：\nhtml\n<script src=\"/script",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 731,
    "chunk_index": 2,
    "total_chunks": 51
  },
  {
    "id": "bb2e28482e2e7f10c557ef916906e970",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "盆栽盒專案 Part 3 - DOM 元素控制與閉包\n由 Tomomi Imura 繪製\n課前測驗\n課前測驗\n大綱\n操作 DOM (Document Object Model) 是網頁開發的一項關鍵。根據 MDN 文件， 「Document Object Model (DOM) 元素能根據網頁文件的結構與內容來呈現物件」。藉由使用 JavaScript 框架而非原始的 JavaScript 程式碼來管理 DOM，在網頁上操作 DOM 的挑戰已經不比以前困難了，但這裡我們要自己來管理它們！\n此外，這堂課也會介紹有關JavaScript 閉包(Closure)的概念，你可以想像成一個函式被包在另一個函式中，以訪問外面函式範圍中的變數。\nJavaScript 閉包是個廣闊且複雜的主題。本堂課只觸及建立盆栽盒需要的最基礎概念。你能得知一個閉包為：內部函式和外部函式建立一項關係，允許內部函式存取外部函式的變數等作用域。要得知更多關於閉包的原理，請造訪觀看額外的文件。\n我們會使用閉包來操控 DOM。\n想像 DOM 就像一棵樹，表現出所有操作網頁的方式。多樣的 APIs (Application Program Interfaces) 提供程式開發者，依照自己使用的程式語言，以存取、編輯、編排等方式管理 DOM 元素。\nHTML 語法會參考 DOM 的呈現方式。出自 Olfa Nasraoui。\n在這堂課中，我們會完成我們的盆栽盒專案，建立 JavaScript 來對網頁中的植物進行互動式操作。\n開始之前\n確保盆栽盒的 HTML 與 CSS 已經編輯完成。這堂課會新增拖曳植物進出盆栽罐的功能。\n課題\n在專案資料夾中，新增檔案 scriptjs。 匯入該檔案在 HTML 檔 <head> 的部分：\nhtml\n<script src=\"/scriptjs\" defer></script>\n> 筆記：匯入外部 JavaScript 檔案到 HTML 檔案須使用 defer，讓 JavaScript 檔案只有在 HTML 被完全載入時才被執行。你也可以使用 async 的屬性，允許 JavaScript 在解析 HTML 檔時就被執行。這項專案中，我們必須確保 HTML 的元件被完整建立後才允許使用拖曳功能。\nDOM 元素\n我們要做的第一件事是建立 DOM 下，要被操控的物件的連結。在專案例子中，我們有罐子外的十四株植物等著被拖曳。\n課題\nhtml\ndragElement(document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 948,
    "chunk_index": 3,
    "total_chunks": 51
  },
  {
    "id": "46ede1abf672aca732378c566e3b9b09",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "框架而非原始的 JavaScript 程式碼來管理 DOM，在網頁上操作 DOM 的挑戰已經不比以前困難了，但這裡我們要自己來管理它們！ 此外，這堂課也會介紹有關JavaScript 閉包(Closure)的概念，你可以想像成一個函式被包在另一個函式中，以訪問外面函式範圍中的變數。 JavaScript 閉包是個廣闊且複雜的主題。本堂課只觸及建立盆栽盒需要的最基礎概念。你能得知一個閉包為：內部函式和外部函式建立一項關係，允許內部函式存取外部函式的變數等作用域。要得知更多關於閉包的原理，請造訪觀看額外的文件。 我們會使用閉包來操控 DOM。 想像 DOM 就像一棵樹，表現出所有操作網頁的方式。多樣的 APIs (Application Program Interfaces) 提供程式開發者，依照自己使用的程式語言，以存取、編輯、編排等方式管理 DOM 元素。 HTML 語法會參考 DOM 的呈現方式。出自 Olfa Nasraoui。 在這堂課中，我們會完成我們的盆栽盒專案，建立 JavaScript 來對網頁中的植物進行互動式操作。 開始之前 確保盆栽盒的 HTML 與 CSS 已經編輯完成。這堂課會新增拖曳植物進出盆栽罐的功能。 課題 在專案資料夾中，新增檔案 scriptjs。 匯入該檔案在 HTML 檔 <head> 的部分： html <script src=\"/scriptjs\" defer></script> > 筆記：匯入外部 JavaScript 檔案到 HTML 檔案須使用 defer，讓 JavaScript 檔案只有在 HTML 被完全載入時才被執行。你也可以使用 async 的屬性，允許 JavaScript 在解析 HTML 檔時就被執行。這項專案中，我們必須確保 HTML 的元件被完整建立後才允許使用拖曳功能。 DOM 元素 我們要做的第一件事是建立 DOM 下，要被操控的物件的連結。在專案例子中，我們有罐子外的十四株植物等著被拖曳。 課題 html dragElement(documentgetElementById('plant1'));\ndragElement(document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 817,
    "chunk_index": 4,
    "total_chunks": 51
  },
  {
    "id": "595cd2110ab8e29600d17779618c15d7",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "JavaScript 程式碼來管理 DOM，在網頁上操作 DOM 的挑戰已經不比以前困難了，但這裡我們要自己來管理它們！ 此外，這堂課也會介紹有關JavaScript 閉包(Closure)的概念，你可以想像成一個函式被包在另一個函式中，以訪問外面函式範圍中的變數。 JavaScript 閉包是個廣闊且複雜的主題。本堂課只觸及建立盆栽盒需要的最基礎概念。你能得知一個閉包為：內部函式和外部函式建立一項關係，允許內部函式存取外部函式的變數等作用域。要得知更多關於閉包的原理，請造訪觀看額外的文件。 我們會使用閉包來操控 DOM。 想像 DOM 就像一棵樹，表現出所有操作網頁的方式。多樣的 APIs (Application Program Interfaces) 提供程式開發者，依照自己使用的程式語言，以存取、編輯、編排等方式管理 DOM 元素。 HTML 語法會參考 DOM 的呈現方式。出自 Olfa Nasraoui。 在這堂課中，我們會完成我們的盆栽盒專案，建立 JavaScript 來對網頁中的植物進行互動式操作。 開始之前 確保盆栽盒的 HTML 與 CSS 已經編輯完成。這堂課會新增拖曳植物進出盆栽罐的功能。 課題 在專案資料夾中，新增檔案 scriptjs。 匯入該檔案在 HTML 檔 <head> 的部分： html <script src=\"/scriptjs\" defer></script> > 筆記：匯入外部 JavaScript 檔案到 HTML 檔案須使用 defer，讓 JavaScript 檔案只有在 HTML 被完全載入時才被執行。你也可以使用 async 的屬性，允許 JavaScript 在解析 HTML 檔時就被執行。這項專案中，我們必須確保 HTML 的元件被完整建立後才允許使用拖曳功能。 DOM 元素 我們要做的第一件事是建立 DOM 下，要被操控的物件的連結。在專案例子中，我們有罐子外的十四株植物等著被拖曳。 課題 html dragElement(documentgetElementById('plant1')); dragElement(documentgetElementById('plant2'));\ndragElement(document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 817,
    "chunk_index": 5,
    "total_chunks": 51
  },
  {
    "id": "2b8912463bf0d26ad0c7adc27bb5e883",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "程式碼來管理 DOM，在網頁上操作 DOM 的挑戰已經不比以前困難了，但這裡我們要自己來管理它們！ 此外，這堂課也會介紹有關JavaScript 閉包(Closure)的概念，你可以想像成一個函式被包在另一個函式中，以訪問外面函式範圍中的變數。 JavaScript 閉包是個廣闊且複雜的主題。本堂課只觸及建立盆栽盒需要的最基礎概念。你能得知一個閉包為：內部函式和外部函式建立一項關係，允許內部函式存取外部函式的變數等作用域。要得知更多關於閉包的原理，請造訪觀看額外的文件。 我們會使用閉包來操控 DOM。 想像 DOM 就像一棵樹，表現出所有操作網頁的方式。多樣的 APIs (Application Program Interfaces) 提供程式開發者，依照自己使用的程式語言，以存取、編輯、編排等方式管理 DOM 元素。 HTML 語法會參考 DOM 的呈現方式。出自 Olfa Nasraoui。 在這堂課中，我們會完成我們的盆栽盒專案，建立 JavaScript 來對網頁中的植物進行互動式操作。 開始之前 確保盆栽盒的 HTML 與 CSS 已經編輯完成。這堂課會新增拖曳植物進出盆栽罐的功能。 課題 在專案資料夾中，新增檔案 scriptjs。 匯入該檔案在 HTML 檔 <head> 的部分： html <script src=\"/scriptjs\" defer></script> > 筆記：匯入外部 JavaScript 檔案到 HTML 檔案須使用 defer，讓 JavaScript 檔案只有在 HTML 被完全載入時才被執行。你也可以使用 async 的屬性，允許 JavaScript 在解析 HTML 檔時就被執行。這項專案中，我們必須確保 HTML 的元件被完整建立後才允許使用拖曳功能。 DOM 元素 我們要做的第一件事是建立 DOM 下，要被操控的物件的連結。在專案例子中，我們有罐子外的十四株植物等著被拖曳。 課題 html dragElement(documentgetElementById('plant1')); dragElement(documentgetElementById('plant2')); dragElement(documentgetElementById('plant3'));\ndragElement(document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 823,
    "chunk_index": 6,
    "total_chunks": 51
  },
  {
    "id": "4e615060ce60b09c63c9b52a851ef696",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "DOM，在網頁上操作 DOM 的挑戰已經不比以前困難了，但這裡我們要自己來管理它們！ 此外，這堂課也會介紹有關JavaScript 閉包(Closure)的概念，你可以想像成一個函式被包在另一個函式中，以訪問外面函式範圍中的變數。 JavaScript 閉包是個廣闊且複雜的主題。本堂課只觸及建立盆栽盒需要的最基礎概念。你能得知一個閉包為：內部函式和外部函式建立一項關係，允許內部函式存取外部函式的變數等作用域。要得知更多關於閉包的原理，請造訪觀看額外的文件。 我們會使用閉包來操控 DOM。 想像 DOM 就像一棵樹，表現出所有操作網頁的方式。多樣的 APIs (Application Program Interfaces) 提供程式開發者，依照自己使用的程式語言，以存取、編輯、編排等方式管理 DOM 元素。 HTML 語法會參考 DOM 的呈現方式。出自 Olfa Nasraoui。 在這堂課中，我們會完成我們的盆栽盒專案，建立 JavaScript 來對網頁中的植物進行互動式操作。 開始之前 確保盆栽盒的 HTML 與 CSS 已經編輯完成。這堂課會新增拖曳植物進出盆栽罐的功能。 課題 在專案資料夾中，新增檔案 scriptjs。 匯入該檔案在 HTML 檔 <head> 的部分： html <script src=\"/scriptjs\" defer></script> > 筆記：匯入外部 JavaScript 檔案到 HTML 檔案須使用 defer，讓 JavaScript 檔案只有在 HTML 被完全載入時才被執行。你也可以使用 async 的屬性，允許 JavaScript 在解析 HTML 檔時就被執行。這項專案中，我們必須確保 HTML 的元件被完整建立後才允許使用拖曳功能。 DOM 元素 我們要做的第一件事是建立 DOM 下，要被操控的物件的連結。在專案例子中，我們有罐子外的十四株植物等著被拖曳。 課題 html dragElement(documentgetElementById('plant1')); dragElement(documentgetElementById('plant2')); dragElement(documentgetElementById('plant3')); dragElement(documentgetElementById('plant4'));\ndragElement(document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 825,
    "chunk_index": 7,
    "total_chunks": 51
  },
  {
    "id": "217b8102801667d0d39184c828b231b3",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "DOM 的挑戰已經不比以前困難了，但這裡我們要自己來管理它們！ 此外，這堂課也會介紹有關JavaScript 閉包(Closure)的概念，你可以想像成一個函式被包在另一個函式中，以訪問外面函式範圍中的變數。 JavaScript 閉包是個廣闊且複雜的主題。本堂課只觸及建立盆栽盒需要的最基礎概念。你能得知一個閉包為：內部函式和外部函式建立一項關係，允許內部函式存取外部函式的變數等作用域。要得知更多關於閉包的原理，請造訪觀看額外的文件。 我們會使用閉包來操控 DOM。 想像 DOM 就像一棵樹，表現出所有操作網頁的方式。多樣的 APIs (Application Program Interfaces) 提供程式開發者，依照自己使用的程式語言，以存取、編輯、編排等方式管理 DOM 元素。 HTML 語法會參考 DOM 的呈現方式。出自 Olfa Nasraoui。 在這堂課中，我們會完成我們的盆栽盒專案，建立 JavaScript 來對網頁中的植物進行互動式操作。 開始之前 確保盆栽盒的 HTML 與 CSS 已經編輯完成。這堂課會新增拖曳植物進出盆栽罐的功能。 課題 在專案資料夾中，新增檔案 scriptjs。 匯入該檔案在 HTML 檔 <head> 的部分： html <script src=\"/scriptjs\" defer></script> > 筆記：匯入外部 JavaScript 檔案到 HTML 檔案須使用 defer，讓 JavaScript 檔案只有在 HTML 被完全載入時才被執行。你也可以使用 async 的屬性，允許 JavaScript 在解析 HTML 檔時就被執行。這項專案中，我們必須確保 HTML 的元件被完整建立後才允許使用拖曳功能。 DOM 元素 我們要做的第一件事是建立 DOM 下，要被操控的物件的連結。在專案例子中，我們有罐子外的十四株植物等著被拖曳。 課題 html dragElement(documentgetElementById('plant1')); dragElement(documentgetElementById('plant2')); dragElement(documentgetElementById('plant3')); dragElement(documentgetElementById('plant4')); dragElement(documentgetElementById('plant5'));\ndragElement(document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 825,
    "chunk_index": 8,
    "total_chunks": 51
  },
  {
    "id": "86b927e25d581ba936ca698429e2cfd6",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "的挑戰已經不比以前困難了，但這裡我們要自己來管理它們！ 此外，這堂課也會介紹有關JavaScript 閉包(Closure)的概念，你可以想像成一個函式被包在另一個函式中，以訪問外面函式範圍中的變數。 JavaScript 閉包是個廣闊且複雜的主題。本堂課只觸及建立盆栽盒需要的最基礎概念。你能得知一個閉包為：內部函式和外部函式建立一項關係，允許內部函式存取外部函式的變數等作用域。要得知更多關於閉包的原理，請造訪觀看額外的文件。 我們會使用閉包來操控 DOM。 想像 DOM 就像一棵樹，表現出所有操作網頁的方式。多樣的 APIs (Application Program Interfaces) 提供程式開發者，依照自己使用的程式語言，以存取、編輯、編排等方式管理 DOM 元素。 HTML 語法會參考 DOM 的呈現方式。出自 Olfa Nasraoui。 在這堂課中，我們會完成我們的盆栽盒專案，建立 JavaScript 來對網頁中的植物進行互動式操作。 開始之前 確保盆栽盒的 HTML 與 CSS 已經編輯完成。這堂課會新增拖曳植物進出盆栽罐的功能。 課題 在專案資料夾中，新增檔案 scriptjs。 匯入該檔案在 HTML 檔 <head> 的部分： html <script src=\"/scriptjs\" defer></script> > 筆記：匯入外部 JavaScript 檔案到 HTML 檔案須使用 defer，讓 JavaScript 檔案只有在 HTML 被完全載入時才被執行。你也可以使用 async 的屬性，允許 JavaScript 在解析 HTML 檔時就被執行。這項專案中，我們必須確保 HTML 的元件被完整建立後才允許使用拖曳功能。 DOM 元素 我們要做的第一件事是建立 DOM 下，要被操控的物件的連結。在專案例子中，我們有罐子外的十四株植物等著被拖曳。 課題 html dragElement(documentgetElementById('plant1')); dragElement(documentgetElementById('plant2')); dragElement(documentgetElementById('plant3')); dragElement(documentgetElementById('plant4')); dragElement(documentgetElementById('plant5')); dragElement(documentgetElementById('plant6'));\ndragElement(document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 833,
    "chunk_index": 9,
    "total_chunks": 51
  },
  {
    "id": "1eaa0029ca5c1597062cc3f1dd44b6bc",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "此外，這堂課也會介紹有關JavaScript 閉包(Closure)的概念，你可以想像成一個函式被包在另一個函式中，以訪問外面函式範圍中的變數。 JavaScript 閉包是個廣闊且複雜的主題。本堂課只觸及建立盆栽盒需要的最基礎概念。你能得知一個閉包為：內部函式和外部函式建立一項關係，允許內部函式存取外部函式的變數等作用域。要得知更多關於閉包的原理，請造訪觀看額外的文件。 我們會使用閉包來操控 DOM。 想像 DOM 就像一棵樹，表現出所有操作網頁的方式。多樣的 APIs (Application Program Interfaces) 提供程式開發者，依照自己使用的程式語言，以存取、編輯、編排等方式管理 DOM 元素。 HTML 語法會參考 DOM 的呈現方式。出自 Olfa Nasraoui。 在這堂課中，我們會完成我們的盆栽盒專案，建立 JavaScript 來對網頁中的植物進行互動式操作。 開始之前 確保盆栽盒的 HTML 與 CSS 已經編輯完成。這堂課會新增拖曳植物進出盆栽罐的功能。 課題 在專案資料夾中，新增檔案 scriptjs。 匯入該檔案在 HTML 檔 <head> 的部分： html <script src=\"/scriptjs\" defer></script> > 筆記：匯入外部 JavaScript 檔案到 HTML 檔案須使用 defer，讓 JavaScript 檔案只有在 HTML 被完全載入時才被執行。你也可以使用 async 的屬性，允許 JavaScript 在解析 HTML 檔時就被執行。這項專案中，我們必須確保 HTML 的元件被完整建立後才允許使用拖曳功能。 DOM 元素 我們要做的第一件事是建立 DOM 下，要被操控的物件的連結。在專案例子中，我們有罐子外的十四株植物等著被拖曳。 課題 html dragElement(documentgetElementById('plant1')); dragElement(documentgetElementById('plant2')); dragElement(documentgetElementById('plant3')); dragElement(documentgetElementById('plant4')); dragElement(documentgetElementById('plant5')); dragElement(documentgetElementById('plant6')); dragElement(documentgetElementById('plant7'));\ndragElement(document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 802,
    "chunk_index": 10,
    "total_chunks": 51
  },
  {
    "id": "28c3469a7209acf7e345a5f89e21d28a",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "閉包(Closure)的概念，你可以想像成一個函式被包在另一個函式中，以訪問外面函式範圍中的變數。 JavaScript 閉包是個廣闊且複雜的主題。本堂課只觸及建立盆栽盒需要的最基礎概念。你能得知一個閉包為：內部函式和外部函式建立一項關係，允許內部函式存取外部函式的變數等作用域。要得知更多關於閉包的原理，請造訪觀看額外的文件。 我們會使用閉包來操控 DOM。 想像 DOM 就像一棵樹，表現出所有操作網頁的方式。多樣的 APIs (Application Program Interfaces) 提供程式開發者，依照自己使用的程式語言，以存取、編輯、編排等方式管理 DOM 元素。 HTML 語法會參考 DOM 的呈現方式。出自 Olfa Nasraoui。 在這堂課中，我們會完成我們的盆栽盒專案，建立 JavaScript 來對網頁中的植物進行互動式操作。 開始之前 確保盆栽盒的 HTML 與 CSS 已經編輯完成。這堂課會新增拖曳植物進出盆栽罐的功能。 課題 在專案資料夾中，新增檔案 scriptjs。 匯入該檔案在 HTML 檔 <head> 的部分： html <script src=\"/scriptjs\" defer></script> > 筆記：匯入外部 JavaScript 檔案到 HTML 檔案須使用 defer，讓 JavaScript 檔案只有在 HTML 被完全載入時才被執行。你也可以使用 async 的屬性，允許 JavaScript 在解析 HTML 檔時就被執行。這項專案中，我們必須確保 HTML 的元件被完整建立後才允許使用拖曳功能。 DOM 元素 我們要做的第一件事是建立 DOM 下，要被操控的物件的連結。在專案例子中，我們有罐子外的十四株植物等著被拖曳。 課題 html dragElement(documentgetElementById('plant1')); dragElement(documentgetElementById('plant2')); dragElement(documentgetElementById('plant3')); dragElement(documentgetElementById('plant4')); dragElement(documentgetElementById('plant5')); dragElement(documentgetElementById('plant6')); dragElement(documentgetElementById('plant7')); dragElement(documentgetElementById('plant8'));\ndragElement(document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 792,
    "chunk_index": 11,
    "total_chunks": 51
  },
  {
    "id": "a46f4017ba92acc50f81a1f3426e7127",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "JavaScript 閉包是個廣闊且複雜的主題。本堂課只觸及建立盆栽盒需要的最基礎概念。你能得知一個閉包為：內部函式和外部函式建立一項關係，允許內部函式存取外部函式的變數等作用域。要得知更多關於閉包的原理，請造訪觀看額外的文件。 我們會使用閉包來操控 DOM。 想像 DOM 就像一棵樹，表現出所有操作網頁的方式。多樣的 APIs (Application Program Interfaces) 提供程式開發者，依照自己使用的程式語言，以存取、編輯、編排等方式管理 DOM 元素。 HTML 語法會參考 DOM 的呈現方式。出自 Olfa Nasraoui。 在這堂課中，我們會完成我們的盆栽盒專案，建立 JavaScript 來對網頁中的植物進行互動式操作。 開始之前 確保盆栽盒的 HTML 與 CSS 已經編輯完成。這堂課會新增拖曳植物進出盆栽罐的功能。 課題 在專案資料夾中，新增檔案 scriptjs。 匯入該檔案在 HTML 檔 <head> 的部分： html <script src=\"/scriptjs\" defer></script> > 筆記：匯入外部 JavaScript 檔案到 HTML 檔案須使用 defer，讓 JavaScript 檔案只有在 HTML 被完全載入時才被執行。你也可以使用 async 的屬性，允許 JavaScript 在解析 HTML 檔時就被執行。這項專案中，我們必須確保 HTML 的元件被完整建立後才允許使用拖曳功能。 DOM 元素 我們要做的第一件事是建立 DOM 下，要被操控的物件的連結。在專案例子中，我們有罐子外的十四株植物等著被拖曳。 課題 html dragElement(documentgetElementById('plant1')); dragElement(documentgetElementById('plant2')); dragElement(documentgetElementById('plant3')); dragElement(documentgetElementById('plant4')); dragElement(documentgetElementById('plant5')); dragElement(documentgetElementById('plant6')); dragElement(documentgetElementById('plant7')); dragElement(documentgetElementById('plant8')); dragElement(documentgetElementById('plant9'));\ndragElement(document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 743,
    "chunk_index": 12,
    "total_chunks": 51
  },
  {
    "id": "5582a24ab5685fcc45b31c892de26ddd",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "閉包是個廣闊且複雜的主題。本堂課只觸及建立盆栽盒需要的最基礎概念。你能得知一個閉包為：內部函式和外部函式建立一項關係，允許內部函式存取外部函式的變數等作用域。要得知更多關於閉包的原理，請造訪觀看額外的文件。 我們會使用閉包來操控 DOM。 想像 DOM 就像一棵樹，表現出所有操作網頁的方式。多樣的 APIs (Application Program Interfaces) 提供程式開發者，依照自己使用的程式語言，以存取、編輯、編排等方式管理 DOM 元素。 HTML 語法會參考 DOM 的呈現方式。出自 Olfa Nasraoui。 在這堂課中，我們會完成我們的盆栽盒專案，建立 JavaScript 來對網頁中的植物進行互動式操作。 開始之前 確保盆栽盒的 HTML 與 CSS 已經編輯完成。這堂課會新增拖曳植物進出盆栽罐的功能。 課題 在專案資料夾中，新增檔案 scriptjs。 匯入該檔案在 HTML 檔 <head> 的部分： html <script src=\"/scriptjs\" defer></script> > 筆記：匯入外部 JavaScript 檔案到 HTML 檔案須使用 defer，讓 JavaScript 檔案只有在 HTML 被完全載入時才被執行。你也可以使用 async 的屬性，允許 JavaScript 在解析 HTML 檔時就被執行。這項專案中，我們必須確保 HTML 的元件被完整建立後才允許使用拖曳功能。 DOM 元素 我們要做的第一件事是建立 DOM 下，要被操控的物件的連結。在專案例子中，我們有罐子外的十四株植物等著被拖曳。 課題 html dragElement(documentgetElementById('plant1')); dragElement(documentgetElementById('plant2')); dragElement(documentgetElementById('plant3')); dragElement(documentgetElementById('plant4')); dragElement(documentgetElementById('plant5')); dragElement(documentgetElementById('plant6')); dragElement(documentgetElementById('plant7')); dragElement(documentgetElementById('plant8')); dragElement(documentgetElementById('plant9')); dragElement(documentgetElementById('plant10'));\ndragElement(document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 751,
    "chunk_index": 13,
    "total_chunks": 51
  },
  {
    "id": "d103f67fbafb6db2ed22d0c58bed2b32",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "我們會使用閉包來操控 DOM。 想像 DOM 就像一棵樹，表現出所有操作網頁的方式。多樣的 APIs (Application Program Interfaces) 提供程式開發者，依照自己使用的程式語言，以存取、編輯、編排等方式管理 DOM 元素。 HTML 語法會參考 DOM 的呈現方式。出自 Olfa Nasraoui。 在這堂課中，我們會完成我們的盆栽盒專案，建立 JavaScript 來對網頁中的植物進行互動式操作。 開始之前 確保盆栽盒的 HTML 與 CSS 已經編輯完成。這堂課會新增拖曳植物進出盆栽罐的功能。 課題 在專案資料夾中，新增檔案 scriptjs。 匯入該檔案在 HTML 檔 <head> 的部分： html <script src=\"/scriptjs\" defer></script> > 筆記：匯入外部 JavaScript 檔案到 HTML 檔案須使用 defer，讓 JavaScript 檔案只有在 HTML 被完全載入時才被執行。你也可以使用 async 的屬性，允許 JavaScript 在解析 HTML 檔時就被執行。這項專案中，我們必須確保 HTML 的元件被完整建立後才允許使用拖曳功能。 DOM 元素 我們要做的第一件事是建立 DOM 下，要被操控的物件的連結。在專案例子中，我們有罐子外的十四株植物等著被拖曳。 課題 html dragElement(documentgetElementById('plant1')); dragElement(documentgetElementById('plant2')); dragElement(documentgetElementById('plant3')); dragElement(documentgetElementById('plant4')); dragElement(documentgetElementById('plant5')); dragElement(documentgetElementById('plant6')); dragElement(documentgetElementById('plant7')); dragElement(documentgetElementById('plant8')); dragElement(documentgetElementById('plant9')); dragElement(documentgetElementById('plant10')); dragElement(documentgetElementById('plant11'));\ndragElement(document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 614,
    "chunk_index": 14,
    "total_chunks": 51
  },
  {
    "id": "3ae04553c44bbf8eb448a3b0da13d5cb",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "DOM。 想像 DOM 就像一棵樹，表現出所有操作網頁的方式。多樣的 APIs (Application Program Interfaces) 提供程式開發者，依照自己使用的程式語言，以存取、編輯、編排等方式管理 DOM 元素。 HTML 語法會參考 DOM 的呈現方式。出自 Olfa Nasraoui。 在這堂課中，我們會完成我們的盆栽盒專案，建立 JavaScript 來對網頁中的植物進行互動式操作。 開始之前 確保盆栽盒的 HTML 與 CSS 已經編輯完成。這堂課會新增拖曳植物進出盆栽罐的功能。 課題 在專案資料夾中，新增檔案 scriptjs。 匯入該檔案在 HTML 檔 <head> 的部分： html <script src=\"/scriptjs\" defer></script> > 筆記：匯入外部 JavaScript 檔案到 HTML 檔案須使用 defer，讓 JavaScript 檔案只有在 HTML 被完全載入時才被執行。你也可以使用 async 的屬性，允許 JavaScript 在解析 HTML 檔時就被執行。這項專案中，我們必須確保 HTML 的元件被完整建立後才允許使用拖曳功能。 DOM 元素 我們要做的第一件事是建立 DOM 下，要被操控的物件的連結。在專案例子中，我們有罐子外的十四株植物等著被拖曳。 課題 html dragElement(documentgetElementById('plant1')); dragElement(documentgetElementById('plant2')); dragElement(documentgetElementById('plant3')); dragElement(documentgetElementById('plant4')); dragElement(documentgetElementById('plant5')); dragElement(documentgetElementById('plant6')); dragElement(documentgetElementById('plant7')); dragElement(documentgetElementById('plant8')); dragElement(documentgetElementById('plant9')); dragElement(documentgetElementById('plant10')); dragElement(documentgetElementById('plant11')); dragElement(documentgetElementById('plant12'));\ndragElement(document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 608,
    "chunk_index": 15,
    "total_chunks": 51
  },
  {
    "id": "3e17110a3b285ce771c78c14fda83820",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "想像 DOM 就像一棵樹，表現出所有操作網頁的方式。多樣的 APIs (Application Program Interfaces) 提供程式開發者，依照自己使用的程式語言，以存取、編輯、編排等方式管理 DOM 元素。 HTML 語法會參考 DOM 的呈現方式。出自 Olfa Nasraoui。 在這堂課中，我們會完成我們的盆栽盒專案，建立 JavaScript 來對網頁中的植物進行互動式操作。 開始之前 確保盆栽盒的 HTML 與 CSS 已經編輯完成。這堂課會新增拖曳植物進出盆栽罐的功能。 課題 在專案資料夾中，新增檔案 scriptjs。 匯入該檔案在 HTML 檔 <head> 的部分： html <script src=\"/scriptjs\" defer></script> > 筆記：匯入外部 JavaScript 檔案到 HTML 檔案須使用 defer，讓 JavaScript 檔案只有在 HTML 被完全載入時才被執行。你也可以使用 async 的屬性，允許 JavaScript 在解析 HTML 檔時就被執行。這項專案中，我們必須確保 HTML 的元件被完整建立後才允許使用拖曳功能。 DOM 元素 我們要做的第一件事是建立 DOM 下，要被操控的物件的連結。在專案例子中，我們有罐子外的十四株植物等著被拖曳。 課題 html dragElement(documentgetElementById('plant1')); dragElement(documentgetElementById('plant2')); dragElement(documentgetElementById('plant3')); dragElement(documentgetElementById('plant4')); dragElement(documentgetElementById('plant5')); dragElement(documentgetElementById('plant6')); dragElement(documentgetElementById('plant7')); dragElement(documentgetElementById('plant8')); dragElement(documentgetElementById('plant9')); dragElement(documentgetElementById('plant10')); dragElement(documentgetElementById('plant11')); dragElement(documentgetElementById('plant12')); dragElement(documentgetElementById('plant13'));\ndragElement(document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 614,
    "chunk_index": 16,
    "total_chunks": 51
  },
  {
    "id": "50c1f11a01fd68f66391bf49eb905159",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "DOM 就像一棵樹，表現出所有操作網頁的方式。多樣的 APIs (Application Program Interfaces) 提供程式開發者，依照自己使用的程式語言，以存取、編輯、編排等方式管理 DOM 元素。 HTML 語法會參考 DOM 的呈現方式。出自 Olfa Nasraoui。 在這堂課中，我們會完成我們的盆栽盒專案，建立 JavaScript 來對網頁中的植物進行互動式操作。 開始之前 確保盆栽盒的 HTML 與 CSS 已經編輯完成。這堂課會新增拖曳植物進出盆栽罐的功能。 課題 在專案資料夾中，新增檔案 scriptjs。 匯入該檔案在 HTML 檔 <head> 的部分： html <script src=\"/scriptjs\" defer></script> > 筆記：匯入外部 JavaScript 檔案到 HTML 檔案須使用 defer，讓 JavaScript 檔案只有在 HTML 被完全載入時才被執行。你也可以使用 async 的屬性，允許 JavaScript 在解析 HTML 檔時就被執行。這項專案中，我們必須確保 HTML 的元件被完整建立後才允許使用拖曳功能。 DOM 元素 我們要做的第一件事是建立 DOM 下，要被操控的物件的連結。在專案例子中，我們有罐子外的十四株植物等著被拖曳。 課題 html dragElement(documentgetElementById('plant1')); dragElement(documentgetElementById('plant2')); dragElement(documentgetElementById('plant3')); dragElement(documentgetElementById('plant4')); dragElement(documentgetElementById('plant5')); dragElement(documentgetElementById('plant6')); dragElement(documentgetElementById('plant7')); dragElement(documentgetElementById('plant8')); dragElement(documentgetElementById('plant9')); dragElement(documentgetElementById('plant10')); dragElement(documentgetElementById('plant11')); dragElement(documentgetElementById('plant12')); dragElement(documentgetElementById('plant13')); dragElement(documentgetElementById('plant14'));\n發生了什麼事？你正以 DOM 搜尋網頁檔內的物件，藉由 Id 作為依據來搜尋。回想第一堂 HTML 課中，我們可每一株植物一個專屬的 Id (id=\"plant1\")，現在你就可以使用它。在辨別完每一株植物物件後，傳遞給待編輯的函式 dragElement，讓 HTML 物件可以被拖曳。\n✅ 為什麼我們要以 Id 作為物件的參考？為什麼不以 CSS 的 class 作為參考？請參考以前的 CSS 課程回答此問題。\n閉包(Closure)\n現在，你已經準備好要建立 dragElement 閉包，建立包在外部函式內的內部函式組，在我們的例子中，會用上三個函式。\n閉包在一或多個以上函式要存取外部函式時非常好用。看看下面的例子：\njavascript\nfunction displayCandy(){\nlet candy = ['jellybeans'];\nfunction addCandy(candyType) {\ncandy",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 978,
    "chunk_index": 17,
    "total_chunks": 51
  },
  {
    "id": "6ec24aee38a0aca10cf0555b1dada546",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "JavaScript 檔案到 HTML 檔案須使用 defer，讓 JavaScript 檔案只有在 HTML 被完全載入時才被執行。你也可以使用 async 的屬性，允許 JavaScript 在解析 HTML 檔時就被執行。這項專案中，我們必須確保 HTML 的元件被完整建立後才允許使用拖曳功能。 DOM 元素 我們要做的第一件事是建立 DOM 下，要被操控的物件的連結。在專案例子中，我們有罐子外的十四株植物等著被拖曳。 課題 html dragElement(documentgetElementById('plant1')); dragElement(documentgetElementById('plant2')); dragElement(documentgetElementById('plant3')); dragElement(documentgetElementById('plant4')); dragElement(documentgetElementById('plant5')); dragElement(documentgetElementById('plant6')); dragElement(documentgetElementById('plant7')); dragElement(documentgetElementById('plant8')); dragElement(documentgetElementById('plant9')); dragElement(documentgetElementById('plant10')); dragElement(documentgetElementById('plant11')); dragElement(documentgetElementById('plant12')); dragElement(documentgetElementById('plant13')); dragElement(documentgetElementById('plant14')); 發生了什麼事？你正以 DOM 搜尋網頁檔內的物件，藉由 Id 作為依據來搜尋。回想第一堂 HTML 課中，我們可每一株植物一個專屬的 Id (id=\"plant1\")，現在你就可以使用它。在辨別完每一株植物物件後，傳遞給待編輯的函式 dragElement，讓 HTML 物件可以被拖曳。 ✅ 為什麼我們要以 Id 作為物件的參考？為什麼不以 CSS 的 class 作為參考？請參考以前的 CSS 課程回答此問題。 閉包(Closure) 現在，你已經準備好要建立 dragElement 閉包，建立包在外部函式內的內部函式組，在我們的例子中，會用上三個函式。 閉包在一或多個以上函式要存取外部函式時非常好用。看看下面的例子： javascript function displayCandy(){ let candy = ['jellybeans']; function addCandy(candyType) { candypush(candyType)\n}\naddCandy('gumdrops');\n}\ndisplayCandy();\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 703,
    "chunk_index": 18,
    "total_chunks": 51
  },
  {
    "id": "990391fbcb5c89f6aa26eaa41281127b",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "JavaScript 檔案只有在 HTML 被完全載入時才被執行。你也可以使用 async 的屬性，允許 JavaScript 在解析 HTML 檔時就被執行。這項專案中，我們必須確保 HTML 的元件被完整建立後才允許使用拖曳功能。 DOM 元素 我們要做的第一件事是建立 DOM 下，要被操控的物件的連結。在專案例子中，我們有罐子外的十四株植物等著被拖曳。 課題 html dragElement(documentgetElementById('plant1')); dragElement(documentgetElementById('plant2')); dragElement(documentgetElementById('plant3')); dragElement(documentgetElementById('plant4')); dragElement(documentgetElementById('plant5')); dragElement(documentgetElementById('plant6')); dragElement(documentgetElementById('plant7')); dragElement(documentgetElementById('plant8')); dragElement(documentgetElementById('plant9')); dragElement(documentgetElementById('plant10')); dragElement(documentgetElementById('plant11')); dragElement(documentgetElementById('plant12')); dragElement(documentgetElementById('plant13')); dragElement(documentgetElementById('plant14')); 發生了什麼事？你正以 DOM 搜尋網頁檔內的物件，藉由 Id 作為依據來搜尋。回想第一堂 HTML 課中，我們可每一株植物一個專屬的 Id (id=\"plant1\")，現在你就可以使用它。在辨別完每一株植物物件後，傳遞給待編輯的函式 dragElement，讓 HTML 物件可以被拖曳。 ✅ 為什麼我們要以 Id 作為物件的參考？為什麼不以 CSS 的 class 作為參考？請參考以前的 CSS 課程回答此問題。 閉包(Closure) 現在，你已經準備好要建立 dragElement 閉包，建立包在外部函式內的內部函式組，在我們的例子中，會用上三個函式。 閉包在一或多個以上函式要存取外部函式時非常好用。看看下面的例子： javascript function displayCandy(){ let candy = ['jellybeans']; function addCandy(candyType) { candypush(candyType) } addCandy('gumdrops'); } displayCandy(); consolelog(candy)\n這項例子中，函式 displayCandy 包住另一個函式 addCandy，新增新的糖果樣式到已存在的矩陣當中。當執行這段程式時，矩陣 candy 會被認作是未定義，因為它是函式的本地變數。\n✅ 你能讓矩陣 candy 被存取嗎？試著將它移到閉包外面。這時，矩陣會變成全域變數，取消閉包內的存取限制。\n課題\n在檔案 script",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 876,
    "chunk_index": 19,
    "total_chunks": 51
  },
  {
    "id": "3fc436ef4c50a9b45771bcb1afad3611",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "元素 我們要做的第一件事是建立 DOM 下，要被操控的物件的連結。在專案例子中，我們有罐子外的十四株植物等著被拖曳。 課題 html dragElement(documentgetElementById('plant1')); dragElement(documentgetElementById('plant2')); dragElement(documentgetElementById('plant3')); dragElement(documentgetElementById('plant4')); dragElement(documentgetElementById('plant5')); dragElement(documentgetElementById('plant6')); dragElement(documentgetElementById('plant7')); dragElement(documentgetElementById('plant8')); dragElement(documentgetElementById('plant9')); dragElement(documentgetElementById('plant10')); dragElement(documentgetElementById('plant11')); dragElement(documentgetElementById('plant12')); dragElement(documentgetElementById('plant13')); dragElement(documentgetElementById('plant14')); 發生了什麼事？你正以 DOM 搜尋網頁檔內的物件，藉由 Id 作為依據來搜尋。回想第一堂 HTML 課中，我們可每一株植物一個專屬的 Id (id=\"plant1\")，現在你就可以使用它。在辨別完每一株植物物件後，傳遞給待編輯的函式 dragElement，讓 HTML 物件可以被拖曳。 ✅ 為什麼我們要以 Id 作為物件的參考？為什麼不以 CSS 的 class 作為參考？請參考以前的 CSS 課程回答此問題。 閉包(Closure) 現在，你已經準備好要建立 dragElement 閉包，建立包在外部函式內的內部函式組，在我們的例子中，會用上三個函式。 閉包在一或多個以上函式要存取外部函式時非常好用。看看下面的例子： javascript function displayCandy(){ let candy = ['jellybeans']; function addCandy(candyType) { candypush(candyType) } addCandy('gumdrops'); } displayCandy(); consolelog(candy) 這項例子中，函式 displayCandy 包住另一個函式 addCandy，新增新的糖果樣式到已存在的矩陣當中。當執行這段程式時，矩陣 candy 會被認作是未定義，因為它是函式的本地變數。 ✅ 你能讓矩陣 candy 被存取嗎？試著將它移到閉包外面。這時，矩陣會變成全域變數，取消閉包內的存取限制。 課題 在檔案 scriptjs 的元素宣告下方，新增函式：\njavascript\nfunction dragElement(terrariumElement) {\n//set 4 positions for positioning on the screen\nlet pos1 = 0,\npos2 = 0,\npos3 = 0,\npos4 = 0;\nterrariumElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 841,
    "chunk_index": 20,
    "total_chunks": 51
  },
  {
    "id": "c80d2f1e5ff3c2d0286e7429a7d8a9f2",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "Id (id=\"plant1\")，現在你就可以使用它。在辨別完每一株植物物件後，傳遞給待編輯的函式 dragElement，讓 HTML 物件可以被拖曳。 ✅ 為什麼我們要以 Id 作為物件的參考？為什麼不以 CSS 的 class 作為參考？請參考以前的 CSS 課程回答此問題。 閉包(Closure) 現在，你已經準備好要建立 dragElement 閉包，建立包在外部函式內的內部函式組，在我們的例子中，會用上三個函式。 閉包在一或多個以上函式要存取外部函式時非常好用。看看下面的例子： javascript function displayCandy(){ let candy = ['jellybeans']; function addCandy(candyType) { candypush(candyType) } addCandy('gumdrops'); } displayCandy(); consolelog(candy) 這項例子中，函式 displayCandy 包住另一個函式 addCandy，新增新的糖果樣式到已存在的矩陣當中。當執行這段程式時，矩陣 candy 會被認作是未定義，因為它是函式的本地變數。 ✅ 你能讓矩陣 candy 被存取嗎？試著將它移到閉包外面。這時，矩陣會變成全域變數，取消閉包內的存取限制。 課題 在檔案 scriptjs 的元素宣告下方，新增函式： javascript function dragElement(terrariumElement) { //set 4 positions for positioning on the screen let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0; terrariumElementonpointerdown = pointerDrag;\n}\ndragElement 藉由程式定義的參數取得 terrariumElement 物件。之後，設定一些位置 0 的變數給函式內的物件使用。它們是本地變數，給每一個進到拖曳函式內的物件操控。盆栽盒會被這些拖曳物件填充，我們的網頁應用必須要持續追蹤這些物件的位置。\n此外，進到函式的 terrariumElement 也被新增了 pointerdown 事件，它是管理 DOM 的其中一項網頁 APIs。當按鈕按下時，或是在我們案例中，一個拖曳物件被點擊時，onpointerdown 事件就會被觸發。這個事件處理器(event handler)皆運作在網頁與行動瀏覽器上，只有少部分的例外。\n✅ 事件處理器 onclick支援更多的瀏覽器。為什麼我們不在這邊使用它？ 想想看我們在這此建立的視窗互動類型。\n函式 pointerDrag\nterrariumElement 已經準備好被拖曳了。當觸發 onpointerdown 事件時，函式 pointerDrag 會參與其中。新增這項函式在程式碼 terrariumElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 982,
    "chunk_index": 21,
    "total_chunks": 51
  },
  {
    "id": "457aa601e9443bb552ffd49bf2d80d52",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "addCandy('gumdrops'); } displayCandy(); consolelog(candy) 這項例子中，函式 displayCandy 包住另一個函式 addCandy，新增新的糖果樣式到已存在的矩陣當中。當執行這段程式時，矩陣 candy 會被認作是未定義，因為它是函式的本地變數。 ✅ 你能讓矩陣 candy 被存取嗎？試著將它移到閉包外面。這時，矩陣會變成全域變數，取消閉包內的存取限制。 課題 在檔案 scriptjs 的元素宣告下方，新增函式： javascript function dragElement(terrariumElement) { //set 4 positions for positioning on the screen let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0; terrariumElementonpointerdown = pointerDrag; } dragElement 藉由程式定義的參數取得 terrariumElement 物件。之後，設定一些位置 0 的變數給函式內的物件使用。它們是本地變數，給每一個進到拖曳函式內的物件操控。盆栽盒會被這些拖曳物件填充，我們的網頁應用必須要持續追蹤這些物件的位置。 此外，進到函式的 terrariumElement 也被新增了 pointerdown 事件，它是管理 DOM 的其中一項網頁 APIs。當按鈕按下時，或是在我們案例中，一個拖曳物件被點擊時，onpointerdown 事件就會被觸發。這個事件處理器(event handler)皆運作在網頁與行動瀏覽器上，只有少部分的例外。 ✅ 事件處理器 onclick支援更多的瀏覽器。為什麼我們不在這邊使用它？ 想想看我們在這此建立的視窗互動類型。 函式 pointerDrag terrariumElement 已經準備好被拖曳了。當觸發 onpointerdown 事件時，函式 pointerDrag 會參與其中。新增這項函式在程式碼 terrariumElementonpointerdown = pointerDrag; 下方：\n課題\njavascript\nfunction pointerDrag(e) {\ne",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 727,
    "chunk_index": 22,
    "total_chunks": 51
  },
  {
    "id": "13c973341c934d8226e3378a0af23050",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "會被認作是未定義，因為它是函式的本地變數。 ✅ 你能讓矩陣 candy 被存取嗎？試著將它移到閉包外面。這時，矩陣會變成全域變數，取消閉包內的存取限制。 課題 在檔案 scriptjs 的元素宣告下方，新增函式： javascript function dragElement(terrariumElement) { //set 4 positions for positioning on the screen let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0; terrariumElementonpointerdown = pointerDrag; } dragElement 藉由程式定義的參數取得 terrariumElement 物件。之後，設定一些位置 0 的變數給函式內的物件使用。它們是本地變數，給每一個進到拖曳函式內的物件操控。盆栽盒會被這些拖曳物件填充，我們的網頁應用必須要持續追蹤這些物件的位置。 此外，進到函式的 terrariumElement 也被新增了 pointerdown 事件，它是管理 DOM 的其中一項網頁 APIs。當按鈕按下時，或是在我們案例中，一個拖曳物件被點擊時，onpointerdown 事件就會被觸發。這個事件處理器(event handler)皆運作在網頁與行動瀏覽器上，只有少部分的例外。 ✅ 事件處理器 onclick支援更多的瀏覽器。為什麼我們不在這邊使用它？ 想想看我們在這此建立的視窗互動類型。 函式 pointerDrag terrariumElement 已經準備好被拖曳了。當觸發 onpointerdown 事件時，函式 pointerDrag 會參與其中。新增這項函式在程式碼 terrariumElementonpointerdown = pointerDrag; 下方： 課題 javascript function pointerDrag(e) { epreventDefault();\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 638,
    "chunk_index": 23,
    "total_chunks": 51
  },
  {
    "id": "15c4cbc7b766fdd986b55101a51717e6",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "✅ 你能讓矩陣 candy 被存取嗎？試著將它移到閉包外面。這時，矩陣會變成全域變數，取消閉包內的存取限制。 課題 在檔案 scriptjs 的元素宣告下方，新增函式： javascript function dragElement(terrariumElement) { //set 4 positions for positioning on the screen let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0; terrariumElementonpointerdown = pointerDrag; } dragElement 藉由程式定義的參數取得 terrariumElement 物件。之後，設定一些位置 0 的變數給函式內的物件使用。它們是本地變數，給每一個進到拖曳函式內的物件操控。盆栽盒會被這些拖曳物件填充，我們的網頁應用必須要持續追蹤這些物件的位置。 此外，進到函式的 terrariumElement 也被新增了 pointerdown 事件，它是管理 DOM 的其中一項網頁 APIs。當按鈕按下時，或是在我們案例中，一個拖曳物件被點擊時，onpointerdown 事件就會被觸發。這個事件處理器(event handler)皆運作在網頁與行動瀏覽器上，只有少部分的例外。 ✅ 事件處理器 onclick支援更多的瀏覽器。為什麼我們不在這邊使用它？ 想想看我們在這此建立的視窗互動類型。 函式 pointerDrag terrariumElement 已經準備好被拖曳了。當觸發 onpointerdown 事件時，函式 pointerDrag 會參與其中。新增這項函式在程式碼 terrariumElementonpointerdown = pointerDrag; 下方： 課題 javascript function pointerDrag(e) { epreventDefault(); consolelog(e);\npos3 = e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 614,
    "chunk_index": 24,
    "total_chunks": 51
  },
  {
    "id": "df50822107989ecd28d6f068ffa9aa91",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "被存取嗎？試著將它移到閉包外面。這時，矩陣會變成全域變數，取消閉包內的存取限制。 課題 在檔案 scriptjs 的元素宣告下方，新增函式： javascript function dragElement(terrariumElement) { //set 4 positions for positioning on the screen let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0; terrariumElementonpointerdown = pointerDrag; } dragElement 藉由程式定義的參數取得 terrariumElement 物件。之後，設定一些位置 0 的變數給函式內的物件使用。它們是本地變數，給每一個進到拖曳函式內的物件操控。盆栽盒會被這些拖曳物件填充，我們的網頁應用必須要持續追蹤這些物件的位置。 此外，進到函式的 terrariumElement 也被新增了 pointerdown 事件，它是管理 DOM 的其中一項網頁 APIs。當按鈕按下時，或是在我們案例中，一個拖曳物件被點擊時，onpointerdown 事件就會被觸發。這個事件處理器(event handler)皆運作在網頁與行動瀏覽器上，只有少部分的例外。 ✅ 事件處理器 onclick支援更多的瀏覽器。為什麼我們不在這邊使用它？ 想想看我們在這此建立的視窗互動類型。 函式 pointerDrag terrariumElement 已經準備好被拖曳了。當觸發 onpointerdown 事件時，函式 pointerDrag 會參與其中。新增這項函式在程式碼 terrariumElementonpointerdown = pointerDrag; 下方： 課題 javascript function pointerDrag(e) { epreventDefault(); consolelog(e); pos3 = eclientX;\npos4 = e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 607,
    "chunk_index": 25,
    "total_chunks": 51
  },
  {
    "id": "3f8d516bc5f0226e972654479d02ee48",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "scriptjs 的元素宣告下方，新增函式： javascript function dragElement(terrariumElement) { //set 4 positions for positioning on the screen let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0; terrariumElementonpointerdown = pointerDrag; } dragElement 藉由程式定義的參數取得 terrariumElement 物件。之後，設定一些位置 0 的變數給函式內的物件使用。它們是本地變數，給每一個進到拖曳函式內的物件操控。盆栽盒會被這些拖曳物件填充，我們的網頁應用必須要持續追蹤這些物件的位置。 此外，進到函式的 terrariumElement 也被新增了 pointerdown 事件，它是管理 DOM 的其中一項網頁 APIs。當按鈕按下時，或是在我們案例中，一個拖曳物件被點擊時，onpointerdown 事件就會被觸發。這個事件處理器(event handler)皆運作在網頁與行動瀏覽器上，只有少部分的例外。 ✅ 事件處理器 onclick支援更多的瀏覽器。為什麼我們不在這邊使用它？ 想想看我們在這此建立的視窗互動類型。 函式 pointerDrag terrariumElement 已經準備好被拖曳了。當觸發 onpointerdown 事件時，函式 pointerDrag 會參與其中。新增這項函式在程式碼 terrariumElementonpointerdown = pointerDrag; 下方： 課題 javascript function pointerDrag(e) { epreventDefault(); consolelog(e); pos3 = eclientX; pos4 = eclientY;\n}\n許多事情會發生。首先，你使用 e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 560,
    "chunk_index": 26,
    "total_chunks": 51
  },
  {
    "id": "f03ef2b7ab2cad621f78f5c307ba454c",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "function dragElement(terrariumElement) { //set 4 positions for positioning on the screen let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0; terrariumElementonpointerdown = pointerDrag; } dragElement 藉由程式定義的參數取得 terrariumElement 物件。之後，設定一些位置 0 的變數給函式內的物件使用。它們是本地變數，給每一個進到拖曳函式內的物件操控。盆栽盒會被這些拖曳物件填充，我們的網頁應用必須要持續追蹤這些物件的位置。 此外，進到函式的 terrariumElement 也被新增了 pointerdown 事件，它是管理 DOM 的其中一項網頁 APIs。當按鈕按下時，或是在我們案例中，一個拖曳物件被點擊時，onpointerdown 事件就會被觸發。這個事件處理器(event handler)皆運作在網頁與行動瀏覽器上，只有少部分的例外。 ✅ 事件處理器 onclick支援更多的瀏覽器。為什麼我們不在這邊使用它？ 想想看我們在這此建立的視窗互動類型。 函式 pointerDrag terrariumElement 已經準備好被拖曳了。當觸發 onpointerdown 事件時，函式 pointerDrag 會參與其中。新增這項函式在程式碼 terrariumElementonpointerdown = pointerDrag; 下方： 課題 javascript function pointerDrag(e) { epreventDefault(); consolelog(e); pos3 = eclientX; pos4 = eclientY; } 許多事情會發生。首先，你使用 epreventDefault(); 取消掉 pointerdown 原先的預設事件。這樣你可以操作更多的介面行為。\n回到你建立的程式碼中，試著刪除 e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 604,
    "chunk_index": 27,
    "total_chunks": 51
  },
  {
    "id": "b32d5fc0238b2eb0c1ec15111ab957f4",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "positions for positioning on the screen let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0; terrariumElementonpointerdown = pointerDrag; } dragElement 藉由程式定義的參數取得 terrariumElement 物件。之後，設定一些位置 0 的變數給函式內的物件使用。它們是本地變數，給每一個進到拖曳函式內的物件操控。盆栽盒會被這些拖曳物件填充，我們的網頁應用必須要持續追蹤這些物件的位置。 此外，進到函式的 terrariumElement 也被新增了 pointerdown 事件，它是管理 DOM 的其中一項網頁 APIs。當按鈕按下時，或是在我們案例中，一個拖曳物件被點擊時，onpointerdown 事件就會被觸發。這個事件處理器(event handler)皆運作在網頁與行動瀏覽器上，只有少部分的例外。 ✅ 事件處理器 onclick支援更多的瀏覽器。為什麼我們不在這邊使用它？ 想想看我們在這此建立的視窗互動類型。 函式 pointerDrag terrariumElement 已經準備好被拖曳了。當觸發 onpointerdown 事件時，函式 pointerDrag 會參與其中。新增這項函式在程式碼 terrariumElementonpointerdown = pointerDrag; 下方： 課題 javascript function pointerDrag(e) { epreventDefault(); consolelog(e); pos3 = eclientX; pos4 = eclientY; } 許多事情會發生。首先，你使用 epreventDefault(); 取消掉 pointerdown 原先的預設事件。這樣你可以操作更多的介面行為。 回到你建立的程式碼中，試著刪除 epreventDefault() 並執行看看，發生了什麼事？\n第二，用瀏覽器打開 index",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 628,
    "chunk_index": 28,
    "total_chunks": 51
  },
  {
    "id": "d2dc8e45c30f0a87ee27eaffbd519c2a",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "on the screen let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0; terrariumElementonpointerdown = pointerDrag; } dragElement 藉由程式定義的參數取得 terrariumElement 物件。之後，設定一些位置 0 的變數給函式內的物件使用。它們是本地變數，給每一個進到拖曳函式內的物件操控。盆栽盒會被這些拖曳物件填充，我們的網頁應用必須要持續追蹤這些物件的位置。 此外，進到函式的 terrariumElement 也被新增了 pointerdown 事件，它是管理 DOM 的其中一項網頁 APIs。當按鈕按下時，或是在我們案例中，一個拖曳物件被點擊時，onpointerdown 事件就會被觸發。這個事件處理器(event handler)皆運作在網頁與行動瀏覽器上，只有少部分的例外。 ✅ 事件處理器 onclick支援更多的瀏覽器。為什麼我們不在這邊使用它？ 想想看我們在這此建立的視窗互動類型。 函式 pointerDrag terrariumElement 已經準備好被拖曳了。當觸發 onpointerdown 事件時，函式 pointerDrag 會參與其中。新增這項函式在程式碼 terrariumElementonpointerdown = pointerDrag; 下方： 課題 javascript function pointerDrag(e) { epreventDefault(); consolelog(e); pos3 = eclientX; pos4 = eclientY; } 許多事情會發生。首先，你使用 epreventDefault(); 取消掉 pointerdown 原先的預設事件。這樣你可以操作更多的介面行為。 回到你建立的程式碼中，試著刪除 epreventDefault() 並執行看看，發生了什麼事？ 第二，用瀏覽器打開 indexhtml 並調查我們的介面。當你點擊植物時，你可以發現 'e' 事件被觸發了。專研一下，一個 pointerdown 事件會產生多少資訊！\n接下來，紀錄本地變數 pos3 和 pos4 被設定為 e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 730,
    "chunk_index": 29,
    "total_chunks": 51
  },
  {
    "id": "146531edd481f56b655409149d656dd0",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "= 0, pos4 = 0; terrariumElementonpointerdown = pointerDrag; } dragElement 藉由程式定義的參數取得 terrariumElement 物件。之後，設定一些位置 0 的變數給函式內的物件使用。它們是本地變數，給每一個進到拖曳函式內的物件操控。盆栽盒會被這些拖曳物件填充，我們的網頁應用必須要持續追蹤這些物件的位置。 此外，進到函式的 terrariumElement 也被新增了 pointerdown 事件，它是管理 DOM 的其中一項網頁 APIs。當按鈕按下時，或是在我們案例中，一個拖曳物件被點擊時，onpointerdown 事件就會被觸發。這個事件處理器(event handler)皆運作在網頁與行動瀏覽器上，只有少部分的例外。 ✅ 事件處理器 onclick支援更多的瀏覽器。為什麼我們不在這邊使用它？ 想想看我們在這此建立的視窗互動類型。 函式 pointerDrag terrariumElement 已經準備好被拖曳了。當觸發 onpointerdown 事件時，函式 pointerDrag 會參與其中。新增這項函式在程式碼 terrariumElementonpointerdown = pointerDrag; 下方： 課題 javascript function pointerDrag(e) { epreventDefault(); consolelog(e); pos3 = eclientX; pos4 = eclientY; } 許多事情會發生。首先，你使用 epreventDefault(); 取消掉 pointerdown 原先的預設事件。這樣你可以操作更多的介面行為。 回到你建立的程式碼中，試著刪除 epreventDefault() 並執行看看，發生了什麼事？ 第二，用瀏覽器打開 indexhtml 並調查我們的介面。當你點擊植物時，你可以發現 'e' 事件被觸發了。專研一下，一個 pointerdown 事件會產生多少資訊！ 接下來，紀錄本地變數 pos3 和 pos4 被設定為 eclientX 和 e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 716,
    "chunk_index": 30,
    "total_chunks": 51
  },
  {
    "id": "8ea0c9bd6529f1711be2517d091ef8a2",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "pos4 = 0; terrariumElementonpointerdown = pointerDrag; } dragElement 藉由程式定義的參數取得 terrariumElement 物件。之後，設定一些位置 0 的變數給函式內的物件使用。它們是本地變數，給每一個進到拖曳函式內的物件操控。盆栽盒會被這些拖曳物件填充，我們的網頁應用必須要持續追蹤這些物件的位置。 此外，進到函式的 terrariumElement 也被新增了 pointerdown 事件，它是管理 DOM 的其中一項網頁 APIs。當按鈕按下時，或是在我們案例中，一個拖曳物件被點擊時，onpointerdown 事件就會被觸發。這個事件處理器(event handler)皆運作在網頁與行動瀏覽器上，只有少部分的例外。 ✅ 事件處理器 onclick支援更多的瀏覽器。為什麼我們不在這邊使用它？ 想想看我們在這此建立的視窗互動類型。 函式 pointerDrag terrariumElement 已經準備好被拖曳了。當觸發 onpointerdown 事件時，函式 pointerDrag 會參與其中。新增這項函式在程式碼 terrariumElementonpointerdown = pointerDrag; 下方： 課題 javascript function pointerDrag(e) { epreventDefault(); consolelog(e); pos3 = eclientX; pos4 = eclientY; } 許多事情會發生。首先，你使用 epreventDefault(); 取消掉 pointerdown 原先的預設事件。這樣你可以操作更多的介面行為。 回到你建立的程式碼中，試著刪除 epreventDefault() 並執行看看，發生了什麼事？ 第二，用瀏覽器打開 indexhtml 並調查我們的介面。當你點擊植物時，你可以發現 'e' 事件被觸發了。專研一下，一個 pointerdown 事件會產生多少資訊！ 接下來，紀錄本地變數 pos3 和 pos4 被設定為 eclientX 和 eclientY。你可以在觀察面板中，會發現 e 的數值。這項數值取得按下植物瞬間的 x 與 y 座標資訊。為了全面的控制植物行為，在拖曳植物時，我們會持續更新座標資訊。\n✅ 將整個網頁應用建立在一個大閉包下，會讓程式碼變得比較清楚嗎？如果沒有，你有其他方法管理這十四株可拖曳的植物嗎？\n增加初始化函式，在程式碼 pos4 = e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 916,
    "chunk_index": 31,
    "total_chunks": 51
  },
  {
    "id": "456572c1539013f7d8ca1ab813913e33",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "的變數給函式內的物件使用。它們是本地變數，給每一個進到拖曳函式內的物件操控。盆栽盒會被這些拖曳物件填充，我們的網頁應用必須要持續追蹤這些物件的位置。 此外，進到函式的 terrariumElement 也被新增了 pointerdown 事件，它是管理 DOM 的其中一項網頁 APIs。當按鈕按下時，或是在我們案例中，一個拖曳物件被點擊時，onpointerdown 事件就會被觸發。這個事件處理器(event handler)皆運作在網頁與行動瀏覽器上，只有少部分的例外。 ✅ 事件處理器 onclick支援更多的瀏覽器。為什麼我們不在這邊使用它？ 想想看我們在這此建立的視窗互動類型。 函式 pointerDrag terrariumElement 已經準備好被拖曳了。當觸發 onpointerdown 事件時，函式 pointerDrag 會參與其中。新增這項函式在程式碼 terrariumElementonpointerdown = pointerDrag; 下方： 課題 javascript function pointerDrag(e) { epreventDefault(); consolelog(e); pos3 = eclientX; pos4 = eclientY; } 許多事情會發生。首先，你使用 epreventDefault(); 取消掉 pointerdown 原先的預設事件。這樣你可以操作更多的介面行為。 回到你建立的程式碼中，試著刪除 epreventDefault() 並執行看看，發生了什麼事？ 第二，用瀏覽器打開 indexhtml 並調查我們的介面。當你點擊植物時，你可以發現 'e' 事件被觸發了。專研一下，一個 pointerdown 事件會產生多少資訊！ 接下來，紀錄本地變數 pos3 和 pos4 被設定為 eclientX 和 eclientY。你可以在觀察面板中，會發現 e 的數值。這項數值取得按下植物瞬間的 x 與 y 座標資訊。為了全面的控制植物行為，在拖曳植物時，我們會持續更新座標資訊。 ✅ 將整個網頁應用建立在一個大閉包下，會讓程式碼變得比較清楚嗎？如果沒有，你有其他方法管理這十四株可拖曳的植物嗎？ 增加初始化函式，在程式碼 pos4 = eclientY 下方加上下列兩行事件處理：\nhtml\ndocument",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 884,
    "chunk_index": 32,
    "total_chunks": 51
  },
  {
    "id": "daac14fd57d9092c7e1a37344afcd912",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "也被新增了 pointerdown 事件，它是管理 DOM 的其中一項網頁 APIs。當按鈕按下時，或是在我們案例中，一個拖曳物件被點擊時，onpointerdown 事件就會被觸發。這個事件處理器(event handler)皆運作在網頁與行動瀏覽器上，只有少部分的例外。 ✅ 事件處理器 onclick支援更多的瀏覽器。為什麼我們不在這邊使用它？ 想想看我們在這此建立的視窗互動類型。 函式 pointerDrag terrariumElement 已經準備好被拖曳了。當觸發 onpointerdown 事件時，函式 pointerDrag 會參與其中。新增這項函式在程式碼 terrariumElementonpointerdown = pointerDrag; 下方： 課題 javascript function pointerDrag(e) { epreventDefault(); consolelog(e); pos3 = eclientX; pos4 = eclientY; } 許多事情會發生。首先，你使用 epreventDefault(); 取消掉 pointerdown 原先的預設事件。這樣你可以操作更多的介面行為。 回到你建立的程式碼中，試著刪除 epreventDefault() 並執行看看，發生了什麼事？ 第二，用瀏覽器打開 indexhtml 並調查我們的介面。當你點擊植物時，你可以發現 'e' 事件被觸發了。專研一下，一個 pointerdown 事件會產生多少資訊！ 接下來，紀錄本地變數 pos3 和 pos4 被設定為 eclientX 和 eclientY。你可以在觀察面板中，會發現 e 的數值。這項數值取得按下植物瞬間的 x 與 y 座標資訊。為了全面的控制植物行為，在拖曳植物時，我們會持續更新座標資訊。 ✅ 將整個網頁應用建立在一個大閉包下，會讓程式碼變得比較清楚嗎？如果沒有，你有其他方法管理這十四株可拖曳的植物嗎？ 增加初始化函式，在程式碼 pos4 = eclientY 下方加上下列兩行事件處理： html documentonpointermove = elementDrag;\ndocument",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 765,
    "chunk_index": 33,
    "total_chunks": 51
  },
  {
    "id": "a3930da742d47c2c06a02a0ea2dc4bea",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "DOM 的其中一項網頁 APIs。當按鈕按下時，或是在我們案例中，一個拖曳物件被點擊時，onpointerdown 事件就會被觸發。這個事件處理器(event handler)皆運作在網頁與行動瀏覽器上，只有少部分的例外。 ✅ 事件處理器 onclick支援更多的瀏覽器。為什麼我們不在這邊使用它？ 想想看我們在這此建立的視窗互動類型。 函式 pointerDrag terrariumElement 已經準備好被拖曳了。當觸發 onpointerdown 事件時，函式 pointerDrag 會參與其中。新增這項函式在程式碼 terrariumElementonpointerdown = pointerDrag; 下方： 課題 javascript function pointerDrag(e) { epreventDefault(); consolelog(e); pos3 = eclientX; pos4 = eclientY; } 許多事情會發生。首先，你使用 epreventDefault(); 取消掉 pointerdown 原先的預設事件。這樣你可以操作更多的介面行為。 回到你建立的程式碼中，試著刪除 epreventDefault() 並執行看看，發生了什麼事？ 第二，用瀏覽器打開 indexhtml 並調查我們的介面。當你點擊植物時，你可以發現 'e' 事件被觸發了。專研一下，一個 pointerdown 事件會產生多少資訊！ 接下來，紀錄本地變數 pos3 和 pos4 被設定為 eclientX 和 eclientY。你可以在觀察面板中，會發現 e 的數值。這項數值取得按下植物瞬間的 x 與 y 座標資訊。為了全面的控制植物行為，在拖曳植物時，我們會持續更新座標資訊。 ✅ 將整個網頁應用建立在一個大閉包下，會讓程式碼變得比較清楚嗎？如果沒有，你有其他方法管理這十四株可拖曳的植物嗎？ 增加初始化函式，在程式碼 pos4 = eclientY 下方加上下列兩行事件處理： html documentonpointermove = elementDrag; documentonpointerup = stopElementDrag;\n現在，在游標拖曳時，你的植物能跟著你的游標走，而在你取消點擊時停下來。onpointermove 和 onpointerup 也是 onpointerdown 類型相同的 API。然而，現在介面會出現錯誤訊息，因為我們還沒建立函式 elementDrag 與 stopElementDrag。\n函式 elementDrag 與 stopElementDrag\n新增兩條內部函式在閉包中，它們會處理拖曳植物與停止拖曳的事件。你希望你可以拖曳任何一株植物且放在螢幕上的任一地方。介面並沒有強制你盆栽盒的配置格式，你可以自由地增加、移除與移動盆栽罐內的植物。\n課題\n新增函式 elementDrag 在函式閉包 pointerDrag 宣告列的正下方：\njavascript\nfunction elementDrag(e) {\npos1 = pos3 - e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 1064,
    "chunk_index": 34,
    "total_chunks": 51
  },
  {
    "id": "256423d205814ccbbccbd94bba09c563",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "= eclientY; } 許多事情會發生。首先，你使用 epreventDefault(); 取消掉 pointerdown 原先的預設事件。這樣你可以操作更多的介面行為。 回到你建立的程式碼中，試著刪除 epreventDefault() 並執行看看，發生了什麼事？ 第二，用瀏覽器打開 indexhtml 並調查我們的介面。當你點擊植物時，你可以發現 'e' 事件被觸發了。專研一下，一個 pointerdown 事件會產生多少資訊！ 接下來，紀錄本地變數 pos3 和 pos4 被設定為 eclientX 和 eclientY。你可以在觀察面板中，會發現 e 的數值。這項數值取得按下植物瞬間的 x 與 y 座標資訊。為了全面的控制植物行為，在拖曳植物時，我們會持續更新座標資訊。 ✅ 將整個網頁應用建立在一個大閉包下，會讓程式碼變得比較清楚嗎？如果沒有，你有其他方法管理這十四株可拖曳的植物嗎？ 增加初始化函式，在程式碼 pos4 = eclientY 下方加上下列兩行事件處理： html documentonpointermove = elementDrag; documentonpointerup = stopElementDrag; 現在，在游標拖曳時，你的植物能跟著你的游標走，而在你取消點擊時停下來。onpointermove 和 onpointerup 也是 onpointerdown 類型相同的 API。然而，現在介面會出現錯誤訊息，因為我們還沒建立函式 elementDrag 與 stopElementDrag。 函式 elementDrag 與 stopElementDrag 新增兩條內部函式在閉包中，它們會處理拖曳植物與停止拖曳的事件。你希望你可以拖曳任何一株植物且放在螢幕上的任一地方。介面並沒有強制你盆栽盒的配置格式，你可以自由地增加、移除與移動盆栽罐內的植物。 課題 新增函式 elementDrag 在函式閉包 pointerDrag 宣告列的正下方： javascript function elementDrag(e) { pos1 = pos3 - eclientX;\npos2 = pos4 - e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 786,
    "chunk_index": 35,
    "total_chunks": 51
  },
  {
    "id": "9fcf5ddeb9614df6d1ae4470a79128bc",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "取消掉 pointerdown 原先的預設事件。這樣你可以操作更多的介面行為。 回到你建立的程式碼中，試著刪除 epreventDefault() 並執行看看，發生了什麼事？ 第二，用瀏覽器打開 indexhtml 並調查我們的介面。當你點擊植物時，你可以發現 'e' 事件被觸發了。專研一下，一個 pointerdown 事件會產生多少資訊！ 接下來，紀錄本地變數 pos3 和 pos4 被設定為 eclientX 和 eclientY。你可以在觀察面板中，會發現 e 的數值。這項數值取得按下植物瞬間的 x 與 y 座標資訊。為了全面的控制植物行為，在拖曳植物時，我們會持續更新座標資訊。 ✅ 將整個網頁應用建立在一個大閉包下，會讓程式碼變得比較清楚嗎？如果沒有，你有其他方法管理這十四株可拖曳的植物嗎？ 增加初始化函式，在程式碼 pos4 = eclientY 下方加上下列兩行事件處理： html documentonpointermove = elementDrag; documentonpointerup = stopElementDrag; 現在，在游標拖曳時，你的植物能跟著你的游標走，而在你取消點擊時停下來。onpointermove 和 onpointerup 也是 onpointerdown 類型相同的 API。然而，現在介面會出現錯誤訊息，因為我們還沒建立函式 elementDrag 與 stopElementDrag。 函式 elementDrag 與 stopElementDrag 新增兩條內部函式在閉包中，它們會處理拖曳植物與停止拖曳的事件。你希望你可以拖曳任何一株植物且放在螢幕上的任一地方。介面並沒有強制你盆栽盒的配置格式，你可以自由地增加、移除與移動盆栽罐內的植物。 課題 新增函式 elementDrag 在函式閉包 pointerDrag 宣告列的正下方： javascript function elementDrag(e) { pos1 = pos3 - eclientX; pos2 = pos4 - eclientY;\npos3 = e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 764,
    "chunk_index": 36,
    "total_chunks": 51
  },
  {
    "id": "85957182a624378db13382aa57296459",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "回到你建立的程式碼中，試著刪除 epreventDefault() 並執行看看，發生了什麼事？ 第二，用瀏覽器打開 indexhtml 並調查我們的介面。當你點擊植物時，你可以發現 'e' 事件被觸發了。專研一下，一個 pointerdown 事件會產生多少資訊！ 接下來，紀錄本地變數 pos3 和 pos4 被設定為 eclientX 和 eclientY。你可以在觀察面板中，會發現 e 的數值。這項數值取得按下植物瞬間的 x 與 y 座標資訊。為了全面的控制植物行為，在拖曳植物時，我們會持續更新座標資訊。 ✅ 將整個網頁應用建立在一個大閉包下，會讓程式碼變得比較清楚嗎？如果沒有，你有其他方法管理這十四株可拖曳的植物嗎？ 增加初始化函式，在程式碼 pos4 = eclientY 下方加上下列兩行事件處理： html documentonpointermove = elementDrag; documentonpointerup = stopElementDrag; 現在，在游標拖曳時，你的植物能跟著你的游標走，而在你取消點擊時停下來。onpointermove 和 onpointerup 也是 onpointerdown 類型相同的 API。然而，現在介面會出現錯誤訊息，因為我們還沒建立函式 elementDrag 與 stopElementDrag。 函式 elementDrag 與 stopElementDrag 新增兩條內部函式在閉包中，它們會處理拖曳植物與停止拖曳的事件。你希望你可以拖曳任何一株植物且放在螢幕上的任一地方。介面並沒有強制你盆栽盒的配置格式，你可以自由地增加、移除與移動盆栽罐內的植物。 課題 新增函式 elementDrag 在函式閉包 pointerDrag 宣告列的正下方： javascript function elementDrag(e) { pos1 = pos3 - eclientX; pos2 = pos4 - eclientY; pos3 = eclientX;\npos4 = e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 736,
    "chunk_index": 37,
    "total_chunks": 51
  },
  {
    "id": "d442c84f558cb41904bce8bc3037c9aa",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "第二，用瀏覽器打開 indexhtml 並調查我們的介面。當你點擊植物時，你可以發現 'e' 事件被觸發了。專研一下，一個 pointerdown 事件會產生多少資訊！ 接下來，紀錄本地變數 pos3 和 pos4 被設定為 eclientX 和 eclientY。你可以在觀察面板中，會發現 e 的數值。這項數值取得按下植物瞬間的 x 與 y 座標資訊。為了全面的控制植物行為，在拖曳植物時，我們會持續更新座標資訊。 ✅ 將整個網頁應用建立在一個大閉包下，會讓程式碼變得比較清楚嗎？如果沒有，你有其他方法管理這十四株可拖曳的植物嗎？ 增加初始化函式，在程式碼 pos4 = eclientY 下方加上下列兩行事件處理： html documentonpointermove = elementDrag; documentonpointerup = stopElementDrag; 現在，在游標拖曳時，你的植物能跟著你的游標走，而在你取消點擊時停下來。onpointermove 和 onpointerup 也是 onpointerdown 類型相同的 API。然而，現在介面會出現錯誤訊息，因為我們還沒建立函式 elementDrag 與 stopElementDrag。 函式 elementDrag 與 stopElementDrag 新增兩條內部函式在閉包中，它們會處理拖曳植物與停止拖曳的事件。你希望你可以拖曳任何一株植物且放在螢幕上的任一地方。介面並沒有強制你盆栽盒的配置格式，你可以自由地增加、移除與移動盆栽罐內的植物。 課題 新增函式 elementDrag 在函式閉包 pointerDrag 宣告列的正下方： javascript function elementDrag(e) { pos1 = pos3 - eclientX; pos2 = pos4 - eclientY; pos3 = eclientX; pos4 = eclientY;\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 696,
    "chunk_index": 38,
    "total_chunks": 51
  },
  {
    "id": "5b791af5c436293400667de3af8c008a",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "indexhtml 並調查我們的介面。當你點擊植物時，你可以發現 'e' 事件被觸發了。專研一下，一個 pointerdown 事件會產生多少資訊！ 接下來，紀錄本地變數 pos3 和 pos4 被設定為 eclientX 和 eclientY。你可以在觀察面板中，會發現 e 的數值。這項數值取得按下植物瞬間的 x 與 y 座標資訊。為了全面的控制植物行為，在拖曳植物時，我們會持續更新座標資訊。 ✅ 將整個網頁應用建立在一個大閉包下，會讓程式碼變得比較清楚嗎？如果沒有，你有其他方法管理這十四株可拖曳的植物嗎？ 增加初始化函式，在程式碼 pos4 = eclientY 下方加上下列兩行事件處理： html documentonpointermove = elementDrag; documentonpointerup = stopElementDrag; 現在，在游標拖曳時，你的植物能跟著你的游標走，而在你取消點擊時停下來。onpointermove 和 onpointerup 也是 onpointerdown 類型相同的 API。然而，現在介面會出現錯誤訊息，因為我們還沒建立函式 elementDrag 與 stopElementDrag。 函式 elementDrag 與 stopElementDrag 新增兩條內部函式在閉包中，它們會處理拖曳植物與停止拖曳的事件。你希望你可以拖曳任何一株植物且放在螢幕上的任一地方。介面並沒有強制你盆栽盒的配置格式，你可以自由地增加、移除與移動盆栽罐內的植物。 課題 新增函式 elementDrag 在函式閉包 pointerDrag 宣告列的正下方： javascript function elementDrag(e) { pos1 = pos3 - eclientX; pos2 = pos4 - eclientY; pos3 = eclientX; pos4 = eclientY; consolelog(pos1, pos2, pos3, pos4);\nterrariumElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 700,
    "chunk_index": 39,
    "total_chunks": 51
  },
  {
    "id": "ec785e6f29954c566096ad76e6c4cfc5",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "pointerdown 事件會產生多少資訊！ 接下來，紀錄本地變數 pos3 和 pos4 被設定為 eclientX 和 eclientY。你可以在觀察面板中，會發現 e 的數值。這項數值取得按下植物瞬間的 x 與 y 座標資訊。為了全面的控制植物行為，在拖曳植物時，我們會持續更新座標資訊。 ✅ 將整個網頁應用建立在一個大閉包下，會讓程式碼變得比較清楚嗎？如果沒有，你有其他方法管理這十四株可拖曳的植物嗎？ 增加初始化函式，在程式碼 pos4 = eclientY 下方加上下列兩行事件處理： html documentonpointermove = elementDrag; documentonpointerup = stopElementDrag; 現在，在游標拖曳時，你的植物能跟著你的游標走，而在你取消點擊時停下來。onpointermove 和 onpointerup 也是 onpointerdown 類型相同的 API。然而，現在介面會出現錯誤訊息，因為我們還沒建立函式 elementDrag 與 stopElementDrag。 函式 elementDrag 與 stopElementDrag 新增兩條內部函式在閉包中，它們會處理拖曳植物與停止拖曳的事件。你希望你可以拖曳任何一株植物且放在螢幕上的任一地方。介面並沒有強制你盆栽盒的配置格式，你可以自由地增加、移除與移動盆栽罐內的植物。 課題 新增函式 elementDrag 在函式閉包 pointerDrag 宣告列的正下方： javascript function elementDrag(e) { pos1 = pos3 - eclientX; pos2 = pos4 - eclientY; pos3 = eclientX; pos4 = eclientY; consolelog(pos1, pos2, pos3, pos4); terrariumElementstyle",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 642,
    "chunk_index": 40,
    "total_chunks": 51
  },
  {
    "id": "4c71a5fd13d71d975cfeb5aeff10ff68",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "pointerdown 事件會產生多少資訊！ 接下來，紀錄本地變數 pos3 和 pos4 被設定為 eclientX 和 eclientY。你可以在觀察面板中，會發現 e 的數值。這項數值取得按下植物瞬間的 x 與 y 座標資訊。為了全面的控制植物行為，在拖曳植物時，我們會持續更新座標資訊。 ✅ 將整個網頁應用建立在一個大閉包下，會讓程式碼變得比較清楚嗎？如果沒有，你有其他方法管理這十四株可拖曳的植物嗎？ 增加初始化函式，在程式碼 pos4 = eclientY 下方加上下列兩行事件處理： html documentonpointermove = elementDrag; documentonpointerup = stopElementDrag; 現在，在游標拖曳時，你的植物能跟著你的游標走，而在你取消點擊時停下來。onpointermove 和 onpointerup 也是 onpointerdown 類型相同的 API。然而，現在介面會出現錯誤訊息，因為我們還沒建立函式 elementDrag 與 stopElementDrag。 函式 elementDrag 與 stopElementDrag 新增兩條內部函式在閉包中，它們會處理拖曳植物與停止拖曳的事件。你希望你可以拖曳任何一株植物且放在螢幕上的任一地方。介面並沒有強制你盆栽盒的配置格式，你可以自由地增加、移除與移動盆栽罐內的植物。 課題 新增函式 elementDrag 在函式閉包 pointerDrag 宣告列的正下方： javascript function elementDrag(e) { pos1 = pos3 - eclientX; pos2 = pos4 - eclientY; pos3 = eclientX; pos4 = eclientY; consolelog(pos1, pos2, pos3, pos4); terrariumElementstyletop = terrariumElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 647,
    "chunk_index": 41,
    "total_chunks": 51
  },
  {
    "id": "3bafe583bf038ef1aaa567d8ad9ede51",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "接下來，紀錄本地變數 pos3 和 pos4 被設定為 eclientX 和 eclientY。你可以在觀察面板中，會發現 e 的數值。這項數值取得按下植物瞬間的 x 與 y 座標資訊。為了全面的控制植物行為，在拖曳植物時，我們會持續更新座標資訊。 ✅ 將整個網頁應用建立在一個大閉包下，會讓程式碼變得比較清楚嗎？如果沒有，你有其他方法管理這十四株可拖曳的植物嗎？ 增加初始化函式，在程式碼 pos4 = eclientY 下方加上下列兩行事件處理： html documentonpointermove = elementDrag; documentonpointerup = stopElementDrag; 現在，在游標拖曳時，你的植物能跟著你的游標走，而在你取消點擊時停下來。onpointermove 和 onpointerup 也是 onpointerdown 類型相同的 API。然而，現在介面會出現錯誤訊息，因為我們還沒建立函式 elementDrag 與 stopElementDrag。 函式 elementDrag 與 stopElementDrag 新增兩條內部函式在閉包中，它們會處理拖曳植物與停止拖曳的事件。你希望你可以拖曳任何一株植物且放在螢幕上的任一地方。介面並沒有強制你盆栽盒的配置格式，你可以自由地增加、移除與移動盆栽罐內的植物。 課題 新增函式 elementDrag 在函式閉包 pointerDrag 宣告列的正下方： javascript function elementDrag(e) { pos1 = pos3 - eclientX; pos2 = pos4 - eclientY; pos3 = eclientX; pos4 = eclientY; consolelog(pos1, pos2, pos3, pos4); terrariumElementstyletop = terrariumElementoffsetTop - pos2 + 'px';\nterrariumElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 642,
    "chunk_index": 42,
    "total_chunks": 51
  },
  {
    "id": "b80dc87550246fe12599588376b5e427",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "eclientX 和 eclientY。你可以在觀察面板中，會發現 e 的數值。這項數值取得按下植物瞬間的 x 與 y 座標資訊。為了全面的控制植物行為，在拖曳植物時，我們會持續更新座標資訊。 ✅ 將整個網頁應用建立在一個大閉包下，會讓程式碼變得比較清楚嗎？如果沒有，你有其他方法管理這十四株可拖曳的植物嗎？ 增加初始化函式，在程式碼 pos4 = eclientY 下方加上下列兩行事件處理： html documentonpointermove = elementDrag; documentonpointerup = stopElementDrag; 現在，在游標拖曳時，你的植物能跟著你的游標走，而在你取消點擊時停下來。onpointermove 和 onpointerup 也是 onpointerdown 類型相同的 API。然而，現在介面會出現錯誤訊息，因為我們還沒建立函式 elementDrag 與 stopElementDrag。 函式 elementDrag 與 stopElementDrag 新增兩條內部函式在閉包中，它們會處理拖曳植物與停止拖曳的事件。你希望你可以拖曳任何一株植物且放在螢幕上的任一地方。介面並沒有強制你盆栽盒的配置格式，你可以自由地增加、移除與移動盆栽罐內的植物。 課題 新增函式 elementDrag 在函式閉包 pointerDrag 宣告列的正下方： javascript function elementDrag(e) { pos1 = pos3 - eclientX; pos2 = pos4 - eclientY; pos3 = eclientX; pos4 = eclientY; consolelog(pos1, pos2, pos3, pos4); terrariumElementstyletop = terrariumElementoffsetTop - pos2 + 'px'; terrariumElementstyle",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 614,
    "chunk_index": 43,
    "total_chunks": 51
  },
  {
    "id": "dddb97212305b4e4a3a8624d2c843e5a",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "eclientX 和 eclientY。你可以在觀察面板中，會發現 e 的數值。這項數值取得按下植物瞬間的 x 與 y 座標資訊。為了全面的控制植物行為，在拖曳植物時，我們會持續更新座標資訊。 ✅ 將整個網頁應用建立在一個大閉包下，會讓程式碼變得比較清楚嗎？如果沒有，你有其他方法管理這十四株可拖曳的植物嗎？ 增加初始化函式，在程式碼 pos4 = eclientY 下方加上下列兩行事件處理： html documentonpointermove = elementDrag; documentonpointerup = stopElementDrag; 現在，在游標拖曳時，你的植物能跟著你的游標走，而在你取消點擊時停下來。onpointermove 和 onpointerup 也是 onpointerdown 類型相同的 API。然而，現在介面會出現錯誤訊息，因為我們還沒建立函式 elementDrag 與 stopElementDrag。 函式 elementDrag 與 stopElementDrag 新增兩條內部函式在閉包中，它們會處理拖曳植物與停止拖曳的事件。你希望你可以拖曳任何一株植物且放在螢幕上的任一地方。介面並沒有強制你盆栽盒的配置格式，你可以自由地增加、移除與移動盆栽罐內的植物。 課題 新增函式 elementDrag 在函式閉包 pointerDrag 宣告列的正下方： javascript function elementDrag(e) { pos1 = pos3 - eclientX; pos2 = pos4 - eclientY; pos3 = eclientX; pos4 = eclientY; consolelog(pos1, pos2, pos3, pos4); terrariumElementstyletop = terrariumElementoffsetTop - pos2 + 'px'; terrariumElementstyleleft = terrariumElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 619,
    "chunk_index": 44,
    "total_chunks": 51
  },
  {
    "id": "0daf2fe17cccdebeb084835e8ce03183",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "eclientY。你可以在觀察面板中，會發現 e 的數值。這項數值取得按下植物瞬間的 x 與 y 座標資訊。為了全面的控制植物行為，在拖曳植物時，我們會持續更新座標資訊。 ✅ 將整個網頁應用建立在一個大閉包下，會讓程式碼變得比較清楚嗎？如果沒有，你有其他方法管理這十四株可拖曳的植物嗎？ 增加初始化函式，在程式碼 pos4 = eclientY 下方加上下列兩行事件處理： html documentonpointermove = elementDrag; documentonpointerup = stopElementDrag; 現在，在游標拖曳時，你的植物能跟著你的游標走，而在你取消點擊時停下來。onpointermove 和 onpointerup 也是 onpointerdown 類型相同的 API。然而，現在介面會出現錯誤訊息，因為我們還沒建立函式 elementDrag 與 stopElementDrag。 函式 elementDrag 與 stopElementDrag 新增兩條內部函式在閉包中，它們會處理拖曳植物與停止拖曳的事件。你希望你可以拖曳任何一株植物且放在螢幕上的任一地方。介面並沒有強制你盆栽盒的配置格式，你可以自由地增加、移除與移動盆栽罐內的植物。 課題 新增函式 elementDrag 在函式閉包 pointerDrag 宣告列的正下方： javascript function elementDrag(e) { pos1 = pos3 - eclientX; pos2 = pos4 - eclientY; pos3 = eclientX; pos4 = eclientY; consolelog(pos1, pos2, pos3, pos4); terrariumElementstyletop = terrariumElementoffsetTop - pos2 + 'px'; terrariumElementstyleleft = terrariumElementoffsetLeft - pos1 + 'px';\n}\n在這條函式之前，你編輯了四個本地變數位置的初始值在外部函式中。這邊又做了什麼事？\n當你拖曳物件時，你更新數值 pos1 為 pos3 減去現在的 e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 713,
    "chunk_index": 45,
    "total_chunks": 51
  },
  {
    "id": "79f31fd9ad3ddcef8ea9ff6214236f83",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "eclientY 下方加上下列兩行事件處理： html documentonpointermove = elementDrag; documentonpointerup = stopElementDrag; 現在，在游標拖曳時，你的植物能跟著你的游標走，而在你取消點擊時停下來。onpointermove 和 onpointerup 也是 onpointerdown 類型相同的 API。然而，現在介面會出現錯誤訊息，因為我們還沒建立函式 elementDrag 與 stopElementDrag。 函式 elementDrag 與 stopElementDrag 新增兩條內部函式在閉包中，它們會處理拖曳植物與停止拖曳的事件。你希望你可以拖曳任何一株植物且放在螢幕上的任一地方。介面並沒有強制你盆栽盒的配置格式，你可以自由地增加、移除與移動盆栽罐內的植物。 課題 新增函式 elementDrag 在函式閉包 pointerDrag 宣告列的正下方： javascript function elementDrag(e) { pos1 = pos3 - eclientX; pos2 = pos4 - eclientY; pos3 = eclientX; pos4 = eclientY; consolelog(pos1, pos2, pos3, pos4); terrariumElementstyletop = terrariumElementoffsetTop - pos2 + 'px'; terrariumElementstyleleft = terrariumElementoffsetLeft - pos1 + 'px'; } 在這條函式之前，你編輯了四個本地變數位置的初始值在外部函式中。這邊又做了什麼事？ 當你拖曳物件時，你更新數值 pos1 為 pos3 減去現在的 eclientX，而 pos3 在之前被初始化為為 e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 527,
    "chunk_index": 46,
    "total_chunks": 51
  },
  {
    "id": "3c8300187598425f3f299f883b11acef",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "documentonpointermove = elementDrag; documentonpointerup = stopElementDrag; 現在，在游標拖曳時，你的植物能跟著你的游標走，而在你取消點擊時停下來。onpointermove 和 onpointerup 也是 onpointerdown 類型相同的 API。然而，現在介面會出現錯誤訊息，因為我們還沒建立函式 elementDrag 與 stopElementDrag。 函式 elementDrag 與 stopElementDrag 新增兩條內部函式在閉包中，它們會處理拖曳植物與停止拖曳的事件。你希望你可以拖曳任何一株植物且放在螢幕上的任一地方。介面並沒有強制你盆栽盒的配置格式，你可以自由地增加、移除與移動盆栽罐內的植物。 課題 新增函式 elementDrag 在函式閉包 pointerDrag 宣告列的正下方： javascript function elementDrag(e) { pos1 = pos3 - eclientX; pos2 = pos4 - eclientY; pos3 = eclientX; pos4 = eclientY; consolelog(pos1, pos2, pos3, pos4); terrariumElementstyletop = terrariumElementoffsetTop - pos2 + 'px'; terrariumElementstyleleft = terrariumElementoffsetLeft - pos1 + 'px'; } 在這條函式之前，你編輯了四個本地變數位置的初始值在外部函式中。這邊又做了什麼事？ 當你拖曳物件時，你更新數值 pos1 為 pos3 減去現在的 eclientX，而 pos3 在之前被初始化為為 eclientX。同樣的行為套用在 pos2上。之後，你更新 pos3 與 pos4 到新的 XY 座標點位置。你能在 console 下看到數值在拖曳下更新的情況。我們也更新植物的 CSS 造型中的定位點為 pos1 與 pos2，比較植物左上方座標點與新座標點的關係。\noffsetTop 和 offsetLeft 是 CSS 的屬性，決定物件與它父關係物件的定位關係。父關係物件可以是任何元素，只要它的定位屬性不為 static。\n這些座標點的計算式讓你成功校整了植物與盆栽盒之間的行為。\n課題\n最後的課題是在介面上新增 stopElementDrag 函式，我們將它加在函式閉包 elementDrag 的正下方：\njavascript\nfunction stopElementDrag() {\ndocument",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 808,
    "chunk_index": 47,
    "total_chunks": 51
  },
  {
    "id": "4e5d58726a047a39724ba3d0d5d46cb0",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "pos3 - eclientX; pos2 = pos4 - eclientY; pos3 = eclientX; pos4 = eclientY; consolelog(pos1, pos2, pos3, pos4); terrariumElementstyletop = terrariumElementoffsetTop - pos2 + 'px'; terrariumElementstyleleft = terrariumElementoffsetLeft - pos1 + 'px'; } 在這條函式之前，你編輯了四個本地變數位置的初始值在外部函式中。這邊又做了什麼事？ 當你拖曳物件時，你更新數值 pos1 為 pos3 減去現在的 eclientX，而 pos3 在之前被初始化為為 eclientX。同樣的行為套用在 pos2上。之後，你更新 pos3 與 pos4 到新的 XY 座標點位置。你能在 console 下看到數值在拖曳下更新的情況。我們也更新植物的 CSS 造型中的定位點為 pos1 與 pos2，比較植物左上方座標點與新座標點的關係。 offsetTop 和 offsetLeft 是 CSS 的屬性，決定物件與它父關係物件的定位關係。父關係物件可以是任何元素，只要它的定位屬性不為 static。 這些座標點的計算式讓你成功校整了植物與盆栽盒之間的行為。 課題 最後的課題是在介面上新增 stopElementDrag 函式，我們將它加在函式閉包 elementDrag 的正下方： javascript function stopElementDrag() { documentonpointerup = null;\ndocument",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 48,
    "total_chunks": 51
  },
  {
    "id": "5c45d12f12ed304f694a741df449f7c9",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "pos2 = pos4 - eclientY; pos3 = eclientX; pos4 = eclientY; consolelog(pos1, pos2, pos3, pos4); terrariumElementstyletop = terrariumElementoffsetTop - pos2 + 'px'; terrariumElementstyleleft = terrariumElementoffsetLeft - pos1 + 'px'; } 在這條函式之前，你編輯了四個本地變數位置的初始值在外部函式中。這邊又做了什麼事？ 當你拖曳物件時，你更新數值 pos1 為 pos3 減去現在的 eclientX，而 pos3 在之前被初始化為為 eclientX。同樣的行為套用在 pos2上。之後，你更新 pos3 與 pos4 到新的 XY 座標點位置。你能在 console 下看到數值在拖曳下更新的情況。我們也更新植物的 CSS 造型中的定位點為 pos1 與 pos2，比較植物左上方座標點與新座標點的關係。 offsetTop 和 offsetLeft 是 CSS 的屬性，決定物件與它父關係物件的定位關係。父關係物件可以是任何元素，只要它的定位屬性不為 static。 這些座標點的計算式讓你成功校整了植物與盆栽盒之間的行為。 課題 最後的課題是在介面上新增 stopElementDrag 函式，我們將它加在函式閉包 elementDrag 的正下方： javascript function stopElementDrag() { documentonpointerup = null; documentonpointermove = null;\n}\n這條小函式重制 onpointerup 與 onpointermove 事件，這樣你可以重新開始該植物的拖曳事件，或是拖曳新的植物。\n✅ 如果不將這些事件設為空值時，會發生什麼事？\n我們終於完成了這項專案！\n🥇 恭喜你！你建立了一個漂亮的盆栽盒。\n🚀 挑戰\n新增新的事件處理器到你的閉包中，讓你能對植物做更多的事情。舉例來說，雙擊植物讓它排列到最上層。發揮你的創意吧！\n課後測驗\n課後測驗\n複習與自學\n在螢幕上拖曳物件看似簡單，但依照不同的目的與實現方法會遭遇到不同的問題。事實上，這邊有一份關於你可以嘗試的拖曳 API。我們沒在專案中使用是為了建立不一樣的實現方法，試著使用這些 API 到專案中，看看你能完成什麼。\n在 W3C 文件 和 MDN 網頁文件上取得更多關於 pointer 的事件。\n記得習慣性用 CanIUse",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 927,
    "chunk_index": 49,
    "total_chunks": 51
  },
  {
    "id": "ecc0534c10618a3fdec1d3622413a6a5",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
    "source_type": "git_repo",
    "title": "盆栽盒專案 Part 3 - DOM 元素控制與閉包",
    "content": "為 pos3 減去現在的 eclientX，而 pos3 在之前被初始化為為 eclientX。同樣的行為套用在 pos2上。之後，你更新 pos3 與 pos4 到新的 XY 座標點位置。你能在 console 下看到數值在拖曳下更新的情況。我們也更新植物的 CSS 造型中的定位點為 pos1 與 pos2，比較植物左上方座標點與新座標點的關係。 offsetTop 和 offsetLeft 是 CSS 的屬性，決定物件與它父關係物件的定位關係。父關係物件可以是任何元素，只要它的定位屬性不為 static。 這些座標點的計算式讓你成功校整了植物與盆栽盒之間的行為。 課題 最後的課題是在介面上新增 stopElementDrag 函式，我們將它加在函式閉包 elementDrag 的正下方： javascript function stopElementDrag() { documentonpointerup = null; documentonpointermove = null; } 這條小函式重制 onpointerup 與 onpointermove 事件，這樣你可以重新開始該植物的拖曳事件，或是拖曳新的植物。 ✅ 如果不將這些事件設為空值時，會發生什麼事？ 我們終於完成了這項專案！ 🥇 恭喜你！你建立了一個漂亮的盆栽盒。 🚀 挑戰 新增新的事件處理器到你的閉包中，讓你能對植物做更多的事情。舉例來說，雙擊植物讓它排列到最上層。發揮你的創意吧！ 課後測驗 課後測驗 複習與自學 在螢幕上拖曳物件看似簡單，但依照不同的目的與實現方法會遭遇到不同的問題。事實上，這邊有一份關於你可以嘗試的拖曳 API。我們沒在專案中使用是為了建立不一樣的實現方法，試著使用這些 API 到專案中，看看你能完成什麼。 在 W3C 文件 和 MDN 網頁文件上取得更多關於 pointer 的事件。 記得習慣性用 CanIUsecom 檢查網頁的瀏覽器兼容性。\n作業\n用 DOM 做更多事",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11386,
      "relative_path": "git_repos\\web-dev-beginners\\3-terrarium\\3-intro-to-DOM-and-closures\\translations\\README.zh-tw.md",
      "source_type": "git_repo"
    },
    "token_count": 811,
    "chunk_index": 50,
    "total_chunks": 51
  },
  {
    "id": "2d73218d2affb251f3b5c088bc0ffe60",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\1-getting-started-lessons\\1-intro-to-programming-languages\\README.md",
    "source_type": "git_repo",
    "title": "Introduction to Programming Languages and Tools of the Trade",
    "content": "Introduction to Programming Languages and Tools of the Trade\nThis lesson covers the basics of programming languages The topics covered here apply to most modern programming languages today In the 'Tools of the Trade' section, you'll learn about useful software that helps you as a developer Sketchnote by Tomomi Imura\nPre-Lecture Quiz\nPre-lecture quiz\nIntroduction\nIn this lesson, we'll cover:\nWhat is programming Types of programming languages\nBasic elements of a program\nUseful software and tooling for the professional developer\nYou can take this lesson on Microsoft Learn What is Programming Programming (also known as coding) is the process of writing instructions for a device such as a computer or mobile device We write these instructions with a programming language, which is then interpreted by the device These sets of instructions may be referred to by various names, but program, computer program, application (app), and executable are a few popular names A program can be anything that is written with code; websites, games, and phone apps are programs While it's possible to create a program without writing code, the underlying logic is interpreted by the device and that logic was most likely written with code A program that is running or executing code is carrying out instructions The device that you're reading this lesson with is running a program to print it to your screen ✅ Do a little research: who is considered to have been the world's first computer programmer Programming Languages\nProgramming languages enable developers to write instructions for a device Devices can only understand binary (1s and 0s), and for most developers that's not a very efficient way to communicate Programming languages are the vehicle for communication between humans and computers Programming languages come in different formats and may serve different purposes For example, JavaScript is primarily used for web applications, while Bash is primarily used for operating systems Low level languages typically require fewer steps than high level languages for a device to interpret instructions However, what makes high level languages popular is their readability and support JavaScript is considered a high level language The following code illustrates the difference between a high level language with JavaScript and a low level language with ARM assembly code ```javascript\nlet number = 10\nlet n1 = 0, n2 = 1, nextTerm;\nfor (let i = 1; i <= number; i++) {\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12458,
      "relative_path": "git_repos\\web-dev-beginners\\1-getting-started-lessons\\1-intro-to-programming-languages\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 464,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "92911e1124795aa399fdd27d2c97047d",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\1-getting-started-lessons\\1-intro-to-programming-languages\\README.md",
    "source_type": "git_repo",
    "title": "Introduction to Programming Languages and Tools of the Trade",
    "content": "steps than high level languages for a device to interpret instructions However, what makes high level languages popular is their readability and support JavaScript is considered a high level language The following code illustrates the difference between a high level language with JavaScript and a low level language with ARM assembly code ```javascript let number = 10 let n1 = 0, n2 = 1, nextTerm; for (let i = 1; i <= number; i++) { consolelog(n1);\nnextTerm = n1 + n2;\nn1 = n2;\nn2 = nextTerm;\n}\n```\nc\narea ascen,code,readonly\nentry\ncode32\nadr r0,thumb+1\nbx r0\ncode16\nthumb\nmov r0,#00\nsub r0,r0,#01\nmov r1,#01\nmov r4,#10\nldr r2,=0x40000000\nback add r0,r1\nstr r0,[r2]\nadd r2,#04\nmov r3,r0\nmov r0,r1\nmov r1,r3\nsub r4,#01\ncmp r4,#00\nbne back\nend\nBelieve it or not, they're both doing the same thing: printing a Fibonacci sequence up to 10 ✅ A Fibonacci sequence is defined as a set of numbers such that each number is the sum of the two preceding ones, starting from 0 and 1 The first 10 numbers following the Fibonacci sequence are 0, 1, 1, 2, 3, 5, 8, 13, 21 and 34 Elements of a Program\nA single instruction in a program is called a statement and will usually have a character or line spacing that marks where the instruction ends, or terminates How a program terminates varies with each language Statements within a program may rely on data provided by a user or elsewhere to carry out instructions Data can change how a program behaves, so programming languages come with a way to temporarily store data so that it can be used later These are called variables Variables are statements that instruct a device to save data in its memory Variables in programs are similar to variables in algebra, where they have a unique name and their value may change over time There's a chance that some statements will not be executed by a device This is usually by design when written by the developer or by accident when an unexpected error occurs",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12458,
      "relative_path": "git_repos\\web-dev-beginners\\1-getting-started-lessons\\1-intro-to-programming-languages\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "a8e3d0f01e129f8a92a2c8d6f50ecd2a",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\1-getting-started-lessons\\1-intro-to-programming-languages\\README.md",
    "source_type": "git_repo",
    "title": "Introduction to Programming Languages and Tools of the Trade",
    "content": "that it can be used later These are called variables Variables are statements that instruct a device to save data in its memory Variables in programs are similar to variables in algebra, where they have a unique name and their value may change over time There's a chance that some statements will not be executed by a device This is usually by design when written by the developer or by accident when an unexpected error occursThis type of control over an application makes it more robust and maintainable Typically, these changes in control happen when certain conditions are met A common statement used in modern programming to control how a program runs is the if else statement ✅ You'll learn more about this type of statement in subsequent lessons Tools of the Trade\n🎥 Click the image above for a video about tooling\nIn this section, you'll learn about some software that you may find to be very useful as you start your professional development journey A development environment is a unique set of tools and features that a developer uses often when writing software Some of these tools have been customized for a developer's specific needs, and may change over time if that developer changes priorities in work, personal projects, or when they use a different programming language Development environments are as unique as the developers who use them Editors\nOne of the most crucial tools for software development is the editor Editors are where you write your code and sometimes where you run your code Developers rely on editors for a few additional reasons:\nDebugging helps uncover bugs and errors by stepping through the code, line by line Some editors have debugging capabilities; they can be customized and added for specific programming languages Syntax highlighting adds colors and text formatting to code, making it easier to read Most editors allow customized syntax highlighting Extensions and Integrations are specialized tools for developers, by developers These tools weren't built into the base editor For example, many developers document their code to explain how it works They may install a spell check extension to help find typos within the documentation Most extensions are intended for use within a specific editor, and most editors come with a way to search for available extensions Customization enables developers to create a unique development environment to suit their needs Most editors are extremely customizable and may also allow developers to create custom extensions",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12458,
      "relative_path": "git_repos\\web-dev-beginners\\1-getting-started-lessons\\1-intro-to-programming-languages\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 439,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "7fc364effc037667684133456b83e3f6",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\1-getting-started-lessons\\1-intro-to-programming-languages\\README.md",
    "source_type": "git_repo",
    "title": "Introduction to Programming Languages and Tools of the Trade",
    "content": "editor For example, many developers document their code to explain how it works They may install a spell check extension to help find typos within the documentation Most extensions are intended for use within a specific editor, and most editors come with a way to search for available extensions Customization enables developers to create a unique development environment to suit their needs Most editors are extremely customizable and may also allow developers to create custom extensionsPopular Editors and Web Development Extensions\nVisual Studio Code\nCode Spell Checker\nLive Share\nPrettier - Code formatter\nAtom\nspell-check\nteletype\natom-beautify\nSublimetext\nemmet\nSublimeLinter\nBrowsers\nAnother crucial tool is the browser Web developers rely on the browser to see how their code runs on the web It's also used to display the visual elements of a web page that are written in the editor, like HTML Many browsers come with developer tools (DevTools) that contain a set of helpful features and information to help developers collect and capture important information about their application For example: If a web page has errors, it's sometimes helpful to know when they occurred DevTools in a browser can be configured to capture this information Popular Browsers and DevTools\nEdge\nChrome\nFirefox\nCommand Line Tools\nSome developers prefer a less graphical view for their daily tasks and rely on the command line to achieve this Writing code requires a significant amount of typing and some developers prefer to not disrupt their flow on the keyboard They will use keyboard shortcuts to swap between desktop windows, work on different files, and use tools Most tasks can be completed with a mouse, but one benefit of using the command line is that a lot can be done with command line tools without the need of swapping between the mouse and keyboard Another benefit of the command line is that they're configurable and you can save a custom configuration, change it later, and import it to other development machines Because development environments are so unique to each developer, some will avoid using the command line, some will rely on it entirely, and some prefer a mix of the two Popular Command Line Options\nOptions for the command line will differ based on the operating system you use 💻 = comes preinstalled on the operating system",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12458,
      "relative_path": "git_repos\\web-dev-beginners\\1-getting-started-lessons\\1-intro-to-programming-languages\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 445,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "a4738d07ce798ef2f4cfe5fd964b4d68",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\1-getting-started-lessons\\1-intro-to-programming-languages\\README.md",
    "source_type": "git_repo",
    "title": "Introduction to Programming Languages and Tools of the Trade",
    "content": "that they're configurable and you can save a custom configuration, change it later, and import it to other development machines Because development environments are so unique to each developer, some will avoid using the command line, some will rely on it entirely, and some prefer a mix of the two Popular Command Line Options Options for the command line will differ based on the operating system you use 💻 = comes preinstalled on the operating systemWindows\nPowershell 💻\nCommand Line (also known as CMD) 💻\nWindows Terminal\nmintty\nMacOS\nTerminal 💻\niTerm\nPowershell\nLinux\nBash 💻\nKDE Konsole\nPowershell\nPopular Command Line Tools\nGit (💻 on most operating systems)\nNPM\nYarn\nDocumentation\nWhen a developer wants to learn something new, they'll most likely turn to documentation to learn how to use it Developers often rely on documentation to guide them through how to use tools and languages properly, and also to gain deeper knowledge of how it works Popular Documentation on Web Development\nMozilla Developer Network (MDN), from Mozilla, the publishers of the Firefox browser\nFrontend Masters\nWeb dev, from Google, publishers of Chrome\nMicrosoft's own developer docs, for Microsoft Edge\nW3 Schools\n✅ Do some research: Now that you know the basics of a web developer's environment, compare and contrast it with a web designer's environment 🚀 Challenge\nCompare some programming languages What are some of the unique traits of JavaScript vs Java How about COBOL vs Go Post-Lecture Quiz\nPost-lecture quiz\nReview & Self Study\nStudy a bit on the different languages available to the programmer Try to write a line in one language, and then rewrite it in two others What did you learn Assignment\nReading the Docs",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12458,
      "relative_path": "git_repos\\web-dev-beginners\\1-getting-started-lessons\\1-intro-to-programming-languages\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 368,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "ca4b4837a17f7a2bed4c88e3671ce4bc",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\1-getting-started-lessons\\3-accessibility\\assignment.md",
    "source_type": "git_repo",
    "title": "Analyze an inaccessible site",
    "content": "Analyze an inaccessible site\nInstructions\nIdentify a website that you believe is NOT accessible and create an action plan to improve its accessibility.\nYour first task would be to identify this site, detail the ways in which you think it is inaccessible without using analytical tools, and then submit it to a Lighthouse analysis. Capture a pdf of the results of this analysis and outline a detailed plan with a minimum of ten points showing how the site could be improved.\nTable to test site accessibility\n| Criteria | Exemplary | Adequate | Need to Improve |\n|----------|-----------|----------|----------------|\n|          | missing <10% of what is required | missing 20% of what is required | missing 50% of what is required |\nStudent Report: includes paragraphs on how inaccessible the site is, the Lighthouse report captured in pdf, a list of ten points to improve, with details on how to improve it",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 938,
      "relative_path": "git_repos\\web-dev-beginners\\1-getting-started-lessons\\3-accessibility\\assignment.md",
      "source_type": "git_repo"
    },
    "token_count": 185,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "57b2f622482cf7155f3609bbb120d424",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\1-getting-started-lessons\\2-github-basics\\README.md",
    "source_type": "git_repo",
    "title": "Introduction to GitHub",
    "content": "Introduction to GitHub\nThis lesson covers the basics of GitHub, a platform to host and manage changes to your code Sketchnote by Tomomi Imura\nPre-Lecture Quiz\nPre-lecture quiz\nIntroduction\nIn this lesson, we'll cover:\ntracking the work you do on your machine\nworking on projects with others\nhow to contribute to open source software\nPrerequisites\nBefore you begin, you'll need to check if Git is installed In the terminal type:\ngit --version\nIf Git is not installed, download Git Then, setup your local Git profile in the terminal:\n* git config --global user name \"your-name\"\n* git config --global user email \"your-email\"\nTo check if Git is already configured you can type:\ngit config --list\nYou'll also need a GitHub account, a code editor (like Visual Studio Code), and you'll need to open your terminal (or: command prompt) Navigate to github com and create an account if you haven't already, or log in and fill out your profile ✅ GitHub isn't the only code repository in the world; there are others, but GitHub is the best known\nPreparation\nYou'll need both a folder with a code project on your local machine (laptop or PC), and a public repository on GitHub, which will serve as an example for how to contribute to the projects of others Code management\nLet's say you have a folder locally with some code project and you want to start tracking your progress using git - the version control system Some people compare using git to writing a love letter to your future self Reading your commit messages days or weeks or months later you'll be able to recall why you made a decision, or \"rollback\" a change - that is, when you write good \"commit messages\" Task: Make a repository and commit code\nCheck out video\nCreate repository on GitHub On GitHub com, in the repositories tab, or from the navigation bar top-right, find the new repo button Give your repository (folder) a name\nSelect create repository Navigate to your working folder In your terminal, switch to the folder (also known as the directory) you want to start tracking Type:\nbash\ncd [name of your folder]\nInitialize a git repository In your project type:\nbash\ngit init\nCheck status",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16803,
      "relative_path": "git_repos\\web-dev-beginners\\1-getting-started-lessons\\2-github-basics\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "b76b6542c3b0e33176a3e1e2ba891ad1",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\1-getting-started-lessons\\2-github-basics\\README.md",
    "source_type": "git_repo",
    "title": "Introduction to GitHub",
    "content": "Check out video Create repository on GitHub On GitHub com, in the repositories tab, or from the navigation bar top-right, find the new repo button Give your repository (folder) a name Select create repository Navigate to your working folder In your terminal, switch to the folder (also known as the directory) you want to start tracking Type: bash cd [name of your folder] Initialize a git repository In your project type: bash git init Check statusTo check the status of your repository type:\nbash\ngit status\nthe output can look something like this:\n```output\nChanges not staged for commit:\n(use \"git add \" to update what will be committed)\n(use \"git checkout -- \" to discard changes in working directory)\nmodified:   file txt\nmodified:   file2 txt\n```\nTypically a git status command tells you things like what files are ready to be saved to the repo or has changes on it that you might want to persist Add all files for tracking\nThis also called as staging files/ adding files to the staging area bash\ngit add The git add plus argument indicates that all your files & changes for tracking Add selected files for tracking\nbash\ngit add [file or folder name]\nThis helps us to add only selected files to the staging area when we don't want to commit all files at once Unstage all files\nbash\ngit reset\nThis command helps us to unstage all files at once Unstage a particular file\nbash\ngit reset [file or folder name]\nThis command helps us to unstage only a particular file at once that we don't want to include for the next commit Persisting your work At this point you've added the files to a so called staging area A place where Git is tracking your files To make the change permanent you need to commit the files To do so you create a commit with the git commit command A commit represents a saving point in the history of your repo Type the following to create a commit:\nbash\ngit commit -m \"first commit\"\nThis commits all of your files, adding the message \"first commit\" For future commit messages you will want to be more descriptive in your description to convey what type of change you've made Connect your local Git repo with GitHub A Git repo is good on your machine but at some point you want to have backup of your files somewhere and also invite other people to work with you on your repo One such great place to do so is GitHub",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16803,
      "relative_path": "git_repos\\web-dev-beginners\\1-getting-started-lessons\\2-github-basics\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "713b4662153f40c02f6087559893aa29",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\1-getting-started-lessons\\2-github-basics\\README.md",
    "source_type": "git_repo",
    "title": "Introduction to GitHub",
    "content": "adding the message \"first commit\" For future commit messages you will want to be more descriptive in your description to convey what type of change you've made Connect your local Git repo with GitHub A Git repo is good on your machine but at some point you want to have backup of your files somewhere and also invite other people to work with you on your repo One such great place to do so is GitHubRemember we've already created a repo on GitHub so the only thing we need to do is to connect our local Git repo with GitHub The command git remote add will do just that Type the following command:\nNote, before you type the command go to your GitHub repo page to find the repository URL You will use it in the below command Replace https://github com/username/repository_name git with your GitHub URL bash\ngit remote add origin https://github com/username/repository_name git\nThis creates a remote, or connection, named \"origin\" pointing at the GitHub repository you created earlier Send local files to GitHub So far you've created a connection between the local repo and the GitHub repo Let's send these files to GitHub with the following command git push, like so:\nNote, your branch name may be different by default from main bash\ngit push -u origin main\nThis sends your commits in your \"main\" branch to GitHub To add more changes If you want to continue making changes and pushing them to GitHub you’ll just need to use the following three commands:\nbash\ngit add git commit -m \"type your commit message here\"\ngit push\nTip, You might also want to adopt a gitignore file to prevent files you don't want to track from showing up on GitHub - like that notes file you store in the same folder but has no place on a public repository You can find templates for gitignore files at gitignore templates Commit messages\nA great Git commit subject line completes the following sentence:\nIf applied, this commit will\nFor the subject use the imperative, present tense: \"change\" not \"changed\" nor \"changes\" As in the subject, in the body (optional) also use the imperative, present tense The body should include the motivation for the change and contrast this with previous behavior You're explaining the why, not the how ✅ Take a few minutes to surf around GitHub Can you find a really great commit message Can you find a really minimal one What information do you think is the most important and useful to convey in a commit message",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16803,
      "relative_path": "git_repos\\web-dev-beginners\\1-getting-started-lessons\\2-github-basics\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "e3a0e0d6fe3f5cc3812e4a09d0360cae",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\1-getting-started-lessons\\2-github-basics\\README.md",
    "source_type": "git_repo",
    "title": "Introduction to GitHub",
    "content": "in the subject, in the body (optional) also use the imperative, present tense The body should include the motivation for the change and contrast this with previous behavior You're explaining the why, not the how ✅ Take a few minutes to surf around GitHub Can you find a really great commit message Can you find a really minimal one What information do you think is the most important and useful to convey in a commit messageTask: Collaborate\nThe main reason for putting things on GitHub was to make it possible to collaborate with other developers Working on projects with others\nCheck out video\nIn your repository, navigate to Insights > Community to see how your project compares to recommended community standards Here are some things that can improve your GitHub repo:\n- Description Did you add a description for your project - README Did you add a README GitHub provides guidance for writing a README - Contributing guideline Does your project have contributing guidelines,\n- Code of Conduct a Code of Conduct,\n- License Perhaps most importantly, a license All these resources will benefit onboarding new team members And those are typically the kind of things new contributors look at before even looking at your code, to find out if your project is the right place for them to be spending their time ✅ README files, although they take time to prepare, are often neglected by busy maintainers Can you find an example of a particularly descriptive one Note: there are some tools to help create good READMEs that you might like to try Task: Merge some code\nContributing docs help people contribute to the project It explains what types of contributions you're looking for and how the process works Contributors will need to go through a series of steps to be able to contribute to your repo on GitHub:\nForking your repo You will probably want people to fork your project Forking means creating a replica of your repository on their GitHub profile Clone From there they will clone the project to their local machine Create a branch You will want to ask them to create a branch for their work Focus their change on one area Ask contributors to concentrate their contributions on one thing at a time - that way the chances that you can merge in their work is higher Imagine they write a bug fix, add a new feature, and update several tests - what if you want to, or can only implement 2 out of 3, or 1 out of 3 changes ✅ Imagine a situation where branches are particularly critical to writing and shipping good code What use cases can you think of",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16803,
      "relative_path": "git_repos\\web-dev-beginners\\1-getting-started-lessons\\2-github-basics\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "7c0bd4ba7454081b3e71288aaff19929",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\1-getting-started-lessons\\2-github-basics\\README.md",
    "source_type": "git_repo",
    "title": "Introduction to GitHub",
    "content": "on one thing at a time - that way the chances that you can merge in their work is higher Imagine they write a bug fix, add a new feature, and update several tests - what if you want to, or can only implement 2 out of 3, or 1 out of 3 changes ✅ Imagine a situation where branches are particularly critical to writing and shipping good code What use cases can you think ofNote, be the change you want to see in the world, and create branches for your own work as well Any commits you make will be made on the branch you’re currently “checked out” to Use git status to see which branch that is Let's go through a contributor workflow Assume the contributor has already forked and cloned the repo so they have a Git repo ready to be worked on, on their local machine:\nCreate a branch Use the command git branch to create a branch that will contain the changes they mean to contribute:\nbash\ngit branch [branch-name]\nSwitch to working branch Switch to the specified branch and update the working directory with git switch:\nbash\ngit switch [branch-name]\nDo work At this point you want to add your changes Don't forget to tell Git about it with the following commands:\nbash\ngit add git commit -m \"my changes\"\nEnsure you give your commit a good name, for your sake as well as the maintainer of the repo you are helping on Combine your work with the main branch At some point you are done working and you want to combine your work with that of the main branch The main branch might have changed meanwhile so make sure you first update it to the latest with the following commands:\nbash\ngit switch main\ngit pull\nAt this point you want to make sure that any conflicts, situations where Git can't easily combine the changes happens in your working branch Therefore run the following commands:\nbash\ngit switch [branch_name]\ngit merge main\nThis will bring in all changes from main into your branch and hopefully you can just continue If not, VS Code will tell you where Git is confused and you just alter the affected files to say which content is the most accurate Send your work to GitHub Sending your work to GitHub means two things Pushing your branch to your repo and then open up a PR, Pull Request bash\ngit push --set-upstream origin [branch-name]\nThe above command creates the branch on your forked repo Open a PR Next, you want to open up a PR",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16803,
      "relative_path": "git_repos\\web-dev-beginners\\1-getting-started-lessons\\2-github-basics\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "52aebcef031cb3af3bddfeb8a653a563",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\1-getting-started-lessons\\2-github-basics\\README.md",
    "source_type": "git_repo",
    "title": "Introduction to GitHub",
    "content": "will tell you where Git is confused and you just alter the affected files to say which content is the most accurate Send your work to GitHub Sending your work to GitHub means two things Pushing your branch to your repo and then open up a PR, Pull Request bash git push --set-upstream origin [branch-name] The above command creates the branch on your forked repo Open a PR Next, you want to open up a PRYou do that by navigating to the forked repo on GitHub You will see an indication on GitHub where it asks whether you want to create a new PR, you click that and you are taken to an interface where you can change commit message title, give it a more suitable description Now the maintainer of the repo you forked will see this PR and fingers crossed they will appreciate and merge your PR You are now a contributor, yay :)\nClean up It's considered good practice to clean up after you successfully merge a PR You want to clean up both your local branch and the branch you pushed to GitHub First let's delete it locally with the following command:\nbash\ngit branch -d [branch-name]\nEnsure you go the GitHub page for the forked repo next and remove the remote branch you just pushed to it Pull request seems like a silly term because really you want to push your changes to the project But the maintainer (project owner) or core team needs to consider your changes before merging it with the project's \"main\" branch, so you're really requesting a change decision from a maintainer A pull request is the place to compare and discuss the differences introduced on a branch with reviews, comments, integrated tests, and more A good pull request follows roughly the same rules as a commit message You can add a reference to an issue in the issue tracker, when your work for instance fixes an issue This is done using a # followed by the number of your issue For example #97 🤞Fingers crossed that all checks pass and the project owner(s) merge your changes into the project🤞\nUpdate your current local working branch with all new commits from the corresponding remote branch on GitHub:\ngit pull\nHow to contribute to open source\nFirst, let's find a repository (or repo) on GitHub of interest to you and to which you'd like to contribute a change You will want to copy its contents to your machine ✅ A good way to find 'beginner-friendly' repos is to search by the tag 'good-first-issue'",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16803,
      "relative_path": "git_repos\\web-dev-beginners\\1-getting-started-lessons\\2-github-basics\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "2f9a1ef0d144bfc37c92602d5dd2a854",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\1-getting-started-lessons\\2-github-basics\\README.md",
    "source_type": "git_repo",
    "title": "Introduction to GitHub",
    "content": "changes into the project🤞 Update your current local working branch with all new commits from the corresponding remote branch on GitHub: git pull How to contribute to open source First, let's find a repository (or repo) on GitHub of interest to you and to which you'd like to contribute a change You will want to copy its contents to your machine ✅ A good way to find 'beginner-friendly' repos is to search by the tag 'good-first-issue'There are several ways of copying code One way is to \"clone\" the contents of the repository, using HTTPS, SSH, or using the GitHub CLI (Command Line Interface) Open your terminal and clone the repository like so:\ngit clone https://github com/ProjectURL\nTo work on the project, switch to the right folder:\ncd ProjectURL\nYou can also open the entire project using Codespaces, GitHub's embedded code editor / cloud development environment, or GitHub Desktop Lastly, you can download the code in a zipped folder A few more interesting things about GitHub\nYou can star, watch and/or \"fork\" any public repository on GitHub You can find your starred repositories in the top-right drop-down menu It's like bookmarking, but for code Projects have an issue tracker, mostly on GitHub in the \"Issues\" tab unless indicated otherwise, where people discuss issues related to the project And the Pull Requests tab is where people discuss and review changes that are in progress Projects might also have discussion in forums, mailing lists, or chat channels like Slack, Discord or IRC ✅ Take a look around your new GitHub repo and try a few things, like editing settings, adding information to your repo, and creating a project (like a Kanban board) There's a lot you can do 🚀 Challenge\nPair with a friend to work on each other's code Create a project collaboratively, fork code, create branches, and merge changes Post-Lecture Quiz\nPost-lecture quiz\nReview & Self Study\nRead more about contributing to open source software Git cheatsheet Practice, practice, practice GitHub has great learning paths available via skills github com:\nFirst Week on GitHub\nYou'll also find more advanced courses Assignment\nComplete the First Week on GitHub course",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16803,
      "relative_path": "git_repos\\web-dev-beginners\\1-getting-started-lessons\\2-github-basics\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 447,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "4e10e0ba313f3641f0533b5689c4bd27",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\.github\\ISSUE_TEMPLATE\\bug_report.md",
    "source_type": "git_repo",
    "title": "bug_report",
    "content": "name: Bug report\nabout: Create a report to help us improve\ntitle: ''\nlabels: ''\nassignees: ''\nDescribe the bug\nA clear and concise description of what the bug is.\nTo Reproduce\nSteps to reproduce the behavior:\n1. Go to '...'\n2. Click on '....'\n3. Scroll down to '....'\n4. See error\nExpected behavior\nA clear and concise description of what you expected to happen.\nScreenshots\nIf applicable, add screenshots to help explain your problem.\nDesktop (please complete the following information):\n- OS: [e.g. iOS]\n- Browser [e.g. chrome, safari]\n- Version [e.g. 22]\nSmartphone (please complete the following information):\n- Device: [e.g. iPhone6]\n- OS: [e.g. iOS8.1]\n- Browser [e.g. stock browser, safari]\n- Version [e.g. 22]\nAdditional context\nAdd any other context about the problem here.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 872,
      "relative_path": "git_repos\\web-dev-beginners\\.github\\ISSUE_TEMPLATE\\bug_report.md",
      "source_type": "git_repo"
    },
    "token_count": 204,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "40d68661e4a45f40ed5a51628da55d69",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\.github\\ISSUE_TEMPLATE\\feature_request.md",
    "source_type": "git_repo",
    "title": "feature_request",
    "content": "name: Feature request\nabout: Suggest an idea for this project\ntitle: ''\nlabels: ''\nassignees: ''\nIs your feature request related to a problem? Please describe.\nA clear and concise description of what the problem is. Ex. I'm always frustrated when [...]\nDescribe the solution you'd like\nA clear and concise description of what you want to happen.\nDescribe alternatives you've considered\nA clear and concise description of any alternative solutions or features you've considered.\nAdditional context\nAdd any other context or screenshots about the feature request here.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 615,
      "relative_path": "git_repos\\web-dev-beginners\\.github\\ISSUE_TEMPLATE\\feature_request.md",
      "source_type": "git_repo"
    },
    "token_count": 112,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "83db8fdfd4d908381dea5cb47993aeaa",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\.github\\workflows\\azure-static-web-apps-ashy-river-0debb7803.yml",
    "source_type": "git_repo",
    "title": "azure-static-web-apps-ashy-river-0debb7803",
    "content": "name: Azure Static Web Apps CI/CD\n\non: workflow_dispatch\n\njobs:\n  build_and_deploy_job:\n    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')\n    runs-on: ubuntu-latest\n    name: Build and Deploy Job\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: true\n      - name: Build And Deploy\n        id: builddeploy\n        uses: Azure/static-web-apps-deploy@v1\n        with:\n          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_ASHY_RIVER_0DEBB7803 }}\n          repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for Github integrations (i.e. PR comments)\n          action: \"upload\"\n          ###### Repository/Build Configurations - These values can be configured to match your app requirements. ######\n          # For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig\n          app_location: \"/quiz-app\" # App source code path\n          api_location: \"\" # Api source code path - optional\n          output_location: \"dist\" # Built app content directory - optional\n          ###### End of Repository/Build Configurations ######\n\nclose_pull_request_job:\n    if: github.event_name == 'pull_request' && github.event.action == 'closed'\n    runs-on: ubuntu-latest\n    name: Close Pull Request Job\n    steps:\n      - name: Close Pull Request\n        id: closepullrequest\n        uses: Azure/static-web-apps-deploy@v1\n        with:\n          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_ASHY_RIVER_0DEBB7803 }}\n          action: \"close\"",
    "metadata": {
      "file_extension": ".yml",
      "file_type": "yaml",
      "file_size": 1680,
      "relative_path": "git_repos\\web-dev-beginners\\.github\\workflows\\azure-static-web-apps-ashy-river-0debb7803.yml",
      "source_type": "git_repo"
    },
    "token_count": 395,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "32f249bdaa31bed228445f3ba7020913",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\1-getting-started-lessons\\3-accessibility\\README.md",
    "source_type": "git_repo",
    "title": "Example",
    "content": "Creating Accessible Webpages\nSketchnote by Tomomi Imura\nPre-Lecture Quiz\nPre-lecture quiz\nThe power of the Web is in its universality Access by everyone regardless of disability is an essential aspect - Sir Timothy Berners-Lee, W3C Director and inventor of the World Wide Web\nThis quote perfectly highlights the importance of creating accessible websites An application that can't be accessed by all is by definition exclusionary As web developers we should always have accessibility in mind By having this focus from the beginning you will be well on your way to ensure everyone can access the pages you create In this lesson, you'll learn about the tools that can help you ensure that your web assets are accessible and how to build with accessibility in mind You can take this lesson on Microsoft Learn Tools to use\nScreen readers\nOne of the best-known accessibility tools are screen readers Screen readers are commonly used clients for those with vision impairments As we spend time ensuring a browser properly conveys the information we wish to share, we must also ensure a screen reader does the same At its most basic, a screen reader will read a page from top to bottom audibly If your page is all text, the reader will convey the information in a similar fashion to a browser Of course, web pages are rarely purely text; they will contain links, graphics, color, and other visual components Care must be taken to ensure that this information is read correctly by a screen reader Every web developer should familiarize themselves with a screen reader As highlighted above, it's the client your users will utilize Much in the same way you're familiar with how a browser operates, you should learn how a screen reader operates Fortunately, screen readers are built into most operating systems Some browsers also have built-in tools and extensions that can read text aloud or even provide some basic navigational features, such as these accessibility-focused Edge browser tools These are also important accessibility tools, but function very differently from screen readers and they should not be mistaken for screen reader testing tools ✅ Try a screen reader and browser text reader On Windows Narrator is included by default, and JAWS and NVDA can also be installed On macOS and iOS, VoiceOver is installed by default Zoom\nAnother tool commonly used by people with vision impairments is zooming The most basic type of zooming is static zoom, controlled through Control + plus sign (+) or by decreasing screen resolution",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16027,
      "relative_path": "git_repos\\web-dev-beginners\\1-getting-started-lessons\\3-accessibility\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "80c044292505c1c588cbd12afaad672e",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\1-getting-started-lessons\\3-accessibility\\README.md",
    "source_type": "git_repo",
    "title": "Example",
    "content": "they should not be mistaken for screen reader testing tools ✅ Try a screen reader and browser text reader On Windows Narrator is included by default, and JAWS and NVDA can also be installed On macOS and iOS, VoiceOver is installed by default Zoom Another tool commonly used by people with vision impairments is zooming The most basic type of zooming is static zoom, controlled through Control + plus sign (+) or by decreasing screen resolutionThis type of zoom causes the entire page to resize, so using responsive design is important to provide a good user experience at increased zoom levels Another type of zoom relies on specialized software to magnify one area of the screen and pan, much like using a real magnifying glass On Windows, Magnifier is built in, and ZoomText is a third-party magnification software with more features and a larger user base Both macOS and iOS have a built-in magnification software called Zoom Contrast checkers\nColors on web sites need to be carefully chosen to  answer the needs of color-blind users or people who have  difficulty seeing low-contrast colors ✅ Test a web site you enjoy using for color usage with a browser extension such as WCAG's color checker What do you learn Lighthouse\nIn the developer tool area of your browser, you'll find the Lighthouse tool This tool is important to get a first view of the accessibility (as well as other analysis) of a web site While it's important not to rely exclusively on Lighthouse, a 100% score is very helpful as a baseline ✅ Find Lighthouse in your browser's developer tool panel and run an analysis on any site what do you discover Designing for accessibility\nAccessibility is a relatively large topic To help you out, there are numerous resources available Accessible U - University of Minnesota\nWhile we won't be able to cover every aspect of creating accessible sites, below are some of the core tenets you will want to implement Designing an accessible page from the start is always easier than going back to an existing page to make it accessible Good display principles\nColor safe palettes\nPeople see the world in different ways, and this includes colors When selecting a color scheme for your site, you should ensure it's accessible to all One great tool for generating color palettes is Color Safe ✅ Identify a web site that is very problematic in its use of color Why Use the correct HTML\nWith CSS and JavaScript it's possible to make any element look like any type of control",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16027,
      "relative_path": "git_repos\\web-dev-beginners\\1-getting-started-lessons\\3-accessibility\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "a3aa4b1779368d9253a1e12c7c037485",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\1-getting-started-lessons\\3-accessibility\\README.md",
    "source_type": "git_repo",
    "title": "Example",
    "content": "display principles Color safe palettes People see the world in different ways, and this includes colors When selecting a color scheme for your site, you should ensure it's accessible to all One great tool for generating color palettes is Color Safe ✅ Identify a web site that is very problematic in its use of color Why Use the correct HTML With CSS and JavaScript it's possible to make any element look like any type of control<span> could be used to create a <button>, and <b> could become a hyperlink While this might be considered easier to style, it conveys nothing to a screen reader Use the appropriate HTML when creating controls on a page If you want a hyperlink, use <a> Using the right HTML for the right control is called making use of Semantic HTML ✅ Go to any web site and see if the designers and developers are using HTML properly Can you find a button that should be a link Hint: right click and choose 'View Page Source' in your browser to look at underlying code Create a descriptive heading hierarchy\nScreen reader users rely heavily on headings to find information and navigate through a page Writing descriptive heading content and using semantic heading tags are important for creating an easily navigable site for screen reader users Use good visual clues\nCSS offers complete control over the look of any element on a page You can create text boxes without an outline or hyperlinks without an underline Unfortunately removing those clues can make it more challenging for someone who depends on them to be able to recognize the type of control The importance of link text\nHyperlinks are core to navigating the web As a result, ensuring a screen reader can properly read links allows all users to navigate your site Screen readers and links\nAs you would expect, screen readers read link text in the same way they'd read any other text on the page With this in mind, the text demonstrated below might feel perfectly acceptable The little penguin, sometimes known as the fairy penguin, is the smallest penguin in the world Click here for more information The little penguin, sometimes known as the fairy penguin, is the smallest penguin in the world Visit https://en wikipedia org/wiki/Little_penguin for more information NOTE As you're about to read, you should never create links which look like the above Remember, screen readers are a different interface from browsers with a different set of features The problem with using the URL\nScreen readers read the text If a URL appears in the text, the screen reader will read the URL",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16027,
      "relative_path": "git_repos\\web-dev-beginners\\1-getting-started-lessons\\3-accessibility\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "c3d68eea9c8f7e6c8a1c45aabe384536",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\1-getting-started-lessons\\3-accessibility\\README.md",
    "source_type": "git_repo",
    "title": "Example",
    "content": "sometimes known as the fairy penguin, is the smallest penguin in the world Visit https://en wikipedia org/wiki/Little_penguin for more information NOTE As you're about to read, you should never create links which look like the above Remember, screen readers are a different interface from browsers with a different set of features The problem with using the URL Screen readers read the text If a URL appears in the text, the screen reader will read the URLGenerally speaking, the URL does not convey meaningful information, and can sound annoying You may have experienced this if your phone has ever audibly read a text message with a URL The problem with \"click here\"\nScreen readers also have the ability to read only the hyperlinks on a page, much in the same way a sighted person would scan a page for links If the link text is always \"click here\", all the user will hear is \"click here, click here, click here, click here, click here, \" All links are now indistinguishable from one another Good link text\nGood link text briefly describes what's on the other side of the link In the above example talking about little penguins, the link is to the Wikipedia page about the species The phrase little penguins would make for perfect link text as it makes it clear what someone will learn about if they click the link - little penguins The little penguin, sometimes known as the fairy penguin, is the smallest penguin in the world ✅ Surf the web for a few minutes to find pages that use obscure linking strategies Compare them with other, better-linked sites What do you learn Search engine notes\nAs an added bonus for ensuring your site is accessible to all, you'll help search engines navigate your site as well Search engines use link text to learn the topics of pages So using good link text helps everyone ARIA\nImagine the following page:\n| Product      | Description        | Order        |\n| ------------ | ------------------ | ------------ |\n| Widget       | Description | Order |\n| Super widget | Description | Order |\nIn this example, duplicating the text of description and order make sense for someone using a browser However, someone using a screen reader would only hear the words description and order repeated without context To support these types of scenarios, HTML supports a set of attributes known as Accessible Rich Internet Applications (ARIA) These attributes allow you to provide additional information to screen readers NOTE: Like many aspects of HTML, browser and screen reader support may vary",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16027,
      "relative_path": "git_repos\\web-dev-beginners\\1-getting-started-lessons\\3-accessibility\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "234c123092935e3df35af344d9bea92a",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\1-getting-started-lessons\\3-accessibility\\README.md",
    "source_type": "git_repo",
    "title": "Example",
    "content": "this example, duplicating the text of description and order make sense for someone using a browser However, someone using a screen reader would only hear the words description and order repeated without context To support these types of scenarios, HTML supports a set of attributes known as Accessible Rich Internet Applications (ARIA) These attributes allow you to provide additional information to screen readers NOTE: Like many aspects of HTML, browser and screen reader support may varyHowever, most mainline clients support ARIA attributes You can use aria-label to describe the link when the format of the page doesn't allow you to The description for widget could be set as\nhtml\n<a href=\"#\" aria-label=\"Widget description\">description</a>\n✅ In general, using Semantic markup as described above supersedes the use of ARIA, but sometimes there is no semantic equivalent for various HTML widgets A good example is a Tree There's no HTML equivalent for a tree, so you identify the generic <div> for this element with a proper role and aria values The MDN documentation on ARIA contains more useful information ```html\nFile Viewer\nUploads\n```\nImages\nIt goes without saying screen readers are unable to automatically read what's in an image Ensuring images are accessible doesn't take much work - it's what the alt attribute is all about All meaningful images should have an alt to describe what they are Images that are purely decorative should have their alt attribute set to an empty string: alt=\"\" This prevents screen readers from unnecessarily announcing the decorative image ✅ As you might expect, search engines are also unable to understand what's in an image They also use alt text So once again, ensuring your page is accessible provides additional bonuses The keyboard\nSome users are unable to use a mouse or trackpad, instead relying on keyboard interactions to tab from one element to the next It's important for your web site to present your content in logical order so a keyboard user can access each interactive element as they move down a document If you build your web pages with semantic markup and use CSS to style their visual layout, your site should be keyboard-navigable, but it's important to test this aspect manually Learn more about keyboard navigation strategies ✅ Go to any web site and try to navigate through it using only your keyboard What works, what doesn't work Why Summary\nA web accessible to some is not a truly 'world-wide web' The best way to ensure the sites you create are accessible is to incorporate accessibility best practices from the start",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16027,
      "relative_path": "git_repos\\web-dev-beginners\\1-getting-started-lessons\\3-accessibility\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "2acb4627ca8e930ac81d9c12c00d3406",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\1-getting-started-lessons\\3-accessibility\\README.md",
    "source_type": "git_repo",
    "title": "Example",
    "content": "their visual layout, your site should be keyboard-navigable, but it's important to test this aspect manually Learn more about keyboard navigation strategies ✅ Go to any web site and try to navigate through it using only your keyboard What works, what doesn't work Why Summary A web accessible to some is not a truly 'world-wide web' The best way to ensure the sites you create are accessible is to incorporate accessibility best practices from the startWhile there are extra steps involved, incorporating these skills into your workflow now will mean all pages you create will be accessible 🚀 Challenge\nTake this HTML and rewrite it to be as accessible as possible, given the strategies you learned ```html\nExample\nTurtle Ipsum\nThe World's Premier Turtle Fan Club\nResources\n\"I like turtles\"\nBasic Turtle Info\nChocolate Turtles\nWelcome to Turtle Ipsum Click here to learn more Turtle ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\nSign up for turtle news\nInternal Pages\nIndex\nSemantic Example\n© 2016 Instrument\n```\nPost-Lecture Quiz\nPost-lecture quiz\nReview & Self Study\nMany governments have laws regarding accessibility requirements Read up on your home country's accessibility laws What is covered, and what isn't An example is this government web site Assignment\nAnalyze a non-accessible web site\nCredits: Turtle Ipsum by Instrument",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16027,
      "relative_path": "git_repos\\web-dev-beginners\\1-getting-started-lessons\\3-accessibility\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 352,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "6054391f0fb6cf55474ce7c4698704af",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\.github\\workflows\\co-op-translator.yml",
    "source_type": "git_repo",
    "title": "co-op-translator",
    "content": "name: Co-op Translator\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  co-op-translator:\n    runs-on: ubuntu-latest\n\npermissions:\n      contents: write\n      pull-requests: write\n\nsteps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n- name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.10'\n\n- name: Install Co-op Translator\n        run: |\n          python -m pip install --upgrade pip\n          pip install co-op-translator\n\n- name: Run Co-op Translator\n        env:\n          PYTHONIOENCODING: utf-8\n          # Azure AI Service Credentials\n          AZURE_AI_SERVICE_API_KEY: ${{ secrets.AZURE_AI_SERVICE_API_KEY }}\n          AZURE_AI_SERVICE_ENDPOINT: ${{ secrets.AZURE_AI_SERVICE_ENDPOINT }}\n\n# Azure OpenAI Credentials\n          AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}\n          AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}\n          AZURE_OPENAI_MODEL_NAME: ${{ secrets.AZURE_OPENAI_MODEL_NAME }}\n          AZURE_OPENAI_CHAT_DEPLOYMENT_NAME: ${{ secrets.AZURE_OPENAI_CHAT_DEPLOYMENT_NAME }}\n          AZURE_OPENAI_API_VERSION: ${{ secrets.AZURE_OPENAI_API_VERSION }}\n\n# OpenAI Credentials\n          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n          OPENAI_ORG_ID: ${{ secrets.OPENAI_ORG_ID }}\n          OPENAI_CHAT_MODEL_ID: ${{ secrets.OPENAI_CHAT_MODEL_ID }}\n          OPENAI_BASE_URL: ${{ secrets.OPENAI_BASE_URL }}\n        run: |\n          # =====================================================================\n          # IMPORTANT: Set your target languages here (REQUIRED CONFIGURATION)\n          # =====================================================================\n          # Example: Translate to Spanish, French, German. Add -y to auto-confirm.\n          # translate -l \"all\" -y  # <--- MODIFY THIS LINE with your desired languages\n          # translate -l \"zh tw hk fr ja ko\" -y\n          # translate -l \"pt es de fa pl hi\" -y\n          # translate -l \"pt es de fa pl hi\" -img\n            translate -l \"zh tw hk fr ja ko\" -img",
    "metadata": {
      "file_extension": ".yml",
      "file_type": "yaml",
      "file_size": 3633,
      "relative_path": "git_repos\\web-dev-beginners\\.github\\workflows\\co-op-translator.yml",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "35db40599f307ae0560bd03bae2f0b87",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\.github\\workflows\\co-op-translator.yml",
    "source_type": "git_repo",
    "title": "co-op-translator",
    "content": "===================================================================== # IMPORTANT: Set your target languages here (REQUIRED CONFIGURATION) # ===================================================================== # Example: Translate to Spanish, French, German. Add -y to auto-confirm. # translate -l \"all\" -y # <--- MODIFY THIS LINE with your desired languages # translate -l \"zh tw hk fr ja ko\" -y # translate -l \"pt es de fa pl hi\" -y # translate -l \"pt es de fa pl hi\" -img translate -l \"zh tw hk fr ja ko\" -img\n\n- name: Authenticate GitHub App\n        id: generate_token\n        uses: tibdex/github-app-token@v1\n        with:\n          app_id: ${{ secrets.GH_APP_ID }}\n          private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}\n\n- name: Create Pull Request with translations\n        uses: peter-evans/create-pull-request@v5\n        with:\n          token: ${{ steps.generate_token.outputs.token }}\n          commit-message: \"🌐 Update translations via Co-op Translator\"\n          title: \"🌐 Update translations via Co-op Translator\"\n          body: |\n            This PR updates translations for recent changes merged into the `main` branch.\n\n### 📋 Summary of Changes\n            - Translated markdown content has been added under the `translations/` directory\n            - Translated images (if applicable) have been generated in the `translated_images/` directory\n\n🔁 Co-op Translator ensures that changes in links, structure, or inline elements in the original content are automatically reflected in all translated files.\n\n---\n            🌐 This pull request was automatically generated by [Co-op Translator](https://github.com/Azure/co-op-translator), powered by Azure AI.\n\nbranch: update-translations\n          base: main\n          delete-branch: true\n          add-paths: |\n            translations/\n            translated_images/",
    "metadata": {
      "file_extension": ".yml",
      "file_type": "yaml",
      "file_size": 3633,
      "relative_path": "git_repos\\web-dev-beginners\\.github\\workflows\\co-op-translator.yml",
      "source_type": "git_repo"
    },
    "token_count": 390,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c90468e4aae10c77813977d1582873f4",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\.github\\workflows\\links.yml",
    "source_type": "git_repo",
    "title": "links",
    "content": "name: Links\n\non:\n  repository_dispatch:\n  workflow_dispatch:\n  schedule:\n    - cron: \"00 18 * * 0\"\n\njobs:\n  linkChecker:\n    runs-on: ubuntu-latest\n    permissions:\n      issues: write # required for peter-evans/create-issue-from-file\n    steps:\n      - uses: actions/checkout@v4\n\n- name: Link Checker\n        id: lychee\n        uses: lycheeverse/lychee-action@v2\n        with:\n          fail: false\n\n- name: Create Issue From File\n        if: steps.lychee.outputs.exit_code != 0\n        uses: peter-evans/create-issue-from-file@v5\n        with:\n          title: Link Checker Report\n          content-filepath: ./lychee/out.md\n          labels: report, automated issue",
    "metadata": {
      "file_extension": ".yml",
      "file_type": "yaml",
      "file_size": 710,
      "relative_path": "git_repos\\web-dev-beginners\\.github\\workflows\\links.yml",
      "source_type": "git_repo"
    },
    "token_count": 178,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "36edc07d212ec76d99c966599064b03d",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\.github\\workflows\\lock.yml",
    "source_type": "git_repo",
    "title": "lock",
    "content": "name: Lock closed issue\n\non: \n  issues:\n    types: [closed]\n\njobs:\n  lock:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: OSDKDev/lock-issues@v1.1\n      with:\n        repo-token: \"${{ secrets.GITHUB_TOKEN }}\"",
    "metadata": {
      "file_extension": ".yml",
      "file_type": "yaml",
      "file_size": 225,
      "relative_path": "git_repos\\web-dev-beginners\\.github\\workflows\\lock.yml",
      "source_type": "git_repo"
    },
    "token_count": 65,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "555f1d294ef7145d30b144b0b9c13e42",
    "source_file": "corpus\\git_repos\\web-dev-beginners\\.github\\workflows\\stale.yml",
    "source_type": "git_repo",
    "title": "stale",
    "content": "# This workflow warns and then closes issues and PRs that have had no activity for a specified amount of time.\n#\n# You can adjust the behavior by modifying this file.\n# For more information, see:\n# https://github.com/actions/stale\nname: Mark stale issues and pull requests\n\non:\n  schedule:\n  - cron: '35 8 * * *'\n\njobs:\n  stale:\n\nruns-on: ubuntu-latest\n    permissions:\n      issues: write\n      pull-requests: write\n\nsteps:\n    - uses: actions/stale@v6\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        stale-issue-message: 'This issue has not seen any action for a while! Closing for now, but it can be reopened at a later date.'\n        stale-pr-message: 'This PR has not seen any action for a while! Closing for now, but it can be reopened at a later date.'\n        stale-issue-label: 'no-issue-activity'\n        stale-pr-label: 'no-pr-activity'\n        days-before-close: -1",
    "metadata": {
      "file_extension": ".yml",
      "file_type": "yaml",
      "file_size": 934,
      "relative_path": "git_repos\\web-dev-beginners\\.github\\workflows\\stale.yml",
      "source_type": "git_repo"
    },
    "token_count": 222,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "13c0e64f61f66d7d3a3e8a0ad9b6ee4d",
    "source_file": "corpus\\git_repos\\odin-project\\.github\\PULL_REQUEST_TEMPLATE.md",
    "source_type": "git_repo",
    "title": "PULL_REQUEST_TEMPLATE",
    "content": "Because\nThis PR\nIssue\nCloses #XXXXX\nAdditional Information\nPull Request Requirements\n[ ] I have thoroughly read and understand The Odin Project curriculum contributing guide\n[ ] The title of this PR follows the location of change: brief description of change format, e.g. Intro to HTML and CSS lesson: Fix link text\n[ ] The Because section summarizes the reason for this PR\n[ ] The This PR section has a bullet point list describing the changes in this PR\n[ ] If this PR addresses an open issue, it is linked in the Issue section\n[ ] If any lesson files are included in this PR, they have been previewed with the Markdown preview tool to ensure it is formatted correctly\n[ ] If any lesson files are included in this PR, they follow the Layout Style Guide",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2246,
      "relative_path": "git_repos\\odin-project\\.github\\PULL_REQUEST_TEMPLATE.md",
      "source_type": "git_repo"
    },
    "token_count": 163,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "92f802d1e3c6f2b3106b58d882ed5947",
    "source_file": "corpus\\git_repos\\odin-project\\.github\\labeler.yml",
    "source_type": "git_repo",
    "title": "labeler",
    "content": "'Content: Advanced HTML/CSS':\n  - 'advanced_html_css/**/*'\n\n'Content: Databases':\n  - 'databases/**/*'\n\n'Content: Getting Hired':\n  - 'getting_hired/**/*'\n\n'Content: Git':\n  - 'git/**/*'\n\n'Content: Intermediate HTML/CSS':\n  - 'intermediate_html_css/**/*'\n\n'Content: JavaScript':\n  - 'javascript/**/*'\n\n'Content: NodeJS':\n  - 'nodeJS/**/*'\n\n'Content: React':\n  - 'react/**/*'\n\n'Content: Ruby':\n  - 'ruby/**/*'\n\n'Content: Ruby on Rails':\n  - 'ruby_on_rails/**/*'\n\n'Content: Foundations':\n  - 'foundations/**/*'\n\n'Content: Markdownlint':\n  - 'markdownlint/**/*'\n  - '**/*.markdownlint-cli2.jsonc'\n\n'Type: Chore':\n  - 'archive/**/*'",
    "metadata": {
      "file_extension": ".yml",
      "file_type": "yaml",
      "file_size": 668,
      "relative_path": "git_repos\\odin-project\\.github\\labeler.yml",
      "source_type": "git_repo"
    },
    "token_count": 194,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4b33e926c7443c6b04310a29b0a5c56c",
    "source_file": "corpus\\git_repos\\odin-project\\archive\\CONTRIBUTING-old.md",
    "source_type": "git_repo",
    "title": "Contributing Guide",
    "content": "Contributing Guide\nThank you for expressing interest in contributing to our curriculum Please also ensure you carefully read everything here: https://github com/TheOdinProject/curriculum/wiki\nIf you would like to contribute, but are not sure how, find an issue tagged with \"help wanted\" to work on * Please comment on the issue stating what you'd like to work on and wait to be assigned before working on it * After being assigned, address each item listed in the acceptance criteria Feel free to use this markdown cheatsheet if you are unfamiliar with the markdown syntax If you would like to propose a small change (fixing a typo, updating a link, etc ) that is not part of an existing issue, you are welcome to make the change and submit a PR If you would like to propose a change that is not covered in an open issue, please start by creating a new issue or discussing this in our Discord's contribution-suggestions channel How to Contribute\nFork this repo on your local machine Fork and clone this to your local machine Use this guide if you don't know how to do that Set the upstream remote so you can keep your copy of the app synced with the original To do that, go to your terminal and cd into your cloned curriculum directory Then, use one of the following commands:\nIf you have ssh set up with Git\n$ git remote add upstream git@github com:TheOdinProject/curriculum git\nOtherwise\n$ git remote add upstream https://github com/TheOdinProject/curriculum git\nBefore you start working on your issue, create a branch and name it like the following examples:\nIf it's a new feature\n$ git checkout -b feature/feature-name\nIf it's a bug fix\n$ git checkout -b fix/fixed-bug-name\nWhen you have finished, commit your latest changes and ensure your markdown is correctly formatted and rendering properly using our markdown preview tool If the markdown is correctly formatted, you are ready to submit a pull request:\nPush your branch to your fork\n$ git push origin <your branch name here>\nCreate a pull request\n* Go to your fork on Github after you have pushed up your branch A new button should be visible near the top of the page It will allow you to create a pull request to the original Odin Project repo Please fill out the pull request template in its entirety",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3876,
      "relative_path": "git_repos\\odin-project\\archive\\CONTRIBUTING-old.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "1d9399a3a1746cc00851dd450efc9ac4",
    "source_file": "corpus\\git_repos\\odin-project\\archive\\CONTRIBUTING-old.md",
    "source_type": "git_repo",
    "title": "Contributing Guide",
    "content": "are ready to submit a pull request: Push your branch to your fork $ git push origin <your branch name here> Create a pull request * Go to your fork on Github after you have pushed up your branch A new button should be visible near the top of the page It will allow you to create a pull request to the original Odin Project repo Please fill out the pull request template in its entiretySummarize the change in the pull request title, so that anyone can skim through our open pull requests to prevent making a duplicate PR As a general guideline, the title should summarize the change and where it happened, for example: \"Fixes punctuation in Clean Code lesson\", \"Updates specificity link in CSS lesson\", and \"Adds code example to Ruby Variable lesson\" Describe the changes in detail and explain why you think they are necessary and/or important If the PR is related to an open issue, use a relevant keyword and reference it with the # sign and the issue number For example: \"resolves #1234\" If changes are requested, please make the changes in a timely manner After you submit the changes, request another review from the maintainer (top right) Need Help with Anything Here Please let us know if you require any help doing any of the steps in this guide in our Discord's contribution-suggestions channel",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3876,
      "relative_path": "git_repos\\odin-project\\archive\\CONTRIBUTING-old.md",
      "source_type": "git_repo"
    },
    "token_count": 263,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "b5f735fc323a8f1ecfc31b99c63dad74",
    "source_file": "corpus\\git_repos\\odin-project\\archive\\installing_node.md",
    "source_type": "git_repo",
    "title": "installing_node",
    "content": "Introduction\nNode is a JavaScript runtime environment that allows you to run JavaScript outside of your web browser, this means that you can code the server side of your application in JavaScript To get started, there are some required tools we need before we can install Node on your system We're going to install it using nvm (Node Version Manager), because it makes it easy to change Node versions and upgrade Node There is another tool called npm (Node Package Manager) that you will use later to install the various libraries and tools used in JavaScript environments It can be easy to confuse these two so read carefully Node is also very easy to install using nvm, so this should go quickly :)\nInstalling nvm\nInstallation on Linux\n#### Step 0: Prerequisites\nTo install nvm properly, you'll need `curl` Simply run the command below:\n~~~bash\nsudo apt install curl\n~~~\n#### Step 1: Downloading and Installing `nvm`\nSimply run this command:\n~~~bash\ncurl -o- https://raw githubusercontent com/nvm-sh/nvm/v0 35 3/install sh | bash\n~~~\nThis will install `nvm`\n#### Step 2: Initializing `nvm`\nIn the terminal there should be some directions on how to initialize `nvm`, if not, (or if you don't feel like copying from the terminal), run these commands:\n~~~bash\nexport NVM_DIR=\"$([ -z \"${XDG_CONFIG_HOME-}\" ] && printf %s \"${HOME}/ nvm\" || printf %s \"${XDG_CONFIG_HOME}/nvm\")\"\n[ -s \"$NVM_DIR/nvm sh\" ] && \\ \"$NVM_DIR/nvm sh\" # This loads nvm\n~~~\nYou can verify `nvm` is installed by running the command:\n~~~BASH\ncommand -v nvm\n~~~\nif this returns `nvm: command not found` close the terminal and re-open it Installation on macOS\nOn macOS 10 15 and above, the default shell is now zsh During installation, nvm will look for a ` zshrc` file in your user home directory By default, this file does not exist so we need to create it To create the ` zshrc` file and start the nvm installation, run the following commands:\n~~~bash\ntouch ~/ zshrc\n~~~\n~~~bash\ncurl -o- https://raw githubusercontent",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3994,
      "relative_path": "git_repos\\odin-project\\archive\\installing_node.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "777519cd5e0d2d3899f169a78a1dc98f",
    "source_file": "corpus\\git_repos\\odin-project\\archive\\installing_node.md",
    "source_type": "git_repo",
    "title": "installing_node",
    "content": "not found` close the terminal and re-open it Installation on macOS On macOS 10 15 and above, the default shell is now zsh During installation, nvm will look for a ` zshrc` file in your user home directory By default, this file does not exist so we need to create it To create the ` zshrc` file and start the nvm installation, run the following commands: ~~~bash touch ~/ zshrc ~~~ ~~~bash curl -o- https://raw githubusercontentcom/nvm-sh/nvm/v0 35 3/install sh | bash\n~~~\nRestart your terminal, or copy and paste the following into your terminal and press Enter:\n~~~bash\nexport NVM_DIR=\"$HOME/ nvm\"\n[ -s \"$NVM_DIR/nvm sh\" ] && \\ \"$NVM_DIR/nvm sh\" # This loads nvm\n[ -s \"$NVM_DIR/bash_completion\" ] && \\ \"$NVM_DIR/bash_completion\" # This loads nvm bash_completion\n~~~\nTest your nvm installation by running:\n~~~bash\nnvm --version ~~~\nFor more information, view [NVM's github documentation](https://github com/nvm-sh/nvm#installation-and-update) Installing Node\nNow that we have nvm installed, we can install Node Step 1: Installation\nRun:\n~~~bash\nnvm install --lts\n~~~\nThis will install the most recent stable version of Node, and you’ll see a lot of output in the terminal If everything worked, you should see something similar to this somewhere in the lines of output:\n~~~bash\nDownloading and installing Node v16 xx x ~~~\nIf not, close the terminal, re-open it and run nvm install node again Step 2: Setting the Node Version\nWe need to tell nvm which version of Node to use when we run the node command It's easy, just run the following command:\n~~~bash\nnvm use node\n~~~\nNow when you run node -v you should see v16 xx x or something similar If you see that, you have successfully installed Node Using Node console\nFor convenience, Node provides a interactive console which lets you run and edit your javascript code right in your terminal, similar to IRB for ruby This is quite helpful to debug or test small snippets of your code quickly without opening the browser every time",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3994,
      "relative_path": "git_repos\\odin-project\\archive\\installing_node.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "94513b58070a03ecb32c08e782785924",
    "source_file": "corpus\\git_repos\\odin-project\\archive\\installing_node.md",
    "source_type": "git_repo",
    "title": "installing_node",
    "content": "nvm use node ~~~ Now when you run node -v you should see v16 xx x or something similar If you see that, you have successfully installed Node Using Node console For convenience, Node provides a interactive console which lets you run and edit your javascript code right in your terminal, similar to IRB for ruby This is quite helpful to debug or test small snippets of your code quickly without opening the browser every timeTo run the Node console, open up your terminal and type node Type exit to quit the console",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3994,
      "relative_path": "git_repos\\odin-project\\archive\\installing_node.md",
      "source_type": "git_repo"
    },
    "token_count": 103,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "5e1673514d8f13bda99017594c222f50",
    "source_file": "corpus\\git_repos\\odin-project\\archive\\rails_backend_old.md",
    "source_type": "git_repo",
    "title": "rails_backend_old",
    "content": "Introduction\nSo, you've now learned a lot of juicy JavaScript, enabling you to make various components of your HTML/CSS page react to user actions and/or input That's great As you've seen, you can get your apps to do a lot of pretty cool things already, just using client-side JavaScript You may have noticed, though, that there is still an important piece of the puzzle missing: unless you use Local Storage, your app 'forgets' the user's preferences, as well as any other changes made, as soon as the page gets reloaded While Local Storage is great, it's not ideal: it only stores data on the computer from which the user is accessing the page This approach does not allow for the app to 'remember' anything when the same user tries to access it again from a different device For that, you're going to need a real backend OK, so now what Where you go from here will depend in part on what you've learned so far If you are on the full-stack Ruby on Rails path, hooray: you already have all of the tools you need to build your own full-fledged web app from scratch If not, never fear: you can learn how to build a back-end later using Node js For now, you can outsource your backend functionality to a Backend-as-a-Service (BaaS) company like Firebase or Apigee Building your own backend with Ruby on Rails\nFor those of you who are on the full-stack Ruby on Rails path, the next step is obvious: you get to build your own backend with Rails In preparation, reread the Rails lesson on building an API to refresh how to set up a Rails backend that can handle JSON requests Are you done Good Next, it's time to practice allowing your front end JavaScript to talk to your Rails backend using AJAX We'll cover some best practices for how to pass data from one to another, but otherwise it's up to you: you've got everything you need to put together those final pieces of the web development puzzle Outsourcing your backend to Firebase\nIf you skipped Ruby and/or Ruby on Rails or are on the full-stack JavaScript path, you're not quite ready to build an entire web app from scratch The good news: you don't have to We will provide you with resources that guide you through setting up your backend on Firebase",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7688,
      "relative_path": "git_repos\\odin-project\\archive\\rails_backend_old.md",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "dc625f100360ae1d8eca52b87f7f9a91",
    "source_file": "corpus\\git_repos\\odin-project\\archive\\rails_backend_old.md",
    "source_type": "git_repo",
    "title": "rails_backend_old",
    "content": "otherwise it's up to you: you've got everything you need to put together those final pieces of the web development puzzle Outsourcing your backend to Firebase If you skipped Ruby and/or Ruby on Rails or are on the full-stack JavaScript path, you're not quite ready to build an entire web app from scratch The good news: you don't have to We will provide you with resources that guide you through setting up your backend on FirebaseLearning Outcomes\nBy the end of this lesson, you should be able to:\nWith Ruby on Rails\nExplain how \"unobtrusive JavaScript\" works\nExplain how to pass data from your Rails application to your JavaScript\nExplain why you should use AJAX to load large batches of data\nWith Firebase\nExplain which services are offered by Firebase\nExplain how to set up your app to use those services from Firebase Hosting\nExplain how to set up your app to communicate with and/or pass data to and from the various Firebase services\nAssignment\nWith Ruby on Rails\n1 [Check out \"Using JavaScript in your Rails App\" from Daniel Kehoe](http://railsapps github io/rails-javascript-include-external html) It is long and covers a lot of ground, but it's got great content Some of the stuff on dependencies can be skimmed, but pay attention to the `content_for` stuff at the bottom 2 [Refresh yourself on Rails AJAX from RailsGuides](http://edgeguides rubyonrails org/working_with_javascript_in_rails html) (just skim the top few sections) 3 Read [Bootstrapping JSON data into a Rails View](http://jfire io/blog/2012/04/30/how-to-securely-bootstrap-json-in-a-rails-view) to learn about passing data to your front end With Firebase\n1 [Explore the different services offered by Firebase](https://firebase google com/products) Pay particular attention to [Cloud Firestore](https://firebase google com/products/firestore) for now You may or may not also want to use [Firebase Hosting](https://firebase google com/products/hosting) and/or any of the other services offered by Firebase, particularly [Cloud Storage](https://firebase google com/products/storage) and [Authentication](https://firebase google com/products/auth), but you probably won't need any of those for your first Firebase project 2 Complete [this Google Codelab](https://codelabs developers google",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7688,
      "relative_path": "git_repos\\odin-project\\archive\\rails_backend_old.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "8f8f1da074a9a87264915222ea448b7f",
    "source_file": "corpus\\git_repos\\odin-project\\archive\\rails_backend_old.md",
    "source_type": "git_repo",
    "title": "rails_backend_old",
    "content": "your front end With Firebase 1 [Explore the different services offered by Firebase](https://firebase google com/products) Pay particular attention to [Cloud Firestore](https://firebase google com/products/firestore) for now You may or may not also want to use [Firebase Hosting](https://firebase google com/products/hosting) and/or any of the other services offered by Firebase, particularly [Cloud Storage](https://firebase google com/products/storage) and [Authentication](https://firebase google com/products/auth), but you probably won't need any of those for your first Firebase project 2 Complete [this Google Codelab](https://codelabs developers googlecom/codelabs/firebase-web/#0), which will walk you through setting up a sample app on Firebase step by step 3 Go back to one of the previous projects (e g the library project or the to-do app), and [follow this guide](https://firebase google com/docs/web/setup hl=en) to prepare it for interaction with a Firebase backend * **Caution:** If you're *not* going to be hosting your app on Firebase Hosting, but prefer to leave it where it is (e g on GitHub Pages), take a closer look at the section below Step 4, there should be a link, which directs you to the \"Available Libraries\" page Then, use what you learned in the codelab to make your own app actually interact with Firebase Additional Resources\nThis section contains helpful links to other content It isn't required, so consider it supplemental With Ruby on Rails\nGrabbing your Rails form CSRF token with JavaScript so Rails doesn't yell at you with \"Warning, can't verify CSRF token authenticity\", via SO and another SO post on the CSRF token\nWith Firebase\nThis video to reinforce the learnings from Google Codelab Knowledge Check\nWith Ruby on Rails\nHow do you load custom JavaScript in a given Rails view page How does \"unobtrusive JavaScript\" work How can you pass data from your Rails app to your JavaScript Why would you want to use AJAX to load large batches of data With Firebase\nWhich services does Firebase offer How do you set up your app to use those services from Firebase Hosting and/or from an external host (like GitHub Pages) How do you get your app to communicate with and/or pass data to and from the various Firebase services",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7688,
      "relative_path": "git_repos\\odin-project\\archive\\rails_backend_old.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "f108e56330443b3c1267d4aa3f9e82b5",
    "source_file": "corpus\\git_repos\\odin-project\\archive\\README-old.md",
    "source_type": "git_repo",
    "title": "Welcome to The Odin Project Curriculum",
    "content": "Welcome to The Odin Project Curriculum\nThe Odin Project (also known as TOP) is an open-source community for learning full-stack web development Our mission is to provide a comprehensive curriculum to learn web development for free We help our students learn the skills and build the impressive portfolio of projects they need to get hired as a web developer The curriculum is divided into distinct courses, each covering the subject language in depth Each course contains a listing of lessons interspersed with multiple projects These projects give students the opportunity to practice what they are learning, thereby reinforcing and solidifying the theoretical knowledge learned in the lessons Completed projects may then be included in the student's portfolio Lessons are structured through a combination of original written content and a compilation of carefully curated resources from the web This is where the contributing happens This repository houses the curricular content used in The Odin Project website (cf this repository which houses the front-end and back-end code )\nThe TOP community can be found in our Discord chat rooms Contributing\nThe Odin Project depends on open-source contributions to improve, grow, and thrive We welcome contributors of all experience levels and backgrounds to help maintain this awesome curriculum and community Lessons/Courses in Development\nWe are constantly making improvements to the curriculum, and new lessons are always in the works However, writing new lessons is very time consuming and is done for free If you would like to know specifics about work on new lessons, ask in the Discord chat, or keep an eye on this repo In flight curriculum initiatives\nYou can see what we're working on here If you would like to help us develop any lessons, please read our contributing guide to find out how you can contribute A non-exhaustive list of what you can contribute to help us:\nCorrecting typos and other grammar errors Rewriting lesson sections to make them clearer and easier to understand Fixing broken links Adding new resource links you think would make a lesson better Working on new lessons and projects You can choose to work on parts of a lesson that are outlined in the progress list on lesson plans or you can work on completing an entire lesson yourself To find out more about how you can contribute, please read our contributing guide Other helpful links\nFor more information about The Odin Project, go to theodinproject com For the source code to The Odin Project's main website (which pulls in this curriculum), check out the github repo here Happy Coding * See license md for usage details",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5277,
      "relative_path": "git_repos\\odin-project\\archive\\README-old.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "b4b5a8a3f9a3b740160286d981f99dc1",
    "source_file": "corpus\\git_repos\\odin-project\\archive\\README-old.md",
    "source_type": "git_repo",
    "title": "Welcome to The Odin Project Curriculum",
    "content": "outlined in the progress list on lesson plans or you can work on completing an entire lesson yourself To find out more about how you can contribute, please read our contributing guide Other helpful links For more information about The Odin Project, go to theodinproject com For the source code to The Odin Project's main website (which pulls in this curriculum), check out the github repo here Happy Coding * See license md for usage detailsCreated by Erik Trautman\nThe Odin Project - JavaScript Curriculum\nMission statement\nOur main focus is the cultivation and sequencing of the best free resources around the internet We believe wholeheartedly that everything one needs to know to become employed can be found for free online However, for the average new learner, the vast quantity (and widely varying quality) of resources makes it difficult to make meaningful progress Therefore, we have devised three basic steps to fix this We have created a curriculum that attempts to find the optimal sequencing of information This curriculum is intended to take someone from knowing literally nothing about web development to a point where they could be employed as a Junior Developer For each topic in the curriculum, we try to find the best free resources on the internet that teach that topic We will often link multiple resources so as to not rely too much on a single source of information If good resources cannot be found, we write our own, but we prefer primary links to external sites We invent and cultivate projects that give learners a chance to practice what they have learned and to integrate skills along the way These projects increase information retention, give the learner a chance to experiment, and allow the learner to build an impressive portfolio Additionally, we have made our learning materials completely open source This means that if anyone comes across a resource that is better than what is currently included in our lessons, that person is free (and encouraged ) to add them, which improves our curriculum over time and helps it to stay up to date Contributing\nIf you would like to contribute to this project, please contact us here",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5277,
      "relative_path": "git_repos\\odin-project\\archive\\README-old.md",
      "source_type": "git_repo"
    },
    "token_count": 396,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "2c826491b8185150c0adc69aed6b2292",
    "source_file": "corpus\\git_repos\\odin-project\\archive\\README.md",
    "source_type": "git_repo",
    "title": "Odin's Recycle Bin",
    "content": "Odin's Recycle Bin\nFiles end up here for one or more of the following reasons:\nLesson/documentation file was unused\nSignificant part of the lesson/documentation file was rewritten\nLesson was replaced by another lesson\nLesson was deemed outdated and consequently removed from the curriculum\nand more...",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 325,
      "relative_path": "git_repos\\odin-project\\archive\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 58,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "35f9d01cbcb7213831c344f44f9a6a0d",
    "source_file": "corpus\\git_repos\\odin-project\\archive\\DOM-manipulation.md",
    "source_type": "git_repo",
    "title": "THE TITLE OF YOUR WEBPAGE",
    "content": "Introduction\nOne of the most unique and useful abilities of JavaScript is its ability to manipulate the DOM But what is the DOM, and how do we go about changing it Let's jump right in Learning Outcomes\nBy the end of this lesson, you should be able to do the following:\nExplain what the DOM is in relation to a webpage Explain the difference between a \"node\" and an \"element\" Explain how to target nodes with \"selectors\" Explain the basic methods for finding/adding/removing and altering DOM nodes Explain the difference between a \"nodelist\" and an \"array of nodes\" Explain what \"bubbling\" is and how it works DOM - Document Object Model\nThe DOM (or Document Object Model) is a tree-like representation of the contents of a webpage -  a tree of \"nodes\" with different relationships depending on how they're arranged in the HTML document ~~~html\n~~~\nIn the above example, the <div class=\"display\"></div> is a \"child\" of <div id=\"container\"></div> and a sibling to <div class=\"controls\"></div> Think of it like a family tree <div id=\"container\"></div>  is a parent, with its children on the next level, each on their own \"branch\" Targeting Nodes with Selectors\nWhen working with the DOM, you use \"selectors\" to target the nodes you want to work with You can use a combination of CSS-style selectors and relationship properties to target the nodes you want Let's start with CSS-style selectors In the above example, you could use the following selectors to refer to <div class=\"display\"></div>:\ndiv display display\n#container > display\ndiv#container > div display\nYou can also use relational selectors (i e firstElementChild or lastElementChild etc ) with special properties owned by the nodes ~~~JavaScript\nconst container = document querySelector('#container');\n// select the #container div (don't worry about the syntax, we'll get there)\nconsole dir(container firstElementChild);\n// select the first child of #container => display\nconst controls = document querySelector(' controls');\n// select the controls div\nconsole dir(controls previousElementSibling);\n// selects the prior sibling => display\n~~~\nSo you're identifying a certain node based on its relationships to the nodes around it",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 25249,
      "relative_path": "git_repos\\odin-project\\archive\\DOM-manipulation.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 0,
    "total_chunks": 11
  },
  {
    "id": "ac2cbda403cf372b7cf3e638e7873866",
    "source_file": "corpus\\git_repos\\odin-project\\archive\\DOM-manipulation.md",
    "source_type": "git_repo",
    "title": "THE TITLE OF YOUR WEBPAGE",
    "content": ") with special properties owned by the nodes ~~~JavaScript const container = document querySelector('#container'); // select the #container div (don't worry about the syntax, we'll get there) console dir(container firstElementChild); // select the first child of #container => display const controls = document querySelector(' controls'); // select the controls div console dir(controls previousElementSibling); // selects the prior sibling => display ~~~ So you're identifying a certain node based on its relationships to the nodes around itDOM methods\nWhen your HTML code is parsed by a web browser, it is converted to the DOM as was mentioned above One of the primary differences is that these nodes are objects that have many properties and methods attached to them These properties and methods are the primary tools we are going to use to manipulate our webpage with JavaScript We'll start with the query selectors - those that help you target nodes Query Selectors\nelement querySelector(selector) returns reference to the first match of selector\nelement querySelectorAll(selectors) returns a \"nodelist\" containing references to all of the matches of the selectors\n*There are several other, more specific queries, that offer potential (marginal) performance benefits, but we won't be going over them now It's important to note that when using querySelectorAll, the return value is not an array It looks like an array, and it somewhat acts like an array, but it's really a \"nodelist\" The big distinction is that several array methods are missing from nodelists One solution, if problems arise, is to convert the nodelist into an array You can do this with Array from() or the spread operator Element Creation\ndocument createElement(tagName, [options]) creates a new element of tag type tagName [options] in this case means you can add some optional parameters to the function Don't worry about these at this point ~~~JavaScript\nconst div = document createElement('div');\n~~~\nThis function does NOT put your new element into the DOM - it simply creates it in memory This is so that you can manipulate the element (by adding styles, classes, ids, text etc ) before placing it on the page You can place the element into the DOM with one of the following methods Append Elements\nparentNode appendChild(childNode) appends childNode as the last child of parentNode\nparentNode insertBefore(newNode, referenceNode) inserts newNode into parentNode before referenceNode\nRemove Elements\nparentNode",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 25249,
      "relative_path": "git_repos\\odin-project\\archive\\DOM-manipulation.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 11
  },
  {
    "id": "2ca492757ab11f17122cd1e3eee74d38",
    "source_file": "corpus\\git_repos\\odin-project\\archive\\DOM-manipulation.md",
    "source_type": "git_repo",
    "title": "THE TITLE OF YOUR WEBPAGE",
    "content": "NOT put your new element into the DOM - it simply creates it in memory This is so that you can manipulate the element (by adding styles, classes, ids, text etc ) before placing it on the page You can place the element into the DOM with one of the following methods Append Elements parentNode appendChild(childNode) appends childNode as the last child of parentNode parentNode insertBefore(newNode, referenceNode) inserts newNode into parentNode before referenceNode Remove Elements parentNoderemoveChild(child) removes child from parentNode on the DOM and returns reference to child\nAltering Elements\nWhen you have a reference to an element, you can use that reference to alter the element's own properties This allows you to do many useful alterations, like adding inline style information, adding/removing and altering attributes, changing classes, and more In this example, we first create an element reference to the variable 'div' Then we can apply changes to it ~~~JavaScript\nconst div = document createElement('div');\n// create a new div referenced in the variable 'div'\n~~~\nAdding inline style\n~~~JavaScript\ndiv style color = 'blue';\n// adds the indicated style rule\ndiv style cssText = 'color: blue; background: white';\n// adds several style rules\ndiv setAttribute('style', 'color: blue; background: white');\n// adds several style rules\n~~~\nSee DOM Enlightenment's section on CSS Style rules for more info on inline styles Note that if you're accessing a kebab-cased css rule from JS, you'll either need to use camelcase or you'll need to use bracket notation instead of dot notation ~~~JavaScript\ndiv style background-color // doesn't work - attempts to subtract color from div style background\ndiv style backgroundColor // accesses the divs background-color style\ndiv style['background-color'] // also works\ndiv style cssText = \"background-color: white\" // ok in a string\n~~~\nEditing Attributes\n~~~JavaScript\ndiv setAttribute('id', 'theDiv');\n// if id exists update it to 'theDiv' else create an id\n// with value \"theDiv\"\ndiv getAttribute('id');\n// returns value of specified attribute, in this case\n// \"theDiv\"\ndiv removeAttribute('id');\n// removes specified attribute\n~~~\nSee MDNs section on HTML Attributes for more info on available attributes Working with classes\n~~~JavaScript\ndiv classList",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 25249,
      "relative_path": "git_repos\\odin-project\\archive\\DOM-manipulation.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 2,
    "total_chunks": 11
  },
  {
    "id": "91903c1340823603f1829c796321abeb",
    "source_file": "corpus\\git_repos\\odin-project\\archive\\DOM-manipulation.md",
    "source_type": "git_repo",
    "title": "THE TITLE OF YOUR WEBPAGE",
    "content": "style['background-color'] // also works div style cssText = \"background-color: white\" // ok in a string ~~~ Editing Attributes ~~~JavaScript div setAttribute('id', 'theDiv'); // if id exists update it to 'theDiv' else create an id // with value \"theDiv\" div getAttribute('id'); // returns value of specified attribute, in this case // \"theDiv\" div removeAttribute('id'); // removes specified attribute ~~~ See MDNs section on HTML Attributes for more info on available attributes Working with classes ~~~JavaScript div classListadd('new');\n// adds class \"new\" to your new div\ndiv classList remove('new');\n// remove \"new\" class from div\ndiv classList toggle('active');\n// if div doesn't have class \"active\" then add it, or if\n// it does, then remove it\n~~~\nIt is often standard (and more clean) to toggle a CSS style rather than adding and removing inline CSS Adding text content\n~~~JavaScript\ndiv textContent = 'Hello World '\n// creates a text node containing \"Hello World \" and\n// inserts it in div\n~~~\nAdding HTML content\n~~~JavaScript\ndiv innerHTML = 'Hello World ';\n// renders the html inside div\n~~~\n*Note that textContent is preferable for adding text, and innerHTML should be used sparingly as it can create security risks if misused Check out this video if you want to see an example of how Let's take a minute to review what we've covered and give you a chance to practice this stuff before moving on Check out this example of creating and appending a DOM element to a webpage ~~~html\nTHE TITLE OF YOUR WEBPAGE\n~~~\n~~~javascript\n// your javascript file\nconst container = document querySelector('#container');\nconst content = document createElement('div');\ncontent classList add('content');\ncontent textContent = 'This is the glorious text-content ';\ncontainer appendChild(content);\n~~~\nIn the JavaScript file, first we get a reference to the container div that already exists in our HTML Then we create a new div and store it in the variable content We add a class and some text to the content div and finally append that div to container All in all it's a simple process After the JavaScript code is run, our DOM tree will look like this:\n~~~html\nTHE TITLE OF YOUR WEBPAGE\nThis is the glorious text-content",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 25249,
      "relative_path": "git_repos\\odin-project\\archive\\DOM-manipulation.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 3,
    "total_chunks": 11
  },
  {
    "id": "4b2f7cffac6b01720fa2f960669bc24b",
    "source_file": "corpus\\git_repos\\odin-project\\archive\\DOM-manipulation.md",
    "source_type": "git_repo",
    "title": "THE TITLE OF YOUR WEBPAGE",
    "content": "we get a reference to the container div that already exists in our HTML Then we create a new div and store it in the variable content We add a class and some text to the content div and finally append that div to container All in all it's a simple process After the JavaScript code is run, our DOM tree will look like this: ~~~html THE TITLE OF YOUR WEBPAGE This is the glorious text-content~~~\nKeep in mind that the JavaScript does not alter your HTML, but the DOM - your HTML file will look the same, but the JavaScript changes what the browser renders Important note:\nYour JavaScript, for the most part, is run whenever the JS file is run, or when the script tag is encountered in the HTML If you are including your JavaScript at the top of your file, many of these DOM manipulation methods will not work because the JS code is being run before the nodes are created in the DOM The simplest way to fix this is to include your JavaScript at the bottom of your HTML file so that it gets run after the DOM nodes are parsed and created Alternatively, you can link the JavaScript file in the <head> of your HTML document Use the <script> tag with the src attribute containing the path to the JS file, and include the defer keyword to load the file after the HTML is parsed, as such:\n~~~html\n~~~\nRead the second bullet point in this MDN article for more information, which also includes a link to additional script loading strategies Exercise\nCopy the example above into files on your own computer To make it work you'll need to supply the rest of the HTML skeleton and either link your javascript file, or put the javascript into a script tag on the page Make sure everything is working before moving on Add the following elements to the container using ONLY javascript and the DOM methods shown above a <p> with red text that says \"Hey I'm red \"\nan <h3> with blue text that says  \"I'm a blue h3 \"\na <div> with a black border and pink background color with the following elements inside of it:\nanother <h1> that says \"I'm in a div\"\na <p> that says \"ME TOO \"\nHint for this one: after creating the div with createElement, append the <h1> and <p> to it before adding it to the container",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 25249,
      "relative_path": "git_repos\\odin-project\\archive\\DOM-manipulation.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 4,
    "total_chunks": 11
  },
  {
    "id": "b8cc380710627244087e8fc8fbf634f9",
    "source_file": "corpus\\git_repos\\odin-project\\archive\\DOM-manipulation.md",
    "source_type": "git_repo",
    "title": "THE TITLE OF YOUR WEBPAGE",
    "content": "with red text that says \"Hey I'm red \" an <h3> with blue text that says \"I'm a blue h3 \" a <div> with a black border and pink background color with the following elements inside of it: another <h1> that says \"I'm in a div\" a <p> that says \"ME TOO \" Hint for this one: after creating the div with createElement, append the <h1> and <p> to it before adding it to the containerEvents\nNow that we have a handle on manipulating the DOM with JavaScript, the next step is learning how to make that happen dynamically, or on demand Events are how you make that magic happen on your pages Events are actions that occur on your webpage such as mouse-clicks or keypresses, and using JavaScript we can make our webpage listen and react to these events There are three primary ways to go about this: you can attach functions' attributes directly on your HTML elements, you can set the \"on_event_\" property on the DOM object in your JavaScript, or you can attach event listeners to the nodes in your JavaScript Event listeners are definitely the preferred method, but you will regularly see the others in use, so we're going to cover all three We're going to create 3 buttons that all alert \"Hello World\" when clicked Try them all out using your own HTML file, or using something like CodePen method 1\n~~~html\nClick Me\n~~~\nThis solution is less than ideal because we're cluttering our HTML with JavaScript Also, we can only have 1 \"onclick\" event per element method 2\n~~~HTML\nClick Me\n~~~\n~~~JavaScript\n// the JavaScript file\nconst btn = document querySelector('#btn');\nbtn onclick = () => alert(\"Hello World\");\n~~~\n(need to review arrow functions LINK)\nThis is a little better We've moved the JS out of the HTML and into a JS file, but we still have the problem that a DOM element can only have 1 \"onclick\" property method 3\n~~~html\nClick Me Too\n~~~\n~~~JavaScript\n// the JavaScript file\nconst btn = document querySelector('#btn');\nbtn addEventListener('click', () => {\nalert(\"Hello World\");\n});\n~~~\nNow, we maintain separation of concerns, and we also allow multiple event listeners if the need arises",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 25249,
      "relative_path": "git_repos\\odin-project\\archive\\DOM-manipulation.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 5,
    "total_chunks": 11
  },
  {
    "id": "00945d28a621db5a1c420aaf18edd86d",
    "source_file": "corpus\\git_repos\\odin-project\\archive\\DOM-manipulation.md",
    "source_type": "git_repo",
    "title": "THE TITLE OF YOUR WEBPAGE",
    "content": "is a little better We've moved the JS out of the HTML and into a JS file, but we still have the problem that a DOM element can only have 1 \"onclick\" property method 3 ~~~html Click Me Too ~~~ ~~~JavaScript // the JavaScript file const btn = document querySelector('#btn'); btn addEventListener('click', () => { alert(\"Hello World\"); }); ~~~ Now, we maintain separation of concerns, and we also allow multiple event listeners if the need arisesMethod 3 is much more flexible and powerful, though it is a bit more complex to set up Note that all 3 of these methods can be used with named functions like so:\n~~~html\nCLICK ME BABY\n~~~\n~~~javascript\nfunction alertFunction() {\nalert(\"YAY YOU DID IT \");\n}\n// METHOD 2\nbtn onclick = alertFunction;\n// METHOD 3\nbtn addEventListener('click', alertFunction);\n~~~\nUsing named functions can clean up your code considerably, and is a really good idea if the function is something that you are going to want to do in multiple places With all three methods we can access more information about the event by passing a parameter to the function that we are calling Try this out on your own machine:\n~~~javascript\nbtn addEventListener('click', function (e) {\nconsole log(e);\n});\n~~~\n*Note that function (e) is a callback from addEventListener Further explanation of callbacks can be found HERE The e in that function is an object that references the event itself Within that object you have access to many useful properties and functions such as which mouse button or key was pressed, or information about the event's target - the DOM node that was clicked Try this:\n~~~javascript\nbtn addEventListener('click', function (e) {\nconsole log(e target);\n});\n~~~\nand now this:\n~~~javascript\nbtn addEventListener('click', function (e) {\ne target style background = 'blue';\n});\n~~~\npretty cool eh Attaching listeners to groups of nodes\nThis might seem like a lot of code if you're attaching lots of similar event listeners to many elements There's a few ways to go about doing that more efficiently We learned above that we can get a nodelist of all of the items matching a specific selector with querySelectorAll('selector')",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 25249,
      "relative_path": "git_repos\\odin-project\\archive\\DOM-manipulation.md",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 6,
    "total_chunks": 11
  },
  {
    "id": "8a25d63a0f82fbb3ec57c10fa583d669",
    "source_file": "corpus\\git_repos\\odin-project\\archive\\DOM-manipulation.md",
    "source_type": "git_repo",
    "title": "THE TITLE OF YOUR WEBPAGE",
    "content": "and now this: ~~~javascript btn addEventListener('click', function (e) { e target style background = 'blue'; }); ~~~ pretty cool eh Attaching listeners to groups of nodes This might seem like a lot of code if you're attaching lots of similar event listeners to many elements There's a few ways to go about doing that more efficiently We learned above that we can get a nodelist of all of the items matching a specific selector with querySelectorAll('selector')In order to add a listener to each of them we simply need to iterate through the whole list like so:\n~~~HTML\nClick Me\nClick Me\nClick Me\n~~~\n~~~JavaScript\n// buttons is a node list It looks and acts much like an array const buttons = document querySelectorAll('button');\n// we use the forEach method to iterate through each button\nbuttons forEach((button) => {\n// and for each one we add a 'click' listener\nbutton addEventListener('click', () => {\nalert(button id);\n});\n});\n~~~\nThis is just the tip of the iceberg when it comes to DOM manipulation and event handling, but it's enough to get you started with some exercises In our examples so far we have been using the 'click' event exclusively, but there are many more available to you Some useful events include:\nclick\ndblclick\nkeypress\nkeydown\nkeyup\nYou can find a more complete list with explanations of each event on this page Practice\nManipulating web pages is the primary benefit of the JavaScript language These techniques are things that you are likely to be messing with every day as a front-end developer, so let's practice Do the first exercise in Wes Bos's JavaScript30 program by cloning the repo at https://github com/wesbos/JavaScript30 Check out the Video Tutorial for instructions on the project Go back to your \"Rock Paper Scissors\" game from a previous lesson and give it a simple UI Before we proceed, we need to get familiar with a very popular Git workflow Read this article for everything that you need to know for now a The above article shows us how to use a \"fork and branch\" workflow to contribute to another user's repo But since we'll be adding a new feature to our own repo, we don't need to make a fork or add a remote since we already have it set up We can start with the 'Making a branch' step b",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 25249,
      "relative_path": "git_repos\\odin-project\\archive\\DOM-manipulation.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 7,
    "total_chunks": 11
  },
  {
    "id": "6637b8e076e450281051353c7354be2c",
    "source_file": "corpus\\git_repos\\odin-project\\archive\\DOM-manipulation.md",
    "source_type": "git_repo",
    "title": "THE TITLE OF YOUR WEBPAGE",
    "content": "very popular Git workflow Read this article for everything that you need to know for now a The above article shows us how to use a \"fork and branch\" workflow to contribute to another user's repo But since we'll be adding a new feature to our own repo, we don't need to make a fork or add a remote since we already have it set up We can start with the 'Making a branch' step bSince we'll be making a UI for our Rock Paper Scissors game, make a new branch and switch to it with the command git checkout -b rps-ui\nc You are now working in the rps-ui branch, locally However, this branch does not exist in your remote repo yet If you go to your github repo page, you'll see that you only have 1 branch, which would be main Let's push this new branch to your remote repo with the command git push origin rps-ui Now, you'll see two branches in your Github repository d You can now make changes in this branch without worrying about your old code It will be safe and untouched in the main branch You can think of the main branch as the 'production' branch, which will be the most tested, stable version of our code, and our rps-ui branch as a 'development' branch where you're experimenting or trying to implement a new feature without messing up our stable production code You can see how this process is very convenient for working on a new feature without fear e Make sure you are on the rps-ui branch You can check this, with the git branch command The branch you are currently on will have an (*)asterisk next to it If you're in another branch for some reason, switch to rps-ui with the command git checkout rps-ui Now you're all set to work on your new feature Note: You can add files, commit to this branch, and push changes to your repo, just like you would with the main branch Everything is the same except when you push the changes, you'd use git push origin rps-ui instead of git push origin main, since we're pushing to our new branch In our UI, the player should be able to play the game by clicking on buttons rather than typing their answer in a prompt a For now, remove the logic that plays exactly five rounds b Create three buttons, one for each selection Add an event listener to the buttons that calls your playRound function with the correct playerSelection every time a button is clicked",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 25249,
      "relative_path": "git_repos\\odin-project\\archive\\DOM-manipulation.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 8,
    "total_chunks": 11
  },
  {
    "id": "b465498c9b70f974f7d1c405ad670bd8",
    "source_file": "corpus\\git_repos\\odin-project\\archive\\DOM-manipulation.md",
    "source_type": "git_repo",
    "title": "THE TITLE OF YOUR WEBPAGE",
    "content": "git push origin main, since we're pushing to our new branch In our UI, the player should be able to play the game by clicking on buttons rather than typing their answer in a prompt a For now, remove the logic that plays exactly five rounds b Create three buttons, one for each selection Add an event listener to the buttons that calls your playRound function with the correct playerSelection every time a button is clicked(you can keep the console logs for this step)\nc Add a div for displaying results and change all of your console logs into DOM methods d Display the running score, and announce a winner of the game once one player reaches 5 points e You will likely have to refactor (rework/rewrite) your original code to make it work for this That's OK Reworking old code is an important part of the programmer's life f Once you're all done with your UI and make sure everything's satisfactory, it's time to merge our current branch rps-ui to our main branch Now let's take a look at how we can merge these changes back to our main branch a Watch this short video to get an idea of what we'll be doing You don't need to worry about merge conflicts for now, as this will be very unlikely when you're working on your own and not collaborating with a team of developers b As mentioned in the video, let switch to the branch we want to merge INTO i e main with the command git checkout main\nc Now let's merge our rps-ui branch into main, our current branch with git merge rps-ui d If everything goes fine, our rps-ui branch is now successfully merged with main Use git log and you'll see all the commits you've made to your feature branch on top of the commits you made to the main branch Now for our final step e Let's push our main branch into our remote repo by running git push origin main Go to your Github repo and you'll see that our main branch will have all the changes and commits you made to the rps-ui branch Congratulations You've successfully pushed your first feature into your production branch f Now that we have all our code in the main branch, we don't really need our rps-ui branch anymore Let's do some cleanup, both locally and in the remote repo Delete the branch from our local repo with git branch -d rps-ui and also delete it from the remote repo on Github with git push --delete origin rps-ui",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 25249,
      "relative_path": "git_repos\\odin-project\\archive\\DOM-manipulation.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 9,
    "total_chunks": 11
  },
  {
    "id": "84182899faaceddf4ddf98bd5bf26d57",
    "source_file": "corpus\\git_repos\\odin-project\\archive\\DOM-manipulation.md",
    "source_type": "git_repo",
    "title": "THE TITLE OF YOUR WEBPAGE",
    "content": "you made to the rps-ui branch Congratulations You've successfully pushed your first feature into your production branch f Now that we have all our code in the main branch, we don't really need our rps-ui branch anymore Let's do some cleanup, both locally and in the remote repo Delete the branch from our local repo with git branch -d rps-ui and also delete it from the remote repo on Github with git push --delete origin rps-uiCongrats, we're all done with our cleanup Watch the Event Capture, Propagation and Bubbling video from Wes Bos's JavaScript30 program If you want to code along with the video, you can use the contents of folder #25 from the repo you cloned above Additional Resources\nThis section contains helpful links to other content It isn't required, so consider it supplemental Eloquent JS - DOM\nEloquent JS - Handling Events\nDOM Enlightenment\nJavaScript30\nPlain JavaScript is a reference of JavaScript code snippets and explanations involving the DOM, as well as other aspects of JS If you've already learned jQuery, it will help you figure out how to do things without it This W3Schools article offers simple and easy-to-understand lessons on DOM JS DOM Crash Course is an extensive and well explained 4 part video series on the DOM by Traversy Media Understanding The Dom is an aptly named article-based tutorial series by Digital Ocean Knowledge Check\nThis section contains questions for you to check your understanding of this lesson If you're having trouble answering the questions below on your own, review the material above to find the answer What is the DOM How do you target the nodes you want to work with How do you create an element in the DOM How do you add an element to the DOM How do you remove an element from the DOM How can you alter an element in the DOM When adding text to a DOM element, should you use textContent or innerHTML Why Where should you include your Javascript tag in your HTML file when working with DOM nodes How do \"events\" and \"listeners\" work What are three ways to use events in your code Why are event listeners the preferred way to handle events What are the benefits of using named functions in your listeners How do you attach listeners to groups of nodes What is the difference between the return values of querySelector and querySelectorAll What does a \"nodelist\" contain Explain the difference between \"capture\" and \"bubbling\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 25249,
      "relative_path": "git_repos\\odin-project\\archive\\DOM-manipulation.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 10,
    "total_chunks": 11
  },
  {
    "id": "581ab615f1519e7e018785d39d14b87a",
    "source_file": "corpus\\git_repos\\odin-project\\templates\\lesson-example.md",
    "source_type": "git_repo",
    "title": "lesson-example",
    "content": "Introduction\nThis example takes snippets from the Box Model lesson in Foundations (with some tweaks), and is meant to show how an authored project might look after following the style guide Now that you understand the basic syntax of HTML and CSS, we’re going to get serious The most important skills you need to master with CSS are positioning and layout Changing fonts and colors is a crucial skill, but being able to put things exactly where you want them on a webpage is even more crucial After all, how many webpages can you find where absolutely every element is just stacked one on top of another Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson What the box model is Margins, padding, and borders The box model\nThe first important concept that you need to understand to be successful in CSS is the box model It isn’t complicated, but skipping over it now will cause you much frustration down the line #### Everything is a box\nEvery single thing on a webpage is a rectangular box These boxes can have other boxes in them and can sit alongside one another Another section\nThis section isn't in the original lesson, but we wanted to show what adding an additional custom section would look like Assignment\n1 Because the box model concept is so incredibly fundamental, check out this [MDN lesson on the box model](https://developer mozilla org/en-US/docs/Learn/CSS/Building_blocks/The_box_model) It covers the same material as the video above, but it goes a little further in depth Pay close attention to the examples and take the time to experiment with their in-browser editor - This isn't in the original lesson, but if we wanted users to only read certain sections, we would include them here For example, we could tell users to only read the below sections in the MDN page linked above - Parts of a box\n- The standard CSS box model\n- The alternative CSS box model\nKnowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge From inside to outside, what is the order of box-model properties Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental It looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2762,
      "relative_path": "git_repos\\odin-project\\templates\\lesson-example.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b4093cd4370515074155580da7e5660b",
    "source_file": "corpus\\git_repos\\odin-project\\templates\\lesson-template.md",
    "source_type": "git_repo",
    "title": "lesson-template",
    "content": "Introduction\nA BRIEF INTRODUCTION.\nLesson overview\nThis section contains a general overview of topics that you will learn in this lesson.\nA LESSON OVERVIEW ITEM.\nCUSTOM SECTION HEADING\nCUSTOM SECTION CONTENT.\nNote box variations\n#### A sample title\nA sample note box.\n#### level 4 heading for title is recommended\nA sample note box, variation: tip.\n#### But title is also optional\nA sample note box, variation: warning.\nA sample note box, variation: critical.\nAssignment\n1. A RESOURCE ITEM\n- AN INSTRUCTION ITEM\n1. A PRACTICE ITEM\n- A TASK ITEM\nKnowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson. If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge.\nA KNOWLEDGE CHECK QUESTION\nAdditional resources\nThis section contains helpful links to related content. It isn't required, so consider it supplemental.\nIt looks like this lesson doesn't have any additional resources yet. Help us expand this section by contributing to our curriculum.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1539,
      "relative_path": "git_repos\\odin-project\\templates\\lesson-template.md",
      "source_type": "git_repo"
    },
    "token_count": 232,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a53e732e3562a5379d4cb31a2a86cac3",
    "source_file": "corpus\\git_repos\\odin-project\\templates\\project-example.md",
    "source_type": "git_repo",
    "title": "project-example",
    "content": "Introduction\nThis example takes snippets from the Landing Page project in Foundations, and is meant to show how an authored project might look after following the style guide.\nFor this project you’ll be creating an entire web page from a design we’ll provide for you. If you’ve been following along you should have the skills you need to accomplish this, but it may not be easy!\nSetting up your project’s GitHub repository\nAs we did in the Recipe project, go ahead and set up a git repository before beginning work on this project. Git and GitHub are going to act as a portfolio for you moving forward, so you need to keep everything in there! Look back at the recipe project if you need a reminder on how to set it up.\nAssignment\n1. Download the design images and take a look at what you’re going to be creating here. Image One (Full Design), Image Two (Color and Fonts)\n- The font that’s being used in the images is roboto.\n- Hero text is the statement that appears at the top of a web page.\n1. There are many ways to tackle a project like this, and it can be overwhelming to look at a blank HTML document and not know where to start. Our suggestion: take it one section at a time. The website you’re creating has 4 main sections (and a footer), so pick one and get it into pretty good shape before moving on. Starting at the top is always a solid plan.\n#### Extra credit\n- This section isn't in the original Landing Page project, but we want to show what an extra credit item might look like.\n- Put your own spin on the project! Instead of copying the text from the design images 1:1, theme the project to your own interest or something you like.\nViewing your project on the web\nThere are a couple of ways to go about publishing your project, but the simplest is the following:\nMake sure that the main HTML file of your project is called index.html. If it is not, you need to rename it.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2034,
      "relative_path": "git_repos\\odin-project\\templates\\project-example.md",
      "source_type": "git_repo"
    },
    "token_count": 414,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "13cabd2c368542fac3db293a3190ca92",
    "source_file": "corpus\\git_repos\\odin-project\\templates\\project-template.md",
    "source_type": "git_repo",
    "title": "project-template",
    "content": "Introduction\nA BRIEF INTRODUCTION.\nPRE-ASSIGNMENT SECTION HEADING\nPRE-ASSIGNMENT SECTION CONTENT.\nAssignment\n1. A REQUIREMENT/USER STORY.\n#### Extra credit\n- AN OPTIONAL ADD-ON/USER STORY.\nPOST-ASSIGNMENT SECTION HEADING\nPOST-ASSIGNMENT SECTION CONTENT.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 360,
      "relative_path": "git_repos\\odin-project\\templates\\project-template.md",
      "source_type": "git_repo"
    },
    "token_count": 68,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4ea54446ca697d05b73093ea6ecacced",
    "source_file": "corpus\\git_repos\\odin-project\\shared\\the_back_end\\introduction_to_frameworks.md",
    "source_type": "git_repo",
    "title": "introduction_to_frameworks",
    "content": "Introduction\nProgrammers, the best of whom are pretty lazy folk (in a good way), got tired of having to write the same code over and over and over again just to cover the basic tasks that they wanted their applications to perform.  So they batched that recycled code together and called it a framework.\nIn addition to preventing repetition, frameworks provide great organization.  They tend to force you to organize your files and code in a way that keeps it highly modular and really clean.  When you start a new app with any framework, you're given dozens of folders already organized in a hierarchy which makes sense and follows good practice such as Model-View-Controller (MVC) separation principles.  It's not quite \"color-by-numbers\" for code, but it certainly keeps things ordered.\nThere are often several different popular frameworks for a given language.  They can have exciting names like Ember, Meteor, Django, Rails, etc.  Wikipedia has a comprehensive comparison of frameworks that should give you an appreciation of the number of them.  For Ruby alone, though Rails is the most popular, there are also Sinatra and Padrino and more.\nLesson overview\nThis section contains a general overview of topics that you will learn in this lesson.\nWhat is a framework?\nWhat's the difference between a programming language and a framework?\nAssignment\n1. Read through this brief [introduction to frameworks by Dev.to](https://dev.to/aspittel/what-is-a-web-framework-and-why-should-i-use-one-38c0).\n1. Glance over [MDN's overview on backend frameworks](https://developer.mozilla.org/en-US/docs/Learn/Server-side/First_steps/Web_frameworks) to understand some of the thought process that goes into picking a framework.\nKnowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson. If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge.\nWhat problems do frameworks solve?\nName some popular front-end and back-end frameworks.\nDescribe the process of choosing a framework.\nAdditional resources\nThis section contains helpful links to related content. It isn't required, so consider it supplemental.\nIt looks like this lesson doesn't have any additional resources yet. Help us expand this section by contributing to our curriculum.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3062,
      "relative_path": "git_repos\\odin-project\\shared\\the_back_end\\introduction_to_frameworks.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "05dbbb188643bfadb616abc812d267d4",
    "source_file": "corpus\\git_repos\\odin-project\\shared\\the_back_end\\introduction_to_the_backend_lesson.md",
    "source_type": "git_repo",
    "title": "introduction_to_the_backend_lesson",
    "content": "Introduction\nThe \"frontend\" denotes the interface that a web user interacts with - what they see (and hear) when using the web The three languages of the frontend are fairly standardized: HTML for markup, CSS for presentation, and JavaScript for scripting The \"backend\", meanwhile, denotes all that goes on \"behind the scenes\" on web servers to make the user experience possible In contrast to front-end development, you can run pretty much any language you want to on your server since it doesn't rely on your user's browser understanding what's going on All the browser cares about is whether you've sent it properly formatted HTML, CSS and JavaScript files (and other assets like images) That's led to a whole lot of different choices for back-end languages As long as it can take in an HTTP request and spit out some HTML, you can probably put it on a server somehow That said, some languages are more popular and practical than others If you're running your own server, you have a ton of flexibility but plenty of headaches If you're using the cloud (which we will be doing later), you may be restricted to those languages that your cloud provider has installed on their platform It doesn't do you much good if the servers you're \"borrowing\" from can't understand your code Some of the most popular server-side languages are PHP, C#, Ruby, Python and Java (not to be confused with JavaScript) Just as we can say \"Which way to the nearest pub \" in Swedish, French, Italian, English, and Bad English, so too can all of those languages perform almost exactly the same functions, just using different syntax Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson What is the difference between front-end and back-end development Assignment\n1 Check out this blog post on [backend vs frontend programming](http://blog teamtreehouse com/i-dont-speak-your-language-frontend-vs-backend) for a quick refresher on the difference between the two 1 [A good and short overview of the backend](https://techterms com/definition/backend) 1 Codecademy provides a good step-by-step breakdown of [what happens in the backend when a browser makes a request to a server](https://www codecademy com/articles/back-end-architecture) Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3312,
      "relative_path": "git_repos\\odin-project\\shared\\the_back_end\\introduction_to_the_backend_lesson.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "a91790c5ee111f51a0877be56db72ad3",
    "source_file": "corpus\\git_repos\\odin-project\\shared\\the_back_end\\introduction_to_the_backend_lesson.md",
    "source_type": "git_repo",
    "title": "introduction_to_the_backend_lesson",
    "content": "back-end development Assignment 1 Check out this blog post on [backend vs frontend programming](http://blog teamtreehouse com/i-dont-speak-your-language-frontend-vs-backend) for a quick refresher on the difference between the two 1 [A good and short overview of the backend](https://techterms com/definition/backend) 1 Codecademy provides a good step-by-step breakdown of [what happens in the backend when a browser makes a request to a server](https://www codecademy com/articles/back-end-architecture) Knowledge check The following questions are an opportunity to reflect on key topics in this lessonIf you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is back-end development How many parts does the backend consist of Name each part of the backend Where does the backend store its data Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental It looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3312,
      "relative_path": "git_repos\\odin-project\\shared\\the_back_end\\introduction_to_the_backend_lesson.md",
      "source_type": "git_repo"
    },
    "token_count": 226,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c5fe646d8ca50e01e991f71b772e13a0",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\active_record_basics.md",
    "source_type": "git_repo",
    "title": "active_record_basics",
    "content": "Introduction\nPresumably you're here to learn web development (otherwise you may be in the wrong place ) Whether your goal is to be able to produce your own website or to begin a career as a developer, the most important skillset to take away from all this is the ability to think logically and to break down a problem into its component pieces Then you can address those pieces one at a time It's the essence of engineering Probably the most important way that logical thinking is required when building a website is in setting up your data model properly Data is the foundation of almost all major web applications, from a basic blog site to Facebook's massively complex web of data Having an obscure or overly complex data model can cripple you when you try to grow and make your life as a developer exceedingly painful If you're working with the wrong tools, something simple like asking to display all the comments a user has made on another user's web posts can take up far too many brain and CPU cycles to accomplish If data is the most important piece of a web application, then how Rails handles data should be very interesting to you Luckily, this is one of the most significant reasons that Rails has performed so well compared with the options available just a few years ago Active Record is the interface that Rails gives you between the database and your application It lets you structure your data models for your users, blog posts, comments, followers, etc in a logical and nearly plain-English way If it seems complicated (which it will at points), just imagine life before Active Record Having a solid understanding of Active Record will make the rest of Rails seem simple by comparison Recall from several lessons ago that the Model in MVC is the part that does all the heavy lifting In this lesson, we'll cover all the basics of working with models As usual, this explanation is meant to be a high-level overview and the readings will provide real depth The more advanced topics will be covered in some of the coming lessons Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson What an ORM is How and why Active Record can be more useful than just using SQL The two steps required to make a new row in your database table with Active Record \"Generators\" in Rails What is an ORM What is Active Record anyway Recall that Rails is actually seven Ruby gems that work harmoniously together Active Record is, to put it inelegantly, the gem that takes care of all the database stuff It's known as an \"ORM\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7021,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\active_record_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "bd1c49011322832b1423668ee1950709",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\active_record_basics.md",
    "source_type": "git_repo",
    "title": "active_record_basics",
    "content": "is How and why Active Record can be more useful than just using SQL The two steps required to make a new row in your database table with Active Record \"Generators\" in Rails What is an ORM What is Active Record anyway Recall that Rails is actually seven Ruby gems that work harmoniously together Active Record is, to put it inelegantly, the gem that takes care of all the database stuff It's known as an \"ORM\"ORM stands for Object-Relational-Mapping It basically means that Active Record takes data which is stored in a database table using rows and columns, which needs to be modified or retrieved by writing SQL statements (if you're using a SQL database), and it lets you interact with that data as though it was a normal Ruby object So if you want to get an array containing a listing of all the users, instead of writing code to initiate a connection to the database, then doing some sort of SELECT * FROM users query, and converting those results into an array, you can just type User all and Active Record gives us that array filled with User objects that we can play with as we like Wow Even more impressive, it doesn't really matter which type of database you're using (as long as you've set up the config/database yml file properly), Active Record smooths out all the differences between those databases for you so you don't have to think about it You focus on writing code for your application, and Active Record will think about the nitty gritty details of connecting you to your database It also means that if you switch from one database to another, you don't actually need to change any major application code, just some configuration files Sounds logical, right Rails models\nThat's a step ahead of ourselves, though, because first it makes sense to think about what the relationship is between Rails and a database anyway It's actually pretty straightforward -- you want to store information about your users, so you create a database table called users You want to be able to access that data from your application, so you create a model called User, which is really just a Ruby file which inherits from Active Record and thus gets to use all the handy methods we were alluding to earlier like all and find and create One table corresponds with one model which inherits from Active Record 30 seconds about working with models\nVery briefly, Active Record lets you create a Ruby object that represents a row in one of your database tables, like a User",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7021,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\active_record_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "a55946d15197bd07860959421b6ffdbc",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\active_record_basics.md",
    "source_type": "git_repo",
    "title": "active_record_basics",
    "content": "a model called User, which is really just a Ruby file which inherits from Active Record and thus gets to use all the handy methods we were alluding to earlier like all and find and create One table corresponds with one model which inherits from Active Record 30 seconds about working with models Very briefly, Active Record lets you create a Ruby object that represents a row in one of your database tables, like a UserTo create a new User is a two-step process: First, you'll need to do a User new and might pass it a hash full of its attributes like\nbash\nu = User new(name: \"Sven\", email: \"sven@theodinproject com\")\nIf you don't pass a hash, you'll need to manually add the attributes by setting them like with any other Ruby object: u name = \"Sven\" The second step is to actually save that model instance into the database Until now, it's just been sitting in memory and evaporates if you don't do anything with it To save, call u save You can run both steps at once using the #create method:\nbash\nu = User create(name: \"Sven\", email: \"sven@theodinproject com\")\nThis saves you time, but, as you'll see later, you'll sometimes want to separate them in your application Assignment\nThat was really just a teaser about what Active Record can do In the reading below, you'll learn about how to specifically interact with Active Record in your models and go deeper into the other topics covered 1 Read the [Active Record Basics](http://guides rubyonrails org/active_record_basics html) section of the Rails Guides - We'll go more into Migrations and Validations in the next lessons and in the lesson on Callbacks later in the course - Model files in Rails live in the `app/models` folder and are just normal rb files The key points are that the file and the class name is named after the table in your database (but singular), and that class inherits from ApplicationRecord to get its super powers Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge Should Active Record model classes be singular or plural Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7021,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\active_record_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "7f78129fc915f72e9b8486dae4ffdae9",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\active_record_basics.md",
    "source_type": "git_repo",
    "title": "active_record_basics",
    "content": "from ApplicationRecord to get its super powers Knowledge check The following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge Should Active Record model classes be singular or plural Additional resources This section contains helpful links to related content It isn't required, so consider it supplementalSchneems on database backed models with Active Record",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7021,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\active_record_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 92,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "7b742fc7cf4697ac88f87556a9f5205d",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\basic_associations.md",
    "source_type": "git_repo",
    "title": "basic_associations",
    "content": "Introduction\nIn the databases sections, you learned about how a relational database like SQLite3 or PostgreSQL lets you link two tables together using their primary keys -- a table's key that references another table is called a foreign key It's the real power of relational databases that they let you leverage these, well, relationships Active Record takes that feature and lets you use it in all kinds of useful ways Do you want to get all of your first user's blog posts Try User first posts It's as simple as that That functionality doesn't come out of the box -- you need to tell Rails that posts actually belong to a user This is accomplished with associations Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson What associations are How to specify associations The importance of setting up your data model and how to do it One-to-many relationships Many-to-many relationships What are associations Associations are Rails' way of establishing relationships between tables Conceptually, it makes sense that e g a Post would belong to a User Declaring associations also helps streamline certain operations, such as adding or removing data For example, once an association has been declared, one can intuitively and explicitly add a new post with @post = @user posts create(title: \"New Post Title\", content: \"Content of the new post\") Or, if we’re interested in a user’s posts, we just have to query the posts table for all posts that link back to that user’s ID, with User find(user_id) posts Additionally, associations are Rails' way of abstracting away foreign key relationships On the database table level, every row in the posts table will have a column for user_id that tells you which user \"owns\" that post The users table doesn't need to acknowledge the posts at all after all, a single user can have an infinite number of posts How to specify an association\nOur posts-user example has an aptly named \"has many / belongs to\" association A User has_many Post objects associated with it, and a Post belongs_to a single User Rails makes these relationships very easy to specify You can establish the association between models by defining the association in your model files Here's what the associations will look like in your codebase:\nIn app/models/user rb:\nruby\nclass User < ApplicationRecord\nhas_many :posts\nend\nIn app/models/post",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8700,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\basic_associations.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "c996e4c7823f0f7b9c97cf6202a8f363",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\basic_associations.md",
    "source_type": "git_repo",
    "title": "basic_associations",
    "content": "an association Our posts-user example has an aptly named \"has many / belongs to\" association A User has_many Post objects associated with it, and a Post belongs_to a single User Rails makes these relationships very easy to specify You can establish the association between models by defining the association in your model files Here's what the associations will look like in your codebase: In app/models/user rb: ruby class User < ApplicationRecord has_many :posts end In app/models/postrb:\nruby\nclass Post < ApplicationRecord\nbelongs_to :user\nend\nSetting up your data model\nStep one with understanding this stuff is just to think about which different types of relationships are possible Remember, half the battle of setting up your application is understanding what your data relationships will look like, so give this some thought and keep at it when it gets confusing If your mind is a bit fried right now, start back in the real world and don’t think about it on a database level – remember, all this stuff is our attempt to reflect the kinds of relationships that can occur in the real world One-to-many relationships\nThe has_many / belongs_to, or a \"one-to-many\", relationship is pretty common, and usually easiest to think of in terms of actual objects a Child can have many Marble objects, each of which belongs to that Child But it also applies in slightly less intuitive cases, like where a single object belongs_to multiple other objects An example would be a FranchiseLocation for a McDonalds, which belongs_to the Corporation McDonalds but might also belongs_to the City San Francisco It’s clear that it should belong to its corporate parent, but why does it belong to a City too It’s often easier to think of it from the opposite perspective – a City can certainly have many FranchiseLocation objects As long as a FranchiseLocation can only be in a single city, it effectively “belongs_to” that city in the way that Rails describes it A key distinction here is that we're not talking about how many Post objects a User currently has or how many FranchiseLocation objects a City currently has, we're trying to model how many they COULD have over the entire lifetime of your application Sure, if your User only has one Post now, you could reference that post's ID in your user table Then when he has another Post, you'd have to create another table column to fit that ID And another And another Which doesn't make a lick of sense",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8700,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\basic_associations.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "f6b97cab23ad88d8fdc3c0dca0486f8d",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\basic_associations.md",
    "source_type": "git_repo",
    "title": "basic_associations",
    "content": "a User currently has or how many FranchiseLocation objects a City currently has, we're trying to model how many they COULD have over the entire lifetime of your application Sure, if your User only has one Post now, you could reference that post's ID in your user table Then when he has another Post, you'd have to create another table column to fit that ID And another And another Which doesn't make a lick of senseso that's why we say the User has_many :posts and let the Posts table reference in the User's ID, since a post will only ever have one User associated with it (assuming you only have one author) Many-to-many relationships\nAnother common relationship is the many-to-many relationship, which can also be called has_and_belongs_to_many in Rails terms This often comes up in actual relationships -- a Human can have many favorite Dog objects, and each Dog object can have many favorite Human objects In this case, how would you specify which Dog objects are your favorites It actually requires you to create another table (a join table, or \"through\" table) that specifically keeps track of all those relationships It's a bit wonky to understand when you're learning but it becomes second nature once you've been at it for a short while Conclusion\nPretty soon you'll start thinking of the world around you in terms of these relationships (if you don't take enough breaks) The real power of them comes when you actually need to use them -- when you want to retrieve data about all the objects that are associated with another Do you want to see a list of all your X (formerly known as Twitter) followers Do you want to count up all the classmates you had from high school who are living in the same city as you now Do you want to see all the comments one of your users left on another user's timelines All of these things are relatively simple and intuitive once you've actually set up the appropriate data relationships So focus on understanding these relationships Active Record is the most powerful part of Rails and also one of the trickiest to get the hang of You need to be able to translate the real world into database tables, which takes a bit of time to become familiar with The most difficult concepts for new beginners are usually associations, which you'll learn in upcoming lessons It's easiest to start thinking about concrete relationships in the real world and then turning them into Active Record associations",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8700,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\basic_associations.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "ab772229f3a3e4882845d42b2a7a9993",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\basic_associations.md",
    "source_type": "git_repo",
    "title": "basic_associations",
    "content": "the most powerful part of Rails and also one of the trickiest to get the hang of You need to be able to translate the real world into database tables, which takes a bit of time to become familiar with The most difficult concepts for new beginners are usually associations, which you'll learn in upcoming lessons It's easiest to start thinking about concrete relationships in the real world and then turning them into Active Record associationsOnce you're comfortable with which model has_many of which other model and who actually belongs_to the other, you can start modeling more abstract concepts like, say, event invitations and invitation acceptances, which aren't as straightforward as a Child and his marbles (the example we used above) It's all about practice, so the projects from here on out will ask you to think through your model organization before getting started Taking a few minutes to think through your relationships ahead of time is essential for getting started in the right direction when you begin writing code Assignment\nIf you're a normal human, you're probably somewhere between \"huh \" and \"I hate you, stop teaching me stuff\" Stick with it, the point here is to get you thinking of how to model relationships and give you exposure to them The project will give you an opportunity to actually build what you've been learning and it should be a lot better once you've had that chance 1 Read the beginning of the [Rails Guides Associations Chapter](http://guides rubyonrails org/association_basics html), just up until section 3 2 Everything after that we can save for later the important thing is that you've seen the relationships and how they're set up Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge If class A has a belongs_to association with class B, which class's database table should contain a foreign key Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental It looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8700,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\basic_associations.md",
      "source_type": "git_repo"
    },
    "token_count": 441,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "89dda65b1df14c2f1f5222115ae9bbea",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\basic_validations.md",
    "source_type": "git_repo",
    "title": "basic_validations",
    "content": "Introduction\nImagine you’ve got your database up and running and want to make sure that people are sending it good data in their requests For instance, to create an account on your site, a user needs to enter both a username and an email address How do you require that both values are entered, or that they each have the proper characters Such restrictions are achieved with validations Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson What validations are How to specify validations The three levels of validations What are validations Validations are restrictions applied at three levels to ensure that data meets certain criteria before it can be saved to the database The three levels are the client side, the server side -- that is, the Rails level, and the database Each level's validation is more strict and secure than the previous How to specify validations\nLet's suppose someone tries to make a new user They click a submit button on a form somewhere, the HTTP request gets sent, and the validation processes occur At the Rails level, a basic validation in the User model file can be written as follows In app/models/user rb:\nruby\nclass User < ApplicationRecord\nvalidates :name, presence: true\nend\nNote that the above is a simplified example for illustrative purposes, showing one single validation Real-world validation logic in a class is often more complex, and can consist of multiple validation checks Client-side validation\nAt the topmost level, you can write code using JavaScript in your browser that detects if someone has filled out the form properly and will prompt them to finish it before moving on We will learn more about that in the JavaScript course The advantage here is that it is almost immediate so it creates a great user experience The problem with this is that JavaScript is easy to circumvent and the user could easily submit a malicious or faulty request Additionally, as of HTML5, validations may also be performed in HTML forms using vanilla HTML As is the case with JavaScript-based form validation, HTML form validation is easily circumvented Server-side validation\nThe second layer of enforcement for your validations of user data (which you should never trust) is at the server level This means writing code in your Rails application (specifically in the model that you are trying to save an instance of, e g User) that examines user inputs, checks them versus the constraints you set up, and returns errors if there are any",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5412,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\basic_validations.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "a812e0cd35bc41a70d8b6d7cb16af5de",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\basic_validations.md",
    "source_type": "git_repo",
    "title": "basic_validations",
    "content": "with JavaScript-based form validation, HTML form validation is easily circumvented Server-side validation The second layer of enforcement for your validations of user data (which you should never trust) is at the server level This means writing code in your Rails application (specifically in the model that you are trying to save an instance of, e g User) that examines user inputs, checks them versus the constraints you set up, and returns errors if there are anyThis is more secure than client-side validation but has the disadvantage of taking a full round-trip HTTP request to your application in order to check it Model validations are generally pretty effective and that's what we'll focus on here Another problem occurs when your application has scaled up to the point where you are running multiple instances of it on multiple servers that all talk to the same central database Let's say you want to make sure a username is unique what happens if two users almost simultaneously submit the same username and it is received by two separate concurrent instances of your application When each instance of your application checks with the database to see if the username is unique, both times it looks okay so they both go ahead and save the model oops That may not sound plausible, but how about in rapidly occurring automated transactions These \"race conditions\" are very real Database-level validation\nSo the only way to truly enforce constraints is on the database level, since your single database is the sole arbiter of what is unique and valid in this world You can use extra parameters passed to some of the now-familiar migration methods like add_index to say add_index :users, :username, unique: true, which enforces in the most secure way that the column is unique Again, though, most of your validations can be implemented in your Rails application's models Assignment\n1 Read the [Rails Guides Validations chapter](http://guides rubyonrails org/active_record_validations html)\n- Section 2 on helpers can be skimmed -- these help you get more specific with your validations and you'll run into them later\n- You can skim section 7 about custom validators\n- Section 9 will likely only be interesting if you've seen ERB in Rails views before we'll get there Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What does the validation helper presence: true enforce",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5412,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\basic_validations.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "a831ae8ff85d16f7b8b4ab75d032bb16",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\basic_validations.md",
    "source_type": "git_repo",
    "title": "basic_validations",
    "content": "skim section 7 about custom validators - Section 9 will likely only be interesting if you've seen ERB in Rails views before we'll get there Knowledge check The following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What does the validation helper presence: true enforceHow can you see why an instance of a model class has failed validation Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental It looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5412,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\basic_validations.md",
      "source_type": "git_repo"
    },
    "token_count": 143,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "43541987a7e92d6ac161e8d03b02c0ba",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\migrations.md",
    "source_type": "git_repo",
    "title": "migrations",
    "content": "Introduction\nThe term \"migrations\" might incorrectly lead one to think that the topic of this lesson is data migrations, which refers to the movement of data from one location to another However, in the context of Rails and this lesson, a \"migration\" is a schema migration, which is the modification of a database's schema without moving it to a new location Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson What migrations are When migrations are needed The two main ways to create a migration How to write migrations How to run migrations Why migrations are useful What are migrations A Rails migration is a script that sets up or modifies a database's schema in a reversible and re-appliable way The schema, as you learned in the Databases course, is the structure of your database Creating and dropping tables, adding and removing columns, as well as certain other modifications, are changes to the schema, whereas adding and removing rows are not Multiple migration files can be run in sequence like a script Migrations use schema-altering SQL commands under the hood, similar to how the Model makes SQL queries for you When migrations are needed\nImagine you're staring at a blank computer screen and you need to start your new Rails project What's the first thing you do You type $ rails new MyProjectName then cd into that directory Then what First, figure out the data models that you'll need to use for the first iteration of your site and start getting them set up For our purposes, we'll just assume all you need is the ubiquitous User model to keep track of all the dozens of users who will be on your site someday (just kidding, you'll hit it big) After you've actually created the database in the first place (using $ rails db:create), to create that model you'll need to do two steps:\nCreate a model file in app/models which is set up like you just learned above Create a database table called \"users\" that has the appropriate columns This is done using a migration file and then running the migration Summary\nMigrations are needed during the early developmental step of setting up the project's data models, because part of that process involves creating database tables -- a schema alteration A migration file is therefore required, since in Rails, modifying the schema means creating and then running a migration file How to create a migration file\nThere are two main ways to create a migration file The first is to use the model generator $ rails generate model YourModelNameHere",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9699,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\migrations.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "aedb3ce11774487f863f623370744e83",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\migrations.md",
    "source_type": "git_repo",
    "title": "migrations",
    "content": "are needed during the early developmental step of setting up the project's data models, because part of that process involves creating database tables -- a schema alteration A migration file is therefore required, since in Rails, modifying the schema means creating and then running a migration file How to create a migration file There are two main ways to create a migration file The first is to use the model generator $ rails generate model YourModelNameHereThe second is to use the migration generator $ rails generate migration NameYourMigration Using the model generator\nMigration files can be created by running generators, such as the handy shortcut $ rails generate model YourModelNameHere, which not only creates a model file, but a migration file as well When you type it in, you will see in the Terminal output which files are being created Don't worry about any specs or test files that also get created, the important ones are the model file and the migration file Rails has lots of these handy generators which don't do much except create new files in the right spots of your application for you The output looks something like:\nbash\ninvoke  active_record\ncreate    db/migrate/20131223154310_create_testmodels rb\ncreate    app/models/testmodel rb\ninvoke    rspec\ncreate      spec/models/testmodel_spec rb\nThe model file that the generator creates is just a bare-bones model file in the app/models directory (which you could easily have created yourself) The other main file is the migration file in the db/migrate folder, which starts with a complicated looking timestamp like 20130924230504_create_users rb The number is the time that the migration was created so that Rails can keep track of different migration files If you dive into that file, you'll see that there's not much in it except another bare-bones Ruby class that inherits from ActiveRecord::Migration and some timestamps The timestamps just create created_at and updated_at columns for you so you can track when your database records were created or modified These two columns are just helpful enough that they are included as standard practice Using the migration generator\nIf you want to only create the database migration file (without the Model or any of the test files), just use $ rails generate migration NameYourMigration You'll end up using this one more once you've got things up and running since you'll probably be modifying your data table instead of creating a new one",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9699,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\migrations.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "51226255f7976592d92a8c75147747f9",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\migrations.md",
    "source_type": "git_repo",
    "title": "migrations",
    "content": "were created or modified These two columns are just helpful enough that they are included as standard practice Using the migration generator If you want to only create the database migration file (without the Model or any of the test files), just use $ rails generate migration NameYourMigration You'll end up using this one more once you've got things up and running since you'll probably be modifying your data table instead of creating a new oneThere's a syntax for specifying additional parameters when you call this (which you'll see in the reading), but there's no need to remember that syntax because you can also manually go in and edit the migration file yourself How to write migrations\nTo add your instructions to the migration file's contents, just add the correct Ruby method to the migration file, like the aptly named create_table, and provide its necessary parameters Now that the migration file has been created and its contents have been written, the next step will be to run the migration How to run migrations\nTo complete the migration and actually apply the changes to the schema, use the $ rails db:migrate command, which runs any migrations that haven’t yet been run Rails knows if a migration has been run because each migration is a file whose filename has a timestamp in it When you run that command, Rails will execute the proper SQL code to set up your database table, and you can go back to actually building the website Why migrations are useful\nObviously, migrations let you set up your database using user-friendly Ruby code instead of SQL, but it's more than that Over time, you'll build up a bunch of these migration files If you decide that you want to blow away your database and start from scratch, you can do that easily and then rerun the migrations If you decide to deploy to the web, you will run those same migrations and the production database will be there waiting for you even if it's a different type of database Again, Active Record does the heavy lifting for you here so you can focus on building your website The most immediately useful feature of migrations is when you've screwed something up because they're (usually) reversible Let's say you just migrated to create a new database column but forgot a column to store the user's email oops You can just type $ rails db:rollback and the last series of migrations that you ran will be reversed and you're back to where you were Then you just edit the file, rerun the migrations, and move on with your life",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9699,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\migrations.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "ac276ff1be86e2013f65e140da32d416",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\migrations.md",
    "source_type": "git_repo",
    "title": "migrations",
    "content": "useful feature of migrations is when you've screwed something up because they're (usually) reversible Let's say you just migrated to create a new database column but forgot a column to store the user's email oops You can just type $ rails db:rollback and the last series of migrations that you ran will be reversed and you're back to where you were Then you just edit the file, rerun the migrations, and move on with your lifeThis introduces the last nuance of migrations that we'll talk about here -- reversibility For each method that you use in the migration, you want to specify how to reverse it if you have to The reverse of adding a table is dropping that table, of adding a column is removing the column and so on Many methods have a really obvious reverse case, so you don't need to explicitly state it and can set up the whole migration file using the change method But some of them do not, so you will need to separately specify up and down methods You'll read more about that in the assignment A final note, you never want to rollback migrations unless you've screwed something up In situations where you have a legitimate case for removing a column (because you no longer need it for any purpose), you actually create a new migration that removes that column using the remove_column method It preserves the database Once you get advanced with this stuff, you can build a database just using the schema file You're not there yet :)\nHow much database stuff do we need to know Migrations don't involve writing SQL, but you do need to understand enough about databases to know how you want yours structured Which columns do you want Which ones should be indexed (and why) Should you set a default value What data type will be stored in your column a string or text These are great questions, and you should feel comfortable asking them even if you aren't totally sure about the answers If you have no idea what we're talking about, you'll need to go back and read up on basic databases in the Databases course Assignment\n1 Read the [Migrations chapter of Rails Guides](http://guides rubyonrails org/active_record_migrations html) - Don't worry about 3 6-3 8 - Just skim section 7 - Seeds (section 8) are useful and you'll be using them later It saves you a lot of work, especially when you're learning and will end up blowing away your database and starting over a lot",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9699,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\migrations.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "1b231d7f94744a314e3c49c008448603",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\migrations.md",
    "source_type": "git_repo",
    "title": "migrations",
    "content": "about, you'll need to go back and read up on basic databases in the Databases course Assignment 1 Read the [Migrations chapter of Rails Guides](http://guides rubyonrails org/active_record_migrations html) - Don't worry about 3 6-3 8 - Just skim section 7 - Seeds (section 8) are useful and you'll be using them later It saves you a lot of work, especially when you're learning and will end up blowing away your database and starting over a lotKnowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge Which rails command will undo a database migration Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental It looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9699,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\migrations.md",
      "source_type": "git_repo"
    },
    "token_count": 206,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "e0fd0422340aadc9c28df8d2e039cf85",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\project_micro_reddit.md",
    "source_type": "git_repo",
    "title": "project_micro_reddit",
    "content": "Introduction\nIn this project, you'll get to spend some quality time with models We will be doing some data modeling and putting your active record knowledge to practice by building your own light weight Reddit clone Warmup: Thinking data first\nThe first step to building a good data model is usually not on the computer You'll want to take a minute and think through what you're going to need You may not really know everything when you first start, but mapping out an approach path is crucial to avoiding costly mistakes later In this warmup, you'll be given a variety of scenarios and you'll be asked to map out what the data models will look like for each one You can do it with a pen and paper or, if you're lucky enough to be around one, a whiteboard There are a few specific accepted techniques for how to map out models and associations but just do whatever comes naturally to you One way to do it is with a list of models and another is to create a visual diagram where each model is represented by a box and you connect them with appropriate arrows For each scenario, you'll be asked to write down the data, associations, and validations necessary to build it That means which models (data tables) will be necessary to store the data (and which columns you will need), which fields of those tables will be subject to validation (e g minimum password length or username uniqueness) Don't worry if you're not quite sure how to implement a given thing, the point here is to start thinking about how the data would be structured Example: You are building a blog for your startup which will have multiple authors and each author can write multiple posts This might look like:\nNote: We'll include the :id, :created_at and :updated_at columns but you can safely assume they're always there since Rails or the database gives them to you automatically\nAuthors\nusername:string [unique, 4-12 chars, present]\nemail:string [unique, present]\npassword:string [6-16 chars, present]\nid:integer\ncreated_at:datetime\nupdated_at:datetime\nhas_many posts\nPosts\ntitle:string [unique, present]\nbody:text [present]\nauthor_id:integer [present]\nid:integer\ncreated_at:datetime\nupdated_at:datetime\nbelongs_to author\nUse whatever format feels best to you Data model task\nFor each of the following scenarios, write down the models, columns, validations and associations you might use to implement it",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12667,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\project_micro_reddit.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "9863898d31801a9c0cee881bfd3541cd",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\project_micro_reddit.md",
    "source_type": "git_repo",
    "title": "project_micro_reddit",
    "content": "safely assume they're always there since Rails or the database gives them to you automatically Authors username:string [unique, 4-12 chars, present] email:string [unique, present] password:string [6-16 chars, present] id:integer created_at:datetime updated_at:datetime has_many posts Posts title:string [unique, present] body:text [present] author_id:integer [present] id:integer created_at:datetime updated_at:datetime belongs_to author Use whatever format feels best to you Data model task For each of the following scenarios, write down the models, columns, validations and associations you might use to implement itSome of these are more difficult than others and you'll have to use a bit of creativity to infer which columns might need to be present for the scenario to make sense in the real world The trick is identifying what should be a different model and how these models will relate to each other via associations (all the ones below are has_many, has_one and/or belongs_to relationship) If you can't quite figure out how it might look, keep the scenario in mind as you go through the next few lessons Remember, if you feel like you will be hard coding data multiple times, it's probably a sign that you should create a separate table A common example is address information -- you could write down the city and state explicitly for each user How about making separate City and State models and relating them to each other 1 You are building an online learning platform (much like this ) You've got many different courses, each with a title and description, and each course has multiple lessons Lesson content consists of a title and body text 2 You are building the profile tab for a new user on your site You are already storing your user's username and email, but now you want to collect demographic information like city, state, country, age and gender Think -- how many profiles should a user have How would you relate this to the User model 3 You want to build a virtual pinboard, so you'll have users on your platform who can create \"pins\" Each pin will contain the URL to an image on the web Users can comment on pins (but can't comment on comments) 4 You want to build a message board like [Hacker News](http://news ycombinator com) Users can post links Other users can comment on these submissions or comment on the comments How would you make sure a comment knows where in the hierarchy it lives",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12667,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\project_micro_reddit.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "0c819e7b599d5b1ddd4a4f5c0a8cc029",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\project_micro_reddit.md",
    "source_type": "git_repo",
    "title": "project_micro_reddit",
    "content": "so you'll have users on your platform who can create \"pins\" Each pin will contain the URL to an image on the web Users can comment on pins (but can't comment on comments) 4 You want to build a message board like [Hacker News](http://news ycombinator com) Users can post links Other users can comment on these submissions or comment on the comments How would you make sure a comment knows where in the hierarchy it livesProject: Micro-Reddit\nLet's build Reddit Well, maybe a very junior version of it called micro-reddit In this project, you'll build the data structures necessary to support link submissions and commenting We won't build a front end for it because we don't need to you can use the Rails console to play around with models without the overhead of making HTTP requests and involving controllers or views Speaking of the console, here are a few convenient shortcut commands you can use:\nrails c (for rails console)\nrails s (for rails server)\nrails g (for rails generate )\nFeel free to use whatever you feel more comfortable with We'll still refer to the full commands in the following lessons for clarity Your task\n#### Get started\n1 Just like in the warmup, plan out what data models you would need to allow users to be on the site (don't worry about login/logout or securing the passwords right now), to submit links (\"posts\"), and to comment on links Users do NOT need to be able to comment on comments each comment refers to a Post 2 Generate a new rails app from the command line (`$ rails new micro-reddit`) and open it up We'll use the default SQLite3 database so you shouldn't have to change anything on that front 3 Generate your User model and fill out the migration to get the columns you want 4 Run the migration with `$ rails db:migrate` You can use `$ rails db:rollback` if you realize you forgot anything or just create a new migration for the correction (which might involve the `#add_column` `#remove_column` or `#change_column` commands) See the [Rails API Documentation](http://api rubyonrails org/classes/ActiveRecord/Migration html) for details on syntax and available methods #### Playing with validations\n1 In a new tab, open up the `$ rails console` (you may use `rails c` for short) Try asking for all the users with `> User all` You should get back an empty array (no users yet",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12667,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\project_micro_reddit.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "1290ac0814d9a734d935147114af7a85",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\project_micro_reddit.md",
    "source_type": "git_repo",
    "title": "project_micro_reddit",
    "content": "anything or just create a new migration for the correction (which might involve the `#add_column` `#remove_column` or `#change_column` commands) See the [Rails API Documentation](http://api rubyonrails org/classes/ActiveRecord/Migration html) for details on syntax and available methods #### Playing with validations 1 In a new tab, open up the `$ rails console` (you may use `rails c` for short) Try asking for all the users with `> User all` You should get back an empty array (no users yet) Now create a blank new user and store it to a variable with `> u = User new` This user has been created in the ether of Ruby's memory but hasn't been saved to the database yet Remember, if you'd used the `#create` method instead of the `#new` method, it would have just gone ahead and tried to save the new user right off the bat Instead, we now get to play with it 2 Check whether your new user is actually valid (e g will it save if we tried ) `> u valid ` will run all the validations It comes up `true` surprise We haven't written any validations so that's to be expected It's also a problem because we don't want to have users running around with blank usernames 3 Implement the user validations you thought of in the first step in your `app/models/user rb` file These might involve constraints on the size of the username and that it must be present (otherwise you'll potentially have users with no usernames ) and that it must be unique 4 Reload your console using `> reload ` You'll need to do this every time you make changes to your app so the console can reload the current version If it still seems broken, just `> quit` out of it and relaunch (sometimes `#reload ` doesn't seem to do the trick) Build another new user but don't save it yet by using `> u2 = User new` Run `> u2 valid ` again to run the validations and it should come up false Good 5 How do we find out what went wrong Rails is helpful because it actually attaches error messages directly onto your user object when you fail validations so you can read into them with the `#errors` method Try out `> u2 errors` to see the errors or, better, `> u2 errors full_messages` to return a nice friendly array of messages",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12667,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\project_micro_reddit.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "04096c3c38071bd090de85ebe050d810",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\project_micro_reddit.md",
    "source_type": "git_repo",
    "title": "project_micro_reddit",
    "content": "`> u2 valid ` again to run the validations and it should come up false Good 5 How do we find out what went wrong Rails is helpful because it actually attaches error messages directly onto your user object when you fail validations so you can read into them with the `#errors` method Try out `> u2 errors` to see the errors or, better, `> u2 errors full_messages` to return a nice friendly array of messagesIf you wrote custom messages into your validations, they will show up here as well 6 Create a user who will actually save with `> u3 = User new(your_attributes_here)` and run the validations They should come up true Save your user with the `#save` method so you've got your first user in the database #### Playing with associations\n1 Create your Post model by referencing your data plan from the first step above, migrate the database, and add its validations 2 Test your validations from the console, remembering to reload or relaunch it between changes 3 Now set up your associations between User and Post models Did you remember to include the foreign key column (`user_id`) in your posts table If not, you can just add a new migration (`$ rails generate migration yourmigrationname`) and use the `#add_column` method mentioned above 4 If you've properly set up your associations, you should be able to use a few more methods in the console, including finding a User's Posts and finding the Post's User First test finding your lone User's Posts -- `> User first posts` It should be an empty array since you haven't created posts, but it shouldn't throw an error at you 5 Build (but don't yet save) a new post from the console, called `p1`, something like `> p1 = Post new(your_attributes_here)` Don't forget to include the ID of the user in your `user_id` field 6 Now build another post using the association to the user -- substitute `#new` with `#build` and run through the association instead -- `p2 = User first posts build` Don't fill in any fields yet Examine the object that was created and you'll see that the ID field already got filled out for you, cool This is a neat trick you'll learn about in the lesson on associations 7 Save your original new post `p1` so your user has officially written something",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12667,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\project_micro_reddit.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "f4f3e55ee30988124ba5794d67656d66",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\project_micro_reddit.md",
    "source_type": "git_repo",
    "title": "project_micro_reddit",
    "content": "the association to the user -- substitute `#new` with `#build` and run through the association instead -- `p2 = User first posts build` Don't fill in any fields yet Examine the object that was created and you'll see that the ID field already got filled out for you, cool This is a neat trick you'll learn about in the lesson on associations 7 Save your original new post `p1` so your user has officially written somethingTest that you can use the other side of the association by trying `> Post first user`, which should return the original User object whose ID you pointed to when building the post All has come full circle #### Add in commenting\n1 You've now got a User and a Post and they've been linked Commenting will look quite similar to your Post model but will be related not just to the post who is its \"parent\" but also to the user who has authored it Set up the migration and migrate the database for your Comment model 2 As before, add validations into your model and test them out in the console (refresh it ) Make sure you've required the two foreign keys (for posts and users) to be submitted, otherwise you could potentially have an orphan comment You should not be able to save an invalid Comment and be able to save a valid Comment 3 Build a second user and create a new comment which represents this user commenting on the first user's post 4 As before, add the associations you need between users, posts, and comments You'll need to be able to do the following methods successfully from the console (assuming your second user has an ID of 2):\n1 `> u2 = User find(2)`\n2 `> c1 = u2 comments first` should return that user's comment `#comments` returns an array with comments, which is why we need to use `#first` to actually retrieve the comment itself 3 `> c1 user` should return that comment's author User (`u2`) 4 `> p1 = Post first`\n5 `> p1 comments first` should return the comment `c1` 6 `> c1 post` should return the post `p1` If any of those don't work, double check your associations Sometimes the error messages can be helpful in prompting you for how to set up those associations Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12667,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\project_micro_reddit.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "525a74c7fdb447c08f5559a09893803c",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\project_micro_reddit.md",
    "source_type": "git_repo",
    "title": "project_micro_reddit",
    "content": "should return that comment's author User (`u2`) 4 `> p1 = Post first` 5 `> p1 comments first` should return the comment `c1` 6 `> c1 post` should return the post `p1` If any of those don't work, double check your associations Sometimes the error messages can be helpful in prompting you for how to set up those associations Additional resources This section contains helpful links to related content It isn't required, so consider it supplementalThe Rails API has good documentation for these things, in addition to the Edge Guides you've already read Often it can be easier to search Google for the proper API page than navigating the site, e g \"rails api has_many\" JumpstartLab page on Model Relationships has some good unique information on how to approach optimizing common associations",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12667,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\active_record_basics\\project_micro_reddit.md",
      "source_type": "git_repo"
    },
    "token_count": 167,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "0979df6b495b0096e17c113a6db700b7",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_callbacks.md",
    "source_type": "git_repo",
    "title": "active_record_callbacks",
    "content": "Introduction\nCallbacks are a common way for you to execute code at specific times in the life cycle of an Active Record object, for instance just before it is created, after it is saved, or after it is destroyed These can be very useful if you've got something to execute whenever an object hits one of those lifecycle points, like modifying the user's email to be lowercase when creating her account Callbacks are a way of saying something like \"Hey Active Record, when you've finished creating a new User object, give me a call so I can run this method before anything else happens \"\nThis is a brief section on a useful topic The Rails Guide reading provides good coverage of it, so our summary will be necessarily brief Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson What a callback is used for The major lifecycle stages of an Active Record object How to build an \"around\" callback How to specify a particular action to run a callback for The life cycle of an active record object\nCallbacks provide hooks into specific points (either before, after, or sometimes \"around\") in the life cycle of an object Those life cycle moments are:\nInitialization -- When the object is first built OR whenever it is reloaded from the database and into memory (so any time you find it in a query) Validation -- Whenever Rails checks if the object is valid That could be when you're trying to save it or if you've manually run the #valid method Saving -- The actual act of saving an already-built object to the database This is triggered any time the object is saved, not just the first time it is created Creating -- The creation and saving of a new object Updating -- The updating of an existing object Finding -- The query of existing objects (e g , #all, #first, #find) This is often triggered by Rails working with objects behind the scenes You often get three choices for callbacks Not all object lifecycle steps support all callbacks, but the basic three are (using create as an example):\nbefore_create -- Runs the method before the stated action\nafter_create -- Runs the method after the stated action\naround_create -- A bit trickier In this one, you will write a method which actually yields at some point to the original action That way you can have code before it and after it and YOU decide at which point the original action gets done Not entirely common",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6006,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_callbacks.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "34fd9ea54b97bf483f37112f5576f6ff",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_callbacks.md",
    "source_type": "git_repo",
    "title": "active_record_callbacks",
    "content": "but the basic three are (using create as an example): before_create -- Runs the method before the stated action after_create -- Runs the method after the stated action around_create -- A bit trickier In this one, you will write a method which actually yields at some point to the original action That way you can have code before it and after it and YOU decide at which point the original action gets done Not entirely commonUsing callbacks\nTo use a callback, you need to \"register\" it at the top of your Model by using the appropriate method (e g before_create) You pass that method either a symbol which corresponds to a method name or you could just write the callback as a block then and there Rails will hang onto that method and call it at the appropriate time For example:\n```ruby\n# app/models/user rb\nclass User < ActiveRecord::Base\nbefore_create do |user|\nputs \"about to create #{user name}\"\nend\nafter_create :just_created\nprivate\ndef just_created\nputs \"just created a user\"\nend\nend\n```\nSpecifying callback characteristics\nCallbacks give you several options for narrowing down or selecting specifically when you want them to run If you only want to run a callback when a particular controller action calls it, use the :on option, which takes either a single symbol or a full array, e g before_create :run_code, :on => [:create, :update] You can also use conditional logic options :if and :unless to try a method before running callbacks, for instance:\n```ruby\nbefore_create :run_code, :unless => :method_is_true\nprivate\ndef method_is_true\ntrue\nend\n```\nTransaction callbacks\nSometimes your Rails app will need to interact with an external application (which is inherently imperfect) as a part of the save process Other times your save will involve juggling several balls at once and, if one fails, they all need to be rolled back Typically these cases will involve wrapping your database save operation in a \"transaction,\" which means that either all the steps work or they all fail and are rolled back The committing of a transaction and its potential rollback if it fails are both lifecycle events that you can latch onto with callbacks, e g after_commit and after_rollback This is uncommon, so consider it another one of those \"just remember that it's an option\" type things Conclusion\nCallbacks are useful and many, like :after_create and :before_destroy, are pretty common",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6006,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_callbacks.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "f36ba248ceff0555b36ba868f699c98a",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_callbacks.md",
    "source_type": "git_repo",
    "title": "active_record_callbacks",
    "content": "\"transaction,\" which means that either all the steps work or they all fail and are rolled back The committing of a transaction and its potential rollback if it fails are both lifecycle events that you can latch onto with callbacks, e g after_commit and after_rollback This is uncommon, so consider it another one of those \"just remember that it's an option\" type things Conclusion Callbacks are useful and many, like :after_create and :before_destroy, are pretty commonThere's no rocket science here, just a helpful concept Assignment\n1 Read through the [Rails Guide on Callbacks](http://guides rubyonrails org/active_record_callbacks html)\n1 Read this post from Samuel Mullen on [guidelines for using callbacks](https://samuelmullen com/articles/guidelines-for-using-activerecord-callbacks) Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge How do you register a callback What events happen in an Active Record object's lifecycle How can you make a callback run under specific conditions When are transaction callbacks most useful Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental WikiBooks Reference on Callbacks",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6006,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_callbacks.md",
      "source_type": "git_repo"
    },
    "token_count": 274,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "c06a0add39d3ff704f53a5c094767dce",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_associations.md",
    "source_type": "git_repo",
    "title": "active_record_associations",
    "content": "Introduction\nYou've already had some familiarity with associations, especially the basic has_one, has_many, and belongs_to variety Thus far, you've probably mostly used these associations to grab collections of objects like a user's posts (user posts) There are a lot of other handy things that Rails lets you do with associations too This brief section will highlight some of the more useful methods that come along with associations Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson How Rails normally knows which table and foreign key to use when you have an association (e g User first posts) Specifying the :class_name option in an association Specifying the :foreign_key option Specifying the :source option Polymorphic associations and when you would use them Two ways to use an association to create a new object instead of just calling YourObject new When and why using an association to create a new object may be useful or preferred How to automatically destroy associated objects when an object is deleted How to set up a self-association, such as with Users following Users Basic stuff\nIf you're still shaky on basic associations, go back and check out the Associations section of the Basic Active Record lesson first This section is meant to just bring up some of the basic stuff you may not yet have been exposed to Foreign keys and class names\nWhen you create an association, Rails makes two major assumptions -- first, that the class of the model your association points to is based directly off of the name of the association, and, second, that the foreign key in any belongs_to relationship will be called yourassociationname_id Any time you go away from these defaults, you just need to let Rails know what kind of class to look for and which foreign key to use A very simple case would be a User who can create many Posts for a blog:\nruby\n# app/models/user rb\nclass User < ActiveRecord::Base\nhas_many :posts\nend\nruby\n# app/models/post rb\nclass Post < ActiveRecord::Base\nbelongs_to :user\nend\nSo you could ask the first user for all her posts with User first posts or the first post for its author user with Post first user Rails knows to look for a foreign key called user_id in the Posts table If you ask for Post first user, Rails will look in the Users table for the User with the ID corresponding to the user_id column in the Posts table",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18557,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_associations.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 9
  },
  {
    "id": "0139ece00ab44e0a92cb7b8c0a17314a",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_associations.md",
    "source_type": "git_repo",
    "title": "active_record_associations",
    "content": "Post < ActiveRecord::Base belongs_to :user end So you could ask the first user for all her posts with User first posts or the first post for its author user with Post first user Rails knows to look for a foreign key called user_id in the Posts table If you ask for Post first user, Rails will look in the Users table for the User with the ID corresponding to the user_id column in the Posts tableAll is well in the world when your association names correspond directly to the names of your models and tables But what if you want to have two types of users that the post belongs to -- the \"author\" and the \"editor\" In this case, you'll need two separate foreign keys in your Posts table, presumably one called author_id and another called editor_id How do you tell Rails that each of these foreign keys actually point to a User (so it knows to look in the Users table for them) Just specify the class your association should point to using the aptly named :class_name option:\nruby\n# app/models/post rb\nclass Post < ActiveRecord::Base\nbelongs_to :author, class_name: \"User\"\nbelongs_to :editor, class_name: \"User\"\nend\nIn this case, Rails will automatically look for the foreign key named after the association, e g author_id or editor_id, in the Posts table If you called the association something which didn't correspond exactly to what you'd named the foreign key in your table, you need to tell Rails that as well This should be obvious if you think of this relationship from the side of the User The User will have some posts for which she is an author and others for which she is an editor You'll need to rename the association on the User's side as well to keep things crystal clear, for instance splitting up authored_posts from edited_posts But now Rails doesn't have the foggiest idea where to look and what to look for By default, if you ask for User first authored_posts it will go looking in the authored_posts table for a foreign key called user_id (neither of which exist) To get it pointing at the right table, we again need to specify the :class_name and to get it using the correct foreign key, we need to specify the right :foreign_key For instance:\nruby\n# app/models/user",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18557,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_associations.md",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 1,
    "total_chunks": 9
  },
  {
    "id": "7b5c1d6553f8fdf82cbcf29ab2f91fd3",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_associations.md",
    "source_type": "git_repo",
    "title": "active_record_associations",
    "content": "doesn't have the foggiest idea where to look and what to look for By default, if you ask for User first authored_posts it will go looking in the authored_posts table for a foreign key called user_id (neither of which exist) To get it pointing at the right table, we again need to specify the :class_name and to get it using the correct foreign key, we need to specify the right :foreign_key For instance: ruby # app/models/userrb\nclass User < ActiveRecord::Base\nhas_many :authored_posts, foreign_key: \"author_id\", class_name: \"Post\"\nhas_many :edited_posts, foreign_key: \"editor_id\", class_name: \"Post\"\nend\nThe basic gist of this is to assume that Rails is looking for the foreign key named after the association in the table also named after the association If any of these are incorrect because of a creatively named association or foreign key, you'll need to specify This is quite common to make your associations more legible Source\nNow that it's clear you need to let Rails know when you've creatively named your associations or foreign keys, we should point out that there's one additional step required if you're using a creatively named has_many :through association Recall that has-many-through associations are where you create a \"through table\" to act as a go-between for two models that have a many-to-many relationship For example, perhaps we change the example above so a Post actually can have multiple Authors (but still only one editor) We'll need to create a new table, which we'll call post_authorings post_authorings joins these two models together and contains columns for authored_post_id and post_author_id You can probably see where this is going -- we've named our foreign keys something more descriptive and helpful than just post_id and user_id but it will require us to inform Rails of the change Our models look like:\nruby\n# app/models/post rb\nclass Post < ActiveRecord::Base\nhas_many :post_authorings, foreign_key: :authored_post_id\nhas_many :authors, through: :post_authorings, source: :post_author\nbelongs_to :editor, class_name: \"User\"\nend\nruby\n# app/models/user",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18557,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_associations.md",
      "source_type": "git_repo"
    },
    "token_count": 454,
    "chunk_index": 2,
    "total_chunks": 9
  },
  {
    "id": "294a3acca156ef9c1a07eb2c6f744fa4",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_associations.md",
    "source_type": "git_repo",
    "title": "active_record_associations",
    "content": "these two models together and contains columns for authored_post_id and post_author_id You can probably see where this is going -- we've named our foreign keys something more descriptive and helpful than just post_id and user_id but it will require us to inform Rails of the change Our models look like: ruby # app/models/post rb class Post < ActiveRecord::Base has_many :post_authorings, foreign_key: :authored_post_id has_many :authors, through: :post_authorings, source: :post_author belongs_to :editor, class_name: \"User\" end ruby # app/models/userrb\nclass User < ActiveRecord::Base\nhas_many :post_authorings, foreign_key: :post_author_id\nhas_many :authored_posts, through: :post_authorings\nhas_many :edited_posts, foreign_key: :editor_id, class_name: \"Post\"\nend\nruby\n# app/models/post_authoring rb\nclass PostAuthoring < ActiveRecord::Base\nbelongs_to :post_author, class_name: \"User\"\nbelongs_to :authored_post, class_name: \"Post\"\nend\nAnd our data model looks like:\n| users  |            |\n| ---------- | ---------- |\n| name       | string   |\n| created_at | datetime |\n| updated_at | datetime |\n| posts  |            |\n| -----------| ---------- |\n| content    | text     |\n| editor_id  | integer  |\n| created_at | datetime |\n| updated_at | datetime |\n| post_authorings  |            |\n| -------------------- | ---------- |\n| authored_post_id     | integer  |\n| post_author_id       | integer  |\n| created_at           | datetime |\n| updated_at           | datetime |\nThe major thing to note here is that with has-many-through associations, Rails uses the name of the association in the through table to determine which foreign key and table name to reach out to If it's named anything irregular, you'll use the :source option to specify which association actually points where we'd like to go You can think of :source as being just like :class_name but for the associations in the \"through table\" It may be helpful to illustrate what Rails is doing In the example above, if you ask for Post first authors, Rails sort of \"thinks\" like this:\nYou just called for the \"authors\" association on the Post model\nTo get \"authors\", we first need to go through the post_authorings association to get there",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18557,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_associations.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 3,
    "total_chunks": 9
  },
  {
    "id": "bfc874ca30202ee4481c4e63334ea229",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_associations.md",
    "source_type": "git_repo",
    "title": "active_record_associations",
    "content": "where we'd like to go You can think of :source as being just like :class_name but for the associations in the \"through table\" It may be helpful to illustrate what Rails is doing In the example above, if you ask for Post first authors, Rails sort of \"thinks\" like this: You just called for the \"authors\" association on the Post model To get \"authors\", we first need to go through the post_authorings association to get thereOnce we're at the PostAuthoring model, to get to the author, we'll need to use the :belongs_to association and it'll be called post_author We know this because we used the :source option If we hadn't used the :source option in the original has-many-through association, we would have been looking for belongs_to :author instead Now we've got all the information we need to structure our SQL joins and grab the list of authors for the post It sounds a bit wonky but it's just the same logic as before -- if Rails can't tell based on its assumptions which associations or class names or foreign keys you're supposed to use, you need to specify them yourself using :source or :foreign_key or :class_name It takes some practice but you'll get it Usually you know something's up if you get error messages of the flavor ActiveRecord::StatementInvalid: SQLite3::SQLException: no such column Once you do get things figured out, it can still be helpful to look in your Rails server output to see which joins are being done to build the SQL query That's a great window into what your associations are doing behind the scenes (because in the end, it's all about figuring out the correct SQL query to run) Polymorphic associations\nWe'll cover polymorphism here but, if your head is really spinning from the other concepts, feel free to just skim it Consider this an \"additional topic\" instead of a core topic like foreign keys, class names and source Polymorphic associations can be a bit of a head scratcher at first and aren't terribly common, but are well suited for their use case They use a big word to describe a pretty straightforward concept -- what if you have a single model that can belong to a bunch of different types of models For example, let's say you're building a service like Facebook where users can comment on any of the different types of things posted by other users (like text, pictures, images)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18557,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_associations.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 4,
    "total_chunks": 9
  },
  {
    "id": "0437044517c94acee5704a2363d3e26f",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_associations.md",
    "source_type": "git_repo",
    "title": "active_record_associations",
    "content": "head scratcher at first and aren't terribly common, but are well suited for their use case They use a big word to describe a pretty straightforward concept -- what if you have a single model that can belong to a bunch of different types of models For example, let's say you're building a service like Facebook where users can comment on any of the different types of things posted by other users (like text, pictures, images)How do you make it okay to comment on all these different types of objects using just a single Comment model In a plain vanilla situation, the comment would belongs_to a Post or a Picture or a Video (or whatever you're commenting on) You would have a foreign key called something like post_id in your Comments table Now if we want to be able to comment on multiple types of things, we need to figure out a different way of dealing with the foreign key because a single foreign key could be referencing a post, an image, a video etc and we don't know which one it's ambiguous You could just make a different column for each one, e g post_id, image_id, video_id, but that is terribly inelegant and hardcoded (imagine if there were 100 different types of posts we want to be able to comment on ) We need to stick with a single foreign key column We solve this by storing not just the foreign key id, but also a reference to which type of model it corresponds to That way, whenever you want to retrieve a comment, by specifying which type of thing it belongs to it is no longer ambiguous what you're asking for Note that Rails does this for you in the background as long as it knows you're working with a polymorphic association We have to call our foreign key something a bit different from the normal case since it's ambiguous which model it's referencing and you can't just use post_id or picture_id A convention is to come up with an abstract term for what type of action you're doing and use that to name the association So in this case we're commenting on things and can thus call the foreign key \"commentable\" You'll see the *able convention used a fair bit So the migration for that model might look like:\nruby\nclass CreateComments < ActiveRecord::Migration\ndef change\ncreate_table :comments do |t|\nt string :title\nt text :content\nt integer :commentable_id\nt string :commentable_type\nt",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18557,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_associations.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 5,
    "total_chunks": 9
  },
  {
    "id": "d2cb5888acf1f8dd97bd6fe8a2ec82f8",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_associations.md",
    "source_type": "git_repo",
    "title": "active_record_associations",
    "content": "with an abstract term for what type of action you're doing and use that to name the association So in this case we're commenting on things and can thus call the foreign key \"commentable\" You'll see the *able convention used a fair bit So the migration for that model might look like: ruby class CreateComments < ActiveRecord::Migration def change create_table :comments do |t| t string :title t text :content t integer :commentable_id t string :commentable_type ttimestamps\nend\nend\nend\n\"Commentable\" will be used to refer to the associations as well You'll need to tell your Comment model that it is actually polymorphic so Rails knows to also check for a commentable_type column when using it This is done like:\nruby\n# app/models/comment rb\nclass Comment < ActiveRecord::Base\nbelongs_to :commentable, polymorphic: true\nend\nOn the other side of the association, you just treat your comment like any other association (which happens to have a nonstandard name) You just need to specify the association on every model that has_many of it The only wrinkle is that, because it's using the \"commentable\" name, you need to specify it in an alias just like you would if any other association had a nonstandard name:\n```ruby\n# app/models/post rb\nclass Post < ActiveRecord::Base\nhas_many :comments, as: :commentable\nend\n# app/models/picture rb\nclass Picture < ActiveRecord::Base\nhas_many :comments, as: :commentable\nend\n```\nRails does the rest of the work for you Any time you ask a Picture for all its comments (Picture first comments), Rails will return just the comments that belong to that picture without you having to worry about anything else Self joins\nOftentimes you have relationships between the same type of model, for instance users who can follow other users In this case, you need to specify both associations in your User model but name them differently You will need to specify in your has_many association what the name of the foreign_key will be:\n```ruby\nclass Employee < ActiveRecord::Base\nhas_many :subordinates, class_name: \"Employee\",\nforeign_key: \"manager_id\"\nbelongs_to :manager, class_name: \"Employee\"\nend\n```\nHandy methods\nAs mentioned in the intro, associations give you access to some nifty tricks that you might not think of",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18557,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_associations.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 6,
    "total_chunks": 9
  },
  {
    "id": "2c98d3c1228c5d64c35c9acba565afa1",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_associations.md",
    "source_type": "git_repo",
    "title": "active_record_associations",
    "content": "can follow other users In this case, you need to specify both associations in your User model but name them differently You will need to specify in your has_many association what the name of the foreign_key will be: ```ruby class Employee < ActiveRecord::Base has_many :subordinates, class_name: \"Employee\", foreign_key: \"manager_id\" belongs_to :manager, class_name: \"Employee\" end ``` Handy methods As mentioned in the intro, associations give you access to some nifty tricks that you might not think ofCreating association objects\nThere's a couple of shortcuts for creating new association objects The first is to call #new or #create on the association to automatically populate the foreign key For instance, if a User has_many Posts and Post belongs_to a User:\n```bash\n# Long version:\nuser = User first\npost = Post create(title: \"sample\", user_id: user id)\n# Shorter version:\nuser = User first\nuser posts create(title: \"sample\")\n```\nAnother nifty trick is to create a new object and then use the shovel operator to add it to the association This is just one of the ways that associations sometimes act like arrays:\n```bash\nuser = User create(name: \"foobar\")\npost = Post new(title: \"sample\")\nuser posts << post\n```\nThis will save the post to the database with that User's foreign key It's roughly equivalent to calling:\n```bash\npost user_id = user id\npost save\n```\nIf you really want to, you can actually replace the entire association with a new collection by setting it equal to the new collection:\n```bash\nuser = User first\npost1 = Post find(1)\npost2 = Post find(2)\nuser posts = [post1, post2]  # posts added to that user's collection\n```\nDestroying dependents\nIf your user has created a bunch of posts and then decides to delete her account, how do you delete all the associated posts Specify the dependent: :destroy option when first declaring the association:\nruby\n# app/models/user rb\nclass User < ActiveRecord::Base\nhas_many :posts, dependent: :destroy\nend\nThis is just the most common among several options to specify for :dependent It will run the destroy method on all objects that belong to that user when the user is destroyed Assignment\n1 Read the [Rails Guide on Associations](https://guides rubyonrails org/association_basics",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18557,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_associations.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 7,
    "total_chunks": 9
  },
  {
    "id": "ba3a20bd0420f6f587f7c4acb05c73b3",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_associations.md",
    "source_type": "git_repo",
    "title": "active_record_associations",
    "content": "delete her account, how do you delete all the associated posts Specify the dependent: :destroy option when first declaring the association: ruby # app/models/user rb class User < ActiveRecord::Base has_many :posts, dependent: :destroy end This is just the most common among several options to specify for :dependent It will run the destroy method on all objects that belong to that user when the user is destroyed Assignment 1 Read the [Rails Guide on Associations](https://guides rubyonrails org/association_basicshtml) Start by skimming chapters 1 and 2 (which you should have already done) 1 Read all the content in chapters 3, 4, and 7 Conclusion\nIn this lesson we covered some of the more advanced associations material Associations are all over the place in Rails and incredibly useful because of all the new methods they give you access to As long as you pause and think about what Rails is assuming when you set them up, you should be able to modify them to your liking without too much trouble Practice makes perfect, though, so keep building projects with associations in them and it'll eventually stick Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What two pieces of information will Rails assume by default for associations Which type of association may require the :source option to be specified What is populated automatically when an object is created by an association Can a polymorphic association use a single column foreign key Can a model have associations with instances of the same model Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Brush up Your Knowledge of Rails Associations\nRails' Polymorphic Associations\nUnderstanding Polymorphic Associations in Rails\nRailsCasts #154 Polymorphic Association\nComments with Polymorphic Associations\nRailsCasts Pro #394 STI and Polymorphic Associations",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18557,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_associations.md",
      "source_type": "git_repo"
    },
    "token_count": 407,
    "chunk_index": 8,
    "total_chunks": 9
  },
  {
    "id": "65228904f31eeb23db1af3ba72574877",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\forms_advanced.md",
    "source_type": "git_repo",
    "title": "forms_advanced",
    "content": "Introduction\nYou learned about the basics of building forms in HTML and Rails in previous lessons and you can do a whole lot with that knowledge But there are also cases when crafting a good user experience demands building a form that handles multiple things (e g model objects) at once Users only like clicking the submission button once so you'd better be able to give them the experience they demand In this section, we'll take a look at some of the options you have to make a form handle multiple model objects at once You'll also learn how to prepopulate a dropdown menu with objects Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Working with model objects in forms How to build dropdown menus in forms How to make a nested form How to whitelist nested parameters How to delete records via form fields Prepopulating select tags with collections\nRails provides you with a few handy ways of making dropdown menus which already contain data when the form is loaded (otherwise they're not that useful) Let's say you want to build a New Post form for your blog but you want to be able to select who the author is from among your list of users You will need to make a dropdown which submits the user's ID as a part of your params hash So you might populate @users in your posts controller:\nruby\n# app/controllers/posts_controller rb def new\n@users = User all\n@post = Post new\nend The bare HTML way is to build a bunch of <option> tags (inside your <select> tag) You could easily create these in your ERB code by just iterating over some collection, for instance if you'd like to select a post to view from a list of them erb\n# app/views/posts/new html erb <select name=\"user_id\">\n<%= @users each do |user| %>\n<option value=\"<%= user id %>\"><%= user name %></option>\n<% end %>\n</select> This creates a dropdown list with each user's name as an option Your #create action will receive an attribute called user_id and you can use it to match an author to that post But Rails provides some less verbose ways of doing the same thing, namely using the #select_tag helper in conjunction with the #options_for_select helper The #select_tag will create the surrounding tag while the #options_for_select gives #select_tag the array of options it needs",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15147,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\forms_advanced.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "7a2a6b2d06bcabb6eed18794af9f5cac",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\forms_advanced.md",
    "source_type": "git_repo",
    "title": "forms_advanced",
    "content": "%> </select> This creates a dropdown list with each user's name as an option Your #create action will receive an attribute called user_id and you can use it to match an author to that post But Rails provides some less verbose ways of doing the same thing, namely using the #select_tag helper in conjunction with the #options_for_select helper The #select_tag will create the surrounding tag while the #options_for_select gives #select_tag the array of options it needs#options_for_select expects a very specific input -- an array of arrays which provide the text for the dropdown option and the value it represents So options_for_select([[\"choice1\",1],[\"choice2\",2]]) creates a couple of option tags, one for each choice This is great, because that's exactly what #select_tag expects for its second argument The only wrinkle here is that you need to convert your @users collection, which has full User objects, into an array with just name and value That's easy using #map:\nruby\n# app/controllers/posts_controller rb def new\n@user_options = User all map{ |u| [ u name, u id ] }\n@post = Post new\nend erb\n# app/views/posts/new html erb <%= select_tag(:author_id, options_for_select(@user_options)) %> So just pass #select_tag the name it should use for your chosen value and the collection and it will output the exact same thing If you want to avoid the whole options_for_select thing altogether and your form is designed to build a model instance (e g a Post object), just use the more generic #select helper in your view:\nerb\n# app/views/posts/new html erb <%= select(:post, :author_id, @user_options) %> You still need to pass it the :post parameter (which indicates that your form is building a Post object) so the select tag can get the name right in this case, it will name the tag <select name=\"post[author_id]\" id=\"post_author_id\"> That means (remember ) that the author_id attribute will show up in your params nested under the post hash The :author_id input to the #select helper above represents not just what the chosen value should be called (as in the #select_tag) but also which column name it represents in your original (in this case Post) model This may be a bit annoying at first since you can't just name your choice whatever you want",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15147,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\forms_advanced.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "1e35691480af78776b622b3e07275e61",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\forms_advanced.md",
    "source_type": "git_repo",
    "title": "forms_advanced",
    "content": "name=\"post[author_id]\" id=\"post_author_id\"> That means (remember ) that the author_id attribute will show up in your params nested under the post hash The :author_id input to the #select helper above represents not just what the chosen value should be called (as in the #select_tag) but also which column name it represents in your original (in this case Post) model This may be a bit annoying at first since you can't just name your choice whatever you wantIf you have a #form_with form scoped under the f variable, you don't need to pass the :post symbol above (it gets it from f), so could instead use:\nerb\n# app/views/posts/new html erb <%= f select(:author_id, @user_options) %> It took a bit of time for us to get here, but hopefully you can now see how straightforward this method is for generating a potentially large dropdown You'll use dropdowns a lot to populate the association of a model, e g the author of a Post In the next section, we'll talk about how to actually create both model objects from within a single form Note: If you've used the simple_form gem, it has its own way of handling collections of objects which is a bit different (supposedly simpler) than this Nested forms\nYou've got a form for creating one of your User objects (say for your Amazon com clone application) but you also want to make that form create one or more ShippingAddress objects (which a User can have many of) How do you get that one form to create both so your user doesn't get stuck clicking a bunch of form submits This is a multi-part process It involves your controller, view, models and routes the whole MVC team The gist of it is that your form will submit the main object (e g the User) as normal but it will sneak in a bunch of attributes for the other object(s) you want to create (e g ShippingAddress object(s)) Your model will have to be ready for this It will create not just the original User object but also the nested objects at the same time As you can imagine, it's important to get the names and parameters properly listed so all this magic can happen behind the scenes We'll do a broad overview of the process here:\nYou will need to prepare the User model so that it knows to create one or more ShippingAddress objects if it receives their attributes when creating a normal User",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15147,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\forms_advanced.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "4f4eec91c838c7e3cda286d2ff8a63ca",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\forms_advanced.md",
    "source_type": "git_repo",
    "title": "forms_advanced",
    "content": "not just the original User object but also the nested objects at the same time As you can imagine, it's important to get the names and parameters properly listed so all this magic can happen behind the scenes We'll do a broad overview of the process here: You will need to prepare the User model so that it knows to create one or more ShippingAddress objects if it receives their attributes when creating a normal UserThis is done by adding a method to your User model called #accepts_nested_attributes_for which accepts the name of an association, e g:\nruby\n# app/models/user rb\nclass User < ActiveRecord::Base\nhas_many :shipping_addresses\naccepts_nested_attributes_for :shipping_addresses\nend\nMake sure you've allowed your params to include the nested attributes by appropriately including them in your Strong Parameters controller method See the reading for examples of how to do this Build the form in the view Use the #fields_for method to effectively create a #form_with inside your existing #form_with form There are a couple new aspects to this process With #fields_for, you basically create a form within a form (which should make sense since it's actually used behind the scenes by #form_with) In this example, we might create three \"sub-forms\" for ShippingAddress objects by using our association, e g erb\n<%= form_with model: @user do |f| %> <% 3 times do %>\n<%= f fields_for @user shipping_addresses build do |sub_form| %> <%= sub_form text_field :zip_code %> <% end %>\n<% end %>\n<%= f submit %>\n<% end %>\nNote that we could (and should) also have built the new shipping_address objects in the controller instead of the view; it's just for demonstration purposes here The #accepts_nested_attributes_for method is fairly straightforward and the docs should be helpful The reading will cover more about allowing the nested parameters Deleting nested form objects\nYou can also have your form destroy nested forms by first setting the :allow_destroy option to true for the #accepts_nested_attributes_for method, e g accepts_nested_attributes_for :shipping_addresses, :allow_destroy => true Now, any time you want to destroy a ShippingAddress object from a User's form, just include the key _destroy => 1 in the submitted parameters for that ShippingAddress",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15147,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\forms_advanced.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "7cfb2375aff97acac30e91873fb5326b",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\forms_advanced.md",
    "source_type": "git_repo",
    "title": "forms_advanced",
    "content": "and the docs should be helpful The reading will cover more about allowing the nested parameters Deleting nested form objects You can also have your form destroy nested forms by first setting the :allow_destroy option to true for the #accepts_nested_attributes_for method, e g accepts_nested_attributes_for :shipping_addresses, :allow_destroy => true Now, any time you want to destroy a ShippingAddress object from a User's form, just include the key _destroy => 1 in the submitted parameters for that ShippingAddressMany-to-many relationships\nIf you've got a has_many :through relationship, you'll likely need to go one additional step further by specifying that each side of your relationship is the inverse of the other Designing your own forms\nSometimes, despite all the nice helpers Rails gives you, you just want to do something that's not standard You should first wonder whether this is the easiest and most straightforward way to do things If it passes the smell test, then go ahead and build your form It's often easiest (and good practice while you're learning) to start with the most basic of HTML forms If you don't understand what's going on in the basic HTML (and remember to include your CSRF token), then you'll be hopeless trying to use helpers Once you've got a good handle on things, gradually bring in the Rails helpers like #form_tag and #form_with Don't get discouraged if you get some real head-scratcher moments when building nonstandard forms It just takes some experience to feel comfortable And if things are too out of hand, you may need to re-evaluate your approach (what exactly are you hoping to accomplish with your complex form ) and start again Simple form\nsimple_form is a gem by Platformatec which can really make your life easier (if you aren't doing anything too crazy) It provides lots of user-friendly features for building forms and is in wide use today It's up to you to check out the documentation for simple_form and start using it in your own applications as desired Miscellania: blank submissions that mean delete\nSometimes, for a record that already exists, you want to either deselect a dropdown or check none of your checkboxes but you want this to indicate that the associated fields should actually be set to nil Usually, though, if you submit the form it will include none of the fields and your back end won't know that you actually wanted to remove those fields so nothing will happen How do you get around it",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15147,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\forms_advanced.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "357ff43d9b3ee1f5e71579306380349d",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\forms_advanced.md",
    "source_type": "git_repo",
    "title": "forms_advanced",
    "content": "mean delete Sometimes, for a record that already exists, you want to either deselect a dropdown or check none of your checkboxes but you want this to indicate that the associated fields should actually be set to nil Usually, though, if you submit the form it will include none of the fields and your back end won't know that you actually wanted to remove those fields so nothing will happen How do you get around itTry making a hidden field in your form (or nested form) that has the same name as your checkboxes or dropdown but only contains the value \"\" Now you'll get that attribute to show up in your params hash no matter what and you can handle deleting the records however you'd like appropriate Sometimes Rails helper methods will insert hidden fields for you, but make sure you know what your form is actually submitting (if anything) if you deselect all options Assignment\n1 Read the Rails Guide on Forms section 5, which covers [populating a form with a collection of objects](https://guides rubyonrails org/form_helpers html#collection-related-helpers) 1 Read the Same Rails Guide on Forms section 9, which covers [accepting nested form data](http://guides rubyonrails org/form_helpers html#building-complex-forms) 1 Read the Same Rails Guide on Forms section 8, which covers the [parameter conventions for nested forms](https://guides rubyonrails org/form_helpers html#form-input-naming-conventions-and-params-hash) 1 Read this blog post from [Peter Rhoades on working with nested forms](https://www createdbypete com/2014/04/04/working-with-nested-forms-and-a-many-to-many-association-in-rails-4 html) The example covers a lot of the things we've gone over so far, so follow along Also note how he does the allowing of nested attributes in Rails 4 Conclusion\nWe've covered two of the more common use cases for complex forms -- pre-populating a form with objects and creating multiple objects with a single form At this point, even if you're uncomfortable, you should have all the tools you need to work through creating a form We'll get your hands dirty in the project, have no fear The best part This is more or less the most complicated conceptual stuff with learning Rails Actually, it's not even really Rails-specific",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15147,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\forms_advanced.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "78d65207ef206c34e2536121cf8cb249",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\forms_advanced.md",
    "source_type": "git_repo",
    "title": "forms_advanced",
    "content": "the more common use cases for complex forms -- pre-populating a form with objects and creating multiple objects with a single form At this point, even if you're uncomfortable, you should have all the tools you need to work through creating a form We'll get your hands dirty in the project, have no fear The best part This is more or less the most complicated conceptual stuff with learning Rails Actually, it's not even really Rails-specificonce you're comfortable with the HTML that forms require and how the parameters get submitted to your controller, mapping that to the correct Rails conventions or helpers is the easy part So everything you've learned may just be transferable to every form you'll ever make Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What does the #select_tag helper do When using #options_for_select, what format does the array need to be in When would you use the #select helper How can you prevent users from having to submit multiple forms What do you add to the model that allows nested forms to create new objects How do you allow the nested parameters in your controller How can you set up a dropdown or checkbox to delete a record that already exists Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Simple Form Documentation on GitHub\naccepts_nested_attributes_for documentation\nAnother example of a nested form on Stack Overflow\nUsing inverse_of to make accepts_nested_attributes_for work for has_many :through relationships\nUnderstanding Rails' form authenticity tokens\nWhy not to hardcode your application's secret token in production",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15147,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\forms_advanced.md",
      "source_type": "git_repo"
    },
    "token_count": 347,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "fd395e635672a4dd9993e863f7f61c92",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_queries.md",
    "source_type": "git_repo",
    "title": "If building a new model, pass column_name:integer to the model generator",
    "content": "Introduction\nUp until now, we've covered the bread and butter you need to build basic queries using Active Record After building a handful of projects and working through the tutorial, you should be comfortable making these queries Active Record is much more powerful than just CRUD actions on individual records It gives you a Ruby-ish interface to do almost anything you can do with bare-metal SQL statements You can cherry-pick individual groups of records based on specific criteria and order them however you want You can join tables manually or query using associations set up by Rails You can return lists of records or perform basic math like counts and averages All this is done at the database level, which is much faster than loading up a whole table of stuff into Ruby objects before parsing and chopping and calculating with it In this lesson, we'll get into the more interesting and useful areas of Active Record queries You'll learn what Active Record actually returns and how to manipulate the returned values at will You'll also learn how to make your queries more efficient along the way There's a lot of material to read and cover, but it basically follows the idea \"anything you can do in SQL, you can do in Active Record\" They mostly use the same terminology as well Active Record just extends that functionality by giving you a suite of versatile methods (and concepts like Relations) to make it much more user-friendly along the way Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson What an Active Record relation is What lazy evaluation is Commonly used Rails query methods N+1 queries and why they are a concern What scopes are What enums are Relations and lazy evaluation\nUsing User find(1) will return an unambiguous object -- it's going to find the user with ID = 1 and give it to you as a Ruby object But this behavior is actually unusual Most queries don't actually return a Ruby object, they just fake it For example:\nruby\nUser where(id: 1)\nMight look like it returns an array that contains a serialized User object, like:\nruby\n[#<User id: 1, email: \"foo@bar com\">]\nBut try running User where(id: 1) class and you'll see that it isn't an Array, it's actually an instance of ActiveRecord::Relation Relations are actually just really good at looking like arrays but they've got more going on Active Record queries return relations to be lazy",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22439,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_queries.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 0,
    "total_chunks": 11
  },
  {
    "id": "f4ce1fa20dd34360e8a8869939e80996",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_queries.md",
    "source_type": "git_repo",
    "title": "If building a new model, pass column_name:integer to the model generator",
    "content": "they just fake it For example: ruby User where(id: 1) Might look like it returns an array that contains a serialized User object, like: ruby [#<User id: 1, email: \"foo@bar com\">] But try running User where(id: 1) class and you'll see that it isn't an Array, it's actually an instance of ActiveRecord::Relation Relations are actually just really good at looking like arrays but they've got more going on Active Record queries return relations to be lazyThere's basically no reason to actually tell the database to execute a query until the very last possible minute What if you never actually needed to use that query at all What if you want to make it more complex before executing it Relations give you that flexibility and make much more efficient use of your database's valuable time Relations only get executed when it becomes absolutely necessary to know what's inside them So if your controller grabs 5 blog posts using @posts = Post limit(5), that is really passing your view a relation It's only when the code in the view actually calls a method on @posts (like @posts first title) that the query will be run and the relation will get stored as a real Ruby object in memory This behaviour can be a bit tricky to observe if you use something like the Rails Console ($ rails console) to test them out, because the queries will actually be run right away in the console since it implicitly runs something like the inspect method on the relation, which requires the query to be run But try playing with building a query like we did above and checking out its #class you'll usually get back ActiveRecord::Relation Chaining queries\nRelations aren't just built for speed they're also built for flexibility Let's say you want to grab the first 5 posts listed in descending order (Post limit(5) order(created_at: :desc)) Because #limit returns a Relation, #order takes that relation and adds its own criteria to it You can chain together a dozen methods this way, and, when it's finally time to execute, ActiveRecord and SQL (if that's what you're using for the DB) will figure out the optimal way to structure the query to achieve the desired result This is the sort of behaviour that you just sort of expect to work, and Relations are what enables it to do so Why care You should care that ActiveRecord queries usually return Relations because you'll run into them often when coding and debugging",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22439,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_queries.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 11
  },
  {
    "id": "d51377c5a2f9807cc9e58aa845426f67",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_queries.md",
    "source_type": "git_repo",
    "title": "If building a new model, pass column_name:integer to the model generator",
    "content": "when it's finally time to execute, ActiveRecord and SQL (if that's what you're using for the DB) will figure out the optimal way to structure the query to achieve the desired result This is the sort of behaviour that you just sort of expect to work, and Relations are what enables it to do so Why care You should care that ActiveRecord queries usually return Relations because you'll run into them often when coding and debuggingThe knowledge should make you comfortable chaining query methods together to construct elaborate queries If you end up working with a Relation when you really want it to act like an Array, you can sometimes run #to_a on it to force it to evaluate the query Methods implemented in ActiveRecord::FinderMethods do NOT return ActiveRecord::Relation objects The #find, #find_by, #first and #last methods return a single record (a model instance) #take returns an array of model instances Unlike the methods that return Relation objects, when called, these will run SQL queries immediately Beyond basic querying\nYou should be pretty comfortable now with queries like finding objects The reading you do for this section will cover the basics and then dive in a bit further than before There are a couple of new concepts worth mentioning Checking for existence\nThe new concept is how to check whether an object actually exists yet or not, which you may want to do before running a method which depends on the object actually having been saved already #exists will return true/false #any will be true if any records match the specified criteria and #many will be true if multiple records match the specified criteria You can run each of these either on a model directly, a Relation, an association, or a scope (which we'll cover later) Basically, anywhere you might think of using them, they're likely to work:\n```ruby\n# From the Guide:\n# via a model\nPost any Post many # via a relation\nPost where(published: true) any Post where(published: true) many # via an association\nPost first categories any Post first categories many ```\nArguments\nThere are multiple ways to submit arguments for most Rails query methods You can typically use either symbols or strings or both We prefer to stick with symbols and hashes wherever possible You can also use parameters like in normal SQL When it's not ambiguous (e g if you aren't working with multiple tables) you can also choose to specify the table name or not (see #5 below) All of the following are the same:\nUser where(email: \"foo@bar",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22439,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_queries.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 2,
    "total_chunks": 11
  },
  {
    "id": "d0c03f9fcf3ca5fea27fbcb8f0a87f2d",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_queries.md",
    "source_type": "git_repo",
    "title": "If building a new model, pass column_name:integer to the model generator",
    "content": "multiple ways to submit arguments for most Rails query methods You can typically use either symbols or strings or both We prefer to stick with symbols and hashes wherever possible You can also use parameters like in normal SQL When it's not ambiguous (e g if you aren't working with multiple tables) you can also choose to specify the table name or not (see #5 below) All of the following are the same: User where(email: \"foo@barcom\")\nUser where(\"email\" => \"foo@bar com\")\nUser where(\"email = 'foo@bar com'\")\nUser where(\"email = \", \"foo@bar com\")\nUser where(\"users email\" => \"foo@bar com\")\nMore assorted querying knowledge\nVery large queries can actually be batched into lots of subqueries so they don't eat up tons of performance resources #find_each does the trick The basic principle is that it chunks the query into pieces, loading up the first piece and evaluating it before moving onto the next one This will be helpful for you when optimizing queries but isn't really something to worry too much about up front #where queries give you a fair bit of flexibility -- they let you specify an exact value to find, a range of values to find, or several values to find If you know what type of query you're looking for, you can almost guess the proper syntax for executing it The key thing to note is that #find returns the actual record while #where returns an ActiveRecord::Relation which basically acts like an array So if you're using #where to find a single record, you still need to remember to go into that \"array\" and grab the first record, e g User where(email: \"foo@bar com\")[0] or User where(email: \"foo@bar com\") first #find_by is a really neat method that basically lets you build your own finder method It's an alternative to using #where (to which you'd have to add another method like #take or #first to pull the result out of the returned array) If you want to find by a user's email, write User find_by(email: 'foo@bar com') #select should be pretty obvious to a SQL ninja like you -- it lets you choose which columns to select from the table(s), just like in SQL To select just the ID column for all users, it's as straightforward as User select(:id) You can also use aliases like in SQL but should use quotes instead of symbols, e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22439,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_queries.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 3,
    "total_chunks": 11
  },
  {
    "id": "4b56b9d615943a1c6707c9cbeb6ae121",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_queries.md",
    "source_type": "git_repo",
    "title": "If building a new model, pass column_name:integer to the model generator",
    "content": "of the returned array) If you want to find by a user's email, write User find_by(email: 'foo@bar com') #select should be pretty obvious to a SQL ninja like you -- it lets you choose which columns to select from the table(s), just like in SQL To select just the ID column for all users, it's as straightforward as User select(:id) You can also use aliases like in SQL but should use quotes instead of symbols, eg @users = User select(\"users id AS user_id\") will create a new attribute called user_id, e g allowing you to access @users first user_id Aggregations\nJust like with SQL, you often want to group fields together (or \"roll up\" the values under one header) For example, grouping blog posts written on a certain date This is most useful when you also apply mathematical operations to them like #count or #max An example (a bit more complex because it involves joining two tables) is if we want to get a count of all the blog posts categorized by each tag We might write something like:\nbash\nPost joins(:tags) group(\"tags name\") count\n# => {\"tag1\" => 4, \"tag2\" => 2, \"tag3\" => 5}\nJoins\nWhen working with multiple tables, you'll often want to join them together Rails associations often do the heavy lifting of setting up the joins for you if you're working with instances of an object, so you may not need to explicitly use a #join right away But if you're running queries like in the Post-Tag-count grouping example used above, you'll need to use joins to bring together the appropriate tables You need to be more careful with how you select data when using joins -- if you are looking for the :id column, which table's ID are we asking for You'll find yourself using more explicit strings when joining, e g in the example above (copied below) where we specify the name attribute of the tags table:\nbash\nPost joins(:tags) group(\"tags name\") count\n# => {\"tag1\" => 4, \"tag2\" => 2, \"tag3\" => 5}\nN+1 queries and eager loading\nIf you want your application to run with any kind of efficiency at all, you should strive to reduce the number of queries that are run on your database as much as possible",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22439,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_queries.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 4,
    "total_chunks": 11
  },
  {
    "id": "bb92ae0bc0e8a8874f355e764fcd2f7a",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_queries.md",
    "source_type": "git_repo",
    "title": "If building a new model, pass column_name:integer to the model generator",
    "content": "strings when joining, e g in the example above (copied below) where we specify the name attribute of the tags table: bash Post joins(:tags) group(\"tags name\") count # => {\"tag1\" => 4, \"tag2\" => 2, \"tag3\" => 5} N+1 queries and eager loading If you want your application to run with any kind of efficiency at all, you should strive to reduce the number of queries that are run on your database as much as possibleThat means figuring out ahead of time exactly what you're looking for and then building the correct query to grab that thing one time only It's okay to grab the SAME information multiple times Rails caches the first result anyway so it doesn't result in a performance hit But there are situations where you force the ActiveRecord::Relation that is returned by a query to execute itself immediately and then you try to run queries on each member of the collection That's a whole lot of queries and can quickly slow your application down to a snail's pace The N+1 query problem is the classic case of this -- you grab all the records for your users (User all) then loop through each user and call an association it has, like the city the user lives in (user city) For this example we're assuming an association exists between User and City, where User belongs_to a City This might look like:\nruby\nUser all each do |user|\nputs user city\nend\nThis is going to result in one query to get all the users, then another query for each user to find its city through the association so N additional queries, where N is the total number of users Hence \"N+1\" problems Note that it's totally fine to just grab a regular attribute of User like user name it's because you're reaching through the association with City that we've got to run another full query If the best way to make an application run faster is to reduce database calls, we've just messed up badly by causing a potentially huge number of them Rails is well aware of your distress and has provided a solution -- \"eager loading\" When you first grab the list of all users, you can tell Rails to also grab the cities at the same time (with just one additional query) and store them in memory until you'd like to call upon them Then user city gets treated the same way as user name it doesn't run another query The trick is the #includes method",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22439,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_queries.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 5,
    "total_chunks": 11
  },
  {
    "id": "e7043065db3feaacfc5d01123d55e2a0",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_queries.md",
    "source_type": "git_repo",
    "title": "If building a new model, pass column_name:integer to the model generator",
    "content": "Rails is well aware of your distress and has provided a solution -- \"eager loading\" When you first grab the list of all users, you can tell Rails to also grab the cities at the same time (with just one additional query) and store them in memory until you'd like to call upon them Then user city gets treated the same way as user name it doesn't run another query The trick is the #includes methodruby\nUser all includes(:city) each do |user|\nputs user city\nend\n#includes basically takes the name of one or more associations that you'd like to load at the same time as your original object and brings them into memory You can chain it onto other methods like #where or #order clauses Note: One thing which can be a bit annoying from a development standpoint is that we haven't found an easy way to \"see\" your eager-loaded fields by looking at the output from your Rails server So don't be alarmed if they don't show up in the server output Almost as useful is the #pluck method, which is covered in the Rails Guide #pluck lets you skip several steps in the process of pulling up a bunch of records, storing them in memory, then grabbing a specific column and placing it into an array #pluck just gives you the resulting array right away:\nruby\nUser pluck(:name)\n# => [\"Foo\", \"Bar\", \"Baz\", \"Jimmy-Bob\"]\nThis is another way to help speed up your application if you've found pain points Start by getting rid of N+1 queries, though Scopes\nScopes are underappreciated, and awesome A scope is basically a custom chain of ActiveRecord methods that you can slap onto an existing Relation by calling its name like a normal method It's easiest to see in an example Let's say you let your user choose to filter your blog posts only for those marked \"important\":\n```ruby\n# app/models/post rb scope :important, -> { where(is_important: true) } # app/controllers/posts_controller rb def index\nif params[:important] == true\n@posts = Post important all\nelse\n@posts = Post all\nend\nend\n```\nInstead of always having to rewrite that chain of ActiveRecord methods when you want them, you can create nicely named scopes to contain all the component logic You reduce repetition and make your code more readable The best part is that scopes return Relations so you can chain as many of them as you want",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22439,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_queries.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 6,
    "total_chunks": 11
  },
  {
    "id": "5e017685b0f4373c0985db82d49166d4",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_queries.md",
    "source_type": "git_repo",
    "title": "If building a new model, pass column_name:integer to the model generator",
    "content": "app/controllers/posts_controller rb def index if params[:important] == true @posts = Post important all else @posts = Post all end end ``` Instead of always having to rewrite that chain of ActiveRecord methods when you want them, you can create nicely named scopes to contain all the component logic You reduce repetition and make your code more readable The best part is that scopes return Relations so you can chain as many of them as you wantYou might be thinking, Why use a scope when you can write a class method to do the same thing You can, as long as your class method returns a Relation (which can take some additional thought for edge cases) In fact, using a class method is often best if your logic chains are quite complicated The example above could be solved using the following class method as well:\nruby\n# app/models/post rb def self important\nself where(is_important: true)\nend See the Additional Resources section for links to some posts that dig a bit deeper into the use cases for these two How much do you need to understand or care about scopes In the early going, you probably won't run into them or see why to use them Keep them in the back of your mind for when you start working on some slightly more complicated projects that might need them Enums\nEnums (short for \"enumerations\") map database column values, typically stored as integers, to a set of symbolic names They make code more readable and maintainable, and they offer a performance boost since queries involving integers are faster than those involving strings Enums are perfect for representing the state of an attribute that has a discrete value As an example, suppose an article on a blog can be in a draft or published state It is never between these two states, and it is never in more than one at any time How to use enums\nTo implement enums, we need to declare them in the model and add a column to store them in the database table that stores instances of the model Since enums are stored as integers in the database and there is no native enum type available in most database schemas, we set their data type to integer:\n```bash\nIf building a new model, pass column_name:integer to the model generator\nbin/rails g model Article status:integer\nIf adding a column to an existing table:\nbin/rails g migration AddStatusToLightSwitch status:integer\n```\nEnums are declared in the model's class as either an array or a hash",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22439,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_queries.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 7,
    "total_chunks": 11
  },
  {
    "id": "c8c802a4691275780b9844279f3929dd",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_queries.md",
    "source_type": "git_repo",
    "title": "If building a new model, pass column_name:integer to the model generator",
    "content": "of the model Since enums are stored as integers in the database and there is no native enum type available in most database schemas, we set their data type to integer: ```bash If building a new model, pass column_name:integer to the model generator bin/rails g model Article status:integer If adding a column to an existing table: bin/rails g migration AddStatusToLightSwitch status:integer ``` Enums are declared in the model's class as either an array or a hashThe hash flavor has a slight advantage in that the integer values mapped to the enum are independent of their position and the values stored in the database are explicitly stated ```ruby\nHash declaration (recommended)\nclass Article < ApplicationRecord\nbelongs_to :author\nenum :status, { draft: 0, published: 1 }\nend\n```\nArticles can now be passed a status during creation:\nruby\narticle = Article create(status: :draft)\nDefining an enum on a model exposes a number of class methods that return collections:\nruby\nArticle draft\nArticle not_draft\nArticle published\nArticle not_published\nThese are functionally equivalent to the following scopes:\nruby\nscope :draft, -> { where(status: \"draft\") }\nscope :not_draft, -> { where not(status: \"draft\")}\nscope :published, -> { where(status: \"published\") }\nscope :not_published, -> { where not(status: \"published\") }\nA number of handy instance methods are also exposed:\n```ruby\nPredicates\narticle draft #=> true\narticle published #=> false\nGetters\narticle status               #=> \"draft\"\nSetters\narticle status = \"published\" #=> \"published\"\narticle draft #=> \"draft\"\n```\nBare-metal SQL\nSometimes, you just can't get ActiveRecord to do what you want it to In that case, it gives you an interface to the bare metal SQL so you can just type in your query as desired This should really be a last resort -- it's basically hard-coding your application code Use the #find_by_sql method for this Conclusion\nThis was a lot of material, but you should have a healthy appreciation for the breadth of things that you can do with Active Record At the most basic level, though, you can do pretty much anything you can in SQL by using Active Record query methods You'll get a chance to use some of these newfound query methods in future projects and others will come up when you're building things on your own",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22439,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_queries.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 8,
    "total_chunks": 11
  },
  {
    "id": "fcfac893bcefe8519a1c66902656ad97",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_queries.md",
    "source_type": "git_repo",
    "title": "If building a new model, pass column_name:integer to the model generator",
    "content": "this Conclusion This was a lot of material, but you should have a healthy appreciation for the breadth of things that you can do with Active Record At the most basic level, though, you can do pretty much anything you can in SQL by using Active Record query methods You'll get a chance to use some of these newfound query methods in future projects and others will come up when you're building things on your ownAssignment\n#### Querying basics\n1 Read the first 6 sections of the [Rails Guide on Active Record Querying](http://guides rubyonrails org/active_record_querying html) for a more basic overview of query functions Don't worry too much about batching and `#find_each` 1 Read section 20 of the same Rails guide for a brief look at [using `exists `, `any ` and `many `](https://guides rubyonrails org/active_record_querying html#existence-of-objects) 1 Read sections 7 and 21 to learn about [grouping and aggregate functions](https://guides rubyonrails org/active_record_querying html#grouping) 1 Skim section 8 to learn about [overriding conditions](https://guides rubyonrails org/active_record_querying html#overriding-conditions) 1 Read section 12 of the same Rails guide to see how Rails lets you play with [joining tables together](https://guides rubyonrails org/active_record_querying html#joining-tables) 1 Read section 18 of the same Rails guide for a quick look at [the helpful `find_or_create_by` methods](https://guides rubyonrails org/active_record_querying html#find-or-build-a-new-object) #### Advanced querying\n1 Read section 14 in the [Rails Guide on Querying](https://guides rubyonrails org/active_record_querying html#scopes) for a look at scopes Again, you don't necessarily need to memorize all the details of scopes, but you should understand the concept and when it might be useful 1 Read [How to Use Enums in Rails](https://blog saeloun com/2022/01/05/how-to-use-enums-in-rails/) 1 Read section 19 “Finding by SQL” of the same Rails guide for a look at [using SQL directly to query](http://guides rubyonrails org/active_record_querying html#finding-by-sql)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22439,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_queries.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 9,
    "total_chunks": 11
  },
  {
    "id": "0918153b7ff0c7eaca6452141af5765c",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_queries.md",
    "source_type": "git_repo",
    "title": "If building a new model, pass column_name:integer to the model generator",
    "content": "1 Read section 14 in the [Rails Guide on Querying](https://guides rubyonrails org/active_record_querying html#scopes) for a look at scopes Again, you don't necessarily need to memorize all the details of scopes, but you should understand the concept and when it might be useful 1 Read [How to Use Enums in Rails](https://blog saeloun com/2022/01/05/how-to-use-enums-in-rails/) 1 Read section 19 “Finding by SQL” of the same Rails guide for a look at [using SQL directly to query](http://guides rubyonrails org/active_record_querying html#finding-by-sql)Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge How does lazy evaluation help make Active Record more efficient How do you check whether a database already contains a record What is the difference between a #where query and a #find query How do you join tables together in Rails What is an example of an N+1 query What method is used to deal with an N+1 query When would you use a class method in place of a scope When should you consider using enums Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental SO post on Using Scopes vs Class Methods\nPlatformatec diving more into the use case of scopes vs class methods\nRailsCasts #22 Eager Loading\nIntroduction to the N+1 Problem\nN+1 Problem: Eager Loading with Active Record\nN+1 Problem: Optimized Counts with Joins and Custom Select\nSpeed up ActiveRecord with a little tweaking\nA useful gem that identifies N+1 queries\nActiveRecord::Enum API docs",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22439,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\active_record_queries.md",
      "source_type": "git_repo"
    },
    "token_count": 389,
    "chunk_index": 10,
    "total_chunks": 11
  },
  {
    "id": "a8654c8e1eca7e7eb1c38b0b75102742",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\installing_psql.md",
    "source_type": "git_repo",
    "title": "You must remove the '+' signs to be able to migrate your database",
    "content": "Introduction\nOne of the great things about the Rails' convention over configuration philosophy is it provides sensible defaults out of the box so that you can get started quickly However, SQLite is typically not used for production One major issue is that many hosting providers have ephemeral file systems which means your database can be deleted For the apps written so far, it's probably not a big deal As we progress to writing larger applications, though, it will become increasingly sensible to make sure that data persists even after a restart or hibernation It is also safer to make sure the application development environment is as close to the production environment as possible This helps to avoid problems that stem from using different tools in different environments Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson What an environment is and how it can impact our application What environment variables are and how to utilize them How to install PostgreSQL and set it up How to set up a bare Rails application to use a specific database Environments and pipelines\nIn the context of application development, an environment is the collection of tools, configurations and conventions that developers write and run code with An environment usually consists of an operating system and other software packages on top of that operating system Some of that software, like code, helps write software while others, like rbenv, provide tools and configurations to help run software There are four basic types of environments that are typically set up together The application that's being developed will then progress through these environments, which are grouped together in a \"production pipeline\":\nThe development environment is typically the developers local machine Where they can safely make changes, add features and improve the code without impacting actual users The test environment is set up to facilitate testing of the application This environment may use different tools and configuration settings (like more verbose logging) to validate a program's behavior and identify bugs with automated tests The staging environment usually mirrors the production environment but deployments are not meant to be public The production environment runs the application so that it is accessible by users Because an environment is a collection of tools and configurations, they come in handy as a place to store secrets or other information that may change based on the application's intended use For example, the local database server might have different credentials than the production database or maybe there are more analytics and logging requirements for production deployment As applications get larger, setting up these different environments can help developers deliver their best work while making sure changes (or bugs) don't negatively affect users",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15002,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\installing_psql.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "01065c4d2a5ccc23b3cc9c5d55e3d765",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\installing_psql.md",
    "source_type": "git_repo",
    "title": "You must remove the '+' signs to be able to migrate your database",
    "content": "and configurations, they come in handy as a place to store secrets or other information that may change based on the application's intended use For example, the local database server might have different credentials than the production database or maybe there are more analytics and logging requirements for production deployment As applications get larger, setting up these different environments can help developers deliver their best work while making sure changes (or bugs) don't negatively affect usersEnvironment variables\nThe foundation of any environment is the operating system, which provides ways to store local variables Not surprisingly, these are known as environment variables Why are environment variables important After all, the information could be added to the git repository (and by extension Github) While tools like git and Github are excellent for storing, versioning and sharing code; sensitive information like API keys or passwords should be kept private Even if you remove the private data from the current commit, it may still live on in the commit history Environment variables allow us to set this information where the application will run without sharing it on git or Github Because these variables can only be accessed locally, our application can access these sensitive values without making them public Rails uses the environment to set up its own internal environment variable The framework will look for a RAILS_ENV variable in the environment and set its own env that way If it can't find the variable, then Rails will assume it is in a development environment Isn't that cool We will use an environment variable to set up PostgreSQL credentials for our Rails apps Installing PostgreSQL\nPick your operating system below to get the appropriate steps for installing PostgreSQL Linux\n### Step 1: Make sure the system is up to date\nBefore installing PostgreSQL, it's a good idea to make sure the operating system is up to date To update our system, run this command:\n```bash\nsudo apt update && sudo apt upgrade\n```\n### Step 2: Install the PostgreSQL packages\nAfter our system is up to date, we will install the packages for PostgreSQL ```bash\nsudo apt install postgresql postgresql-contrib libpq-dev\n```\nAfter installation is complete, let's start the server using this command:\n```bash\nsudo systemctl start postgresql service && systemctl status postgresql service\n```\nGot an error, or don't see an active service Come visit [our Discord server](https://discord gg/fbFCkYabZB) for some help If `postgresql` is active, you can press `Q` to quit the status screen and move on to the next step",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15002,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\installing_psql.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "95dec2a8f3ee13bd36305f189e736650",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\installing_psql.md",
    "source_type": "git_repo",
    "title": "You must remove the '+' signs to be able to migrate your database",
    "content": "we will install the packages for PostgreSQL ```bash sudo apt install postgresql postgresql-contrib libpq-dev ``` After installation is complete, let's start the server using this command: ```bash sudo systemctl start postgresql service && systemctl status postgresql service ``` Got an error, or don't see an active service Come visit [our Discord server](https://discord gg/fbFCkYabZB) for some help If `postgresql` is active, you can press `Q` to quit the status screen and move on to the next step### Step 3: Setting up PostgreSQL\nPostgreSQL is now running, but we have to configure it in order to be able to use it with our local Rails applications #### 3 1 PostgreSQL roles\nPostgreSQL authenticates via roles A role is like a user, which is how we interact with the service The default PostgreSQL installation has set up a `postgres` role that we can use This is great, but that would mean having to switch to that role every time we wanted to do something with the database server Instead, we will set up our own role to avoid switching to the `postgres` role all the time #### 3 2 Creating a new role\nWe will be creating a new role with the same name as our Linux username If you're not sure of your Linux username, you can run the command `whoami` in your terminal to get it Once you have that information ready, let's create a role in PostgreSQL The command to do so is:\n```bash\nsudo -i -u postgres createuser --interactive\n```\nRemember that we want the role name to be the same as our Linux user name and be sure to make that new role a superuser Setting up a role like this means we can leverage \"peer authentication\" making using the local database very easy #### 3 3 Creating the role database\nOne other important step in setting up PostgreSQL is that each role must have its own database of the same name Without it, the role we just created will not be able to log in or interact with PostgreSQL You can try to run `psql` now, but you will get an error that the database does not exist Not to worry, let's create one to resolve this:\nIf your username has any capital letters, you must surround it in quotes when running the below command",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15002,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\installing_psql.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "6b25028772bbb4c98cb10973052c1d41",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\installing_psql.md",
    "source_type": "git_repo",
    "title": "You must remove the '+' signs to be able to migrate your database",
    "content": "that each role must have its own database of the same name Without it, the role we just created will not be able to log in or interact with PostgreSQL You can try to run `psql` now, but you will get an error that the database does not exist Not to worry, let's create one to resolve this: If your username has any capital letters, you must surround it in quotes when running the below command```bash\nsudo -i -u postgres createdb\n```\nNow our role is fully set up: we've got `` and that role has a database #### 3 4 Securing our new role\nOne important thing that we have to do is to set up a password for our new role so that the data is protected Now that our role is set up, we can actually use it to administer PostgreSQL All you have to do is enter this command to get into the PostgreSQL prompt:\n```bash\npsql\n```\nYou should see the PostgreSQL prompt come up with the new role we just created, like so:\n```sql\nrole_name=#\n```\nIf you don't see a similar prompt, then reach out in [our Discord server](https://discord gg/fbFCkYabZB) for some help If you **do** see a similar prompt, then we can create a password for the role like so:\n```sql\n\\password\n```\nYou'll be prompted to enter a password and to verify it Once you are done, the prompt will return to normal Now, we will configure the permissions for our new role (note the semicolon at the end):\n```sql\nGRANT ALL PRIVILEGES ON DATABASE  TO ;\n```\nRemember that you should change the `` and `` (they should both be the same) If you see `GRANT` in response to the command, then you can type `\\q` to exit the prompt #### 3 5 Saving access information in the environment\nAfter finishing our configuration, the last step is save it into the environment to access later In order to save our password to the environment, we can run this command:\n```bash\necho 'export DATABASE_PASSWORD=\"\"' >> ~/ bashrc\n```\nNote here the name we've chosen for our environment variable: `DATABASE_PASSWORD` Also, remember to update `` in the command to what was set above Now, this variable lives in our environment for us to use",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15002,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\installing_psql.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "24dbb62b11cabd80c2916470e9724da4",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\installing_psql.md",
    "source_type": "git_repo",
    "title": "You must remove the '+' signs to be able to migrate your database",
    "content": "in the environment After finishing our configuration, the last step is save it into the environment to access later In order to save our password to the environment, we can run this command: ```bash echo 'export DATABASE_PASSWORD=\"\"' >> ~/ bashrc ``` Note here the name we've chosen for our environment variable: `DATABASE_PASSWORD` Also, remember to update `` in the command to what was set above Now, this variable lives in our environment for us to useAs the variable is new, we'll want to reload the environment so that we can access it To reload the environment, you can close and re-open your terminal Once that's done, we can move to testing it out macOS\n### Step 1: Make sure the system is up to date\nBefore running commands with homebrew, you'll want to make sure things are up to date Run the following commands one by one:\n```bash\nbrew update\nbrew upgrade\n```\nIf your terminal doesn't recognize `brew`, then you'll need to go and install homebrew You can find it and other installs in the [installation appendix](https://www theodinproject com/guides/installations) ### Step 2: Install PostgreSQL via PostgresApp\nInstalling PostgreSQL via Postgres app is simple Visit [Postgres app](https://postgresapp com/) and follow the instructions outlined Importantly, you'll want to configure your `$PATH` so you can access the tooling that comes along with PostgreSQL After installing Postgres app, we can then install a PostgreSQL server We want to install the latest available version of PostgreSQL After installing PSQL via Postgres app, you can run this command to update your path to access all the tooling:\n```bash\nsudo mkdir -p /etc/paths d &&\necho /Applications/Postgres app/Contents/Versions/latest/bin | sudo tee /etc/paths d/postgresapp\n```\nAfter you've run this command and restarted your terminal, you can run `which psql` and we would expect this output:\n```bash\n/Applications/Postgres app/Contents/Versions/latest/bin/psql\n```\nIf you don't see a similar output, come visit [our Discord server](https://discord gg/fbFCkYabZB) for some help Please note that that Postgres app installs servers without any security configured, and will accept all local connections without a password",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15002,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\installing_psql.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "3f88b8a4b2e07458e4e9bb5ef81ddb58",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\installing_psql.md",
    "source_type": "git_repo",
    "title": "You must remove the '+' signs to be able to migrate your database",
    "content": "sudo mkdir -p /etc/paths d && echo /Applications/Postgres app/Contents/Versions/latest/bin | sudo tee /etc/paths d/postgresapp ``` After you've run this command and restarted your terminal, you can run `which psql` and we would expect this output: ```bash /Applications/Postgres app/Contents/Versions/latest/bin/psql ``` If you don't see a similar output, come visit [our Discord server](https://discord gg/fbFCkYabZB) for some help Please note that that Postgres app installs servers without any security configured, and will accept all local connections without a passwordThis is fine for our development environment, but be aware that when you move things to production, this will not be a good strategy Postgres app defaults to creating a role and user database that matches your macOS user You can confirm this by running this command after installing Postgres app and updating the path:\n```bash\npsql\n```\nYou should see the PostgreSQL prompt come up like this:\n```bash\n=#\n```\nBecause Postgres app has configured trusted authentication for all local connections, we don't need to set up any password authentication for our local development environment Just remember that your `role_name` is the user that appears in the `psql` prompt above You can type `\\q` to exit Creating a Rails application backed by PostgreSQL\nNow that we've installed and configured our local PostgreSQL server, let's generate a new Rails application to make sure everything is working Telling Rails what database to use\nThrough the curriculum to this point, Rails has been using the sqlite gem in order to run and manage its database As we just set up PostgreSQL, we will need to install the companion gem so that Rails knows how to interact with this database provider:\nbash\ngem install pg\nWe are already familiar with rails new <app_name> but it is also possible to specify the database that Rails should use when generating a new application Since we just installed PostgreSQL, let's try it out Navigate to where you keep your projects and enter:\nbash\nrails new <app_name> --database=postgresql\nConfiguring Rails using environment variables\nLet's navigate into the app directory and set up our database credentials bash\ncd <app_name>\nOnce we're inside the right directory, we can set up the database username and password in config/database",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15002,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\installing_psql.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "32803059b7bee0ecc2ff3c42165c6667",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\installing_psql.md",
    "source_type": "git_repo",
    "title": "You must remove the '+' signs to be able to migrate your database",
    "content": "is also possible to specify the database that Rails should use when generating a new application Since we just installed PostgreSQL, let's try it out Navigate to where you keep your projects and enter: bash rails new <app_name> --database=postgresql Configuring Rails using environment variables Let's navigate into the app directory and set up our database credentials bash cd <app_name> Once we're inside the right directory, we can set up the database username and password in config/databaseyml by adding entries with our information:\n```diff\ndefault: &default\nadapter: postgresql\nencoding: unicode\n# For details on connection pooling, see Rails configuration guide\n# http://guides rubyonrails org/configuring html#database-pooling\npool: <%= ENV fetch(\"RAILS_MAX_THREADS\") { 5 } %>\n+  username:  # role previously added\n+  password: <%= ENV['DATABASE_PASSWORD'] %> # variable previously added\nYou must remove the '+' signs to be able to migrate your database\n```\nSave the file, and we can see Rails work its magic:\nbash\nrails db:create\nRails should create the two databases, and as a final check we can start the Rails server:\nbash\nrails s\nOpen your browser, and head on over to localhost:3000 If you are greeted by the Rails splash page, then we did it If you see an error, come to our Discord server and get some help Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What are the typical environments that make up a pipeline What is an environment variable Why should we use environment variables Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental RubyGuides has a good introduction to environment variables that has a lot of information, including some gem options for managing environment variables DigitalOcean has a fantastic guide to setting up PostgreSQL that you can also check out",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15002,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\installing_psql.md",
      "source_type": "git_repo"
    },
    "token_count": 424,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "7227a84426d3c6929130893ea4dde262",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\project_flight_booker.md",
    "source_type": "git_repo",
    "title": "project_flight_booker",
    "content": "Introduction\nIn this project, you'll get a chance to tackle some more advanced forms This is the kind of thing you'll have to work with when handling user orders for anything more complicated than an e-book In this case, we'll build the first three steps of a typical checkout process for booking a one-way flight:\nA typical airline booking flow:\nEnter desired dates / airports and click \"Search\"\nChoose from among a list of available flights\nEnter passenger information for all passengers\nEnter billing information\nStep 4 would be done via integration of something like the Paypal API, via the paypal-express gem, the paypal-sdk-merchant SDK, or Stripe Assignment\nWe'll be creating a one-way flight booker You'll get lots of practice populating and building dropdown menus, radio buttons, and nested submissions Let the fun begin This project will require you to seed your database, so use your db/seeds rb file to write the code necessary to populate Airports and Flights One trick for toy apps like this (don't do it for production ) is to use the db:seed:replant task for simultaneously clearing the database and running your seeds file That way, when you create a new model or change how you want your sample data set up, you can just update the seeds rb file and run $ rake db:seed:replant to have a clean slate of data #### Setup\n1 Think through the data architecture required to bring this to life 1 Create a new Rails app, e g `odin-flight-booker`, and a new Git repo\n1 Modify the README to explain what you're doing and link back to the project here #### Screen 1: search\nFor the first screen, you will be creating 4 dropdown menus that will allow users to search for available flights -  departure airport, arrival airport, date, and number of passengers This requires relatively vanilla forms that happen to be prepopulated with collections of data Working with dates will cover a bit of new ground for you 1 Create an Airport model (which basically just needs an airport code like \"SFO\" or \"NYC\") and use the `db/seeds rb` file to create several airports 1 Create a Flight model (with the departure and arrival airport `id`s, start datetime and flight duration) 1 Set up associations so you can ask `Flight first departure_airport`, `Flight first arrival_airport` and get back Airport objects Same for `Airport first",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7527,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\project_flight_booker.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "634f55f76d37915f4351b0b5326e5c7d",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\project_flight_booker.md",
    "source_type": "git_repo",
    "title": "project_flight_booker",
    "content": "dates will cover a bit of new ground for you 1 Create an Airport model (which basically just needs an airport code like \"SFO\" or \"NYC\") and use the `db/seeds rb` file to create several airports 1 Create a Flight model (with the departure and arrival airport `id`s, start datetime and flight duration) 1 Set up associations so you can ask `Flight first departure_airport`, `Flight first arrival_airport` and get back Airport objects Same for `Airport firstdeparting_flights` and `Airport first arriving_flights`, which should return a list of Flight objects 1 Seed your database with flights 1 You will search and view results in the same page Set up your FlightsController and routes to make the Index page (`/flights`) the root route 1 Create your search form on the `/flights` index page to submit using a GET (not POST) request back to the same URL 1 Add the four dropdown menus -- a list of departure airports, arrival airports, number of passengers (1-4), and a date dropdown for the flight date The date dropdown should only include dates that have existing flights Don't worry about restricting the contents of the airport dropdowns -- you'd normally use JavaScript -- so just allow the user to select any airport See this [Stack Overflow post on formatting dates in dropdown lists](http://stackoverflow com/questions/15720940/rails-format-date-in-drop-down-list-in-view), this short [Stack Overflow post on selecting months/years](http://stackoverflow com/questions/13001904/rails-drop-down-select-month-year) and the Rails [DateHelper API Docs](http://api rubyonrails org/classes/ActionView/Helpers/DateHelper html) for some help with creating Date selects #### Screen 2: pick a flight\nOnce search results are returned, the user just needs to choose from among the available flights 1 Once the user has submitted the form, your controller should detect the additional query parameters (e g from `/flights departure_code=SFO&arrival_code=NYC&date=20131215#_tickets=2`) and should pull the flights which match that criteria from your database through smart querying model methods 1 Send those flights back to your `app/views/flights/index html erb` view Make it so that the view will display the results below (if present) 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7527,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\project_flight_booker.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "d7adf6c03cf48e25a3d0306298351f37",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\project_flight_booker.md",
    "source_type": "git_repo",
    "title": "project_flight_booker",
    "content": "are returned, the user just needs to choose from among the available flights 1 Once the user has submitted the form, your controller should detect the additional query parameters (e g from `/flights departure_code=SFO&arrival_code=NYC&date=20131215#_tickets=2`) and should pull the flights which match that criteria from your database through smart querying model methods 1 Send those flights back to your `app/views/flights/index html erb` view Make it so that the view will display the results below (if present) 1Don't get rid of the search dropdowns -- keep the search form active at the top so the user can try running a new search 1 The search results will need to be in their own form -- this time for selecting which of the flights the user would like to choose Each returned flight should render with a radio button next to it The user will select which flight to submit and move onto the next step The form should submit to the `#new` action of the BookingsController you're about to create using another GET method You'll need to include a hidden field that contains the number of passengers #### Screen 3: passenger information\nOnce the user has submitted their chosen flight, it's time to take their booking information You'll need a form to submit the Booking and also create a Passenger object for each passenger who needs a ticket Don't worry about creating a separate \"Ticket\" object, we'll assume the airline will issue those once the booking is verified 1 Create and migrate the Booking model 1 Create and migrate the Passenger model (just keep the information simple -- name and email only) 1 Set up associations between Bookings, Passengers, and Flights 1 Create a BookingsController and appropriate routes 1 Set up your `#new` action, which should have received the flight ID and passenger number parameters, and use it to help render a form for a new booking which displays the currently chosen date, airports, flight ID and a set of fields to enter personal information for each passenger You'll want to create a new blank Passenger object in your controller for each passenger, and then use `#fields_for` in the view to set up the sub-forms 1 Try submitting the form and check out the parameters in your server 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7527,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\project_flight_booker.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "ab1600b95ab7760e56afeb0723215f61",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\project_flight_booker.md",
    "source_type": "git_repo",
    "title": "project_flight_booker",
    "content": "number parameters, and use it to help render a form for a new booking which displays the currently chosen date, airports, flight ID and a set of fields to enter personal information for each passenger You'll want to create a new blank Passenger object in your controller for each passenger, and then use `#fields_for` in the view to set up the sub-forms 1 Try submitting the form and check out the parameters in your server 1You'll need your `#create` action to create a new Booking (linking it to the appropriate Flight) but it will also need to accept the nested attributes for each of the Passenger objects and create a new Passenger from them Be mindful of allowing the nested parameters as well 1 Go to the Booking model and implement the `#accepts_nested_attributes_for` method See the [Rails API](http://api rubyonrails org/classes/ActiveRecord/NestedAttributes/ClassMethods html) for examples and this [Stack Overflow post on nested attributes and mass assignment](http://stackoverflow com/questions/18540679/rails-4-accepts-nested-attributes-for-and-mass-assignment) for another 1 Once your form is successfully submitted, render the booking's `#show` page which displays the booking information (flight and passenger information) 1 Make sure your ticketing flow is working properly Good work Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental It looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7527,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\project_flight_booker.md",
      "source_type": "git_repo"
    },
    "token_count": 316,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "102f2c333f5a5057aa44f559880b26b6",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\project_private_events.md",
    "source_type": "git_repo",
    "title": "project_private_events",
    "content": "Introduction\nIn these projects, you'll finally really get to dive into ActiveRecord's associations, one of the best features it offers Warmup: thinking data first\nLay out the data architecture you'd need to implement to build the following scenarios:\nA site for pet-sitting (watching someone's pet while they're gone) People can babysit for multiple pets and pets can have multiple petsitters You like hosting people for dinner so you want to build a dinner party invitation site A user can create parties, invite people to a party, and accept an invitation to someone else's party Extra credit (tricky): You and your friends just love posting things and following each other How would you set up the models so a user can follow another user Project: Private events\nYou want to build a site similar to a private Eventbrite which allows users to create events and then manage user signups A user can create events A user can attend many events An event can be attended by many users Events take place at a specific date and at a location (which you can just store as a string, like \"Andy's House\") This project will require you to model many-to-many relationships and also to be very conscious about your foreign keys and class names (hint: you won't be able to just rely on Rails' defaults like you have before) Assignment\nWe've gotten quite far here, so these tasks will only lay out the high level overview of what you're meant to build You'll need to implement the details yourself As usual, it's not meant to look pretty, just work Design is all extra credit #### Setup\n1 Think about and spec out how to set up your data models for this application 1 Create a new `private-events` Rails app and GitHub repo 1 Update your README to be descriptive and link to this project #### Events and users\n1 Build and migrate your Event model without any foreign keys or validations Include the event's date in your model but don't worry about doing anything special with it yet 1 Create the EventsController and add an `#index` action that will display all of the events Create a corresponding view and add a heading with your choice of wording 1 Set up [devise](https://github com/heartcombo/devise) to handle authentication and create your User model Set the `root_path` to be the Event's Index page 1 Add the association between the event creator (a User) and the event Call this user the \"creator\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5667,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\project_private_events.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "62235043e917418806977e347b0a33da",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\project_private_events.md",
    "source_type": "git_repo",
    "title": "project_private_events",
    "content": "about doing anything special with it yet 1 Create the EventsController and add an `#index` action that will display all of the events Create a corresponding view and add a heading with your choice of wording 1 Set up [devise](https://github com/heartcombo/devise) to handle authentication and create your User model Set the `root_path` to be the Event's Index page 1 Add the association between the event creator (a User) and the event Call this user the \"creator\"Add the foreign key to the Event model as necessary You'll need to specify your association properties carefully (e g `:foreign_key`, `:class_name`) 1 Have the User's Show page list all the events a user has created 1 Update the EventsController and corresponding routes to allow you to create a new event The `#create` action should use the `#build` association reference method to create the new event with the user's ID prepopulated Find the right `#build` [association reference method](https://guides rubyonrails org/v7 1/association_basics html#detailed-association-reference) for the type of association you set up between your models You could use Event's `::new` method and manually enter the ID but don't 1 Make the form for creating an event 1 Have the Event's Show page display the details of the event #### Event attendance\n1 Add the association between the event attendee (also a User) and the event Call this user the \"attendee\" Call the event the \"attended_event\" You'll again need to juggle specially named foreign keys and classes and sources 1 Create and migrate all necessary tables and foreign keys This will require a \"through\" table since an Event can have many Attendees and a single User (Attendee) can attend many Events many-to-many 1 Create a Controller and corresponding routes for the \"through\" table that will allow a user to become an \"attendee\" of an event This will also require creating some sort of interface in the view(s) where the user can indicate that they want to attend an event 1 Update the Event's Show page to display a list of attendees 1 Add to the User's Show page a list of their \"attended_events\" 1 Separate this list of \"attended_events\" into either events that have occurred in the past or events that will occur in the future You'll get some good practice [building queries](https://guides rubyonrails",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5667,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\project_private_events.md",
      "source_type": "git_repo"
    },
    "token_count": 508,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "46d2a9fec8e1acd039718dc70679fa75",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\project_private_events.md",
    "source_type": "git_repo",
    "title": "project_private_events",
    "content": "require creating some sort of interface in the view(s) where the user can indicate that they want to attend an event 1 Update the Event's Show page to display a list of attendees 1 Add to the User's Show page a list of their \"attended_events\" 1 Separate this list of \"attended_events\" into either events that have occurred in the past or events that will occur in the future You'll get some good practice [building queries](https://guides rubyonrailsorg/active_record_querying html#array-conditions) and working with dates Keep this logic in the view and do not put separate method calls in the controller #### Finishing touches\n1 Separate the past and upcoming events on the Event's Index page by creating two class methods on the Event model (e g `Event past`) 1 Refactor the past and upcoming class methods into [scopes](https://guides rubyonrails org/active_record_querying html#scopes) 1 Put navigation links across the top to help you jump around 1 Make each event private and add the functionality for the event creator to invite specific users to an event 1 Extra Credit: Allow users to edit and delete the events they created 1 Extra Credit: Allow users to remove themselves as an attendee to their \"attended_events\" 1 Extra Credit: Allow creators to toggle events' visibility between public and private Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental It looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5667,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\advanced_forms_and_activerecord\\project_private_events.md",
      "source_type": "git_repo"
    },
    "token_count": 321,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "8af1471c24e388935167a299ca9b6d24",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\apis\\project_kittens_api.md",
    "source_type": "git_repo",
    "title": "project_kittens_api",
    "content": "Warmup: Exploring the Flickr API\nIn this warmup, you'll get a chance to poke around with an existing API from Flickr You'll need to read the documentation to understand which calls to make but they have a nice API explorer tool which submits API calls on your behalf Assignment 1\n1 Head over to the [Flickr API Documentation Page](http://www flickr com/services/api/) You can just Google `XYZ API docs` to locate these pages, which is usually much faster and easier than trying to find them by navigating the websites themselves 1 Look around at the different methods available They have a couple of different request formats, but check out the RESTful API format by clicking on the link on the left under \"Request Formats\" called [REST](http://www flickr com/services/api/request rest html) 1 This shows you the format that a typical API call would take -- you will make your request to the endpoint at `https://www flickr com/services/rest/` and include any required data in the GET query string or the POST body 1 Look around at the various methods How would you upload a photo How about getting your contacts list Lots of these methods will require you to authenticate your application or user account first 1 Check out the [Search method docs](http://www flickr com/services/api/flickr photos search html) This request doesn't require you to authenticate, just provide an API key (which you would get by registering as a developer on their platform) Browse through all the arguments that can be used 1 If you go to the bottom of the Search docs, you'll see a link to the [Search API Explorer](http://www flickr com/services/api/explore/flickr photos search) This tool lets you actually execute requests using Flickr's API key for illustrative purposes You just enter the options you want and it will make the request for you Try entering \"puppies\" under the \"tags\" argument, then scroll to the bottom Change the response \"Output\" dropdown to JSON then click \"Call Method\" 1 When the page refreshes, you'll see your results down at the bottom You should see a big list of photo objects (after some meta data) that were returned by your search",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8307,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\apis\\project_kittens_api.md",
      "source_type": "git_repo"
    },
    "token_count": 454,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "55a786e92116f2e8a26efb8a2f6855b8",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\apis\\project_kittens_api.md",
    "source_type": "git_repo",
    "title": "project_kittens_api",
    "content": "Flickr's API key for illustrative purposes You just enter the options you want and it will make the request for you Try entering \"puppies\" under the \"tags\" argument, then scroll to the bottom Change the response \"Output\" dropdown to JSON then click \"Call Method\" 1 When the page refreshes, you'll see your results down at the bottom You should see a big list of photo objects (after some meta data) that were returned by your searchThey look like:\n```json\n{ \"id\": \"11357337313\", \"owner\": \"84645040@N00\", \"secret\": \"6dd795c9c6\", \"server\": \"3805\", \"farm\": 4, \"title\": \"Gavin-Feb2013-0127\", \"ispublic\": 1, \"isfriend\": 0, \"isfamily\": 0 },\n```\nMore interestingly, you can see the URL they used to make the request below that Let's break it apart here to show the parameters more clearly:\n```bash\nhttps://www flickr com/services/rest/ method=flickr photos search\n&api_key=bbee7f1e3a3f9cb847b87964d50bf4bc\n&tags=puppies\n&format=json\n&nojsoncallback=1\n&api_sig=d207eb20abbce7c40437a01f759e1388\n```\n1 The URL contains the REST endpoint we looked at before, along with our search query and some other options like the API key and format If you copy and paste that into your browser, you'll see the same batch of output 1 Learn more about [how Flickr's photo URLs are structured](http://www flickr com/services/api/misc urls html) 1 Flickr's API requires two steps to actually display a photo -- you need to get a photo's meta information (which we just received in our search results) and then you need to piece it together into a URL that Flickr can understand to actually retrieve the photo The format they call typical is:\n`https://live staticflickr com/{server-id}/{id}_{secret}_{size-suffix} jpg`\nWe can plug in values from the previously retrieved photo to display a photo:\n`https://live staticflickr com/3805/11357337313_6dd795c9c6 jpg`\nWhich looks like:",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8307,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\apis\\project_kittens_api.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "8acd5fbdb1f82d87e18a28df55f066b6",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\apis\\project_kittens_api.md",
    "source_type": "git_repo",
    "title": "project_kittens_api",
    "content": "requires two steps to actually display a photo -- you need to get a photo's meta information (which we just received in our search results) and then you need to piece it together into a URL that Flickr can understand to actually retrieve the photo The format they call typical is: `https://live staticflickr com/{server-id}/{id}_{secret}_{size-suffix} jpg` We can plug in values from the previously retrieved photo to display a photo: `https://live staticflickr com/3805/11357337313_6dd795c9c6 jpg` Which looks like:[A Dog in snow](https://live staticflickr com/3805/11357337313_6dd795c9c6 jpg)\nAs you can see, omitting `_{size-suffix}` works and defaults to the longest edge being 500px 1 Tada Every API is different and you've got to read through their documentation to understand the basic format of using it Sometimes it can be helpful to search for a [YouTube](http://www youtube com) or [NetTuts](http://code tutsplus com) video with a quick overview as well Building a kittens API\nThis is a fast and straightforward project where you'll set up a Rails app to be a data-producing API which is just a fancy way of saying that all your controller methods will render data instead of HTML Consider this a drill in quickly building a pure vanilla RESTful resource We won't be working with an external API until the next project Assignment 2\n#### HTML\nWe'll start by building our Kitten application to work normally in the browser with HTML 1 Set up a new Rails application (`odin-kittens`) and Git repo 1 Update the README to describe the application and link back to this project 1 Build a Kitten model with attributes of `:name`, `:age`, `:cuteness`, and `:softness` 1 Build a KittensController and `:kittens` routes for all 7 RESTful actions 1 Set your default route to `kittens#index` 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8307,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\apis\\project_kittens_api.md",
      "source_type": "git_repo"
    },
    "token_count": 434,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "02ec5bb948e2c234827e1efc1649f1e2",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\apis\\project_kittens_api.md",
    "source_type": "git_repo",
    "title": "project_kittens_api",
    "content": "2 #### HTML We'll start by building our Kitten application to work normally in the browser with HTML 1 Set up a new Rails application (`odin-kittens`) and Git repo 1 Update the README to describe the application and link back to this project 1 Build a Kitten model with attributes of `:name`, `:age`, `:cuteness`, and `:softness` 1 Build a KittensController and `:kittens` routes for all 7 RESTful actions 1 Set your default route to `kittens#index` 1Fill out each of your controller actions and their corresponding views to display a very basic HTML page -- `#index` should just list all Kittens, `#show` should display a single Kitten, `#new` should render a Kitten creation form, `#edit` should use the same form (which should be a partial used by both the New and Edit views) to Edit the Kitten, `#create` and `#update` should do their jobs 1 Make a `delete` link on the Kitten's Show and Edit pages, as well as next to each Kitten listed in the Index page 1 Implement a display of the `flash` hash which congratulates you on adding or editing or deleting kittens and makes fun of you for errors in your form 1 Test out your Kitten creation machine to make sure all your controller actions are running properly #### JSON API\nNow it's time to make the Kittens resource available via API 1 Open a new command line tab and fire up IRB We'll use `rest-client` gem to send requests to our app:\n```irb\nrequire 'rest-client' # If you get an error here, you most likely need to install the gem response = RestClient get(\"http://localhost:3000/kittens\")\n```\n1 Let's see what we got back:\n```irb\nresponse body #=> Should return a sloppy mess of HTML # alternatively, you can do this:\nresponse to_s\n```\nIf you check out your server output, it's probably processing as \\*/\\* (i e all media types), e g `Processing by KittensController#index as */*`\n1 Try asking specifically for a JSON response by adding the option `accept: :json`, e g :\n```irb\njson_response = RestClient",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8307,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\apis\\project_kittens_api.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "d6f200d6e48cc8da1e256ce4fdbb98f9",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\apis\\project_kittens_api.md",
    "source_type": "git_repo",
    "title": "project_kittens_api",
    "content": "= RestClient get(\"http://localhost:3000/kittens\") ``` 1 Let's see what we got back: ```irb response body #=> Should return a sloppy mess of HTML # alternatively, you can do this: response to_s ``` If you check out your server output, it's probably processing as \\*/\\* (i e all media types), e g `Processing by KittensController#index as */*` 1 Try asking specifically for a JSON response by adding the option `accept: :json`, e g : ```irb json_response = RestClientget(\"http://localhost:3000/kittens\", accept: :json)\n```\nYou most likely will get a 406 Not Acceptable error - check your server console and you will see ActionController talking about UnknownFormat for your controller 1 Now modify your KittenController's `#index` method to `#respond_to` JSON and render the proper variables 1 Test it out by making sure your RestClient calls return the proper JSON strings, e g :\n```irb\njson_response = RestClient get(\"http://localhost:3000/kittens\", accept: :json)\nputs json_response body\n```\n1 Do the same for your `#show` method, which will require you to provide an ID when making your request Your CSRF protection will prevent you from creating, updating or deleting kittens via the API, so it's not necessary to implement those Now you've got a website that is both a normal HTML-producing back end AND an API that can be used to pull data from it You could use JavaScript calls from the front end to dynamically refresh your data now or even to load the whole page in the first place Or maybe you'll be hooking up a Kittens app to your iPhone and need a back end It doesn't matter, since now you've got a RESTful API Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental It looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8307,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\apis\\project_kittens_api.md",
      "source_type": "git_repo"
    },
    "token_count": 420,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "eb410de698dbfae44c5b066ca2cb7c57",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\apis\\apis_and_building_your_own.md",
    "source_type": "git_repo",
    "title": "apis_and_building_your_own",
    "content": "Introduction\nWorking with APIs is awesome and frustrating at the same time On the one hand, interfacing with other applications out there can greatly improve the reach and \"cool factor\" of your own app On the other, it involves lots of reading through documentation, figuring out authentication strategies, and parsing bad (or nonexistent) error messages Backing up, if you're still unclear on what an API (Application Programming Interface) basically is, FreeCodeCamp explains what APIs are Dave Roos' summary of APIs is also a good way to catch up \"API\" is an incredibly broad concept -- any time your application talks to another application, that's via some sort of API The components within your own application, e g the different pieces of Rails, also talk to each other via APIs they are more or less independent sub-applications that pass along the data they each need to complete their particular task Everything's an API in application-land When you build applications that have more dynamic front-end functionality (as complicated as single page JavaScript applications or as basic as individual AJAX calls), they will talk to your Rails backend via your own APIs which is really just an extra line or two of code to tell your controllers how to spit out JSON or XML instead of HTML In this lesson, we'll cover how to build your own API In the following lesson, we'll cover how to interface with the APIs of other applications The lessons are meant to give you a good onramp to learning this stuff but couldn't possibly cover all the cases Much of working with APIs is learning to read their documentation and figure out what they want Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Creating a Rails Controller action capable of returning JSON and XML responses Creating an API for a model that hides certain attributes from consumers of your API Creating custom error messages for responding to faulty requests What Service Oriented Architecture is API basics\nYour Rails application is basically already an API, though you may not think of it that way The web browser your user is running is also a program, so it is effectively making an API request to your Rails app whenever you request a new page It just so happens that rendering HTML payloads is so common that we just bake that into our server-side programs as the default response type and consider everything else special Often, though, you want to make a request that doesn't need to go through all the headache of using a web browser",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18256,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\apis\\apis_and_building_your_own.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 8
  },
  {
    "id": "91065d2e82a6393e36f4e28dca76d40b",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\apis\\apis_and_building_your_own.md",
    "source_type": "git_repo",
    "title": "apis_and_building_your_own",
    "content": "is running is also a program, so it is effectively making an API request to your Rails app whenever you request a new page It just so happens that rendering HTML payloads is so common that we just bake that into our server-side programs as the default response type and consider everything else special Often, though, you want to make a request that doesn't need to go through all the headache of using a web browserYou may not care how the page is structured (HTML), but instead just want to get straight to the data Say you want to get a list of all users You could go to something like http://yourapplication com/users which will probably run the #index action and render a list of all the application's users But why bother with all that extra stuff if all you want is the user list The easiest thing to do would be to submit a request to that same URL asking for a JSON or XML response instead If you set up your Rails controller properly, you will get back a JSON array object containing all the users Sweet The same principle applies if you're talking to external APIs say you want to grab a user's recent posts from X (formerly known as Twitter) You just need to tell your Rails app how to talk to Twitter's API (e g authenticate yourself), submit the request, and handle the bunch of posts that get returned Building APIs\nYou might want to make your Rails application entirely into an API backend for a front end webpage or you might just want to learn how to send out JSON when your front end requests it This section won't cover how to build a full featured RESTful API with authentication features it is a gentle introduction to treating your application as an API The basics\nIf you want your Rails app to return JSON instead of HTML, you need to tell your controller to do so The cool thing is that the same controller action can return different things depending on whether your user is making a normal request from a browser or an API call from the command line It determines which type of request is being made based on the extension of the file asked for, e g example xml or example json You can see which file type Rails thinks you want by checking your server log:\nbash\nStarted GET \"/posts/new\" for 127 0 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18256,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\apis\\apis_and_building_your_own.md",
      "source_type": "git_repo"
    },
    "token_count": 451,
    "chunk_index": 1,
    "total_chunks": 8
  },
  {
    "id": "ebf32e1ccdc956b023fb776a013deaef",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\apis\\apis_and_building_your_own.md",
    "source_type": "git_repo",
    "title": "apis_and_building_your_own",
    "content": "same controller action can return different things depending on whether your user is making a normal request from a browser or an API call from the command line It determines which type of request is being made based on the extension of the file asked for, e g example xml or example json You can see which file type Rails thinks you want by checking your server log: bash Started GET \"/posts/new\" for 127 0 01 at 2013-12-02 15:21:08 -0800\nProcessing by PostsController#new as HTML\nThe first line tells you which URL was requested and the second tells you where it's going and how Rails is processing it If you use a json extension, it looks like:\nbash\nStarted GET \"/posts json\" for 127 0 0 1 at 2013-12-04 12:02:01 -0800\nProcessing by PostsController#index as JSON\nIf you've got a sample application running, try going to different URLs If your controller isn't ready for them, you may get an error, but you should be able to see what Rails thinks you're asking for Rendering JSON or XML\nOnce you've decided that you want to respond to a request for JSON or XML, you need to tell your controller to render JSON or XML instead of HTML The way to do so is by using the #respond_to method:\n```ruby\nclass UsersController < ApplicationController\ndef index\n@users = User all\nrespond_to do |format|\nformat html # index html erb\nformat xml  { render :xml => @users }\nformat json { render :json => @users }\nend\nend\nend\n```\nIn this case, #respond_to passes the block a format object, to which you can attach the appropriate rendering call If you do nothing, HTML will render using the default Rails template as normal (in this case, app/views/index html erb) The #render function is smart enough to know how to render a wide range of formats When you pass it the key :json, it will call #to_json on the value, in this case @users That will make your Ruby object(s) into JSON strings, which can be transmitted to the requesting application And just like that, you've got yourself an API Of course, things can get a bit more complicated if you want to do unusual things, but that's the basics",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18256,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\apis\\apis_and_building_your_own.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 2,
    "total_chunks": 8
  },
  {
    "id": "8c90f023a08078066576355465ca1ccc",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\apis\\apis_and_building_your_own.md",
    "source_type": "git_repo",
    "title": "apis_and_building_your_own",
    "content": "smart enough to know how to render a wide range of formats When you pass it the key :json, it will call #to_json on the value, in this case @users That will make your Ruby object(s) into JSON strings, which can be transmitted to the requesting application And just like that, you've got yourself an API Of course, things can get a bit more complicated if you want to do unusual things, but that's the basicsSpecifying attributes to return\nLet's say you want to make sure you don't return the user's email address with the User object In this case, you'll want to edit which User attributes get returned by modifying what the #to_json method does In the old days, you'd just overwrite your own version of #to_json but these days you don't need to do that -- you will actually overwrite the #as_json method instead The #as_json method is used by #to_json, so modifying it will implicitly change the output of #to_json, but in a very specific way #to_json does two things -- it runs #as_json and gets back a hash of attributes which will need to be rendered as JSON Then it will actually perform the rendering into JSON using ActiveSupport::json encode So by modifying #as_json, you're more specifically targeting the part of the #to_json method that you actually want to change In our case, we'll do this by modifying #as_json in our model to return only the attributes we want:\n```ruby\n# app/models/user rb\nclass User < ActiveRecord::Base\n# Option 1: Purely overriding the #as_json method\ndef as_json(_options={})\n{ :name => self name }  # NOT including the email field\nend\n# Option 2: Working with the default #as_json method\ndef as_json(options={})\nsuper({ only: [:name] } merge(options))\nend\nend\n```\nIn our controller, we then just need to render JSON as normal (in the example below, it will just always return JSON, whether it's an HTML request or not):\n```ruby\n# app/controllers/users_controller rb\nclass UsersController < ApplicationController\ndef index\nrender :json => User all\nend\nend\n```\nNote that you don't need to call #to_json yourself when using #render it will do it for you See the as_json documentation for details and more, like how to include associations",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18256,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\apis\\apis_and_building_your_own.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 3,
    "total_chunks": 8
  },
  {
    "id": "5c399047df0ecaf794fd4cc67eefb646",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\apis\\apis_and_building_your_own.md",
    "source_type": "git_repo",
    "title": "apis_and_building_your_own",
    "content": "controller, we then just need to render JSON as normal (in the example below, it will just always return JSON, whether it's an HTML request or not): ```ruby # app/controllers/users_controller rb class UsersController < ApplicationController def index render :json => User all end end ``` Note that you don't need to call #to_json yourself when using #render it will do it for you See the as_json documentation for details and more, like how to include associationsRendering nothing or errors\nSometimes you just want to send out an HTTP error code without any response body Rails guides once again comes in really handy with an elegant solution for this problem Here's an example (again we are just rendering the error in all cases):\n```ruby\n# app/controllers/users_controller rb\nclass UsersController < ApplicationController\ndef index\nhead :not_found\nend\nend\n```\nCreating dynamic error pages\nYou can create your own error pages Sometimes Heroku can require additional steps to properly display your error pages, as per the Heroku error page docs You might need to delete the static pages in the app/public directory first External facing security\nLet's say you want to only allow an API call if your user is logged in Your existing controller authentication will work to cover this as well -- just make sure you've got the right #before_action set up (e g before_action :require_login) This might be the case if both logged in and non-logged-in users will be viewing the page but each should see different data You don't want your not-logged-in-users to be able to make API requests for sensitive data just like you wouldn't want them to be able to visit an unauthorized HTML page If you want to handle requests from an application that isn't a web browser (e g the command line), you can't rely on browser cookies to authenticate you That's why most APIs issue custom tokens to each authorized user which must be sent along with the request as part of the authentication process We'll talk a bit more about tokens in the next lesson Next steps\nRight now you've got the ability to use your Rails app to serve up not just HTML but also whatever formats you want If you'd like to take this further and allow other developers to build on your platform (so they'll be making programmatic requests instead of logging in as users), you'll need to make your API system far more robust",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18256,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\apis\\apis_and_building_your_own.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 4,
    "total_chunks": 8
  },
  {
    "id": "7719c916d4076542bef4dcde37008d34",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\apis\\apis_and_building_your_own.md",
    "source_type": "git_repo",
    "title": "apis_and_building_your_own",
    "content": "authentication process We'll talk a bit more about tokens in the next lesson Next steps Right now you've got the ability to use your Rails app to serve up not just HTML but also whatever formats you want If you'd like to take this further and allow other developers to build on your platform (so they'll be making programmatic requests instead of logging in as users), you'll need to make your API system far more robustWe won't cover it all here, but check out the following:\nBuilding Awesome Rails APIs has a lot of best practices for moving beyond a toy API and into a production-ready app Service Oriented Architecture (SOA)\nThis is a good time to introduce an architectural concept called \"Service Oriented Architecture\" The basic idea is that your application will likely have many different services within it, for instance the payments processing, user registration, recommendation engine, etc Instead of building all of these under the same master application, you break them out into fully independent pieces and have them talk to each other using internally facing APIs This is good for many reasons Because each piece of your application doesn't care how the other pieces work and it only knows how to ask for data via their APIs, it allows you to make major changes to the code within a service and the rest of your application works just the same You can completely substitute one service for another and, as long as it communicates using the same API methods, it's easy You can use an external API for a part of your app (like payments) instead of an internal one You can have a PHP app talking to a Python app talking to a Rails app and no one cares since they're all communicating using APIs It's usually a good idea to strive to keep independent pieces of your application as independent as possible anyway Formalizing this under the umbrella of SOA forces you to think in terms of exactly which methods you want to expose to the other parts of your application and it will make your code better along the way An added benefit is that, when you assume that each major component of your application is independent, you can also isolate issues much easier and will be forced to handle errors in a reasonable way Using an SOA architecture for your whole application is sort of like breaking up a giant and complicated Ruby script into nice neat classes and methods, just on a broader scale One of the best known cases of switching to a service-oriented architecture was Amazon com",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18256,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\apis\\apis_and_building_your_own.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 5,
    "total_chunks": 8
  },
  {
    "id": "c13697404cda329f2aec52fdd4b9a6dd",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\apis\\apis_and_building_your_own.md",
    "source_type": "git_repo",
    "title": "apis_and_building_your_own",
    "content": "when you assume that each major component of your application is independent, you can also isolate issues much easier and will be forced to handle errors in a reasonable way Using an SOA architecture for your whole application is sort of like breaking up a giant and complicated Ruby script into nice neat classes and methods, just on a broader scale One of the best known cases of switching to a service-oriented architecture was Amazon comSometime in 2002, Jeff Bezos basically dictated that every group would switch to SOA or be fired An infamous blog post from a Google Employee, accidentally released to the public instead of staying internal to the company, talked about Amazon's strength with SOA It's a great read so check it out, but the basics of Bezos' email are, as quoted from the post:\nAll teams will henceforth expose their data and functionality through service interfaces Teams must communicate with each other through these interfaces There will be no other form of interprocess communication allowed: no direct linking, no direct reads of another team's data store, no shared-memory model, no back-doors whatsoever The only communication allowed is via service interface calls over the network It doesn't matter what technology they use HTTP, Corba, Pubsub, custom protocols -- doesn't matter Bezos doesn't care All service interfaces, without exception, must be designed from the ground up to be externalizable That is to say, the team must plan and design to be able to expose the interface to developers in the outside world No exceptions Anyone who doesn't do this will be fired SOA is a big deal There are certainly a lot of issues that crop up when you're using it -- see this post on Amazon's “lessons learned” -- but it ultimately has a lot of benefit You probably won't be worrying too much about SOA while building \"toy\" applications for yourself but it will certainly come up if you find yourself working at a tech company and it's a good principle to become familiar with Conclusion\nWe'll get more into using your application as an API during the course on JavaScript In that course, you'll build some full stack apps that use JavaScript AJAX calls to smooth out the user experience, which basically involves asking your Rails app for some XML or JSON data instead of a full HTML page Then you'll get to build some single page JavaScript apps which rely on the API provided by your Rails app for all the necessary database data but otherwise completely run the show on the front end",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18256,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\apis\\apis_and_building_your_own.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 6,
    "total_chunks": 8
  },
  {
    "id": "f5a2ab8e540291ec6abd2215d26279b1",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\apis\\apis_and_building_your_own.md",
    "source_type": "git_repo",
    "title": "apis_and_building_your_own",
    "content": "JavaScript In that course, you'll build some full stack apps that use JavaScript AJAX calls to smooth out the user experience, which basically involves asking your Rails app for some XML or JSON data instead of a full HTML page Then you'll get to build some single page JavaScript apps which rely on the API provided by your Rails app for all the necessary database data but otherwise completely run the show on the front endThe best way to really figure out APIs is to build them and interface with them, so we'll focus on that in the projects In the next lesson, we'll cover working with other people's APIs, which can add all kinds of firepower to your own application Assignment\n1 Read the [Rails Guide on Controllers](https://guides rubyonrails org/v7 2/action_controller_overview html#rendering) section 7 to learn about rendering JSON and XML 1 They are not required viewing (because they get a bit deeper than we're scoped for), but if you're interested, go check out the Railscasts in the Additional Resources section at the bottom of this lesson for more API goodness Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge How does Rails know which type of file you are expecting back when you make an HTTP request What is the purpose of the #respond_to method How do you return a User object but specify that you don't want to include certain attributes (i e you can't just return User first) What are the two steps performed behind the scenes by the #to_json method How do you tell a controller action to render nothing but an error message How do you build your own custom error messages Why can't you use session-based controller authentication methods if you want people to access your API programmatically What is \"Service Oriented Architecture Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Watch this free Railscast on making your App into an API\nWatch this free Railscast on securing your API\nWatch this free Railscast on versioning your API\nGoRails #162 Our First API\nto_json or as_json by Jonathan Julian gives specific examples of digging into the as_json method Service Oriented Architecture Explained",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18256,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\apis\\apis_and_building_your_own.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 7,
    "total_chunks": 8
  },
  {
    "id": "46e0a73c9782ad6ffc08c703e738c96c",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\apis\\project_pexels_api.md",
    "source_type": "git_repo",
    "title": "project_pexels_api",
    "content": "Introduction\nRemember the warm-up in the previous project when you played with an API Now it's time to actually use one Huzzah For that, we will use another service, called Pexels You'll create a basic photo widget that allows you to display photos from your Pexels gallery We'll rely on a tutorial for much of the heavy lifting but the principles of what you do here will be repeatable for use with other APIs Assignment\n1 Start by creating an account on [Pexels](https://www pexels com/) Click the \"Join\" button 1 Log in and click on the three dots top-right, select [\"Image & Video API\"](https://www pexels com/api/) Next, click the [\"Your API Key\"](https://www pexels com/api/key/) button 1 You'll have to give them some basic information about your app Fill the form and let them know how awesome your photo gallery app will be Click \"Generate API Key\" to get a key generated for you Copy it somewhere you can get to it later You can find it again however, while logged in, by re-visiting [\"Your API Key\"](https://www pexels com/api/key/) 1 Browse the website for some photos then add them to a collection (or upload your own ) Navigate to your created collection, and notice the URL will look like `https://www pexels com/collections/collectionTitle-collectionIDhere/` An example would be `adkmjqz` You'll need that later for some of the API methods 1 Create a new Rails app and add a gem for the [Pexels API](https://www google com/search q=pexels+api+gem) There are gems for pretty much every API out there They will all require you to include your API keys and secret keys somehow Look for gems that are maintained (have recent commits) and well-adopted (GitHub stars is one way to get a good gauge for how valuable a gem is) Alternatively, you can browse through [RubyGems](https://rubygems org/) to see popular gems 1 One note is that it's not good practice to have your API key hard coded into your app because then it's hardly a secret, especially if you're pushing to GitHub A better practice is to store the key in an [environment variable](http://railsapps github io/rails-environment-variables html) or use a gem like [`figaro` (see docs)](https://github",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3751,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\apis\\project_pexels_api.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "d55eb2bbc56d8f3475083c9d69f76cc0",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\apis\\project_pexels_api.md",
    "source_type": "git_repo",
    "title": "project_pexels_api",
    "content": "to get a good gauge for how valuable a gem is) Alternatively, you can browse through [RubyGems](https://rubygems org/) to see popular gems 1 One note is that it's not good practice to have your API key hard coded into your app because then it's hardly a secret, especially if you're pushing to GitHub A better practice is to store the key in an [environment variable](http://railsapps github io/rails-environment-variables html) or use a gem like [`figaro` (see docs)](https://githubcom/laserlemon/figaro) You can read the  [Web Crunch article on Rails credentials](https://web-crunch com/posts/the-complete-guide-to-ruby-on-rails-encrypted-credentials) as well (although not mentioned in the article, the value of each key can also be accessed by chaining keys as methods as shown in the [Rails Guides](https://guides rubyonrails org/security html#custom-credentials) examples) Environment variables allow you to push your key to your app directly from the command line when it fires up Figaro operates under the same principle, though it helps you out by allowing you to store the keys in an actual file that just doesn't get committed with the rest of your code Rails credentials encrypts the keys using the master key Use one of these techniques unless you're a cowboy 1 Build a basic StaticPagesController to display a home page with a basic form The form should just be a single text field which takes the ID for a Pexel collection you have created Once the form is submitted, the page should refresh and display the photos from that collection 1 Read [Pexel API docs](https://www pexels com/api/documentation/) for more information on how the API works Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental It looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3751,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\apis\\project_pexels_api.md",
      "source_type": "git_repo"
    },
    "token_count": 407,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "6038953216e2671e69d95fccf1a81f2d",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\assets_and_navigation\\asset_pipeline.md",
    "source_type": "git_repo",
    "title": "asset_pipeline",
    "content": "Introduction\nYou've learned about Models, Views, and Controllers That's the nuts and bolts, but we've got plenty of neat stuff to cover which makes Rails much more useful to you In this lesson, we'll talk about the Asset Pipeline and a few other topics that don't necessarily fit well in other lessons but are important to cover nonetheless Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson How files are processed in the Asset Pipeline Organization of stylesheets and images in your app The asset pipeline\nAssets in your application are additional files that get called by the browser after your initial gob of HTML is received Assets is used to mean things like CSS stylesheets, JavaScript files, images, videos etc basically anything that requires an additional request to grab it It used to be that the Asset Pipeline handled all assets, but it is now better practice to handle JavaScript assets through other JavaScript management tools that come with modern Rails applications For Rails 7, the standard way to add and manage JavaScript is through import maps, which you will learn about in the next lesson However, if you ever work on legacy applications that use older versions of Rails, you may well find JavaScript is still handled by the Asset Pipeline Currently, the Asset Pipeline is one of a few different ways to handle assets in Rails You will learn about other ways to manage CSS and JS as you move through this course It may well depend on where you end up working what convention they follow but as you learn more, you'll understand how the Asset Pipeline differs from alternatives as well as how to use any of the available methods to handle assets in your application Here we will cover how the Asset Pipeline works, and in future lessons we will cover the alternatives For your own projects we suggest using import maps for JavaScript code and the Asset Pipeline for other assets Getting back to the Asset Pipeline, often times, it's easiest to organize your code for development purposes into many different files so you can keep track of them better But if the browser has to grab a dozen different CSS files, each one of those requests is going to slow things down Too many requests and you've harpooned your user's experience with your application A similar organizational issue has to do with storing things like images It's easier to keep them separated in your directory but you want them to be really easy to link to so your image tags are robust",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13066,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\assets_and_navigation\\asset_pipeline.md",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "ceb7705082c2e30556eacd42ff51a120",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\assets_and_navigation\\asset_pipeline.md",
    "source_type": "git_repo",
    "title": "asset_pipeline",
    "content": "of them better But if the browser has to grab a dozen different CSS files, each one of those requests is going to slow things down Too many requests and you've harpooned your user's experience with your application A similar organizational issue has to do with storing things like images It's easier to keep them separated in your directory but you want them to be really easy to link to so your image tags are robustRails' solution to these problems is to flatten everything out and mash all your asset files together into one big asset for each filetype (called \"concatenation\") The process used to do this is the Asset Pipeline For your CSS files, this means that Rails will take all the individual css files and just stack them on top of each other in one giant asset file It will then run an \"uglifier\" or \"minifier\" program on the file to remove extraneous spaces and make everything nice and small for shipping to the browser JavaScript files are the same -- all of them get smooshed together and then uglified before being shipped to the browser as one single file It's better to have one slightly larger file than to make several full HTTP requests Manifest files\nThe below section on the JavaScript manifest isn't relevant to Rails 7 applications where import maps are used That will be covered in the import maps lesson but just be aware you may come across this in older Rails projects so get an idea of how it works Rails needs to know which files to include in that giant blob, so it uses so-called \"manifest\" files to determine this Your JavaScript manifest file will be app/assets/javascripts/application js It looks commented out, but the lines starting with //= tell Rails which files to go find and include The comments in the file are pretty useful -- they say:\njavascript\n// This is a manifest file that'll be compiled into application js, which will include all the files\n// listed below //\n// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,\n// or vendor/assets/javascripts of plugins, if any, can be referenced here using a relative path //\n// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the\n// compiled file //\n// Read Sprockets README (https://github com/sstephenson/sprockets#sprockets-directives) for details\n// about supported directives",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13066,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\assets_and_navigation\\asset_pipeline.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "d841fdcf11d33481293f921636604439",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\assets_and_navigation\\asset_pipeline.md",
    "source_type": "git_repo",
    "title": "asset_pipeline",
    "content": "be compiled into application js, which will include all the files // listed below // // Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts, // or vendor/assets/javascripts of plugins, if any, can be referenced here using a relative path // // It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the // compiled file // // Read Sprockets README (https://github com/sstephenson/sprockets#sprockets-directives) for details // about supported directives//\n//= require jquery\n//= require jquery_ujs\n//= require turbolinks\n//= require_tree The require_tree helper method just grabs everything in the current directory Note that packages like jQuery aren't included out of the box in newer Rails applications So, if you do end up using the asset pipeline for JavaScript (which you still can for Rails 7 applications), your JavaScript manifest may look a little different Your stylesheet manifest file operates on the same principle -- it's available at app/assets/stylesheets/application css:\ncss\n/*\n* This is a manifest file that'll be compiled into application css, which will include all the files\n* listed below *\n* Any CSS (and SCSS, if configured) file within this directory, lib/assets/stylesheets, or any plugin's\n* vendor/assets/stylesheets directory can be referenced here using a relative path *\n* You're free to add application-wide styles to this file and they'll appear at the bottom of the\n* compiled file so the styles you add here take precedence over styles defined in any other CSS\n* files in this directory Styles in this file should be added after the last require_* statement * It is generally better to create a new file per style scope *\n*= require_tree *= require_self\n*/\nAgain, you see the require_tree helper method which brings in all CSS files in the current directory You should put CSS sparingly into this top level file and instead add your own CSS stylesheet files in an organized way For example, you can create stylesheets corresponding to each of your Controllers in Rails So if you create a Controller called CatController to handle all those requests for your awesome collection of cat GIFs, then you would also create a cat css stylesheet where you can put CSS related to your cat views Use touch or echo on the command line to add the stylesheet: touch app/assets/stylesheets/cat css",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13066,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\assets_and_navigation\\asset_pipeline.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "bfc700811d1a9d2137b8df5972ae1a4c",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\assets_and_navigation\\asset_pipeline.md",
    "source_type": "git_repo",
    "title": "asset_pipeline",
    "content": "own CSS stylesheet files in an organized way For example, you can create stylesheets corresponding to each of your Controllers in Rails So if you create a Controller called CatController to handle all those requests for your awesome collection of cat GIFs, then you would also create a cat css stylesheet where you can put CSS related to your cat views Use touch or echo on the command line to add the stylesheet: touch app/assets/stylesheets/cat cssReading the comments in the stylesheet manifest file above, you can also see that a couple other directories are assumed to be a \"local directory\" and can be easily referenced as well, like the lib/assets and vendor/assets files Sometimes, if you start using a new gem you manually need to add the new stylesheets and JavaScripts to the manifest files to make sure your application actually includes them in the final output In a later lesson, you will learn how to use common CSS frameworks like Bootstrap and Tailwind with Rails applications The output\nSpeaking of final output, what is it Well, Rails mashes all the specified files together and creates a new one called something like: application-1fc71ddbb281c144b2ee4af31cf0e308 js That nonsensical string of characters is meant to differentiate between files if you end up making any changes If they were just called something like application js, then your browser would cache it and never know to ask you for the latest version because it's always named the same thing But wait, how does the browser know to go looking for application-1fc71ddbb281c144b2ee4af31cf0e308 js That's what the asset tags we talked about in the previous lesson are useful for When you write in your application layout <%= javascript_include_tag \"application\" %>, Rails automatically knows which filename to request to get all your JavaScripts properly imported Taking this into account in your code: Namespacing\nThis sounds great and wonderful and faster for your application, but does it change anything you do Oftentimes you can just forget about the manifest files and keep coding along your way For your initial applications, you might keep all the styles and JavaScripts in one file anyway, so it's not going to change anything on your end It becomes important when, for instance, you have a ton of different pages that likely want to use different stylesheets What if you want the container class to do slightly different things in your user login pages versus the checkout pages",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13066,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\assets_and_navigation\\asset_pipeline.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "8d0e27ea898ce24e40ef50f5481d7f38",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\assets_and_navigation\\asset_pipeline.md",
    "source_type": "git_repo",
    "title": "asset_pipeline",
    "content": "the manifest files and keep coding along your way For your initial applications, you might keep all the styles and JavaScripts in one file anyway, so it's not going to change anything on your end It becomes important when, for instance, you have a ton of different pages that likely want to use different stylesheets What if you want the container class to do slightly different things in your user login pages versus the checkout pagesWith the asset pipeline, Rails will jam all those files together and you can't be sure which container styles are going to override which others In theory, you could override styles from your stylesheets stored at app/assets/stylesheets with either inline styles or <style> tags, but that gets really messy and totally defeats the purpose of having external stylesheets for keeping code clean Let's also assume that you really like using container classes to keep your <div> elements neatly organized The solution is to use \"Namespacing\", which means that you basically nest your classes beneath some sort of variable or function name This is actually a principle that gets used a LOT, so it's important to understand it You'll see it with stylesheets, JavaScripts, modules of code and more The basic idea is to be able to say \"all this code/css/whatever inside here only belongs to XYZ\" You sort of fence it off It's best explained with an example:\n```html\n```\nNow this container and all the code inside of it is also within the user class So we can set up our stylesheet to specifically address the container class that's inside a user class:\ncss\n/* app/assets/stylesheets/user css */ user container{\n// style stuff\n}\nThis is good because we're now specifically targeting containers used by User pages The same principle applies to JavaScript, though we won't cover it here because that's material for a later course So anytime you want to make only a portion of your stylesheets or JavaScript code available to a specific set of views, try namespacing it Rails in development\nThe asset pipeline functions a bit differently in development mode If you look at your Rails server output when you're working with a webpage in the local environment, it actually sends out a whole bunch of stylesheets and the like This is just to give you the ability to debug easier Images\nFor images, the asset pipeline keeps them in the /assets directory unless you've made your own subdirectories Use image_tag's to avoid confusion, e g <%= image_tag \"fuzzy_slippers jpg\" %>",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13066,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\assets_and_navigation\\asset_pipeline.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "a5a4a2a94c2c7981cb627dc0c69d6c70",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\assets_and_navigation\\asset_pipeline.md",
    "source_type": "git_repo",
    "title": "asset_pipeline",
    "content": "bit differently in development mode If you look at your Rails server output when you're working with a webpage in the local environment, it actually sends out a whole bunch of stylesheets and the like This is just to give you the ability to debug easier Images For images, the asset pipeline keeps them in the /assets directory unless you've made your own subdirectories Use image_tag's to avoid confusion, e g <%= image_tag \"fuzzy_slippers jpg\" %>Preprocessors\nRemember the preprocessors we talked about in the previous lesson on Views Filetypes like ERB and SASS and HAML and Coffeescript all get preprocessed as part of the pipeline Assignment\nSome necessary and straightforward reading on the Asset Pipeline:\n1 Read [Rails Guides on the Asset Pipeline](http://guides rubyonrails org/asset_pipeline html) sections 1 to 4 Conclusion\nThe Asset Pipeline isn't something that you often think about, especially when just building little toy apps, but it becomes important to understand as soon as you want to deploy your application (because you'll need to take it into account, which we'll talk about in that lesson later) or work with anything but the vanilla asset structure Knowledge check\nThis section contains questions for you to check your understanding of this lesson If you’re having trouble answering the questions below on your own, review the material above to find the answer How does \"asset concatenation\" optimize loading of your app How do you include an asset in your views or layout What does the require_tree method do in a manifest-file Why would you namespace your stylesheets Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Ryan Bates' asset pipeline Railscast\nSchneems on the Asset Pipeline",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13066,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\assets_and_navigation\\asset_pipeline.md",
      "source_type": "git_repo"
    },
    "token_count": 354,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "51fb93bf254c0db7181896486da24837",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\apis\\working_with_external_apis.md",
    "source_type": "git_repo",
    "title": "working_with_external_apis",
    "content": "Introduction\nIt's pretty easy to turn your application into an API, but what about grabbing data from other APIs across the internet That's where things usually get a bit more challenging because they're all different and you've got to authenticate yourself Most popular services offer APIs so developers can interface with them (they love it if you can get more people using their platform) Facebook, X, Instagram, Flickr, Dropbox, AirBnB They've all got APIs Just Google \"companyX API docs\" and you'll get to their developers section If you go to the documentation for an API, it can sometimes be a bit overwhelming because much of the material sort of assumes that you know what you're doing, but some are definitely better than others There are also elements that are common across almost all of them The more you work with APIs (and get the hang of the authentication flow), the easier they get You'll be making mashups in no time This lesson will cover some general steps that are common across APIs and will do high level overviews of some of the methods for authenticating with APIs like Omniauth Try to gain as much conceptual understanding as you can here and use the documentation each gem or API provides to help with the implementation If you find great free learning resources that explain APIs, you can suggest resources via a GitHub issue in our curriculum repo Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson How to set up your app to use an API How API use is typically controlled RESTful APIs and how they can make your life easier What OAuth is What OmniAuth is What an SDK is First steps\nYou will need to register yourself and your application with the API provider They will track and monitor your usage this way Typically, there is a free tier of usage and it will cost you if you're going over your limits, whether they are expressed in terms of total MB downloaded, number of requests, or number of transactions (for instance) Usually, even if you're a user of their service, you will need to separately go to their developer portal You will need to get an API key from the API provider, which often is the last part of registration This key will uniquely identify your application to the API provider and you will send it along with every request It's sort of like a user on your site automatically submitting their session cookie with each request so you know they're logged in You'll typically also get a \"secret key\" or similarly named code",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16899,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\apis\\working_with_external_apis.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 8
  },
  {
    "id": "c92ffd19801f56cdfabf43edb2680199",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\apis\\working_with_external_apis.md",
    "source_type": "git_repo",
    "title": "working_with_external_apis",
    "content": "developer portal You will need to get an API key from the API provider, which often is the last part of registration This key will uniquely identify your application to the API provider and you will send it along with every request It's sort of like a user on your site automatically submitting their session cookie with each request so you know they're logged in You'll typically also get a \"secret key\" or similarly named codeWhereas the API key is usually public, the secret key is an added layer of security that's required for the more secure APIs and you will use it to generate a cryptographic token that authenticates any requests you make You will need to make sure you don't include this secret key in your Git repo Use the figaro gem or environment variables to put the key on the server instead of hard coding it API rates and security tokens\nMost APIs require a different type of \"security clearance\" for different requests:\nYou can usually make innocuous requests like asking for posts from X's (formerly known as Twitter) API with straightforward and unauthenticated GET requests You can make these from any command line or an application like Postman These types of API requests are usually severely rate limited to incentivize you to sign up The next layer is making requests that include your API key These are still usually fairly innocuous things (like getting public data) and limited by the API's pricing tiers More sensitive requests like asking for specific user data or submitting/modifying/deleting data will likely require you to use an authentication process involving your secret token We'll cover the basics of this in the project Rates for these requests are subject to the API pricing tiers Oftentimes, you actually want to make requests on behalf of a user For instance, showing a user a dashboard of all their posts and Facebook posts together would require asking X for that user's posts and Facebook for that user's posts This can involve a LOT of requests over a large user base, but luckily you're actually able to make them on the user's behalf by asking for the user's permission We'll cover this as well later, but basically you send the user to the API provider's site to sign in, then the API provider will give you a user-specific token to use when making requests on their behalf in the future Rates for this are usually more advantageous because they are covered in a per-user bucket We typically use the OAuth protocol for this, as described below",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16899,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\apis\\working_with_external_apis.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 1,
    "total_chunks": 8
  },
  {
    "id": "d62107bf4e53464efad2c3782156cc21",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\apis\\working_with_external_apis.md",
    "source_type": "git_repo",
    "title": "working_with_external_apis",
    "content": "the user's behalf by asking for the user's permission We'll cover this as well later, but basically you send the user to the API provider's site to sign in, then the API provider will give you a user-specific token to use when making requests on their behalf in the future Rates for this are usually more advantageous because they are covered in a per-user bucket We typically use the OAuth protocol for this, as described belowVersions\nTech companies, especially if they've been around for a while, typically have several versions of their API Usually, they built a first draft version when they were a startup and then had to build a real one later, but still have to support the original since so many other applications are likely to be using it Just go for the latest version unless you have a compelling reason not to (it's usually got a separate section of documentation for each version) Pay attention to which version's docs you're looking at there's nothing like the frustration of realizing you've been looking at the v1 API instead of the v2 API docs RESTful APIs\nJust like your routes should ideally be set up in a RESTful way, so too should APIs These days, most APIs are RESTful, meaning the usual batch of HTTP methods (GET/POST/PUT/PATCH/DELETE) requests will retrieve resources as expected The good part about setting up your application routes RESTfully is that your API will be the same way Working with RESTful APIs at least takes a lot of the headache out of the process since you can usually sort of guess what you should be doing, then can head over to the docs to figure out how exactly and what format you'll get the results back in For instance, just like you'd expect the GET request to the /users route in your app to display a page listing all its users, a GET request to a RESTful API for the same route should probably give you back a JSON or XML object filled with all the users (or at least some paginated sample of them) Oauth and login via API\nYou've seen sites where their homepage lets you log in using Facebook or X or LinkedIn After logging in with one of those third-party services you magically have a new account with them but don't need to give them a new password OAuth is usually behind this It solves the very real problem of user data privacy and access control",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16899,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\apis\\working_with_external_apis.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 2,
    "total_chunks": 8
  },
  {
    "id": "758de3beecb4b93aa2894dd95174792d",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\apis\\working_with_external_apis.md",
    "source_type": "git_repo",
    "title": "working_with_external_apis",
    "content": "all the users (or at least some paginated sample of them) Oauth and login via API You've seen sites where their homepage lets you log in using Facebook or X or LinkedIn After logging in with one of those third-party services you magically have a new account with them but don't need to give them a new password OAuth is usually behind this It solves the very real problem of user data privacy and access controlThe idea is that the user shouldn't need to give your awesome application their password in order for you to make requests on their behalf So OAuth allows Facebook to act as a sort of intermediary when dealing with the user This has two great use cases -- logging in the user with an external site like Facebook and making requests for or submissions of data on the User's behalf In the first case, you never actually discover the user's Facebook password They get redirected to Facebook's website to sign in, where they authorize you to use some of their data (which you'll have to configure when you set up this process) Facebook then calls you back (by sending a request to a URL of your choosing with the proper data) and gives you a special access token for that user You can then use that to get any additional data that the user has authorized you to access (like their name and email address) Now you can create a new user in your database with that data and everyone's relatively happy From the user's perspective, they only need to remember their Facebook password to log into your site so it's easy for them They also don't need to trust you with their password As long as they trust Facebook, they can use your site Also, if your site is doing bad things with their data (like when SocialCam spammed the hell out of everyone's Facebook timeline for a while), they can tell Facebook to stop allowing you to use their data and Facebook will turn off access for the token they gave you From Facebook's perspective, they retain majority ownership of the user and nestle deeper into everyone's lives (for better or for worse) Once you have the user token, you are allowed to make requests or submissions based on whatever permissions Facebook (and the user) authorized you to That could involve asking who their friends are, posting on their timeline, or \"liking\" something You just need to include the token as a part of your authentication process for the request Restrictions\nEvery site, in addition to rate limiting their API, will have terms of use",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16899,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\apis\\working_with_external_apis.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 3,
    "total_chunks": 8
  },
  {
    "id": "654c2f454bb4baa062856e7ab31a4633",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\apis\\working_with_external_apis.md",
    "source_type": "git_repo",
    "title": "working_with_external_apis",
    "content": "better or for worse) Once you have the user token, you are allowed to make requests or submissions based on whatever permissions Facebook (and the user) authorized you to That could involve asking who their friends are, posting on their timeline, or \"liking\" something You just need to include the token as a part of your authentication process for the request Restrictions Every site, in addition to rate limiting their API, will have terms of useThis usually covers what you're allowed to do with the data you gather For instance, they probably aren't going to allow you to store a whole bunch of their data in your own database (harvesting) They also probably won't allow you to do anything SPAMmy or which will hurt their user's experience Common sense should be your initial guide, but consult the TOU documentation for specifics Basically, if you'll be hurting their user's experience or taking their precious data, you can't do it It should be noted that any time you develop using someone else's API, you're putting yourself at their mercy If you're using it to the point where you pay for data, they'll love you If you get too successful and become competitive with them, they've got you by the neck and will cut you off or demand exorbitant fees Just be cognizant of those risks OAuth 2 0 basics\nOAuth 2 0 is actually pretty complicated, so we'll just cover the basic process You don't really need to care how exactly it works behind the scenes until you start really developing with it or trying to create your own API that uses it You will need to understand the steps involved in the user experience because, well, the user is the reason you're building your application Basically (still using Facebook as an example):\nUser tries to access a page on your app and you ask the user to login\nUser chooses the \"Login With Facebook\" option\nUser is redirected to a Facebook page asking them to review the permissions you are asking for and telling them to sign in The URI will contain parameters that tell Facebook who your application is and possibly which URI they should submit their response to (or maybe you specified this as a part of your API registration process with them) User decides you seem like a fun application so they'll allow you to see their email address and post to their timeline User signs in to their Facebook account Facebook creates an authorization code and sends it back to your application's callback URI",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16899,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\apis\\working_with_external_apis.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 4,
    "total_chunks": 8
  },
  {
    "id": "6a1bc05a97f4197e6fb2bc7863aa4269",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\apis\\working_with_external_apis.md",
    "source_type": "git_repo",
    "title": "working_with_external_apis",
    "content": "parameters that tell Facebook who your application is and possibly which URI they should submit their response to (or maybe you specified this as a part of your API registration process with them) User decides you seem like a fun application so they'll allow you to see their email address and post to their timeline User signs in to their Facebook account Facebook creates an authorization code and sends it back to your application's callback URIThe user waits while your application takes that authorization code and uses it to ask Facebook for the real good stuff Facebook makes sure your application is the same one the user authorized, then POSTs back to you a unique authentication token for the user (which likely expires in 90 days) and any data you asked for up front (like email address) You store the user's unique token in your database and use it, along with your application key(s), to make any subsequent requests on the user's behalf See this brief overview of OAuth 2 0 Then check out this more substantive explanation of OAuth 2 0 from tutsplus com Implementing OAuth 2 0 in Rails -- Use OmniAuth This sounds horribly complicated Someone must have made a gem for it Luckily someone has Many someones, actually There is a generic OAuth gem called omniauth (Omniauth documentation) and then a separate gem which provides a specific authentication strategy for every major API (list of Omniauth strategies) Once you've gone through things with one of them, you'll become comfortable with all of them It's also worth noting that if you install and use Devise (to handle your user model, for example), it comes with support for Omniauth built in They have documentation on how to integrate Devise with Omniauth Using Omniauth is much easier to learn by doing than reading a bunch of bullet points You'll have the opportunity to implement it in your final project where you can ask questions if needed SDKs\nIn addition to or instead of API access, many companies provide SDKs (software development kits) Usually these are JavaScript libraries that contain all the code necessary to access their API This can be useful because you're then able to access the API with JavaScript methods instead of doing backflips on your own backend It comes with the downside, however, of expanding your code base and forcing you to use their conventions for everything We won't cover SDKs explicitly in this course but they should be well within reach to pick up by reading the documentation Assignment\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16899,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\apis\\working_with_external_apis.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 5,
    "total_chunks": 8
  },
  {
    "id": "b2baa88ba83ce3b49bd76e9d453edf81",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\apis\\working_with_external_apis.md",
    "source_type": "git_repo",
    "title": "working_with_external_apis",
    "content": "contain all the code necessary to access their API This can be useful because you're then able to access the API with JavaScript methods instead of doing backflips on your own backend It comes with the downside, however, of expanding your code base and forcing you to use their conventions for everything We won't cover SDKs explicitly in this course but they should be well within reach to pick up by reading the documentation Assignment 1Watch this Railscast on [using Omniauth to allow X (formerly known as Twitter) Signin](http://railscasts com/episodes/241-simple-omniauth-revised) 1 Read through the [Omniauth documentation](https://github com/intridea/omniauth)\n1 Pick an API that you really might like to interface with or a web product you use almost every day (e g Google, Facebook, Instagram ) Google for its docs, e g with \"instagram api documentation\", and have a look at them Some docs are better than others, but they will be your source for understanding which methods you can call, what they will return, how to register your application to get an API key, and more useful tidbits Conclusion\nAPIs are fundamental to making rich web applications and they're also a lot of fun -- it makes your app feel a lot more \"real\" when you're able to let your users log in using Facebook or if you can display information from different sources across the web If you're building a startup, it improves the user experience enough that you'll likely see an uptick in conversion rates Working with external APIs can be incredibly rewarding because you're able to leverage functionality that others have spent a lot of time perfecting but also incredibly frustrating because they're all different and you have to rely on gems which are doing things behind the scenes that you're not entirely sure of Over time, you'll start to see a lot of similarities between APIs and the procedure for working with them will feel more and more comfortable To help get you there, the next project will have you working with an API and your final project will have you implementing signin via API as well Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What's the best way to locate an API's docs What is an API key",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16899,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\apis\\working_with_external_apis.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 6,
    "total_chunks": 8
  },
  {
    "id": "2c5f6a64d55947d27e6cc0a48a6da281",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\apis\\working_with_external_apis.md",
    "source_type": "git_repo",
    "title": "working_with_external_apis",
    "content": "have you working with an API and your final project will have you implementing signin via API as well Knowledge check The following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What's the best way to locate an API's docs What is an API keyHow do you avoid including an API's secret token in your GitHub repo (e g hard coding it) Why is it important to know which API version you're using Why would a user prefer to sign into your site using Facebook instead of giving you a new password What are the different types of \"security clearance\" for the different types of API requests you can make Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental See this Stack Overflow post on interfacing with third-party APIs for tips RailsConf 2016 - From Zero to API Hero: Consuming APIs like a Pro by Cecy Correa\nTake a look at this Medium article over integrating a third party API with Rails 5 See this other Medium Article on creating a basic Rails app using the OMDB API, an open source movie database",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16899,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\apis\\working_with_external_apis.md",
      "source_type": "git_repo"
    },
    "token_count": 251,
    "chunk_index": 7,
    "total_chunks": 8
  },
  {
    "id": "8c57b1641a3cc31a1f58143dcb44cfb1",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\assets_and_navigation\\importmap.md",
    "source_type": "git_repo",
    "title": "config/importmap.rb",
    "content": "Introduction\nPrior to Rails 7, there was a long running issue with how JavaScript third-party packages should be managed in a Rails application The original approach was to wrap the JavaScript in a Ruby Gem and release it While this did bring about versioning and stability, it also made it slow to update to the latest releases of libraries as you needed to wait for the maintainers of the Ruby Gem to update it, test it, and release a new version of the gem Rails 6 tried to fix this solution by creating a wrapper Gem around webpack The gem, called Webpacker, used Rails' famous convention over configuration to give the ability to use the latest JS libraries but with some sensible defaults This wasn't without issue though, the main one being that you needed to have a deeper understanding of Webpacker if you wanted to move away from those conventions Unfortunately it didn't solve the issues it was meant to and a new approach was needed With Rails 7 we have importmap This approach to managing JavaScript in your applications was chosen for a couple of reasons First ES6 is now supported by all browsers that matter Chrome, Edge, Safari, and Firefox Secondly, HTTP/2 is now the norm meaning you can have a single connection that responds to the client with multiple small files Now you can get rid of your bundler for JavaScript Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson What Import maps are How Import maps work How to use Import maps What pins are Import maps\nImport maps let you import JavaScript modules using logical names that map to versioned/digested files – directly from the browser So you can build modern JavaScript applications using JavaScript libraries made for ES modules (ESM) without the need for transpiling or bundling This frees you from needing Webpack, Yarn, npm, or any other part of the JavaScript toolchain All you need is the asset pipeline that's already included in Rails With this approach, you'll ship many small JavaScript files instead of one big JavaScript file Thanks to HTTP/2 that no longer carries a material performance penalty during the initial transport, and in fact offers substantial benefits over the long run due to better caching dynamics Whereas before any change to any JavaScript file included in your big bundle would invalidate the cache for the whole bundle, now only the cache for that single file is invalidated How do import maps work The first thing to know is that import maps are not a Rails specific solution",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12155,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\assets_and_navigation\\importmap.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "18da9ba73ab655e01a7eefa686a5ede0",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\assets_and_navigation\\importmap.md",
    "source_type": "git_repo",
    "title": "config/importmap.rb",
    "content": "longer carries a material performance penalty during the initial transport, and in fact offers substantial benefits over the long run due to better caching dynamics Whereas before any change to any JavaScript file included in your big bundle would invalidate the cache for the whole bundle, now only the cache for that single file is invalidated How do import maps work The first thing to know is that import maps are not a Rails specific solutionThey are an existing solution that the Rails team thought would be the best way to bring JavaScript to Rails applications as a sane default The basic premise is that you can import JavaScript libraries into your application just referencing them by name rather than having to reference the exact location of where the library can be found Import maps are essentially string substitution for \"bare module specifiers\" If you're not familiar with \"bare module specifiers\" they look like this: import React from \"react\" However just writing imports this way isn't something currently valid as a way to load in JavaScript code to the current file The valid ways to do this currently are defined under something called the ESM loader spec which if you really want to, you can read more about from the Node docs\nIn order to be ESM compatible, you must provide one of the following specifiers when loading JavaScript code\nAbsolute path:\nimport React from \"/Users/Odin/projects/TOP/node_modules/react\"\nRelative path:\nimport React from \" /node_modules/react\"\nHTTP path:\nimport React from \"https://ga jspm io/npm:react@18 2 0/index js\"\nThe importmap-rails gem provides an API for mapping the \"bare module specifiers\" to 1 of the 3 ways of loading ESM JavaScript packages Example\n```ruby\nconfig/importmap rb\npin \"react\", to: \"https://ga jspm io/npm:react@18 2 0/index js\"\n```\nThis means that every time you see import React from \"react\" in the code it will actually be like writing import React from \"https://ga jspm io/npm:react@18 2 0/index js\" Using import maps\nWhen creating a new Rails 7+ application importmap-rails will be automatically added to your Gemfile importmap-rails is doing a few things for you First the <%= javascript_importmap_tags %> line is added to views/layouts/application html erb which will set up the JSON configuration inside of a <script type=\"importmap\"> tag Then the es-module-shim is loaded",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12155,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\assets_and_navigation\\importmap.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "7f4dac3a367e9f735da1ec8b7fe61978",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\assets_and_navigation\\importmap.md",
    "source_type": "git_repo",
    "title": "config/importmap.rb",
    "content": "from \"react\" in the code it will actually be like writing import React from \"https://ga jspm io/npm:react@18 2 0/index js\" Using import maps When creating a new Rails 7+ application importmap-rails will be automatically added to your Gemfile importmap-rails is doing a few things for you First the <%= javascript_importmap_tags %> line is added to views/layouts/application html erb which will set up the JSON configuration inside of a <script type=\"importmap\"> tag Then the es-module-shim is loadedFinally, the application entry point is imported via <script type=\"module\">import \"application\"</script> Inside your app/javascript/application js you set up the application by importing any modules that have been defined in the import map It is good to use logical names that match the package names used by NPM, that way if you want to start transpiling or bundling your code you won't have to change any module imports You start the setup via the configuration file located config/importmap rb This file is automatically reloaded in development when anything changes That being said, if you remove pins and need them gone from the rendered importmap or list of preloads you MUST restart the server Import maps with NPM packages\nimportmap-rails downloads and vendors your npm package dependencies via JavaScript CDNs You can use the /bin/importmap command that's added as part of the install to pin, unpin, or update npm packages in your import map This command resolves the package dependencies and adds the pins to your config/importmap rb bash\n$ /bin/importmap pin react react-dom\nPinning \"react\" to vendor/javascript/react js via download from https://ga jspm io/npm:react@18 2 0/index js\nPinning \"react-dom\" to vendor/javascript/react-dom js via download from https://ga jspm io/npm:react-dom@18 2 0/index js\nPinning \"scheduler\" to vendor/javascript/scheduler js via download from https://ga jspm io/npm:scheduler@0 23 0/index js\nThis will produce pins in your config/importmap rb like this:\nruby\npin \"react\" # @18 2 0\npin \"react-dom\" # @18 2 0\npin \"scheduler\" # @0 23 0\nThe packages are downloaded to vendor/javascript, which you can check into your source control, and they will be available through your application's asset pipeline",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12155,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\assets_and_navigation\\importmap.md",
      "source_type": "git_repo"
    },
    "token_count": 507,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "92fb95289c3b12a87ff844429a5f176f",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\assets_and_navigation\\importmap.md",
    "source_type": "git_repo",
    "title": "config/importmap.rb",
    "content": "via download from https://ga jspm io/npm:react-dom@18 2 0/index js Pinning \"scheduler\" to vendor/javascript/scheduler js via download from https://ga jspm io/npm:scheduler@0 23 0/index js This will produce pins in your config/importmap rb like this: ruby pin \"react\" # @18 2 0 pin \"react-dom\" # @18 2 0 pin \"scheduler\" # @0 23 0 The packages are downloaded to vendor/javascript, which you can check into your source control, and they will be available through your application's asset pipelineNow you can import them in your JavaScript code javascript\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nIf you want to remove a downloaded pin:\nbash\n$ /bin/importmap unpin react\nUnpinning and removing \"react\"\nPreloading pinned modules\nTo avoid having the browser load one file after another before it can get to the deepest nested import, importmap-rails uses modulepreload by default If you don't want to preload a dependency, add preload: false to the pin ```ruby\nconfig/importmap rb\npin \"@github/hotkey\", to: \"@github--hotkey js\" # file lives in vendor/javascript/@github--hotkey js\npin \"md5\", preload: false # file lives in vendor/javascript/md5 js\n```\n```erb\napp/views/layouts/application html erb\n<%= javascript_importmap_tags %>\nwill include the following link before the importmap is setup:\n```\nImportmap considerations\nWhile importmaps are a great way to get started with Rails, and will allow you to quickly make use of JavaScript libraries without having to worry about bundling and transpiling, there are some wider considerations you need to be aware of The first  consideration is dependency management This is when the package you are using depends on other packages for their use Using importmaps locks the version of dependencies as required by the package you are using, but what if you add another package that relies on the same dependency but a different version You'll start getting errors and tracking them down can be tricky At this stage, importmaps doesn't manage dependencies and so are best used when your reliance on third party packages is minimal Dependency management also feeds into the next consideration How do you manage versioning of your libraries to keep them up to date If you use something like webpack that requires an explicit package",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12155,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\assets_and_navigation\\importmap.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "3012bab4d5c8bb2fdffceed12bc8afa5",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\assets_and_navigation\\importmap.md",
    "source_type": "git_repo",
    "title": "config/importmap.rb",
    "content": "package that relies on the same dependency but a different version You'll start getting errors and tracking them down can be tricky At this stage, importmaps doesn't manage dependencies and so are best used when your reliance on third party packages is minimal Dependency management also feeds into the next consideration How do you manage versioning of your libraries to keep them up to date If you use something like webpack that requires an explicit packagejson file that maps libraries to version and then a lock file to manage all the dependencies you can then rely on services such as GitHub's Dependabot to keep those packages up to date for you by submitting pull requests against your GitHub repo to update the packages When using importmaps there isn't currently a way to do this, so you'll need to manage those updates yourself If there's a security critical update for a library you rely on and you aren't aware of that You can leave your app exposed to anyone who can exploit that One other main consideration is when using importmaps you have much less control over asset bundling, so if you do require anything more complicated than just importing the third party package code to your app then importmaps won't work It can't transpile or bundle any code In that case you'll need another option which we cover in a later lesson All of the above may have you wondering why you'd use importmaps all things considered We'd say they actually reflect the Rails way really well Have a default option that you can use for as long as possible and then when your requirements grow outside of that you have other options to reach for which will add another layer of complexity but will be justified With Webpacker that complexity was thrown at you even if you didn't require it So start with importmaps for all of your applications and only look to change that when you need to Assignment\nSince Rails 7 is relatively new there aren't a ton of resources available yet That being said here are some that are worth taking a look at:\n1 First things first [Briefly look over the `importmap-rails` gem README on GitHub](https://github com/rails/importmap-rails) This has A LOT of the information here plus more Straight from the horse's mouth 1 Read [David Heinemeier Hansson's article](https://world hey com/dhh/modern-web-apps-without-javascript-bundling-or-transpiling-a20f2755) on Modern web apps without JavaScript bundling or transpiling",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12155,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\assets_and_navigation\\importmap.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "cdb1db43486c6fb84c9628ba609dba2a",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\assets_and_navigation\\importmap.md",
    "source_type": "git_repo",
    "title": "config/importmap.rb",
    "content": "need to Assignment Since Rails 7 is relatively new there aren't a ton of resources available yet That being said here are some that are worth taking a look at: 1 First things first [Briefly look over the `importmap-rails` gem README on GitHub](https://github com/rails/importmap-rails) This has A LOT of the information here plus more Straight from the horse's mouth 1 Read [David Heinemeier Hansson's article](https://world hey com/dhh/modern-web-apps-without-javascript-bundling-or-transpiling-a20f2755) on Modern web apps without JavaScript bundling or transpilingHe describes the why and how of the `importmap` addition to Rails 7 1 Appsignal produce a good [Importmaps under the hood](https://blog appsignal com/2022/03/02/import-maps-under-the-hood-in-rails-7 html) article that is well worth a read to get a bit more information on what we covered above Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge Can you use import maps with npm packages How do you download vendor files using import maps How can you preload pinned modules Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Additional reading on Rails 7 importmap\nBlog post on using importmap\nThe import map specification should cover any other questions you may have on the subject",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12155,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\assets_and_navigation\\importmap.md",
      "source_type": "git_repo"
    },
    "token_count": 334,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "43f6a3eecd7181f007fd55e8162a059b",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\assets_and_navigation\\turbo_drive.md",
    "source_type": "git_repo",
    "title": "turbo_drive",
    "content": "Introduction\nRails has always promoted itself as a framework that makes building a web application easy But in a world built around the demands of users expecting lightning fast responses as well as increasingly complex UI, it wasn't easy for Rails to offer a compelling vision for how they saw a way through that complexity while sticking to core Rails philosophies However, just before the release of Rails 7 we finally got a glimpse of how the Rails team saw the future of meeting these demands Hotwire Hotwire is actually an umbrella term for three different frameworks These frameworks are:\nTurbo\nStimulus\nStrada\nStimulus is something we'll cover later and you don't need to worry about Strada for the scope of this course, just be familiar with the name as you will see it mentioned from time to time Turbo itself is also an umbrella term for several different techniques for creating fast and modern web applications The technique we're going to focus on here is the one whose behaviour is part of Rails' core behaviour, Turbo Drive The other techniques we'll cover in the Advanced Turbo lesson later Links and Forms are the bedrock of most web applications You need links to navigate around your site and forms to allow users to submit information to you Turbo Drive is how Rails handles these in your applications If a lot of what follows seems confusing, don't worry A lot of Turbo Drive happens under the hood and therefore it means we often need to discuss the concept rather than the implementation This can make it harder initially to grok, but luckily it does also mean you can often just go about your business and never have to actively think about it Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson The purpose of Turbo Drive How Turbo Drive handles page navigation The two kinds of page visit types in Turbo How to disable Turbo Drive What Turbolinks is Turbo drive\nTurbo Drive is the portion of Turbo that accelerates overall page navigation Turbo Drive watches for when a user clicks a link or submits a form, handles the request being made by the user, and then updates the page for the user without a full reload This is the default behavior without any set up required However, it is still important to understand what exactly Turbo Drive is doing in case you need to manually modify or disable its behavior in some portions of your web page Page navigation\nTurbo Drive defines page navigation as a visit to a location (URL) with an action",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12496,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\assets_and_navigation\\turbo_drive.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "1f198e23dd37e092fb5997c67a4c5d19",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\assets_and_navigation\\turbo_drive.md",
    "source_type": "git_repo",
    "title": "turbo_drive",
    "content": "request being made by the user, and then updates the page for the user without a full reload This is the default behavior without any set up required However, it is still important to understand what exactly Turbo Drive is doing in case you need to manually modify or disable its behavior in some portions of your web page Page navigation Turbo Drive defines page navigation as a visit to a location (URL) with an actionA visit is the navigation lifecycle that begins when a user clicks a link and lasts until the page is rendered This includes the HTTP request, the user's browser history being updated, restoring the page from cache (if applicable), rendering the final response, and updating the user's scroll position There are two kinds of visits:\nApplication visit, a visit with a Drive action of advance or replace Restoration visit, a visit with a Drive action of restore Application visit\nThe application visit lifecycle can be summarized as:\nApplication visits begin when a user clicks a Turbo Drive enabled link (remember, Turbo Drive is enabled on links by default ) An HTTP network request is issued Turbo Drive receives it and will render the HTML If possible, Turbo Drive will use the browser's cache to render a preview of the page immediately after the visit begins, using the HTML for the previous visit of the same URL The browser history is updated to reflect this page navigation The way it is changed is determined by the visit action Advance: This is the default action and will result in a new entry being added to the browser history Replace: This action replaces the most recent browser history entry with the new location To change the action of a Turbo Drive link, you can use data attributes inside of your Rails link tags\nerb\n<%= link_to \"Edit Article\", edit_article_path(@article), data: { turbo_action: \"replace\" } %>\nwhich will generate:\nhtml\n<a href=\" \" data-turbo-action=\"replace\">Edit Article</a>\nRestoration visit\nThe restoration visit lifecycle can be summarized as:\nRestoration visits begin when the user navigates using the browser's forward & back buttons If possible, Turbo Drive will use the browser's cache to render a preview of the page immediately after the visit begins Otherwise, it will retrieve a fresh copy of the page over the network The browser's scroll position is saved on every page before navigating away and will return to this saved position Restoration visits are visits with the action of restore This is used by Turbo Drive internally and you should not annotate a link with an action of restore",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12496,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\assets_and_navigation\\turbo_drive.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "cb311edc17ffb5abfe25cdf8dd4582a0",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\assets_and_navigation\\turbo_drive.md",
    "source_type": "git_repo",
    "title": "turbo_drive",
    "content": "use the browser's cache to render a preview of the page immediately after the visit begins Otherwise, it will retrieve a fresh copy of the page over the network The browser's scroll position is saved on every page before navigating away and will return to this saved position Restoration visits are visits with the action of restore This is used by Turbo Drive internally and you should not annotate a link with an action of restoreHTTP request methods\nBy default, link clicks are sent with GET requests However, Turbo Drive will scan <a> tags in your application for the turbo-method attribute to override the GET action For instance:\nerb\n<%= link_to \"Delete Article\", article_path(@article), data: { turbo_method: \"delete\" }  %>\nwhich will generate:\nhtml\n<a href=\" \" data-turbo-method=\"delete\">Delete Article</a>\nThis creates a link that will use the DELETE method However, it is suggested that you use a button or form for anything that isn't a GET request\nDisable turbo drive\nThere will be times where you do not want Turbo Drive to control navigation and want a full page reset You can disable Turbo Drive by adding data-turbo=\"false\" directly on your links or on the parent containing them For instance:\n```erb\n<%= link_to \"foo\", \"bar\" %>\n<%= link_to \"baz\", \"qux\", data: { turbo: \"true\" } %>\n```\nIn the above example, we created a parent div with data-turbo=\"false\", which disables Turbo Drive on all elements inside of it However, we also added data: { turbo: \"true\" } to the second link_to This will turn Turbo Drive back on for that particular element This showcases that you can disable and re-enable Turbo Drive in regions of your website and select specific elements to enable or disable it on Remember that when using ERB tags (like link_to) we use the syntax style of data: { foo: \"bar\" } rather than the HTML style of data-foo=\"bar\" Forms\nWe cover Rails forms much deeper later, but because they are entwined with Turbo Drive we do need to cover some common information that will come together in the forms lessons that follow If you don't understand some of the information as it is explained below just wait until the Form Basics lesson and it should all come together Form submissions\nWhile most link requests are issued as GET requests, forms are different",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12496,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\assets_and_navigation\\turbo_drive.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "2b0fd5d67bdc6717a97654408c8bda6d",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\assets_and_navigation\\turbo_drive.md",
    "source_type": "git_repo",
    "title": "turbo_drive",
    "content": "of data-foo=\"bar\" Forms We cover Rails forms much deeper later, but because they are entwined with Turbo Drive we do need to cover some common information that will come together in the forms lessons that follow If you don't understand some of the information as it is explained below just wait until the Form Basics lesson and it should all come together Form submissions While most link requests are issued as GET requests, forms are differentYou often submit forms as a POST, PATCH or DELETE request in order to manipulate some data that lives on the server Turbo Drive intercepts all Form Submissions by default and submits them to the server on your behalf As we advance into the form lessons, you must remember that Turbo expects the server to return an HTTP status of HTTP 303 or, in other words, a redirect Think of it like this, after you submit a form usually you want to be directed somewhere afterwards That could be back to the same page with a blank form ready for another submission, or it could be to view the resource you just created with the form, but you expect to be redirected away from the current page with the completed form on it There are two exceptions to this expectation:\nWhen the server responds with a 4XX status code This is common if you submit a form with the wrong information in it and the server will respond with a 422 Unprocessable Entity status When the server responds with a 5XX status code of which the most common is 500 Internal Server Error If the server responds with any other status, Turbo won't be able to handle it and it will appear as though nothing has happened as the page won't update The one thing to keep in mind with this is the HTTP 200 status This is returned when a request has succeeded so it might seem strange at first that Turbo can't handle this type of request The reason is that if you've ever submitted a form and refreshed the page before the POST action completed you get a popup from your browser asking if you want to submit the form again Your browser does this because when you refresh you've actually issued a new request and the server has responded with a 200 status because the request was ok and handled without an error or redirect Browsers handle this case by offering to submit the form again as a POST request for you",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12496,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\assets_and_navigation\\turbo_drive.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "eb33acbfd248735e43ed36ca6f1aa14a",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\assets_and_navigation\\turbo_drive.md",
    "source_type": "git_repo",
    "title": "turbo_drive",
    "content": "refreshed the page before the POST action completed you get a popup from your browser asking if you want to submit the form again Your browser does this because when you refresh you've actually issued a new request and the server has responded with a 200 status because the request was ok and handled without an error or redirect Browsers handle this case by offering to submit the form again as a POST request for youBecause Turbo has intercepted the request you won't get that default browser behaviour and Turbo cannot replicate this and it has two options:\nIt can either stay on the current URL in your browser; or\nIt could try and navigate to the action that the form submits to If it navigated to the form action it would do so as a new GET request, but since forms issued POST requests the server might not be set up to handle a GET request to that URL and you'd get an error Because Turbolinks didn't handle form submissions this is what actually happened in previous versions of Rails This is why Turbo Drive went with option 1, it stays on the current URL in your browser and therefore it appears to the user that nothing has happened You must therefore ensure you always respond with one of the valid status codes mentioned above with forms Turbolinks\nBefore we finish up, we should briefly mention the predecessor to Turbo, Turbolinks Turbolinks is no longer in active development Despite that, it's still worth mentioning as it has been around for a while (its first major release was 2013) and it's possible that you will encounter existing applications or online articles that mention Turbolinks The goal of Turbolinks was to capture the request for any clicked links in your web application and, if that link was to another page in your web app and not to an outside resource, then Turbolinks would keep the current page instance alive and only swap out the content between the <body> tags of the document It didn't require a full page reload (and was therefore faster) because it didn't have to download any resources in the head part of the document when they were unlikely to have changed This only applied when navigating pages with links, it did not intercept form submissions While Turbolinks is no longer actively developed, the concept behind it has evolved into a new framework now known as Turbo To reiterate, Turbolinks is the predecessor of Turbo, and Turbo is not shorthand for Turbolinks They are two different entities Assignment\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12496,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\assets_and_navigation\\turbo_drive.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "1b9122808d6568ab69ad7c33e0a067c3",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\assets_and_navigation\\turbo_drive.md",
    "source_type": "git_repo",
    "title": "turbo_drive",
    "content": "have to download any resources in the head part of the document when they were unlikely to have changed This only applied when navigating pages with links, it did not intercept form submissions While Turbolinks is no longer actively developed, the concept behind it has evolved into a new framework now known as Turbo To reiterate, Turbolinks is the predecessor of Turbo, and Turbo is not shorthand for Turbolinks They are two different entities Assignment 1Read chapters 1 and 2 of the [Turbo handbook](https://turbo hotwired dev/handbook/introduction) Focus on ensuring you understand around link navigation and how that works as we'll cover forms later Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is page navigation defined by Turbo Drive What is the default visit action that adds a new entry to the browser history How do you change the action of a Turbo Drive link How do you disable Turbo Drive What is the HTTP status code that Turbo cannot handle How do you require confirmation for a visit How does Turbo speeds up perceived link navigation latency Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental It looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12496,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\assets_and_navigation\\turbo_drive.md",
      "source_type": "git_repo"
    },
    "token_count": 291,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "74b98e249034ba8de3b58d2d4e28042b",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\form_basics.md",
    "source_type": "git_repo",
    "title": "form_basics",
    "content": "Introduction\nYou should be familiar with forms, both as a normal Internet user and as an HTML coder who has done the Intermediate HTML and CSS course But how much do you REALLY know about forms It may sound strange, but forms are possibly the most complicated thing about learning web development Not necessarily because the code itself is difficult, but because you usually want to build forms that accomplish so many different things at once Up until now, we've been thinking about Models in Rails on sort of a one-off basis The User model The Post model Sometimes we've had the models relate to each other via associations, like that a Post can has_many Comment objects Usually, though, we tend to silo our thoughts to only deal with one at a time Now think about a web form to buy an airline ticket You probably need to enter your name, address, phone number, email, the airline, the flight number, the flight date, your credit card number, your credit card security number, your card expiration date, your card's zipcode, and a bunch of checkboxes for additional things like trip insurance That's a whole lot of different models embedded in one form But you still submit it with a single button Holy macaroni Most forms won't be that long or complicated for you, but it's useful to appreciate all the things you can (and one day will) do with them It's incredibly easy to make a basic form so the first thing we'll do is make sure you've got an intimate understanding of how forms are created in HTML and then how Rails offers you some helpers to make your life easier We'll cover the way data is structured and sent to the controller until you feel pretty comfortable with that Then a later lesson will deal with how to take that basic understanding and make forms handle some more firepower Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Form creation in Rails How to handle forms that fail validations Linking forms and models with the form_with helper How to access and use values submitted in a form Forms in HTML\nStep one is to be able to create a form in HTML Remember how that looks ```html\n```\nThere are plenty of input tags to choose from, including button, checkbox, date, hidden, password, radio and many more (see the full list of HTML input types from W3Schools)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18810,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\form_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 0,
    "total_chunks": 10
  },
  {
    "id": "e2f411f7445e09be0f8f4476721eae83",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\form_basics.md",
    "source_type": "git_repo",
    "title": "form_basics",
    "content": "Rails How to handle forms that fail validations Linking forms and models with the form_with helper How to access and use values submitted in a form Forms in HTML Step one is to be able to create a form in HTML Remember how that looks ```html ``` There are plenty of input tags to choose from, including button, checkbox, date, hidden, password, radio and many more (see the full list of HTML input types from W3Schools)Viewing what your form submits\nIf you want to see what your forms are submitting to your Rails app, look through the output that gets printed into your console when you run your $ rails server Whenever you submit a very basic form for a user email signup, it should include lines that look something like:\nbash\nStarted POST \"/user\" for 127 0 0 1 at 2013-11-21 19:10:47 -0800\nProcessing by UsersController#create as TURBO_STREAM\nParameters: {\"utf8\"=>\"✓\", \"authenticity_token\"=>\"jJa87aK1OpXfjojryBk2Db6thv0K3bSZeYTuW8hF4Ns=\", \"email\"=>\"foo@bar com\", \"commit\"=>\"Submit Form\"}\nNote this is from a form that might be generated by a Rails helper method, as explained in a later section below The first line tells us which HTTP method was used and which route the form went to The second line tells us which controller and action the form will be handled by, note the TURBO_STREAM action as the default behaviour The third line contains everything that will get stuffed into the params hash for the controller to use We'll talk about the contents in the next sections You'll find yourself looking at this server output a lot when you start building forms It'll keep you sane because it tells you exactly what the browser sent back to your application so you can see if there's been a misunderstanding Railsifying your form by making forms input into params\nEach one of these inputs is structured slightly differently, but there are some commonalities One important thing to note is the name attribute that you can give to an input tag In Rails, that's very important The name attribute tells Rails what it should call the stuff you entered in that input field when it creates the params hash For instance,\nhtml <input type=\"text\" name=\"description\">",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18810,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\form_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 1,
    "total_chunks": 10
  },
  {
    "id": "7b19486759413422b6a25e536bb24f4b",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\form_basics.md",
    "source_type": "git_repo",
    "title": "form_basics",
    "content": "a misunderstanding Railsifying your form by making forms input into params Each one of these inputs is structured slightly differently, but there are some commonalities One important thing to note is the name attribute that you can give to an input tag In Rails, that's very important The name attribute tells Rails what it should call the stuff you entered in that input field when it creates the params hash For instance, html <input type=\"text\" name=\"description\">Will result in your params hash containing a key called description that you can access as normal, e g params[:description], inside your controller That's also why some inputs like radio buttons (where type=\"radio\") use the name attribute to know which radio buttons should be grouped together such that clicking one of them will unclick the others The name attribute is surprisingly important Now another thing we talked about in the controller section was nesting data You'll often want to tuck submitted data neatly into a hash instead of keeping them all at the top level This can be useful because, as we saw with controllers, it lets you do a one-line #create (once you've allowed the parameters with #expect) When you access params[:user], it's actually a hash containing all the user's attributes, for instance {first_name: \"foo\", last_name: \"bar\", email: \"foo@bar com\"} How do you get your forms to submit parameters like this It's easy It all comes back to the name attribute of your form inputs Just use hard brackets to nest data like so:\nhtml <input type=\"text\" name=\"user[first_name]\">\n<input type=\"text\" name=\"user[last_name]\">\n<input type=\"text\" name=\"user[email]\"> Those inputs will now get transformed into a nested hash under the :user key The server output becomes:\nbash\nParameters: {\"utf8\"=>\"✓\", \"authenticity_token\"=>\"jJa87aK1OpXfjojryBk2Db6thv0K3bSZeYTuW8hF4Ns=\", \"user\"=>{\"first_name\"=>\"foo\",\"last_name\"=>\"bar\",\"email\"=>\"foo@bar com\"}, \"commit\"=>\"Submit Form\"}\nSpecific parameters of the params hash are accessed like any other nested hash params[:user][:email] Don't forget that you have to allow the params now in your controller using #expect because they are a hash instead of just a flat string",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18810,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\form_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 2,
    "total_chunks": 10
  },
  {
    "id": "0402e8421921198628eb88fcb570925d",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\form_basics.md",
    "source_type": "git_repo",
    "title": "form_basics",
    "content": "html <input type=\"text\" name=\"user[first_name]\"> <input type=\"text\" name=\"user[last_name]\"> <input type=\"text\" name=\"user[email]\"> Those inputs will now get transformed into a nested hash under the :user key The server output becomes: bash Parameters: {\"utf8\"=>\"✓\", \"authenticity_token\"=>\"jJa87aK1OpXfjojryBk2Db6thv0K3bSZeYTuW8hF4Ns=\", \"user\"=>{\"first_name\"=>\"foo\",\"last_name\"=>\"bar\",\"email\"=>\"foo@bar com\"}, \"commit\"=>\"Submit Form\"} Specific parameters of the params hash are accessed like any other nested hash params[:user][:email] Don't forget that you have to allow the params now in your controller using #expect because they are a hash instead of just a flat stringSee the Controller section below for a refresher on the controller side of things This is cool stuff that you'll get a chance to play with in the project Form helpers: form_with\nRails tries to make your life as easy as it can, so naturally it provides you with helper methods that automate some of the repetitive parts of creating forms That doesn't mean you don't need to know how to create forms the \"old fashioned\" way it's actually MORE important to know your form fundamentals when using helpers because you'll need to really understand what's going on behind the scenes if something breaks Start by making a form using the form_with helper, which takes a block representing all the inputs to the form It takes care of the CSRF security token we talked about above by automatically creating the hidden input for it so you don't have to You pass it arguments to tell it which path to submit to (the default is the current page) and which method to use Then there are tag helpers that create the specified tags for you, like text_field_tag below All you need to specify there is what you want to call the field when it is submitted erb\n<%= form_with(url: \"/search\", method: \"get\") do %>\n<%= label_tag(:query, \"Search for:\") %>\n<%= text_field_tag(:query) %>\n<%= submit_tag(\"Search\") %>\n<% end %>\nCreates the form:\n```html\nSearch for:\n```\nThere are tag helpers for all the major tags and the options they accept are all a bit different",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18810,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\form_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 3,
    "total_chunks": 10
  },
  {
    "id": "6ee56182862fd4a153cd38664e6a0fee",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\form_basics.md",
    "source_type": "git_repo",
    "title": "form_basics",
    "content": "that create the specified tags for you, like text_field_tag below All you need to specify there is what you want to call the field when it is submitted erb <%= form_with(url: \"/search\", method: \"get\") do %> <%= label_tag(:query, \"Search for:\") %> <%= text_field_tag(:query) %> <%= submit_tag(\"Search\") %> <% end %> Creates the form: ```html Search for: ``` There are tag helpers for all the major tags and the options they accept are all a bit differentSee the reading assignment for more detail There are a few things to take note of when using the form_with helper The ID of the inputs matches the name The second line ends with as TURBO_STREAM when you look at your output in your console after submitting a form By default, all forms are now submitted by Turbo Drive This means that a full request cycle doesn't occur and the page doesn't reload when the form is submitted In order to disable this, you need to add the necessary data attribute that we covered in the Turbo Drive lesson erb\n<%= form_with(url: \"/search\", method: \"get\", data: { turbo: false} ) do %>\n<%= label_tag(:query, \"Search for:\") %>\n<%= text_field_tag(:query) %>\n<%= submit_tag(\"Search\") %>\n<% end %>\nUsing models with the form_with helper\nMore often than not, you'll want your form to act on the attributes of an existing model Like specifying a title (or whatever other fields are required for your model) of a new news Article Just pass form_with a model object, and it will make the form submit to the URL for that object, e g @article will submit to the correct URL for creating an Article Remember from the lesson on controllers that the #new action usually involves creating a new (unsaved) instance of your object and passing it to the view now you finally get to see why by using that object in your #form_with forms From the Rails Guide:\nruby\n# app/controllers/articles_controller rb\ndef new\n@article = Article new\nend\nerb\n# app/views/articles/new html erb\n<%= form_with model: @article do |form| %>\n<%= form text_field :title %>\n<%= form",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18810,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\form_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 4,
    "total_chunks": 10
  },
  {
    "id": "27b29ff801e4b29f9c39ac3eb85c22a7",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\form_basics.md",
    "source_type": "git_repo",
    "title": "form_basics",
    "content": "Article Remember from the lesson on controllers that the #new action usually involves creating a new (unsaved) instance of your object and passing it to the view now you finally get to see why by using that object in your #form_with forms From the Rails Guide: ruby # app/controllers/articles_controller rb def new @article = Article new end erb # app/views/articles/new html erb <%= form_with model: @article do |form| %> <%= form text_field :title %> <%= formsubmit \"Create\" %>\n<% end %>\nThis will produce the following HTML:\n```html\n```\nThe best part about form_with is that if you just pass it a model object like @article in the example above, Rails will check for you if the object has been saved yet If it's a new object, it will send the form to your #create action If the object has been saved before, so we know that we're editing an existing object, it will send the object to your #update action instead This is done by automatically generating the correct URL when the form is created Magic Forms and validations\nWhat happens if your form is submitted but fails the validations you've placed on it For instance, what if the user's password is too short Well, first of all, you should have had some JavaScript validations to be your first line of defense and they should have caught that but we'll get into that in another course In any case, hopefully your controller is set up to re-render the current form You'll probably want to display the errors so the user knows what went wrong Recall that when Rails tries to validate an object and fails, it attaches a new set of fields to the object called errors You can see those errors by accessing your_object_name errors Those errors have a couple of handy helpers you can use to display them nicely in the browser -- #count and #full_messages See the code below:\n```erb\n<% if @post errors any %>\n<%= pluralize(@post errors count, \"error\") %> prohibited this post from being saved:\n<ul>\n<% @post errors full_messages each do |msg| %>\n<li><%= msg %></li>\n<% end %>\n</ul>\n</div>\n<% end %>\n```\nThat will give the user a message telling him/her how many errors there are and then a message for each error The best part about Rails form helpers they handle errors automatically too",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18810,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\form_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 5,
    "total_chunks": 10
  },
  {
    "id": "af5ecb3193e84ba87f1ca0ff2edb3149",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\form_basics.md",
    "source_type": "git_repo",
    "title": "form_basics",
    "content": "the code below: ```erb <% if @post errors any %> <%= pluralize(@post errors count, \"error\") %> prohibited this post from being saved: <ul> <% @post errors full_messages each do |msg| %> <li><%= msg %></li> <% end %> </ul> </div> <% end %> ``` That will give the user a message telling him/her how many errors there are and then a message for each error The best part about Rails form helpers they handle errors automatically tooIf a form is rendered for a specific model object, like using form_with model: @article from the example above, Rails will check for errors and, if it finds any, it will automatically wrap a special <div> element around that field with the class field_with_errors so you can write whatever CSS you want to make it stand out Cool Making PATCH and DELETE submissions\nForms aren't really designed to natively delete objects because browsers only support GET and POST requests Rails gives you a way around that by sticking a hidden field named \"_method\" into your form It tells Rails that you actually want to do either a PATCH (aka PUT) or DELETE request (whichever you specified), and might look like <input name=\"_method\" type=\"hidden\" value=\"patch\"> You get Rails to add this to your form by passing an option to form_with called :method, e g :\nruby\nform_with(url: search_path, method: \"patch\")\nController-side refresher\nJust as a refresher, here's a very basic controller setup for handling #new actions and #create actions ```ruby\n# app/controllers/users_controller rb def new\n@user = User new\nend\ndef create\n@user = User new(user_params)\nif @user save\nredirect_to @user\nelse\nrender :new, status: :unprocessable_entity\nend\nend\ndef user_params\nparams expect(user: [:first_name, :last_name, :other_stuff])\nend ```\nI wanted to show this again so you could remind yourself what's going on in the form's lifecycle The user presumably went to the path for the #new action, likely http://www yourapp com/users/new That ran the #new action, which created a new user object in memory (but not yet saved to the database) and rendered the new html erb view The view probably used form_with model: @user to make things nice and easy for the developer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18810,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\form_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 6,
    "total_chunks": 10
  },
  {
    "id": "c53ef44b5dbba6e8c90da33b9b1ed0d6",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\form_basics.md",
    "source_type": "git_repo",
    "title": "form_basics",
    "content": "I wanted to show this again so you could remind yourself what's going on in the form's lifecycle The user presumably went to the path for the #new action, likely http://www yourapp com/users/new That ran the #new action, which created a new user object in memory (but not yet saved to the database) and rendered the new html erb view The view probably used form_with model: @user to make things nice and easy for the developerOnce the form gets submitted, the #create action will build another new User object with the parameters we explicitly tell it are okay Recall that our custom #user_params method will return the params[:user] hash for us, which lets User new build us a complete new instance If that instance can be saved to the database, we're all good and we go to that user's show html erb page If the @user cannot be saved, like because the first_name contains numbers, we will jump straight back to rendering the new html erb view, this time using the @user instance that will still have errors attached to it Our form should gracefully handle those errors by telling the user where they screwed up Notice how in our else clause we specify a status\nruby\nelse\nrender :new, status: :unprocessable_entity\nRemember our Turbo Drive lesson Which status codes does Turbo handle Either a redirect, a 4XX status or a 5XX status On a successful save of our created object you can see we do a redirect\nruby\nif @user save\nredirect_to @user\nThis is the 303 redirect status we mentioned in the earlier Turbo Drive lesson If we don't redirect, and we don't want a 5XX error, as that means our application has hit an unexpected issue, that only leaves us with a 4XX status code What would be returned if we didn't include status: :unprocessable_entity It would be 200 OK status because that is the expected response to a failed form submission The request has completed in the way we expected Therefore when dealing with a form validation that fails, you need to specify the 422 HTTP status Doing so will change a Completed 200 OK in 206ms (Views: 125 5ms | ActiveRecord: 8 1ms | Allocations: 18793) return status to Completed 422 Unprocessable Entity in 52ms (Views: 44 6ms | ActiveRecord: 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18810,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\form_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 7,
    "total_chunks": 10
  },
  {
    "id": "f0d6a7fe4eb54089477b6f9112c34056",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\form_basics.md",
    "source_type": "git_repo",
    "title": "form_basics",
    "content": "be 200 OK status because that is the expected response to a failed form submission The request has completed in the way we expected Therefore when dealing with a form validation that fails, you need to specify the 422 HTTP status Doing so will change a Completed 200 OK in 206ms (Views: 125 5ms | ActiveRecord: 8 1ms | Allocations: 18793) return status to Completed 422 Unprocessable Entity in 52ms (Views: 44 6ms | ActiveRecord: 00ms | Allocations: 6391), and as we know, Turbo will handle this and update the HTML with the returned response What is the response The new page rendered again as HTML But this time, because the @user object has some errors on it, the HTML will include any information you've rendered on an object having some errors If you find yourself submitting a form and nothing is happening, chances are you forgot to return the correct status You can confirm in the server logs when you submit the form Assignment\n1 Read the [Rails Guide on Form Helpers](http://guides rubyonrails org/form_helpers html), sections 1 through 2 4 1 Skim 3 1 through 7 to see what kinds of things are out there One day you'll need them, and now you know where to look 1 Read sections 8 1 through 8 3 for the official explanation of how parameters are created from the `name` attribute 1 Read the [Rails Guide on Validations](http://guides rubyonrails org/active_record_validations html#displaying-validation-errors-in-views) section 9 for a quick look at displaying errors 1 Skim through the official Rails API section on the [form_with helper](https://api rubyonrails org/classes/ActionView/Helpers/FormHelper html#method-i-form_with) to see various ways to use this helper tag Conclusion\nAt this point, you should have a solid understanding of how forms work in general and a pretty good feel for how Rails helps you out by generating them for you You'll get a chance to build a whole bunch of forms in the next few projects, so don't worry if it's not totally stuck for you yet Seeing it in action will make things click Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18810,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\form_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 8,
    "total_chunks": 10
  },
  {
    "id": "8976ee4bbafc256135c4548d4b20fcb4",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\form_basics.md",
    "source_type": "git_repo",
    "title": "form_basics",
    "content": "a solid understanding of how forms work in general and a pretty good feel for how Rails helps you out by generating them for you You'll get a chance to build a whole bunch of forms in the next few projects, so don't worry if it's not totally stuck for you yet Seeing it in action will make things click Knowledge check The following questions are an opportunity to reflect on key topics in this lessonIf you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is the name attribute of a form input element and what does it do How do you nest attributes under a single hash in params How do you pass form_with a model object How do you access errors for a failed-to-save model object How do Rails forms make PATCH or DELETE requests What is one case where you may need an array of hashes within the params hash Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental It looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18810,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\form_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 225,
    "chunk_index": 9,
    "total_chunks": 10
  },
  {
    "id": "a152e88b39c87169c19181d188784f76",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\project_forms.md",
    "source_type": "git_repo",
    "title": "project_forms",
    "content": "Introduction\nThese projects will give you a chance to actually build some forms, both using nearly-pure HTML and then graduating to using the helper methods that Rails provides Project: Bare metal forms and helpers\nIn this project, you'll build a form the old fashioned way and then the Rails way Assignment\n#### Set up the Back end\nYou'll get good at setting up apps quickly in the coming lessons by using more or less this same series of steps (though we'll help you less and less each time):\n1 Build a new rails app (called \"re-former\") 1 Create a new Github repo and connect the remote to your local git repo Check in and commit the initial stuff 1 Modify your README file to say something you'll remember later, like \"This is part of the Forms Project in The Odin Project's Ruby on Rails Curriculum Find it at [https://www theodinproject com](https://www theodinproject com)\"\n1 Create and migrate a User model with `:username`, `:email` and `:password` 1 Add validations for presence to each field in the model 1 Create the `:users` resource in your routes file so requests actually have somewhere to go Use the `only:` option to specify just the `:new` and `:create` actions 1 Build a new UsersController (either manually or via the `$ rails generate controller Users` generator) 1 Write empty methods for `#new` and `#create` in your UsersController 1 Create your `#new` view in `app/views/users/new html erb` 1 Fire up a rails server in another tab 1 Make sure everything works by visiting `http://localhost:3000/users/new` in the browser #### HTML form\nThe first form you build will be mostly HTML (remember that stuff at all ) Build it in your New view at `app/views/users/new html erb` The goal is to build a form that is almost identical to what you'd get by using a Rails helper so you can see how it's done behind the scenes 1 Build a form for creating a new user See the [W3Schools page for forms](https://www w3schools com/tags/tag_form asp) if you’ve totally forgotten how they work Specify the `method` and the `action` attributes in your `` tag (use `$ rails routes` to see which HTTP method and path are being expected based on the resource you created)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12573,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\project_forms.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 8
  },
  {
    "id": "280e691e41fdec279d72e36d8131e273",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\project_forms.md",
    "source_type": "git_repo",
    "title": "project_forms",
    "content": "identical to what you'd get by using a Rails helper so you can see how it's done behind the scenes 1 Build a form for creating a new user See the [W3Schools page for forms](https://www w3schools com/tags/tag_form asp) if you’ve totally forgotten how they work Specify the `method` and the `action` attributes in your `` tag (use `$ rails routes` to see which HTTP method and path are being expected based on the resource you created)Include the attribute `accept-charset=\"UTF-8\"` as well, which Rails naturally adds to its forms to specify Unicode character encoding 1 Create the proper input tags for your user's fields (email, username and password) Use the proper password input for \"password\" Be sure to specify the `name` attribute for these inputs Make label tags which correspond to each field 1 For CSRF safety with Rails 7, Turbo is enabled by default in new apps Turbo intercepts form submission and makes a partial XHR request instead of a standard HTTP request with full page reload To get a better grasp of Rails protection against [cross-site request forgery](https://en wikipedia org/wiki/Cross-site_request_forgery), let's take a short detour and disable Turbo for this form by setting the data attribute `data-turbo=false` In the dev tools network tab, compare the request type with and without the `data-turbo=false` attribute to confirm it works as expected 1 Submit your form and view the server output The request should be intercepted before reaching your controller and the server will throw a CSRF error `ActionController::InvalidAuthenticityToken  (Can't verify CSRF token authenticity )` That's because Rails by default automatically protects you from [cross-site request forgery](https://en wikipedia org/wiki/Cross-site_request_forgery) and it requires you to verify that the form was actually submitted from a page you generated In order to do so, it generates an [\"authenticity token\"](http://guides rubyonrails org/security html#cross-site-request-forgery-csrf) which looks like gibberish but helps Rails match the form with your session and the application So, if you want to create your own form that gets handled by Rails, you need to provide the token somehow as well",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12573,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\project_forms.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 1,
    "total_chunks": 8
  },
  {
    "id": "b94ffc2265b1d3873965cca5b7f38a63",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\project_forms.md",
    "source_type": "git_repo",
    "title": "project_forms",
    "content": "you from [cross-site request forgery](https://en wikipedia org/wiki/Cross-site_request_forgery) and it requires you to verify that the form was actually submitted from a page you generated In order to do so, it generates an [\"authenticity token\"](http://guides rubyonrails org/security html#cross-site-request-forgery-csrf) which looks like gibberish but helps Rails match the form with your session and the application So, if you want to create your own form that gets handled by Rails, you need to provide the token somehow as wellLuckily, Rails gives you a method called `form_authenticity_token` to do so\n```erb\n```\nYou'll now notice the token in the server output:\n```bash Parameters: {\"utf8\"=>\"✓\", \"authenticity_token\"=>\"jJa87aK1OpXfjojryBk2Db6thv0K3bSZeYTuW8hF4Ns=\", \"email\"=>\"foo@bar com\", \"commit\"=>\"Submit Form\"}\n```\n1 However, if you look at the server output, you will see nothing much happening after the log of parameters received The log should indicate a completed response with status 204 (no content) And indeed, if you look at the network tab in your inspector, you can see that a request was issued, but a response of `204 No Content` is returned 1 That's A-OK because it means that we've successfully gotten through our blank `#create` action in the controller (and didn't specify what should happen next) Look at the server output It should include the parameters that were submitted, looking something like:\n```bash\nStarted POST \"/users\" for 127 0 0 1 at 2013-12-12 13:04:19 -0800\nProcessing by UsersController#create as TURBO_STREAM\nParameters: {\"authenticity_token\"=>\"WUaJBOpLhFo3Mt2vlEmPQ93zMv53sDk6WFzZ2YJJQ0M=\", \"username\"=>\"foobar\", \"email\"=>\"foo@bar com\", \"password\"=>\"[FILTERED]\"}\n```\nThat looks a whole lot like what you normally see when Rails does it, right #### Controller setup\n1 Go into your UsersController and build out the `#create` action to take those parameters and create a new User from them",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12573,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\project_forms.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 2,
    "total_chunks": 8
  },
  {
    "id": "fd31caffb3a17fc3e6fc2de54bfbdf9b",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\project_forms.md",
    "source_type": "git_repo",
    "title": "project_forms",
    "content": "It should include the parameters that were submitted, looking something like: ```bash Started POST \"/users\" for 127 0 0 1 at 2013-12-12 13:04:19 -0800 Processing by UsersController#create as TURBO_STREAM Parameters: {\"authenticity_token\"=>\"WUaJBOpLhFo3Mt2vlEmPQ93zMv53sDk6WFzZ2YJJQ0M=\", \"username\"=>\"foobar\", \"email\"=>\"foo@bar com\", \"password\"=>\"[FILTERED]\"} ``` That looks a whole lot like what you normally see when Rails does it, right #### Controller setup 1 Go into your UsersController and build out the `#create` action to take those parameters and create a new User from themIf you successfully save the user, you should redirect back to the New User form (which will be blank) and if you don't, it should render the `:new` form again (but it will still have the existing information entered in it) You should be able to use something like:\n```ruby\n# app/controllers/users_controller rb\ndef create\n@user = User new(username: params[:username], email: params[:email], password: params[:password])\nif @user save\nredirect_to new_user_path\nelse\nrender :new, status: :unprocessable_entity\nend\nend\n```\n1 Test this out -- can you now create users with your form If so, you should see an INSERT SQL command in the server log 1 We're not done just yet that looks too long and difficult to build a user with all those `params` calls It'd be a whole lot easier if we could just use a hash of the user's attributes so we could just say something like `User new(user_params)` Let's build it we need our form to submit a hash of attributes that will be used to create a user, just like we would with Rails' `form_with` method Remember, that method submits a top level `user` field which actually points to a hash of values This is easy to achieve, though -- just change the `name` attribute slightly Nest your three User fields inside the variable attribute using brackets in their names, e g `name=\"user[email]\"` 1 Resubmit",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12573,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\project_forms.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 3,
    "total_chunks": 8
  },
  {
    "id": "45eaf74a3fea45913681f9ed50fda4ab",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\project_forms.md",
    "source_type": "git_repo",
    "title": "project_forms",
    "content": "it we need our form to submit a hash of attributes that will be used to create a user, just like we would with Rails' `form_with` method Remember, that method submits a top level `user` field which actually points to a hash of values This is easy to achieve, though -- just change the `name` attribute slightly Nest your three User fields inside the variable attribute using brackets in their names, e g `name=\"user[email]\"` 1 ResubmitNow your user parameters should be nested under the `\"user\"` key like:\n```bash\nParameters: {\"authenticity_token\" => \"WUaJBOpLhFo3Mt2vlEmPQ93zMv53sDk6WFzZ2YJJQ0M=\", \"user\" =>{ \"username\" => \"foobar\", \"email\" => \"foo@bar com\", \"password\" => \"[FILTERED]\" } }\n```\n1 You'll get some errors because now your controller will need to change But recall that we're no longer allowed to just directly call `params[:user]` because that would return a hash and Rails' security features prevent us from doing that without first validating it 1 Go into your controller and comment out the line in your `#create` action where you instantiated a `::new` User (we'll use it later) 1 Implement a private method at the bottom called `user_params` which will `expect` the proper fields (see the [Controllers Lesson](/lessons/ruby-on-rails-controllers) for a refresher) 1 Add a new `::new` User line which makes use of that new allow params method 1 Submit your form now It should work marvelously (once you debug your typos) #### Railsy forms with #form_tag\nNow we'll start morphing our form into a full Rails form using the `#form_tag` and `#*_tag` helpers There's actually very little additional help that's going on and you'll find that you're mostly just renaming HTML tags into Rails tags 1 Comment out your entire HTML form It may be helpful to save it for later on if you get stuck 1 Convert your `` tag to use a `#form_tag` helper and all of your inputs into the proper helper tags via `#*_tag` methods The good thing is that you no longer need the authentication token because Rails will insert that for you automatically",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12573,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\project_forms.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 4,
    "total_chunks": 8
  },
  {
    "id": "f7874c3b6e46d872f9c60e2743a6a8e8",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\project_forms.md",
    "source_type": "git_repo",
    "title": "project_forms",
    "content": "you'll find that you're mostly just renaming HTML tags into Rails tags 1 Comment out your entire HTML form It may be helpful to save it for later on if you get stuck 1 Convert your `` tag to use a `#form_tag` helper and all of your inputs into the proper helper tags via `#*_tag` methods The good thing is that you no longer need the authentication token because Rails will insert that for you automatically`#form_tag` is soft-deprecated as stated in the current Rails Guide Have a look at the older documentation for [Action View Form Helpers](https://guides rubyonrails org/v5 2/form_helpers html) 1 See the [Form Tag API Documentation](http://api rubyonrails org/classes/ActionView/Helpers/FormTagHelper html#method-i-form_tag) for a list and usage of all the input methods you can use with `#form_tag` 1 Test out your form You'll need to change your `#create` method in the controller to once again accept normal top level User attributes, so uncomment the old `User new` line and comment out the newer one 1 You've just finished the first step #### Turn Turbo back ON\nAbove, we asked to disable Turbo for the sake of the exercise 1 Re-enable form submission with Turbo by removing the `data-turbo=false` attribute on the form tag, then also remove the hidden input with CSRF token tag and submit No more CSRF error 1 The form is now submitted with Turbo, yet Rails still protects you by verifying a CSRF token Where does this token comes from Check your inspector and your `application html erb` template Can you find a CSRF token that is always available Remove this one too from `application html erb`, and verify that the server hits back with a CSRF error 1 Reinstate the CSRF token tag in both places and carry on #### Railsy-er forms with #form_with\n`#form_tag` probably didn't feel that useful -- it's about the same amount of work as using ``, though it does take care of the authenticity token stuff for you Now we'll convert that into `#form_with`, which will make use of our model objects to build the form 1 Modify your `#new` action in the controller to instantiate a blank User object and store it in an instance variable called `@user` 1 Comment out your `#form_tag` form in the `app/views/users/new html",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12573,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\project_forms.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 5,
    "total_chunks": 8
  },
  {
    "id": "fede8f31d24371d0d14125a91db7d931",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\project_forms.md",
    "source_type": "git_repo",
    "title": "project_forms",
    "content": "that useful -- it's about the same amount of work as using ``, though it does take care of the authenticity token stuff for you Now we'll convert that into `#form_with`, which will make use of our model objects to build the form 1 Modify your `#new` action in the controller to instantiate a blank User object and store it in an instance variable called `@user` 1 Comment out your `#form_tag` form in the `app/views/users/new htmlerb` view (so now you should have TWO commented out form examples) 1 Rebuild the form using `#form_with` and the `@user` from your controller You'll need to switch your controller's `#create` method again to accept the nested `:user` hash from `params` 1 Play with the `#input` method options -- add a default placeholder (like \"\" for the email field), make it generate a different label than the default one (like \"Your user name here\"), and try starting with a value already populated Some of these things you may need to Google for, but check out the [`#form_with` Rails API docs](https://api rubyonrails org/v6 1 1/classes/ActionView/Helpers/FormHelper html#method-i-form_with)\n1 Test it out #### Editing\n1 Update your routes and controller to handle editing an existing user You'll need your controller to find a user based on the submitted `params` ID 1 Create the Edit view at `app/views/users/edit html erb` and copy/paste your form from the New view Your HTML and `#form_tag` forms (which should still be commented out) will not work -- they will submit the form as a POST request when you need it to be a PATCH (PUT) request (remember your `$ rails routes` ) It's an easy fix, which you should be able to see if you attempt to edit a user with the `#form_with` form (which is smart enough to know if you're trying to edit a user or creating a new one) 1 Do a \"view source\" on the form generated by `#form_with` in your Edit view, paying particular attention to the hidden fields at the top nested inside the `` See it 1 Modify the top of your form view to display a list of the error messages that are attached to the failed model object when it fails validations Recall the `#errors` and `#full_messages` methods 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12573,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\project_forms.md",
      "source_type": "git_repo"
    },
    "token_count": 507,
    "chunk_index": 6,
    "total_chunks": 8
  },
  {
    "id": "690e25a289375d238e6e60e6c505025c",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\project_forms.md",
    "source_type": "git_repo",
    "title": "project_forms",
    "content": "trying to edit a user or creating a new one) 1 Do a \"view source\" on the form generated by `#form_with` in your Edit view, paying particular attention to the hidden fields at the top nested inside the `` See it 1 Modify the top of your form view to display a list of the error messages that are attached to the failed model object when it fails validations Recall the `#errors` and `#full_messages` methods 1Save this project to Git and upload to GitHub",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12573,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\project_forms.md",
      "source_type": "git_repo"
    },
    "token_count": 103,
    "chunk_index": 7,
    "total_chunks": 8
  },
  {
    "id": "58cd9bb849659d2d8799597cd7fd0a39",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\project_members_only.md",
    "source_type": "git_repo",
    "title": "project_members_only",
    "content": "Introduction\nIn these projects, you'll be working to implement authentication systems so users can only access areas of a site they are authorized to Project: Members only In this project, you'll be building an exclusive clubhouse where your members can write anonymous posts Inside the clubhouse, members can see who the author of a post is but, outside, they can only see the story and wonder who wrote it If you want to add your own stylistic flourishes, consider it extra credit Assignment\nThe projects will be less and less explicit about how to achieve their goals, since we expect you to build on your previous knowledge If you don't know how to do something, feel free to check back in previous lessons or projects or Google the correct way to implement it (though be careful, because that may take you deeper down the road than we intended) If you'd like to challenge yourself, don't even follow the steps below, just go ahead and build the app #### Basic setup\n1 Think about and spec out how to set up your data models for this application You'll need users with the usual identification attributes like name, email and password They'll need to create posts as well 1 Create your new `members-only` Rails app and GitHub repo Update your README 1 Add devise to your Gemfile and install it in your app using set up instructions on the [Devise README](https://github com/heartcombo/devise) #### Authentication and posts\nLet's build those secrets We'll need to make sure only signed in users can see the author of each post We're not going to worry about editing or deleting posts 1 Create a Post model and a Posts controller and a corresponding resource in your Routes file which allows the `[:new, :create, :index]` methods 1 Atop your Posts Controller, use a `#before_action` to restrict access to the `#new` and `#create` methods to only users who are signed in 1 For your Posts Controller, prepare your `#new` action 1 Write a form in the `app/views/posts/new html erb` view which will create a new Post 1 Make your corresponding `#create` action build a post where the foreign key for the author (e g `user_id`) is automatically populated based on whichever user is signed in Redirect to the Index view if successful 1 Fill out the `#index` action of the PostsController and create the corresponding view The view should show a list of every post 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3570,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\project_members_only.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "579e65da61133e11a46706485243b763",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\project_members_only.md",
    "source_type": "git_repo",
    "title": "project_members_only",
    "content": "1 Write a form in the `app/views/posts/new html erb` view which will create a new Post 1 Make your corresponding `#create` action build a post where the foreign key for the author (e g `user_id`) is automatically populated based on whichever user is signed in Redirect to the Index view if successful 1 Fill out the `#index` action of the PostsController and create the corresponding view The view should show a list of every post 1Now add logic in your Index view to display the author's name, but only if a user is signed in 1 Sign in and create a few secret posts 1 Test it out -- sign out and go to the index page You should see a list of the posts but no author names Sign in and the author names should appear Your secrets are safe Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Railscasts #250 Authentication from Scratch\nRailscasts #274 Remember Me & Reset Password\nWatch A Twitter Clone Lets Build with Ruby on Rails Part 1\nand A Twitter Clone Lets Build with Ruby on Rails Part 2 If you still need more inspiration for this project or want more insight then the rest of this tutorial series is a good resource",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3570,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\project_members_only.md",
      "source_type": "git_repo"
    },
    "token_count": 256,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "4c5fb9fc8a7fa90af26f97634412398b",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\introduction\\how_this_course_will_work.md",
    "source_type": "git_repo",
    "title": "how_this_course_will_work",
    "content": "Introduction\nThis portion of the curriculum will be the most build-heavy so far You will still be asked to read docs, check out blog posts, and watch videos before building, of course, but projects will be the major focus After each lesson or two, you'll be asked to build one or more independent projects utilizing the concepts that were just covered (which is exactly what we've been doing up until now) The roadmap\nAfter preparing for deployment and installing Rails, we'll be starting with an overview of important topics like HTTP, MVC, REST, APIs, Cookies and Authentication for some context before moving into the really fun stuff We'll move front-to-back, starting with the routing layer and moving into controllers and views so you can build a functional (if not yet pretty) interface for your data Next you'll learn about storing and finding data in databases with SQL then how to turn that SQL into Active Record queries We next cover web forms, an area that has a lot more going on behind the scenes than you might expect, and authentication, which is essential to securing your application We'll cover some other intermediate topics like state and the asset pipeline to round out your initial understanding of Rails But we can't stop there, so we'll get back into ActiveRecord to give you the tools to really make your data dance, as well as the knowledge of the forms that is required to bring that advanced functionality to the user This is the really important side of Rails, so we'll spend a good bit of time working with it Finally, we'll cover additional useful topics like how to send emails from your application, building and interfacing with APIs, design patterns, metaprogramming and advanced routing before having you build your final project Our tools and texts\nThe most important resource that we'll leverage is the Rails Guides We'll use these guides along with the Rails API, which allows you to search for specific Rails methods The Rails Guides are so comprehensive that they are essentially a completely open-source textbook and reference manual for Rails At times, they'll get a bit more technical and in-depth than you might like, and it may be okay to skim at that point When you Google for help as you build your projects, if you don't find a direct solution on Stack Overflow, then your best bet will be to dive into the relevant Rails Guides links Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2944,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\introduction\\how_this_course_will_work.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "79857e918effec78fa2fa9543512cec1",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\introduction\\how_this_course_will_work.md",
    "source_type": "git_repo",
    "title": "how_this_course_will_work",
    "content": "Rails At times, they'll get a bit more technical and in-depth than you might like, and it may be okay to skim at that point When you Google for help as you build your projects, if you don't find a direct solution on Stack Overflow, then your best bet will be to dive into the relevant Rails Guides links Additional resources This section contains helpful links to related content It isn't required, so consider it supplementalStackOverflow: Summary of Ruby on Rails Fundamental Concepts\nHow to study the Rails Guides",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2944,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\introduction\\how_this_course_will_work.md",
      "source_type": "git_repo"
    },
    "token_count": 102,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "501130df792b4c8b11e5a5fee995b8f3",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\introduction\\project_installing_rails.md",
    "source_type": "git_repo",
    "title": "project_installing_rails",
    "content": "Introduction\nReady to jump into Rails Let's get started by installing it and creating your first Rails application Before continuing, let's review a few best practices to keep in mind:\nFollow the directions closely, and don't skip over any sections Do NOT use sudo unless The Odin Project specifically says to do so Failing to follow this advice can cause a lot of headaches In some instances, you might see a message in the terminal telling you to use sudo and/or to install something with apt Ignore what the terminal says and follow the instructions below Copy and paste the commands to avoid typos If you stop working on this project partway through and come back to it later, be sure to use cd to move back inside your project directory so that the commands will work In this project, we're going to build a fully functional Rails application The entire point of this exercise is to make sure that you have everything installed and working correctly on your computer Do not worry if you don't fully understand what you're doing You'll learn exactly what all of these commands are doing later on in the course For now, go slowly, and be sure to follow each and every step closely If you run into trouble, don't forget that you can always reach out for help on our Discord server You can also use the Discord search function to check if someone else had a similar problem and how they solved it Your first Rails app\nStep 1: Create your first Ruby on Rails web application\nDon't worry if you don't totally understand what you are doing in these next steps You will learn what all of this does later in The Odin Project curriculum As long as the commands complete successfully, just keep going The main reason we're doing this is to ensure everything is properly installed and configured Step 1 1: Install Rails\nWe've previously installed Ruby, and now it's time to install Ruby on Rails It's just running one command bash\ngem install rails\nOnce the installation finishes, you can check if everything went well by restarting your terminal and running the following command:\nbash\nrails -v\nThis should display the version of Rails installed on your system indicating the installation went smoothly Step 1 2: Install Yarn\nYou may be wondering why we are installing Yarn when Rails 7 provides import maps that allows you to import JavaScript Modules directly from the browser We will go over import maps in a later lesson but, it is important to note that import maps handles libraries without transpiling or bundling and uses the asset pipeline",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8169,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\introduction\\project_installing_rails.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "7196e9bae0ad66a1e13720e2faa738ca",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\introduction\\project_installing_rails.md",
    "source_type": "git_repo",
    "title": "project_installing_rails",
    "content": "should display the version of Rails installed on your system indicating the installation went smoothly Step 1 2: Install Yarn You may be wondering why we are installing Yarn when Rails 7 provides import maps that allows you to import JavaScript Modules directly from the browser We will go over import maps in a later lesson but, it is important to note that import maps handles libraries without transpiling or bundling and uses the asset pipelineWe still need to install Yarn to ensure frameworks that require compiling or bundling can still be used This is due to the way some JavaScript is bundled requiring the usage of Yarn JavaScript libraries used to be managed through the asset pipeline in previous Rails versions but as JavaScript progressed it became a little dated and made it hard to integrate the latest JavaScript libraries and frameworks Yarn is a JavaScript package manager, much like Bundler for Ruby, and allows you to easily manage your JavaScript libraries for the frameworks that do require bundling and compiling Visit The Yarn Download Page The easiest way to install Yarn is to run the npm command shown on the page This will install Yarn Classic, which is the version we want You can verify the install by running the following command:\nbash\nyarn --version\nIf you don't get a version number drop by the chatrooms for some assistance Step 1 3: Create the application\nThis is where it might start to be difficult to follow just what is happening If you don't understand what's going on, just double check that you're typing in the correct commands and keep going This section is meant to expose you to the process and to verify that everything is working Again, it's OK to not understand what's going on at this point We're going to start by navigating to the directory that you house your projects in, then telling Rails to initialize the application for us bash\ncd ~/your_odin_project_directory\nrails new my_first_rails_app\nThis will do a bunch of things, and you'll see a lot of output in the terminal If everything worked, you should see something similar to this around the end of the terminal output:\n```bash\nBundle complete 16 Gemfile dependencies, 76 gems now installed Use bundle info [gemname] to see where a bundled gem is installed Switch development cable to use redis\ngsub  config/cable yml\nCreate controllers directory\ncreate  app/javascript/controllers\ncreate  app/javascript/controllers/index js\ncreate  app/javascript/controllers/application",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8169,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\introduction\\project_installing_rails.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "9f7357d6633772414e1f1cb79fab9808",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\introduction\\project_installing_rails.md",
    "source_type": "git_repo",
    "title": "project_installing_rails",
    "content": "my_first_rails_app This will do a bunch of things, and you'll see a lot of output in the terminal If everything worked, you should see something similar to this around the end of the terminal output: ```bash Bundle complete 16 Gemfile dependencies, 76 gems now installed Use bundle info [gemname] to see where a bundled gem is installed Switch development cable to use redis gsub config/cable yml Create controllers directory create app/javascript/controllers create app/javascript/controllers/index js create app/javascript/controllers/applicationjs\ncreate  app/javascript/controllers/hello_controller js\nImport Stimulus controllers\nappend  app/javascript/application js\nPin Stimulus\nappend  config/importmap rb\n```\nIn the above process, Rails created a new directory for us Let's cd into it now:\nbash\ncd my_first_rails_app\nRun the following in the terminal:\nbash\nrails generate scaffold car make:string model:string year:integer\nAfter generating the scaffolds, we need to migrate the database bash\nrails db:migrate\nStep 1 4: Start up your app\nNow that you have created a Rails application, you can start it up and see if it works In the terminal, type\nbash\nrails server\nNow, open a browser and visit http://localhost:3000/cars to see your application If you're using a VM, you will need to open the browser inside of your VM in order for this to work Go ahead and create a new car, and then refresh the page to verify it is working Add as many cars as you'd like When you're satisfied, go back to the terminal where the Rails server is running, and type Ctrl + C to close the server In the same terminal window, type rails console --sandbox to open an IRB session loaded with the project code This command is useful for exploring your project and testing out quick ideas The --sandbox flag ensures that any changes you make to the application's database do not persist once you leave the session Try typing Car all to see a list of the car objects that you've created on the website When you are done with the session, type exit to go back to the terminal window Step 2: Git groundwork\nLike all of the projects you've done so far we need to use Git for our version control and to push our app to different remotes Step 2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8169,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\introduction\\project_installing_rails.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "5caa5d6b97652f98cd91001909ee4e4e",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\introduction\\project_installing_rails.md",
    "source_type": "git_repo",
    "title": "project_installing_rails",
    "content": "application's database do not persist once you leave the session Try typing Car all to see a list of the car objects that you've created on the website When you are done with the session, type exit to go back to the terminal window Step 2: Git groundwork Like all of the projects you've done so far we need to use Git for our version control and to push our app to different remotes Step 21 Stage and commit local changes\nRails will already have initialized Git for you when it was doing its thing, so just stage and commit all of the work it's done so far bash\ngit add git commit -m \"Initial commit\"\nStep 2 2 Initialize on GitHub, add the remote, and push\nMake a repo on Github and make sure you do not initialize the repository with a README because Rails has created one already Add this repo as a remote and push your repo to GitHub just like you normally do REMINDER: Do not enter the < or > symbols below Replace those symbols and everything between them with the URL that you copied from GitHub bash\ngit remote add origin <SSH URL from GitHub>\ngit push -u origin main\nStep 2 3 Confirm Git is working correctly\nConfirm that the push was successful and on GitHub you see all the folders and files made locally by Rails, starting with a folder called \"app\" This marks the start of your Rails journey Later on, you'll be able to look back at this repository and marvel over how far you've come",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8169,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\introduction\\project_installing_rails.md",
      "source_type": "git_repo"
    },
    "token_count": 302,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "2647faaa64e6f436a353e5ee6cbc21d5",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\sessions_cookies_authentication.md",
    "source_type": "git_repo",
    "title": "sessions_cookies_authentication",
    "content": "Introduction\n\"Sessions\" are the idea that your user's state is somehow preserved when they click from one page to the next Remember, HTTP is stateless, so it's up to either the browser or your application to \"remember\" what needs to be remembered In this lesson you'll learn about sessions, browser cookies, and how authentication is built in Rails We'll cover both home-grown authentication and the most commonly used authentication gem, Devise Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson What a cookie is What a session is The difference between the session \"hash\" and the cookies \"hash\" Usages for the flash \"hash\" When to use flash now instead of flash Controller filters and why they are useful How to run a controller filter for just a specific few actions The difference between authentication and authorization Why #has_secure_password is a handy method A basic overview of how to authenticate a user with that method Additional steps needed (on a high level) to actually \"remember\" a user after they've closed the browser The Devise gem and why it is useful Cookies, sessions and flashes\nCookies, Sessions and Flashes are three special objects that Rails gives you in which each behave a lot like hashes They are used to persist data between requests, whether until just the next request, until the browser is closed, or until a specified expiration has been reached In addition to different temporal concerns, they each solve slightly different use cases, covered below Cookies\nCookies are key-value data pairs that are stored in the user's browser until they reach their specified expiration date They can be used for pretty much anything, most commonly to \"bookmark\" the user's place in a web page if they get disconnected or to store simple site display preferences You could also store shopping cart information or even passwords but that would be a bad idea -- you shouldn't store anything in regular browser cookies that needs to either be secure or persisted across browser sessions It's too easy for users to clear their cache and/or steal/manipulate unsecured cookies To work with cookies, Rails gives you access to a special hash called cookies, where each key-value pair is stored as a separate cookie on the user's browser If you were to save cookies[:hair-color] = \"blonde\", you'd be able to pull up your browser's developer tools and see a cookie on the user's browser that has a key of hair-color and a value of blonde Delete it using cookies delete(:hair-color)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21265,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\sessions_cookies_authentication.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 10
  },
  {
    "id": "3ea30cc8484a9ca48f269151976bbfdd",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\sessions_cookies_authentication.md",
    "source_type": "git_repo",
    "title": "sessions_cookies_authentication",
    "content": "their cache and/or steal/manipulate unsecured cookies To work with cookies, Rails gives you access to a special hash called cookies, where each key-value pair is stored as a separate cookie on the user's browser If you were to save cookies[:hair-color] = \"blonde\", you'd be able to pull up your browser's developer tools and see a cookie on the user's browser that has a key of hair-color and a value of blonde Delete it using cookies delete(:hair-color)With each new request to your server, the browser will send along all the cookies and you can access them in your controllers and views like a normal hash You can also set their expiration dates, for example using syntax like cookies[:name] = { value: \"cookies YUM\", expires: Time now + 3600} Sessions\nThink about how websites keep track of how a user is logged in when the page reloads HTTP requests are stateless so how can you tell that a given request actually came from that particular user who is logged in This is why cookies are important -- they allow you to keep track of your user from one request to another until the cookie expires A special case is when you want to keep track of data in the user's \"session\", which represents all the stuff your user does while you've chosen to \"remember\" them, typically until the browser window is closed In that case, every page they visit until the browser is closed will be part of the same session To identify a user's session information, Rails stores a special secure and tamper-proof cookie on the user's browser that contains their entire session hash (look for it in your developer tools, usually under the “Application” section) and it expires when the browser is closed Whenever the user makes a request to your application, that request will also automatically include that session cookie (along with the other cookies) and you can use it to keep track of their logged-in state This may all seem abstract now, but you'll get a chance to see it in action shortly Rails gives you access to the session hash in an almost identical way to the above-mentioned cookies hash Use the session variable in your views or controllers like so:\n```ruby\n# app/controllers/users_controller rb # Set a session value\nsession[:current_user_id] = user",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21265,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\sessions_cookies_authentication.md",
      "source_type": "git_repo"
    },
    "token_count": 465,
    "chunk_index": 1,
    "total_chunks": 10
  },
  {
    "id": "9eb4c8d14f046941a01fbfdfa7257c0b",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\sessions_cookies_authentication.md",
    "source_type": "git_repo",
    "title": "sessions_cookies_authentication",
    "content": "cookie (along with the other cookies) and you can use it to keep track of their logged-in state This may all seem abstract now, but you'll get a chance to see it in action shortly Rails gives you access to the session hash in an almost identical way to the above-mentioned cookies hash Use the session variable in your views or controllers like so: ```ruby # app/controllers/users_controller rb # Set a session value session[:current_user_id] = userid\n# Access a session value\nsome_other_variable_value = session[:other_variable_key]\n# Reset a session key\nsession[:key_to_be_reset] = nil\n# Reset the entire session\nreset_session ```\nWhy would you need both cookies and sessions They are similar but not the same session is an entire hash that gets put in the secure session cookie that expires when the user closes the browser If you look in your developer tools, the \"expiration\" of that cookie is \"session\" Each value in the cookies hash gets stored as an individual cookie So cookies and sessions are sort of like temporary free database tables for you to use that are unique to a given user and will last until you either manually delete them, they have reached their expiration date, or the session is ended (depending on what you specified) A few additional notes on sessions and cookies\nsession and cookies aren't really hashes, Rails just pretends they are so it's easy for you to work with them You can still consider them as hashes just because they act very similarly to hashes You are size-limited in terms of how much you can store inside a session hash or browser cookie (~4kb) It is sufficient for any \"normal\" usage, but don't go pretending either of these are actually substitutes for a database Flashes\nYou've already seen and used the flash hash by now, but we'll cover it again from the perspective of understanding sessions flash is a special hash (okay, a method that acts like a hash) that persists only from one request to the next You can think of it as a session hash that self destructs after it's opened It's commonly used to send messages from the controller to the view so the user can see success and failure messages after submitting forms If you want to pop up \"Thanks for signing up \" on the user's browser after running the #create action (which usually uses redirect_to to send the user to a totally new page when successful), how do you send that success message",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21265,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\sessions_cookies_authentication.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 10
  },
  {
    "id": "4dc51ce6a8cd235ee0dcba4d8284c084",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\sessions_cookies_authentication.md",
    "source_type": "git_repo",
    "title": "sessions_cookies_authentication",
    "content": "as a session hash that self destructs after it's opened It's commonly used to send messages from the controller to the view so the user can see success and failure messages after submitting forms If you want to pop up \"Thanks for signing up \" on the user's browser after running the #create action (which usually uses redirect_to to send the user to a totally new page when successful), how do you send that success messageYou can't use an instance variable because the redirect caused the browser to issue a brand new HTTP request and so all instance variables were lost The flash is there to save the day Just store flash[:success] (or whatever you'd like it called) and it will be available to your view on the next new request As soon as the view accesses the hash, Rails erases the data so you don't have it show up every time the user hits a new page So clean, so convenient What about cases where the user can't sign up because of failed validations In this case, the typical #create action would just render the #new action using the existing instance variables Since it's not a totally new request, you'll want to have your error message available immediately That's why there's the handy flash now hash, e g flash now[:error] = \"Fix your submission \" Just like the regular flash, this one self destructs automatically after opening You still have to write view code to display the flash messages It's common to write a short view helper that will pin any available flash message(s) to the top of the browser You might also add a class to the message which will allow you to write some custom CSS, for instance turning :success messages green and :error messages red erb\n# app/views/layouts/application html erb <% flash each do |name, message| %>\n<div class=\"<%= name %>\"><%= message %></div>\n<% end %>\nController filters\nBefore we talk about authentication, we need to cover controller filters The idea of these filters is to run some code in your controller at very specific times, for instance before any other code has been run That's important because, if a user is requesting to run an action they haven't been authorized for, you need to nip that request in the bud and send back the appropriate error/redirect before they're able to do anything else You're basically \"filtering out\" unauthorized requests",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21265,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\sessions_cookies_authentication.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 3,
    "total_chunks": 10
  },
  {
    "id": "6c00f612e138dcb3645d93294cd60d52",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\sessions_cookies_authentication.md",
    "source_type": "git_repo",
    "title": "sessions_cookies_authentication",
    "content": "need to cover controller filters The idea of these filters is to run some code in your controller at very specific times, for instance before any other code has been run That's important because, if a user is requesting to run an action they haven't been authorized for, you need to nip that request in the bud and send back the appropriate error/redirect before they're able to do anything else You're basically \"filtering out\" unauthorized requestsWe do this through the use of a \"before filter\", which takes the name of the method we want to run:\n```ruby\n# app/controllers/users_controller\nbefore_action :require_login\nbefore_action :do_something_cool private\ndef require_login\nif current_user logged_in # allow the user to perform the action they wanted\nelse\nredirect_to login_path\nend\nend\ndef do_something_cool\n# do stuff here\nend\n```\nThe before_action method takes the symbol of the method to run before anything else gets run in the controller In the case that this callback renders or redirects, the request, as well as any callbacks that are scheduled to run after that callback, are also cancelled So in the case above, if the user was redirected to the login page, the before_action :do_something_cool callback wouldn't have been executed either You can specify to only apply the filter for specific actions by specifying the only option, e g before_action :require_login, only: [:edit, :update] The opposite applies by using the :except option it will run for all actions except those specified You'll want to hide your filter methods behind the private designation so they can only be used by that controller Finally, filters are inherited so if you'd like a filter to apply to absolutely every controller action, put it in your app/controllers/application_controller rb file Authentication\nThe whole point of authentication is to make sure that the user is who they say they are The standard way of managing this is through logging in your user via a sign in form Once the user is logged in, you keep track of that user using the session until the user logs out A related concept is authorization Yes, you may be signed in, but are you actually authorized to access what you're trying to access The typical example is the difference between a regular user and an admin user They both authenticate with the system but only the admin is authorized to make changes to certain things",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21265,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\sessions_cookies_authentication.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 4,
    "total_chunks": 10
  },
  {
    "id": "f7131e77911357078352d452dfe86488",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\sessions_cookies_authentication.md",
    "source_type": "git_repo",
    "title": "sessions_cookies_authentication",
    "content": "form Once the user is logged in, you keep track of that user using the session until the user logs out A related concept is authorization Yes, you may be signed in, but are you actually authorized to access what you're trying to access The typical example is the difference between a regular user and an admin user They both authenticate with the system but only the admin is authorized to make changes to certain thingsAuthentication and authorization go hand in hand -- you first authenticate someone so you know who they are and can check if they're authorized to view a page or perform an action When you build your app, you'll have a system of authentication to get the user signed in and to verify the user is who they say they are You authorize the user to do certain things (like delete stuff) based on which methods are protected by controller filters that require signin or elevated permissions (e g admin status) Basic and digest authentication\nIf you're looking for a very casual and insecure way of authenticating people, HTTP Basic authentication can be used We won't cover the details here, but it basically involves submitting a username and password to a form and sending it (unencrypted) across the network You use the #http_basic_authenticate_with method to do so (see the reading for examples) and to restrict access to certain controllers without it For a slightly more secure (over HTTP) authentication system, use HTTP Digest Authentication We'll again not cover it here It relies on a #before_action running a method which calls upon #authenticate_or_request_with_http_digest, which takes a block that should return the \"correct\" password that should have been provided The problem with both of these is that they hard code user names and passwords in your controller (or somewhere), so it's really just a band-aid solution Rolling your own auth\nIf you want user logins, you'll need to go through a few extra steps It's worth mentioning that you should never roll your own authentication system as there are already well battle tested solutions out there that you can use in your projects One of these is Devise which we will explore later But a few principles are useful to know First, we don't store passwords in plain text in the database That's just asking for trouble (how many news stories have you seen about major sites getting hacked and passwords being exposed in plain text ) Instead, you'll store an encrypted \"password digest\" version of the password",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21265,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\sessions_cookies_authentication.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 5,
    "total_chunks": 10
  },
  {
    "id": "3bc9b91e66687bf5c2bfb9041c923241",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\sessions_cookies_authentication.md",
    "source_type": "git_repo",
    "title": "sessions_cookies_authentication",
    "content": "tested solutions out there that you can use in your projects One of these is Devise which we will explore later But a few principles are useful to know First, we don't store passwords in plain text in the database That's just asking for trouble (how many news stories have you seen about major sites getting hacked and passwords being exposed in plain text ) Instead, you'll store an encrypted \"password digest\" version of the passwordWhen a user submits their password via the login form, instead of comparing it directly with a plaintext version of that password, you actually convert the submitted password into digest form You'll then compare that new digest with the digest you'd previously stored from the user If they match, you've got yourself a logged in user This is much better because digests are one-way encryption You can easily create a digest from a password string, but it's extremely difficult to decrypt the digest and retrieve the original password The most effective way to crack a bunch of digests is just to make a giant list of possible passwords, turn them into digests, and see if those digests match the one you're trying to crack (i e guess-and-check on a massive scale) Rails doesn't make you do everything yourself It has a method called #has_secure_password which you just drop into your User model and it will add a lot of the functionality you're looking for To work with that handy method, you basically set up your User model to handle accepting password and password_confirmation attributes but you won't actually persist those to the database has_secure_password intercepts those values and converts them into the password digest for you To initialize a new user session (when your user signs in), you'll need to create a new controller (usually sessions_controller rb) and the corresponding routes for :new, :create and :destroy If the user passes the correct credentials (which we can check using the #authenticate method), you'll use the session variable to store their ID, which you can use to validate that they are who they say they are This is a way of authenticating the user that uses Rails' existing session infrastructure, but only lasts as long as the session does If your user wants to be \"remembered\" (you've probably seen the \"remember me\" checkbox plenty of times on login forms), you need a way to remember them for longer than just the length of the browser session",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21265,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\sessions_cookies_authentication.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 6,
    "total_chunks": 10
  },
  {
    "id": "d4f83227abfd18f91ab8e7725cca8b27",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\sessions_cookies_authentication.md",
    "source_type": "git_repo",
    "title": "sessions_cookies_authentication",
    "content": "their ID, which you can use to validate that they are who they say they are This is a way of authenticating the user that uses Rails' existing session infrastructure, but only lasts as long as the session does If your user wants to be \"remembered\" (you've probably seen the \"remember me\" checkbox plenty of times on login forms), you need a way to remember them for longer than just the length of the browser sessionTo do this, you'll need to create another column in your Users table for an encrypted remember_token (or whatever you'd like to call it) You'll use that to store a random string for that user that will be used in the future to identify them You will drop the unencrypted token as a permanent cookie (using cookies permanent[:remember_token]) into the user's browser That cookie will be submitted with each new request, so you can check with the encrypted version in the database to see who that user is whenever they make a request This is basically a more explicit and permanent version of what Rails is doing with sessions It's best practice to reset the token on each new signin if the user signs out It's usually good to make some helper methods for yourself to cover common behavior like signing in a user, checking if a user is signed in, and comparing the currently signed in user with another user (useful if the current user is looking at another user's page and shouldn't see links to \"edit\" it) These things will make your life much easier since you can reuse them in your controller filters or your views or even your tests A generic step-by-step overview:\nAdd a column to your Users table to contain the user's password_digest When the user signs up, turn the password they submitted into digest form and then store THAT in the new database column by adding the has_secure_password method to your User model Don't forget any necessary validations for password and password confirmation length Build a sessions controller (and corresponding routes) and use the #authenticate method to sign in the user when the user has submitted the proper credentials using the signin form Allow the user to be remembered by creating a remember_token column in the Users table and saving that token as a permanent cookie in the user's browser Reset on each new signin On each page load that requires authentication (and using a #before_action in the appropriate controller(s)), first check the user's cookie remember_token against the database to see if they're already signed in If not, redirect to the signin page",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21265,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\sessions_cookies_authentication.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 7,
    "total_chunks": 10
  },
  {
    "id": "1e4ecf7e9173ca5078f52518be8e96a9",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\sessions_cookies_authentication.md",
    "source_type": "git_repo",
    "title": "sessions_cookies_authentication",
    "content": "proper credentials using the signin form Allow the user to be remembered by creating a remember_token column in the Users table and saving that token as a permanent cookie in the user's browser Reset on each new signin On each page load that requires authentication (and using a #before_action in the appropriate controller(s)), first check the user's cookie remember_token against the database to see if they're already signed in If not, redirect to the signin pageMake helper methods as necessary to let you do things like easily determine if a user is signed in or compare another user to the currently signed in user Profit Devise\nDevise is a gem which has been built to handle all this stuff for you It's ultimately better than rolling your own auth because they've covered a lot of the edge cases and security loopholes that you might not think about Devise lets you interface with more advanced authentication systems for talking to APIs like OAuth So it's quite useful down the road In a short word, Devise prepackages for you a bunch of signin and signup forms and methods to help implement them It's made up of 10 modules (and you can choose which ones you want to use) You install the devise gem and run the installer to drop their files into your application You'll also need to run a database migration to add their additional fields to your Users table Configuration will be dependent on your use case Do you want to make the user confirm their signup using an email (the Confirmable module) Do you want to allow the user to reset their password (the Recoverable module) Assignment\n1 Read this article about [how Rails sessions work](https://www justinweiss com/articles/how-rails-sessions-work/) 1 Watch this video to [dive deep into sessions](https://www youtube com/watch v=mqUbnZIY3OQ) 1 Read sections 5 and 6 of the [Rails Guides on Controllers](http://guides rubyonrails org/action_controller_overview html#session) Don't worry too much about the details of `session_store` configurations in 5 1 right now 1 Read section 7 of the [Rails Guides on Controllers](https://guides rubyonrails org/action_controller_overview html#controller-callbacks) to understand controller filters 1 Read section 4 of the [Rails Guides on Controller Advanced Topics](https://guides rubyonrails org/action_controller_advanced_topics html#http-authentication) to understand more about authentication 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21265,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\sessions_cookies_authentication.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 8,
    "total_chunks": 10
  },
  {
    "id": "05d06a0ccbbb9d032eb4dec9fd4f266c",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\sessions_cookies_authentication.md",
    "source_type": "git_repo",
    "title": "sessions_cookies_authentication",
    "content": "to [dive deep into sessions](https://www youtube com/watch v=mqUbnZIY3OQ) 1 Read sections 5 and 6 of the [Rails Guides on Controllers](http://guides rubyonrails org/action_controller_overview html#session) Don't worry too much about the details of `session_store` configurations in 5 1 right now 1 Read section 7 of the [Rails Guides on Controllers](https://guides rubyonrails org/action_controller_overview html#controller-callbacks) to understand controller filters 1 Read section 4 of the [Rails Guides on Controller Advanced Topics](https://guides rubyonrails org/action_controller_advanced_topics html#http-authentication) to understand more about authentication 1Glance over the [Devise Documentation](https://github com/plataformatec/devise) Read about how to install it in your Rails App and what the different modules do You'll be using it with upcoming projects Conclusion\nAuthentication can appear to be a fairly complicated topic -- there are a lot of moving parts At it's core, though, you're just checking whether the person making a request is actually a signed in user who has the permissions to do so, all by using browser cookies in some form or another This lesson should have given you some appreciation for how complicated login systems can potentially get but it should also have removed the veil from the websites you've visited countless times Auth isn't rocket science and you'll shortly be building it into your own applications Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge How would you set a cookie for hair color on a user's browser How would you require a user is logged in before running some code Would you use Basic HTTP Authentication for authenticating users over alternatives such as the Devise gem How would you flash an error message on a user's browser if they put an invalid username What are some reasons you would want to use the Devise gem for user authentication over building your own authorization system Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Authentication in Rails 3 1 from Railscasts better than we can explain it All About Cookies ( org)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21265,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\forms_and_authentication\\sessions_cookies_authentication.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 9,
    "total_chunks": 10
  },
  {
    "id": "d96d669286c0332aaa3f4ee889896ec4",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\introduction\\web_refresher.md",
    "source_type": "git_repo",
    "title": "web_refresher",
    "content": "Introduction\nTo really understand how Rails works, you need to have a solid base in the guts of the web You've already covered some of this in previous sections (and if you went through the Ruby curriculum you can just skim it), but this time you'll get a chance (in the project) to reach out and make some real web requests Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson The basics of HTTP The 4 most commonly used HTTP verbs The 7 RESTful routes of Rails The different components of a URL The basics of MVC What an API is What \"cookies\" and \"sessions\" are The difference between \"authentication\" and \"authorization\" HTTP\nHTTP is just a way of structuring the request-and-response conversation between your browser and the server Actually, it's not even a conversation since it is stateless it's more of an \"ask and receive\" The protocol outlines how that brief piece of dialogue should occur Check out these resources:\nThis tutsplus post on HTTP describes what's going on with HTTP This sniffer tool - try retrieving a couple of websites (like https://www theodinproject com/) on your own This great video on communications between http requests and the web server One key component to pay attention to is the fact that the request and response both have header and (usually) body components The header contains information about the request or response itself (meta data), including which website to send or return to and what the status of the response is The body of the request can contain things like data submitted by a form or cookies or authentication tokens while the response will usually contain the HTML page you're trying to access The other key component is that each request uses one of four main \"verbs\" -- GET, POST, PUT, and DELETE These days, you almost only see GET and POST requests (even if you're trying to do a delete of something they usually fake it using a POST request), but it's important to understand the difference between the verbs REST\nREST (short for Representational state transfer) is a term that you'll see coming up again and again because it's a very powerful idea It basically says that there are really only 7 different types of things that you usually want to do to an individual resource via the web and you can do them by mixing and matching the HTTP verbs we just covered A \"resource\" usually means a \"thing\" in your database or a data model",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15161,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\introduction\\web_refresher.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "e46e4ae342060fbd29a8d75f5cc4ba53",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\introduction\\web_refresher.md",
    "source_type": "git_repo",
    "title": "web_refresher",
    "content": "(short for Representational state transfer) is a term that you'll see coming up again and again because it's a very powerful idea It basically says that there are really only 7 different types of things that you usually want to do to an individual resource via the web and you can do them by mixing and matching the HTTP verbs we just covered A \"resource\" usually means a \"thing\" in your database or a data modelIn this case, we'll assume that resource is a blog Post model that you've set up:\nGET all the posts (aka \"index\" the posts)\nGET just one specific post (aka \"show\" that post)\nGET the page that lets you create a new post (aka view the \"new\" post page)\nPOST the data you just filled out for a new post back to the server so it can create that post (aka \"create\" the post)\nGET the page that lets you edit an existing post (aka view the \"edit\" post page)\nPUT (or PATCH) the data you just filled out for editing the post back to the server so it can actually perform the update (aka \"update\" the post)\nDELETE one specific post by sending a delete request to the server (aka \"destroy\" the post)\nThe highlighted words correspond to standard Rails controller actions Why is this important Because it gives you a very organized way of thinking about your resources This is the way to model your requests and should be the ONLY way that those requests are done (e g you shouldn't be actually submitting the data for editing a post using a GET request that should be a POST) If you have a hard time thinking of how those seven scenarios (or at least a subset of them) would apply to a resource you want to create in your database, you may need to rethink how your data is being set up It's also important because Rails is structured to follow these conventions in a very straightforward way As long as you're performing those actions, life is very easy for you and the request that you get from the browser can be easily routed through Rails' guts It may seem simplistic to you up front to think of things this way, but once you've got a bit of complexity in your data model, you'll find that falling back on RESTful thinking can help untangle things for you URLs\nYou may think you know what's in a URL, but which part is the host protocol (aka scheme) parameters path",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15161,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\introduction\\web_refresher.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "60d7cd4ae5501b2046ac6c6c740e7eb5",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\introduction\\web_refresher.md",
    "source_type": "git_repo",
    "title": "web_refresher",
    "content": "the request that you get from the browser can be easily routed through Rails' guts It may seem simplistic to you up front to think of things this way, but once you've got a bit of complexity in your data model, you'll find that falling back on RESTful thinking can help untangle things for you URLs You may think you know what's in a URL, but which part is the host protocol (aka scheme) parameters pathCheck out this article by Matt Cutts on how Googlers pick apart URL components Quick quiz\nThe URL is: https://www google com/search q=what+is+a+url\nWhat is the \"Path\" What is the \"Parameter\" portion What is the \"Top Level Domain\" What is the \"Protocol\" Once you understand what these components are, you can easily use Ruby's libraries to help you build your own and send requests You also run into specific pieces like the \"path\" and \"parameters\" again and again when using Rails Answers:\n/search\nq=what+is+a+url\ncom\nhttps\nMVC\nYou've heard about it again and again, but do you really know what MVC is Errrrmmmmm, ummm MVC is all about organization and Rails is all about MVC When you build a new Rails project, you get that giant mass of folders and files created Though it seems like there is an overwhelming number of files inside your app directory, they are highly organized and specifically meant to separate the Model, View, and Controller The point of MVC is that the functions of a web application can be broken down into more or less distinct parts Each part gets its own Ruby class That's great for you the developer because, when you want to tweak a specific part of the code base or fix a bug, you know exactly which file to modify and where it is The path through MVC\nOnce a request from a browser comes into your application, at the most basic level:\nThe router figures out which controller to send it to (e g for your blog, the Posts controller) That controller asks the model (e g Post model) for data and any other tough questions it has Then that controller passes off whatever data it needs to the views (e g index html erb), which are basically just HTML templates that are waiting for those variables Once the proper view has been pumped full of the data it needs (like the current user's name), it gets sent back to the client that made the original request Presto",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15161,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\introduction\\web_refresher.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "72a07bd09057efab9303bcf23eeba61c",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\introduction\\web_refresher.md",
    "source_type": "git_repo",
    "title": "web_refresher",
    "content": "asks the model (e g Post model) for data and any other tough questions it has Then that controller passes off whatever data it needs to the views (e g index html erb), which are basically just HTML templates that are waiting for those variables Once the proper view has been pumped full of the data it needs (like the current user's name), it gets sent back to the client that made the original request Prestobetterexplained com has a deeper explanation of MVC To characterize the three (badly), the model is the supersmart geek in the back room, the controller is the social middleman that talks to everyone but doesn't really do anything too intensive (it asks the model in those cases), and the view just looks pretty and waits to get its outfit from the controller Just roll with it, you'll see it in action and learn to love it APIs\nWhen your computer or a server (which you're programming) wants to make a request to another website, it doesn't bother clicking on things in the browser, it asks that other website for data directly by using that website's API An API is just an interface Our web browser goes in the front door to display a bunch of info from Facebook, and our web server goes in the side door for the same data (much faster and more direct) via the API So you want to get data from Google Maps to display on your webpage You hit its API using the rules specified in its API documentation Just about every big website makes some portion of its data available via an API and you can too quite easily using Rails See this explanation (just the first page) on What APIs are from howstuffworks Not all APIs are web-based Plenty of them use the same HTTP format but are really just designed to pass data between services In fact, that's how the components of Rails are all strung together -- they use HTTP to communicate with each other You'll actually get a chance to build your own API a little later on, and Rails makes it really easy for you There's nothing magical about it -- you just tell your controller that you want to respond to requests made by other servers instead of (or in addition to) normal web requests and then specify what exactly you'd like returned (since it probably won't be an HTML view) But we get ahead of ourselves a bit here",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15161,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\introduction\\web_refresher.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "213cfc77bd1daa8479e3233be7c7203d",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\introduction\\web_refresher.md",
    "source_type": "git_repo",
    "title": "web_refresher",
    "content": "get a chance to build your own API a little later on, and Rails makes it really easy for you There's nothing magical about it -- you just tell your controller that you want to respond to requests made by other servers instead of (or in addition to) normal web requests and then specify what exactly you'd like returned (since it probably won't be an HTML view) But we get ahead of ourselves a bit herethe main point is that you'll see \"API\" come up plenty of times and it's totally harmless and just means the way that two applications talk to each other Cookies\nYou've heard about cookies Cookies are basically a way for websites to remember who you are from one request to another Remember -- every HTTP request is totally independent of each other Meaning that when you go to the Home page of a website and then click on a link to their About page, the web server treats you as a completely new user Unless they've given you some cookies (which they almost certainly have) Cookies are little bits of data that your browser sends to the website every time you make a request to it From the perspective of the web server, it lets the server identify you as the same person who made any of a series of previous requests It preserves the state of your session Check out allaboutcookies org and read the first three sections for some more info about cookies The Wikipedia article on cookies may also be helpful reading Go to a website you normally frequent, open up your developer tools, and find the cookies In Chrome, it's by clicking on \"Application\" tab then \"cookies\" on the leftmost menu You'll see them as name-value pairs Often there will be something like a \"user_session\" or \"token\" variable that is some unintelligible string of characters Sessions\nCookies are important because they enable you to have a single continuous \"session\" while you're interacting with a website It means you only have to log in once instead of for every single request (which you probably experienced from a broken website at some point in the late 90's) Your browser includes all the cookies that a particular website has set along with its normal request and the server uses those strings to figure out which user you are and whether you are logged in, what your settings are (like if you've set up viewing preferences) and things like that It's also why, when you clear cookies from your browser history, everything seems to get wiped out and go back to the default",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15161,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\introduction\\web_refresher.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "00662050150be71b28f50f5cccf1f44d",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\introduction\\web_refresher.md",
    "source_type": "git_repo",
    "title": "web_refresher",
    "content": "late 90's) Your browser includes all the cookies that a particular website has set along with its normal request and the server uses those strings to figure out which user you are and whether you are logged in, what your settings are (like if you've set up viewing preferences) and things like that It's also why, when you clear cookies from your browser history, everything seems to get wiped out and go back to the defaultIt's also how some ads seem to follow you from one website to another -- another name for them is \"tracking cookies\" Authentication\nOn the server side, you'll interact with cookies and session variables quite a bit As mentioned above, one of the main uses of these is to determine who the user is, or \"authentication\" You'll basically retrieve the cookie that the user sends you, use it to find that user in your database, and (if the user exists) then you can display the customized web page for that user It's pretty straightforward in theory, but some of the security implications get a bit hairy so luckily some nice folks created a very handy gem called Devise which takes care of all this stuff for you In this curriculum (a bit later on), you'll be creating your own authentication system before learning how to use Devise to take care of the heavy lifting Authorization\nAuthorization is the partner concept to Authentication Authentication lets you determine WHO the user is, but the idea behind authorization is that you might limit what the person can see based on their permission level The most common case of this is actually the distinction between a random not-logged-in user and one who is logged in Another common case of this is the difference between regular users of a website and the admin users who have special privileges On the server side, you will end up writing (or using) methods which restrict access to certain types of actions based on who the current user is (or whether the requester is logged in at all) Again, Devise will help you with this by providing some of these helper methods (like for checking whether any user is logged in or who the current user is) for you Conclusion\nWe'll dig into this stuff a bit later, but it's good to understand in the context of what we talked about before in regards to how requests are made because it brings a couple of extra layers onto these formerly-independent HTTP requests",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15161,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\introduction\\web_refresher.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "04ed0cce5bb4caac222db1a6b704256b",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\introduction\\web_refresher.md",
    "source_type": "git_repo",
    "title": "web_refresher",
    "content": "at all) Again, Devise will help you with this by providing some of these helper methods (like for checking whether any user is logged in or who the current user is) for you Conclusion We'll dig into this stuff a bit later, but it's good to understand in the context of what we talked about before in regards to how requests are made because it brings a couple of extra layers onto these formerly-independent HTTP requestsAuthentication systems allow you to establish sessions which preserve the user's state (like logged in status) across requests and helps you determine whether the user is authorized to do a particular thing Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What do you call an HTTP message that goes from client to server What do you call an HTTP message that goes from server to client Which HTTP message would include a status code and which would include an action verb What is the name of the additional information that is added after the path of a URL What does MVC stand for What is an \"API\" Why do you need \"cookies\" to continue your \"session\" What is the difference between \"authentication\" and \"authorization\" Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental HTTP explained by Harvard's David Malan\nHTTP Request/Response Basics from Pralay Roy",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15161,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\introduction\\web_refresher.md",
      "source_type": "git_repo"
    },
    "token_count": 301,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "e598670ffac4cf16c336816f66952465",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\actioncable_lesson.md",
    "source_type": "git_repo",
    "title": "message-display {",
    "content": "Introduction\nThis is a basic follow along lesson to show you how Action Cable can be used to enhance an application to give it real time features We won't explain everything in detail, as much of the setup instructions should be familiar to you but will take the time around the Action Cable specific content to explain things a little more The app we'll build will be in two stages The first stage will be an app for sending messages only viewable to those currently logged in We'll then build on it in the second stage to save the messages so that they are also viewable to anyone who logs in in the future Setup\nFirst let's create the app\nbash\nrails new messenger -T\nAdd devise to the Gemfile\nbash\nbundle add devise\nbundle add both adds the gem to our Gemfile and runs bundle install The good thing about it is it also sets the gem version to its latest variant The down side is that it adds the gems to the bottom of the Gemfile by default So use it with caution The bundle add command has a few flags you can use Run the devise installer\nbash\nrails generate devise:install\nOpen config/environments/development rb and add the following line\nruby\nconfig action_mailer default_url_options = { host: 'localhost', port: 3000 }\nGenerate our user model and migrate\nbash\nrails generate devise user && rails db:migrate\nTo get things started we'll just create a couple of users in db/seeds rb\nruby\nUser create(email: 'humblebragger@humblebrag com', password: 'humblebaby')\nUser create(email: 'fitnessgrampacer@test com', password: 'pacertest')\nYou can set the user info to whatever you want Then run the seed file\nbash\nrails db:seed\nLet's create a basic one page app, users will land on our homepage, get redirected to log in, and then directed back to the homepage First let's create a controller We'll just call it hangouts as our users will hangout there doing absolutely nothing bash\nrails generate controller hangouts index\nSet the root to our index page in routes rb\nruby\nroot 'hangouts#index'\nLet's also protect our app from unauthorised viewing by adding the following to app/controllers/application_controller rb\nruby\nbefore_action :authenticate_user",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21219,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\actioncable_lesson.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 0,
    "total_chunks": 10
  },
  {
    "id": "d69cc85c7a5b273c3fdfa96e3e9fafa8",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\actioncable_lesson.md",
    "source_type": "git_repo",
    "title": "message-display {",
    "content": "page app, users will land on our homepage, get redirected to log in, and then directed back to the homepage First let's create a controller We'll just call it hangouts as our users will hangout there doing absolutely nothing bash rails generate controller hangouts index Set the root to our index page in routes rb ruby root 'hangouts#index' Let's also protect our app from unauthorised viewing by adding the following to app/controllers/application_controller rb ruby before_action :authenticate_userLastly in the initial setup, let's add a little bit of styling with the Bulma gem and a navbar just with some login and logout functionality We'll also install dartsass-rails so that Bulma works appropriately (Note: If you receive this error - LoadError: cannot load such file -- sassc run rails tmp:clear and try restarting the server)\nbash\nbundle add bulma-rails /bin/bundle add dartsass-rails /bin/rails dartsass:install\nNext, and just to save some time you need to go to the app/assets/stylesheets/ directory and change application css to application scss Bulma-rails uses scss and although there are other ways to handle it this is the easiest Now open the application scss file and right at the bottom add\ncss\n@use \"bulma\";\nLastly, to add the navbar functionality we can just add it straight into the main layout file Open app/views/layouts/application html erb add the following code right below the opening <body> tag and above the <%= yield %> line ```html\n<% if current_user %>\n<%= link_to \"Logout\", destroy_user_session_path, data: { turbo_method: :delete }, class: 'button is-link' %>\n<% else %>\n<%= link_to \"Login\", new_user_session_path, class: 'button is-link' %>\n<% end %>\n```\nThis mostly is just using Bulma stylings to make it look nice Now if you were to spin up a server and open localhost in a browser you should need to log in to access the homepage and be able to logout using the button in the navbar The login button is actually pretty redundant since as soon as you logout you get taken to the login screen because the app is protected, but it is what it is Action Cable\nLet's now deal with setting up the server connection",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21219,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\actioncable_lesson.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 1,
    "total_chunks": 10
  },
  {
    "id": "dc9167bd0118fe93b23d0ecd01192968",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\actioncable_lesson.md",
    "source_type": "git_repo",
    "title": "message-display {",
    "content": "you were to spin up a server and open localhost in a browser you should need to log in to access the homepage and be able to logout using the button in the navbar The login button is actually pretty redundant since as soon as you logout you get taken to the login screen because the app is protected, but it is what it is Action Cable Let's now deal with setting up the server connectionAs we covered in the Action Cable lesson, the connection manages all the channels that a client subscribes to and deals with authentication and authorization If you open up app/channels/application_cable/connection rb we can authorise a connection when the user logs in The code is pretty identical to the connection found in the Rails Guides on Action Cable, with the only difference being we can use the user details set on the warden object environment variable ```ruby\nmodule ApplicationCable\nclass Connection < ActionCable::Connection::Base\nidentified_by :current_user\ndef connect\nself current_user = find_verified_user\nend\nprivate\ndef find_verified_user\nif verified_user = env['warden'] user\nverified_user\nelse\nreject_unauthorized_connection\nend\nend\nend\nend\n```\nThis is used to establish a connection between client and server but it won't do anything until you create a channel It is the channel that makes a request to the websocket server that then starts the connection authorization We can create a channel for messages In the terminal we can write\nbash\nrails generate channel message\nYou can see from the output it creates some files for us\nbash\ncreate  app/channels/message_channel rb\nidentical  app/javascript/channels/index js\nidentical  app/javascript/channels/consumer js\ncreate  app/javascript/channels/message_channel js\nThe index and consumer js files already exist Nice But it has created a message_channel rb and message_channel js file\nIn app/channels/message_channel rb let's establish our stream Remember, streams are how Rails publishes broadcasts to subscribers We won't be operating on a model so we won't need stream_for We can instead use stream_from to just stream to our message room",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21219,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\actioncable_lesson.md",
      "source_type": "git_repo"
    },
    "token_count": 429,
    "chunk_index": 2,
    "total_chunks": 10
  },
  {
    "id": "2b1551c75953ea07aa5b6dc82ed0e856",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\actioncable_lesson.md",
    "source_type": "git_repo",
    "title": "message-display {",
    "content": "files for us bash create app/channels/message_channel rb identical app/javascript/channels/index js identical app/javascript/channels/consumer js create app/javascript/channels/message_channel js The index and consumer js files already exist Nice But it has created a message_channel rb and message_channel js file In app/channels/message_channel rb let's establish our stream Remember, streams are how Rails publishes broadcasts to subscribers We won't be operating on a model so we won't need stream_for We can instead use stream_from to just stream to our message room```ruby\nclass MessageChannel < ApplicationCable::Channel\ndef subscribed\nstream_from 'message'\nend\ndef unsubscribed\n# Any cleanup needed when channel is unsubscribed\nend\nend\n```\nNow that our stream is setup you should see in the server logs when you refresh that you are connected to the channel with MessageChannel is streaming from message Nice The next thing we need is a display for our messages and a form in which to post them on our index page Open up app/views/hangouts/index html erb and add the following code\n```html\n```\nWe've written a div with an id of message-display where we can display the messages as they are created and then we have a form The form doesn't have an action because we aren't posting it anywhere We'll need to grab a reference to the form in our JavaScript and when it's submitted we can post a message to the websocket server We use a basic HTML form because we don't have an object or url to work with so Rails form helpers aren't much use to us We can change this later when we do create a Message object to work with All the class names are Bulma stylings so don't worry too much about the markup I'm not going to stress about the page looking amazing But just to make the message display area a decent size open up app/assets/stylesheets/hangouts scss and add the following code ```css\nmessage-display {\nheight: 80vh;\noverflow: auto\n}\nmessage-input {\nwidth: 60vw;\n}\n```\nImport this into app/assets/stylesheets/application scss by adding the\nfollowing at the bottom of that file:\nscss\n@import \" /hangouts scss\"\nThe Asset Pipeline should\npick up on these changes, but if not:\nrun /bin/dev to recompile the stylesheet assets\nIf the changes are not being picked up, run rails assets:precompile",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21219,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\actioncable_lesson.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 3,
    "total_chunks": 10
  },
  {
    "id": "2b062854a5c5d2d9baeff1072ca56a84",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\actioncable_lesson.md",
    "source_type": "git_repo",
    "title": "message-display {",
    "content": "a decent size open up app/assets/stylesheets/hangouts scss and add the following code ```css message-display { height: 80vh; overflow: auto } message-input { width: 60vw; } ``` Import this into app/assets/stylesheets/application scss by adding the following at the bottom of that file: scss @import \" /hangouts scss\" The Asset Pipeline should pick up on these changes, but if not: run /bin/dev to recompile the stylesheet assets If the changes are not being picked up, run rails assets:precompileNow when the form is submitted, we need to intercept and handle it Open up our app/javascript/channels/message_channel js and take a look at the code as it stands ```javascript\nimport consumer from \" /consumer\"\nconst messageChannel = consumer subscriptions create(\"MessageChannel\", {\nconnected() {\n},\ndisconnected() {\n},\nreceived(data) {\n}\n});\n```\nYours will have some comments that aren't important, but you will need to verify that the constant messageChannel is declared What we need to do here first is set an event listener on the form submit so we can grab the value entered Once we have the value, we want to send it to the server to be broadcast to all the channel subscribers This is what we call rebroadcasting We can use MessageChannel send to send the value entered in the input box to our websocket server Right at the bottom of our message_channel js file add the following code\njavascript\ndocument addEventListener(\"turbo:load\", () => {\nlet form = document querySelector('#message-form')\nif(form) {\nform addEventListener('submit', (e) => {\ne preventDefault()\nlet messageInput = document querySelector('#message-input') value\nif(messageInput == '') return;\nconst message = {\nbody: messageInput\n}\nmessageChannel send({message: message})\n})\n}\n})\nFirstly, since JS assets are loaded in the head of our HTML, the JavaScript files will be evaluated often before the DOM has rendered, so we first want to make sure the DOM has been created We do this using the turbo:load event listener Then we want to check if we are on a page with the form It might seem obvious since we only have one page but you can never be too careful Next if we are on a page with the form we add an event listener to it on its submit property When the form is submitted we first prevent the default submit from happening",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21219,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\actioncable_lesson.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 4,
    "total_chunks": 10
  },
  {
    "id": "fd3b1174d1685336c0817057d4a1fb9b",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\actioncable_lesson.md",
    "source_type": "git_repo",
    "title": "message-display {",
    "content": "has been created We do this using the turbo:load event listener Then we want to check if we are on a page with the form It might seem obvious since we only have one page but you can never be too careful Next if we are on a page with the form we add an event listener to it on its submit property When the form is submitted we first prevent the default submit from happeningThis stops the page rerendering Then we grab the value from our input field and check it isn't an empty string If it is, then we return and do nothing If it isn't, then we create a JS object with a key named body which holds the value of our messageInput If you're wondering why we did this under its own object instead of just sending message: messageInput in the send method it's because often you'll submit more than one parameter, and when we do create a Message Model this is similar to how it will be returned from a controller The last part of our code is the important bit We call send on messageChannel and pass it an object with a key of message and a value of the message object we create earlier You can see we create messageChannel in this line const messageChannel = consumer subscriptions create(\"MessageChannel\", { So it holds a reference to the channel created for message When we call send on it, Rails knows to route it to the message_channel on the server side If you save this file and refresh your browser if you have a rails server running you should be able to submit a message without the page refreshing Check the server logs and you should see something like\nbash\nUnable to process MessageChannel#receive({\"message\"=>{\"body\"=>\"hello\"}})\nThis is because we're missing the server side handling of our message submitted to the server The Rails Guides section linked above on rebroadcasting shows a receive method on the server side to handle incoming messages from the client Open up app/channels/message_channel rb and underneath the unsubscribed method lets add the receive method\nruby\ndef receive(data)\nActionCable server broadcast('message', data)\nend\nRails handles routing any incoming message from a client to the receive method on the class representing the channel through which the message was sent In our receive method we broadcast the message right back to all subscribers of the message stream Sending it right back might seem strange but it's how we can ensure a message created on one client gets sent to all other clients subscribed to the channel without them having to refresh their browser",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21219,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\actioncable_lesson.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 5,
    "total_chunks": 10
  },
  {
    "id": "78c738b0eb026f8a1ed91f234fd21f7a",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\actioncable_lesson.md",
    "source_type": "git_repo",
    "title": "message-display {",
    "content": "routing any incoming message from a client to the receive method on the class representing the channel through which the message was sent In our receive method we broadcast the message right back to all subscribers of the message stream Sending it right back might seem strange but it's how we can ensure a message created on one client gets sent to all other clients subscribed to the channel without them having to refresh their browserThis is one of the main benefits of WebSockets When data is broadcast to subscriber it goes right back to the client side to the object handling the connection to the websocket channel In this case it's our messageChannel that references the connection Data received here goes, funnily enough, to the received function of our messageChannel object in message_channel js Inside received we need to use the data received to create a template for the message so we can display it and we then want to append it to our #message-display div In order to create a template we can use JavaScript string template literals Underneath the received function add a new function called template that will receive the data and return an HTML string The template does use some Bulma stylings so don't worry about the actual markup It could be any HTML ```javascript\nconst messageChannel = consumer subscriptions create(\"MessageChannel\", {\nconnected() {\n},\ndisconnected() {\n},\nreceived(data) {\n},\ntemplate(data) {\nreturn <article class=\"message\">\n<div class=\"message-header\">\n<p>${data user email}</p>\n</div>\n<div class=\"message-body\">\n<p>${data message body}</p>\n</div>\n</article>\n}\n});\n```\nDon't forget to add a comma after the received function To get the message to display in our view we first find the div with the id of message-display that we created in our hangouts index view We can then create the template and insert it into the document This will happen in our received() function which handles incoming messages from the websocket server javascript\nreceived(data) {\nconst messageDisplay = document querySelector('#message-display')\nmessageDisplay insertAdjacentHTML('beforeend', this template(data))\n}\nIf you try this now you will get an error That is because the data received doesn't know anything about the user so in our template where we write ${data user email} it won't have a reference to the user To fix this we need to go back to our receive method in message_channel rb Recall it currently looks like\nruby\ndef receive(data)\nActionCable server",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21219,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\actioncable_lesson.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 6,
    "total_chunks": 10
  },
  {
    "id": "9afb29b0d2b0d31709c095480ba17580",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\actioncable_lesson.md",
    "source_type": "git_repo",
    "title": "message-display {",
    "content": "{ const messageDisplay = document querySelector('#message-display') messageDisplay insertAdjacentHTML('beforeend', this template(data)) } If you try this now you will get an error That is because the data received doesn't know anything about the user so in our template where we write ${data user email} it won't have a reference to the user To fix this we need to go back to our receive method in message_channel rb Recall it currently looks like ruby def receive(data) ActionCable serverbroadcast('message', data)\nend\nTo fix this we just need to set user on data Remember data was json that has been turned into a hash object in our Ruby code And we have access to the user who sent the message from current_user ruby\ndef receive(data)\ndata['user'] = current_user\nActionCable server broadcast('message', data)\nend\ndata will then be converted back to JSON as it gets sent back to the client to be handled in the js file Not bad Now if you log in and try and post a message you should get it nicely displayed Open a private browser window and log in as your other user Post some messages there with the other user too The cool thing about our app currently is that it works as a secret meeting place Only current logged in users will ever see the messages as they post Anyone who joins later will never know what was said earlier As cool as that is we will now cover turning the app into something which does save the messages Strap in First things first We're going to need a message model We know from our template it needs a body of type string and we also need to reference the user who created it That's everything for now In the terminal type\nbash\nrails generate model message body:string user:references\nAnd then\nbash\nrails db:migrate\nNext we need a controller for our messages We only need a create action since we aren't doing anything else with them\nbash\nrails generate controller messages\nThen in your routes rb create the resource\nruby\nresources :messages, only: [:create]\nIn our user model add the other side of the association\nruby\nhas_many :messages\nWe can now create a form using Rails helpers First in our hangouts controller in the index method we can create a new message object for the form to use\nruby\ndef index\n@message = Message new\nend\nThen in our hangouts index view we can change the form to use form_with",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21219,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\actioncable_lesson.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 7,
    "total_chunks": 10
  },
  {
    "id": "9fd7c750a7890fecb620998092f36f1d",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\actioncable_lesson.md",
    "source_type": "git_repo",
    "title": "message-display {",
    "content": "routes rb create the resource ruby resources :messages, only: [:create] In our user model add the other side of the association ruby has_many :messages We can now create a form using Rails helpers First in our hangouts controller in the index method we can create a new message object for the form to use ruby def index @message = Message new end Then in our hangouts index view we can change the form to use form_withYou don't need to change anything else, just replace the form inside of the div with the message-form id with the following form:\n```html\n<%= form_with model: @message, local: false do |f| %>\n<%= f text_field :body, id: 'message-input', class: 'input' %>\n<%= f submit 'Send Message', class: 'button is-primary' %>\n<% end %>\n```\nIf you try and submit a message now it will still work That's because in our message_channel js file we still have the code hijacking the submit event and preventing the default You should now delete the bit of the code Open the message_channel js file and delete\njavascript\ndocument addEventListener(\"turbo:load\", () => {\nlet form = document querySelector('#message-form')\nif(form) {\nform addEventListener('submit', (e) => {\ne preventDefault()\nlet messageInput = document querySelector('#message-input') value\nif(messageInput == '') return;\nconst message = {\nbody: messageInput\n}\nmessageChannel send({message: message})\n})\n}\n})\nSubmitting the form now does work in the server logs, but obviously nothing happens Before we tackle that we firstly need to tackle displaying any current message on page load Go back to our hangouts controller and in the index method add the following line\nruby\n@messages = Message all\nThen in our index view let's iterate the messages and display them using the same HTML as we used in our template In our hangouts index file in the message-display div add the following code ```html\n<% @messages each do |message| %>\n<%= message user email %>\n<%= message body %>\n<% end %>\n```\nKudos if you noticed the N+1 problem we just introduced By calling message user for each message Let's fix that in the hangouts controller index method\nruby\n@messages = Message",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21219,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\actioncable_lesson.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 8,
    "total_chunks": 10
  },
  {
    "id": "60d196c5cc994fe844b2dfd077231a6e",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\actioncable_lesson.md",
    "source_type": "git_repo",
    "title": "message-display {",
    "content": "and display them using the same HTML as we used in our template In our hangouts index file in the message-display div add the following code ```html <% @messages each do |message| %> <%= message user email %> <%= message body %> <% end %> ``` Kudos if you noticed the N+1 problem we just introduced By calling message user for each message Let's fix that in the hangouts controller index method ruby @messages = Messageincludes(:user)\nMuch better\nNow let's deal with our create method in the messages controller\n```ruby\ndef create\n@message = current_user messages build(message_params)\n@message save\nActionCable server broadcast('message', @message as_json(include: :user))\nend\nprivate\ndef message_params\nparams expect(message: [:body])\nend\n```\nThis should all be familiar with the exception of @message as_json(include: :user) To send data to the client through the websocket server it must be in a json like format If we just supplied @message then Rails would call as_json itself for us on the object However, since we want to include the user association we need to call it ourselves We just have one last small change to make If you put a console log on data in the received function you'd see now body is a direct property of data so in our template function in message_channel js we just need to change ${data message body} to ${data body} That's it Try sending messages between your two users and you should see instant real-time messages As they are now saved nobody will miss any of the banter before they arrived Conclusion\nThe point here was to show you how Action Cable makes WebSockets pretty easy to work with You need to have at least a basic knowledge of JavaScript to handle things in the client when a message is sent but other than that you can see how powerful this can be If you have a situation where you need to update all connected clients without waiting for them to refresh, then think WebSockets This only scratches the surface of what Action Cable can do, but if you do find yourself in a situation where you think they might be useful you should be able to find what you need with a few searches",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21219,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\actioncable_lesson.md",
      "source_type": "git_repo"
    },
    "token_count": 445,
    "chunk_index": 9,
    "total_chunks": 10
  },
  {
    "id": "b6384447d9aea0bee002540c573660eb",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\conclusion.md",
    "source_type": "git_repo",
    "title": "conclusion",
    "content": "Introduction\nYou've reached the end of the scope of this course and should feel pretty good about your Rails skills That doesn't mean you should feel like you understand everything, but you should be able to build a Rails application with the kind of functionality which is actually useful in the real world It probably won't look too pretty, but that will come in the next few courses This isn't the last course in the curriculum and you've got quite a way to go before hitting that \"full stack\" point, but it's as far as we'll get with Rails and it's pretty darn far Despite how far you've come, it's up to you to keep building stuff, asking questions, and digging deeper into both Rails and best practices of software engineering in general At this point, you've got the Rails building blocks but the learning is never finished Your first six months on the job as a Rails dev will involve learning at least as much information as you just did The point of this course has been to get you to a place where you can start thinking about actually getting that first job Next steps\nThis final lesson isn't designed to explicitly teach new material, just point you in the right direction if you'd like to dig a bit deeper before moving on Or maybe you'll bookmark it and come back when you want to see where to head next in your Rails journey Rails is deep there's a lot going on behind the scenes and it will take a long time to actually understand how it all works and the best ways to use it The best way to figure it out is to work for a company that uses it and get paid to learn If that's not an option, building your own stuff and reading on your own time can be a good substitute There's new information being created every day in blog posts, Stack Overflow posts, and podcasts A good first step is to reread the Rails Guides There are some sections we skipped and some guides we never got to (especially in the \"digging deeper\" section) In particular, the following sections might be interesting:\nSecurity\nIf you start working on more public-facing applications, security will become more important Check out the Rails Guide on Security for more information Rails tasks\nRails tasks are a special way of running scripts that can use your application You're already familiar with some like $ rails db:migrate, but you can also create your own This website uses a Rails task to populate the curriculum from its GitHub repo",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7001,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\conclusion.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "4c8867e97dd8d434d17b57611c5c9470",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\conclusion.md",
    "source_type": "git_repo",
    "title": "conclusion",
    "content": "the following sections might be interesting: Security If you start working on more public-facing applications, security will become more important Check out the Rails Guide on Security for more information Rails tasks Rails tasks are a special way of running scripts that can use your application You're already familiar with some like $ rails db:migrate, but you can also create your own This website uses a Rails task to populate the curriculum from its GitHub repoCheck out the Rails Guide on Command Line and bin/rails for more information Caching\nCaching makes your application faster by reducing database calls Check out the Rails Guide on Caching to learn more Books\nHere are a few books that will take you a bit deeper as well:\nThe Rails 5 Way by Obie Fernandez is a comprehensive guide to the framework Agile Web Development with Rails 6 is sort of an in-depth guide combined with a tutorial that follows Agile practices along the way Rails Antipatterns is a good best-practices guide Other resources\nRailsCasts by Ryan Bates are incredibly valuable Great ways to actually see the implementation of various gems or practices GoRails alternative to RailsCasts The RailsApps Project provides lots of great tutorials that walk you through building real-life scenarios like integrating Devise and CanCan with your app or building a payments backend RubyFlow community blog will have some interesting stuff pop up from time to time Contributing\nYou know more than you think Remember when we just said that you should keep building stuff This website is completely open source and needs your help to improve We have a dedicated group of current and former students who help add features and proofread the curriculum The best part is that it's completely public and free so you can watch or participate at whatever level you're comfortable It's a great way to start learning about agile development methodologies and to start doing meaningful development work in a friendly and supportive environment So check out the general channel on our Discord server to see what we're up to We'd love to have you get involved Conclusion\nI want to emphasize again that the learning never really stops but also that you've come a long way Stick around for the next few courses and you'll take a good core and build some very interesting things In the HTML/CSS course, you'll learn to make your Rails applications look like actual websites instead of text dumps In the JavaScript course, you'll learn how to take everyday web apps and make them much faster and more dynamic in the browser So there's a lot left to go but it gets better and better",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7001,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\conclusion.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "7f0e8e11cd0e909e9bf813b9cea123fa",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\conclusion.md",
    "source_type": "git_repo",
    "title": "conclusion",
    "content": "long way Stick around for the next few courses and you'll take a good core and build some very interesting things In the HTML/CSS course, you'll learn to make your Rails applications look like actual websites instead of text dumps In the JavaScript course, you'll learn how to take everyday web apps and make them much faster and more dynamic in the browser So there's a lot left to go but it gets better and betterStick with it Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental How I Learned Ruby on Rails by Richardson Dackam\nA listing of Rails tutorials from Daniel Kehoe of RailsApps\nA list of some slightly longer Rails Tutorials by Jumpstart Lab\nThe University of Texas Rails Course Online (incomplete/dated )\nRails Cheat Sheet by Tobias Pfeiffer\nRails Best Practices list\nBuilding a Simple CMS in Sinatra Tutorial\nWhy not to hardcode your application's secret token in production\nHow I Test by Ryan Bates\nWhy use the %Q methods Build 10 Apps video series by Web-Crunch\nMackenzie Child 12 apps in 12 weeks\nIntro to API Video",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7001,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\conclusion.md",
      "source_type": "git_repo"
    },
    "token_count": 236,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "585502b04b0c34cfdac390b9a234e7c1",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\advanced_topics.md",
    "source_type": "git_repo",
    "title": "app/models/lesson.rb",
    "content": "Introduction\nThere are some topics that we just haven't had a chance to get into yet but will prove useful for you to know In this section we'll cover advanced routing, layouts, and a brief introduction to metaprogramming Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Singular resources Nested routes Member routes and collection routes Nesting layouts What metaprogramming is What design patterns are Advanced routing\nYou should be quite familiar by now with the bread and butter of routing -- converting RESTful requests using the familiar HTTP verbs into mappings for specific controller actions (whether using the #resources method or explicitly specifying them using the get method) That's 90% of what you'll use your routes file for but that other 10% gives you some pretty neat options like redirecting directly from the routes file, nesting routes inside each other, or parsing parameters from the incoming request Singular resources\nYou might have already run into this at some point without necessarily understanding it Up until now, we've been talking about resources (like \"posts\" and \"users\") where there are a whole lot of them It seems fairly intuitive In your config/routes rb file, you represent these with a single line like resources :users Sometimes there are also resources where it actually only makes sense for there to be one An example would be a User dashboard which displays interesting facts based on whichever user is logged in There is only one dashboard template, it just happens to be smart enough to display things that are relevant for the user who is currently logged in In this case, it doesn't make a whole lot of sense to display an \"index\" of dashboards, since there is only one (it just changes based on who is logged in) We can also say that, for any of the other actions which would normally require an ID to differentiate which resource we're operating on (like #show), since there's only one, we no longer need the id parameter The routes file line for a singular resource would look like:\nruby\n# in config/routes rb\nresource :dashboard\nJust note that the word \"resource\" is singular and so is dashboard That trips up a lot of people who make the typo of writing \"resource\" instead of \"resources\" when they really want plural resources (which are more common)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 24916,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\advanced_topics.md",
      "source_type": "git_repo"
    },
    "token_count": 465,
    "chunk_index": 0,
    "total_chunks": 12
  },
  {
    "id": "7642dd5351b41ec160fcf977bc21eaf2",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\advanced_topics.md",
    "source_type": "git_repo",
    "title": "app/models/lesson.rb",
    "content": "differentiate which resource we're operating on (like #show), since there's only one, we no longer need the id parameter The routes file line for a singular resource would look like: ruby # in config/routes rb resource :dashboard Just note that the word \"resource\" is singular and so is dashboard That trips up a lot of people who make the typo of writing \"resource\" instead of \"resources\" when they really want plural resources (which are more common)The $ rails routes for a singular resource would only contain 6 routes (since we don't use #index anymore), and you would no longer see any of the :id portions of the routes, e g bash\nedit_dashboard  GET /dashboard/edit( :format)  dashboards#edit compared with the plural version of the same route:\nbash\nedit_dashboard  GET /dashboards/:id/edit( :format)  dashboards#edit\nNested routes\nSometimes it just makes sense for one resource to be nested inside of another For instance, a listing of lessons like this logically falls within a listing of courses -- so you'd expect a URL sort of like http://example com/courses/1/lessons/3 The way to achieve this nesting is in the routes file by literally nesting one resource inside a block given to another, which might look something like:\nruby\n# config/routes rb\nTestApp::Application routes draw do\nresources :courses do\nresources :lessons\nend\nend\nNote that the #resources method now takes a block which will consist of a set of routes When you visit the URL, you'll have to specify the :id parameter for BOTH objects The $ rails routes for the above would include something like:\nruby\ncourse_lesson  GET  /courses/:course_id/lessons/:id( :format)  lessons#show\nIt should also be noted that you're being taken to the controller of the deepest nested resource, and that's also the :id parameter which will be called :id (any parent resource parameters, as in the above, will be specifically called something like :course_id) View helpers are also automatically generated in a logical way (as you can see in your $ rails routes output) When you use view helpers like #course_lesson_path you will need to specify both parameters in order, e g course_lesson_path(1,3) Don't nest routes too deeply",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 24916,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\advanced_topics.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 1,
    "total_chunks": 12
  },
  {
    "id": "57731d26049bca50d045361d66dc2e45",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\advanced_topics.md",
    "source_type": "git_repo",
    "title": "app/models/lesson.rb",
    "content": "controller of the deepest nested resource, and that's also the :id parameter which will be called :id (any parent resource parameters, as in the above, will be specifically called something like :course_id) View helpers are also automatically generated in a logical way (as you can see in your $ rails routes output) When you use view helpers like #course_lesson_path you will need to specify both parameters in order, e g course_lesson_path(1,3) Don't nest routes too deeplyIf you're more than a layer or two deep, something should be different In fact, oftentimes you'll see only some of the controller actions nested -- only the ones that actually need the parent's ID to uniquely specify it For instance, you can grab a specific Lesson by knowing only its ID But to get all the lessons that are listed beneath a specific Course, you need the Course ID so it will have to be nested Same is true for creating lessons, since they will need a parent specified:\nruby\n# config/routes rb\nTestApp::Application routes draw do\nresources :courses do\nresources :lessons, :only => [:index, :create]\nend\nend\nIf this seems a bit confusing at first, you'll pick it up quickly when you actually run into it in your own coding If you find yourself working inside your controller and needing the parent's ID, the route should have been nested If you find that you don't need the parent's ID, it doesn't need to be nested Easy enough Member and collection routes\nSometimes you want to add another non-RESTful route to a resource If you'd like to add a route to just a single member of that resource, use the #member method:\nruby\n# config/routes rb\nTestApp::Application routes draw do\nresources :courses do\nmember do\nget \"preview\"   # Preview a single course\nend\nend\nend\nThat route would map to the courses#preview action You can add as many as you'd like If you'd like to add a non-RESTful route to the whole collection of your resource (so you don't need to specify the :id attribute, like with the index action), you instead use the #collection method:\nruby\n# config/routes rb\nTestApp::Application routes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 24916,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\advanced_topics.md",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 2,
    "total_chunks": 12
  },
  {
    "id": "0862fbb64547b549616cfe4efb01603b",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\advanced_topics.md",
    "source_type": "git_repo",
    "title": "app/models/lesson.rb",
    "content": "TestApp::Application routes draw do resources :courses do member do get \"preview\" # Preview a single course end end end That route would map to the courses#preview action You can add as many as you'd like If you'd like to add a non-RESTful route to the whole collection of your resource (so you don't need to specify the :id attribute, like with the index action), you instead use the #collection method: ruby # config/routes rb TestApp::Application routesdraw do\nresources :courses do\nmember do\nget \"preview\"  # Preview a single course (requires ID)\nend\ncollection do\nget \"upcoming\"  # Show a list of *all* upcoming courses (no ID needed)\nend\nend\nend\nThe upcoming route will map to the courses#upcoming action but will not take an :id parameter If any of this seems confusing, just play around with them and run $ rails routes to see what is happening behind the scenes Redirects and wildcard routes\nYou might want to provide a URL out of convenience for your user but map it directly to another one you're already using Use a redirect:\nruby\n# config/routes rb\nTestApp::Application routes draw do\nget 'courses/:course_name' => redirect('/courses/%{course_name}/lessons'), :as => \"course\"\nend\nWell, that got interesting fast The basic principle here is to just use the #redirect method to send one route to another route If your route is basic, it's a really straightforward method But if you want to also send the original parameters, you need to do a bit of gymnastics by capturing the parameter inside %{here} Note the single quotes around everything In the example above, we've also renamed the route for convenience by using an alias with the :as parameter This lets us use that name in methods like the #_path helpers Again, test out your $ rails routes with questions Controllers, models and keeping things RESTful\nAlong with the advanced routing topics covered, it can also be helpful to think about controllers in Rails that don't necessarily have their own ActiveRecord model to work with Consider that we have a request for the application so that a lesson can have accompanying images That seems easy enough, so we can update our model:\n```ruby\napp/models/lesson",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 24916,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\advanced_topics.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 3,
    "total_chunks": 12
  },
  {
    "id": "db6df4000c05f6a04001b2d2baef7a05",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\advanced_topics.md",
    "source_type": "git_repo",
    "title": "app/models/lesson.rb",
    "content": "the #_path helpers Again, test out your $ rails routes with questions Controllers, models and keeping things RESTful Along with the advanced routing topics covered, it can also be helpful to think about controllers in Rails that don't necessarily have their own ActiveRecord model to work with Consider that we have a request for the application so that a lesson can have accompanying images That seems easy enough, so we can update our model: ```ruby app/models/lessonrb\nclass Lesson < ApplicationRecord\n# other stuff\nhas_many_attached :images\nend\n```\nThen, we think about how we might want to manage these images from the route and controller side We might think of something like this at first:\n```ruby\nconfig/routes rb\nresources :lessons do\nmember do\npatch :attach_image\ndelete :remove_image\nend\nend\n```\nThen we have accompanying methods in the LessonsController to process the images This would work well enough, but when we think about Rails controllers as standalone concepts, we might choose to implement this feature differently Consider this second approach to the implementation:\n```ruby\nconfig/routes rb\nresources :lessons do\nresources :images, only: [:create, :delete]\nend\n```\nAlong with a new controller Lessons::ImagesController which looks like this:\n```ruby\napp/controllers/lessons/images_controller rb\nmodule Lessons\nclass ImagesController < ApplicationController\ndef create\n# logic to attach images to a course\nend\ndef destroy\n# logic to remove an image image from a course\nend\nend\nend\n```\nWhat we've done is made the implementation more RESTful, because we no longer have any custom non-RESTful actions Instead, we have a whole new (RESTful) controller This controller doesn't relate to its own model to handle these actions, but works on the Lesson model Not only that, by using a new controller we are able to stick to the REST actions to describe what we are doing: creating a new image attachment, or destroying an image for a lesson In fact, if you think about it, this was implicit in our original attempt: attach_image and remove_image both follow the <action>_<noun> pattern, which might be a signal we could use another resource We've also used a nested controller here to provide a clue to the next developer of our intention By keeping our actions in the RESTful realm, it can become easy to extend the application",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 24916,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\advanced_topics.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 4,
    "total_chunks": 12
  },
  {
    "id": "a9cfb23978d4337f65e042ed099d08ec",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\advanced_topics.md",
    "source_type": "git_repo",
    "title": "app/models/lesson.rb",
    "content": "new image attachment, or destroying an image for a lesson In fact, if you think about it, this was implicit in our original attempt: attach_image and remove_image both follow the <action>_<noun> pattern, which might be a signal we could use another resource We've also used a nested controller here to provide a clue to the next developer of our intention By keeping our actions in the RESTful realm, it can become easy to extend the applicationKeeping things RESTful also makes it easier to understand what is happening without having to do a lot of digging around When we can think beyond the controller/model coupling in Rails, it can open the door to many possibilities You could have a controller tied to a specific attribute of a model, even For more information and examples, there is an excellent talk by Derek Prior called \"In Relentless Pursuit of REST\" in the additional resources section that is highly recommended Advanced layouts: Nesting layouts and passing information\nWe got pretty good coverage of view layouts in the lesson on Views but one other topic involves rendering multiple layouts for one page, which allows you to create unique sections that still reuse a lot of the stylings that you might want to keep consistent across your whole site (e g the footer) For example, maybe the user pages should have a different styling than your home page The first thought might be to try and have a different stylesheet for each layout but remember that Rails' Asset Pipeline jams all your stylesheets together anyway A better way of doing things is to tell your layout to do some stuff (whatever you might normally have your layout do) and then render another layout using the render :template => \"your_layout html erb\" method You are sort of using your layouts like a view might use a view partial You can also pass information from the first layout to the one it renders by using the #content_for method This lets you create logic in your main layout that is dependent on what is passed by your individual layout files the possibilities are endless For instance, you might have a specific layout file for your static pages called app/views/layouts/static_pages html erb This file will be rendered by default (if it exists) for views generated from your StaticPagesController (which is a Rails default) Let's say, though, that you want your static pages to look almost identical to the rest of the site but you don't want the navbar to appear across the top In this case, you would tell your static_pages html erb layout to call the application html",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 24916,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\advanced_topics.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 5,
    "total_chunks": 12
  },
  {
    "id": "daf3f94b7aa19e66ee33e749d129975a",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\advanced_topics.md",
    "source_type": "git_repo",
    "title": "app/models/lesson.rb",
    "content": "file for your static pages called app/views/layouts/static_pages html erb This file will be rendered by default (if it exists) for views generated from your StaticPagesController (which is a Rails default) Let's say, though, that you want your static pages to look almost identical to the rest of the site but you don't want the navbar to appear across the top In this case, you would tell your static_pages html erb layout to call the application htmlerb layout but also pass it some special CSS by using the #content_for method, e g ```erb\n# app/views/layouts/static_pages html erb\n<% content_for :stylesheets do %>\n#navbar {display: none}\n<% end %>\n<%= render :template => \"layouts/application\" %>\n```\nThen your application html erb layout needs to be set up to catch that content and use it, for instance by adding this #yield line:\nerb\n# app/views/layouts/application html erb <head> <style><%= yield :stylesheets %></style>\n</head> render :template => \"static_pages html erb\" When you #yield to a particular content block, in this case :stylesheets, it will essentially drop the code from inside of that content_for's block to where the #yield method was So in the above example, we effectively added some CSS styling to the application layout by first rendering a special static_pages html erb layout and then passing the styles to the main application html erb layout using #content_for The result would look like:\nerb\n# app/views/layouts/application html erb <head> <style> #navbar {display: none} </style>\n</head> This trick is useful for more than just passing stylesheet information any time you find yourself wanting to make a section of your site look different but without totally redesigning it with a fully new layout, you might consider nesting your layouts and passing information from one to another Metaprogramming Rails\nWhat is \"Metaprogramming\" It's a great and useful concept that's used all over Rails and you can put it to work yourself too It's basically the idea that your application or script actually creates functions or methods or classes on the fly while it's running and can dynamically call them as well It's one of the great parts of using an interpreted language like Ruby it's sort of baked into the language",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 24916,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\advanced_topics.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 6,
    "total_chunks": 12
  },
  {
    "id": "2230f098fa8113ea57ad8fbe132cbe03",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\advanced_topics.md",
    "source_type": "git_repo",
    "title": "app/models/lesson.rb",
    "content": "to another Metaprogramming Rails What is \"Metaprogramming\" It's a great and useful concept that's used all over Rails and you can put it to work yourself too It's basically the idea that your application or script actually creates functions or methods or classes on the fly while it's running and can dynamically call them as well It's one of the great parts of using an interpreted language like Ruby it's sort of baked into the languageWe'll just skim the surface here but you should definitely look into it more on your own once you feel comfortable with the nuts and bolts of Rails An example of metaprogramming in action in Rails is with the route helpers When your Rails application fires up for the first time, it loads the config/routes rb file, which might contain the line get \"home\" => \"static_pages#home\" so your users can type http://www yoursite com/home to get back to the home page Rails then creates a couple methods for you, including the home_path and home_url helpers That's one part of metaprogramming The routes example almost isn't fair, though, because you wrote your routes rb file and probably hard coded a bunch of #home_path or #home_url method calls based on what you knew would be in there What about more dynamic situations where you don't know ahead of time what the method is going to be called Ruby provides the #send method to save the day If you want to run a method on an object, just send that object the method and any arguments you want A basic example you can do on your command line is 1+2:\n```bash\n1 + 2\n=> 3\n1 send(:+, 2)\n=> 3\n```\nIn an ordinary situation, there's no reason to use the #send method but if you don't know which method you're going to need to call, it's a lifesaver Just pass it the symbolized name of the method you want to run on that object and Ruby will go looking for it But how do you define a new method on the fly anyway In this case, you can use the #define_method method, which takes the symbol of what you'd like to define and a block representing the method itself The following examples were taken from this metaprogramming guide from ruby-metaprogramming rubylearning",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 24916,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\advanced_topics.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 7,
    "total_chunks": 12
  },
  {
    "id": "eb138a296afae74ed3e552a626967f8b",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\advanced_topics.md",
    "source_type": "git_repo",
    "title": "app/models/lesson.rb",
    "content": "it's a lifesaver Just pass it the symbolized name of the method you want to run on that object and Ruby will go looking for it But how do you define a new method on the fly anyway In this case, you can use the #define_method method, which takes the symbol of what you'd like to define and a block representing the method itself The following examples were taken from this metaprogramming guide from ruby-metaprogramming rubylearningcom:\n```ruby\nclass Rubyist\ndefine_method :hello do |my_arg|\nmy_arg\nend\nend\nobj = Rubyist new\nputs(obj hello('Matz')) # => Matz\n```\nAnother very powerful tool is the #method_missing method You've certainly seen errors that say something to the effect of \"Hey you, you tried to call a method that doesn't exist \" and the stack trace will probably run through something called method_missing Most likely, you had a typo and spelled your method incorrectly Basically, #method_missing is a method of Ruby's BasicObject class which gets inherited by every single object in Ruby and it is called whenever you try to run a method that doesn't actually exist It also gets passed all the arguments you tried to send and any blocks that went with it That means that you can override #method_missing yourself for a given object and use whatever was previously called, for example printing out a message saying the name of the method you tried to call and its arguments:\n```ruby\nclass Rubyist\ndef method_missing(m, *args, &block)\nstr = \"Called #{m} with #{args inspect}\"\nif block_given puts str + \" and also a block: #{block}\"\nelse\nputs str\nend\nend\nend\n```\n```ruby\nRubyist new anything\n\"Called anything with []\"\n=> nil\nRubyist new anything(3, 4) { \"something\" }\n\"Called anything with [3, 4] and also a block: #Proc:0x007fa0261d2ae0@(irb):38\"\n=> nil\n```\nMetaprogramming is really nifty stuff and there are tons of interesting uses for it You don't need to master it to learn Rails, so only dive into it once you're comfortable with Rails, but it will certainly be useful to you in the real world",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 24916,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\advanced_topics.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 8,
    "total_chunks": 12
  },
  {
    "id": "f54bfff1736a700f5d36006f10a8f89a",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\advanced_topics.md",
    "source_type": "git_repo",
    "title": "app/models/lesson.rb",
    "content": "``` ```ruby Rubyist new anything \"Called anything with []\" => nil Rubyist new anything(3, 4) { \"something\" } \"Called anything with [3, 4] and also a block: #Proc:0x007fa0261d2ae0@(irb):38\" => nil ``` Metaprogramming is really nifty stuff and there are tons of interesting uses for it You don't need to master it to learn Rails, so only dive into it once you're comfortable with Rails, but it will certainly be useful to you in the real worldThere are all kinds of metaprogramming tricks and patterns and tips out there but it's beyond the scope of this course to dive into them Here's a good example of metaprogramming to DRY up your code Check out Metaprogramming Ruby by Paolo Perrotta if you're really curious Design patterns\nDesign patterns have a mixed reputation among software developers On the one hand, they represent \"best practices\" for how to code past a given situation (not specific code, just a template for how to fix something) On the other, they can be sort of needlessly prescriptive See the Wikipedia article on Design Patterns for an overview We won't be covering specific patterns in this course The Wikipedia article on SOLID provides a good overview and good links related to SOLID software design If you're looking to write great code, you'll need to know each of the principles the letters represent (paraphrasing):\nSingle Responsibility Principle (A class should only have a single responsibility)\nOpen/Closed Principle (your code entities should be open for extension but closed to modification)\nLiskov Substitution Principle (replacing an object with one of its sub-types shouldn't break anything)\nInterface Segregation Principle (writing many client-specific interfaces is better than one behemoth general-use interface think APIs)\nDependency Inversion Principle (instead of high level constructs depending on lower level ones, make them rely on abstractions instead)\nLuckily, Rails has done a pretty good job of following these, so you should have absorbed some good habits just through using it But you'll want to take a minute and read up on each of them (including the odd-sounding ones) because they're fairly central to all software engineering (and a ripe interview question)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 24916,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\advanced_topics.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 9,
    "total_chunks": 12
  },
  {
    "id": "4f21864d2973f6440a9f325dfba50283",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\advanced_topics.md",
    "source_type": "git_repo",
    "title": "app/models/lesson.rb",
    "content": "interface think APIs) Dependency Inversion Principle (instead of high level constructs depending on lower level ones, make them rely on abstractions instead) Luckily, Rails has done a pretty good job of following these, so you should have absorbed some good habits just through using it But you'll want to take a minute and read up on each of them (including the odd-sounding ones) because they're fairly central to all software engineering (and a ripe interview question)There's a useful book written on anti-patterns, which can help you clean up your code by identifying bad smells, called Rails Antipatterns by Tammer Saleh and Chad Pytel I18n: Internationalization\nInternationalization and Localization is the process of adapting your application to fit specific geographies and/or languages It's outside our scope to cover, but for those who are interested, check out this Sitepoint tutorial on internationalization, as suggested by K Bates Assignment\n1 Skim the [Rails Guide on Routing](http://guides rubyonrails org/routing html#controller-namespaces-and-routing) section 2 6 about namespacing 1 Read the same guide sections 2 7-3 7 to learn about nested, member and collection routes and more 1 Read the same guide, sections 3 8-3 15 for a variety of different advanced routing topics including constraining the inputs to your routes and redirection 1 Skim the same guide, chapter 4 Some stuff we've seen but most is just to give you a sense for what's possible When you need it, you'll probably Google your way back there 1 Read the [Rails Guide on Layouts](http://guides rubyonrails org/layouts_and_rendering html#using-nested-layouts) section 3 5 to see how to pass information between your view file and your layout file, including CSS styles Really take a minute to understand what's going on in the example there 1 If you're interested, take a peek at [Ruby metaprogramming](https://web archive org/web/20210514184321/http://ruby-metaprogramming rubylearning com/) It's not essential to building early Rails apps but you'll definitely start running into it more in \"the wild\" 1 Glance through this [Slideshare Presentation on SOLID principles](http://www slideshare net/jcfischer/solid-ruby-solid-rails)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 24916,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\advanced_topics.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 10,
    "total_chunks": 12
  },
  {
    "id": "5de06d2a1d112f95721de1fe200dfdb0",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\advanced_topics.md",
    "source_type": "git_repo",
    "title": "app/models/lesson.rb",
    "content": "3 5 to see how to pass information between your view file and your layout file, including CSS styles Really take a minute to understand what's going on in the example there 1 If you're interested, take a peek at [Ruby metaprogramming](https://web archive org/web/20210514184321/http://ruby-metaprogramming rubylearning com/) It's not essential to building early Rails apps but you'll definitely start running into it more in \"the wild\" 1 Glance through this [Slideshare Presentation on SOLID principles](http://www slideshare net/jcfischer/solid-ruby-solid-rails)Conclusion\nIn this lesson we covered some fairly random and intricate concepts but useful stuff to at least get familiar with, even if you're not going to use it every day Experience is the real key here -- in the course of building awesome stuff you'll run into the need for all of the things you just learned and it might just save you a lot of time and complexity in your code The more general principles like SOLID design and metaprogramming will be useful to you regardless of whether you stick with Ruby and Rails or move on to better and brighter things Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What would the routes file line for a singular resource look like How do you nest one resource inside another in the routes file When do you use the #member method When do you use a redirect What are some techniques for rendering multiple layouts for one page What does the #send method do What are the five design principles represented by the SOLID acronym Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental A Stack Overflow question on understanding singular resource in Rails\nIn Relentless Pursuit of REST by Derek Prior\nA video from Yehuda Katz on Rails Security\nThe first solution in this Stack Overflow question demonstrates a nice way to work with multiple layouts that uses classes to trigger different CSS styling Ruby Metaprogramming\nSO post on design patterns in Rails (2010)\nA longer explanation of SOLID principles",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 24916,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\advanced_topics.md",
      "source_type": "git_repo"
    },
    "token_count": 464,
    "chunk_index": 11,
    "total_chunks": 12
  },
  {
    "id": "3c137eecae30c44de7e857d7e721acd4",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\mailers.md",
    "source_type": "git_repo",
    "title": "mailers",
    "content": "Introduction\nEmail is under-appreciated in its complexity on many levels You certainly won't think about it much until you need to actually bake it into your apps But what goes on behind the scenes, especially after hitting \"send\", is pretty impressive lots of bouncing around the architecture of the internet, bypassing firewalls, and navigating SPAM filters Luckily all this can be handled by some specialty third party email providers The actual production of the email is what we'll cover here i e how do you make that special \"thanks for signing up, userX\" email Creating and sending email is actually conceptually similar to rendering views and shipping them to the web browser, at least from your point of view as a Rails dev In this lesson we'll cover that process and you'll get a chance to send your own emails in the projects Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson What a mailer is How mailers are similar to controllers or to models Why you need both a text and an HTML version of your mailers What an email provider is used for What the letter_opener gem is used for Brief overview\nTo send email, Rails uses the ActionMailer gem (one of the 7 core gems that make it up) A mailer acts similar to a model and controller baked into one You will create a new mailer just like you would with a new controller ($ rails generate mailer SomeName) You'll then set up methods for each email that you might want it to send (e g welcome email, followup email, thanks for purchasing email ) Sounds a lot like controller actions, eh In each method, you need to identify the key fields and any variables that will be used in the text of the email (like the user's name) The actual email itself is just a view They live in the app/views folder along with the rest of them, though in a sub-folder named after the mailer One distinction between mailer views and \"normal\" views is that emails typically have two separate formats -- HTML and text Most people will view the HTML version but some will have HTML disabled and so they will need the text version in order to see your email Having the two versions also helps you bypass SPAM filters You'll quickly find that many things you do regarding email have to do with getting past the dreaded SPAM filter So you set up one view called, for instance, app/views/user_mailer/welcome_email html",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9584,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\mailers.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "60f9f5c4b663460aa8f04ea2924b34a5",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\mailers.md",
    "source_type": "git_repo",
    "title": "mailers",
    "content": "have two separate formats -- HTML and text Most people will view the HTML version but some will have HTML disabled and so they will need the text version in order to see your email Having the two versions also helps you bypass SPAM filters You'll quickly find that many things you do regarding email have to do with getting past the dreaded SPAM filter So you set up one view called, for instance, app/views/user_mailer/welcome_email htmlerb and another called app/views/user_mailer/welcome_email text erb It is kind of annoying having to manage two different versions of the same email but such is the cost of accessibility and SPAM fighting Another thing you'll notice is that you can use ERB (or HAML etc) preprocessing on your emails too Just like any other view, it allows you to dynamically create content that includes things like your user's name or non-sensitive account information This is all based on which variables you pass the view from your mailer, just like passing a controller action's instance variables to a normal view Mailers are actually a two-step process -- first you build the email itself and then you call the #deliver_now (or #deliver_now ) method to actually send it One way that mailers are different from controllers is that you call them directly instead of working through the router When you want to call the welcome email, you will write UserMailer welcome_email(@user), which returns the email object Deliver it by calling the #deliver_now method on that object, for a total chain of: UserMailer welcome_email(@user) deliver_now As long as your view files (the HTML and text) are named the same as your mailer methods, Rails will find everything okay and will send the email (with both the HTML and text parts) using whichever email provider you've chosen to use for sending it The Rails Guide reading does a good job walking through the process, so you'll get a chance to see it in action there Callbacks\nMailers allow you to use callbacks just like a normal controller, for instance the after_action callback They will run after the email is generated, not after it is sent, so you'll be able to modify parts of the email if you need to You get access to the instance variables of the mail instance, so you can use the @user variable as a part of your logic",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9584,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\mailers.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "f5b7c2c1d23029d667fec814955c6005",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\mailers.md",
    "source_type": "git_repo",
    "title": "mailers",
    "content": "a chance to see it in action there Callbacks Mailers allow you to use callbacks just like a normal controller, for instance the after_action callback They will run after the email is generated, not after it is sent, so you'll be able to modify parts of the email if you need to You get access to the instance variables of the mail instance, so you can use the @user variable as a part of your logicEmail providers\nIn the reading you'll see how to send mail using your Gmail account, but if you're building a real application you'll obviously want something a bit more robust There are several leading players in the space of sending your email for you Their whole job is to handle getting your mail delivered and opened so you can focus on building your application SendGrid is the provider used with this website for delivering welcome emails and the like and it's pretty straightforward on Heroku See Heroku's documentation on Twilio SendGrid, as well as SendGrid's own documentation, which includes instructions for how you should set up your config/environment rb file to get ActionMailer to interface with them You will need to use environment variables (or the figaro gem) again to avoid hard coding your password and username Pricing for this, as most things, is free up until a certain usage tier While you're building toy apps, it will do just fine Other options are out there like MailGun, Mailchimp and Postmark You'll get a chance to play with mailers in the projects Letter opener\nOne key thing to note is that you don't want to fire off a bunch of emails when you're testing your app in the development environment That's not just bad practice, it can make your users pretty unhappy and get you put on SPAM lists No bueno But you do want to make sure the email function is working properly Luckily, there's a solution which is quite useful The Letter Opener gem, put in your development group of the Gemfile, will take your emails and display them in the web browser for you whenever they would otherwise be sent You just switch a config setting in your config/environments/development rb file and you're good to go Sweet Email wisdom\nEmail is SLOW It can take 1-2 seconds per email to send, so don't make your main application do it when you're serving a whole bunch of them because then anyone trying to access it will be shut out",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9584,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\mailers.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "a7f3e3947ee6741da7f0d8fc09d8ac4b",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\mailers.md",
    "source_type": "git_repo",
    "title": "mailers",
    "content": "take your emails and display them in the web browser for you whenever they would otherwise be sent You just switch a config setting in your config/environments/development rb file and you're good to go Sweet Email wisdom Email is SLOW It can take 1-2 seconds per email to send, so don't make your main application do it when you're serving a whole bunch of them because then anyone trying to access it will be shut outMake sure you use full URLs in any links in your mailer (so _url not _path helper methods), since the user will be opening the email and clicking the link at an external source In your config/environments/production rb file you'll want to make sure to specify your website's host name using something like config action_mailer default_url_options = { :host => 'yourapp com' } If it's not set, you may get an error message about your host or your links may look funny The #deliver method will throw an error on delivery failure whereas #deliver will return false (failing silently) When styling your email HTML, you won't have access to any stylesheets so you'll need to do all the styling either inline or using <style> tags Attaching images to emails (like using logos in the HTML version) can be a bit of a pain See the reading Assignment\n1 Read sections 1 and 2 of the [Rails Guide on ActionMailer](https://guides rubyonrails org/action_mailer_basics html) 1 Read sections 6 and 7 to [learn about callbacks and helpers](https://guides rubyonrails org/action_mailer_basics html#action-mailer-callbacks) 1 Read section 8 2, which covers [sending mail with your Gmail](https://guides rubyonrails org/action_mailer_basics html#action-mailer-configuration-for-gmail) 1 Skim sections 9 and 10 on [testing and intercepting emails](https://guides rubyonrails org/action_mailer_basics html#previewing-and-testing-mailers) Conclusion\nSending email is just a slightly different way of using the same patterns you've already been using for controllers and views, so it should be pretty straightforward to pick up You'll have to navigate the usual batch of errors when trying out new things (often related to the configuration or naming your files properly), but it'll come to you quickly",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9584,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\mailers.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "841f3f5630c065100ef458b59e95c3b6",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\mailers.md",
    "source_type": "git_repo",
    "title": "mailers",
    "content": "html#action-mailer-configuration-for-gmail) 1 Skim sections 9 and 10 on [testing and intercepting emails](https://guides rubyonrails org/action_mailer_basics html#previewing-and-testing-mailers) Conclusion Sending email is just a slightly different way of using the same patterns you've already been using for controllers and views, so it should be pretty straightforward to pick up You'll have to navigate the usual batch of errors when trying out new things (often related to the configuration or naming your files properly), but it'll come to you quicklyKnowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge How do you create a new mailer from the command line Where do you store the actual email in your application How do you send an email directly from the Rails console How do you use callbacks with mailers How do you write links in mailer views How do you style an HTML email\nAdditional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental How to Create, Preview, and Send Email From Your Rails App",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9584,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\mailers.md",
      "source_type": "git_repo"
    },
    "token_count": 257,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "843794d75b6f8628aa79c1d7c6f28f43",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\project_final.md",
    "source_type": "git_repo",
    "title": "project_final",
    "content": "Introduction\nYou've come a long way, congratulations At this point, you should feel comfortable with building new Rails applications, modelling data, and working with forms This project will require you to put all your newfound knowledge to the test It should serve as a great portfolio piece for what you're capable of It'll take some thought and time but it's certainly within reach of your skills You'll be building a clone of a social media site, such as Facebook, X, Myspace, or Threads As with our previous lessons, how much effort you want to put into the styling and front end is up to you The important stuff is the data and backend You'll put together the core features of the platform like users, profiles, posts, following, and \"liking\" You'll also implement some form of authentication Ideally, you'll want to use OmniAuth to support authenticating via the social media site you're cloning, but some sites (such as Facebook), have recently made this process impossible If this is the case for your site, you can use Devise to support authenticating via username and password (using Devise) or via Github with omniauth-github There will probably be features you haven't been exposed to -- for instance chat, realtime updates of the newsfeed, and realtime notifications You won't be responsible for creating those unless you'd like to jump ahead and give it a shot Assignment\nBuild a social media site You'll build a large portion of the core user functionality of your chosen site in this project You don't have to worry about some of the more flashy front-end stuff unless you want to, but you don't need it to get a nice user experience You should write at least a basic set of integration tests which let you know if each page is loading properly and unit tests to make sure your associations have been properly set up (e g testing that User first posts works properly) Run them continuously in the background with Guard (See the Ruby on Rails Tutorial Chapter 3 7 3) This project will give you a chance to take a relatively high level set of requirements and turn it into a functioning website You'll need to read through the documentation on GitHub for some of the gems you'll be using Keep the following requirements in mind We'll cover specific steps to get started below this list:\n1 Use PostgreSQL for your database from the beginning (not SQLite3), that way your deployment will go much more smoothly 1 Users must sign in to see anything except the sign in page",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6238,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\project_final.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "b7437f7321e9478b3671f9771a8b8d3c",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\project_final.md",
    "source_type": "git_repo",
    "title": "project_final",
    "content": "set of requirements and turn it into a functioning website You'll need to read through the documentation on GitHub for some of the gems you'll be using Keep the following requirements in mind We'll cover specific steps to get started below this list: 1 Use PostgreSQL for your database from the beginning (not SQLite3), that way your deployment will go much more smoothly 1 Users must sign in to see anything except the sign in page1 User sign-in should use the [Devise](https://github com/plataformatec/devise) gem Devise gives you all sorts of helpful methods so you no longer have to write your own user passwords, sessions, and `#current_user` methods See the [Railscast on Devise](http://railscasts com/episodes/209-introducing-devise view=asciicast) (which uses Rails 3) for a step-by-step introduction The docs will be fully current 1 Users can send follow requests to other users 1 Users can create posts (begin with text only) 1 Users can like posts 1 Users can comment on posts 1 Posts should always display the post content, author, comments, and likes 1 There should be an index page for posts, which shows all the recent posts from the current user and users they are following 1 Users can create a profile with a profile picture You may be able to get the profile picture when users sign in using OmniAuth If this isn't the case you can use [Gravatar](https://en gravatar com/) to generate the photo 1 A user's profile page should contain their profile information, profile photo, and posts 1 There should be an index page for users, which shows all users and buttons for sending follow requests to users the user is not already following or have a pending request 1 Set up a [mailer](http://guides rubyonrails org/action_mailer_basics html) to send a welcome email when a new user signs up Use the [Letter Opener gem](https://github com/ryanb/letter_opener) to test it in development mode 1 Deploy your App to a hosting provider 1 Set up an email provider and start sending real emails #### Extra credit\n1 Make posts also allow images (either just via a URL or, more complicated, by uploading one) 1 Use [Active Storage](https://guides rubyonrails org/active_storage_overview html) to allow users to upload a photo to their profile 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6238,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\project_final.md",
      "source_type": "git_repo"
    },
    "token_count": 509,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "223d5d0aa86677b96506e8463310ae6f",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\project_final.md",
    "source_type": "git_repo",
    "title": "project_final",
    "content": "email when a new user signs up Use the [Letter Opener gem](https://github com/ryanb/letter_opener) to test it in development mode 1 Deploy your App to a hosting provider 1 Set up an email provider and start sending real emails #### Extra credit 1 Make posts also allow images (either just via a URL or, more complicated, by uploading one) 1 Use [Active Storage](https://guides rubyonrails org/active_storage_overview html) to allow users to upload a photo to their profile 1Make your post able to be either a text OR a photo by using a polymorphic association (so users can still like or comment on it while being none-the-wiser) 1 Style it up nicely We'll dive into HTML/CSS in the next course #### Getting started\n1 Think through the data architecture required to make this work There are a lot of models and a lot of associations, so take the time to plan out your approach 1 Build the new PostgreSQL Rails app `$ rails new odinbook --database=postgresql`, initialize the Git repo and update the README to link back to this page 1 Work your way down the list above Each step will involve a new challenge but you've got the tools 1 You can populate data like users and posts using the [Faker](https://github com/stympy/faker) gem, which is basically just a library of sample names and emails It may just be easier, though, for you to write your own seeds in the `db/seeds rb` file, which gets run if you type `$ rake db:seed` #### Final step\n1 Before you move on, we would love it if you could [send us your feedback on the Ruby on Rails course](https://docs google com/forms/d/e/1FAIpQLScrIWkh4Bm3Qv7FH7PuWjLRCryevoJGgpA4tTis4R7CpXp9oQ/viewform usp=sf_link) Getting user(you) feedback is important so we can continue to improve the curriculum and get an idea of your experience Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental For an alternative to using AWS S3 for image storage take a look at this cloudinary",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6238,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\project_final.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "14408445545259ab8a5869a76dce87f5",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\project_sending_confirmation_emails.md",
    "source_type": "git_repo",
    "title": "project_sending_confirmation_emails",
    "content": "Introduction\nSetting up a mailer is a relatively straightforward task It's very similar to building a new controller and views Once you've made a couple, it should come naturally #### WSL Setup for Letter Opener\nIf you encounter issues using the `letter_opener` gem on WSL, you can fix it by defining the file URI scheme for WSL in `config/development rb`:\n```ruby\nLetterOpener configure do |config|\nconfig file_uri_scheme = 'file://wsl localhost/Ubuntu'\nend\n```\nYou can double-check your file URI scheme using the following command in the WSL terminal:\n```bash\nwslpath -m /\n```\nYou will also have to create an environment variable called BROWSER that contains the path to your browser of choice, and add it to ~/ bashrc For example:\n```bash\nexport BROWSER=/mnt/c/Program\\ Files/Google/Chrome/Application/chrome exe\n```\nThis variable should point to your browser, i e , it should contain the browser path Assignment\nYou'll be dusting off your Flight Booker project and having it send out a \"You have booked your ticket\" confirmation email to all Passengers when they are created as part of the booking process Make sure to send out one email to each Passenger in the Booking, not just one for the whole Booking (Alternatively, you can use one of your other projects, as long as it has users registering )\n1 Locate and load up the project file 1 Do some pushups and jumping jacks You've been spending a bit too much time at the computer lately 1 Generate your new mailer with `$ rails generate mailer PassengerMailer` 1 Install the [Letter Opener gem](https://github com/ryanb/letter_opener) to open your emails in the browser instead of sending them in the development environment 1 Follow through the steps listed in the [Rails Guide](http://guides rubyonrails org/action_mailer_basics html) to create the action to send the confirmation email 1 Build both an ` html erb` and ` text erb` version of your ticket confirmation email 1 Test that the email sends by creating a new flight booking (`letter_opener` should open it in the browser for you if you've set it up properly) 1 Try out one other trick -- call the mailer directly from the Rails Console using something like:\n```ruby\n> PassengerMailer confirmation_email(Passenger first) deliver_now",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3391,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\project_sending_confirmation_emails.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "12eb62e1d9b5f617cdda0bd5fae0fe46",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\project_sending_confirmation_emails.md",
    "source_type": "git_repo",
    "title": "project_sending_confirmation_emails",
    "content": "create the action to send the confirmation email 1 Build both an ` html erb` and ` text erb` version of your ticket confirmation email 1 Test that the email sends by creating a new flight booking (`letter_opener` should open it in the browser for you if you've set it up properly) 1 Try out one other trick -- call the mailer directly from the Rails Console using something like: ```ruby > PassengerMailer confirmation_email(Passenger first) deliver_now```\n1 Extra Credit: Deploy it to a hosting provider and try it out There will be a bit of additional setup to get something an email provider like [SendGrid](https://sendgrid com/) working and sending emails in production for you (One heads up: in order to use an email provider you will probably have to give your credit card information, they do this to deter spammers You don't have to pay for the service, but you do have to give your information )\nAdditional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Setting up email: Rails, Heroku, SendGrid, Figaro",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3391,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\project_sending_confirmation_emails.md",
      "source_type": "git_repo"
    },
    "token_count": 229,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "99182f8199b98b7529f2bf249f6da2e6",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\websockets_and_actioncable.md",
    "source_type": "git_repo",
    "title": "websockets_and_actioncable",
    "content": "Introduction\nIn a typical interaction between a client and website, a browser makes a request to the server, and after that request has completed the server closes the connection There are often times when you want to keep that connection open so that the server can update the client if there is something relevant for the user For that we have WebSockets, and Action Cable brings WebSockets to Rails in an easy to use way Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson What a WebSocket is What kinds of problems WebSockets can help you solve What an Action Cable is What is a WebSocket Before diving into Action Cable specifics we should first understand what a WebSocket is and what problem it seeks to solve The WebSocket API was created to allow two-way communication between a server and a client A typical http connection between a server and client opens and closes as the client requests something A WebSocket connection keeps the http connection alive so that the server can send updates to the client without a specific request being made A WebSocket manages the connection between server and client as well as sends and receives data through that connection To understand what problem WebSockets solve let us consider an example of where WebSockets may be useful and then consider what our options would have been prior to the WebSocket API Let us imagine we've built an awesome new social media app, Chewbooka A place to be our true selves and talk all things Chewbacca One key feature for our app, to make us all billions, is that when someone creates a new post extolling the virtues of Peter Mayhew, all the other users connected to our app receive that post without having to manually refresh for updates We'll be rich But, in a time before WebSockets, how are we going to solve it We could use JavaScript to set an interval to reach out to the server at regular intervals to see if there are any updates If there are, we could notify users of the new post and update their view, and if there aren't, we can just return an empty response This still involves opening and closing a request on the server This was a technique known as polling, and was one of the first ways websites tried to bring server updates to the client The downside to this was that it was inefficient If there were no updates for the client it would still request an update from the server In an age of capped internet usage this was a big no",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22022,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\websockets_and_actioncable.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 11
  },
  {
    "id": "bfffdb964f2a7e1e1c008fa2dca4bc5a",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\websockets_and_actioncable.md",
    "source_type": "git_repo",
    "title": "websockets_and_actioncable",
    "content": "return an empty response This still involves opening and closing a request on the server This was a technique known as polling, and was one of the first ways websites tried to bring server updates to the client The downside to this was that it was inefficient If there were no updates for the client it would still request an update from the server In an age of capped internet usage this was a big noSince we don't want the inefficiency of checking for an update when there isn't one, what if instead we did the following: Allow a client to send an http request and if there is no new information, instead of sending an empty response and closing the connection, we hold the request open on the server side When we have a new post we can send that response to any open http requests being held, and that will complete the http request and close the connection Then the client can send a new request to open the connection again This is known as long-polling and is still in operation on many sites The downside of this approach is that it's very server intensive to keep receiving requests and holding them open for an indefinite time, and if order is important in the response you may have issues if there are several updates between requests You may have come across this in the past on some sites where the order of updates changed if you refreshed the page Some old chat rooms did this There are some other approaches used, such as Java applets or Cross Frame Communication, but ultimately they all had some pretty big drawbacks The internet was not initially designed for these kinds of requests If our app is going to make it, if we want to give the world Chewbooka, we need something else WebSockets were created for this Our moment is now WebSockets and Action Cable\nIn earlier versions of Rails, when WebSockets first came onto the scene, there was no easy way to integrate them into an app A lot of gems came about to solve this problem but ultimately they were a little bit hacky Eventually, with Rails 5, came Action Cable - a built in way to support WebSockets the Rails way It's evolved quite a bit since then to make the integration even more seamless, and now it's easy to get up and running with WebSockets We'll cover the basics here which should give you the platform to go and use them yourself when you find a use case in your own apps",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22022,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\websockets_and_actioncable.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 1,
    "total_chunks": 11
  },
  {
    "id": "dc4656abc670a14141a7608628f1d0eb",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\websockets_and_actioncable.md",
    "source_type": "git_repo",
    "title": "websockets_and_actioncable",
    "content": "they were a little bit hacky Eventually, with Rails 5, came Action Cable - a built in way to support WebSockets the Rails way It's evolved quite a bit since then to make the integration even more seamless, and now it's easy to get up and running with WebSockets We'll cover the basics here which should give you the platform to go and use them yourself when you find a use case in your own appsTerminology\nThe first thing we need to cover is some of the terminology you'll come across with Action Cable Action Cable uses a server to handle connections A single user may have several connections open to the same server, such as if they were using multiple tabs in their browser to visit your website But for simplicity most people will just use one browser tab to visit a site, and therefore will hold one connection to the Action Cable server The client of that connection is called a consumer Although a consumer holds one connection to the cable server, they can subscribe, through that connection, to multiple channels A channel should represent one logical piece of work When a consumer subscribes to a channel, they become known as a subscriber and the connection becomes known as a subscription Once subscribed, each channel can then stream what are known as 'broadcastings' to subscribers, such as new posts to Chewbooka There is quite a bit of terminology here, and also these are handled on both the client and server side, so it is a lot to consider - but Rails does a lot of the heavy lifting for us When going through the layers of Action Cable it's helpful to have a real Rails app to refer to If you still have your Rails install cars project on hand that would be ideal for looking through the files as we mention them here to get familiar with where they are If not, just spinning up a new Rails app would also work fine We'll handle server side and client side concerns separately to try and keep things simple Let's first look at the default files that come with a new Rails app for handling WebSockets Then we can look at how to create a new channel and what comes with that Server side concerns\nWebSocket connections\nAs mentioned earlier, every WebSocket accepted by the server creates a connection which manages all the channels that a user subscribes to The connection itself deals with authentication and authorization The client of this connection object is called a consumer If you have a Rails app handy open up app/channels/application_cable/connection",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22022,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\websockets_and_actioncable.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 2,
    "total_chunks": 11
  },
  {
    "id": "e4423e989e3bb2f25f5577fdc61c0d10",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\websockets_and_actioncable.md",
    "source_type": "git_repo",
    "title": "websockets_and_actioncable",
    "content": "Rails app for handling WebSockets Then we can look at how to create a new channel and what comes with that Server side concerns WebSocket connections As mentioned earlier, every WebSocket accepted by the server creates a connection which manages all the channels that a user subscribes to The connection itself deals with authentication and authorization The client of this connection object is called a consumer If you have a Rails app handy open up app/channels/application_cable/connectionrb\nruby\nmodule ApplicationCable\nclass Connection < ActionCable::Connection::Base\nend\nend\nYou use the class above to authorize the incoming connection You can use any logic you want to uniquely identify a user If you use devise or a similar gem and only want logged in users to be authorized, then you can use that to verify the incoming connection You can see an example of how you would do that in the Rails Guides section on Action Cable connections Here they look for an encrypted cookie with user_id to verify a connection, so would assume you set a cookie in this way As you may know, devise does set a cookie in the session However, because Action Cable operates on its own separate server for WebSockets, it doesn't have access to the session Instead we can use the warden environment variable object It does this as Devise is built on top of Warden, and sets the user on the warden middleware object So, if you are using devise, a neat way to verify a connection is to use the following in your find_verified_user method:\nruby\ndef find_verified_user\nif verified_user = env['warden'] user\nverified_user\nelse\nreject_unauthorized_connection\nend\nend\nThere are lots of ways to authorize a connection You might want it to be available for all users, even those not logged in for example There is a range of options so we'll leave it to you to investigate if you ever have a need for a different way Channels\nA channel is a logical unit of work, not too different from what a controller does in a Rails app It handles the incoming and outgoing information through a particular channel If you have a Rails app handy you can take a look at app/channels/application_cable/channel rb This is the parent channel that any channels you create inherit from This is where you can put any logic that should be shared across multiple channels rather than duplicating code Subscriptions\nEach channel you create can be subscribed to by one or more clients",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22022,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\websockets_and_actioncable.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 3,
    "total_chunks": 11
  },
  {
    "id": "e728778c4621ed20ed97a9778a8abb2a",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\websockets_and_actioncable.md",
    "source_type": "git_repo",
    "title": "websockets_and_actioncable",
    "content": "does in a Rails app It handles the incoming and outgoing information through a particular channel If you have a Rails app handy you can take a look at app/channels/application_cable/channel rb This is the parent channel that any channels you create inherit from This is where you can put any logic that should be shared across multiple channels rather than duplicating code Subscriptions Each channel you create can be subscribed to by one or more clientsMessages can then be broadcast to that channel who will forward it to any subscribers Client side concerns\nClient-server connections\nConsumers of subscriptions require an instance of the connection on the client side also This is so when the server broadcasts a message it can be picked up and handled by the browser Rails generates this boilerplate for you when you create a channel and the files live in app/javascript/channels Connect consumer\nThis will be in app/javascript/channels/consumer js when you create a channel\n```javascript\nimport { createConsumer } from \"@rails/actioncable\"\nexport default createConsumer()\n```\nThis code creates a consumer that will try to establish a connection to /cable on your server All channels you create will import this file and use it to create a subscription to the server Creating channels\nNow that we've learned the basics of how Rails handles creating a WebSocket connection between server and client let us turn our attention to how to create a channel and what files this produces Rails channel generator\nUnsurprisingly Rails gives us a generator we can use to create new channels This creates all the boilerplate code we can use to make getting started simpler The command is straightforward Imagine we wanted to create a WebSocket connection for a chatroom We would write the following in the terminal\nbash\nrails generate channel room\nThis will create the following files\nbash\ncreate  app/channels/room_channel rb\nidentical  app/javascript/channels/index js\nidentical  app/javascript/channels/consumer js\ncreate  app/javascript/channels/room_channel js\nYou can see here it does try to create all files we would need and if any exist, such as our consumer js file, then it doesn't overwrite them Possible Error\nYou may get an error message such as \"You have already activated error_highlight 0 6 0, but your Gemfile requires error_highlight 0 5 1 Prepending 'bundle exec' to your command may solve this (Gem::LoadError)\" In this case, delete your Gemfile",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22022,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\websockets_and_actioncable.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 4,
    "total_chunks": 11
  },
  {
    "id": "0494d74a89b8352fc98d1d0de3a5366d",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\websockets_and_actioncable.md",
    "source_type": "git_repo",
    "title": "websockets_and_actioncable",
    "content": "app/javascript/channels/consumer js create app/javascript/channels/room_channel js You can see here it does try to create all files we would need and if any exist, such as our consumer js file, then it doesn't overwrite them Possible Error You may get an error message such as \"You have already activated error_highlight 0 6 0, but your Gemfile requires error_highlight 0 5 1 Prepending 'bundle exec' to your command may solve this (Gem::LoadError)\" In this case, delete your Gemfilelock and run\nbash\nbundle install\n, which creates a new Gemfile lock Now the \"rails generate channel room\" command should create the files correctly as above Client-server interactions\nLet's take a closer look at the room_channel rb and room_channel js files that were created by the generator As mentioned earlier the generator will create a channel in the app/channels directory In our example it was room_channel rb which produces some boilerplate code:\n```ruby\nclass RoomChannel < ApplicationCable::Channel\ndef subscribed\n# stream_from \"some_channel\"\nend\ndef unsubscribed\n# Any cleanup needed when channel is unsubscribed\nend\nend\n```\nStreams\nStreams are how Rails publishes broadcasts to subscribers In order to register a subscription, once a connection is established, the subscribed method is called which should set up the stream Action Cable gives us two stream options stream_from and stream_for The difference is that stream_from expects a string to identify the stream whereas stream_for operates on a model Ultimately they produce something similar ```ruby\ndef subscribed\nstream_from \"room\"\nend\ndef subscribed\nroom = Room find_by(name: 'someroom')\nstream_for room\nend\n```\nSo you would reach for stream_for when you have a specific model you want to use for the stream To give an example imagine our chat room scenario You may want to subscribe to the chatroom and broadcast when a message is created in that room Using stream_for means we can let Rails do the heavy lifting of setting up the stream so we can broadcast using the room object (this will make sense in a moment when we look at the broadcast options) You can also pass parameters from the client to the server and use those to generate a stream We'll look at how to do that on the client side shortly",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22022,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\websockets_and_actioncable.md",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 5,
    "total_chunks": 11
  },
  {
    "id": "9fb5c7464c3575ef1ffcb6e039cd0e9d",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\websockets_and_actioncable.md",
    "source_type": "git_repo",
    "title": "websockets_and_actioncable",
    "content": "when a message is created in that room Using stream_for means we can let Rails do the heavy lifting of setting up the stream so we can broadcast using the room object (this will make sense in a moment when we look at the broadcast options) You can also pass parameters from the client to the server and use those to generate a stream We'll look at how to do that on the client side shortlyOn the server side it's not that much different from how you'd handle it in a controller\n```ruby\ndef subscribed\nstream_from \"room_#{params[:room]}\"\nend\ndef subscribed\nroom = Room find(params[:id])\nstream_for room\nend\n```\nBroadcasting\nOnce you have the WebSocket server set up, you just need to broadcast to it from wherever is appropriate in your app Usually it would be a controller Like streams, there are a couple of ways you can broadcast If you used stream_for then you can call broadcast_to directly on the room channel object itself, using it this way you'd pass at least two arguments The first argument would be the room object that you initially set up the stream on, the other arguments would be the data you want to broadcast This can either be a list of key value pairs, or an object that responds to to_json because ultimately the data is streamed in a json convertible format Following our earlier example of setting up a stream on a room, you may have a message controller where you create messages for an associated room Your create method may look something like\n```ruby\ndef create\n@room = Room find(params[:id])\n@message = @room messages build(message_params)\n@message save\n# You can then broadcast to the room like follows\nRoomChannel broadcast_to(@room, @message)\nend\n```\nRails automatically calls to_json on our message object The alternative syntax would look something like\nruby\nRoomChannel broadcast_to(@room, name: 'Kevin', dork_status: 'Ultimate')\nHere Rails calls to_json on the arguments as a Hash object The other way to broadcast a stream is to broadcast it directly from the ApplicationCable server Why might you want to do this If you didn't set up the stream on an object, but instead used stream_from, then using broadcast_to on RoomChannel will look for a stream with a particular name format",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22022,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\websockets_and_actioncable.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 6,
    "total_chunks": 11
  },
  {
    "id": "e5778b666f4168e26a69a82b152b5ea5",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\websockets_and_actioncable.md",
    "source_type": "git_repo",
    "title": "websockets_and_actioncable",
    "content": "alternative syntax would look something like ruby RoomChannel broadcast_to(@room, name: 'Kevin', dork_status: 'Ultimate') Here Rails calls to_json on the arguments as a Hash object The other way to broadcast a stream is to broadcast it directly from the ApplicationCable server Why might you want to do this If you didn't set up the stream on an object, but instead used stream_from, then using broadcast_to on RoomChannel will look for a stream with a particular name formatGoing back to our chat example,if you had set the stream up as\nruby\nstream_from \"room\"\nAnd then tried to call\nruby\nRoomChannel broadcast_to(\"room\", @message)\nRails would look for a stream called room:room This is just how Action Cable works When you use stream_for room it actually creates the stream as room:<some_room_id> so the format is correct when you then later call RoomChannel broadcast_to(@room, @message) At that point it would look for the stream room:<the_room_id> So if you just wanted to call broadcast on a stream set up as a string using stream_from, you could write in the controller\nruby\nActionCable server broadcast 'message', @message\nThis way we can just hit the server directly, looking for a stream with the relevant name It might take a little getting used to but the approach you take really depends on how you set up the stream Client subscriptions\nGoing back to our earlier channel generator, the other file it generated for us was app/javascript/channels/room_channel js This is pretty straightforward with only a couple of things we need to concern ourselves with at this time Let's take a look at the default file it generated for us:\n```javascript\nimport consumer from \" /consumer\"\nconsumer subscriptions create(\"RoomChannel\", {\nconnected() {\n// Called when the subscription is ready for use on the server\n},\ndisconnected() {\n// Called when the subscription has been terminated by the server\n},\nreceived(data) {\n// Called when there's incoming data on the websocket for this channel\n}\n});\n```\nNote that it imports our consumer from the consumer js file we discussed earlier Then it calls subscriptions create on the consumer We don't need to really dive into how this works under the hood; we just need to understand a couple of key points The first is that the first argument is given as a string This would try to connect to the RoomChannel channel on the server",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22022,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\websockets_and_actioncable.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 7,
    "total_chunks": 11
  },
  {
    "id": "01f721f395998bb8c355fc38d088da0a",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\websockets_and_actioncable.md",
    "source_type": "git_repo",
    "title": "websockets_and_actioncable",
    "content": "websocket for this channel } }); ``` Note that it imports our consumer from the consumer js file we discussed earlier Then it calls subscriptions create on the consumer We don't need to really dive into how this works under the hood; we just need to understand a couple of key points The first is that the first argument is given as a string This would try to connect to the RoomChannel channel on the serverIt doesn't have to be a string though Remember those parameters we discussed earlier This is where you can pass them Instead of a string you can instead pass an object The first key-value pair must be in the format channel: 'ChannelName', and then afterwards you can pass in any number of key-value pairs, which become the parameters sent to the server to establish a connection Let's say we want to send the id of a room to our RoomChannel We could write that first line as follows\njavascript\nconsumer subscriptions create({channel: 'RoomChannel', room: 1}, {\nWe could then access the parameters in the RoomChannel on the server side as\nruby\nroom = Room find(params[:room])\nThis allows you to set multiple streams to the same channel by providing different parameters When might this be useful A example is registering to different chatrooms using the same channel object Or how about subscribing to different notifications for different programming languages They'd have to go through the same NotificationChannel but you would want to send relevant data only to those who subscribed to the relevant notification Params are the way to do it The second argument is another object containing three pre-defined functions connected() and disconnected() are called when the channel first connects and disconnects from the server received(data) is where you'll spend most of your time focusing This is called every time something is broadcast through the stream What you do here will depend on your app but will usually involve appending something to the DOM, or alerting a user to a new message, etc You can add additional functions to the object to help you process the data The data will be in json format A few last things\nIt is possible for a client to send a message to the server and for the server to rebroadcast that message to others You can read the short section in the Rails Guides if you are interested If you want to send dynamic parameters from the client when setting up the server, care needs to be taken You can only get params once the DOM has rendered, and it's common therefore to wrap code in a turbo:load event listener",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22022,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\websockets_and_actioncable.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 8,
    "total_chunks": 11
  },
  {
    "id": "327d5c9a78829acd15ec18f3641c1447",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\websockets_and_actioncable.md",
    "source_type": "git_repo",
    "title": "websockets_and_actioncable",
    "content": "for a client to send a message to the server and for the server to rebroadcast that message to others You can read the short section in the Rails Guides if you are interested If you want to send dynamic parameters from the client when setting up the server, care needs to be taken You can only get params once the DOM has rendered, and it's common therefore to wrap code in a turbo:load event listenerBecause of this, if you aren't careful, you can end up subscribing the same stream multiple times as you navigate pages Action Cable doesn't check if you are already subscribed to a stream before doing it again, because this might be intended behaviour for your app; they can't only allow one connection to a channel This is connected with the way turbolinks works You can read this Stack Overflow post where others have experienced duplicate messages from duplicate stream subscriptions For testing and development Action Cable uses an async adapter to work, but in Production it defaults to looking for a redis server You will need to ensure you have one working if you want to get it up and running on Heroku or another service The connection only remains active while the http request remains unbroken Refreshing the browser or navigating to a new page sever the connection and then will look to establish it again on reconnection Conclusion\nThere is more to Action Cable but it's still quite a niche use case so it's not something you should seek to use on every app you build Look to only introduce WebSockets when you see a real opportunity to add value to your site Assignment\n1 Make sure you've read through all of the [Rails Guides on Action Cable](https://guides rubyonrails org/action_cable_overview html) They even have some full stack examples which you may find useful 1 Follow along with this [Basic Messaging App](https://github com/TheOdinProject/curriculum/blob/main/ruby_on_rails/mailers_advanced_topics/actioncable_lesson md) that we've written to give you a taste of introducing Action Cable to a project\nKnowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What options did developers have before WebSockets to update a client without a user request How can you broadcast to a stream from the server Where do you authorize incoming connections What are Action Cable’s stream options",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22022,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\websockets_and_actioncable.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 9,
    "total_chunks": 11
  },
  {
    "id": "f7749009956163cf540434703b57c560",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\websockets_and_actioncable.md",
    "source_type": "git_repo",
    "title": "websockets_and_actioncable",
    "content": "questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What options did developers have before WebSockets to update a client without a user request How can you broadcast to a stream from the server Where do you authorize incoming connections What are Action Cable’s stream optionsWhat is the difference between stream_from and stream_for Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental It looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22022,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\mailers_advanced_topics\\websockets_and_actioncable.md",
      "source_type": "git_repo"
    },
    "token_count": 135,
    "chunk_index": 10,
    "total_chunks": 11
  },
  {
    "id": "eb3f5cc847941948546f54a7b9df6caf",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_basics\\controllers.md",
    "source_type": "git_repo",
    "title": "controllers",
    "content": "Introduction\nThe controller's job is really to act as the ultimate middleman It knows which questions it wants to ask the Model, but lets the model do all the heavy lifting for actually solving those questions It knows which view it wants to render and send back to the browser, but lets the view itself take care of putting all that HTML together That's why it's a \"controller\" smart enough to know what to do and then delegate all the hard work All it does is collect the proper batch of instance variables for sending over to the view When does the controller get used After an HTTP request comes into your application and the router decides which controller and action to map it to, Rails packages up all the parameters that were associated with that request and runs the specified method in the specified controller Once that method is done, Rails will take any instance variables you've given it in that controller method and ship them over to the appropriate view file so they can be inserted into your HTML template (\"View\") and ultimately sent back to the browser It's pretty straightforward Typical controllers are pretty lightweight and don't have a whole lot of code but are able to do a lot of work with that code What if you want to show all your blog posts in your site's index page Run the #index action of your Posts controller and it will grab all your posts and send them over to the index html erb view file, which figures out how you actually want them displayed (in a giant bulleted list With slick looking panels ) The controller's #index action would actually look like:\nruby\nPostsController < ApplicationController def index\n@posts = Post all\nend end\nIn this action, we have the controller asking the model for something (\"Hey, give me all the posts \"), packaging them up in an instance variable @posts so the view can use them, then will automatically render the view at app/views/posts/index html erb (we'll talk about that in a minute) Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson What goes on in a RESTful controller action Overriding an implicit render of the view-file Situations in which to use redirect_to versus render Handling and restricting parameters and POST-data passed to your controller The flash message and how to display it Naming matters\nOne way that Rails makes your life a bit easier is that it assumes things are named a certain way and then executes them behind the scenes based on those names",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18677,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_basics\\controllers.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 9
  },
  {
    "id": "f10e9d1b57394d9fc25e0e7badaf92c6",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_basics\\controllers.md",
    "source_type": "git_repo",
    "title": "controllers",
    "content": "this lesson What goes on in a RESTful controller action Overriding an implicit render of the view-file Situations in which to use redirect_to versus render Handling and restricting parameters and POST-data passed to your controller The flash message and how to display it Naming matters One way that Rails makes your life a bit easier is that it assumes things are named a certain way and then executes them behind the scenes based on those namesFor instance, your controller and its action have to be named whatever you called them in your routes rb file when you mapped a specific type of HTTP request to them The other end of the process is what the controller does when it's done Once Rails gets to the end of that controller action, it grabs all the instance variables from the controller and sends them over the view file which is named the same thing as the controller action and which lives in a folder named after the controller, e g app/views/posts/index html erb This isn't arbitrary, this is intentional to make your life a lot easier when looking for files later If you save your files in a different folder or hierarchy, you'll have to explicitly specify which ones you want rendered Rendering and redirecting\nAlthough Rails will implicitly render a view file that is named the same thing as your controller action, there are plenty of situations when you might want to override it A main case for this is when you actually want to completely redirect the user to a new page instead of rendering the result of your controller action Redirects typically occur after controller actions where you've submitted information, such as when creating a new Post There's no reason to have a create html erb view file that gets displayed once a post has been created we usually just want to see the post we created and so we'll redirect over to the Show page for that post The distinction here is that your application treats a redirect as a completely new HTTP request so it would enter through the router again, look for the Show page corresponding to that post, and render it normally That also means that any instance variables you set in your original #create controller action are wiped out along the way If that's the common way to deal with successfully creating an object, how about when it fails for some reason (like the user entered a too-short post title) In that case, you can just render the view for another controller action, often the same action that created the form you just submitted (so the #new action)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18677,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_basics\\controllers.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 1,
    "total_chunks": 9
  },
  {
    "id": "3ce3fe22d976050ff72349d1505d1c9f",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_basics\\controllers.md",
    "source_type": "git_repo",
    "title": "controllers",
    "content": "also means that any instance variables you set in your original #create controller action are wiped out along the way If that's the common way to deal with successfully creating an object, how about when it fails for some reason (like the user entered a too-short post title) In that case, you can just render the view for another controller action, often the same action that created the form you just submitted (so the #new action)The trick here is that the view page gets passed the instance variables from your current controller action So let's say that you tried to #create a Post and stored it to @post but it failed to save You then rendered the #new action's view and that view will receive the @post you were just working with in the #create action This is great because you don't have to wipe the form completely clean (which is really annoying as a user) -- you can just identify the fields that failed and have the user resubmit It may sound a bit abstract now but you'll see the difference quickly when building Let's see it in code:\n```ruby\n# app/controllers/posts_controller rb\nclass PostsController < ApplicationController # Make (but don't save) an empty Post so the form we render\n# knows which fields to use and where to submit the form\n# This action will render app/views/posts/new html erb once\n# it's done\ndef new\n@post = Post new\nend\n# We know this will get run once we receive the submitted\n# form from our NEW action above (remember your REST actions )\n# We'll just use pseudo-code for now to illustrate the point\ndef create\n# code here to set up a new @post based on form info\nif @post save\n# code to set up congratulations message\nredirect_to post_path(@post id) # go to show page for @post\nelse\n# code to set up error message\nrender :new, status: :unprocessable_entity\nend\nend\nend\n```\nSo the thing to pay attention to is that, if we successfully are able to save our new post in the database, we redirect to that post's show page Note that a shortcut you'll see plenty of times is, instead of writing redirect_to post_path(@post id), just write redirect_to @post because Rails knows people did that so often that they gave you the option of writing it shorthand We'll use this in the example as we develop it further",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18677,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_basics\\controllers.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 2,
    "total_chunks": 9
  },
  {
    "id": "b0b9a6ca34d791704df82e53f0349169",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_basics\\controllers.md",
    "source_type": "git_repo",
    "title": "controllers",
    "content": "thing to pay attention to is that, if we successfully are able to save our new post in the database, we redirect to that post's show page Note that a shortcut you'll see plenty of times is, instead of writing redirect_to post_path(@post id), just write redirect_to @post because Rails knows people did that so often that they gave you the option of writing it shorthand We'll use this in the example as we develop it furtherThe error condition in the #create action above is going to render the same form that we rendered in the #new action, though this time @post will be the Post object that we tried and failed to save, so it will also have some errors attached to it which can be used to highlight in red which form fields were the culprits Multiple render/redirects\nIt's important to note that render and redirect_to do NOT immediately stop your controller action like a return statement would So you have to be really careful that your logic doesn't result in you running more than one of those statements If you do, you'll get hit with an error They're usually pretty straightforward to debug If you write something like:\nruby\ndef show\n@user = User find(params[:id])\nif @user is_male render \"show-boy\"\nend\nrender \"show-girl\"\nend\nIn any case where the user is male, you'll get hit with a multiple render error because you've told Rails to render both \"show-boy\" and \"show-girl\" Params and strong parameters\nIn the example above, we saw code here to set up a new @post based on form info Okay, how do we grab that info We keep saying that the router packages up all the parameters that were sent with the original HTTP request, but how do we access them With the params object The params object is an instance of ActionController::Parameters, and it behaves similarly to a normal Ruby hash It contains the parameters of the request stored as :key => value pairs So how do we get the ID of the post we're asking for params[:id] You can access any parameters this way which have \"scalar values\", e g strings, numbers, booleans, nil anything that's \"flat\" Some forms will submit every field as a top level scalar entry in the params hash, e g params[:post_title] might be \"My Test Post Title\" and params[:post_body] might be \"Body of post \" etc and these you can access with no issues",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18677,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_basics\\controllers.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 3,
    "total_chunks": 9
  },
  {
    "id": "79192ee1652ca7ccbe70b1ee3798d232",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_basics\\controllers.md",
    "source_type": "git_repo",
    "title": "controllers",
    "content": "So how do we get the ID of the post we're asking for params[:id] You can access any parameters this way which have \"scalar values\", e g strings, numbers, booleans, nil anything that's \"flat\" Some forms will submit every field as a top level scalar entry in the params hash, e g params[:post_title] might be \"My Test Post Title\" and params[:post_body] might be \"Body of post \" etc and these you can access with no issuesYou have control over this, as you'll learn in the lessons on forms Strong parameters\nOften times, though, you want to send parameters from the browser that are all packaged nicely into a hash or nested into an array It can make your life a lot easier because you can just pass that hash straight into Post new(your_hash_of_attributes_here) because that's what Post new expects anyway We won't really get too deep into this stuff until the lessons on Models and Forms, but you should be aware that the structure of the data you're being sent from a form depends entirely on how you choose to set up that form (it's really based on how you choose to name your fields using the HTML name='' attribute) In our example, we will assume that our params[:post] is giving us a hash of Post attributes like { :title => \"My Test Post Title\", :body => \"this post rocks \", :author_id => \"1\"}, which is exactly what Post new is expecting Whether you get the parameters packaged up in a hash or all on the top level as individual attributes (like params[:id]), again, is up to you and how you create your form But know it's usually easier for you to handle receiving a nicely packaged hash of Post attributes in your controller The important distinction between the \"scalar\" parameter values like strings and more complex parameters like hashes and arrays is that Rails 4 implemented some protections in the controller, called \"Strong Parameters\" This is so the user can't send you harmful data (like automatically setting themselves as an admin user when they create an account) To do this, Rails makes you explicitly verify that you are willing to accept certain items of a hash or array This used to be done in Rails 3 by setting `attr_accessible` in the model to allow attributes, so you will probably see that in a lot of Stack Overflow posts and earlier applications To explicitly allow parameters, you can call the #expect method on the params",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18677,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_basics\\controllers.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 4,
    "total_chunks": 9
  },
  {
    "id": "13b4458ad6c4c72c6d11510beee4b5b6",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_basics\\controllers.md",
    "source_type": "git_repo",
    "title": "controllers",
    "content": "as an admin user when they create an account) To do this, Rails makes you explicitly verify that you are willing to accept certain items of a hash or array This used to be done in Rails 3 by setting `attr_accessible` in the model to allow attributes, so you will probably see that in a lot of Stack Overflow posts and earlier applications To explicitly allow parameters, you can call the #expect method on the paramsUsually this method will be passed a key matching the name of the model you're working with (ie a post) followed by an array of allowed attributes For example:\nruby\ndef allowed_post_params\nparams expect(post: [:title, :body, :author_id])\nend\nThis will return the hash of only those params that you explicitly allow (e g {:title => \"your title\", :body => \"your body\", :author_id => \"1\"} ) If you didn't do this, when you tried to access params[:post] nothing would show up Also, if there were any additional fields submitted inside the hash, these will be stripped away and made inaccessible (to protect you) It can be inconvenient, but it's Rails protecting you from bad users You'll usually package these strong parameter helpers up in their own private method at the bottom of your controllers, then call that method where you need to get those specific params So our #create action above can now be filled out a bit more:\n```ruby\n# app/controllers/posts_controller rb\nclass PostsController < ApplicationController # We know this will get run once we've received the submitted\n# form from our new action above (remember your REST actions )\ndef create\n@post = Post new(allowed_post_params) # see method below\nif @post save\n# code to set up congratulations message\nredirect_to post_path(@post id) # go to show page for @post\nelse\n# code to set up error message\nrender :new, status: :unprocessable_entity\nend\nend\nprivate  # Best to make helper methods like this one private\n# gives us back just the hash containing the params we need to\n# to create or update a post\ndef allowed_post_params\nparams expect(post: [:title, :body, :author_id])\nend\nend\n```\nPrior to Rails 8, strong parameters were handled differently",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18677,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_basics\\controllers.md",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 5,
    "total_chunks": 9
  },
  {
    "id": "2ad80694f35cae51e65d60a0acc51bd8",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_basics\\controllers.md",
    "source_type": "git_repo",
    "title": "controllers",
    "content": "congratulations message redirect_to post_path(@post id) # go to show page for @post else # code to set up error message render :new, status: :unprocessable_entity end end private # Best to make helper methods like this one private # gives us back just the hash containing the params we need to # to create or update a post def allowed_post_params params expect(post: [:title, :body, :author_id]) end end ``` Prior to Rails 8, strong parameters were handled differentlyInstead of the `#expect` method, you had to call `#require` on the top level key name followed by calling `#permit` on the list of attributes For example:\n```ruby\ndef allowed_post_params\nparams require(:post) permit(:title, :body, :author_id)\nend\n```\nThis way still works, but it has a couple of security flaws that motivated the development of `#expect` But you will likely be exposed to this way of doing it through older projects, blog posts, and StackOverflow answers Just know that this is serving the same function as the new `#expect` method Flash\nThe last piece of code we need to write there is how to set our special messages for the user Rails gives you a neat tool for sending success and error messages (like the little green message that briefly appears at the top of an application to congratulate you for signing up) called the \"flash\" It acts just like a hash -- you can set its keys to a specific message and then that will be available for you to access if you want to display it in your views You can use any keys you want for the flash, but it's conventional to just stick to three, :success, :error, and :notice So the success message above might look like flash[:success] = \"Great Your post has been created \" The reason you can use any key is because you will have to write a snippet of code in your view anyway to display the flash, but sticking to the conventional ones is good practice The other sneaky trick with the flash is that it automatically erases itself once you've used it, so you don't have to worry about it displaying every time you visit a new page one time use Like Snapchat One last distinction, though, goes back to the difference between a redirect and a render Remember, a redirect submits a completely new HTTP request, effectively leaving our application in the dust and starting over from the top",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18677,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_basics\\controllers.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 6,
    "total_chunks": 9
  },
  {
    "id": "c8654d48174452961c51359b03077eb7",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_basics\\controllers.md",
    "source_type": "git_repo",
    "title": "controllers",
    "content": "practice The other sneaky trick with the flash is that it automatically erases itself once you've used it, so you don't have to worry about it displaying every time you visit a new page one time use Like Snapchat One last distinction, though, goes back to the difference between a redirect and a render Remember, a redirect submits a completely new HTTP request, effectively leaving our application in the dust and starting over from the topWe lose all our data except for the flash The flash is specifically designed to travel with that HTTP request so you have access to it when you get redirected to the next page Render doesn't go that far -- it just uses a view file that's part of your application's normal flow and you have access to all your instance variables in that file Because the flash is special, you actually have to use flash now instead of flash when you are just rendering a view instead of submitting a whole new request That would look like flash now[:error] = \"Rats Fix your mistakes, please \" The distinction between flash and flash now just lets Rails know when it will need to make the flash available to you if you used flash when you should have used flash now, you'll just start seeing your messages showing up a \"page too late\" and it should be obvious what went wrong Now the full controller code can be written out for our #create action:\n```ruby\n# app/controllers/posts_controller rb\nclass PostsController < ApplicationController # We know this will get run once we've received the submitted\n# form from our new action above (remember your REST actions )\ndef create\n@post = Post new(allowed_post_params)\nif @post save\nflash[:success] = \"Great Your post has been created \"\nredirect_to @post # go to show page for @post\nelse\nflash now[:error] = \"Rats Fix your mistakes, please \"\nrender :new, status: :unprocessable_entity\nend\nend\nprivate\ndef allowed_post_params\nparams expect(post: [:title, :body, :author_id])\nend\nend\n```\nSo that action did a fair bit of stuff -- grab the form data, make a new post, try to save the post, set up a success message and redirect you to the post if it works, and handle the case where it doesn't work by berating you for your foolishness and re-rendering the form A lot of work for only 10 lines of Ruby Now that's smart controlling",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18677,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_basics\\controllers.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 7,
    "total_chunks": 9
  },
  {
    "id": "319b61564cf44f4594ff8197e2362206",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_basics\\controllers.md",
    "source_type": "git_repo",
    "title": "controllers",
    "content": "expect(post: [:title, :body, :author_id]) end end ``` So that action did a fair bit of stuff -- grab the form data, make a new post, try to save the post, set up a success message and redirect you to the post if it works, and handle the case where it doesn't work by berating you for your foolishness and re-rendering the form A lot of work for only 10 lines of Ruby Now that's smart controllingAssignment\nThat's really just a taste of the Rails controller, but you should have a pretty good idea of what's going on and what tricks you can use 1 Read the [Rails Guides chapter on Controllers](http://guides rubyonrails org/action_controller_overview html), sections 1 - 4 3 and section 6 2 We'll cover sessions (section 6 1) more in the future so don't worry about them now Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What does a controller do Why is it important to adhere to the Rails naming convention for your controllers and all of its methods What is the difference between render and redirect_to Which variable in your controller contains all the data sent in by the user Data from a client can never be trusted Which helper method should you incorporate in your controller to prevent malicious data injections When is a flash message shown How do we change when a flash is shown Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Controller & Routes Video Demo\nRails 3 Rendering and Partials via YouTube",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18677,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_basics\\controllers.md",
      "source_type": "git_repo"
    },
    "token_count": 356,
    "chunk_index": 8,
    "total_chunks": 9
  },
  {
    "id": "1b8e588e41f47a6810233c3c950eacab",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_basics\\project_blog_app.md",
    "source_type": "git_repo",
    "title": "project_blog_app",
    "content": "Introduction\nIn this project, you'll get the opportunity to actually build a real Rails application It's not a trivially simple one either -- it's got a lot of wrinkles and things that you're not going to understand To be honest, you're kind of going into the deep end so don't worry if you don't understand what exactly you're doing in all the steps The point here is to get familiar with the process of creating a Rails app, what things generally look like, and what you don't know When you get to the end of this project, you can consider yourself remarkably persistent and resilient Assignment\n1 Do the [The Ruby on Rails Guides: Getting Started](https://guides rubyonrails org/v7 2/getting_started html) project up to section 9 2 It ties together the Model-View-Controller and gives a pretty good overview of the common commands you'll use when using Rails The remainder of the tutorial covers topics that have not been introduced, like concerns and authentication, so it is hard to understand the big picture In addition, these sections can be confusing because the instructions do not follow the same copy/paste pattern 1 You should have Rails installed already so section 3 1 might not be relevant It might still be prudent to run the `--version` commands to check you have everything you need though 1 Make sure you commit to Git regularly so if you run into any issues you can revert to an earlier commit without having to start over from scratch As a rough guide look to commit at the end of each section 1 Pay attention to any error messages you get as you build the app, even though they'll be unplanned You'll see all these messages again and again when you're building Rails apps, so it's helpful to start getting familiar with which portions of the message you should pay attention to (and maybe put into Google if you can't figure out what caused it) 1 Try to make a mental note of the commands and generators you can use Rails provides a lot of very helpful generators taking a lot of the pain out of creating different parts of a web application 1 When you're finished, push your code up to [GitHub](https://github com/) Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental The official Ruby on Rails guides are an excellent resource if you want to build on your knowledge",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2960,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_basics\\project_blog_app.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "8aad886af2cb9a444e9581fced6d01e4",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_basics\\project_blog_app.md",
    "source_type": "git_repo",
    "title": "project_blog_app",
    "content": "the commands and generators you can use Rails provides a lot of very helpful generators taking a lot of the pain out of creating different parts of a web application 1 When you're finished, push your code up to [GitHub](https://github com/) Additional resources This section contains helpful links to related content It isn't required, so consider it supplemental The official Ruby on Rails guides are an excellent resource if you want to build on your knowledgeYou can read the Introduction to Core Ruby Tools from LaunchSchool to get a better understanding of Ruby and Rails concepts such as gems, version managers, bundler, and rake The first 30 minutes of this video will teach you how to see through of the magical syntax of Ruby on Rails and how to use pry to debug",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2960,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_basics\\project_blog_app.md",
      "source_type": "git_repo"
    },
    "token_count": 151,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "63148dd369ca58b49f785624523d067e",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_basics\\routing.md",
    "source_type": "git_repo",
    "title": "routing",
    "content": "Introduction\nThe router is the doorman of your application When an HTTP request arrives from the user's browser, it needs to know which controller action (method) should be run Should we display the \"new user\" webpage Should we edit an existing user with whatever data got sent along The Router is basically just a matching service It looks at the HTTP verb (GET, POST, PUT, DELETE) and the URL that is being requested and matches it with the appropriate controller action to run It's a basic function but an essential one If it can't find a route that matches the request, your application will throw an error The other handy thing that goes on when a request enters your application is that Rails grabs all the parameters that came with it and makes them available for you in a special hash called params that you can later use in your controller That's good for things like form submissions so that you later can use that form data to create or modify objects If you open the routes file in your Rails app (located in config/routes rb), you'll see a link to the Rails Guides routing section This resource does a good job of explaining how it works, so you're never in much danger of losing your way Lots of training courses and tutorials kind of gloss over routes, and they seem quite easy in hindsight, but when learning Rails it's easy to get hung up on what exactly is going on Luckily, typing $ rails routes into the command line will give you an output of all the routes that are available to your application In this section we'll go into what's actually happening with this file Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Configuring a root route Configuring RESTful routes for a resource Configuring customized routes for a resource The 7 RESTful controller actions How to obtain a list of all possible routes for your current Rails application Helper methods to create a navigation link on your webpage Root\nThe most important route in your file is the root URL where should users be deposited when they land on http://supercutekittenphotos com Just tell Rails which controller and action to map that route to, and it is so:\nruby\nroot to: \"kittens#index\"  #kittens controller, index action (method)\nRemember, when we say \"action\" we really mean \"the method inside the controller that is called that\", e g",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13384,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_basics\\routing.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "a8a4276799e4c533313501c0f8c9eef3",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_basics\\routing.md",
    "source_type": "git_repo",
    "title": "routing",
    "content": "methods to create a navigation link on your webpage Root The most important route in your file is the root URL where should users be deposited when they land on http://supercutekittenphotos com Just tell Rails which controller and action to map that route to, and it is so: ruby root to: \"kittens#index\" #kittens controller, index action (method) Remember, when we say \"action\" we really mean \"the method inside the controller that is called that\", e gthe index action is just the index method that's defined in the KittensController*\nRESTful routes\nIf you recall our earlier discussion about REST, there are basically seven main types of actions that you can (and should) do to a \"resource\", or an object like a blog post or user something with its own database model From that discussion, they are:\nGET all the posts (aka \"index\" the posts)\nGET just one specific post (aka \"show\" that post)\nGET the page that lets you create a new post (aka view the \"new\" post page)\nPOST the data you just filled out for a new post back to the server so it can create that post (aka \"create\" the post)\nGET the page that lets you edit an existing post (aka view the \"edit\" post page)\nPUT the data you just filled out to edit the post back to the server so it can actually perform the update (aka \"update\" the post)\nDELETE one specific post by sending a delete request to the server (aka \"destroy\" the post)\nThe highlighted words correspond to standard Rails controller actions Each of these represents a \"RESTful\" route, and so it makes sense that you'll need a way to write these in your Router file so the requests they represent are actually routed to the proper action of your controller (in this case, the \"Posts\" controller)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13384,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_basics\\routing.md",
      "source_type": "git_repo"
    },
    "token_count": 383,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "6ca5cbc538a999bd25a703d969a58496",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_basics\\routing.md",
    "source_type": "git_repo",
    "title": "routing",
    "content": "the update (aka \"update\" the post) DELETE one specific post by sending a delete request to the server (aka \"destroy\" the post) The highlighted words correspond to standard Rails controller actions Each of these represents a \"RESTful\" route, and so it makes sense that you'll need a way to write these in your Router file so the requests they represent are actually routed to the proper action of your controller (in this case, the \"Posts\" controller)One way to write them out would be the long way:\nruby\nget \"/posts\", to: \"posts#index\"\nget \"/posts/new\", to: \"posts#new\"\nget \"/posts/:id\", to: \"posts#show\"\npost \"/posts\", to: \"posts#create\"  # usually a submitted form\nget \"/posts/:id/edit\", to: \"posts#edit\"\nput \"/posts/:id\", to: \"posts#update\" # usually a submitted form\ndelete \"/posts/:id\", to: \"posts#destroy\"\nEach of these routes is basically a Ruby method that matches that particular URL and HTTP verb with the correct controller action Two things to notice:\nThe first key thing to notice is that several of those routes submit to the SAME URL they just use different HTTP verbs, so Rails can send them to a different controller action That trips up a lot of beginners The other thing to notice is that the \"id\" field is prepended by a colon that just tells Rails \"Look for anything here and save it as the ID in the params hash\" It lets you submit a GET request for the first post and the fifth post to the same route, just a different ID:\nruby\n/posts/1  # going to the #show action of the PostsController\n/posts/5  # also going to the #show action of PostsController\nYou will be able to access that ID directly from the controller by tapping into the params hash where it got stored The Rails way to write RESTful routes\nRails knows you want to use those seven actions all the time so they came up with a handy helper method which lets you do in one line what we just wrote in seven lines in our resources file:\nruby\n# in config/routes rb resources :posts That's it That is a Ruby method which basically just outputs those seven routes we talked about before No magic You see it a whole lot, now you know what it does",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13384,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_basics\\routing.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "34937663a60f9860a6d0f22a1ca2044a",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_basics\\routing.md",
    "source_type": "git_repo",
    "title": "routing",
    "content": "you want to use those seven actions all the time so they came up with a handy helper method which lets you do in one line what we just wrote in seven lines in our resources file: ruby # in config/routes rb resources :posts That's it That is a Ruby method which basically just outputs those seven routes we talked about before No magic You see it a whole lot, now you know what it doesRails routes and route helpers\nWith that above line in our routes file, what do our routes look like If you type $ rails routes on the command line, it'll output all the routes your application knows, which look like:\nbash\nedit_post  GET  /posts/:id/edit( :format)  posts#edit\n#### Viewing Rails routes\nThe output of the `rails routes` command might be formatted incorrectly if your terminal is zoomed in or if your screen is not wide enough to display the route information If this is the case, you can try zooming out in the terminal using the Ctrl + - keyboard shortcut You can also use the following command to view a longer, expanded list of each route:\n```bash\nrails routes --expanded\n```\nAlternatively, if you have your server running, you can view your routes in the browser by navigating to `localhost:3000/rails/info/routes` One of the nice things about this is that you get a search bar to search over the routes in your project You can see the incoming HTTP verb and URL in the middle columns, then the controller action they map to on the right, which should all be quite familiar because you just wrote it in the routes file The ( :format) just means that it's okay but not required to specify a file extension like doc at the end of the route it will just get saved in the params hash for later anyway But what's on the leftmost column That's the \"name\" of the route There are a lot of situations where you want to be able to retrieve the URL for a particular route, like when you want to show navigation links on your webpage (do NOT hard code the URLS, because you'll be out of luck when you decide to change the URLs and have to manually go in and change them yourself) Rails gives you a helper method that lets you create links called link_to, but you'll need to supply it with the text that you want to show and the URL to link it to",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13384,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_basics\\routing.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "ef88cefed645fde219c96954503ead28",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_basics\\routing.md",
    "source_type": "git_repo",
    "title": "routing",
    "content": "particular route, like when you want to show navigation links on your webpage (do NOT hard code the URLS, because you'll be out of luck when you decide to change the URLs and have to manually go in and change them yourself) Rails gives you a helper method that lets you create links called link_to, but you'll need to supply it with the text that you want to show and the URL to link it toruby\nlink_to \"Edit this post\", edit_post_path(3) # don't hardcode 3 We're jumping a little bit ahead, but in this case, the second argument is supposed to be a path or a URL, so we use the path helper method to generate that edit_post_path(3) will generate the path /posts/3/edit Rails automatically generates helper methods for you which correspond to the names of all your routes These methods end with _path and _url path, as in edit_post_path(3), will generate just the path portion of the URL, which is sufficient for most applications url will generate the full URL Any routes which require you to specify an ID or other parameters will need you to supply those to the helper methods as well (like we did above for edit) You can also put in a query string by adding an additional parameter:\nruby\npost_path(3, :referral_link => \"/some/path/or/something\")\nNow the :referral_link parameter would be available in your params hash in your controller in addition to the normal set of parameters Routes go to controller actions Just to drive home that routes correspond directly to controller actions, a sample controller which would fulfill the above routes generated by resources :posts might look like:\n```ruby\n# in app/controllers/posts_controller rb\nclass PostsController < ApplicationController\ndef index\n# code to grab all posts so they can be\n# displayed in the Index view (index html erb)\nend\ndef show\n# code to grab the proper Post so it can be\n# displayed in the Show view (show html erb)\nend\ndef new\n# code to create an empty post and send the user\n# to the New view for it (new html",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13384,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_basics\\routing.md",
      "source_type": "git_repo"
    },
    "token_count": 438,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "1362d62bef576acf6af02c477e5bc905",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_basics\\routing.md",
    "source_type": "git_repo",
    "title": "routing",
    "content": "```ruby # in app/controllers/posts_controller rb class PostsController < ApplicationController def index # code to grab all posts so they can be # displayed in the Index view (index html erb) end def show # code to grab the proper Post so it can be # displayed in the Show view (show html erb) end def new # code to create an empty post and send the user # to the New view for it (new htmlerb), which will have a\n# form for creating the post\nend\ndef create\n# code to create a new post based on the parameters that\n# were submitted with the form (and are now available in the\n# params hash)\nend\ndef edit\n# code to find the post we want and send the\n# user to the Edit view for it (edit html erb), which has a\n# form for editing the post\nend\ndef update\n# code to figure out which post we're trying to update, then\n# actually update the attributes of that post Once that's\n# done, redirect us to somewhere like the Show page for that\n# post\nend\ndef destroy\n# code to find the post we're referring to and\n# destroy it Once that's done, redirect us to somewhere fun end\nend\n```\nRemember that you can run $ rails routes in the project directory to see all of the routes with their corresponding controllers and actions We don't want all seven routes Sometimes you just don't want all seven of the RESTful routes that resources provides Easy, either specify just the ones you want using only or just the ones you DON'T want using except:\nruby\nresources :posts, only: [:index, :show]\nresources :users, except: [:index]\nNon-RESTful routes\nOf course, you don't have to do everything the RESTful way You probably should, but there are times that you want to make up your own route and map it to your own controller action Just follow the examples we gave at the top for RESTful routes:\nruby\nget '/somepath', to: 'somecontroller#someaction' of course, the config/routes rb comments should be helpful to you here as well Assignment\nYou should have a good sense of what's going on in the routes file by now but probably also have plenty of questions The Rails Guides to the rescue 1 Read the [Rails Guides chapter on Routing](http://guides rubyonrails org/routing",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13384,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_basics\\routing.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "647e2a84fa8a63743fc28970b6b65315",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_basics\\routing.md",
    "source_type": "git_repo",
    "title": "routing",
    "content": "to your own controller action Just follow the examples we gave at the top for RESTful routes: ruby get '/somepath', to: 'somecontroller#someaction' of course, the config/routes rb comments should be helpful to you here as well Assignment You should have a good sense of what's going on in the routes file by now but probably also have plenty of questions The Rails Guides to the rescue 1 Read the [Rails Guides chapter on Routing](http://guides rubyonrails org/routinghtml), sections 1-2 5, 3 1-3 4, 4 6, and 6 1\n1 Watch this [Wonderful explanation of how REST and HTTP works](https://www youtube com/watch v=Q-BpqyOT3a8) You can follow the tutorial using `curl https://api github com` The Postman Chrome Extension shown in the video is deprecated Use the native [Postman App](https://www postman com/downloads/) or use the web version Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is the purpose of the Rails router How do you assign the root route of your application in the router Assuming we have no knowledge of the HTTP-verb, which 3 RESTful controller actions could be triggered by the /photos/:id -route How can you assign all of the RESTful routes for a resource - excluding the destroy-route - in just one line How would you create a link in your app (without hardcoding), that directs you to /photos/10/edit Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Medium article on Rails routing It covers a lot of the same things that the Rails Guides cover but with a little different tone that some people may find easier to digest",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13384,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_basics\\routing.md",
      "source_type": "git_repo"
    },
    "token_count": 405,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "ff4daf8abb9555a8714e898819b1aef5",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_basics\\deployment.md",
    "source_type": "git_repo",
    "title": "deployment",
    "content": "Introduction\nBefore continuing our web development journey, we must address one important task: showcasing our hard work to the world Whether it's to share our creations with friends, create a portfolio for future employers, or launch an online business, we need to host our applications somewhere others can publicly access on the internet In this lesson, we will learn how to deploy our apps to a hosting provider, allowing us to run, build, and operate our web applications in the cloud Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson What a hosting provider is The difference between static and dynamic sites What a PaaS is and how they work How to deploy to a PaaS provider How to troubleshoot common deployment issues What are hosting providers Hosting providers are like server landlords They own servers and rent space on them to customers, who can then use the space to store their websites and make them accessible to anyone on the web You've already had some experience using a hosting provider when you deployed projects to Github Pages earlier in the curriculum GitHub Pages is great for hosting static web pages for free, but we won't be able to use it for hosting our dynamic Ruby on Rails apps We're going to need something more powerful Static vs dynamic sites\nStatic websites consist of pre-written HTML pages They are \"static\" because everyone who visits them will see the same content To build static sites, you only need HTML, CSS and JavaScript Dynamic websites, on the other hand, are websites that can change content based on the user who is visiting them X (formerly known as Twitter) is a good example; every user sees different content on their homepage feed based on who they follow To build dynamic sites, you still need HTML, CSS and JS But additionally, you need a server-side language such as Ruby and a database This additional tech prohibits us from using GitHub Pages for hosting our Ruby on Rails apps GitHub Pages cannot run Ruby code and doesn't have database services we can use Luckily, many hosting providers do offer everything we need They range from the big and complex cloud providers like AWS, Google Cloud and Microsoft Azure to the more beginner-friendly platform as a service (PaaS) providers like Heroku, Railway and Fly io We will be focusing on and utilizing these latter providers in this lesson What is a PaaS Platform as a Service is a specific kind of hosting provider The most important thing to know about them is they are much easier to use and more approachable for beginners than other hosting providers",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20386,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_basics\\deployment.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 9
  },
  {
    "id": "4013e062fb3312eb4e70fc42e5d316db",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_basics\\deployment.md",
    "source_type": "git_repo",
    "title": "deployment",
    "content": "providers like AWS, Google Cloud and Microsoft Azure to the more beginner-friendly platform as a service (PaaS) providers like Heroku, Railway and Fly io We will be focusing on and utilizing these latter providers in this lesson What is a PaaS Platform as a Service is a specific kind of hosting provider The most important thing to know about them is they are much easier to use and more approachable for beginners than other hosting providersThey manage many of the low-level nitty-gritty details with the underlying server infrastructure Allowing us as developers to focus more of our time on building our applications instead of configuring and managing the servers they run on Taking our landlord metaphor a little further, a PaaS platform is like having a landlord who takes care of all the utilities, building maintenance and security While you, the developer, focus on furnishing, decorating and living in the space It's an incredibly powerful model and perfect for us right now Using a PaaS provider for deployment, we can focus on learning and mastering Ruby on Rails without taking a significant diversion to learn the specialized knowledge needed to manage and maintain servers ourselves We will provide a list of our recommended PaaS providers later in the lesson First, let us explore from a high level how PaaS providers work How do PaaS services work PaaS providers work by giving you easy access to a few resources that any Rails app can't live without to function on the web Instances\nThe first and most crucial thing PaaS providers give you are virtual \"computers\" called instances which run your app Basically, one instance means a single instance of your application running at one time That's like having a single computer run your app like you do on Localhost Multiple instances are like having several copies of your app running simultaneously, which allows you to handle more traffic The cool thing about Rails is that you can always fire up more instances of your application if you get too much traffic and users have to wait for their requests to be filled For most of your apps, one instance is plenty You can support a lot of traffic using just a single instance Many of the PaaS providers we will recommend later in this lesson give you your first one for free Databases\nThe second most important thing PaaS providers give you is databases They make it easy to spin up a new database for each app by doing all the setup and configuration for you",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20386,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_basics\\deployment.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 1,
    "total_chunks": 9
  },
  {
    "id": "d00d26419161790d22f1079efacf5121",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_basics\\deployment.md",
    "source_type": "git_repo",
    "title": "deployment",
    "content": "be filled For most of your apps, one instance is plenty You can support a lot of traffic using just a single instance Many of the PaaS providers we will recommend later in this lesson give you your first one for free Databases The second most important thing PaaS providers give you is databases They make it easy to spin up a new database for each app by doing all the setup and configuration for youMany providers even manage the database for you by setting up automatic backups, ensuring the database is constantly updated with the latest critical security patches and ongoing maintenance that keeps your databases up and running smoothly The peace of mind this affords you can't be overstated You never want to be in a position where you're waking at 4 a m to multiple alerts Your database is on the fritz because of some security patch you forgot to apply, and there are no backups to fall back on With Rails, we will be using PostgreSQL, a popular open-source database Some PaaS providers like Heroku will automatically create a PostgreSQL database for our application when we first deploy Others, like Fly io, will have a few more manual steps involved, but it still beats having to set up a database from scratch Domain names\nPaaS providers will give you a random domain name when you first deploy In Heroku's case, something zen-like \"afternoon-falls-4209\" If you want to visit the app, you can go directly to http://afternoon-falls-4209 herokuapp com to see your app live on the web in all its glory The domain name will always be yours on a PaaS provider They give each app a unique domain name that's yours as long as your app lives on their platform In the real world, you'll want to link it to your own custom domain, for example, http://mycooldomain com It's worth mentioning that you don't need custom domain names for the portfolio projects you'll be building in this course The random domains your PaaS provider gives you will be good enough But if you have an itch for tricking out your app with a custom domain name, you'll first need to purchase a domain from a registrar like GoDaddy or IWantMyName To find a new domain, try using Domainr Once you have your domain, you need to point it to your project The provider you are using will have exhaustive documentation on using custom domain names on their platform Our recommended PaaS services\nChoosing a PaaS provider was once a simple decision",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20386,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_basics\\deployment.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 2,
    "total_chunks": 9
  },
  {
    "id": "4f794bada8f97ef199657698da77b00f",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_basics\\deployment.md",
    "source_type": "git_repo",
    "title": "deployment",
    "content": "itch for tricking out your app with a custom domain name, you'll first need to purchase a domain from a registrar like GoDaddy or IWantMyName To find a new domain, try using Domainr Once you have your domain, you need to point it to your project The provider you are using will have exhaustive documentation on using custom domain names on their platform Our recommended PaaS services Choosing a PaaS provider was once a simple decisionHeroku had a free tier that gave you everything needed to host as many small apps as you wanted Unfortunately, they discontinued their free tier in 2022 Luckily, there are still plenty of other great options out there The downside is they all have very limited free tiers For this reason, and to accommodate as many of our learners as possible, we're going to recommend a range of options instead of just one You can host most of your projects for free using a combination of the different providers we recommend But you'll have a bit more legwork to do You'll have to create an account and get familiar with a few different providers If you can pay for hosting, things are more straightforward It will afford you the luxury of choosing one provider you can learn deeply, and you'll be able to manage all of your apps from one place Whatever your circumstances, we've got you covered Here are the PaaS providers we recommend Render\nRender allows you to deploy using \"Blueprints\", which link to your project's GitHub repo The free 750-hour allowance is enough to host a few apps without paying anything However, databases are separate on Render, and the lowest spec databases cost $7 each $21 a month is enough to host three applications as each app's database will cost $7 Render: Free Plan\n750 hours of free usage per month Applications are put to sleep automatically after 15 minutes of inactivity, so the 750 free hours should be enough to host a few apps for the entire month You only get one free database at a time which lasts 90 days before being deleted With this strict database allowance, the free tier is enough to host one free app for 90 days Render: Links\nRender homepage\nRender documentation\nGuide: Official getting started with Rails on Render guide\nGuide: GoRails video guide for deploying Rails applications to Render\nKoyeb\nCan deploy both servers and databases Easily Git push to deploy Ability to run web apps, APIs, and workers easily",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20386,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_basics\\deployment.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 3,
    "total_chunks": 9
  },
  {
    "id": "15a8a0e4d4c81203e58f5905f6d6a26f",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_basics\\deployment.md",
    "source_type": "git_repo",
    "title": "deployment",
    "content": "free database at a time which lasts 90 days before being deleted With this strict database allowance, the free tier is enough to host one free app for 90 days Render: Links Render homepage Render documentation Guide: Official getting started with Rails on Render guide Guide: GoRails video guide for deploying Rails applications to Render Koyeb Can deploy both servers and databases Easily Git push to deploy Ability to run web apps, APIs, and workers easilySSL and 10 free custom domains\nKoyeb: Free Plan\nOne free Web service One free Postgres database (50 hours) Doesn't require a credit card to start Pay-per-use by the second for more Koyeb: Links\nKoyeb homepage\nKoyeb documentation\nGuide: Official getting started with Ruby on Rails on Koyeb guide\nFly io\nFly io uses a CLI tool for deployment Paid plans are available, with resource usage billed based on consumption at competitive rates Free allowances are no longer offered Fly io charges $0 15/GB of RootFS for machines stopped for 30 days Fly io: Hobby Plan\nFly io no longer offers the $5 free trial credit or the $5/month Hobby plan However, the free resources previously included in the Hobby (now deprecated), Launch, and Scale plans are still honored for organizations that were on these plans before they were sunset New users must sign up with a credit card, and charges will apply immediately based on resource consumption Fly io: Links\nFly io's homepage\nFly io documentation\nGuide: Official getting started with Rails on Fly io guide\nGuide: GoRails video guide for deploying Rails applications to Fly io\nRailway app\nRailway has a straightforward deployment process You link to your project's GitHub repo Pay for what you use model $5 a month should be enough to host four applications Railway app: Free Trial\nOne-time grant of $5 in credits that expire in 30 days The remaining balance carries over to a plan, if you decide to upgrade More complex apps with more traffic may consume all free credits before the 30 days Applications are never put to sleep when inactive Railway app: Links\nRailway homepage\nRailway documentation\nGuide: Video guide for deploying Rails applications to Railway\nHeroku\nHeroku has a straightforward deployment process using a combination of a well-documented CLI tool and Git Heroku is a very mature platform which has been around for over a decade",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20386,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_basics\\deployment.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 4,
    "total_chunks": 9
  },
  {
    "id": "c1b6e06796499520cc2814806104365c",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_basics\\deployment.md",
    "source_type": "git_repo",
    "title": "deployment",
    "content": "plan, if you decide to upgrade More complex apps with more traffic may consume all free credits before the 30 days Applications are never put to sleep when inactive Railway app: Links Railway homepage Railway documentation Guide: Video guide for deploying Rails applications to Railway Heroku Heroku has a straightforward deployment process using a combination of a well-documented CLI tool and Git Heroku is a very mature platform which has been around for over a decadeAny problems you encounter are almost guaranteed to have a solution documented on Stack Overflow or elsewhere on the internet The $5 per month Eco plan will give you 1000 free hours each month for all your applications Applications are automatically put to sleep after 30 minutes of inactivity, so the 1000-hour allowance should last the entire month for several of your portfolio projects Heroku's lowest-tier PostgreSQL databases cost $5 per month, effectively costing each application $5 to host $20 a month will be enough to host three applications $5 Eco plan for 1000 server hours + an additional $5 for each app Heroku: Free Plan\nN/A\nHeroku: Links\nHeroku homepage\nHeroku documentation\nGuide: Official Rails guide for Heroku\nGuide: GoRails video guide for deploying Rails applications to Heroku\nAiven\nCan deploy databases only 24/7 for all database services High availability and automatic backups Point-in-time recovery (varies by service) No credit card required Aiven: Free Plan\n5 GiB of storage 24/7 for all database services One free database for every services including PostgreSQL, MySQL and Redis No credit card required Aiven: Links\nAiven homepage\nAiven documentation\nNeon\nCan deploy databases only 24/7 for your main database 20 additional hours of database branching Point-in-time restore (24 Hours)\nNo credit card required Neon: Free Plan\n0 5 GiB of storage\n24/7 for your main compute\nNo credit card required\nNeon: Links\nNeon homepage\nNeon documentation\nGuide: Connect a Ruby on Rails application to Neon\nDebugging and troubleshooting deployments\nErrors are an inevitable part of the software development process They especially have a habit of popping up when deploying to a new environment like a hosting provider When this happens, the key is not to panic and to follow a calm, step-by-step debugging process In most cases, you'll be running into errors that thousands of developers have encountered before",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20386,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_basics\\deployment.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 5,
    "total_chunks": 9
  },
  {
    "id": "4c1b63565eedbeb600de8281cc1516c4",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_basics\\deployment.md",
    "source_type": "git_repo",
    "title": "deployment",
    "content": "homepage Neon documentation Guide: Connect a Ruby on Rails application to Neon Debugging and troubleshooting deployments Errors are an inevitable part of the software development process They especially have a habit of popping up when deploying to a new environment like a hosting provider When this happens, the key is not to panic and to follow a calm, step-by-step debugging process In most cases, you'll be running into errors that thousands of developers have encountered beforeThese errors are well documented and often have solutions you can find with a little bit of Google-fu There are two stages of the deployment process where you are most likely to encounter problems These are during deployment and right after On deployment\nIf you run into an error while deploying, the first thing to do is to check the build logs Finding the build logs should be easy; it's the stream of output you'll see after kicking off a new deployment Scroll through these logs and find the point where the deployment encountered the error It should stand out from the rest of the output and will often look like the stack traces you've already seen with Ruby The error output will tell you exactly what went wrong If you don't recognize the error or what might cause it, your next step will be to copy and paste it into your favorite online search engine You'll likely find a Stack Overflow post with a solution You can get support in our Discord server if searching doesn't lead to anything conclusive Most of the errors you'll face during this stage will be related to properly setting up your app with what your hosting provider needs Double-checking the deployment guide for your hosting provider is always a good place to start It's very easy to miss a step or mistype something After deployment\nYou've just deployed your app successfully; everything is going your way, and this will be a great day But then you visit your app and are greeted with the dreaded 500 page Nothing induces panic in a developer quite like a 500 page It could mean just about anything Error pages in production are deliberately vague to let users know something went wrong without all the overwhelming technical jargon Another important reason is to prevent attackers from using errors in your system to their advantage But you have a few tools at your disposal to help you diagnose the problem The first is the application logs The application logs are the output of your application as it's running It tells you what's happening with your app as it's happening All the incoming requests and database queries are recorded, and you can see them being recorded in real-time",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20386,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_basics\\deployment.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 6,
    "total_chunks": 9
  },
  {
    "id": "28c38c633a393fed3cc376402546da01",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_basics\\deployment.md",
    "source_type": "git_repo",
    "title": "deployment",
    "content": "reason is to prevent attackers from using errors in your system to their advantage But you have a few tools at your disposal to help you diagnose the problem The first is the application logs The application logs are the output of your application as it's running It tells you what's happening with your app as it's happening All the incoming requests and database queries are recorded, and you can see them being recorded in real-timeSo if you're getting a 500 error, you can open up the logs and watch them closely as you refresh the page on your app in the browser to reproduce the error This will either tell you exactly what the problem is or generate some leads you can use to dig further If the logs tell you the application crashes before it even boots and give you nothing else to go on, the next tool to reach for is the Rails console The Rails console boots your app, so just opening it in production can produce a better error message that will tell you exactly why the app is crashing and what part of the app is causing it A common cause of 500 errors in Rails after deployment is forgetting to migrate the database If you're getting a 500 error and have new database migrations in the latest changes, run rails db:migrate on your production database to get it up and running again Going further with troubleshooting tools\nAs your application grows, you'll want to get more sophisticated with your error-tracking tools For example, you can use services like Sentry to track and monitor errors using a slick, easy-to-use interface and get notified when they happen These services will give you more information about the error and the request that caused it, saving you a ton of time But, setting up and using these services are out of the scope of this lesson You can get by just fine with the logs and the Rails console for your first few apps One final tip\nIf something has broken in your latest deployment after successful deployments in the past, backtrack to the last working version to determine what changes you made and slowly reintroduce those changes again if you need to This will be where the Git skills you've been learning will start to really pay off and save you an immense amount of time You'll be able to use git log to see the history of your latest changes and git checkout to revert to a previous working version quickly Assignment\n1 Deploy your [Blog App project](https://www theodinproject com/lessons/ruby-on-rails-blog-app) to one of the hosting providers we've mentioned",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20386,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_basics\\deployment.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 7,
    "total_chunks": 9
  },
  {
    "id": "461d34ea069931fab8fed03917b32885",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_basics\\deployment.md",
    "source_type": "git_repo",
    "title": "deployment",
    "content": "slowly reintroduce those changes again if you need to This will be where the Git skills you've been learning will start to really pay off and save you an immense amount of time You'll be able to use git log to see the history of your latest changes and git checkout to revert to a previous working version quickly Assignment 1 Deploy your [Blog App project](https://www theodinproject com/lessons/ruby-on-rails-blog-app) to one of the hosting providers we've mentionedAny of the free options will work for curriculum purposes, so it doesn't matter which you pick for your projects The important thing to take away from this first deployment is getting experience deploying Don't worry if you don't understand everything that's happening That will come with time - Use one of the linked deploy guides for your PaaS provider to help you through the process - If you're having trouble deploying, check out the [Debugging and Troubleshooting Deployments](#debugging-and-troubleshooting-deployments) section for some tips Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What's the difference between static and dynamic websites What does 'PaaS' stand for What are the advantages of using a PaaS hosting provider What is an instance What steps can you take to diagnose an issue that arises during deployment What steps can you take to diagnose an issue that only appears after deployment Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental free-for dev This is a huge repository for list of software such as SaaS, PaaS, IaaS, etc and other offerings with free developer tiers",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20386,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_basics\\deployment.md",
      "source_type": "git_repo"
    },
    "token_count": 366,
    "chunk_index": 8,
    "total_chunks": 9
  },
  {
    "id": "f56efada19fc7e5635e1ac14a0a07e89",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\css_bundling.md",
    "source_type": "git_repo",
    "title": "css_bundling",
    "content": "Introduction\nYou've already learned about the default way that Rails handles processing CSS as part of the Asset Pipeline However with the continued growth of different CSS pre-processors and bundlers there was a gap to a conventional way to use these tools As part of the Rails 7 release came an optional gem called cssbundling-rails This provides installers for the most common tools used for CSS Here we'll learn how to use this gem to enhance the CSS we can use and write We won't go into each tool as using that will depend on your needs but we will cover why you might reach for each of them Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson What tools can be installed using the cssbundling-rails gem Why you would use cssbundling over the standard asset pipeline way of handling stylesheets The downsides of using cssbundling-rails The cssbundling command line options Cssbundling tooling options\nCssbundling-rails currently comes with installation support for five different tools for bundling and processing your CSS Bootstrap\nThis is probably one of the most famous libraries used to get going with the look and feel of a new application when you need a proof of concept Bulma\nAn alternative to Bootstrap Has opinionated styling to get you up and running when you don't have good CSS knowledge to design your own sites Dart Sass\nThe current hot flavour of processing sass files A way to add additional CSS features to extend what you can do PostCSS\nA tool for transforming CSS by using Javascript It allows you to do things like use future CSS features not supported in all browsers or use one of the many PostCSS plugins to enhance your CSS Tailwind CSS\nA utility-first CSS framework It works similarly to Bootstrap in that you add CSS to your application by adding classes to your HTML Where it differs is Tailwind is not a way to avoid understanding CSS but instead allows you to build up your design by using reusable classes that do only one thing It's moving the CSS to the markup instead of under a class name in your CSS files You'll either love it or hate it",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6945,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\css_bundling.md",
      "source_type": "git_repo"
    },
    "token_count": 433,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "d449b8f9115ffb085ac49138079d00e5",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\css_bundling.md",
    "source_type": "git_repo",
    "title": "css_bundling",
    "content": "CSS framework It works similarly to Bootstrap in that you add CSS to your application by adding classes to your HTML Where it differs is Tailwind is not a way to avoid understanding CSS but instead allows you to build up your design by using reusable classes that do only one thing It's moving the CSS to the markup instead of under a class name in your CSS files You'll either love it or hate itInstallation\nFor a new Rails 7 app installation is as straightforward as a command line argument when creating the app\n~~~bash\nrails new myapp --css [tailwind|bootstrap|bulma|postcss|sass]\n~~~\nSo if you wanted to use Bootstrap you'd run\n~~~bash\nrails new myapp --css bootstrap\n~~~\nFor an existing application you just need to follow the following steps\nAdd gem 'cssbundling-rails' to your Gemfile\nRun bundle install in the command line\nUse the generator provided by the gem to install the tooling you need /bin/rails css:install:[tailwind|bootstrap|bulma|postcss|sass], so again using Bootstrap as an example you'd write /bin/rails css:install:bootstrap That's all there is to it Build script\nWhen you use cssbundling it does a couple of things for you Firstly, no matter which option you choose, it installs the tools and files necessary to get it running and ensures the required import statements are added to your application It then gives you instructions on the build script you need to use It's interesting to see how simple this gem is If you see the lib/install directory for the gem you'll notice how few files there are The install rb file handles making sure all the necessary parts are in place to handle whichever install option you use, and then each tool has its own directory with the files required for that tool to work Have a look at the Bootstrap install file Notice how short it is The build script is used to take the CSS you've written and process it through the tooling you've selected So if you choose Tailwind it needs to take all those utility classes and make sure only those that you use are included to keep the Tailwind file as small as possible The build script is placed in your package json file which is why you do need nodejs installed to use this gem In production, the build script is used to ensure all your assets are built correctly but in development you need to rebuild every time there is a change",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6945,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\css_bundling.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "f2389f21dc7076a1934ad40f2738a745",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\css_bundling.md",
    "source_type": "git_repo",
    "title": "css_bundling",
    "content": "needs to take all those utility classes and make sure only those that you use are included to keep the Tailwind file as small as possible The build script is placed in your package json file which is why you do need nodejs installed to use this gem In production, the build script is used to ensure all your assets are built correctly but in development you need to rebuild every time there is a changeBecause of this the gem ships with a command used to watch your files and rebuild when necessary If you use the jsbundling or cssbundling gems you should always start your app by running /bin/dev in your terminal This task will run the Rails server, and the JS and CSS watch commands to ensure your assets rebuild when needed The /bin/dev task uses a gem called foreman, which uses a Procfile to run lots of different processes in the same terminal, so that it can run the Rails server as well as watch over your assets for changes Why use CSS bundling The CSS bundling gem isn't the only way to integrate tools such as Bulma into your application There are gems just for those libraries, npm packages or you can even reference the minified files directly hosted on a CDN The README of the cssbundling-rails gem also mentions that for Tailwind and Dart Sass there are already gems to bring those into your application and avoid having to have Node js installed to use them However, the CSS bundling gem allows us to seamlessly install and get those tools working in a Rails application with minimal configuration and effort This is extremely powerful and lets you develop much faster without having to bring in the entire library, which helps reduce those build times If you find yourself wanting more than the standard Rails way of producing stylesheets mapped to controller names then this should be the first gem you reach for when looking for something else Assignment\nThere isn't much more to what we've covered above but there are a couple of ideas below\n1 Read the [cssbundling-rails gem's README](https://github com/rails/cssbundling-rails) as the FAQ has some information about using the gem and it gets updated from time to time with new information 2 If you are interested in using any of the tools it offers, go to the relevant website and see how you can get started using it in your own applications Additional resources\nThis section contains helpful links to related content It isn’t required, so consider it supplemental It looks like this lesson doesn't have any additional resources yet",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6945,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\css_bundling.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "bfdf24eb31cae6fa6fab6e80a91d28ce",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\css_bundling.md",
    "source_type": "git_repo",
    "title": "css_bundling",
    "content": "some information about using the gem and it gets updated from time to time with new information 2 If you are interested in using any of the tools it offers, go to the relevant website and see how you can get started using it in your own applications Additional resources This section contains helpful links to related content It isn’t required, so consider it supplemental It looks like this lesson doesn't have any additional resources yetHelp us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6945,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\css_bundling.md",
      "source_type": "git_repo"
    },
    "token_count": 91,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "d3c6c4792c7428b680f4625c39096471",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_basics\\views.md",
    "source_type": "git_repo",
    "title": "Users",
    "content": "Introduction\nThe view is really the simplest part of the MVC structure -- at the basic level, it's just a bunch of HTML boilerplate into which you insert the variables you've received from your controller and which will be sent to the browser It's your actual \"webpage\" It will often have some snippets of code designed to properly present the variables it has received, for instance a loop that will display each one of the posts on your blog Views are often called view templates Views live in the directory app/views/controller_name/action_name html erb, where controller_name is the name of the controller the view is linked to and action_name html erb is the corresponding method inside the controller that was run immediately prior to rendering the view So the Posts controller running the #index action will implicitly render the app/views/posts/index html erb view when it's done You can explicitly tell your controller to render a differently named view by passing it as a parameter to the render function in your controller, but why This directory and naming structure helps you (and Rails) to always know where to find a given view To use an instance variable from your view, just call it the same way you would in the controller: @user first_name or @posts or @some_other_variable As always, in this lesson we'll cover the high level stuff then have you read the Rails Guide for a more detailed understanding of how things work Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson The organization of view templates and layouts in Rails Applying ERB in your view files Partials and how to create and call them Creating dynamic anchor tags in your view files Layouts\nThe first thing to note is that the named view template we render from the controller is actually not the entire webpage It doesn't contain the <head> tags or the DOCTYPE declaration or some of the other basic structure that's present in all pages Precisely because those things are present in all of your pages, the Rails creators were smart enough to turn that code into its own file called a \"layout\" Layouts live in the directory app/views/layouts For a brand new Rails application, the application html erb layout is pretty basic It's got the basic tags you need in all webpages (e g <html> and <body>) and a couple snippets of code that load up the JavaScript and CSS files your webpage will need You'll want to put anything that's needed across all your webpages into the layout",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17252,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_basics\\views.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 9
  },
  {
    "id": "34a8fb5b25daff3fcce7122a37dc9f83",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_basics\\views.md",
    "source_type": "git_repo",
    "title": "Users",
    "content": "that code into its own file called a \"layout\" Layouts live in the directory app/views/layouts For a brand new Rails application, the application html erb layout is pretty basic It's got the basic tags you need in all webpages (e g <html> and <body>) and a couple snippets of code that load up the JavaScript and CSS files your webpage will need You'll want to put anything that's needed across all your webpages into the layoutUsually this is stuff like navbars and footers and snippets of code for displaying flash messages So if a layout is basically just a shell around the individual page, how does the page get inserted That brings us back to the magic of the #yield method, which you saw when you learned about blocks The view template at app/views/posts/index html erb gets inserted where the yield statement is When you get more advanced, you'll be able to play around a bit with that statement Preprocessors\nThe other thing you've undoubtedly noticed is the odd HTML code that goes inside <%= and %> tags This is Embedded Ruby (ERB) It's a special way of executing ruby code inside your HTML HTML is static, so you need to dial in some Ruby if you want to do anything dynamic like looping, if statements or working with variables ERB (and another similar language you might see called HAML) do exactly that What those tags do is execute whatever you see inside them exactly as if it was normal Ruby So <em><%= \"I am emphasized\" %></em> will output an emphasized piece of text like I am emphasized and <%= @user first_name %> might output joe The difference between <% and <%= is that the <%= version actually displays whatever is returned inside the ERB tags If you use <%, it will execute the code but, no matter what is returned by that line, it will not actually display anything in your HTML template <%# is used to comment and will not execute Most of your tags will be <%= because you'll find yourself often just outputting important pieces of the instance variables that you received from your controller, like in the <%= @user first_name %> example above You use the <% for purely code-related stuff like if statements and each loops, where you don't actually WANT anything displayed (the stuff you display will occur inside the loop) If this is confusing, here's an example:  Say we want to display the first names of all the users in our application, but only if the current user is signed in",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17252,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_basics\\views.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 9
  },
  {
    "id": "72fe8f8a21297cebfb8994f885fc8887",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_basics\\views.md",
    "source_type": "git_repo",
    "title": "Users",
    "content": "that you received from your controller, like in the <%= @user first_name %> example above You use the <% for purely code-related stuff like if statements and each loops, where you don't actually WANT anything displayed (the stuff you display will occur inside the loop) If this is confusing, here's an example: Say we want to display the first names of all the users in our application, but only if the current user is signed inThis might look something like:\n~~~erb\n<% if current_user signed_in %>\n<% @users each do |user| %>\n<%= user first_name %>\n<% end %>\n<% else %>\nYou must sign in <% end %>\n~~~\nRemember to close your statements and loops with <% end %> (You'll forget a few times )\nIn the code above, if the user is signed in it will actually render to the web something like:\n~~~html\nBob\nJoe\nNancy\n~~~\nIf the user isn't signed in, it'll be the much shorter:\n~~~html\nYou must sign in ~~~\nIn the above code, if we had accidentally used <%= in the loop line, e g <%= @users each do |user| %> it would run the code fine, but because each returns the original collection, we'd also see a dump of our @users variable on our page (not very professional) It'll happen to you several times and you'll learn quick How do preprocessors work The important thing to note about the above code execution is that it is all done on the server BEFORE the final HTML file is shipped over to the browser (part of the Asset Pipeline, covered in the next lesson) That's because, when you render your template in Rails, it first runs \"preprocessors\" like ERB It knows you want to preprocess the file because it has the extension html erb Rails starts from the outside in with extra extensions So it first processes the file using ERB, then treats it as regular HTML That's fine because ERB by definition outputs good clean HTML, like we saw above There are other preprocessors you'll run into as well css scss files use the SASS preprocessor and become regular CSS files js coffee files, which use the Coffeescript preprocessor, become regular JavaScript after being run",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17252,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_basics\\views.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 2,
    "total_chunks": 9
  },
  {
    "id": "8d890449181ebcb94c09c4a52b8e9566",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_basics\\views.md",
    "source_type": "git_repo",
    "title": "Users",
    "content": "the extension html erb Rails starts from the outside in with extra extensions So it first processes the file using ERB, then treats it as regular HTML That's fine because ERB by definition outputs good clean HTML, like we saw above There are other preprocessors you'll run into as well css scss files use the SASS preprocessor and become regular CSS files js coffee files, which use the Coffeescript preprocessor, become regular JavaScript after being runIn both these cases, the preprocessor's language makes your life easier by giving you some additional tools you can use (like having loops and working with variables) and compiles back down into a plain vanilla CSS or JavaScript or HTML The point is, there are many different preprocessors They are usually gems that either already come with Rails or can easily be attached to it Rails then runs them automatically, so all you have to worry about is whether your file has the right extension(s) to tell the preprocessor to run View partials\nAnother nice thing you can do in Rails is break apart your views into partials This helps you on several levels -- it makes your code more concise and easier to read, and also lets you reuse certain common patterns One example is the form for creating or editing users Both the #new and #edit actions need to render some sort of form for the user, and usually that form is almost exactly the same So often people will turn that form into a new file called something like _user_form html erb and then just call that in both the new html erb and edit html erb view templates where it's needed Pulling back a bit, partials are just HTML files that aren't meant to be complete but can be shared by other files You would call a partial by writing something like:\n~~~erb\n# app/views/users/new html erb\n<%= render \"user_form\" %>\n~~~\nThere are a couple of syntax oddities you need to pay attention to The view partial file is named with an underscore like _user_form html erb but gets called using just the core portion of the name, e g user_form in the example above If there is no directory specified in partial's name, Rails will only look in the same folder as whichever view called it, e g app/views/users",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17252,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_basics\\views.md",
      "source_type": "git_repo"
    },
    "token_count": 456,
    "chunk_index": 3,
    "total_chunks": 9
  },
  {
    "id": "35912d5e65ce73a6b4a1fd9965f5a93c",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_basics\\views.md",
    "source_type": "git_repo",
    "title": "Users",
    "content": "html erb <%= render \"user_form\" %> ~~~ There are a couple of syntax oddities you need to pay attention to The view partial file is named with an underscore like _user_form html erb but gets called using just the core portion of the name, e g user_form in the example above If there is no directory specified in partial's name, Rails will only look in the same folder as whichever view called it, e g app/views/usersSometimes it makes sense to share partials across multiple view templates that are in multiple controllers, so you save them in their own folder called app/views/shared and would then render them using the code <%= render \"shared/some_partial\"%> Passing local variables to partials\nThere's a lot you can do with partials and we won't dive into it all here, but one thing that you might find yourself doing a lot is passing variables to partials A partial has access to all the variables that the calling view template does, but do NOT rely on them What if your partial is used by a different controller that uses a different structure for its instance variables It's bad code to expect an instance variable like @user to be there in the partial all the time That means you've got to explicitly pass the partial whichever variables you want it to have access to In the example above, you most likely want to pass the @user variable to the partial so your code can render the right kind of form render is just a regular method and it lets you pass it an options hash One of those options is the :locals key, which will contain the variables you want to pass Your code might change to look like:\n~~~erb\n<%= render partial: \"shared/your_partial\", :locals => { :user => user } %>\n~~~\nTo use the variable in your partial file, you drop the @ and call it like a normal variable Note that you should use the :locals option if you're calling the render method with a :partial key There is a render shortcut that allows you to pass in variables without the need of using the :locals option:\n~~~erb\n<%= render \"shared/your_partial\", :user => user %>\n~~~\nImplicit partials\nAs usual, there are some things you would end up doing so many times that Rails has given you a shortcut One of these is the act of rendering a model object like a User or a Post",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17252,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_basics\\views.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 4,
    "total_chunks": 9
  },
  {
    "id": "706be7435eef8be0cd2f3490671d23d8",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_basics\\views.md",
    "source_type": "git_repo",
    "title": "Users",
    "content": "the render method with a :partial key There is a render shortcut that allows you to pass in variables without the need of using the :locals option: ~~~erb <%= render \"shared/your_partial\", :user => user %> ~~~ Implicit partials As usual, there are some things you would end up doing so many times that Rails has given you a shortcut One of these is the act of rendering a model object like a User or a PostIf you want a list of all your users, you could write out the HTML and ERB code for displaying a single user's first name, last name, email etc many times directly in your app/views/users/index html erb file or you could keep that code in some sort of each loop But it's usually best to make the User into its own partial called _user html erb so you can reuse it in other cases as well The basic way of calling this might be something just like we saw above, which looks like:\n~~~erb\n# app/views/index html erb\nUsers\n<% @users each do |user| %>\n<%= render \"user\", :locals => {:user => user} %>\n<% end %>\n~~~\nAnd in your partial:\n~~~erb\n# app/views/_user html erb\n<%= \"#{user first_name} #{user last_name}, #{user email}\" %>\n~~~\nIt may seem strange to have only one line in a partial, but trust me that it usually doesn't stay that way for long so it's worth getting the hang of So if that's the basic way, what's the magical Rails way Just tell it to render the User object directly, e g :\n~~~erb\n# app/views/index html erb\nUsers\n<% @users each do |user| %>\n<%= render user %>\n<% end %>\n~~~\nRails then looks for the _user html erb file in the current directory and passes it the user variable automatically What if you want to render a whole bunch of users like we just did Rails also does that for you the same way, saving you the trouble of writing out your own each loop like we did above write:\n~~~erb\n# app/views/index html erb\nUsers\n<%= render @users %>\n~~~\nIn that situation, Rails not only finds the _user html erb file and passes it the correct user variable to use, it also loops over all the users in your @user collection for you",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17252,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_basics\\views.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 5,
    "total_chunks": 9
  },
  {
    "id": "765f554e479129c5e7767ea825f5f765",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_basics\\views.md",
    "source_type": "git_repo",
    "title": "Users",
    "content": "of users like we just did Rails also does that for you the same way, saving you the trouble of writing out your own each loop like we did above write: ~~~erb # app/views/index html erb Users <%= render @users %> ~~~ In that situation, Rails not only finds the _user html erb file and passes it the correct user variable to use, it also loops over all the users in your @user collection for youPretty handy Helper methods\nrendering partials isn't the only method you can call from within a view Rails has a bunch of really handy helper methods that are available for you to use in the view A few of the most common:\n#link_to\nlink_to creates an anchor tag URL Instead of writing:\n~~~erb\n<a href=\"<%= users_path %>\">See All Users\n~~~\nYou write:\n~~~erb\n<%= link_to \"See All Users\", users_path %>\n~~~\nIt's the Rails way And recall that users_path generates a relative URL like /users whereas users_url generates a full URL like http://www yourapp com/users In most cases, it isn't an important distinction because your browser can handle both, but make sure you understand the difference Asset tags\nAs you may have seen in the application layout file we talked about above, Rails gives you helper methods that output HTML tags to grab CSS or JavaScript files You can also grab images These are called Asset Tags We'll get into the \"Asset Pipeline\" a bit later, but basically these tags locate those files for you based on their name and render the proper HTML tag ~~~erb\n<%= stylesheet_link_tag \"your_stylesheet\" %>\n<%= javascript_include_tag \"your_javascript\" %>\n<%= image_tag \"happy_cat jpg\" %>\n~~~\nWill render something like:\n~~~html\n~~~\nNote: in production, your stylesheet and JavaScript will all get mashed into one strangely-named file, so don't be alarmed if it's named something like /assets/application-485ea683b962efeaa58dd8e32925dadf\nForms\nRails offers several different helpers that help you create forms, and we'll go over those in-depth in upcoming lessons Assignment\nNow that you've got a taste of the high-level stuff, read through the Rails Guides for a more detailed look at things The chapter below will actually start in the controller, where you need to let it know WHICH view file you want to render",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17252,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_basics\\views.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 6,
    "total_chunks": 9
  },
  {
    "id": "3b1a33378c9bf6c2bcd55b099db0abaf",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_basics\\views.md",
    "source_type": "git_repo",
    "title": "Users",
    "content": "so don't be alarmed if it's named something like /assets/application-485ea683b962efeaa58dd8e32925dadf Forms Rails offers several different helpers that help you create forms, and we'll go over those in-depth in upcoming lessons Assignment Now that you've got a taste of the high-level stuff, read through the Rails Guides for a more detailed look at things The chapter below will actually start in the controller, where you need to let it know WHICH view file you want to renderThe second half of the chapter gets more into the view side of things 1 Read the [Rails Guide chapter on Layouts and Rendering](http://guides rubyonrails org/layouts_and_rendering html), sections 1 through 3 4 You can certainly skim when they start going over all the many different options you can pass to a given function it's good to know what they are and where you can find them, but you don't need to memorize all of them Usually you'll have something that you want to do, Google it, and find a Stack Overflow post that shows you the option you can use Conclusion\nViews in general make up the user-facing side of your app It can be a bit tricky at first to imagine how you choose which view to render, what to include in that view and how to use partials, but a few iterations of working with Rails will show you the conventions pretty quickly Views will become second nature to you Knowledge check\nThis section contains questions for you to check your understanding of this lesson If you’re having trouble answering the questions below on your own, review the material above to find the answer How do you make sure a preprocessor runs on your view file What is the difference between <%, <%= and <%# What does including <%= yield %> in a layout do Why do we use partials What is the shortcut for rendering a collection as a series of partials How do you dynamically link to another page of your Rails app Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Stack Overflow Post on Views\nVideo on the Relationship Between Views and Controllers\nVideo on ERB Tags - (this video will require you to turn your volume up)\nIntroduction to Ruby on Rails from freeCodeCamp - If you'd like a deeper dive into routing, MVC, CRUD and partials watch the first 60 minutes of this video which provides a good wrap up for what we've been learning so far",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17252,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_basics\\views.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 7,
    "total_chunks": 9
  },
  {
    "id": "78278460ade2a60336ec0123b2513877",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_basics\\views.md",
    "source_type": "git_repo",
    "title": "Users",
    "content": "It isn't required, so consider it supplemental Stack Overflow Post on Views Video on the Relationship Between Views and Controllers Video on ERB Tags - (this video will require you to turn your volume up) Introduction to Ruby on Rails from freeCodeCamp - If you'd like a deeper dive into routing, MVC, CRUD and partials watch the first 60 minutes of this video which provides a good wrap up for what we've been learning so farYou'll also get to create a basic Rails app from scratch if you'd like some extra practice",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17252,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_basics\\views.md",
      "source_type": "git_repo"
    },
    "token_count": 108,
    "chunk_index": 8,
    "total_chunks": 9
  },
  {
    "id": "0ee859279d573ef73738b9e4a7e76e0e",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\js_bundling.md",
    "source_type": "git_repo",
    "title": "js_bundling",
    "content": "Introduction\nThis lesson will go over the new jsbundling-rails gem and some of the pros and cons of using this gem The role of jsbundling-rails is to provide installers to set up esbuild, rollup, or webpack to allow bundling After your bundler of choice is set up, your bundled output will use app/assets/builds to hold the bundle output at which you can refer to it using the standard asset pipeline approach Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson How to use a bundler with an import map based Rails app Why you might use JS bundling over import maps Some of the downsides of using JS Bundling Why Webpacker was used for Rails 6 What the JS bundling options are JS bundling options\nBefore we install the jsbundling-rails gem let's go over a few of the options The three options are:\nEsbuild\nEsbuild is a fast lightweight bundler written in Go Whereas other bundlers may be slower, but have more features which can make the bundler take longer to run Esbuild manages to be fast with variety of methods such as utilizing parallelism to use all available CPU cores If you're interested in reading more, check out the esbuild documentation Rollup\nRollup is another bundler that allows you to utilize a JavaScript syntax for importing and exporting functions and data so they can be shared between separate scripts then changing them to existing supported formats If you want to take a deeper dive, look into Rollup's documentation Webpack\nThe final bundler provided through jsbundling-rails is webpack which is a static module bundler that uses an entry point within your application to create a dependency graph that then combines every module your project needs into one or more bundles to be used by your application Take a deeper dive into Webpack's concepts Now that you have been introduced into the bundlers provided through jsbundling-rails let's go into setting it up Using yarn build watch\nBefore we introduce utilizing jsbundling-rails let's introduce a powerful new command with yarn bash\nyarn build --watch\nThis command  starts by calling yarn with the build command which processes all of the entry points to your JavaScript into  app/assets/builds/application js The --watch flag allows the bundler to watch for changes to JavaScript files within your project",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14989,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\js_bundling.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 8
  },
  {
    "id": "5b2732ce60e385a13121c3dd28d3b8ec",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\js_bundling.md",
    "source_type": "git_repo",
    "title": "js_bundling",
    "content": "you have been introduced into the bundlers provided through jsbundling-rails let's go into setting it up Using yarn build watch Before we introduce utilizing jsbundling-rails let's introduce a powerful new command with yarn bash yarn build --watch This command starts by calling yarn with the build command which processes all of the entry points to your JavaScript into app/assets/builds/application js The --watch flag allows the bundler to watch for changes to JavaScript files within your projectWhen these changes happen it starts the process of bundling those entry points into your JavaScript and updating your project When doing this you need to be running rails server in another terminal as well You will notice when you enter the command that the program will still be running and say [watch] build finished, watching for changes That is the intended behavior It will wait for changes to occur in your JavaScript files and proceed to rebundle them which will update the bundled file that is delivered to the asset pipeline Another useful command you can use is /bin/dev which will start the yarn build --watch and rails server at the same time That means not having to switch between terminal windows for developing In development mode the command /bin/dev is useful since it allows your JavaScript bundle watcher and Rails server to update without needing to manually update it as yarn watches for those changes automatically Using jsbundling-rails\nFirst ensure that you have Yarn and Node installed Run yarn -v and node -v in the terminal Both of these should return a number indicating the version Now let's go through these steps with a new app and for the last step select esbuild for your JavaScript Run the command below bash\nrails new testapp\nAdd the jsbundling-rails gem to your Gemfile ruby\ngem 'jsbundling-rails'\nThen run the command below in the terminal within your Rails application folder bash\nbundle install\nRemember the three options for the bundler are esbuild, rollup and webpack and you pick only one bash\nbin/rails javascript:install:<replace the text and <> with your bundler choice>\nYou'll see a few errors after running this, but don't fear We'll look at them one-by-one ```bash\n✘ [ERROR] Could not resolve \"@hotwired/turbo-rails\"\napp/javascript/application js:2:7:\n2 │ import \"@hotwired/turbo-rails\"\n╵        ~~~~~~~~~~~~~~~~~~~~~~~\n```\nIt's quite explicit in the issue",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14989,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\js_bundling.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 1,
    "total_chunks": 8
  },
  {
    "id": "d7021c5b61decbe74cf5c5f6744f2a2d",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\js_bundling.md",
    "source_type": "git_repo",
    "title": "js_bundling",
    "content": "the terminal within your Rails application folder bash bundle install Remember the three options for the bundler are esbuild, rollup and webpack and you pick only one bash bin/rails javascript:install:<replace the text and <> with your bundler choice> You'll see a few errors after running this, but don't fear We'll look at them one-by-one ```bash ✘ [ERROR] Could not resolve \"@hotwired/turbo-rails\" app/javascript/application js:2:7: 2 │ import \"@hotwired/turbo-rails\" ╵ ~~~~~~~~~~~~~~~~~~~~~~~ ``` It's quite explicit in the issueResolve is just a fancy word for saying the bundler wasn't able to do anything with this import Which makes sense as our testapp was set up initially with import maps instead of with esbuild or another bundler Now let's see if we can resolve this in our app/javascript/application js It looks fine so what gives Remember that this Rails app was started with import maps not a bundler We need to install the package so that way it can be bundled appropriately Now let's run the command below bash\nyarn add @hotwired/turbo-rails\nNext, run the build command bash\nyarn run build\nThe error is gone which means the bundler was able to resolve it since it was properly formatted Let's look at the next error:\n```bash\n✘ [ERROR] Could not resolve \"controllers\"\napp/javascript/application js:3:7:\n3 │ import \"controllers\"\n│        ~~~~~~~~~~~~~\n╵        \" /controllers\"\n```\nWith this error, the bundler is wanting to look for a package name called controllers, but we're instead wanting to import code from the javascript/controllers/ directory in our project To properly handle this, we can do what it says and change this this to a relative path:\n```javascript\n// app/javascript/application js\nimport \"@hotwired/turbo-rails\"\nimport \" /controllers\"\n```\nNow run the build command again, and you'll see the following error:\n```bash\n✘ [ERROR] Could not resolve \"@hotwired/stimulus-loading\"\napp/javascript/controllers/index js:6:41:\n6 │ import { eagerLoadControllersFrom } from \"@hotwired/stimulus-loading\"\n╵                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n```\nThis error is a bit more confusing than the others",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14989,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\js_bundling.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 8
  },
  {
    "id": "5e7fc16175b070f860785593d47bf343",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\js_bundling.md",
    "source_type": "git_repo",
    "title": "js_bundling",
    "content": "the javascript/controllers/ directory in our project To properly handle this, we can do what it says and change this this to a relative path: ```javascript // app/javascript/application js import \"@hotwired/turbo-rails\" import \" /controllers\" ``` Now run the build command again, and you'll see the following error: ```bash ✘ [ERROR] Could not resolve \"@hotwired/stimulus-loading\" app/javascript/controllers/index js:6:41: 6 │ import { eagerLoadControllersFrom } from \"@hotwired/stimulus-loading\" ╵ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ``` This error is a bit more confusing than the othersIf you try using yarn add @hotwired/stimulus-loading, you'll see that a package with that name can't be found This package is only meant to be used with importmaps as a way to manage how stimulus controllers are loaded To solve this and other problems within the app/javascript/controllers/index js file, you can run the following command:\nbash\nbin/rails stimulus:manifest:update\nThis command will automatically generate the proper code in app/javascript/controllers/index js Now if you run yarn build, you'll encounter one final error to resolve:\n```bash\n✘ [ERROR] Could not resolve \"@hotwired/stimulus\"\napp/javascript/controllers/hello_controller js:1:27:\n1 │ import { Controller } from \"@hotwired/stimulus\"\n```\nThe code from the stimulus controllers is being loaded properly now, but it references stimulus, a package we haven't installed You can do the same thing you did with turbo-rails to resolve this error bash\nyarn add @hotwired/stimulus\nNow when we run yarn run build we should get the proper outcome You should also be able to run bin/dev and see the Rails splash page at http://localhost:3000 Now that we have walked through how to install the jsbundling-rails gem in a Rails app that was created with import maps let's make our life a little bit easier and set it up right from the beginning Go ahead and enter the below command bash\nrails new myapp -j <replace the text and <> with your bundler choice>\nLet's walk through an example with esbuild In the terminal entering this command will start the Rails app creation process",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14989,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\js_bundling.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 3,
    "total_chunks": 8
  },
  {
    "id": "521f171f95ea31f85a758b906eb931b6",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\js_bundling.md",
    "source_type": "git_repo",
    "title": "js_bundling",
    "content": "have walked through how to install the jsbundling-rails gem in a Rails app that was created with import maps let's make our life a little bit easier and set it up right from the beginning Go ahead and enter the below command bash rails new myapp -j <replace the text and <> with your bundler choice> Let's walk through an example with esbuild In the terminal entering this command will start the Rails app creation processbash\nrails new bundling -j esbuild\nWhen running the build app you will see different output than the output shown in the Rails installation lesson You should see something like this at the end bash\ninfo esbuild-windows-arm64@0 14 13: The CPU architecture \"x64\" is incompatible with this module [3/4] Linking dependencies [4/4] Building fresh packages success Saved lockfile success Saved 1 new dependency info Direct dependencies\n└─ @hotwired/stimulus@3 0 1\ninfo All dependencies\n└─ @hotwired/stimulus@3 0 1\nA key difference here is that within the terminal output you will see more output as well as that info output from esbuild as this command is ran Let's take a look at the results for our Rails application In our package json file that is where our script build is kept Here you will see the command that was run by Rails when building app Going into the app/javascript/application js you can see what was imported An important caveat with esbuild is that in app/javascript/controllers/index js you need to run a command to add all your controllers to the index js file That command is\nbash /bin/rails stimulus:manifest:update\nWith that you will be able to add your controllers to the bundling process and use them However make sure you run this command or else not all controllers will be included Why use JS bundling\nYou may be wondering why we even need JS bundling when we have import maps One of the most important things to remember is that this decision depends on the circumstances of your project and that while import maps eliminates the need for bundling and transpiling, you lose out on some of the benefits of using JS bundling Some frameworks like React, which require compiling for JSX, do not work with import maps which leads to another important point The JavaScript ecosystem is vast, and bundling was introduced to mitigate performance costs associated with HTTP 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14989,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\js_bundling.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 4,
    "total_chunks": 8
  },
  {
    "id": "e5924694b6c7f574f5f28940d3647b58",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\js_bundling.md",
    "source_type": "git_repo",
    "title": "js_bundling",
    "content": "things to remember is that this decision depends on the circumstances of your project and that while import maps eliminates the need for bundling and transpiling, you lose out on some of the benefits of using JS bundling Some frameworks like React, which require compiling for JSX, do not work with import maps which leads to another important point The JavaScript ecosystem is vast, and bundling was introduced to mitigate performance costs associated with HTTP 1Because HTTP 1 limited the number of requests per connection, sending many files carried a performance cost Although HTTP 2 has reduced these costs, many JS packages still require explicit transpiling or bundling for performance or because of framework requirements If you plan to use such frameworks for your project, it may be best to choose JS bundling over import maps When to use JS bundling\nAt this point, you might be wondering why import maps are even necessary Being able to use all of the JavaScript ecosystem would surely mean you don't need to use import maps at all, right Not quite All tools have their pros and cons It is important to remember that, in the days of HTTP 1, there was a performance penalty associated with making multiple requests Since the introduction of HTTP 2, that performance penalty no longer applies Therefore, one of the main benefits of using bundling, which was to mitigate the costs associated with HTTP 1, has become less significant Another downside to using JS bundling is that any changes to a module will expire the entire bundle, requiring the browser to redownload and parse everything from scratch In contrast, import maps keeps the modules separate, so you don't have to redownload every single module anytime something changes Just the kind of performance jump that may make you consider using import maps over JS bundling Oftentimes, the answer to these kinds of decisions is that there is no right answer It all depends on what you're looking for in your project Want to use React with JSX and don't mind a dip in performance Consider JS bundling Have some modules in mind you want to use that don't require transpiling or bundling and want a boost in performance Consider import maps One thing to really stress is that one is not necessarily worse than the other and it very much depends on your project needs JS bundling gives you access to many frameworks such as React with JSX as well as certain features such as tree-shaking, whereas import maps does not require bundling and you don't need to update every module when updating a module",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14989,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\js_bundling.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 5,
    "total_chunks": 8
  },
  {
    "id": "e301ac346b1fe6b168880d195f5d2f81",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\js_bundling.md",
    "source_type": "git_repo",
    "title": "js_bundling",
    "content": "transpiling or bundling and want a boost in performance Consider import maps One thing to really stress is that one is not necessarily worse than the other and it very much depends on your project needs JS bundling gives you access to many frameworks such as React with JSX as well as certain features such as tree-shaking, whereas import maps does not require bundling and you don't need to update every module when updating a moduleWebpacker\nYou may have heard of Webpacker or have come across it in the wild so it's worth mentioning as it was used for quite a few years for Rails 6 Webpacker was a Ruby gem created to work with webpack itself which allowed Rails to use ES6 (short for ECMAScript 6 which was introduced to standardize JavaScript) as it required transpilation for use with browsers at that time In the context of Rails, Webpacker builds a map of your JavaScript code to build a dependency graph allowing it to generate bundles of code Rails would grab a pack from app/javascript/packs and download it when that form is visited by the user With Ruby gems we use a Gemfile and with Webpacker we use a package json to manage your JavaScript libraries The main difference is that with a Gemfile you need to open it and manually add the gem and version and then run bundle but with webpack we can use Yarn from the terminal to add a library like so bash\nyarn add bootstrap\nYou would then be able to reference it within your pack file and now be able to use it While you may come across this in the wild it is important to note that Rails 7 does not use it any longer and replaces it with jsbundling-rails If you want to use bundling make sure to use one of the bundlers listed earlier in the lesson Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What are the three different options that jsbundling-rails provides What are the steps to including a bundler for an import map based project What is one downside to using JS bundling Why was Webpacker introduced for Rails 6 Why is the /bin/dev command useful in development mode Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14989,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\js_bundling.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 6,
    "total_chunks": 8
  },
  {
    "id": "6078ce75cac54fb8edf09c72e6267e10",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\js_bundling.md",
    "source_type": "git_repo",
    "title": "js_bundling",
    "content": "in mind you are not expected to memorize or master this knowledge What are the three different options that jsbundling-rails provides What are the steps to including a bundler for an import map based project What is one downside to using JS bundling Why was Webpacker introduced for Rails 6 Why is the /bin/dev command useful in development mode Additional resources This section contains helpful links to related content It isn't required, so consider it supplementalA good mention of why JS bundling is still a valid option by David Heinemeier Hansson If you're interested in the differences, here is a high level comparison of jsbundling-rails versus webpacker",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14989,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\js_bundling.md",
      "source_type": "git_repo"
    },
    "token_count": 135,
    "chunk_index": 7,
    "total_chunks": 8
  },
  {
    "id": "ddd5a526e9bc654cd2cad7bf0b09edbe",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\stimulus_js.md",
    "source_type": "git_repo",
    "title": "stimulus_js",
    "content": "Introduction\nRemember JavaScript What did we learn that for Well, sometimes you want a bit more interactivity in your browser,\nlike hiding/showing a part of your page Making a round trip to your server is impractical That is where JavaScript\ncomes in: Rails suggests using the JS framework Stimulus to augment your HTML Stimulus gives you a way of creating and using reusable\ncontrollers that give you an extra little bit of interactivity Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson How to attach Stimulus controllers to your HTML How to use targets instead of query selectors How to use action attributes instead of event listeners Where to keep state How to use lifecycle callbacks How to make your controllers reusable How to make your controllers customizable with attributes The idea\nStimulus is a modest framework It leaves things mostly up to you, but gives you a consistent way of doing things It uses HTML data-attributes to attach and configure behavior on your HTML Let us look at an HTML example\nfrom the handbook:\n```html\nPIN:\nCopy to Clipboard\n```\nRead carefully through the example, and pay special attention to the data attributes Can you guess what the example does This example is using three data attributes: data-controller, data-clipboard-target, data-action So what is their\npurpose data-controller is set to clipboard, which says \"Hey Stimulus, we want to enhance this HTML with some clipboard\nbehavior \"\ndata-clipboard-target is set to source, which says \"This is the source we are gonna use for our clipboard\ncontroller \"\ndata-action is set to click->clipboard#copy, which says \"On a click invoke the copy action from our clipboard\ncontroller \"\nSo together these three attributes enable the following behavior: When a user clicks on the button, use the function\ncopy of Stimulus controller clipboard with the input as a source The yet-to-be-seen JavaScript controller will\nthen take care of the rest and will copy the value of the source target to the user's clipboard Wasn't this supposed to be a JavaScript lesson Yes, but the point is that Stimulus is a HTML first framework It generally does not render HTML; instead it attaches behavior to your existing HTML with sprinkles of JavaScript Through the consistent use of some data attributes, we can read the HTML and can see where the HTML is enhanced",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13572,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\stimulus_js.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "a773c1bfcd84e960fa334c8123d19db9",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\stimulus_js.md",
    "source_type": "git_repo",
    "title": "stimulus_js",
    "content": "care of the rest and will copy the value of the source target to the user's clipboard Wasn't this supposed to be a JavaScript lesson Yes, but the point is that Stimulus is a HTML first framework It generally does not render HTML; instead it attaches behavior to your existing HTML with sprinkles of JavaScript Through the consistent use of some data attributes, we can read the HTML and can see where the HTML is enhancedLook at this HTML without the special data-attributes Stimulus uses:\nhtml\n<input id=\"pin-code\" value=\"1337\" readonly>\n<button id=\"pin-button\">Copy to Clipboard</button>\nProbably something is supposed to happen when you click that button However you can't tell from the HTML\nalone how things are wired up You have to search for some JavaScript that handles this behavior So let's go through the basic aspects of Stimulus controllers Don't worry if you don't understand\neverything on the first read through; the assignments will give more in depth information The Stimulus controller\nA Stimulus controller gets attached to a DOM element by declaring it with the data-controller attribute html\n<input data-controller=\"input\">\nThis will attach the Stimulus controller that is located in app/javascript/controllers/input_controller js If you want to add a new\ncontroller, create a file some_name_controller js and it will be automatically loaded An empty controller looks something like this:\njavascript\nimport { Controller } from \"@hotwired/stimulus\"\nexport default class extends Controller {}\nThis controller does not do anything; it only shows how it imports the class Controller that we use as a basis As you see, there is no mention of the name of the controller The name is inferred from the file name\n(input_controller js becomes input) This creates a scope All the following attributes will only work within the scope of that controller / DOM element Triggering an action\nYou learned how to trigger events with event listeners; in Stimulus, instead, you use data-action attributes to\nexecute JavaScript to react to a user click or input So instead of document querySelector(\"button\") addEventListener(\"click\", showAlert) we write the following HTML:\n```html\nAlert me ```\nNow clicking the button will trigger the action of the associated Stimulus controller:\njavascript\n// app/javascript/controllers/alert_controller",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13572,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\stimulus_js.md",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "1759c5d26cc18502c973cd255b4838b7",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\stimulus_js.md",
    "source_type": "git_repo",
    "title": "stimulus_js",
    "content": "following attributes will only work within the scope of that controller / DOM element Triggering an action You learned how to trigger events with event listeners; in Stimulus, instead, you use data-action attributes to execute JavaScript to react to a user click or input So instead of document querySelector(\"button\") addEventListener(\"click\", showAlert) we write the following HTML: ```html Alert me ``` Now clicking the button will trigger the action of the associated Stimulus controller: javascript // app/javascript/controllers/alert_controllerjs\nimport { Controller } from \"@hotwired/stimulus\"\nexport default class extends Controller {\nshow() {\nalert(\"Hey from Stimulus\");\n}\n}\nSelecting elements\nYou learned how to access DOM elements with selectors, such as document querySelector and document getElementById Again Stimulus gives you a way to declare elements you want to select in the HTML:\n```html\nGreet me\n```\nNotice the data-greeter-target Targets can then be used in your controller:\njavascript\n// app/javascript/controllers/greeter_controller js\nimport { Controller } from \"@hotwired/stimulus\"\nexport default class extends Controller {\nstatic targets = [\"name\", \"output\"]\ngreet() {\nthis outputTarget innerHTML = `Hello ${this nameTarget value} `\n}\n}\nYou need to declare your targets, once you have Stimulus provides the following properties to you controller:\nthis nameTarget - the first DOM element of matching target name this nameTargets - An array of all targets matching name this hasNameTarget - Boolean indicator of whether target of name is in scope Keeping state\nA Stimulus controller can have its internal state, meaning you can keep data in the controller Though usually you want\nto keep this to a minimum So anything you define on this is available throughout the controller:\n```javascript\nexport default class extends Controller {\nconnect() {\nthis count = 0\n}\naddOne() {\nthis count++\n}\n}\n```\nStimulus also lets you declare specific value attributes that allow you to listen to changes:\n```javascript\n// app/javascript/controllers/counter_controller js\nexport default class extends Controller {\nstatic values = { count: {type: Number, default: 0} }\naddOne() {\nthis countValue++\n}\ncountValueChanged() {\nconsole log(this countValue)\n}\n}\n```\nSo here we declare a count value that we then interact with: the countValueChanged function will automatically be\ncalled whenever the value changes As we said Stimulus is HTML first",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13572,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\stimulus_js.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "28436699dda976d4759051682e2f0598",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\stimulus_js.md",
    "source_type": "git_repo",
    "title": "stimulus_js",
    "content": "lets you declare specific value attributes that allow you to listen to changes: ```javascript // app/javascript/controllers/counter_controller js export default class extends Controller { static values = { count: {type: Number, default: 0} } addOne() { this countValue++ } countValueChanged() { console log(this countValue) } } ``` So here we declare a count value that we then interact with: the countValueChanged function will automatically be called whenever the value changes As we said Stimulus is HTML firstSo the HTML actually shows the value on the\nelement where the controller lives:\n```html\n```\nSo the above HTML will always reflect the value of this countValue If you change the value through an action in the\ncontroller, the HTML value will be updated But also if you change the value in the HTML, the countValueChange\ncallback is called This may be a bit abstract for now, but opens up really interesting possibilities for many use cases Use class attributes to make your controllers more configurable\nStimulus controllers are best written so that they are reusable Often you will want to toggle, remove or add\na specific CSS class on an element But the class might be different every time For example you sometimes want\nto toggle a hidden class, but sometimes an active one For these situations you can configure your controller\nwith an attribute to specify the CSS class to be used:\n```html\n```\nAnd in your controller:\n```javascript\n// app/javascript/controllers/toggle_controller js\nexport default class extends Controller {\nstatic classes = [ \"change\" ]\ntoggle() {\nthis element classList toggle(this changeClass)\n}\n}\n```\nSet up stuff with the lifecycle functions\nOften you will want to use Stimulus to use third party JavaScript libraries with your code For example, to turn your\nnormal select form input into a fancy interactive field with autocompletion This means you want to execute\nsome JavaScript whenever you got such a field ```html\nPizza ```\nIn this situation you don't have a user do anything you could react to, as they probably just came from another page For\nthese situations you can use the lifecycle methods Stimulus We'll cover only the most important one for now: connect\n```javascript\nimport { Controller } from \"@hotwired/stimulus\"\nimport Choices from 'choices js'\nexport default class extends Controller {\nconnect() {\nnew Choices(this",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13572,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\stimulus_js.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "ad5574c03729c5583e0015e5118e1b93",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\stimulus_js.md",
    "source_type": "git_repo",
    "title": "stimulus_js",
    "content": "execute some JavaScript whenever you got such a field ```html Pizza ``` In this situation you don't have a user do anything you could react to, as they probably just came from another page For these situations you can use the lifecycle methods Stimulus We'll cover only the most important one for now: connect ```javascript import { Controller } from \"@hotwired/stimulus\" import Choices from 'choices js' export default class extends Controller { connect() { new Choices(thiselement)\n}\n}\n```\nSo connect is a special function that gets called whenever an element with the data-controller=\"controller-name\"\nappears in the DOM So it's the perfect solution to change things about the HTML that just appeared on the page A little hint on things containing multiple words\nBecause Stimulus lives between HTML and JavaScript it can be a bit confusing to sort out how to name controllers, actions and target Some things use camelCase and some kebab-case This little snippet helps to figure out what you need:\n```html\n```\nSummary\nStimulus gives you a way to make your HTML more interactive, by using data attributes your HTML makes visible where\nyour JavaScript will interact with your HTML This was just a broad introduction; the assignments that follow will\ngo into more depth Assignment\n- Read the [Stimulus Handbook](https://stimulus hotwired dev/handbook/origin) to get an overview of how to code\nwith Stimulus - Watch this [Stimulus 2 0 Tutorial Video](https://www driftingruby com/episodes/the-stimulus-2-0-tutorial); it may give\nyou a bit of a feel on how to work with Stimulus controllers You can ignore the part about installation with Webpacker as\nwe will use the new Rails standard of using import maps - Make sure to also read the [Stimulus reference section](https://stimulus hotwired dev/reference/controllers), if you\nhaven't already Don't worry if not everything sticks, but you should know where to look up what you need Exercises\nTo practice you need to create a new standard Rails application Stimulus will be installed by default with Rails 7 0 Write some HTML that uses the example controller in app/javascript/controllers/hello_controller js\nCreate your own toggle controller and use it in your view It should be able to show/hide elements upon clicking a\nbutton Make sure your toggle controller is reusable",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13572,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\stimulus_js.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "cf4926e08554092e00478cefeda18da9",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\stimulus_js.md",
    "source_type": "git_repo",
    "title": "stimulus_js",
    "content": "not everything sticks, but you should know where to look up what you need Exercises To practice you need to create a new standard Rails application Stimulus will be installed by default with Rails 7 0 Write some HTML that uses the example controller in app/javascript/controllers/hello_controller js Create your own toggle controller and use it in your view It should be able to show/hide elements upon clicking a button Make sure your toggle controller is reusableTry to make it do the following things:\nClicking a button will show another element (like a dropdown menu)\nClicking an element will hide the clicked element and show another\nClicking a checkbox will highlight the element containing the checkbox\nWrite a controller for text inputs with a limited length Warn a user when they are close or over the maximum character\ncount (imagine a user writing a post which has a maximum length of 280 characters)\nProject:\nGo back to you Flight Booker project and improve it:\nAdd a controller that allows the user to add another passenger by clicking on an \"Add passenger\" button, which adds another set of fields to enter the passenger details (hint: have a look at the \\<template> tag) Allow to remove existing passengers by clicking a \"Remove\" button, which removes the one set of passenger fields (make sure submissions to the server still works as expected)\nPrevent removing the last set of passenger details Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge When do you use Stimulus How do you select a DOM element How do you make your Stimulus controllers reusable How do you trigger actions on an event Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Better Stimulus, a good resource that shows best practices around Stimulus\nStimulus Components, a collection of reusable Stimulus components",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13572,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\stimulus_js.md",
      "source_type": "git_repo"
    },
    "token_count": 402,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "ce58ac17bbd942e1e9dc5b60cc26045d",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\testing\\model_testing.md",
    "source_type": "git_repo",
    "title": "This will guess the User class",
    "content": "Introduction\nThe last lesson covered unit testing and now we will move into model testing Here you will get an idea of how to test within Rails for model testing as well as a deeper dive of how to structure these tests Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson What are model tests How do I run a model test How to structure model testing What are model tests A model test is a unit test in the context of Ruby on Rails When testing our models we usually want to focus on testing the business logic Essentially what goes on behind each model that enables the user experience to work correctly This could mean ensuring promotion tickets prices are correct, only correct form data is accepted, custom user verification etc It's important to note that each model should have it's own file in the spec/models file This is helpful for keeping your model tests organized and readable Setting the test\nThe first tool that we are going to go over for setting up the data is factory bot Factory bot is a gem that you can use to set up test data and create necessary data for your tests Adding Factory bot is similar to adding other testing gems Add the following line to the to the following section in your Gemfile ~~~\ngroup :development, :test do\ngem \"factory_bot_rails\"  #Add this line end\n~~~\nThen in your terminal enter bundle install to the terminal where it will install the gem Now we need to move into setting up our test configuration to utilize Factory bot First were going to navigate to spec/support/factory_bot rb and add the following configuration ~~~\nRSpec configure do |config|\nconfig include FactoryBot::Syntax::Methods\nend\n~~~\nMake sure to require this file in rails_helper rb While you can require the file by adding require support/factory_bot to the top of the file Rails also provides this in the commented out line Dir[Rails root join(\"spec/support/**/* rb\")] each { |f| require f } which enables you to load all of the support files when booting up This is useful for not having to manually add all of the support files and avoids issues if you forget to add a file for example The last thing you might be wondering is how the test database clears itself in between it's tests Rail's does this automatically for you, however if Rail's is not doing it for you make sure your following the instructions in the rails_helper rb file and make sure to ask in the Discord first",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6432,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\testing\\model_testing.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "524cfccba440a7a02e262a273e9fe6de",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\testing\\model_testing.md",
    "source_type": "git_repo",
    "title": "This will guess the User class",
    "content": "for not having to manually add all of the support files and avoids issues if you forget to add a file for example The last thing you might be wondering is how the test database clears itself in between it's tests Rail's does this automatically for you, however if Rail's is not doing it for you make sure your following the instructions in the rails_helper rb file and make sure to ask in the Discord firstIf you are interested, you can learn more about database cleaning in the additional resources Creating a factory\nBelow is an example of a user factory Notice that the factory will be a User class based off of the name of your factory You can also define as many attributes as you want and it can be useful to focus on adding only the attributes you are testing and adding them as need be ~~~\nThis will guess the User class\nFactoryBot define do\nfactory :user do\nfirst_name { \"John\" }\nlast_name  { \"Doe\" }\nadmin { false }\nend\nend\n~~~\nWhen creating a factory bot record you have the choice of using the create(:user) which returns a saved instance of the object from your database or build(:user) which returns an unsaved instance of an object Example model test\nIn the following example one of the things we often see when users sign up is that sites will ask for an email to send a user notifications for example RSpec can help you test this by utilizing model tests Let's take a look at what a requiring the presence of a user email would look like in a model and the corresponding tests ~~~\nclass User < ApplicationRecord\nvalidates :email, presence: true\nend\n~~~\nIn the above code validates will check for the presence of the email By using validates the model will check the following conditions which in this case is that the email is present when the record is created That then brings us to the following RSpec test where we will write the context and what we expect the outcome to be ~~~\nRSpec describe User, type: :model do\ndescribe '#valid ' do\ncontext \"when the user does not have an email address\" do\nuser =  build(:user)\nit \"will not be valid\" do\nexpect(user valid ) to be false\nend\nend\ncontext \"when the user has an email address\" do\nuser =  build(:user, email_address: \"jdoe@example com\")\nit \"will be valid\" do\nexpect(user valid )",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6432,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\testing\\model_testing.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "406363229aeb0574b34eea96005c4a8c",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\testing\\model_testing.md",
    "source_type": "git_repo",
    "title": "This will guess the User class",
    "content": "where we will write the context and what we expect the outcome to be ~~~ RSpec describe User, type: :model do describe '#valid ' do context \"when the user does not have an email address\" do user = build(:user) it \"will not be valid\" do expect(user valid ) to be false end end context \"when the user has an email address\" do user = build(:user, email_address: \"jdoe@example com\") it \"will be valid\" do expect(user valid )to be true\nend\nend\nend\nend\n~~~\nOne thing to note is that we have two tests We want to test both the successful conditions while having a separate test for rejecting the invalid condition The other thing to note is that you can set attributes when creating a factory record as well rather than going back to the factory file The Factory bot repository has excellent information for diving in deeper and it's highly recommended to read through it to understand factory bot better Knowledge Check\nThis section contains questions for you to check your understanding of this lesson on your own If you’re having trouble answering a question, click it and review the material it links to What are model tests How would I create a factory to use in my tests What are some examples of testing business logic Additional Resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental For an example of a model test and having a useful resource You can visit code with Jason For an alternative if RSpecs built in database cleaner isn't working for testing You can find it here A resource for going over some of the best practices for tests",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6432,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\testing\\model_testing.md",
      "source_type": "git_repo"
    },
    "token_count": 329,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "5341475034c3a44c6c042c62428eb1cc",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\testing\\unit_testing.md",
    "source_type": "git_repo",
    "title": "unit_testing",
    "content": "Introduction\nYou may remember testing from the Ruby section and the emphasis on the importance of testing Similar to that section, testing in Ruby on Rails is important to ensure your application is stable and to catch bugs before you expand your application even more The first kind of testing that we will cover will be unit tests Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson What are unit tests Why are unit tests important Unit tests in the context of Ruby on Rails What are unit tests A unit test is testing a single unit of code to ensure that method/unit works as it is supposed to In Ruby on Rails your models are one of the areas that should be covered with unit tests These model tests specifically are used to test the logic behind your model objects This can include validating user inputs from form submissions and other logic between models Such as if you need to ensure your object method for generating discounts work properly It's important as you scale your projects to ensure that the logic behind your models works as your project consistently expands This helps make the project more maintainable as the tests provide a safety net to ensure existing functionality continues working as expected when models need to be expanded or modified Earlier you used RSpec for testing projects in the Ruby section While Ruby on Rails comes with it's own testing framework RSpec is a very popular framework for testing even in Ruby on Rail's As such we will be using RSpec for the Ruby on Rails testing section Setting up RSpec\nInstalling RSpec for rails is a relatively straightforward task First we add it the development and test group of the gemfile Navigate to the gemfile and add this to the development/test section ~~~\ngroup :development, :test do\ngem 'rspec-rails'\nend\n~~~\nNext visit the rspec-rails installation guide to finish the rest of the steps Afterwards you will see an additional spec folder on the top level of your project There you will find different folders for different areas of your application such as controllers, models, system, etc When you use the command to generate a model, controller, etc The spec file will be created in the corresponding folder to the object that you created If you create a spec file manually, make sure you're creating it in the correct folder, such as a controller spec file within the controller folder There will also be a rails_helper and spec_helper files These RSpec files are where you can configure your test environment Example test\nEach model should have it's own spec file within the spec/models folder",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4349,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\testing\\unit_testing.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "02b646db0ed57f8e4ee0f07e7cc5659a",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\testing\\unit_testing.md",
    "source_type": "git_repo",
    "title": "unit_testing",
    "content": "The spec file will be created in the corresponding folder to the object that you created If you create a spec file manually, make sure you're creating it in the correct folder, such as a controller spec file within the controller folder There will also be a rails_helper and spec_helper files These RSpec files are where you can configure your test environment Example test Each model should have it's own spec file within the spec/models folderThis will be created when you use the following command ~~~\nrails generate model\n~~~\nHere is an example of what a test should look like You can find an additional example and other helpful information on the rspec-rails gem repository ~~~\nRSpec describe 'Post' do\ncontext 'before publication' do  # Explains the context it 'cannot have comments' do   # This is the outome we expect expect { Post create comments create } to raise_error(ActiveRecord::RecordInvalid)\n# Now we should expect RSpec to notify us that the test passed end\nend\nend\n~~~\nKnowledge Check\nThis section contains questions for you to check your understanding of this lesson on your own If you’re having trouble answering a question, click it and review the material it links to What are unit tests Why utilize unit tests How would I test if a post doesn't accept comments Additional Resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental For an example of a model test and having a useful resource You can visit code with Jason",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4349,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\testing\\unit_testing.md",
      "source_type": "git_repo"
    },
    "token_count": 303,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "cfeaecaa1b015a70a97eab5caa61b6a7",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\turbo.md",
    "source_type": "git_repo",
    "title": "with a block",
    "content": "Introduction\nWhen a user makes a request to your application, your controller is the part of MVC that receives it and responds with the html erb view file As you've been working on your applications so far, you may have been creating views with similar features and layouts What if there was a way to only change the parts of our views that are different and not have to bother with updating content that we don't intend to change in the first place We could cut down on loading times for the user and the amount of data our application has to send out That's where the concept of a single-page application comes in This section will be about how we can use a framework known as Turbo to implement single-page application behaviour in our very own Rails application This section covers a lot of tools and you may not fully understand them as you read through the first time That's okay, consider this lesson to be a resource that you can refer back to when you actually begin using the  tools mentioned and get more of a visual as to what exactly is going on in your views Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson What an SPA is What Hotwire is Turbo and the four components of it When to use a Turbo Frame How to use Turbo Streams to update your pages What Turbo Native is used for Single-page applications (SPAs)\nBefore getting into Turbo, it's important to understand the concept of a single-page application, or SPA A SPA is an\nimplementation for web applications that loads only a single web document Rather than constantly replacing this document with a brand new one on every request, the website dynamically rewrites the current page with new information so that the page loads faster and feels more like a native application A page refresh never occurs Think about websites such as Gmail or Facebook where you see a brand-new email or timeline post without needing to refresh your page Creating a Single-page application in Rails\nThere are various JavaScript frameworks to help developers implement SPA functionality You have possibly heard of some of them, such as AngularJS or ReactJS However, Rails has its own solution to creating the experience of a SPA without writing JavaScript This solution is a collection of libraries that are under the umbrella of Hotwire Hotwire\nIn Rails 7, all new applications include Hotwire by default Hotwire is actually an umbrella term for three different frameworks These frameworks are:\nTurbo\nStimulus\nStrada\nThe lesson you are reading now is all about Turbo",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20583,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\turbo.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 11
  },
  {
    "id": "a5c3394e2b983e0fc176c85914e82f28",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\turbo.md",
    "source_type": "git_repo",
    "title": "with a block",
    "content": "of some of them, such as AngularJS or ReactJS However, Rails has its own solution to creating the experience of a SPA without writing JavaScript This solution is a collection of libraries that are under the umbrella of Hotwire Hotwire In Rails 7, all new applications include Hotwire by default Hotwire is actually an umbrella term for three different frameworks These frameworks are: Turbo Stimulus Strada The lesson you are reading now is all about TurboWe will cover Stimulus in another lesson Strada is a currently unreleased framework that aims to work alongside Turbo to deliver responsive mobile applications You don't need to worry about Strada for the scope of this course, just be familiar with the name as you will see it mentioned from time-to-time Turbo\nTurbo is the heart of the Hotwire umbrella The goal of Turbo is to use four different techniques to create the experience of a speedy SPA without having to write any JavaScript Here is a quick summary of the four Turbo techniques together As you continue to read this lesson, we will look at each piece more in-depth\nTurbo Drive: We already covered this in an earlier lesson Turbo Frames: Turbo Frames, like Turbo Drive, also help with fast navigation, but for predefined portions of a page Rather than requesting an entire page, you can define a region of your HTML as a Turbo Frame and replace only the content inside of that region Turbo Streams: Turbo Stream delivers web page changes to instantly insert, update, or remove a region of the webpage An example of this could be a user creating a new post and that post immediately inserts itself at the top of the post index feed without any refresh or redirection Turbo Native: Turbo Native is a technique that allows developers to achieve the same Turbo style transitions on a mobile app for iOS or Android Turbo Frames\nCreating a frame\nImagine a piece of paper and cutting out a small square hole in it You could change what you see through the hole by swapping out another piece of paper behind it, but the rest of the paper will always look the same That's the idea of Turbo Frames Turbo Frames allow us to predefine a portion of our page to be replaced during a request Any links or forms inside of our frame will make a special request that results in only changing the frame A page can also have multiple Turbo Frames A frame is designated by wrapping a region inside of a <turbo-frame> element Rails has a special helper for this, <%= turbo_frame_tag %>",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20583,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\turbo.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 11
  },
  {
    "id": "cd62d6bc8d6995cc144e2e06ae8877f4",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\turbo.md",
    "source_type": "git_repo",
    "title": "with a block",
    "content": "the same That's the idea of Turbo Frames Turbo Frames allow us to predefine a portion of our page to be replaced during a request Any links or forms inside of our frame will make a special request that results in only changing the frame A page can also have multiple Turbo Frames A frame is designated by wrapping a region inside of a <turbo-frame> element Rails has a special helper for this, <%= turbo_frame_tag %>A basic Turbo Frame, using Rails helpers, may look like so:\n```erb\nwith a block\n<%= turbo_frame_tag \"article\" do %>\nSome content\n<% end %>\nwithout a block (typically this is used as a placeholder element to be filled later)\n<%= turbo_frame_tag \"article\" %>\n```\nwhich will generate:\n```html\nwith a block\nSome content\nwithout a block\n```\nNote that the frames have an ID The ID is how Turbo is able to identify a frame to find out which one is which With the Turbo Frame helper, you can substitute the ID for a variable For instance:\nerb\n<% @articles each do |article| %>\n<%= turbo_frame_tag article do %>\n<%= article title %>\n<% end %>\n<% end %>\nThe above example will generate a turbo frame for every article Each frame will have a unique id like article_1 or article_2 and all we had to include was our article variable Connecting to other frames\nNow that we have our first frame, we can replace its content with a link that requests new frame content All we have to do is put a link inside of the Turbo Frame, where the requested view also includes a Turbo frame with the same ID Let us replace the /show view with the /edit view on an article:\n```erb\nviews/articles/show html erb <%= turbo_frame_tag @article do %>\nContent for our article <%= link_to \"Edit Article\", edit_article_path(@article) %>\n<% end %> ```\n```erb\nviews/articles/edit html erb <%= turbo_frame_tag @article do %>\nForm to edit the article\n<%= link_to \"Return to Article\", @article %>\n<% end %> ```\nThat's all we have to do Turbo will recognize that our destination URL, the /show or /edit page, has a matching Turbo Frame and will replace the frame region with the content from the new page's frame",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20583,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\turbo.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 2,
    "total_chunks": 11
  },
  {
    "id": "6457e1dec191e4434a33083df9267671",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\turbo.md",
    "source_type": "git_repo",
    "title": "with a block",
    "content": "Content for our article <%= link_to \"Edit Article\", edit_article_path(@article) %> <% end %> ``` ```erb views/articles/edit html erb <%= turbo_frame_tag @article do %> Form to edit the article <%= link_to \"Return to Article\", @article %> <% end %> ``` That's all we have to do Turbo will recognize that our destination URL, the /show or /edit page, has a matching Turbo Frame and will replace the frame region with the content from the new page's frameSomething else to note is that this does work with forms as well In our controller, if the update action contains redirect_to @article, then our Turbo Frame will be updated when we submit our form just like if we clicked a link Now that we have our matching frames that can replace their content, what about the content located outside of the frame Anything outside of the frame does not change If we were going from /show to /edit, then the content outside of the frame would still be the same content of the /show page and we would not receive any content from outside of the /edit frame either We did not navigate to a new page, we only requested new HTML from another route and inserted it into our current page The current url also does not change We will stay on the /show path, and if we refresh, we would still see the /show view (Note that it is possible to change this default behaviour by making use of Turbo Drive's data-turbo-action to advance the browser history and update the current url )\nBreaking out of a Turbo Frame\nSometimes you may have a link inside of the Turbo Frame that you want to act as a normal page navigation To do so, add data-turbo-frame=\"_top\" to the element An example with a Rails link helper:\nerb\n<%= link_to \"Return to Article\", @article, data: { turbo_frame: \"_top\" } %>\nTargeting a Turbo Frame from outside\nWe can also do the opposite We can make a link that exists outside of our Turbo Frame act as if it was inside of the Frame and update it This time, we set the turbo-frame data attribute to point to the ID of the specific frame",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20583,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\turbo.md",
      "source_type": "git_repo"
    },
    "token_count": 442,
    "chunk_index": 3,
    "total_chunks": 11
  },
  {
    "id": "c5c10122bb3219ce13fe410192fd44bd",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\turbo.md",
    "source_type": "git_repo",
    "title": "with a block",
    "content": "to the element An example with a Rails link helper: erb <%= link_to \"Return to Article\", @article, data: { turbo_frame: \"_top\" } %> Targeting a Turbo Frame from outside We can also do the opposite We can make a link that exists outside of our Turbo Frame act as if it was inside of the Frame and update it This time, we set the turbo-frame data attribute to point to the ID of the specific frameLets say we want to designate a turbo frame to show either a list of posts or a list of images:\n```erb\n<%= link_to \"Show Posts\", posts_path, data: { turbo_frame: \"list-region\" } %>\n<%= link_to \"Show Images\", images_path, data: { turbo_frame: \"list-region\" } %>\n<%= turbo_frame_tag \"list-region\" %>\n```\nClicking either of the above links will send a request to the respective path and return the content inside of our \"list-region\" frame Src & lazy loading\nFrames can be given a src attribute When this is supplied, the frame will be populated after the initial page load by making a separate request to the associated path We can also wrap placeholder content inside of this src frame to create a skeleton placeholder For example:\n```erb <%= turbo_frame_tag \"Articles\", src: articles_path do %>\nI am a placeholder After the request to articles_path is finished,\nI will be replaced with the content inside of that page's turbo frame\nwith the id of \"Articles\" <% end %>\n```\nWe can also make our frames lazy loaded A lazy loaded frame will only fetch its content when it becomes visible on the page We make a frame lazy load by adding loading=lazy A frame with loading=lazy must also have a src: attribute to fetch from, or else it will not do anything Using our previous example:\n```erb <%= turbo_frame_tag \"Articles\", src: articles_path, loading: \"lazy\" do %>\nI am a placeholder I will be replaced when a user scrolls down to see me on the page <% end %>\n```\nTurbo Stream\nNow we know how to set up our views to use Turbo Frames, but what about content that is being changed by our users We can't put a Turbo Frame around something that doesn't exist yet That's where Turbo Stream comes in Turbo Streams send page changes as HTML wrapped in <turbo-stream> elements",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20583,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\turbo.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 4,
    "total_chunks": 11
  },
  {
    "id": "455bddb58035c3b03b61f6356c5ac393",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\turbo.md",
    "source_type": "git_repo",
    "title": "with a block",
    "content": "a placeholder I will be replaced when a user scrolls down to see me on the page <% end %> ``` Turbo Stream Now we know how to set up our views to use Turbo Frames, but what about content that is being changed by our users We can't put a Turbo Frame around something that doesn't exist yet That's where Turbo Stream comes in Turbo Streams send page changes as HTML wrapped in <turbo-stream> elementsTurbo Streams specify an action to perform and the target ID of the DOM element to update with this action For instance, a Turbo Stream where action=\"replace\" and target=\"body\" would replace the HTML element where id=\"body\" with the new element being delivered over Turbo Stream These streams can be sent in response to either a direct browser request, or by broadcasting over a websocket connection This lesson will stick to the browser request implementation Turbo Streams can take the form of 7 different actions:\nAppend\nPrepend\nBefore\nAfter\nReplace\nUpdate\nRemove\nTurbo Streams are delivered by use of our controller Just like how your users make html requests and receive view html erb files, your users can receive view turbo_stream erb files These are not standalone view files as you know them, they only contain a few lines and are a way of sending the user a Stream response instead of a new page Our first Turbo Stream\nLet's say that we have made a website where users can create posts By adding a turbo_frame with a src: attribute that points to our new_post_path, and our new post view being wrapped in a turbo_frame_tag with a matching id, we can include our new action form on the same page as our index feed It may look something like this Our index view:\n```erb\nviews/posts/index html erb\n<%= turbo_frame_tag \"new_post\", src: new_post_path %>\n<%= render @posts %>\n```\nOur new page with it's form:\n```erb\nviews/posts/new html erb\n<%= turbo_frame_tag \"new_post\" do %>\n<%= form_with model: @post do |form| %>\n<%= form label :body %>\n<%= form text_area :body %>\n<%= form submit %>\n<% end %>\n<% end %>\n```\nOur _post partial that every post will be rendered with:\n```erb\nviews/posts/_post html erb\n<%= post body %>\n```\nOur controller:\n```ruby\ncontrollers/posts_controller",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20583,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\turbo.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 5,
    "total_chunks": 11
  },
  {
    "id": "9da0f8c833a05a5fb331c08d82cd262e",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\turbo.md",
    "source_type": "git_repo",
    "title": "with a block",
    "content": "turbo_frame_tag \"new_post\", src: new_post_path %> <%= render @posts %> ``` Our new page with it's form: ```erb views/posts/new html erb <%= turbo_frame_tag \"new_post\" do %> <%= form_with model: @post do |form| %> <%= form label :body %> <%= form text_area :body %> <%= form submit %> <% end %> <% end %> ``` Our _post partial that every post will be rendered with: ```erb views/posts/_post html erb <%= post body %> ``` Our controller: ```ruby controllers/posts_controllerrb\nclass PostsController < ApplicationController\ndef index\n@posts = Post all\nend\ndef new\n@post = Post new\nend\ndef create\n@post = Post new(post_params)\nif @post save\nredirect_to posts_path\nelse\nrender :new\nend\nend\nprivate\ndef post_params\nparams expect(post: [:body])\nend\nend\n```\nThis will result in only the posts#index page loading initially and then another request being made to the posts#new action of our controller to insert the form This also keeps our code DRY because if instead we opted to add the form by use of a partial on the index page, we would still have to repeat the posts#new controller action during the posts#index action However, if a user is to submit a post right now, something weird happens The form window goes away, but there's no error Where did the post go When we refresh the page, we see that the post did submit What's happening here is that Rails doesn't know you are going to want a Turbo Stream so it can't automatically add your post yet Instead it tries to redirect you to the page you are already on Turbo Drive intercepts this and loads a cached version of the page, which does not have our form content in it, so the form goes away All of this looks very scary and like something is wrong, but it's fine All we have to do is set up our Turbo Stream and the pieces will all begin to work together again Turbo Stream in the controller\nFor starters, we tell our controller that we want to accept a Turbo Stream format This is done in the same way as accepting a format such as JSON Our create action may now look like:\n```ruby\ncontrollers/posts_controller rb def create\n@post = Post new(post_params)\nrespond_to do |format|\nif @post save\nformat",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20583,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\turbo.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 6,
    "total_chunks": 11
  },
  {
    "id": "2701e1330ea50a277fc71c4374f9969d",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\turbo.md",
    "source_type": "git_repo",
    "title": "with a block",
    "content": "have to do is set up our Turbo Stream and the pieces will all begin to work together again Turbo Stream in the controller For starters, we tell our controller that we want to accept a Turbo Stream format This is done in the same way as accepting a format such as JSON Our create action may now look like: ```ruby controllers/posts_controller rb def create @post = Post new(post_params) respond_to do |format| if @post save formatturbo_stream\nelse\nformat html { render :new, status: :unprocessable_entity }\nend\nend\nend\n```\nWhat's going on here Well, the respond_to do |format| block is our way of telling the controller to do more than just html format requests If our post saves, we would like the format we respond with to be a create turbo_stream erb format If it does not save, we would like to respond with the new html erb file being rendered Notice the difference in the formats is the file extension that is after the name and before the erb We include the 422 Unprocessable Entity error code with our response upon an unsaved post so that Turbo Drive knows what to do with it and our form window won't disappear anymore Now all we have to do is create our create turbo_stream erb file to respond with Turbo Stream template\nYou create your Turbo Stream file inside of your views folder the same way as any other view In this example, it would be located at views/posts/create turbo_stream erb Our view file will look like this:\nerb\n<%= turbo_stream append \"posts\", @post %>\nThat line is all we need What this does is create a Turbo Stream packet with the append action The target of the action is \"posts\" This is the <div> with the id=\"posts\" that contains all of our posts Turbo Stream will locate the <div> and append our brand new @post to the bottom Our newly created @post will even use the _post html erb partial to be in the proper layout as all of our other posts For that, you can thank the Rails naming convention If you are breaking from Rails convention, you can specify a partial to use inside of your turbo_stream template Now that we have added the format turbo_stream response to our controller and our create turbo_stream erb file, we can now create a post and watch it append to the list",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20583,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\turbo.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 7,
    "total_chunks": 11
  },
  {
    "id": "e4d1cd1d7963cd62ca2776376ff20030",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\turbo.md",
    "source_type": "git_repo",
    "title": "with a block",
    "content": "the _post html erb partial to be in the proper layout as all of our other posts For that, you can thank the Rails naming convention If you are breaking from Rails convention, you can specify a partial to use inside of your turbo_stream template Now that we have added the format turbo_stream response to our controller and our create turbo_stream erb file, we can now create a post and watch it append to the listAdditional Turbo Stream tips\nThere's no time to get more in-depth on how Turbo Stream works in this lesson, but here are some topics for you to begin your personal research\nif you would like to learn more:\nYou can chain multiple turbo_stream actions in one turbo_stream erb file, like if you wanted to append to one region and\nupdate another region at the same time You don't have to create a separate layout file for your Stream formats For instance, we could instead change the line in our controller to:\nruby\nformat turbo_stream { render turbo_stream: turbo_stream append('posts', @post) }\nHowever, you shouldn't do this for anything complex or chained You may have noticed that when you submit a new Post, the text box doesn't clear out You need to reset the submission element in order for it to be empty again Hotwire has a remedy for this problem by including Stimulus, a light JavaScript framework Don't worry about Stimulus for this example though, the next lesson will cover how to write and make use of Stimulus Controllers Turbo Native\nThe final piece of Turbo is something that you don't need to know much about for this course, other than it exists Turbo Native is useful for wrapping your application inside of a mobile-friendly shell If you are interested in mobile development and how you can use Turbo with it, you may enjoy looking at the demos for iOS and Android phones Assignment\n1 Read sections 1, 2, and 3 of Bloomreach's [What Are Single Page Applications and Why Do People Like Them So Much ](https://www bloomreach com/en/blog/what-is-a-single-page-application) article\n1 Watch the [Hotwire Demo Video](https://www youtube com/watch v=eKY-QES1XQQ)\n- We have only covered content up until the 5:40 mark, but you may continue watching past that point to become more familiar with other aspects of Hotwire that we will be covering in upcoming lessons - The video is edited to be a very quick showcase",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20583,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\turbo.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 8,
    "total_chunks": 11
  },
  {
    "id": "a6fad365e09279e7a2e472c0f0be85b7",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\turbo.md",
    "source_type": "git_repo",
    "title": "with a block",
    "content": "3 of Bloomreach's [What Are Single Page Applications and Why Do People Like Them So Much ](https://www bloomreach com/en/blog/what-is-a-single-page-application) article 1 Watch the [Hotwire Demo Video](https://www youtube com/watch v=eKY-QES1XQQ) - We have only covered content up until the 5:40 mark, but you may continue watching past that point to become more familiar with other aspects of Hotwire that we will be covering in upcoming lessons - The video is edited to be a very quick showcaseDon't worry about trying to pause and use this video as a tutorial Just sit back and use this demo to watch how Turbo Drive, Frames, & Streams come together visually 1 Skim through sections 1-4 of the [Turbo Handbook](https://turbo hotwired dev/handbook/introduction)\n- This Handbook is written to be backend-agnostic, meaning that the code you will see is pure HTML and not Rails tags, but it still is a useful resource for referencing how Turbo works 1 Take a quick glance at the Turbo-Rails gem [RubyDoc info page](https://www rubydoc info/gems/turbo-rails/1 0 0)\n- This resource covers the Rails-specific syntaxes and tags you can use for Turbo You don't need to read anything now, just know that it exists so you can come back to it when you need to figure out how to use a specific piece of Turbo in your applications Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What does SPA stand for and what is it What is Hotwire How do we use a Turbo Frame How do we set up Turbo Streams Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Turbo Reference Information\nCheck out this tutorial on Turbo Frames and Turbo Stream to build a quotes editor To get started right away, enter in command line rails new quote-editor;cd quote-editor;rails g scaffold quote name:string and then rails db:migrate Official Hotwire Forums\nRemember you can use your browser developer tools to watch network activity and see what is happening with your Turbo requests and responses If something doesn't work, check to see if your browser received a Rails error message",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20583,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\turbo.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 9,
    "total_chunks": 11
  },
  {
    "id": "1de9c4cac044ff55f41eeaf027fd1943",
    "source_file": "corpus\\git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\turbo.md",
    "source_type": "git_repo",
    "title": "with a block",
    "content": "out this tutorial on Turbo Frames and Turbo Stream to build a quotes editor To get started right away, enter in command line rails new quote-editor;cd quote-editor;rails g scaffold quote name:string and then rails db:migrate Official Hotwire Forums Remember you can use your browser developer tools to watch network activity and see what is happening with your Turbo requests and responses If something doesn't work, check to see if your browser received a Rails error messageLook for a red font",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20583,
      "relative_path": "git_repos\\odin-project\\ruby_on_rails\\rails_sprinkles\\turbo.md",
      "source_type": "git_repo"
    },
    "token_count": 94,
    "chunk_index": 10,
    "total_chunks": 11
  },
  {
    "id": "69cadb64255c67ff0c129acf030f5a31",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\advanced_ruby\\blocks.md",
    "source_type": "git_repo",
    "title": "Single-line block",
    "content": "Introduction\nYou are already familiar with Ruby blocks from the Basic Enumerable Methods lesson from earlier But there is more depth to blocks than we've covered, so this lesson will dive deeper Blocks are such a fundamental part of Ruby that you should get to know them inside out A very quick recap of the basics that you should already be familiar with A block can be declared as a single-line or multi-line block Ruby convention is to use {} for single-line blocks and do end for multi-line blocks You can pass parameters to a block by defining them inside pipes, i e |arg1, arg2| You'll already know both forms from working with enumerable methods ```ruby\nSingle-line block\n[1,2,3] each { |num| puts num }\nMulti-line block\n[1,2,3] each do |num|\nputs num\nend\n```\nAlthough you are familiar with how to write blocks in the context of enumerable methods, there are actually other interesting ways to use them in Ruby For example, you can write your own methods that accept blocks and even store blocks as variables By the end of this lesson, you'll have a newfound appreciation for the mighty block Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Explain what a block is Describe the similarities between blocks and methods Describe the two ways to declare a block Explain why you would decide to use a block instead of a method Explain yield Explain how arguments are passed to a block from within a method Explain how to check whether a block has been passed to a method Describe procs Describe lambdas Explain the differences and similarities between blocks, procs, and lambdas Yield\nyield is a keyword that can be called inside a method to relinquish execution to the accompanying block Let's imagine you're writing a simple method for your library which allows users of that library to log some information to the terminal The one key requirement you have is that users should be able to define how that information is presented Sometimes they may just want to puts something, other times they may want to inspect something with p If you tried to write this using only a method, it would actually be quite difficult You'd have to account for every possible option the user of your library might want to call and then create the docs to explain it With blocks, we can just relinquish control of the method to the block with yield and allow the user to define how they want to print it",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23471,
      "relative_path": "git_repos\\odin-project\\ruby\\advanced_ruby\\blocks.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 13
  },
  {
    "id": "b65dd4aabfea8a1b21222bd7b6d3d829",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\advanced_ruby\\blocks.md",
    "source_type": "git_repo",
    "title": "Single-line block",
    "content": "they may want to inspect something with p If you tried to write this using only a method, it would actually be quite difficult You'd have to account for every possible option the user of your library might want to call and then create the docs to explain it With blocks, we can just relinquish control of the method to the block with yield and allow the user to define how they want to print it```ruby\ndef logger\nyield\nend\nlogger { puts 'hello from the block' }\n=> hello from the block\nlogger do\np [1,2,3]\nend\n=> [1,2,3]\n```\nThis example isn't that interesting, but hopefully you should see that blocks allow huge flexibility in how methods act upon data Let's see if we can make it more interesting Now your users want a method that allows them to write whatever they want, and it gets printed twice to the terminal How might you handle this requirement With yield, it's easy You can call yield within a method as many times as you want, and it will behave the same way each time ```ruby\ndef double_vision\nyield\nyield\nend\ndouble_vision { puts \"How many fingers am I holding up \" }\n=> How many fingers am I holding up => How many fingers am I holding up ```\nMillennial avocados, Batman That's cool We mentioned earlier that blocks can accept arguments But how do you pass them to the block No problem Just pass them as arguments to yield, and they'll be passed to the block as parameters If you call yield more than once, you can pass a different argument each time if you wanted to ```ruby\ndef love_language\nyield('Ruby')\nyield('Rails')\nend\nlove_language { |lang| puts \"I love #{lang}\" }\n=> I love Ruby => I love Rails ```\nHow might this be useful Say you're creating a banking app that allows a bank to print a list of transactions to a statement For our example we'll use the terminal, but it could be a spreadsheet or anything You have an issue, though You want your app to work for any bank, but different banks want to print the transactions with different formats How can you design it so that each bank can choose a different format, but you only have to write the code once We can combine the power of yield with the #each enumerable method",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23471,
      "relative_path": "git_repos\\odin-project\\ruby\\advanced_ruby\\blocks.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 1,
    "total_chunks": 13
  },
  {
    "id": "3dbbe3861925bcdeeda2901bdd5c2980",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\advanced_ruby\\blocks.md",
    "source_type": "git_repo",
    "title": "Single-line block",
    "content": "statement For our example we'll use the terminal, but it could be a spreadsheet or anything You have an issue, though You want your app to work for any bank, but different banks want to print the transactions with different formats How can you design it so that each bank can choose a different format, but you only have to write the code once We can combine the power of yield with the #each enumerable methodIn the example below, we write a method that iterates through a list of transactions, and for each one yields it to a block The caller of the method (the bank) can call it with any block they want This way, they can define how the transactions will be printed to their statement, and you can focus on delivering bug-free banking transactions ```ruby\n@transactions = [10, -15, 25, 30, -24, -70, 999]\ndef transaction_statement\n@transactions each do |transaction|\nyield transaction # You just yield the transaction amount end\nend\ntransaction_statement do |transaction|\np \"%0 2f\" % transaction # The bank that calls the method can define how it is handled end\n=> [\"10 00\", \"-15 00\", \"25 00\", \"30 00\", \"-24 00\", \"-70 00\", \"999 00\"]\n```\nIf another bank wanted to print their transactions another way it's no problem, they can supply their own block What if instead you didn't want the caller to define how the transaction is printed, but just the format Like any method call in Ruby, blocks have a return value So when you call yield, it returns the last executed value from the block Using the example above, if you instead moved the p from the block to inside the #each call, your method would be in control of how the transactions were printed Maybe you only allow exporting to a csv for example ```ruby\n@transactions = [10, -15, 25, 30, -24, -70, 999]\ndef transaction_statement\n@transactions each do |transaction|\np yield transaction # p is called within our method now instead of within the block\nend\nend\ntransaction_statement do |transaction|\n\"%0 2f\" % transaction\nend\n=> [\"10 00\", \"-15 00\", \"25 00\", \"30 00\", \"-24 00\", \"-70 00\", \"999",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23471,
      "relative_path": "git_repos\\odin-project\\ruby\\advanced_ruby\\blocks.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 2,
    "total_chunks": 13
  },
  {
    "id": "c3357288354ab667f88c2e2fc9c9325b",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\advanced_ruby\\blocks.md",
    "source_type": "git_repo",
    "title": "Single-line block",
    "content": "would be in control of how the transactions were printed Maybe you only allow exporting to a csv for example ```ruby @transactions = [10, -15, 25, 30, -24, -70, 999] def transaction_statement @transactions each do |transaction| p yield transaction # p is called within our method now instead of within the block end end transaction_statement do |transaction| \"%0 2f\" % transaction end => [\"10 00\", \"-15 00\", \"25 00\", \"30 00\", \"-24 00\", \"-70 00\", \"99900\"]\n```\nIf you want to gather the value returned from the block, you can just assign it to a variable or collect it in a data structure ```ruby\n@transactions = [10, -15, 25, 30, -24, -70, 999]\ndef transaction_statement\nformatted_transactions = []\n@transactions each do |transaction|\nformatted_transactions << yield(transaction)\nend\np formatted_transactions\nend\ntransaction_statement do |transaction|\n\"%0 2f\" % transaction\nend\n=> [\"10 00\", \"-15 00\", \"25 00\", \"30 00\", \"-24 00\", \"-70 00\", \"999 00\"]\n```\nYou can also write explicit return statements from a block This works the same way as an explicit return works in a method This might be useful if you need some kind of guard clause In the above examples, the value that we yield to the block in transaction_statement is captured by the block and assigned to the named parameter (the variable inside the pipes, in this case |transaction|) This works the same way it does in enumerable methods like #each and #map If you don't pass a value with yield and the block expects one, then the argument is assigned nil ```ruby\ndef say_something\nyield # No arguments are passed to yield\nend\nsay_something do |word| # But the block expects one argument to be passed in\nputs \"And then I said: #{word}\"\nend\n=> And then I said:\n```\nIf you have two parameters but pass 3 arguments, then the last one is not assigned to a parameter and you can't reference it in the block",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23471,
      "relative_path": "git_repos\\odin-project\\ruby\\advanced_ruby\\blocks.md",
      "source_type": "git_repo"
    },
    "token_count": 465,
    "chunk_index": 3,
    "total_chunks": 13
  },
  {
    "id": "9d150ed3a8033c723b774a4cb81664e3",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\advanced_ruby\\blocks.md",
    "source_type": "git_repo",
    "title": "Single-line block",
    "content": "the block expects one, then the argument is assigned nil ```ruby def say_something yield # No arguments are passed to yield end say_something do |word| # But the block expects one argument to be passed in puts \"And then I said: #{word}\" end => And then I said: ``` If you have two parameters but pass 3 arguments, then the last one is not assigned to a parameter and you can't reference it in the block```ruby\ndef mad_libs\nyield('cool', 'beans', 'burrito') # 3 arguments are passed to yield\nend\nmad_libs do |adjective, noun| # But the block only takes 2 parameters\nputs \"I said #{adjective} #{noun} \"\nend\n=> I said cool beans ```\nIf you're working with hashes you might need to yield the key and value, just make sure your block names two parameters ```ruby\ndef awesome_method\nhash = {a: 'apple', b: 'banana', c: 'cookie'}\nhash each do |key, value|\nyield key, value\nend\nend\nawesome_method { |key, value| puts \"#{key}: #{value}\" }\n=> a: apple\n=> b: banana\n=> c: cookie\n```\nWe'll end our exploration of yield by posing a question What happens if you call yield, but the calling method doesn't include a block We'll cover that in the next section Block control\nOftentimes, the person who writes a method and the person who calls a method are different people If you're writing a method that uses yield, how can you be sure the caller will include a block What happens if they don't ```ruby\ndef simple_method\nyield\nend\nsimple_method\n=> `simple_method': no block given (yield) (LocalJumpError)\n```\nYep, an error So how can you write a method that works whether or not the caller passes a block to it Enter block_given You can use this method as a conditional check inside your own method to see if a block was included by the caller If so, block_given returns true, otherwise it returns false This lets you write your method so that it behaves differently depending on whether or not it receives a block ```ruby\ndef maybe_block\nif block_given",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23471,
      "relative_path": "git_repos\\odin-project\\ruby\\advanced_ruby\\blocks.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 4,
    "total_chunks": 13
  },
  {
    "id": "19deca4ed0fe2d6c5418a24b0bcbc7cc",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\advanced_ruby\\blocks.md",
    "source_type": "git_repo",
    "title": "Single-line block",
    "content": "can you write a method that works whether or not the caller passes a block to it Enter block_given You can use this method as a conditional check inside your own method to see if a block was included by the caller If so, block_given returns true, otherwise it returns false This lets you write your method so that it behaves differently depending on whether or not it receives a block ```ruby def maybe_block if block_givenputs \"block party\"\nend\nputs \"executed regardless\"\nend\nmaybe_block\n=> executed regardless\nmaybe_block {} # {} is just an empty block\n=> block party\n=> executed regardless\n```\nYou may have already come across this in some of the enumerables #count is a method that can be called with or without a block If called without an argument, it just returns the size of whatever it was called on When called with an argument, it counts how many times that argument appears in the object it was called on And with a block, it yields to the block and provides a count of how many times the block returns a truthy response If you toggle to view the source code of #count on the Ruby Documentation site, you'll see it's written in C, but even glancing over the unfamiliar C syntax, you should be able to tell that it checks if a block has been given With Ruby we just have a more elegant syntax Lambdas\nA lambda is a way to write a block and save it to a variable This can be useful if you're calling different methods but passing in the same block to each of them It keeps you from having to type out the same code over and over again There are two ways to create a lambda One is to use the lambda keyword e g lambda { \"inside the lambda\" } The other way to declare a lambda is using the \"stabby lambda\" syntax, -> {} This looks a little funky but you get used to it Stabby lambda notation is more commonly used, so that's what we'll be using for the other examples ```ruby\nmy_lambda = lambda { puts \"my lambda\" }\nmy_other_lambda = -> { puts \"hello from the other side\" }\n```\nTo call a lambda you just call the #call method ```ruby\nmy_lambda = -> { puts \"high five\" }\nmy_lambda call\n=> high five\n```\nIf you want to accept arguments into your lambda, you have two options, and which option you use depends on how you declare your lambda",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23471,
      "relative_path": "git_repos\\odin-project\\ruby\\advanced_ruby\\blocks.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 5,
    "total_chunks": 13
  },
  {
    "id": "a6b6e70ef7f4f57d426971a8f523ed78",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\advanced_ruby\\blocks.md",
    "source_type": "git_repo",
    "title": "Single-line block",
    "content": "using for the other examples ```ruby my_lambda = lambda { puts \"my lambda\" } my_other_lambda = -> { puts \"hello from the other side\" } ``` To call a lambda you just call the #call method ```ruby my_lambda = -> { puts \"high five\" } my_lambda call => high five ``` If you want to accept arguments into your lambda, you have two options, and which option you use depends on how you declare your lambdaIf you use the stabby lambda syntax -> then you use () to name your parameters If you use the lambda keyword, then you use pipes || inside the block ```ruby\nmy_name = ->(name) { puts \"hello #{name}\" }\nmy_age = lambda { |age| puts \"I am #{age} years old\" }\nmy_name call(\"tim\")\n=> hello tim\nmy_age call(78)\n=> I am 78 years old\n```\nOne weird thing to note about lambdas is that there are numerous ways you can call them ```ruby\nmy_name = ->(name) { puts \"hello #{name}\" }\nmy_name call(\"tim\")\nmy_name (\"tim\")\nmy_name[\"tim\"]\nmy_name === \"tim\"\n```\nIt's probably best to stick to using #call Procs\nA proc is just an object that you can use to store blocks and pass them around like variables If you think this sounds a bit like a lambda, then you'd be right In fact, there is no special lambda class A lambda is actually just a type of proc object but with some distinct behaviors which we'll cover shortly You declare a new proc in the same way you instantiate any object in Ruby, using new ```ruby\na_proc = Proc new { puts \"this is a proc\" }\na_proc call\n=> this is a proc\n```\nor you can just use 'proc'\n```ruby\na_proc = proc { puts \"this is a proc\" }\na_proc call\n=> this is a proc\n```\nArguments are declared inside pipes ||\n```ruby\na_proc = Proc new { |name, age| puts \"name: #{name} --- age: #{age}\" }\na_proc call(\"tim\", 80)\n=> name: tim --- age: 80\n```\nProcs vs lambdas\nThere isn't much more to creating procs that you haven't already seen with lambdas So why use one over the other",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23471,
      "relative_path": "git_repos\\odin-project\\ruby\\advanced_ruby\\blocks.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 6,
    "total_chunks": 13
  },
  {
    "id": "d9e2493f2297576b3ba54991c01c35a1",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\advanced_ruby\\blocks.md",
    "source_type": "git_repo",
    "title": "Single-line block",
    "content": "use 'proc' ```ruby a_proc = proc { puts \"this is a proc\" } a_proc call => this is a proc ``` Arguments are declared inside pipes || ```ruby a_proc = Proc new { |name, age| puts \"name: #{name} --- age: #{age}\" } a_proc call(\"tim\", 80) => name: tim --- age: 80 ``` Procs vs lambdas There isn't much more to creating procs that you haven't already seen with lambdas So why use one over the otherWell, there are some key differences between procs and lambdas that can make choosing one over the other more suitable Arguments\nA proc behaves much like a block with regards to arguments A proc doesn't care if you pass in fewer or more arguments than you specify In fact, it doesn't care if you don't pass in any arguments at all It will assign nil to any parameters you name but don't pass through as arguments ```ruby\na_proc = Proc new { |a, b| puts \"a: #{a} --- b: #{b}\" }\na_proc call(\"apple\")\n=> a: apple --- b:\n```\nwhich is also why this is possible:\n```ruby\nnested_array = [[1, 2], [3, 4], [5, 6]]\nnested_array select {|a, b| a + b > 10 }\n=> [5, 6]\n```\nAs you can see, #select has two arguments specified |a, b|, on each iteration we pass a single element of nested_array into the block On the first iteration this is: [1, 2], this array now, is deconstructed automatically (into a = 1, b = 2) and its values compared as specified So on to the next rounds of iteration in which we pass [3, 4] and [5, 6] one by one This happens because the block {|a, b| if a + b > 10 } is treated as a non-lambda proc This property is not limited to #select but also applies to other enum methods like #map, #each etc You can read more about this in the Proc class documentation A lambda, on the other hand, DOES care and will raise an error if you don't honor the number of parameters expected",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23471,
      "relative_path": "git_repos\\odin-project\\ruby\\advanced_ruby\\blocks.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 7,
    "total_chunks": 13
  },
  {
    "id": "b78ce1e9f4ab79da0548fb170b4df864",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\advanced_ruby\\blocks.md",
    "source_type": "git_repo",
    "title": "Single-line block",
    "content": "[5, 6] one by one This happens because the block {|a, b| if a + b > 10 } is treated as a non-lambda proc This property is not limited to #select but also applies to other enum methods like #map, #each etc You can read more about this in the Proc class documentation A lambda, on the other hand, DOES care and will raise an error if you don't honor the number of parameters expected```ruby\na_lambda = lambda { |a, b| puts \"a: #{a} --- b: #{b}\" }\na_lambda call(\"apple\")\n=> wrong number of Arguments (given 1, expected 2) (ArgumentError)\na_lambda call(\"apple\", \"banana\", \"cake\")\n=> wrong number of Arguments (given 3, expected 2) (ArgumentError)\n```\nReturning\nWhen you write an explicit return inside a lambda, it returns from the lambda block back to the caller ```ruby\na_lambda = -> { return 1 }\na_lambda call\n=> 1\n```\nA proc object, however, returns from the \"embracing method\" (the method that defines the proc) ```ruby\ndef my_method\na_proc = Proc new { return }\nputs \"this line will be printed\"\na_proc call\nputs \"this line is never reached\"\nend\nmy_method\n=> this line will be printed\n```\nIn this example, the proc is called inside the method that defines it The result is to return from the method itself Taking a look at a more complex example:\n```ruby\ndef outer_method\na_proc = Proc new { return }\nputs \"this line will be printed\"\ninner_method(a_proc)\nputs \"this line is never reached\"\nend\ndef inner_method(proc)\nproc call\nputs \"this line is also never reached\"\nend\nouter_method\n=> this line will be printed\n```\nHere the proc is passed to another method and that method calls it When the inner_method calls the proc, it will return from the outer_method This can potentially create confusing behavior where the code path is mysteriously jumping across different contexts, so if you want to define a block that uses return and pass it around to other methods, a lambda is likely a better choice Note that defining a proc that uses return at the top level will just exit the program altogether:\n```ruby\na_proc = Proc new { return }\na_proc",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23471,
      "relative_path": "git_repos\\odin-project\\ruby\\advanced_ruby\\blocks.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 8,
    "total_chunks": 13
  },
  {
    "id": "a9e93afd126690b89ceb2219267bcd8e",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\advanced_ruby\\blocks.md",
    "source_type": "git_repo",
    "title": "Single-line block",
    "content": "the proc, it will return from the outer_method This can potentially create confusing behavior where the code path is mysteriously jumping across different contexts, so if you want to define a block that uses return and pass it around to other methods, a lambda is likely a better choice Note that defining a proc that uses return at the top level will just exit the program altogether: ```ruby a_proc = Proc new { return } a_proccall\nputs \"This line won't run \"\n```\nIf you run a proc with a top level return in IRB, it will raise a `LocalJumpError` This behavior is specific to the way the IRB process works though, and running it from a file will work as described above Similarities\nNow that we've covered some big differences between procs and lambdas, there are some similarities we need to cover Default arguments\nBoth procs and lambdas support default arguments in the same way Ruby methods do:\n```ruby\nmy_proc = Proc new { |name=\"bob\"| puts name }\nmy_proc call\n=> bob\nmy_lambda = ->(name=\"r2d2\") { puts name }\nmy_lambda call\n=> r2d2\n```\nMethod parameters\nBoth procs and lambdas can be used as arguments to a method ```ruby\ndef my_method(useful_arg)\nuseful_arg call\nend\nmy_lambda = -> { puts \"lambda\" }\nmy_proc = Proc new { puts \"proc\" }\nmy_method(my_lambda)\n=> lambda\nmy_method(my_proc)\n=> proc\n```\nCapturing blocks\nNow that we know how procs and lambdas work, how can this be applied to blocks As we learned, blocks are like little anonymous methods But what if we want to capture a reference to that block to do something with it Maybe we need to receive the block now in our method and store it in an instance variable to be called later Ruby allows us to capture blocks in a method definition as a special argument using & ```ruby\ndef cool_method(&my_block)\nmy_block call\nend\ncool_method { puts \"cool\" }\n```\nIf your method names some other parameters, then the block-capturing & parameter should always go last Capturing a block with & is known as an explicit block When you don't name it in your parameter list, then it's known as an implicit block",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23471,
      "relative_path": "git_repos\\odin-project\\ruby\\advanced_ruby\\blocks.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 9,
    "total_chunks": 13
  },
  {
    "id": "db1c5af6ee871623ebfc860d46bc3098",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\advanced_ruby\\blocks.md",
    "source_type": "git_repo",
    "title": "Single-line block",
    "content": "variable to be called later Ruby allows us to capture blocks in a method definition as a special argument using & ```ruby def cool_method(&my_block) my_block call end cool_method { puts \"cool\" } ``` If your method names some other parameters, then the block-capturing & parameter should always go last Capturing a block with & is known as an explicit block When you don't name it in your parameter list, then it's known as an implicit blockOne other thing to note is that even when you do capture a block using an &, you can still use yield rather than #call to yield to the block This would make the method somewhat unclear, though, so it's not recommended So how does this work Well, actually the & capturing syntax doesn't only have to be used on blocks What happens when you use & is that Ruby calls a method called #to_proc on whatever is assigned to that variable In the example above, using & assigns the block to my_block and then calls #to_proc on it, which creates a proc object That is why you can use #call on it Maybe you've seen or used code like the following\n```ruby\narr = [\"1\", \"2\", \"3\"]\narr map(&:to_i)\n=> [1, 2, 3]\n```\nWhat happens under the hood is that #to_proc is called on the symbol :to_i You can see what #to_proc does in the Ruby docs It returns a proc object which responds to the given method indicated by the symbol So here, #map yields each value in the array to the proc object, which calls #to_i on it (Yes, names of methods like #to_i can be passed around using symbols It's outside the scope of this lesson, but check out the documentation for #send if you're interested, and this Stack Overflow article on how #send and #to_i are used together for arr map(&:to_i) to work )\nThe & also works the other way You can prepend it to a proc object and it converts it to a block, and passes the block to the method being called ```ruby\ndef cool_method\nyield\nend\nmy_proc = Proc new { puts \"proc party\" }\ncool_method(&my_proc)\n=> proc party\n```\nIf you tried to call cool_method(my_proc) without the & you'd get an error because the method expected no arguments but you supplied one",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23471,
      "relative_path": "git_repos\\odin-project\\ruby\\advanced_ruby\\blocks.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 10,
    "total_chunks": 13
  },
  {
    "id": "f39c4f9bdaae5e5d003b5536b25f42e9",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\advanced_ruby\\blocks.md",
    "source_type": "git_repo",
    "title": "Single-line block",
    "content": "to work ) The & also works the other way You can prepend it to a proc object and it converts it to a block, and passes the block to the method being called ```ruby def cool_method yield end my_proc = Proc new { puts \"proc party\" } cool_method(&my_proc) => proc party ``` If you tried to call cool_method(my_proc) without the & you'd get an error because the method expected no arguments but you supplied oneSimilarly, if you have a method that names a parameter and you try to call it with a proc converted to a block, you'll get an error ```ruby\ndef cool_method(an_arg)\nan_arg call\nend\na_proc = Proc new { puts \"procodile hunter\" }\ncool_method(&a_proc) # Converting the proc object to a block\n=> ArgumentError (wrong number of arguments (given 0, expected 1))\n```\nLike we said earlier, using & on a proc when calling a method converts it to a block before passing it to the method It is no longer a named argument to the method, which is why we get the ArgumentError in the above example Wrapping up\nBlocks are used everywhere in Ruby You'll find many use cases, and see them used extensively in code libraries They allow callers of methods to pass in some contextual information which might otherwise be hard to do without having numerous methods to handle different scenarios After coming to grips with the information in this lesson you'll be a block, proc and lambda master, able to easily craft beautiful Ruby code Assignment\n1 This article provides quite a nice [summary of blocks, procs and lambdas](https://www rubyguides com/2016/02/ruby-procs-and-lambdas/) 1 Read this [article on lambdas in Ruby](https://www honeybadger io/blog/using-lambdas-in-ruby/) which also covers much of what we’ve used here We really liked the small section on using lambdas as computed hashes and arrays A cool use case Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is a block How is a block like a method What are the two ways to declare a block How do you return data from a block How can your methods collect the return data from a block",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23471,
      "relative_path": "git_repos\\odin-project\\ruby\\advanced_ruby\\blocks.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 11,
    "total_chunks": 13
  },
  {
    "id": "3847ba2dc6faa0067a325740c7ebdff0",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\advanced_ruby\\blocks.md",
    "source_type": "git_repo",
    "title": "Single-line block",
    "content": "an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is a block How is a block like a method What are the two ways to declare a block How do you return data from a block How can your methods collect the return data from a blockWhat happens if you include a return statement in a block What does yield do How do you pass arguments to a block from within a method How do you check whether a block was actually passed in What is a proc What is a lambda What's different between a lambda and a proc How do you convert a proc to a block How do you convert a block to a proc Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental It looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23471,
      "relative_path": "git_repos\\odin-project\\ruby\\advanced_ruby\\blocks.md",
      "source_type": "git_repo"
    },
    "token_count": 195,
    "chunk_index": 12,
    "total_chunks": 13
  },
  {
    "id": "90239bd9a0e2c55334659ef85558e81c",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\advanced_ruby\\project_custom_enumerables.md",
    "source_type": "git_repo",
    "title": "results in 2",
    "content": "Introduction\nYou should be very familiar with the Enumerable module that gets mixed into the Array and Hash classes (among others) and provides you with lots of handy iterator methods To prove that there's no magic to it, you're going to rebuild those methods We will explain an example of how an enumerable works to give you an idea of how to start tackling these methods Specifically we're going to break down the #find enumerable method The #find method finds the first element that matches the given block's condition and returns it If one isn't found, it returns nil ```ruby\na = [1, 2, 3, 4]\na find { |n| n == 2 }\nresults in 2\na find { |n| n == 10 }\nresults in nil\n```\nNow the question is how would we rebuild this method using our knowledge of yield and blocks Let's go over the example shown below line by line ```ruby\nmodule Enumerable\ndef my_find\nself each do |elem|\nreturn elem if yield(elem)\nend\nnil\nend\nend\na = [1, 2, 3]\na my_find { |n| n == 2 }\n=> 2\n```\nFirst of all, we're doing something you've maybe not seen before here: manipulating an existing class/module in the Ruby language Ruby allows you to do this We can reopen the Enumerable module and add our custom methods there With self each, we're calling the #each method on the object instance that's invoking this method In the example, this will end up being an array So self will refer to the array that's calling #my_find We can then use the #each method to iterate through its elements Now this is where yield becomes extremely useful When called inside of the #my_find method, yield will give control to the block that has been provided for #my_find In the usage example just below the definition, we can see the { |n| n == 2 } block is passed to the #my_find method Inside of #my_find, each element in the array gets yielded to that block as an argument If the block returns true/truthy for an element, we immediately return that element If nothing is found, we'll iterate all the way through the array and end up executing the nil return at the very end Pretty cool, huh Now it's time for you to practice:\nAssignment\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3086,
      "relative_path": "git_repos\\odin-project\\ruby\\advanced_ruby\\project_custom_enumerables.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "02bb3aeef28b1d05368db365d4511634",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\advanced_ruby\\project_custom_enumerables.md",
    "source_type": "git_repo",
    "title": "results in 2",
    "content": "|n| n == 2 } block is passed to the #my_find method Inside of #my_find, each element in the array gets yielded to that block as an argument If the block returns true/truthy for an element, we immediately return that element If nothing is found, we'll iterate all the way through the array and end up executing the nil return at the very end Pretty cool, huh Now it's time for you to practice: Assignment 1Fork and clone our [custom enumerables repo](https://github com/TheOdinProject/custom_enumerable_project)\n1 Follow the [installation instructions in the README](https://github com/TheOdinProject/custom_enumerable_project#installation) to get the repo setup locally 1 Rebuild each of [the methods in the table at the end of the README](https://github com/TheOdinProject/custom_enumerable_project#methods) and make sure they all pass the tests associated with them Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Jason Mattingly has a useful article on Writing Your Own Enumerables in Ruby",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3086,
      "relative_path": "git_repos\\odin-project\\ruby\\advanced_ruby\\project_custom_enumerables.md",
      "source_type": "git_repo"
    },
    "token_count": 234,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "8c1e524f868d5f238c4d215552df88a6",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\advanced_ruby\\pattern_matching.md",
    "source_type": "git_repo",
    "title": "=> Well done",
    "content": "Introduction\nIntroduced in Ruby 2 7, pattern matching uses specified patterns to match against some data If the data conforms to the pattern, there is a match and the data is deconstructed accordingly If there is no match, you can either supply a default value to return or else a NoMatchingPatternError is raised With Ruby 3 1, most parts of the pattern matching syntax are no longer considered experimental, so it is now worth ensuring you are familiar with the basics The syntax can feel a little clunky at first, but there are times it can definitely simplify Ruby code There are a couple of new patterns with Ruby 3 which we'll introduce at the end If you want to play with the examples, make sure you're on at least Ruby 2 7 or try an appropriate online REPL Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Explain the syntax for implementing a pattern matching case statement Explain what types can be used in pattern matching Explain the possible return values from a pattern match Explain how to implement a guard condition in a pattern match statement Explain how to pattern match against an Array and Arrays within Arrays Explain how to pattern match against a Hash Explain the main differences between Hash and Array pattern matching Explain the use of the pin operator Explain the use of the alternative pattern Explain how to bind matches to a variable Explain how to match against your own custom classes Basics\nThe basic format for a pattern match is a case statement This is not too different from the case statement you are already familiar with for matching conditions in Ruby, except now instead of when, we use in If your use case is very basic, you will find there is no difference between using either in or when as the below example illustrates",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22352,
      "relative_path": "git_repos\\odin-project\\ruby\\advanced_ruby\\pattern_matching.md",
      "source_type": "git_repo"
    },
    "token_count": 348,
    "chunk_index": 0,
    "total_chunks": 14
  },
  {
    "id": "cb7f97363ec3588781c970bc05da85a8",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\advanced_ruby\\pattern_matching.md",
    "source_type": "git_repo",
    "title": "=> Well done",
    "content": "to a variable Explain how to match against your own custom classes Basics The basic format for a pattern match is a case statement This is not too different from the case statement you are already familiar with for matching conditions in Ruby, except now instead of when, we use in If your use case is very basic, you will find there is no difference between using either in or when as the below example illustrates```ruby\ngrade = 'C'\ncase grade\nwhen 'A' then puts 'Amazing effort'\nwhen 'B' then puts 'Good work'\nwhen 'C' then puts 'Well done'\nwhen 'D' then puts 'Room for improvement'\nelse puts 'See me'\nend\n=> Well done\n```\nvs pattern matching syntax\n```ruby\ngrade = 'C'\ncase grade\nin 'A' then puts 'Amazing effort'\nin 'B' then puts 'Good work'\nin 'C' then puts 'Well done'\nin 'D' then puts 'Room for improvement'\nelse puts 'See me'\nend\n=> Well done\n```\nThe second format is a one line syntax using the trusty hash rocket that will be familiar to you from hashes ```ruby\nlogin = { username: 'hornby', password: 'iliketrains' }\nlogin => { username: username }\nputs \"Logged in with username #{username}\"\n=> Logged in with username hornby\n```\nWe'll get to matching against hashes shortly so don't worry about the exact syntax of what is happening Just note that we can use the hash rocket => to match against some kind of structure The second format is still considered experimental so the examples that follow will use the case statement format The case/in format is best used when there are multiple conditionals you could possibly match against and you need to check against all of them The hash rocket syntax is best used when the data structure you are matching against is known, such as the login data example we used above Patterns\nThere are multiple ways of potentially matching against an input Patterns can be:\nAny Ruby object which is matched using === The Object Pattern A variable capture / Variable Pattern\nAn As Pattern\nAn Alternative Pattern\nA Guard Condition\nAn Array Pattern\nA Hash Pattern\nYou can use the above patterns while also having the following experimental additions Rightward Assignment\nA Find Pattern\nPatterns can also be matched using many of the patterns above together",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22352,
      "relative_path": "git_repos\\odin-project\\ruby\\advanced_ruby\\pattern_matching.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 1,
    "total_chunks": 14
  },
  {
    "id": "1ad1aa3e3db3977150a6ca808b6f9a29",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\advanced_ruby\\pattern_matching.md",
    "source_type": "git_repo",
    "title": "=> Well done",
    "content": "Patterns There are multiple ways of potentially matching against an input Patterns can be: Any Ruby object which is matched using === The Object Pattern A variable capture / Variable Pattern An As Pattern An Alternative Pattern A Guard Condition An Array Pattern A Hash Pattern You can use the above patterns while also having the following experimental additions Rightward Assignment A Find Pattern Patterns can also be matched using many of the patterns above togetherFor example, you may have an array inside a hash, so you could use the hash and array patterns We'll go through each of the various patterns in more detail below When we say \"pattern\", we aren't talking about design patterns which you may have come across We mean the pattern used to match against an input Return values\nThere are two possible outcomes for a pattern match statement - either there is a match or there is no match If there is a match, it will return the last evaluated value in the body of the matching branch If there are no matches, the pattern matching statement will return NoMatchingPatternError Consider the following example, where the variable result is assigned the value 3 ```ruby\ngrade = 'C'\nresult = case grade\nin 'A' then 1\nin 'B' then 2\nin 'C' then 3\nelse 0\nend\nputs result\n=> 3\n```\nWhen we puts something inside a case statement, we'll use #=> to show what puts will print In your terminal, however, you'll see the value printed followed by => nil, since puts returns nil We'll omit that because it's not relevant to what we're trying to show you Just be aware that the nil you see is just the return value of puts Standard Ruby behaviour As you'll see, though, the point of a pattern match usually is to not only match against a pattern, but also bind all or part of the match to one or more variables that you can then use outside of the pattern match expression Object pattern match\nAny object can be used in a pattern match It is matched using === to compare the two objects and is the same basis for matches in the case/when format This pattern is usually used within other patterns, such as the array pattern The grade example provided earlier was one such use of the Ruby object pattern match On each check, Ruby compared the grade with the specified letter When there was a match, it executed the then clause of that match 'A' === 'A' #=> true Because of this we can also check against data types",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22352,
      "relative_path": "git_repos\\odin-project\\ruby\\advanced_ruby\\pattern_matching.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 2,
    "total_chunks": 14
  },
  {
    "id": "d1eacb030f7231aafecf3a26a9f20a6b",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\advanced_ruby\\pattern_matching.md",
    "source_type": "git_repo",
    "title": "=> Well done",
    "content": "the same basis for matches in the case/when format This pattern is usually used within other patterns, such as the array pattern The grade example provided earlier was one such use of the Ruby object pattern match On each check, Ruby compared the grade with the specified letter When there was a match, it executed the then clause of that match 'A' === 'A' #=> true Because of this we can also check against data types```ruby\ninput = 3\ncase input\nin String then puts 'input was of type String'\nin Integer then puts 'input was of type Integer'\nend\n=> input was of type Integer\n```\nIt's important to note here that Ruby places the pattern to match on the left of the comparison in === If it didn't then there would be no match 3 === Integer is false whereas Integer === 3 is true That is because of how Ruby implements the === method on Integer vs on instances of Integer On Integer, === will check that the operand on the right of the comparison is of type Integer On an instance of an integer, === will check they hold the same value 3 === 3 is true With Ruby pattern matching, you can match against the following literal types Booleans\nnil\nNumbers\nStrings\nSymbols\nArrays\nHashes\nRanges\nRegular Expressions\nProcs\nThis isn't any different from what we can do with a case/when statement, but the power comes when you match these types within some of the other patterns as we'll see next Variable pattern\nThe variable pattern binds a variable or variables to the values that match the pattern The basic format is:\n```ruby\nage = 15\ncase age\nin a\nputs a\nend\n=> 15\n```\nThis example isn't useful in itself, but lays the foundation for use in other patterns as we'll see Something to take note of is that the variable pattern always binds the value to the variable Be careful if there is another variable with the same name in the outer scope which you'll need ```ruby\na = 5\ncase 1\nin a\na\nend\nputs a\n=> 1\n```\nAbove, you might have thought you were comparing the value held in the initial a variable against the value 1 from the case statement What actually happened is a variable assignment pattern match To avoid this, Ruby provides the pin operator ^ which instead matches against a variable of that name",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22352,
      "relative_path": "git_repos\\odin-project\\ruby\\advanced_ruby\\pattern_matching.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 3,
    "total_chunks": 14
  },
  {
    "id": "c54d88437d91306235252ac9013fa901",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\advanced_ruby\\pattern_matching.md",
    "source_type": "git_repo",
    "title": "=> Well done",
    "content": "the same name in the outer scope which you'll need ```ruby a = 5 case 1 in a a end puts a => 1 ``` Above, you might have thought you were comparing the value held in the initial a variable against the value 1 from the case statement What actually happened is a variable assignment pattern match To avoid this, Ruby provides the pin operator ^ which instead matches against a variable of that name```ruby\na = 5\ncase 1\nin ^a\n:no_match\nend\n=> NoMatchingPatternError\n```\nAs pattern match\nThe as pattern is similar to the variable pattern but can be used to manage more complex assignments This will make most sense when using Arrays and Hashes so examples will be shown when covering those patterns but the general pattern is written as follows:\n```ruby\ncase 3\nin 3 => a\nputs a\nend\n=> 3\n```\nIt uses the hash rocket in the same way the one line pattern match does Look out for the examples in later sections for clarification on when this pattern could be useful Alternative pattern match\nThe alternative pattern allows you to check if multiple options match the input ```ruby\ncase 0\nin 0 | 1 | 2\nputs :match\nend\n=> match\n```\nThere isn't much more to it The same rules apply as with any other pattern So you can use the ^ operator if you are using variables to compare Guard conditions\nThis isn't a pattern per se, but a way to make sure the pattern is only matched if the guard condition holds true ```ruby\nsome_other_value = true\ncase 0\nin 0 if some_other_value\nputs :match\nend\n=> match\n```\nYou can use any expression in the condition that can evaluate to true or false You can also use unless instead of if if it suits you Array pattern match\nMatching against arrays can be done in a few different ways At its most basic, you can match against the exact elements in the array ```ruby\narr = [1 ,2]\ncase arr\nin [1, 2] then puts :match\nin [3, 4] then puts :no_match\nend\n=> match\n```\nThat works using the === operator from the object pattern match so would work using case/when That's no fun, so let's ramp it up a little bit",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22352,
      "relative_path": "git_repos\\odin-project\\ruby\\advanced_ruby\\pattern_matching.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 4,
    "total_chunks": 14
  },
  {
    "id": "7c1745863957d2a5a4f050810179050e",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\advanced_ruby\\pattern_matching.md",
    "source_type": "git_repo",
    "title": "=> Well done",
    "content": "match Matching against arrays can be done in a few different ways At its most basic, you can match against the exact elements in the array ```ruby arr = [1 ,2] case arr in [1, 2] then puts :match in [3, 4] then puts :no_match end => match ``` That works using the === operator from the object pattern match so would work using case/when That's no fun, so let's ramp it up a little bit```ruby\narr = [1, 2]\ncase arr\nin [Integer, Integer]\nputs :match\nin [String, String]\nputs :no_match\nend\n=> match\n```\nHere we've matched against the type of the arrays elements This is an example of Ruby matching against a pattern rather than the actual values in the array What happens if we have more elements in the array ```ruby\narr = [1, 2, 3]\ncase arr\nin [Integer, Integer]\nputs :no_match\nend\n=> [1, 2, 3] (NoMatchingPatternError)\n```\nAn error Ruby appears to only match against arrays with the same number of elements What if you want to match against only part of an array Use the trusty splat * ```ruby\narr = [1, 2, 3]\ncase arr\nin [Integer, Integer, *]\nputs :match\nend\n=> match\n```\nYou can place the splat anywhere in an array to match against multiple entries ```ruby\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ncase arr\nin [Integer, Integer, *, Integer, Integer]\nputs :match\nend\n=> match\n```\nHere we are checking only the first and last two elements are Integers You can also mix and match between checking actual values and types ```ruby\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ncase arr\nin [Integer, Integer, *, 9, 10]\nputs :match\nend\n=> match\n```\nIf you want to scoop up the values of the array matched against the splat, you can use the variable pattern",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22352,
      "relative_path": "git_repos\\odin-project\\ruby\\advanced_ruby\\pattern_matching.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 5,
    "total_chunks": 14
  },
  {
    "id": "6dea429ba8afc1b994bb57ff6991fd82",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\advanced_ruby\\pattern_matching.md",
    "source_type": "git_repo",
    "title": "=> Well done",
    "content": "=> match ``` Here we are checking only the first and last two elements are Integers You can also mix and match between checking actual values and types ```ruby arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] case arr in [Integer, Integer, *, 9, 10] puts :match end => match ``` If you want to scoop up the values of the array matched against the splat, you can use the variable pattern```ruby\narr = [1, 2, 3, 4]\ncase arr\nin [1, 2, *tail]\np tail\nend\n=> [3, 4]\n```\nIf you don't care about some values in the array and are happy to match against any value for that index you can use _ ```ruby\narr = [1, 2, 3, 4]\ncase arr\nin [, , 3, 4]\nputs :match\nend\n=> match\n```\nLet's say you want to match against an array of two numbers, but only if they aren't the same number You can use a guard clause ```ruby\narr = [1, 2]\ncase arr\nin [a, b] unless a == b\nputs :match\nend\n=> match\n```\nYou can even match against nested arrays ```ruby\narr = [1, 2, [3, 4]]\ncase arr\nin [, , [3, 4]]\nputs :match\nend\n=> match\n```\nThis is where the real power of pattern matching shines: traversing deeply nested structures for matches You can incorporate the variable pattern to bind matching values to variables to use later ```ruby\narr = [1, 2, 3, 4, 5]\ncase arr\nin [1, 2, 3, a, b]\nputs a\nputs b\nend\n=> 4\n=> 5\n```\nLet's say you have a nested array and you want to match against both the nested array and some individual parts of it This is where the as pattern can be used",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22352,
      "relative_path": "git_repos\\odin-project\\ruby\\advanced_ruby\\pattern_matching.md",
      "source_type": "git_repo"
    },
    "token_count": 451,
    "chunk_index": 6,
    "total_chunks": 14
  },
  {
    "id": "ecc5c884f2ec228a584be2a3dda6840d",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\advanced_ruby\\pattern_matching.md",
    "source_type": "git_repo",
    "title": "=> Well done",
    "content": "structures for matches You can incorporate the variable pattern to bind matching values to variables to use later ```ruby arr = [1, 2, 3, 4, 5] case arr in [1, 2, 3, a, b] puts a puts b end => 4 => 5 ``` Let's say you have a nested array and you want to match against both the nested array and some individual parts of it This is where the as pattern can be used```ruby\ncase [1, 2, 3, [4, 5]]\nin [1, 2, 3, [4, a] => arr]\nputs a\np arr\nend\n=> 5\n=> [4, 5]\n```\nBe careful with variable reassignment as we discussed earlier ```ruby\narr = [1, 2, 3]\ncase [1, 2, 4]\nin arr\n:match\nend\np arr\n=> [1, 2, 4]\n```\nOne last point to note is that when matching an array the [] are optional on the outer array ```ruby\narr = [1, 2, 3, 4]\ncase arr\nin 1, 2, 3, 4\nputs :match\nend\n=> match\n```\nHash pattern matching\nPattern Matching with Hashes works in a similar way to arrays with a couple of important differences The first is that pattern matching only works for symbol keys, not string keys The reason for this is to do with how Ruby matches against a hash This may change in future Ruby versions The second important difference is that unlike with arrays, you can match against parts of a Hash without having to handle the fact there may be additional key-value pairs We can match against the actual values of a hash ```ruby\ncase { a: 'apple', b: 'banana' }\nin { a: 'aardvark', b: 'bat' }\nputs :no_match\nin { a: 'apple', b: 'banana' }\nputs :match\nend\n=> match\n```\nWe can match against a hash and assign values to variables",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22352,
      "relative_path": "git_repos\\odin-project\\ruby\\advanced_ruby\\pattern_matching.md",
      "source_type": "git_repo"
    },
    "token_count": 447,
    "chunk_index": 7,
    "total_chunks": 14
  },
  {
    "id": "9be0e6682c06584e667938c1f343eadb",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\advanced_ruby\\pattern_matching.md",
    "source_type": "git_repo",
    "title": "=> Well done",
    "content": "is that unlike with arrays, you can match against parts of a Hash without having to handle the fact there may be additional key-value pairs We can match against the actual values of a hash ```ruby case { a: 'apple', b: 'banana' } in { a: 'aardvark', b: 'bat' } puts :no_match in { a: 'apple', b: 'banana' } puts :match end => match ``` We can match against a hash and assign values to variables```ruby\ncase { a: 'apple', b: 'banana' }\nin { a: a, b: b }\nputs a\nputs b\nend\n=> apple\n=> banana\n```\nBecause of Ruby syntactic sugar for hashes, we could rewrite the above as below Note how we don't have to provide names for the variables This isn't pattern matching behaviour but normal Ruby hash behaviour ```ruby\ncase { a: 'apple', b: 'banana' }\nin { a:, b: }\nputs a\nputs b\nend\n=> apple\n=> banana\n```\nAs with arrays, with hashes you can omit the brackets {} ```ruby\ncase { a: 'apple', b: 'banana' }\nin a:, b:\nputs a\nputs b\nend\n=> apple\n=> banana\n```\nYou can use the double splat ** to scoop up multiple key-value pairs ```ruby\ncase { a: 'ant', b: 'ball', c: 'cat' }\nin { a: 'ant', **rest }\np rest\nend\n=> { :b => \"ball\", :c => \"cat\" }\n```\nSomething to be mindful of with hashes is that because a hash will match with only a subset of keys matching, you need to guard against situations where you don't want that behaviour ruby\ncase { a: 'ant', b: 'ball' }\nin { a: 'ant' }\n'this will match'\nin { a: 'ant', b: 'ball' }\n'this will never be reached'\nend\nIf you want to ensure you only match exactly you can use **nil",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22352,
      "relative_path": "git_repos\\odin-project\\ruby\\advanced_ruby\\pattern_matching.md",
      "source_type": "git_repo"
    },
    "token_count": 439,
    "chunk_index": 8,
    "total_chunks": 14
  },
  {
    "id": "e07c5b115f8e0229e13d71230d1a6ef8",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\advanced_ruby\\pattern_matching.md",
    "source_type": "git_repo",
    "title": "=> Well done",
    "content": "``` Something to be mindful of with hashes is that because a hash will match with only a subset of keys matching, you need to guard against situations where you don't want that behaviour ruby case { a: 'ant', b: 'ball' } in { a: 'ant' } 'this will match' in { a: 'ant', b: 'ball' } 'this will never be reached' end If you want to ensure you only match exactly you can use **nil```ruby\ncase { a: 'ant', b: 'ball' }\nin { a: 'ant', **nil }\nputs :no_match\nin { a: 'ant', b: 'ball' }\nputs :match\nend\n=> match\n```\nWe can use the as pattern to assign the entire hash match to a variable ```ruby\ncase { a: 'ant', b: 'ball' }\nin { a: 'ant' } => hash\np hash\nend\n=> { :a => 'ant', :b => 'ball' }\n```\nRuby 3 patterns\nWith Ruby 3 came a couple of new patterns You may get a warning about these features being experimental and subject to change so they aren't yet considered ready for any production code Rightward assignment\nUsually, you place variables on the left of an expression that binds a value to that variable With rightward assignment you deconstruct an object and assign values to variables on the right of the expression Instead of using = to assign you use a hash rocket => All of the previous patterns we've covered can be used in this syntax ```ruby\nlogin = { username: 'hornby', password: 'iliketrains' }\nlogin => { username: username }\nputs \"Logged in with username #{username}\"\n=> \"Logged in with username hornby\"\n```\nThe case/in format is best used when there are multiple conditionals you could possibly match against and you need to check against all of them The hash rocket syntax is best used when the data structure you are matching against is known, such as the login data example we used above Find pattern\nAs we saw earlier, we can match against part of a hash using the array pattern match So what do you do if you need to match against part of an array The as pattern would capture all of the array and the variable pattern captures individual parts of it To address this, Ruby added the find pattern",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22352,
      "relative_path": "git_repos\\odin-project\\ruby\\advanced_ruby\\pattern_matching.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 9,
    "total_chunks": 14
  },
  {
    "id": "64a0dc4ba73a6d8247b26ad2f94bef9a",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\advanced_ruby\\pattern_matching.md",
    "source_type": "git_repo",
    "title": "=> Well done",
    "content": "structure you are matching against is known, such as the login data example we used above Find pattern As we saw earlier, we can match against part of a hash using the array pattern match So what do you do if you need to match against part of an array The as pattern would capture all of the array and the variable pattern captures individual parts of it To address this, Ruby added the find patternIt works by placing a * either side of the part you want to match You can even use the variable pattern to give each * a variable name to reference later Let's look at some examples ```ruby\ncase [1, 2, 3]\nin [pre, 1, 2, 3, post]\np pre\np post\nend\n=> []\n=> []\n```\nBecause everything was matched between the pattern our pre and post variables were assigned empty arrays Let's see what happens when they aren't ```ruby\ncase [1, 2, 3, 4, 5]\nin [pre, 2, 3, post]\np pre\np post\nend\n=> [1]\n=> [4, 5]\n```\nHere's an interesting one Let's say you have a mixed array of strings and integers and want to match on the first instance of two consecutive strings While that would be a bit of a pain to implement without using pattern matching, with the find pattern it's easy We can even throw in the as pattern to grab the values of the two consecutive strings ```ruby\ncase [1, 2, \"a\", 4, \"b\", \"c\", 7, 8, 9]\nin [pre, String => x, String => z, post]\np pre\np x\np z\np post\nend\n=> [1, 2, \"a\", 4]\n=> \"b\"\n=> \"c\"\n=> [7, 8, 9]\n```\nAs a last example, we'll consider a common use case which will hopefully show where the find pattern could be a better fit than a conventional Ruby solution It's not uncommon in Ruby to find yourself with an array of hashes or JSON data, and you might need to locate a record from that data You need to match that data on a few hash keys The data might look something like this",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22352,
      "relative_path": "git_repos\\odin-project\\ruby\\advanced_ruby\\pattern_matching.md",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 10,
    "total_chunks": 14
  },
  {
    "id": "e10c7cd9eccca408b8af9169a249b251",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\advanced_ruby\\pattern_matching.md",
    "source_type": "git_repo",
    "title": "=> Well done",
    "content": "8, 9] ``` As a last example, we'll consider a common use case which will hopefully show where the find pattern could be a better fit than a conventional Ruby solution It's not uncommon in Ruby to find yourself with an array of hashes or JSON data, and you might need to locate a record from that data You need to match that data on a few hash keys The data might look something like thisruby\ndata = [\n{name: 'James', age: 50, first_language: 'english', job_title: 'general manager'},\n{name: 'Jill', age: 32, first_language: 'italian', job_title: 'leet coder'},\n{name: 'Helen', age: 24, first_language: 'dutch', job_title: 'biscuit quality control'},\n{name: 'Bob', age: 64, first_language: 'english', job_title: 'table tennis king'},\n{name: 'Betty', age: 55, first_language: 'spanish', job_title: 'pie maker'},\n]\nLet's say you get a name, age, and job title as parameters If that person exists, you need to return their first language, otherwise nil Before pattern matching, you may do something like this ```ruby\nname = 'Jill'\nage = 32\njob_title = 'leet coder'\nmatch = data find do |person|\nperson[:name] == name && person[:age] == age && person[:job_title] == job_title\nend\nmatch& fetch(:first_language)\n```\nA couple of things to note here Firstly, because match could be nil if it couldn't find a record, we had to use the & safe search navigator to check that we could call fetch on match Otherwise, it would have blown up with a no method error Secondly, while this isn't actually that bad, imagine we had more than 3 fields to search What if there were 10 Our code would start to get out of control Now let's see how we could have handled it using a pattern match",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22352,
      "relative_path": "git_repos\\odin-project\\ruby\\advanced_ruby\\pattern_matching.md",
      "source_type": "git_repo"
    },
    "token_count": 418,
    "chunk_index": 11,
    "total_chunks": 14
  },
  {
    "id": "4f82e7b087c468ecb04bda640e492b90",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\advanced_ruby\\pattern_matching.md",
    "source_type": "git_repo",
    "title": "=> Well done",
    "content": "couldn't find a record, we had to use the & safe search navigator to check that we could call fetch on match Otherwise, it would have blown up with a no method error Secondly, while this isn't actually that bad, imagine we had more than 3 fields to search What if there were 10 Our code would start to get out of control Now let's see how we could have handled it using a pattern match```ruby\nname = 'Jill'\nage = 32\njob_title = 'leet coder'\ncase data\nin [, { name: ^name, age: ^age, first_language: first_language, job_title: ^job_title }, ]\nelse\nfirst_language = nil\nend\nputs first_language\n=> italian\n```\nWith pattern matching, we do need to consider the case if there is no match Without the else clause, we'd get the no matching pattern error But that is exactly what the else clause is for in the case statement We get a couple of benefits from doing it this way Firstly, we can bind the first_language value to a variable right there in the pattern Secondly, and we acknowledge this is somewhat subjective, but we find it beneficial in the case statement to see exactly what kind of data structure we're trying to match against This can be useful when getting to grips with code where the data may come from a third party API And remember, this is still a very simplistic example In the real world, data can be nested several levels deep which can lead to a horrible tangle of spaghetti code when trying to make sure you can locate a value several levels deep What if you had to dive 6 levels, but grab a value or two along the way from a couple of the higher levels No problem with pattern matching Wrapping up\nPattern Matching provides a powerful way to get at the data you need in a way that makes sense But as with any tool, you don't need to reach for it in every use case For data structures that are shallow, just think about whether you need to bring in a pattern match when you could just grab the value using the hash and array methods already available If you do find yourself deep in a nested structure with many checks for nil and a lot of edge case handling, it might be time to see if pattern matching brings something to the table Assignment\n1 Read the [Ruby docs on pattern matching](https://docs ruby-lang org/en/3 3/syntax/pattern_matching_rdoc html)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22352,
      "relative_path": "git_repos\\odin-project\\ruby\\advanced_ruby\\pattern_matching.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 12,
    "total_chunks": 14
  },
  {
    "id": "6b5b4d25b6e55d1c3944614bc19108f7",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\advanced_ruby\\pattern_matching.md",
    "source_type": "git_repo",
    "title": "=> Well done",
    "content": "just think about whether you need to bring in a pattern match when you could just grab the value using the hash and array methods already available If you do find yourself deep in a nested structure with many checks for nil and a lot of edge case handling, it might be time to see if pattern matching brings something to the table Assignment 1 Read the [Ruby docs on pattern matching](https://docs ruby-lang org/en/3 3/syntax/pattern_matching_rdoc html)They cover quite a lot of ground Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is pattern matching What is the difference between array patterns and hash patterns What is the variable pattern match What are the different ways of pattern matching on an array Explain the find pattern Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental An Introduction to Pattern Matching in Ruby from AppSignal should be another useful perspective on the material",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22352,
      "relative_path": "git_repos\\odin-project\\ruby\\advanced_ruby\\pattern_matching.md",
      "source_type": "git_repo"
    },
    "token_count": 224,
    "chunk_index": 13,
    "total_chunks": 14
  },
  {
    "id": "a57ff3e30c4d1f23fef31e87f6b11879",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\automated_testing\\introduction.md",
    "source_type": "git_repo",
    "title": "introduction",
    "content": "Introduction\nHopefully, you’ve been having fun developing in Ruby so far Perhaps one thing you may not have been enjoying as much, is the process of manually testing your app to ensure it still works after making any changes Or even worse running your app, getting far into its execution and discovering you have a bug, and then having to do it all over again to verify that you've fixed the bug Automated tests are the alternative to manual testing You've already seen them in action while doing the Ruby basic exercises earlier in this course Those exercises tasked you with writing code to make a bunch of existing failing tests pass Over the next few lessons you will learn how to write those tests yourself and integrate writing them into your workflow Learning Outcomes\nWhat is automated testing What is a test suite What are the benefits of automated testing over manual testing What is a regression What are Automated Tests Automated tests, as the name suggests, automate the process of testing your projects As you write a new feature, you also write tests for the feature that verify the correctness of it If the tests pass, you can be confident that the code works as intended If they fail you know a mistake has been made that needs to be corrected There are different types of automated tests Some are low level and only test individual classes and methods These are known as unit tests Other tests are high level and test your system as a whole by simulating how a real user would interact with the system These are known as end-to-end tests All of your tests put together are what's known as a test suite What Problems do Automated Tests Solve They Save You Time\nThe most obvious benefit automated testing has over manual testing is the amount of time it can save you There's a lot of repetition involved with manual testing Every time a new feature is added you have to test the feature as well as existing features to ensure they haven't been broken by the changes you've made Depending on the size of the project, it could take anywhere from a few minutes to a few weeks in order to exhaustively test everything manually This amount of time only increases as the project grows in size and complexity On the flip side, automated tests take a fraction of the time to run, often only seconds And you only need to write an automated test once, after which it will test that behavior every time the test suite is run as opposed to repeatedly testing the same thing manually every time a change is made They Give You Confidence\nSoftware projects are rarely ever finished and they change often",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4979,
      "relative_path": "git_repos\\odin-project\\ruby\\automated_testing\\introduction.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "be9c46d42688d6ede259912ac4fae624",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\automated_testing\\introduction.md",
    "source_type": "git_repo",
    "title": "introduction",
    "content": "project grows in size and complexity On the flip side, automated tests take a fraction of the time to run, often only seconds And you only need to write an automated test once, after which it will test that behavior every time the test suite is run as opposed to repeatedly testing the same thing manually every time a change is made They Give You Confidence Software projects are rarely ever finished and they change oftenNew features need to be added and existing features need to be modified Any new changes come with the risk of unintentionally breaking something that was previously working This is known as introducing a regression The time it takes to manually test all functionality in a decent-sized project means shortcuts are inevitably taken and regressions are missed because only the areas around where changes have been made will ultimately get tested This puts the burden of testing everything else onto the end-users of the project Automated tests are a safety net against introducing regressions They provide an immediate feedback loop that lets you know when you've messed up, long before the changes ever make it into users' hands The peace of mind and confidence a safety net of automated tests gives you cannot be overstated enough It encourages you, the developer, to make changes and improvements you might not otherwise have made out of fear of breaking some critical functionality This, in turn, helps you improve the overall quality and reliability of the project, makes it faster and safer to release new features, and makes maintaining the project easier in the long run Conclusion\nLike almost everything, there are trade-offs to automated testing It requires an upfront cost in time in order to write the tests and it produces more code to maintain But the benefits a well-tested project affords you far outweigh these costs and compound over the lifetime of the project For some extra incentive, automated tests have become an industry standard Being able to write them will be a requirement for almost all the jobs you will apply for Therefore it's also important to learn how to write them to improve your prospects with getting hired as a developer Now that you know the why behind testing, the next few lessons will focus on the how You will learn how to write tests using a testing framework called RSpec and how to use RSpec to write both unit and end-to-test (E2E) tests Finally, we will explore test driven development, which is a workflow where you write tests first and use them to drive the design of your code",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4979,
      "relative_path": "git_repos\\odin-project\\ruby\\automated_testing\\introduction.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "9a9e0e28489afdf36e9eb8b199b7a487",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_two_code_sharing.md",
    "source_type": "git_repo",
    "title": "lib/user.rb",
    "content": "Introduction\nIn this lesson we will be exploring some of the tools RSpec provides for sharing code among multiple tests Specifically, we will be looking at hook, let and subject helper methods These methods are frequently used in RSpec test suites so it's important to know how they work and when to use them We will once again be working from the odin_rspec project we set up in the previous lesson To get the most out this lesson, please follow along with all the examples Learning Outcomes\nWhat is a before hook and what phase of a test should you use it for What is an after hook and phase of a test should you use it for What is a let variable for What is a subject for Hooks\nWe will often have the same arrange, act and teardown code in multiple test cases RSpec provides a way of sharing this code by using hook methods that allow us to run code before and after our tests Before Hooks\nBefore hooks run before the tests are executed We could put any code we wished into them, but they are best used to share the same arrange phase and on some occasions the same act phase code between multiple tests To see this in action, create a new file in the lib directory of your odin_rspec project named user rb and paste the following code into it:\n~~~ruby\nlib/user rb\nclass User\nattr_reader :name, :email, :age\ndef initialize(name, email, age)\n@name = name\n@email = email\n@age = age\nend\ndef retired age >= 65\nend\nend\n~~~\nNext, create a test file for the user class in the spec directory named user_spec rb and write the following tests for the User class to exercise the name, email and age attributes:\n~~~ruby\nspec/user_spec rb\nrequire \"spec_helper\"\nrequire \"user\"\nRSpec describe User do\ndescribe \"name\" do\nit \"returns the users name\" do\nuser = User new(\"David\", \"david@example com\", 30)\nexpect(user name) to eq(\"David\")\nend\nend\ndescribe \"email\" do\nit \"returns the users email\" do\nuser = User new(\"David\", \"david@example com\", 30)\nexpect(user email) to eq(\"david@example com\")\nend\nend\ndescribe \"age\" do\nit \"returns the users age\" do\nuser = User new(\"David\", \"david@example",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18820,
      "relative_path": "git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_two_code_sharing.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 11
  }
]