[
  {
    "id": "cd482aa9c2b0bb79e68ecc712eeb5995",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_dropdown-menu.html",
    "source_type": "documentation",
    "title": "Dropdown Menu – Radix Primitives",
    "content": "Dropdown Menu – Radix PrimitivesRadix HomepageMade by WorkOSRadix HomepageMade by WorkOSThemesThemesPrimitivesPrimitivesIconsIconsColorsColorsDocumentationCase studiesBlogSearch/OverviewIntroductionGetting startedAccessibilityReleasesGuidesStylingAnimationCompositionServer-side renderingComponentsAccordionAlert DialogAspect RatioAvatarCheckboxCollapsibleContext MenuDialogDropdown MenuFormPreviewHover CardLabelMenubarNavigation MenuOne-Time Password FieldPreviewPassword Toggle FieldPreviewPopoverProgressRadio GroupScroll AreaSelectSeparatorSliderSwitchTabsToastToggleToggle GroupToolbarTooltipUtilitiesAccessible IconDirection ProviderPortalSlotVisually HiddenComponentsDropdown Menu\nDisplays a menu to the user—such as a set of actions or functions—triggered by\na button index jsxindex jsxstyles cssstyles cssimport * as React from \"react\";\nimport { DropdownMenu } from \"radix-ui\";\nimport {\nHamburgerMenuIcon,\nDotFilledIcon,\nCheckIcon,\nChevronRightIcon,\n} from \"@radix-ui/react-icons\";\nimport \" /styles css\";\nconst DropdownMenuDemo = () => {\nconst [bookmarksChecked, setBookmarksChecked] = React useState(true);\nconst [urlsChecked, setUrlsChecked] = React useState(false);\nconst [person, setPerson] = React useState(\"pedro\");\nreturn (\n<DropdownMenu Root>\n<DropdownMenu Trigger asChild>\n<button className=\"IconButton\" aria-label=\"Customise options\">\n<HamburgerMenuIcon />\n</button>\n</DropdownMenu Trigger>\n<DropdownMenu Portal>\n<DropdownMenu Content className=\"DropdownMenuContent\" sideOffset={5}>\n<DropdownMenu Item className=\"DropdownMenuItem\">\nNew Tab <div className=\"RightSlot\">⌘+T</div>\n</DropdownMenu Item>\n<DropdownMenu Item className=\"DropdownMenuItem\">\nNew Window <div className=\"RightSlot\">⌘+N</div>\n</DropdownMenu Item>\n<DropdownMenu Item className=\"DropdownMenuItem\" disabled>\nNew Private Window <div className=\"RightSlot\">⇧+⌘+N</div>\n</DropdownMenu Item>\n<DropdownMenu Sub>\n<DropdownMenu SubTrigger className=\"DropdownMenuSubTrigger\">\nMore Tools\n<div className=\"RightSlot\">\n<ChevronRightIcon />\n</div>\n</DropdownMenu SubTrigger>\n<DropdownMenu Portal>\n<DropdownMenu SubContent\nclassName=\"DropdownMenuSubContent\"\nsideOffset={2}\nalignOffset={-5}\n>\n<DropdownMenu",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1265793,
      "relative_path": "documentation\\radix\\_primitives_docs_components_dropdown-menu.html",
      "source_type": "documentation"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 16
  },
  {
    "id": "67362798ef1a3c385486c5912d233638",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_dropdown-menu.html",
    "source_type": "documentation",
    "title": "Dropdown Menu – Radix Primitives",
    "content": "React useState(\"pedro\"); return ( <DropdownMenu Root> <DropdownMenu Trigger asChild> <button className=\"IconButton\" aria-label=\"Customise options\"> <HamburgerMenuIcon /> </button> </DropdownMenu Trigger> <DropdownMenu Portal> <DropdownMenu Content className=\"DropdownMenuContent\" sideOffset={5}> <DropdownMenu Item className=\"DropdownMenuItem\"> New Tab <div className=\"RightSlot\">⌘+T</div> </DropdownMenu Item> <DropdownMenu Item className=\"DropdownMenuItem\"> New Window <div className=\"RightSlot\">⌘+N</div> </DropdownMenu Item> <DropdownMenu Item className=\"DropdownMenuItem\" disabled> New Private Window <div className=\"RightSlot\">⇧+⌘+N</div> </DropdownMenu Item> <DropdownMenu Sub> <DropdownMenu SubTrigger className=\"DropdownMenuSubTrigger\"> More Tools <div className=\"RightSlot\"> <ChevronRightIcon /> </div> </DropdownMenu SubTrigger> <DropdownMenu Portal> <DropdownMenu SubContent className=\"DropdownMenuSubContent\" sideOffset={2} alignOffset={-5} > <DropdownMenuItem className=\"DropdownMenuItem\">\nSave Page As… <div className=\"RightSlot\">⌘+S</div>\n</DropdownMenu Item>\n<DropdownMenu Item className=\"DropdownMenuItem\">\nCreate Shortcut…\n</DropdownMenu Item>\n<DropdownMenu Item className=\"DropdownMenuItem\">\nName Window…\n</DropdownMenu Item>\n<DropdownMenu Separator className=\"DropdownMenu Separator\" />\n<DropdownMenu Item className=\"DropdownMenuItem\">\nDeveloper Tools\n</DropdownMenu Item>\n</DropdownMenu SubContent>\n</DropdownMenu Portal>\n</DropdownMenu Sub>\n<DropdownMenu Separator className=\"DropdownMenuSeparator\" />\n<DropdownMenu CheckboxItem\nclassName=\"DropdownMenuCheckboxItem\"\nchecked={bookmarksChecked}\nonCheckedChange={setBookmarksChecked}\n>\n<DropdownMenu ItemIndicator className=\"DropdownMenuItemIndicator\">\n<CheckIcon />\n</DropdownMenu ItemIndicator>\nShow Bookmarks <div className=\"RightSlot\">⌘+B</div>\n</DropdownMenu CheckboxItem>\n<DropdownMenu CheckboxItem\nclassName=\"DropdownMenuCheckboxItem\"\nchecked={urlsChecked}\nonCheckedChange={setUrlsChecked}\n>\n<DropdownMenu ItemIndicator className=\"DropdownMenuItemIndicator\">\n<CheckIcon />\n</DropdownMenu ItemIndicator>\nShow Full URLs\n</DropdownMenu CheckboxItem>\n<DropdownMenu",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1265793,
      "relative_path": "documentation\\radix\\_primitives_docs_components_dropdown-menu.html",
      "source_type": "documentation"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 16
  },
  {
    "id": "32b7f4e68f6ec4e0403bb92690929edb",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_dropdown-menu.html",
    "source_type": "documentation",
    "title": "Dropdown Menu – Radix Primitives",
    "content": "</DropdownMenu Item> <DropdownMenu Item className=\"DropdownMenuItem\"> Create Shortcut… </DropdownMenu Item> <DropdownMenu Item className=\"DropdownMenuItem\"> Name Window… </DropdownMenu Item> <DropdownMenu Separator className=\"DropdownMenu Separator\" /> <DropdownMenu Item className=\"DropdownMenuItem\"> Developer Tools </DropdownMenu Item> </DropdownMenu SubContent> </DropdownMenu Portal> </DropdownMenu Sub> <DropdownMenu Separator className=\"DropdownMenuSeparator\" /> <DropdownMenu CheckboxItem className=\"DropdownMenuCheckboxItem\" checked={bookmarksChecked} onCheckedChange={setBookmarksChecked} > <DropdownMenu ItemIndicator className=\"DropdownMenuItemIndicator\"> <CheckIcon /> </DropdownMenu ItemIndicator> Show Bookmarks <div className=\"RightSlot\">⌘+B</div> </DropdownMenu CheckboxItem> <DropdownMenu CheckboxItem className=\"DropdownMenuCheckboxItem\" checked={urlsChecked} onCheckedChange={setUrlsChecked} > <DropdownMenu ItemIndicator className=\"DropdownMenuItemIndicator\"> <CheckIcon /> </DropdownMenu ItemIndicator> Show Full URLs </DropdownMenu CheckboxItem> <DropdownMenuSeparator className=\"DropdownMenuSeparator\" />\n<DropdownMenu Label className=\"DropdownMenuLabel\">\nPeople\n</DropdownMenu Label>\n<DropdownMenu RadioGroup value={person} onValueChange={setPerson}>\n<DropdownMenu RadioItem\nclassName=\"DropdownMenuRadioItem\"\nvalue=\"pedro\"\n>\n<DropdownMenu ItemIndicator className=\"DropdownMenuItemIndicator\">\n<DotFilledIcon />\n</DropdownMenu ItemIndicator>\nPedro Duarte\n</DropdownMenu RadioItem>\n<DropdownMenu RadioItem\nclassName=\"DropdownMenuRadioItem\"\nvalue=\"colm\"\n>\n<DropdownMenu ItemIndicator className=\"DropdownMenuItemIndicator\">\n<DotFilledIcon />\n</DropdownMenu ItemIndicator>\nColm Tuite\n</DropdownMenu RadioItem>\n</DropdownMenu RadioGroup>\n<DropdownMenu Arrow className=\"DropdownMenuArrow\" />\n</DropdownMenu Content>\n</DropdownMenu Portal>\n</DropdownMenu Root>\n);\n};\nexport default DropdownMenuDemo;\nExpand code\nFeaturesCan be controlled or uncontrolled Supports submenus with configurable reading direction Supports items, labels, groups of items Supports checkable items (single or multiple) with optional indeterminate state Supports modal and non-modal modes Customize side, alignment, offsets, collision handling Optionally render a pointing arrow Focus is fully managed Full keyboard navigation Typeahead support Dismissing and layering behavior is highly customizable Component Reference LinksVersion: 2",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1265793,
      "relative_path": "documentation\\radix\\_primitives_docs_components_dropdown-menu.html",
      "source_type": "documentation"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 16
  },
  {
    "id": "28523c554238fdf2c9e50f3733185d4b",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_dropdown-menu.html",
    "source_type": "documentation",
    "title": "Dropdown Menu – Radix Primitives",
    "content": "</DropdownMenu Content> </DropdownMenu Portal> </DropdownMenu Root> ); }; export default DropdownMenuDemo; Expand code FeaturesCan be controlled or uncontrolled Supports submenus with configurable reading direction Supports items, labels, groups of items Supports checkable items (single or multiple) with optional indeterminate state Supports modal and non-modal modes Customize side, alignment, offsets, collision handling Optionally render a pointing arrow Focus is fully managed Full keyboard navigation Typeahead support Dismissing and layering behavior is highly customizable Component Reference LinksVersion: 21 15Size: 31 46 kBView sourceReport an issueARIA design pattern\nInstallation\nInstall the component from your command line npm install @radix-ui/react-dropdown-menu\nAnatomy\nImport all parts and piece them together import { DropdownMenu } from \"radix-ui\";\nexport default () => (\n<DropdownMenu Root>\n<DropdownMenu Trigger />\n<DropdownMenu Portal>\n<DropdownMenu Content>\n<DropdownMenu Label />\n<DropdownMenu Item />\n<DropdownMenu Group>\n<DropdownMenu Item />\n</DropdownMenu Group>\n<DropdownMenu CheckboxItem>\n<DropdownMenu ItemIndicator />\n</DropdownMenu CheckboxItem>\n<DropdownMenu RadioGroup>\n<DropdownMenu RadioItem>\n<DropdownMenu ItemIndicator />\n</DropdownMenu RadioItem>\n</DropdownMenu RadioGroup>\n<DropdownMenu Sub>\n<DropdownMenu SubTrigger />\n<DropdownMenu Portal>\n<DropdownMenu SubContent />\n</DropdownMenu Portal>\n</DropdownMenu Sub>\n<DropdownMenu Separator />\n<DropdownMenu Arrow />\n</DropdownMenu Content>\n</DropdownMenu Portal>\n</DropdownMenu Root>\n);\nAPI Reference\nRoot\nContains all the parts of a dropdown menu PropTypeDefaultdefaultOpenProp descriptionbooleanNo default valueopenProp descriptionbooleanNo default valueonOpenChangeProp descriptionfunctionSee full typeNo default valuemodalProp descriptionbooleantruedirProp descriptionenumSee full typeNo default value\nTrigger\nThe button that toggles the dropdown menu By default, the DropdownMenu Content will position itself against the trigger PropTypeDefaultasChildProp descriptionbooleanfalse\nData attributeValues[data-state]\"open\"  | \"closed\" [data-disabled]Present when disabled\nPortal\nWhen used, portals the content part into the body PropTypeDefaultforceMountProp descriptionbooleanNo default valuecontainerProp descriptionHTMLElementdocument body\nContent\nThe component that pops out when the dropdown menu is open",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1265793,
      "relative_path": "documentation\\radix\\_primitives_docs_components_dropdown-menu.html",
      "source_type": "documentation"
    },
    "token_count": 480,
    "chunk_index": 3,
    "total_chunks": 16
  },
  {
    "id": "1adb0fc4dd3af94b2e9ca474f331e23a",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_dropdown-menu.html",
    "source_type": "documentation",
    "title": "Dropdown Menu – Radix Primitives",
    "content": "dropdown menu PropTypeDefaultdefaultOpenProp descriptionbooleanNo default valueopenProp descriptionbooleanNo default valueonOpenChangeProp descriptionfunctionSee full typeNo default valuemodalProp descriptionbooleantruedirProp descriptionenumSee full typeNo default value Trigger The button that toggles the dropdown menu By default, the DropdownMenu Content will position itself against the trigger PropTypeDefaultasChildProp descriptionbooleanfalse Data attributeValues[data-state]\"open\" | \"closed\" [data-disabled]Present when disabled Portal When used, portals the content part into the body PropTypeDefaultforceMountProp descriptionbooleanNo default valuecontainerProp descriptionHTMLElementdocument body Content The component that pops out when the dropdown menu is openPropTypeDefaultasChildProp descriptionbooleanfalseloopProp descriptionbooleanfalseonCloseAutoFocusProp descriptionfunctionSee full typeNo default valueonEscapeKeyDownProp descriptionfunctionSee full typeNo default valueonPointerDownOutsideProp descriptionfunctionSee full typeNo default valueonFocusOutsideProp descriptionfunctionSee full typeNo default valueonInteractOutsideProp descriptionfunctionSee full typeNo default valueforceMountProp descriptionbooleanNo default valuesideProp descriptionenumSee full type\"bottom\"sideOffsetProp descriptionnumber0alignProp descriptionenumSee full type\"center\"alignOffsetProp descriptionnumber0avoidCollisionsProp descriptionbooleantruecollisionBoundaryProp descriptionBoundarySee full type[]collisionPaddingProp descriptionnumber | PaddingSee full type0arrowPaddingProp descriptionnumber0stickyProp descriptionenumSee full type\"partial\"hideWhenDetachedProp descriptionbooleanfalse\nData attributeValues[data-state]\"open\"  | \"closed\" [data-side]\"left\"  | \"right\"  | \"bottom\"  | \"top\" [data-align]\"start\"  | \"end\"  | \"center\" [data-orientation]\"vertical\"  | \"horizontal\"\nCSS VariableDescription--radix-dropdown-menu-content-transform-originThe transform-origin computed from the content and arrow positions/offsets--radix-dropdown-menu-content-available-widthThe remaining width between the trigger and the boundary edge--radix-dropdown-menu-content-available-heightThe remaining height between the trigger and the boundary edge--radix-dropdown-menu-trigger-widthThe width of the trigger--radix-dropdown-menu-trigger-heightThe height of the trigger\nArrow\nAn optional arrow element to render alongside the dropdown menu This can be used to help visually link the trigger with the DropdownMenu Content Must be rendered inside DropdownMenu Content",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1265793,
      "relative_path": "documentation\\radix\\_primitives_docs_components_dropdown-menu.html",
      "source_type": "documentation"
    },
    "token_count": 491,
    "chunk_index": 4,
    "total_chunks": 16
  },
  {
    "id": "fb35860e8c14be2d172367e168c9c35a",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_dropdown-menu.html",
    "source_type": "documentation",
    "title": "Dropdown Menu – Radix Primitives",
    "content": "\"top\" [data-align]\"start\" | \"end\" | \"center\" [data-orientation]\"vertical\" | \"horizontal\" CSS VariableDescription--radix-dropdown-menu-content-transform-originThe transform-origin computed from the content and arrow positions/offsets--radix-dropdown-menu-content-available-widthThe remaining width between the trigger and the boundary edge--radix-dropdown-menu-content-available-heightThe remaining height between the trigger and the boundary edge--radix-dropdown-menu-trigger-widthThe width of the trigger--radix-dropdown-menu-trigger-heightThe height of the trigger Arrow An optional arrow element to render alongside the dropdown menu This can be used to help visually link the trigger with the DropdownMenu Content Must be rendered inside DropdownMenu ContentPropTypeDefaultasChildProp descriptionbooleanfalsewidthProp descriptionnumber10heightProp descriptionnumber5\nItem\nThe component that contains the dropdown menu items PropTypeDefaultasChildProp descriptionbooleanfalsedisabledProp descriptionbooleanNo default valueonSelectProp descriptionfunctionSee full typeNo default valuetextValueProp descriptionstringNo default value\nData attributeValues[data-orientation]\"vertical\"  | \"horizontal\" [data-highlighted]Present when highlighted[data-disabled]Present when disabled\nGroup\nUsed to group multiple DropdownMenu Items PropTypeDefaultasChildProp descriptionbooleanfalse\nLabel\nUsed to render a label It won't be focusable using arrow keys PropTypeDefaultasChildProp descriptionbooleanfalse\nCheckboxItem\nAn item that can be controlled and rendered like a checkbox PropTypeDefaultasChildProp descriptionbooleanfalsecheckedProp descriptionboolean | 'indeterminate'No default valueonCheckedChangeProp descriptionfunctionSee full typeNo default valuedisabledProp descriptionbooleanNo default valueonSelectProp descriptionfunctionSee full typeNo default valuetextValueProp descriptionstringNo default value\nData attributeValues[data-state]\"checked\"  | \"unchecked\"  | \"indeterminate\" [data-highlighted]Present when highlighted[data-disabled]Present when disabled\nRadioGroup\nUsed to group multiple DropdownMenu RadioItems PropTypeDefaultasChildProp descriptionbooleanfalsevalueProp descriptionstringNo default valueonValueChangeProp descriptionfunctionSee full typeNo default value\nRadioItem\nAn item that can be controlled and rendered like a radio",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1265793,
      "relative_path": "documentation\\radix\\_primitives_docs_components_dropdown-menu.html",
      "source_type": "documentation"
    },
    "token_count": 452,
    "chunk_index": 5,
    "total_chunks": 16
  },
  {
    "id": "de6027482c4987e723ef6b478ca25ff7",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_dropdown-menu.html",
    "source_type": "documentation",
    "title": "Dropdown Menu – Radix Primitives",
    "content": "descriptionbooleanfalse CheckboxItem An item that can be controlled and rendered like a checkbox PropTypeDefaultasChildProp descriptionbooleanfalsecheckedProp descriptionboolean | 'indeterminate'No default valueonCheckedChangeProp descriptionfunctionSee full typeNo default valuedisabledProp descriptionbooleanNo default valueonSelectProp descriptionfunctionSee full typeNo default valuetextValueProp descriptionstringNo default value Data attributeValues[data-state]\"checked\" | \"unchecked\" | \"indeterminate\" [data-highlighted]Present when highlighted[data-disabled]Present when disabled RadioGroup Used to group multiple DropdownMenu RadioItems PropTypeDefaultasChildProp descriptionbooleanfalsevalueProp descriptionstringNo default valueonValueChangeProp descriptionfunctionSee full typeNo default value RadioItem An item that can be controlled and rendered like a radioPropTypeDefaultasChildProp descriptionbooleanfalsevalue*Prop descriptionstringNo default valuedisabledProp descriptionbooleanNo default valueonSelectProp descriptionfunctionSee full typeNo default valuetextValueProp descriptionstringNo default value\nData attributeValues[data-state]\"checked\"  | \"unchecked\"  | \"indeterminate\" [data-highlighted]Present when highlighted[data-disabled]Present when disabled\nItemIndicator\nRenders when the parent DropdownMenu CheckboxItem or DropdownMenu RadioItem is checked You can style this element directly, or you can use it as a wrapper to put an icon into, or both PropTypeDefaultasChildProp descriptionbooleanfalseforceMountProp descriptionbooleanNo default value\nData attributeValues[data-state]\"checked\"  | \"unchecked\"  | \"indeterminate\"\nSeparator\nUsed to visually separate items in the dropdown menu PropTypeDefaultasChildProp descriptionbooleanfalse\nSub\nContains all the parts of a submenu PropTypeDefaultdefaultOpenProp descriptionbooleanNo default valueopenProp descriptionbooleanNo default valueonOpenChangeProp descriptionfunctionSee full typeNo default value\nSubTrigger\nAn item that opens a submenu Must be rendered inside DropdownMenu Sub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1265793,
      "relative_path": "documentation\\radix\\_primitives_docs_components_dropdown-menu.html",
      "source_type": "documentation"
    },
    "token_count": 395,
    "chunk_index": 6,
    "total_chunks": 16
  },
  {
    "id": "2d58cebaa14028e4479f6efad144a17a",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_dropdown-menu.html",
    "source_type": "documentation",
    "title": "Dropdown Menu – Radix Primitives",
    "content": "can style this element directly, or you can use it as a wrapper to put an icon into, or both PropTypeDefaultasChildProp descriptionbooleanfalseforceMountProp descriptionbooleanNo default value Data attributeValues[data-state]\"checked\" | \"unchecked\" | \"indeterminate\" Separator Used to visually separate items in the dropdown menu PropTypeDefaultasChildProp descriptionbooleanfalse Sub Contains all the parts of a submenu PropTypeDefaultdefaultOpenProp descriptionbooleanNo default valueopenProp descriptionbooleanNo default valueonOpenChangeProp descriptionfunctionSee full typeNo default value SubTrigger An item that opens a submenu Must be rendered inside DropdownMenu SubPropTypeDefaultasChildProp descriptionbooleanfalsedisabledProp descriptionbooleanNo default valuetextValueProp descriptionstringNo default value\nData attributeValues[data-state]\"open\"  | \"closed\" [data-highlighted]Present when highlighted[data-disabled]Present when disabled\nCSS VariableDescription--radix-dropdown-menu-content-transform-originThe transform-origin computed from the content and arrow positions/offsets--radix-dropdown-menu-content-available-widthThe remaining width between the trigger and the boundary edge--radix-dropdown-menu-content-available-heightThe remaining height between the trigger and the boundary edge--radix-dropdown-menu-trigger-widthThe width of the trigger--radix-dropdown-menu-trigger-heightThe height of the trigger\nSubContent\nThe component that pops out when a submenu is open Must be rendered inside DropdownMenu Sub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1265793,
      "relative_path": "documentation\\radix\\_primitives_docs_components_dropdown-menu.html",
      "source_type": "documentation"
    },
    "token_count": 289,
    "chunk_index": 7,
    "total_chunks": 16
  },
  {
    "id": "44d22eaac3e0d78c602be66dfac1ed18",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_dropdown-menu.html",
    "source_type": "documentation",
    "title": "Dropdown Menu – Radix Primitives",
    "content": "submenu Must be rendered inside DropdownMenu SubPropTypeDefaultasChildProp descriptionbooleanfalsedisabledProp descriptionbooleanNo default valuetextValueProp descriptionstringNo default value Data attributeValues[data-state]\"open\" | \"closed\" [data-highlighted]Present when highlighted[data-disabled]Present when disabled CSS VariableDescription--radix-dropdown-menu-content-transform-originThe transform-origin computed from the content and arrow positions/offsets--radix-dropdown-menu-content-available-widthThe remaining width between the trigger and the boundary edge--radix-dropdown-menu-content-available-heightThe remaining height between the trigger and the boundary edge--radix-dropdown-menu-trigger-widthThe width of the trigger--radix-dropdown-menu-trigger-heightThe height of the trigger SubContent The component that pops out when a submenu is open Must be rendered inside DropdownMenu SubPropTypeDefaultasChildProp descriptionbooleanfalseloopProp descriptionbooleanfalseonEscapeKeyDownProp descriptionfunctionSee full typeNo default valueonPointerDownOutsideProp descriptionfunctionSee full typeNo default valueonFocusOutsideProp descriptionfunctionSee full typeNo default valueonInteractOutsideProp descriptionfunctionSee full typeNo default valueforceMountProp descriptionbooleanNo default valuesideOffsetProp descriptionnumber0alignOffsetProp descriptionnumber0avoidCollisionsProp descriptionbooleantruecollisionBoundaryProp descriptionBoundarySee full type[]collisionPaddingProp descriptionnumber | PaddingSee full type0arrowPaddingProp descriptionnumber0stickyProp descriptionenumSee full type\"partial\"hideWhenDetachedProp descriptionbooleanfalse\nData attributeValues[data-state]\"open\"  | \"closed\" [data-side]\"left\"  | \"right\"  | \"bottom\"  | \"top\" [data-align]\"start\"  | \"end\"  | \"center\" [data-orientation]\"vertical\"  | \"horizontal\"\nExamples\nWith submenus\nYou can create submenus by using DropdownMenu Sub in combination with its parts <DropdownMenu Root>\n<DropdownMenu Trigger>…</DropdownMenu Trigger>\n<DropdownMenu Portal>\n<DropdownMenu Content>\n<DropdownMenu Item>…</DropdownMenu Item>\n<DropdownMenu Item>…</DropdownMenu Item>\n<DropdownMenu Separator />\n<DropdownMenu Sub>\n<DropdownMenu SubTrigger>Sub menu →</DropdownMenu SubTrigger>\n<DropdownMenu Portal>\n<DropdownMenu SubContent>\n<DropdownMenu Item>Sub menu item</DropdownMenu Item>\n<DropdownMenu Item>Sub menu item</DropdownMenu Item>\n<DropdownMenu",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1265793,
      "relative_path": "documentation\\radix\\_primitives_docs_components_dropdown-menu.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 8,
    "total_chunks": 16
  },
  {
    "id": "234793b680416af9a0b9a5b776c5b8d7",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_dropdown-menu.html",
    "source_type": "documentation",
    "title": "Dropdown Menu – Radix Primitives",
    "content": "descriptionbooleanfalse Data attributeValues[data-state]\"open\" | \"closed\" [data-side]\"left\" | \"right\" | \"bottom\" | \"top\" [data-align]\"start\" | \"end\" | \"center\" [data-orientation]\"vertical\" | \"horizontal\" Examples With submenus You can create submenus by using DropdownMenu Sub in combination with its parts <DropdownMenu Root> <DropdownMenu Trigger>…</DropdownMenu Trigger> <DropdownMenu Portal> <DropdownMenu Content> <DropdownMenu Item>…</DropdownMenu Item> <DropdownMenu Item>…</DropdownMenu Item> <DropdownMenu Separator /> <DropdownMenu Sub> <DropdownMenu SubTrigger>Sub menu →</DropdownMenu SubTrigger> <DropdownMenu Portal> <DropdownMenu SubContent> <DropdownMenu Item>Sub menu item</DropdownMenu Item> <DropdownMenu Item>Sub menu item</DropdownMenu Item> <DropdownMenuArrow />\n</DropdownMenu SubContent>\n</DropdownMenu Portal>\n</DropdownMenu Sub>\n<DropdownMenu Separator />\n<DropdownMenu Item>…</DropdownMenu Item>\n</DropdownMenu Content>\n</DropdownMenu Portal>\n</DropdownMenu Root>\nWith disabled items\nYou can add special styles to disabled items via the data-disabled attribute // index jsx\nimport { DropdownMenu } from \"radix-ui\";\nimport \" /styles css\";\nexport default () => (\n<DropdownMenu Root>\n<DropdownMenu Trigger>…</DropdownMenu Trigger>\n<DropdownMenu Portal>\n<DropdownMenu Content>\n<DropdownMenu Item className=\"DropdownMenuItem\" disabled>\n…\n</DropdownMenu Item>\n<DropdownMenu Item className=\"DropdownMenuItem\">…</DropdownMenu Item>\n</DropdownMenu Content>\n</DropdownMenu Portal>\n</DropdownMenu Root>\n);\n/* styles css */ DropdownMenuItem[data-disabled] {\ncolor: gainsboro;\n}\nWith separators\nUse the Separator part to add a separator between items <DropdownMenu Root>\n<DropdownMenu Trigger>…</DropdownMenu Trigger>\n<DropdownMenu Portal>\n<DropdownMenu Content>\n<DropdownMenu Item>…</DropdownMenu Item>\n<DropdownMenu Separator />\n<DropdownMenu Item>…</DropdownMenu Item>\n<DropdownMenu Separator />\n<DropdownMenu Item>…</DropdownMenu Item>\n</DropdownMenu Content>\n</DropdownMenu Portal>\n</DropdownMenu Root>\nWith labels\nUse the Label part to help label a section <DropdownMenu Root>\n<DropdownMenu Trigger>…</DropdownMenu Trigger>\n<DropdownMenu",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1265793,
      "relative_path": "documentation\\radix\\_primitives_docs_components_dropdown-menu.html",
      "source_type": "documentation"
    },
    "token_count": 500,
    "chunk_index": 9,
    "total_chunks": 16
  },
  {
    "id": "b97aaf8a39a0a6e48807dd3c5da39bfd",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_dropdown-menu.html",
    "source_type": "documentation",
    "title": "Dropdown Menu – Radix Primitives",
    "content": "Item> </DropdownMenu Content> </DropdownMenu Portal> </DropdownMenu Root> ); /* styles css */ DropdownMenuItem[data-disabled] { color: gainsboro; } With separators Use the Separator part to add a separator between items <DropdownMenu Root> <DropdownMenu Trigger>…</DropdownMenu Trigger> <DropdownMenu Portal> <DropdownMenu Content> <DropdownMenu Item>…</DropdownMenu Item> <DropdownMenu Separator /> <DropdownMenu Item>…</DropdownMenu Item> <DropdownMenu Separator /> <DropdownMenu Item>…</DropdownMenu Item> </DropdownMenu Content> </DropdownMenu Portal> </DropdownMenu Root> With labels Use the Label part to help label a section <DropdownMenu Root> <DropdownMenu Trigger>…</DropdownMenu Trigger> <DropdownMenuPortal>\n<DropdownMenu Content>\n<DropdownMenu Label>Label</DropdownMenu Label>\n<DropdownMenu Item>…</DropdownMenu Item>\n<DropdownMenu Item>…</DropdownMenu Item>\n<DropdownMenu Item>…</DropdownMenu Item>\n</DropdownMenu Content>\n</DropdownMenu Portal>\n</DropdownMenu Root>\nWith checkbox items\nUse the CheckboxItem part to add an item that can be checked import * as React from \"react\";\nimport { CheckIcon } from \"@radix-ui/react-icons\";\nimport { DropdownMenu } from \"radix-ui\";\nexport default () => {\nconst [checked, setChecked] = React useState(true);\nreturn (\n<DropdownMenu Root>\n<DropdownMenu Trigger>…</DropdownMenu Trigger>\n<DropdownMenu Portal>\n<DropdownMenu Content>\n<DropdownMenu Item>…</DropdownMenu Item>\n<DropdownMenu Item>…</DropdownMenu Item>\n<DropdownMenu Separator />\n<DropdownMenu CheckboxItem\nchecked={checked}\nonCheckedChange={setChecked}\n>\n<DropdownMenu ItemIndicator>\n<CheckIcon />\n</DropdownMenu ItemIndicator>\nCheckbox item\n</DropdownMenu CheckboxItem>\n</DropdownMenu Content>\n</DropdownMenu Portal>\n</DropdownMenu Root>\n);\n};\nWith radio items\nUse the RadioGroup and RadioItem parts to add an item that can be checked amongst others import * as React from \"react\";\nimport { CheckIcon } from \"@radix-ui/react-icons\";\nimport { DropdownMenu } from \"radix-ui\";\nexport default () => {\nconst [color, setColor] = React useState(\"blue\");\nreturn (\n<DropdownMenu Root>\n<DropdownMenu Trigger>…</DropdownMenu Trigger>\n<DropdownMenu",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1265793,
      "relative_path": "documentation\\radix\\_primitives_docs_components_dropdown-menu.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 10,
    "total_chunks": 16
  },
  {
    "id": "f3189deef77114c4f6a8adec9cb0b12d",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_dropdown-menu.html",
    "source_type": "documentation",
    "title": "Dropdown Menu – Radix Primitives",
    "content": "onCheckedChange={setChecked} > <DropdownMenu ItemIndicator> <CheckIcon /> </DropdownMenu ItemIndicator> Checkbox item </DropdownMenu CheckboxItem> </DropdownMenu Content> </DropdownMenu Portal> </DropdownMenu Root> ); }; With radio items Use the RadioGroup and RadioItem parts to add an item that can be checked amongst others import * as React from \"react\"; import { CheckIcon } from \"@radix-ui/react-icons\"; import { DropdownMenu } from \"radix-ui\"; export default () => { const [color, setColor] = React useState(\"blue\"); return ( <DropdownMenu Root> <DropdownMenu Trigger>…</DropdownMenu Trigger> <DropdownMenuPortal>\n<DropdownMenu Content>\n<DropdownMenu RadioGroup value={color} onValueChange={setColor}>\n<DropdownMenu RadioItem value=\"red\">\n<DropdownMenu ItemIndicator>\n<CheckIcon />\n</DropdownMenu ItemIndicator>\nRed\n</DropdownMenu RadioItem>\n<DropdownMenu RadioItem value=\"blue\">\n<DropdownMenu ItemIndicator>\n<CheckIcon />\n</DropdownMenu ItemIndicator>\nBlue\n</DropdownMenu RadioItem>\n<DropdownMenu RadioItem value=\"green\">\n<DropdownMenu ItemIndicator>\n<CheckIcon />\n</DropdownMenu ItemIndicator>\nGreen\n</DropdownMenu RadioItem>\n</DropdownMenu RadioGroup>\n</DropdownMenu Content>\n</DropdownMenu Portal>\n</DropdownMenu Root>\n);\n};\nWith complex items\nYou can add extra decorative elements in the Item parts, such as images import { DropdownMenu } from \"radix-ui\";\nexport default () => (\n<DropdownMenu Root>\n<DropdownMenu Trigger>…</DropdownMenu Trigger>\n<DropdownMenu Portal>\n<DropdownMenu Content>\n<DropdownMenu Item>\n<img src=\"…\" />\nAdolfo Hess\n</DropdownMenu Item>\n<DropdownMenu Item>\n<img src=\"…\" />\nMiyah Myles\n</DropdownMenu Item>\n</DropdownMenu Content>\n</DropdownMenu Portal>\n</DropdownMenu Root>\n);\nConstrain the content/sub-content size\nYou may want to constrain the width of the content (or sub-content) so that it matches the trigger (or sub-trigger) width You may also want to constrain its height to not exceed the viewport We expose several CSS custom properties such as --radix-dropdown-menu-trigger-width and --radix-dropdown-menu-content-available-height to support this Use them to constrain the content dimensions // index jsx\nimport { DropdownMenu } from \"radix-ui\";\nimport \" /styles",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1265793,
      "relative_path": "documentation\\radix\\_primitives_docs_components_dropdown-menu.html",
      "source_type": "documentation"
    },
    "token_count": 501,
    "chunk_index": 11,
    "total_chunks": 16
  },
  {
    "id": "469c494d9ce7956ff2ed010057c5ff6d",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_dropdown-menu.html",
    "source_type": "documentation",
    "title": "Dropdown Menu – Radix Primitives",
    "content": "</DropdownMenu Portal> </DropdownMenu Root> ); Constrain the content/sub-content size You may want to constrain the width of the content (or sub-content) so that it matches the trigger (or sub-trigger) width You may also want to constrain its height to not exceed the viewport We expose several CSS custom properties such as --radix-dropdown-menu-trigger-width and --radix-dropdown-menu-content-available-height to support this Use them to constrain the content dimensions // index jsx import { DropdownMenu } from \"radix-ui\"; import \" /stylescss\";\nexport default () => (\n<DropdownMenu Root>\n<DropdownMenu Trigger>…</DropdownMenu Trigger>\n<DropdownMenu Portal>\n<DropdownMenu Content className=\"DropdownMenuContent\" sideOffset={5}>\n…\n</DropdownMenu Content>\n</DropdownMenu Portal>\n</DropdownMenu Root>\n);\n/* styles css */ DropdownMenuContent {\nwidth: var(--radix-dropdown-menu-trigger-width);\nmax-height: var(--radix-dropdown-menu-content-available-height);\n}\nOrigin-aware animations\nWe expose a CSS custom property --radix-dropdown-menu-content-transform-origin Use it to animate the content from its computed origin based on side, sideOffset, align, alignOffset and any collisions // index jsx\nimport { DropdownMenu } from \"radix-ui\";\nimport \" /styles css\";\nexport default () => (\n<DropdownMenu Root>\n<DropdownMenu Trigger>…</DropdownMenu Trigger>\n<DropdownMenu Portal>\n<DropdownMenu Content className=\"DropdownMenuContent\">\n…\n</DropdownMenu Content>\n</DropdownMenu Portal>\n</DropdownMenu Root>\n);\n/* styles css */ DropdownMenuContent {\ntransform-origin: var(--radix-dropdown-menu-content-transform-origin);\nanimation: scaleIn 0 5s ease-out;\n}\n@keyframes scaleIn {\nfrom {\nopacity: 0;\ntransform: scale(0);\n}\nto {\nopacity: 1;\ntransform: scale(1);\n}\n}\nCollision-aware animations\nWe expose data-side and data-align attributes Their values will change at runtime to reflect collisions Use them to create collision and direction-aware animations // index jsx\nimport { DropdownMenu } from \"radix-ui\";\nimport \" /styles css\";\nexport default () => (\n<DropdownMenu Root>\n<DropdownMenu Trigger>…</DropdownMenu Trigger>\n<DropdownMenu Portal>\n<DropdownMenu Content className=\"DropdownMenuContent\">\n…\n</DropdownMenu Content>\n</DropdownMenu Portal>\n</DropdownMenu Root>\n);\n/* styles css */",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1265793,
      "relative_path": "documentation\\radix\\_primitives_docs_components_dropdown-menu.html",
      "source_type": "documentation"
    },
    "token_count": 496,
    "chunk_index": 12,
    "total_chunks": 16
  },
  {
    "id": "038ee6c0b621b06e5255049bb803da09",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_dropdown-menu.html",
    "source_type": "documentation",
    "title": "Dropdown Menu – Radix Primitives",
    "content": "transform: scale(0); } to { opacity: 1; transform: scale(1); } } Collision-aware animations We expose data-side and data-align attributes Their values will change at runtime to reflect collisions Use them to create collision and direction-aware animations // index jsx import { DropdownMenu } from \"radix-ui\"; import \" /styles css\"; export default () => ( <DropdownMenu Root> <DropdownMenu Trigger>…</DropdownMenu Trigger> <DropdownMenu Portal> <DropdownMenu Content className=\"DropdownMenuContent\"> … </DropdownMenu Content> </DropdownMenu Portal> </DropdownMenu Root> ); /* styles css */DropdownMenuContent {\nanimation-duration: 0 6s;\nanimation-timing-function: cubic-bezier(0 16, 1, 0 3, 1);\n} DropdownMenuContent[data-side=\"top\"] {\nanimation-name: slideUp;\n} DropdownMenuContent[data-side=\"bottom\"] {\nanimation-name: slideDown;\n}\n@keyframes slideUp {\nfrom {\nopacity: 0;\ntransform: translateY(10px);\n}\nto {\nopacity: 1;\ntransform: translateY(0);\n}\n}\n@keyframes slideDown {\nfrom {\nopacity: 0;\ntransform: translateY(-10px);\n}\nto {\nopacity: 1;\ntransform: translateY(0);\n}\n}\nAccessibility\nAdheres to the Menu Button WAI-ARIA design pattern and uses roving tabindex to manage focus movement among menu items Keyboard Interactions\nKeyDescriptionSpaceWhen focus is on DropdownMenu Trigger, opens the dropdown menu and focuses the first item When focus is on an item, activates the focused item EnterWhen focus is on DropdownMenu Trigger, opens the dropdown menu and focuses the first item When focus is on an item, activates the focused item ArrowDownWhen focus is on DropdownMenu Trigger, opens the dropdown menu When focus is on an item, moves focus to the next item ArrowUpWhen focus is on an item, moves focus to the previous item ArrowRightArrowLeftWhen focus is on DropdownMenu SubTrigger, opens or closes the submenu depending on reading direction EscCloses the dropdown menu and moves focus to DropdownMenu Trigger Custom APIs\nCreate your own API by abstracting the primitive parts into your own component Abstract the arrow and item indicators\nThis example abstracts the DropdownMenu Arrow and DropdownMenu ItemIndicator parts It also wraps implementation details for CheckboxItem and RadioItem",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1265793,
      "relative_path": "documentation\\radix\\_primitives_docs_components_dropdown-menu.html",
      "source_type": "documentation"
    },
    "token_count": 488,
    "chunk_index": 13,
    "total_chunks": 16
  },
  {
    "id": "bddc8401d68ad13d21d56a2536764231",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_dropdown-menu.html",
    "source_type": "documentation",
    "title": "Dropdown Menu – Radix Primitives",
    "content": "focus is on an item, moves focus to the previous item ArrowRightArrowLeftWhen focus is on DropdownMenu SubTrigger, opens or closes the submenu depending on reading direction EscCloses the dropdown menu and moves focus to DropdownMenu Trigger Custom APIs Create your own API by abstracting the primitive parts into your own component Abstract the arrow and item indicators This example abstracts the DropdownMenu Arrow and DropdownMenu ItemIndicator parts It also wraps implementation details for CheckboxItem and RadioItemUsage\nimport {\nDropdownMenu,\nDropdownMenuTrigger,\nDropdownMenuContent,\nDropdownMenuLabel,\nDropdownMenuItem,\nDropdownMenuGroup,\nDropdownMenuCheckboxItem,\nDropdownMenuRadioGroup,\nDropdownMenuRadioItem,\nDropdownMenuSeparator,\n} from \" /your-dropdown-menu\";\nexport default () => (\n<DropdownMenu>\n<DropdownMenuTrigger>DropdownMenu trigger</DropdownMenuTrigger>\n<DropdownMenuContent>\n<DropdownMenuItem>Item</DropdownMenuItem>\n<DropdownMenuLabel>Label</DropdownMenuLabel>\n<DropdownMenuGroup>Group</DropdownMenuGroup>\n<DropdownMenuCheckboxItem>CheckboxItem</DropdownMenuCheckboxItem>\n<DropdownMenuSeparator>Separator</DropdownMenuSeparator>\n<DropdownMenuRadioGroup>\n<DropdownMenuRadioItem>RadioItem</DropdownMenuRadioItem>\n<DropdownMenuRadioItem>RadioItem</DropdownMenuRadioItem>\n</DropdownMenuRadioGroup>\n</DropdownMenuContent>\n</DropdownMenu>\n);\nImplementation\n// your-dropdown-menu jsx\nimport * as React from \"react\";\nimport { DropdownMenu as DropdownMenuPrimitive } from \"radix-ui\";\nimport { CheckIcon, DividerHorizontalIcon } from \"@radix-ui/react-icons\";\nexport const DropdownMenu = DropdownMenuPrimitive Root;\nexport const DropdownMenuTrigger = DropdownMenuPrimitive Trigger;\nexport const DropdownMenuContent = React forwardRef(\n({ children, props }, forwardedRef) => {\nreturn (\n<DropdownMenuPrimitive Portal>\n<DropdownMenuPrimitive Content { props} ref={forwardedRef}>\n{children}\n<DropdownMenuPrimitive Arrow />\n</DropdownMenuPrimitive Content>\n</DropdownMenuPrimitive Portal>\n);\n},\n);\nexport const DropdownMenuLabel = DropdownMenuPrimitive Label;\nexport const DropdownMenuItem = DropdownMenuPrimitive Item;\nexport const DropdownMenuGroup = DropdownMenuPrimitive Group;\nexport const DropdownMenuCheckboxItem = React forwardRef(\n({ children, props }, forwardedRef) => {\nreturn (\n<DropdownMenuPrimitive CheckboxItem { props} ref={forwardedRef}>\n{children}\n<DropdownMenuPrimitive ItemIndicator>\n{props",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1265793,
      "relative_path": "documentation\\radix\\_primitives_docs_components_dropdown-menu.html",
      "source_type": "documentation"
    },
    "token_count": 497,
    "chunk_index": 14,
    "total_chunks": 16
  },
  {
    "id": "95864715aa0fae8adcbea779130b4ea7",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_dropdown-menu.html",
    "source_type": "documentation",
    "title": "Dropdown Menu – Radix Primitives",
    "content": "Trigger; export const DropdownMenuContent = React forwardRef( ({ children, props }, forwardedRef) => { return ( <DropdownMenuPrimitive Portal> <DropdownMenuPrimitive Content { props} ref={forwardedRef}> {children} <DropdownMenuPrimitive Arrow /> </DropdownMenuPrimitive Content> </DropdownMenuPrimitive Portal> ); }, ); export const DropdownMenuLabel = DropdownMenuPrimitive Label; export const DropdownMenuItem = DropdownMenuPrimitive Item; export const DropdownMenuGroup = DropdownMenuPrimitive Group; export const DropdownMenuCheckboxItem = React forwardRef( ({ children, props }, forwardedRef) => { return ( <DropdownMenuPrimitive CheckboxItem { props} ref={forwardedRef}> {children} <DropdownMenuPrimitive ItemIndicator> {propschecked === \"indeterminate\" && <DividerHorizontalIcon />}\n{props checked === true && <CheckIcon />}\n</DropdownMenuPrimitive ItemIndicator>\n</DropdownMenuPrimitive CheckboxItem>\n);\n},\n);\nexport const DropdownMenuRadioGroup = DropdownMenuPrimitive RadioGroup;\nexport const DropdownMenuRadioItem = React forwardRef(\n({ children, props }, forwardedRef) => {\nreturn (\n<DropdownMenuPrimitive RadioItem { props} ref={forwardedRef}>\n{children}\n<DropdownMenuPrimitive ItemIndicator>\n<CheckIcon />\n</DropdownMenuPrimitive ItemIndicator>\n</DropdownMenuPrimitive RadioItem>\n);\n},\n);\nexport const DropdownMenuSeparator = DropdownMenuPrimitive Separator;\nQuick navPreviousDialogNextFormEdit this page on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1265793,
      "relative_path": "documentation\\radix\\_primitives_docs_components_dropdown-menu.html",
      "source_type": "documentation"
    },
    "token_count": 293,
    "chunk_index": 15,
    "total_chunks": 16
  },
  {
    "id": "d633d3aac27319cadff140e273e9494e",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_one-time-password-field.html",
    "source_type": "documentation",
    "title": "One-Time Password Field – Radix Primitives",
    "content": "One-Time Password Field – Radix PrimitivesRadix HomepageMade by WorkOSRadix HomepageMade by WorkOSThemesThemesPrimitivesPrimitivesIconsIconsColorsColorsDocumentationCase studiesBlogSearch/OverviewIntroductionGetting startedAccessibilityReleasesGuidesStylingAnimationCompositionServer-side renderingComponentsAccordionAlert DialogAspect RatioAvatarCheckboxCollapsibleContext MenuDialogDropdown MenuFormPreviewHover CardLabelMenubarNavigation MenuOne-Time Password FieldPreviewPassword Toggle FieldPreviewPopoverProgressRadio GroupScroll AreaSelectSeparatorSliderSwitchTabsToastToggleToggle GroupToolbarTooltipUtilitiesAccessible IconDirection ProviderPortalSlotVisually HiddenComponentsOne-Time Password Field\nA group of single-character text inputs to handle one-time password\nverification index jsxindex jsxstyles cssstyles cssimport * as React from \"react\";\nimport { unstable_OneTimePasswordField as OneTimePasswordField } from \"radix-ui\";\nconst OneTimePasswordFieldDemo = () => (\n<OneTimePasswordField Root className=\"OTPRoot\">\n<OneTimePasswordField Input className=\"OTPInput\" />\n<OneTimePasswordField Input className=\"OTPInput\" />\n<OneTimePasswordField Input className=\"OTPInput\" />\n<OneTimePasswordField Input className=\"OTPInput\" />\n<OneTimePasswordField Input className=\"OTPInput\" />\n<OneTimePasswordField Input className=\"OTPInput\" />\n<OneTimePasswordField HiddenInput />\n</OneTimePasswordField Root>\n);\nexport default OneTimePasswordFieldDemo;\nExpand code\nFeaturesKeyboard navigation mimicking the behavior of a single input fieldOverriding values on pastePassword manager autofill supportInput validation for numeric and alphanumeric valuesAuto-submit on completionHidden input to provide a single value to form dataComponent Reference LinksVersion: 0 1 7Size: 11 5 kBView sourceReport an issue\nAnatomy\nImport all parts and piece them together import { unstable_OneTimePasswordField as OneTimePasswordField } from \"radix-ui\";\nexport default () => (\n<OneTimePasswordField Root>\n{/* one Input for each character of the value */}\n<OneTimePasswordField Input />\n{/* single HiddenInput to store the full value */}\n<OneTimePasswordField HiddenInput />\n</OneTimePasswordField Root>\n);\nAPI Reference\nRoot\nContains all the parts of a one-time password field",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 345302,
      "relative_path": "documentation\\radix\\_primitives_docs_components_one-time-password-field.html",
      "source_type": "documentation"
    },
    "token_count": 439,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "2d6bb45c759e8b8dbb9d41b3c4ea4527",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_one-time-password-field.html",
    "source_type": "documentation",
    "title": "One-Time Password Field – Radix Primitives",
    "content": "form dataComponent Reference LinksVersion: 0 1 7Size: 11 5 kBView sourceReport an issue Anatomy Import all parts and piece them together import { unstable_OneTimePasswordField as OneTimePasswordField } from \"radix-ui\"; export default () => ( <OneTimePasswordField Root> {/* one Input for each character of the value */} <OneTimePasswordField Input /> {/* single HiddenInput to store the full value */} <OneTimePasswordField HiddenInput /> </OneTimePasswordField Root> ); API Reference Root Contains all the parts of a one-time password fieldPropTypeDefaultasChildProp descriptionbooleanfalseautoCompleteProp descriptionenumSee full typeone-time-codeautoFocusProp descriptionbooleanNo default valuevalueProp descriptionstringNo default valuedefaultValueProp descriptionstringNo default valueonValueChangeProp descriptionfunctionSee full typeNo default valueautoSubmitProp descriptionbooleanfalseonAutoSubmitProp descriptionfunctionSee full typeNo default valuedisabledProp descriptionbooleanfalsedirProp descriptionenumSee full type\"ltr\"orientationProp descriptionenumSee full type\"vertical\"formProp descriptionstringNo default valuenameProp descriptionstringNo default valueplaceholderProp descriptionstringNo default valuereadOnlyProp descriptionbooleanfalsesanitizeValueProp descriptionfunctionSee full typeNo default valuetypeProp descriptionenumSee full type\"text\"validationTypeProp descriptionenumSee full type\"numeric\"\nData attributeValues[data-orientation]\"vertical\"  | \"horizontal\"\nInput\nRenders a text input representing a single character in the value PropTypeDefaultasChildProp descriptionbooleanfalse\nData attributeValues[data-index]The index corresponding with the index of the character relative to the root field value\nHiddenInput\nPropTypeDefaultasChildProp descriptionbooleanfalse\nExamples\nBasic usage\n// This will render a field with 6 inputs, for use with\n// 6-character passwords Render an Input component for\n// each character of accepted password's length <OneTimePasswordField Root>\n<OneTimePasswordField Input />\n<OneTimePasswordField Input />\n<OneTimePasswordField Input />\n<OneTimePasswordField Input />\n<OneTimePasswordField Input />\n<OneTimePasswordField Input />\n<OneTimePasswordField HiddenInput />\n</OneTimePasswordField Root>\nSegmented controls\nThe Root component accepts arbitrary children, so rendering a visually segmented list is as simple as rendering separators between inputs",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 345302,
      "relative_path": "documentation\\radix\\_primitives_docs_components_one-time-password-field.html",
      "source_type": "documentation"
    },
    "token_count": 470,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "7f64372434434515aae8c95a4e0d070a",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_one-time-password-field.html",
    "source_type": "documentation",
    "title": "One-Time Password Field – Radix Primitives",
    "content": "Basic usage // This will render a field with 6 inputs, for use with // 6-character passwords Render an Input component for // each character of accepted password's length <OneTimePasswordField Root> <OneTimePasswordField Input /> <OneTimePasswordField Input /> <OneTimePasswordField Input /> <OneTimePasswordField Input /> <OneTimePasswordField Input /> <OneTimePasswordField Input /> <OneTimePasswordField HiddenInput /> </OneTimePasswordField Root> Segmented controls The Root component accepts arbitrary children, so rendering a visually segmented list is as simple as rendering separators between inputsWe recommend hiding decorative elements from assistive tech with aria-hidden and avoid rendering other meaningful content within Root since each child element is expected to belong to the parent with the group role <OneTimePasswordField Root>\n<OneTimePasswordField Input />\n<Separator Root aria-hidden />\n<OneTimePasswordField Input />\n<Separator Root aria-hidden />\n<OneTimePasswordField Input />\n<Separator Root aria-hidden />\n<OneTimePasswordField Input />\n<OneTimePasswordField HiddenInput />\n</OneTimePasswordField Root>\nAuto-submit form when password is entered\nUse the autoSubmit prop to submit an associated form when all inputs are filled function Verify({ validCode }) {\nconst PASSWORD_LENGTH = 6;\nfunction handleSubmit(event) {\nevent preventDefault();\nconst formData = event formData;\nif (formData get(\"otp\") === validCode) {\nredirect(\"/authenticated\");\n} else {\nwindow alert(\"Invalid code\");\n}\n}\nreturn (\n<form onSubmit={handleSubmit}>\n<OneTimePasswordField Root name=\"otp\" autoSubmit>\n{PASSWORD_LENGTH map((_, i) => (\n<OneTimePasswordField Input key={i} />\n))}\n{/* HiddenInput is required for the form to have data associated with the field */}\n<OneTimePasswordField HiddenInput />\n</OneTimePasswordField Root>\n<button>Submit</button>\n</form>\n);\n}\nControlled value\nfunction Verify({ validCode }) {\nconst [value, setValue] = React useState(\"\");\nconst PASSWORD_LENGTH = 6;\nfunction handleSubmit() {\nif (value === validCode) {\nredirect(\"/authenticated\");\n} else {\nwindow alert(\"Invalid code\");\n}\n}\nreturn (\n<OneTimePasswordField Root\nautoSubmit\nvalue={value}\nonAutoSubmit={handleSubmit}\nonValueChange={setValue}\n>\n{PASSWORD_LENGTH map((_, i) => (\n<OneTimePasswordField Input key={i} />\n))}\n</OneTimePasswordField",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 345302,
      "relative_path": "documentation\\radix\\_primitives_docs_components_one-time-password-field.html",
      "source_type": "documentation"
    },
    "token_count": 476,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "d70da99b17275b2c1f2b65b3e59ef751",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_one-time-password-field.html",
    "source_type": "documentation",
    "title": "One-Time Password Field – Radix Primitives",
    "content": "is required for the form to have data associated with the field */} <OneTimePasswordField HiddenInput /> </OneTimePasswordField Root> <button>Submit</button> </form> ); } Controlled value function Verify({ validCode }) { const [value, setValue] = React useState(\"\"); const PASSWORD_LENGTH = 6; function handleSubmit() { if (value === validCode) { redirect(\"/authenticated\"); } else { window alert(\"Invalid code\"); } } return ( <OneTimePasswordField Root autoSubmit value={value} onAutoSubmit={handleSubmit} onValueChange={setValue} > {PASSWORD_LENGTH map((_, i) => ( <OneTimePasswordField Input key={i} /> ))} </OneTimePasswordFieldRoot>\n);\n}\nAccessibility\nAt the time of writing, there is no singular established pattern in WCAG guidelines for implementing one-time password fields as separate inputs The behavior aims to get as close as possible to having the field act as a single input, with a few exceptions to match user expectations based on our initial research, testing, and gathering feedback This component is implemented as input elements within a container with a role of group to indicate that child inputs are related Inputs can be navigated and focused using direction keys, and typing input will move focus to the next input until the last input is reached Pasting a value into the field will replace the contents of all inputs, regardless of the currently focused input Based on our research this seems to align with most user expectations, where values are often pasted from password-managers or an email Keyboard Interactions\nKeyDescriptionEnterAttempts to submit an associated form if one is foundTabMoves focus to the next focusable element outside of the RootShift + TabMoves focus to the previous focusable element outside of the RootArrowDownMoves focus to the next Input when orientation is vertical ArrowUpMoves focus to the previous Input when orientation is vertical ArrowRightMoves focus to the next Input when orientation is horizontal ArrowLeftMoves focus to the previous Input when orientation is horizontal HomeMoves focus to the first Input EndMoves focus to the last Input DeleteRemoves the character in the currently focused Input and shifts later values backBackspaceRemoves the character in the currently focused Input and moves focus to the previous InputCommand + BackspaceClears the value of all Input elementsQuick navPreviousNavigation MenuNextPassword Toggle FieldEdit this page on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 345302,
      "relative_path": "documentation\\radix\\_primitives_docs_components_one-time-password-field.html",
      "source_type": "documentation"
    },
    "token_count": 475,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "3cf53a06e518c5c4eef8c86392df83f0",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_password-toggle-field.html",
    "source_type": "documentation",
    "title": "Password Toggle Field – Radix Primitives",
    "content": "Password Toggle Field – Radix PrimitivesRadix HomepageMade by WorkOSRadix HomepageMade by WorkOSThemesThemesPrimitivesPrimitivesIconsIconsColorsColorsDocumentationCase studiesBlogSearch/OverviewIntroductionGetting startedAccessibilityReleasesGuidesStylingAnimationCompositionServer-side renderingComponentsAccordionAlert DialogAspect RatioAvatarCheckboxCollapsibleContext MenuDialogDropdown MenuFormPreviewHover CardLabelMenubarNavigation MenuOne-Time Password FieldPreviewPassword Toggle FieldPreviewPopoverProgressRadio GroupScroll AreaSelectSeparatorSliderSwitchTabsToastToggleToggle GroupToolbarTooltipUtilitiesAccessible IconDirection ProviderPortalSlotVisually HiddenComponentsPassword Toggle Field\nA password input field with an integrated button to toggle the value's\nvisibility index jsxindex jsxstyles cssstyles cssimport * as React from \"react\";\nimport { unstable_PasswordToggleField as PasswordToggleField } from \"radix-ui\";\nimport { EyeClosedIcon, EyeOpenIcon } from \"@radix-ui/react-icons\";\nconst PasswordToggleFieldDemo = () => (\n<PasswordToggleField Root>\n<div className=\"Root\">\n<PasswordToggleField Input className=\"Input\" />\n<PasswordToggleField Toggle className=\"Toggle\">\n<PasswordToggleField Icon\nvisible={<EyeOpenIcon />}\nhidden={<EyeClosedIcon />}\n/>\n</PasswordToggleField Toggle>\n</div>\n</PasswordToggleField Root>\n);\nexport default PasswordToggleFieldDemo;\nExpand code\nFeaturesReturns focus to the input when toggling with a pointerMaintains button focus when toggling with keyboard or virtual navigationResets visibility to hidden after form submission to prevent accidental storageImplicit accessible labeling for icon-based toggle buttonsComponent Reference LinksView sourceReport an issue\nAnatomy\nImport all parts and piece them together import { unstable_PasswordToggleField as PasswordToggleField } from \"radix-ui\";\nimport { EyeClosedIcon, EyeOpenIcon } from \"@radix-ui/react-icons\";\nexport default () => (\n<PasswordToggleField Root>\n<PasswordToggleField Input />\n<PasswordToggleField Toggle>\n<PasswordToggleField Icon\nvisible={<EyeOpenIcon />}\nhidden={<EyeClosedIcon />}\n/>\n</PasswordToggleField Toggle>\n</PasswordToggleField Root>\n);\nAPI Reference\nRoot\nContains all the parts of a password toggle field PropTypeDefaultidProp descriptionstringNo default valuevisibleProp descriptionbooleanNo default valuedefaultVisibleProp descriptionbooleanNo default valueonVisiblityChangeProp descriptionfunctionSee full typeNo default value\nInput\nRenders a the input containing the password value",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 287811,
      "relative_path": "documentation\\radix\\_primitives_docs_components_password-toggle-field.html",
      "source_type": "documentation"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "09a107828c48c9b401fa9c4661feb5bf",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_password-toggle-field.html",
    "source_type": "documentation",
    "title": "Password Toggle Field – Radix Primitives",
    "content": "together import { unstable_PasswordToggleField as PasswordToggleField } from \"radix-ui\"; import { EyeClosedIcon, EyeOpenIcon } from \"@radix-ui/react-icons\"; export default () => ( <PasswordToggleField Root> <PasswordToggleField Input /> <PasswordToggleField Toggle> <PasswordToggleField Icon visible={<EyeOpenIcon />} hidden={<EyeClosedIcon />} /> </PasswordToggleField Toggle> </PasswordToggleField Root> ); API Reference Root Contains all the parts of a password toggle field PropTypeDefaultidProp descriptionstringNo default valuevisibleProp descriptionbooleanNo default valuedefaultVisibleProp descriptionbooleanNo default valueonVisiblityChangeProp descriptionfunctionSee full typeNo default value Input Renders a the input containing the password valuePropTypeDefaultasChildProp descriptionbooleanfalseautoCompleteProp descriptionenumSee full type\"current-password\"\nToggle\nPropTypeDefaultasChildProp descriptionbooleanfalse\nSlot\nPropTypeDefaultrenderProp descriptionfunctionSee full typeNo default valuevisibleProp descriptionbooleanNo default valuehiddenProp descriptionbooleanNo default value\nIcon\nPropTypeDefaultasChildProp descriptionbooleanfalsevisible*Prop descriptionbooleanNo default valuehidden*Prop descriptionbooleanNo default value\nExamples\nBasic usage\n<PasswordToggleField Root>\n<PasswordToggleField Input />\n<PasswordToggleField Toggle>\n<PasswordToggleField Icon\nvisible={<EyeOpenIcon />}\nhidden={<EyeClosedIcon />}\n/>\n</PasswordToggleField Toggle>\n</PasswordToggleField Root>\nWith Slot\n<PasswordToggleField Root>\n<PasswordToggleField Input />\n<PasswordToggleField Toggle>\n<PasswordToggleField Slot visible=\"🙊\" hidden=\"🙈\" />\n</PasswordToggleField Toggle>\n</PasswordToggleField Root>\nWith Slot + render prop\n<PasswordToggleField Root>\n<PasswordToggleField Input />\n<PasswordToggleField Toggle>\n<PasswordToggleField Slot\nrender={({ visible }) => (\n<svg aria-hidden viewBox=\"0 0 2 2\" xmlns=\"http://www w3 org/2000/svg\">\n<path d={visible \"M1 1 L2 2\" : \"M2 1 L1 2\"} />\n</svg>\n)}\n/>\n</PasswordToggleField Toggle>\n</PasswordToggleField Root>\nQuick navPreviousOne-Time Password FieldNextPopoverEdit this page on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 287811,
      "relative_path": "documentation\\radix\\_primitives_docs_components_password-toggle-field.html",
      "source_type": "documentation"
    },
    "token_count": 468,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c26b07485fc9d64a0a0fbdc88a5d1c37",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_progress.html",
    "source_type": "documentation",
    "title": "Progress – Radix Primitives",
    "content": "Progress – Radix PrimitivesRadix HomepageMade by WorkOSRadix HomepageMade by WorkOSThemesThemesPrimitivesPrimitivesIconsIconsColorsColorsDocumentationCase studiesBlogSearch/OverviewIntroductionGetting startedAccessibilityReleasesGuidesStylingAnimationCompositionServer-side renderingComponentsAccordionAlert DialogAspect RatioAvatarCheckboxCollapsibleContext MenuDialogDropdown MenuFormPreviewHover CardLabelMenubarNavigation MenuOne-Time Password FieldPreviewPassword Toggle FieldPreviewPopoverProgressRadio GroupScroll AreaSelectSeparatorSliderSwitchTabsToastToggleToggle GroupToolbarTooltipUtilitiesAccessible IconDirection ProviderPortalSlotVisually HiddenComponentsProgress\nDisplays an indicator showing the completion progress of a task, typically\ndisplayed as a progress bar index jsxindex jsxstyles cssstyles cssimport * as React from \"react\";\nimport { Progress } from \"radix-ui\";\nimport \" /styles css\";\nconst ProgressDemo = () => {\nconst [progress, setProgress] = React useState(13);\nReact useEffect(() => {\nconst timer = setTimeout(() => setProgress(66), 500);\nreturn () => clearTimeout(timer);\n}, []);\nreturn (\n<Progress Root className=\"ProgressRoot\" value={progress}>\n<Progress Indicator\nclassName=\"ProgressIndicator\"\nstyle={{ transform: `translateX(-${100 - progress}%)` }}\n/>\n</Progress Root>\n);\n};\nexport default ProgressDemo;\nExpand code\nFeaturesProvides context for assistive technology to read the progress of a task Component Reference LinksVersion: 1 1 7Size: 2 62 kBView sourceReport an issueARIA design pattern\nInstallation\nInstall the component from your command line npm install @radix-ui/react-progress\nAnatomy\nImport all parts and piece them together import { Progress } from \"radix-ui\";\nexport default () => (\n<Progress Root>\n<Progress Indicator />\n</Progress Root>\n);\nAccessibility\nAdheres to the progressbar role requirements API Reference\nRoot\nContains all of the progress parts PropTypeDefaultasChildProp descriptionbooleanfalsevalueProp descriptionnumber | nullNo default valuemaxProp descriptionnumberNo default valuegetValueLabelProp descriptionfunctionSee full typeNo default value\nData attributeValues[data-state]\"complete\"  | \"indeterminate\"  | \"loading\" [data-value]The current value[data-max]The max value\nIndicator\nUsed to show the progress visually It also makes progress accessible to assistive technologies",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 193904,
      "relative_path": "documentation\\radix\\_primitives_docs_components_progress.html",
      "source_type": "documentation"
    },
    "token_count": 476,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "5350f3d8bc83f8ef6883c1abdfad88e9",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_progress.html",
    "source_type": "documentation",
    "title": "Progress – Radix Primitives",
    "content": "import { Progress } from \"radix-ui\"; export default () => ( <Progress Root> <Progress Indicator /> </Progress Root> ); Accessibility Adheres to the progressbar role requirements API Reference Root Contains all of the progress parts PropTypeDefaultasChildProp descriptionbooleanfalsevalueProp descriptionnumber | nullNo default valuemaxProp descriptionnumberNo default valuegetValueLabelProp descriptionfunctionSee full typeNo default value Data attributeValues[data-state]\"complete\" | \"indeterminate\" | \"loading\" [data-value]The current value[data-max]The max value Indicator Used to show the progress visually It also makes progress accessible to assistive technologiesPropTypeDefaultasChildProp descriptionbooleanfalse\nData attributeValues[data-state]\"complete\"  | \"indeterminate\"  | \"loading\" [data-value]The current value[data-max]The max valueQuick navPreviousPopoverNextRadio GroupEdit this page on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 193904,
      "relative_path": "documentation\\radix\\_primitives_docs_components_progress.html",
      "source_type": "documentation"
    },
    "token_count": 184,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "675e331e879377cd90b7f0afbc82aad9",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_popover.html",
    "source_type": "documentation",
    "title": "Popover – Radix Primitives",
    "content": "Popover – Radix PrimitivesRadix HomepageMade by WorkOSRadix HomepageMade by WorkOSThemesThemesPrimitivesPrimitivesIconsIconsColorsColorsDocumentationCase studiesBlogSearch/OverviewIntroductionGetting startedAccessibilityReleasesGuidesStylingAnimationCompositionServer-side renderingComponentsAccordionAlert DialogAspect RatioAvatarCheckboxCollapsibleContext MenuDialogDropdown MenuFormPreviewHover CardLabelMenubarNavigation MenuOne-Time Password FieldPreviewPassword Toggle FieldPreviewPopoverProgressRadio GroupScroll AreaSelectSeparatorSliderSwitchTabsToastToggleToggle GroupToolbarTooltipUtilitiesAccessible IconDirection ProviderPortalSlotVisually HiddenComponentsPopover\nDisplays rich content in a portal, triggered by a button index jsxindex jsxstyles cssstyles cssimport * as React from \"react\";\nimport { Popover } from \"radix-ui\";\nimport { MixerHorizontalIcon, Cross2Icon } from \"@radix-ui/react-icons\";\nimport \" /styles css\";\nconst PopoverDemo = () => (\n<Popover Root>\n<Popover Trigger asChild>\n<button className=\"IconButton\" aria-label=\"Update dimensions\">\n<MixerHorizontalIcon />\n</button>\n</Popover Trigger>\n<Popover Portal>\n<Popover Content className=\"PopoverContent\" sideOffset={5}>\n<div style={{ display: \"flex\", flexDirection: \"column\", gap: 10 }}>\n<p className=\"Text\" style={{ marginBottom: 10 }}>\nDimensions\n</p>\n<fieldset className=\"Fieldset\">\n<label className=\"Label\" htmlFor=\"width\">\nWidth\n</label>\n<input className=\"Input\" id=\"width\" defaultValue=\"100%\" />\n</fieldset>\n<fieldset className=\"Fieldset\">\n<label className=\"Label\" htmlFor=\"maxWidth\">\nMax width\n</label>\n<input className=\"Input\" id=\"maxWidth\" defaultValue=\"300px\" />\n</fieldset>\n<fieldset className=\"Fieldset\">\n<label className=\"Label\" htmlFor=\"height\">\nHeight\n</label>\n<input className=\"Input\" id=\"height\" defaultValue=\"25px\" />\n</fieldset>\n<fieldset className=\"Fieldset\">\n<label className=\"Label\" htmlFor=\"maxHeight\">\nMax height\n</label>\n<input className=\"Input\" id=\"maxHeight\" defaultValue=\"none\" />\n</fieldset>\n</div>\n<Popover Close className=\"PopoverClose\" aria-label=\"Close\">\n<Cross2Icon />\n</Popover Close>\n<Popover Arrow className=\"PopoverArrow\" />\n</Popover Content>\n</Popover Portal>\n</Popover Root>\n);\nexport default PopoverDemo;\nExpand code\nFeaturesCan be controlled or uncontrolled Customize side, alignment, offsets, collision handling",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 712164,
      "relative_path": "documentation\\radix\\_primitives_docs_components_popover.html",
      "source_type": "documentation"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "ed0284705b06aa14469d8e7e184a3cbf",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_popover.html",
    "source_type": "documentation",
    "title": "Popover – Radix Primitives",
    "content": "className=\"Fieldset\"> <label className=\"Label\" htmlFor=\"maxWidth\"> Max width </label> <input className=\"Input\" id=\"maxWidth\" defaultValue=\"300px\" /> </fieldset> <fieldset className=\"Fieldset\"> <label className=\"Label\" htmlFor=\"height\"> Height </label> <input className=\"Input\" id=\"height\" defaultValue=\"25px\" /> </fieldset> <fieldset className=\"Fieldset\"> <label className=\"Label\" htmlFor=\"maxHeight\"> Max height </label> <input className=\"Input\" id=\"maxHeight\" defaultValue=\"none\" /> </fieldset> </div> <Popover Close className=\"PopoverClose\" aria-label=\"Close\"> <Cross2Icon /> </Popover Close> <Popover Arrow className=\"PopoverArrow\" /> </Popover Content> </Popover Portal> </Popover Root> ); export default PopoverDemo; Expand code FeaturesCan be controlled or uncontrolled Customize side, alignment, offsets, collision handlingOptionally render a pointing arrow Focus is fully managed and customizable Supports modal and non-modal modes Dismissing and layering behavior is highly customizable Component Reference LinksVersion: 1 1 14Size: 28 08 kBView sourceReport an issueARIA design pattern\nInstallation\nInstall the component from your command line npm install @radix-ui/react-popover\nAnatomy\nImport all parts and piece them together import { Popover } from \"radix-ui\";\nexport default () => (\n<Popover Root>\n<Popover Trigger />\n<Popover Anchor />\n<Popover Portal>\n<Popover Content>\n<Popover Close />\n<Popover Arrow />\n</Popover Content>\n</Popover Portal>\n</Popover Root>\n);\nAPI Reference\nRoot\nContains all the parts of a popover PropTypeDefaultdefaultOpenProp descriptionbooleanNo default valueopenProp descriptionbooleanNo default valueonOpenChangeProp descriptionfunctionSee full typeNo default valuemodalProp descriptionbooleanfalse\nTrigger\nThe button that toggles the popover By default, the Popover Content will position itself against the trigger PropTypeDefaultasChildProp descriptionbooleanfalse\nData attributeValues[data-state]\"open\"  | \"closed\"\nAnchor\nAn optional element to position the Popover Content against If this part is not used, the content will position alongside the Popover Trigger PropTypeDefaultasChildProp descriptionbooleanfalse\nPortal\nWhen used, portals the content part into the body PropTypeDefaultforceMountProp descriptionbooleanNo default valuecontainerProp descriptionHTMLElementdocument",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 712164,
      "relative_path": "documentation\\radix\\_primitives_docs_components_popover.html",
      "source_type": "documentation"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "bb4fe6bfe9324d16a490c0ec2823eed5",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_popover.html",
    "source_type": "documentation",
    "title": "Popover – Radix Primitives",
    "content": "default valueopenProp descriptionbooleanNo default valueonOpenChangeProp descriptionfunctionSee full typeNo default valuemodalProp descriptionbooleanfalse Trigger The button that toggles the popover By default, the Popover Content will position itself against the trigger PropTypeDefaultasChildProp descriptionbooleanfalse Data attributeValues[data-state]\"open\" | \"closed\" Anchor An optional element to position the Popover Content against If this part is not used, the content will position alongside the Popover Trigger PropTypeDefaultasChildProp descriptionbooleanfalse Portal When used, portals the content part into the body PropTypeDefaultforceMountProp descriptionbooleanNo default valuecontainerProp descriptionHTMLElementdocumentbody\nContent\nThe component that pops out when the popover is open PropTypeDefaultasChildProp descriptionbooleanfalseonOpenAutoFocusProp descriptionfunctionSee full typeNo default valueonCloseAutoFocusProp descriptionfunctionSee full typeNo default valueonEscapeKeyDownProp descriptionfunctionSee full typeNo default valueonPointerDownOutsideProp descriptionfunctionSee full typeNo default valueonFocusOutsideProp descriptionfunctionSee full typeNo default valueonInteractOutsideProp descriptionfunctionSee full typeNo default valueforceMountProp descriptionbooleanNo default valuesideProp descriptionenumSee full type\"bottom\"sideOffsetProp descriptionnumber0alignProp descriptionenumSee full type\"center\"alignOffsetProp descriptionnumber0avoidCollisionsProp descriptionbooleantruecollisionBoundaryProp descriptionBoundarySee full type[]collisionPaddingProp descriptionnumber | PaddingSee full type0arrowPaddingProp descriptionnumber0stickyProp descriptionenumSee full type\"partial\"hideWhenDetachedProp descriptionbooleanfalse\nData attributeValues[data-state]\"open\"  | \"closed\" [data-side]\"left\"  | \"right\"  | \"bottom\"  | \"top\" [data-align]\"start\"  | \"end\"  | \"center\"\nCSS VariableDescription--radix-popover-content-transform-originThe transform-origin computed from the content and arrow positions/offsets--radix-popover-content-available-widthThe remaining width between the trigger and the boundary edge--radix-popover-content-available-heightThe remaining height between the trigger and the boundary edge--radix-popover-trigger-widthThe width of the trigger--radix-popover-trigger-heightThe height of the trigger\nArrow\nAn optional arrow element to render alongside the popover This can be used to help visually link the anchor with the Popover Content Must be rendered inside Popover Content",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 712164,
      "relative_path": "documentation\\radix\\_primitives_docs_components_popover.html",
      "source_type": "documentation"
    },
    "token_count": 491,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "912e3f4d0037d6a292093eab269a147a",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_popover.html",
    "source_type": "documentation",
    "title": "Popover – Radix Primitives",
    "content": "\"right\" | \"bottom\" | \"top\" [data-align]\"start\" | \"end\" | \"center\" CSS VariableDescription--radix-popover-content-transform-originThe transform-origin computed from the content and arrow positions/offsets--radix-popover-content-available-widthThe remaining width between the trigger and the boundary edge--radix-popover-content-available-heightThe remaining height between the trigger and the boundary edge--radix-popover-trigger-widthThe width of the trigger--radix-popover-trigger-heightThe height of the trigger Arrow An optional arrow element to render alongside the popover This can be used to help visually link the anchor with the Popover Content Must be rendered inside Popover ContentPropTypeDefaultasChildProp descriptionbooleanfalsewidthProp descriptionnumber10heightProp descriptionnumber5\nClose\nThe button that closes an open popover PropTypeDefaultasChildProp descriptionbooleanfalse\nExamples\nConstrain the content size\nYou may want to constrain the width of the content so that it matches the trigger width You may also want to constrain its height to not exceed the viewport We expose several CSS custom properties such as --radix-popover-trigger-width and --radix-popover-content-available-height to support this Use them to constrain the content dimensions // index jsx\nimport { Popover } from \"radix-ui\";\nimport \" /styles css\";\nexport default () => (\n<Popover Root>\n<Popover Trigger>…</Popover Trigger>\n<Popover Portal>\n<Popover Content className=\"PopoverContent\" sideOffset={5}>\n…\n</Popover Content>\n</Popover Portal>\n</Popover Root>\n);\n/* styles css */ PopoverContent {\nwidth: var(--radix-popover-trigger-width);\nmax-height: var(--radix-popover-content-available-height);\n}\nOrigin-aware animations\nWe expose a CSS custom property --radix-popover-content-transform-origin Use it to animate the content from its computed origin based on side, sideOffset, align, alignOffset and any collisions // index jsx\nimport { Popover } from \"radix-ui\";\nimport \" /styles css\";\nexport default () => (\n<Popover Root>\n<Popover Trigger>…</Popover Trigger>\n<Popover Portal>\n<Popover Content className=\"PopoverContent\">…</Popover Content>\n</Popover Portal>\n</Popover Root>\n);\n/* styles css */ PopoverContent {\ntransform-origin: var(--radix-popover-content-transform-origin);\nanimation: scaleIn 0",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 712164,
      "relative_path": "documentation\\radix\\_primitives_docs_components_popover.html",
      "source_type": "documentation"
    },
    "token_count": 489,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "0924aaedce7b22414e964cce336f0f3d",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_popover.html",
    "source_type": "documentation",
    "title": "Popover – Radix Primitives",
    "content": "max-height: var(--radix-popover-content-available-height); } Origin-aware animations We expose a CSS custom property --radix-popover-content-transform-origin Use it to animate the content from its computed origin based on side, sideOffset, align, alignOffset and any collisions // index jsx import { Popover } from \"radix-ui\"; import \" /styles css\"; export default () => ( <Popover Root> <Popover Trigger>…</Popover Trigger> <Popover Portal> <Popover Content className=\"PopoverContent\">…</Popover Content> </Popover Portal> </Popover Root> ); /* styles css */ PopoverContent { transform-origin: var(--radix-popover-content-transform-origin); animation: scaleIn 05s ease-out;\n}\n@keyframes scaleIn {\nfrom {\nopacity: 0;\ntransform: scale(0);\n}\nto {\nopacity: 1;\ntransform: scale(1);\n}\n}\nCollision-aware animations\nWe expose data-side and data-align attributes Their values will change at runtime to reflect collisions Use them to create collision and direction-aware animations // index jsx\nimport { Popover } from \"radix-ui\";\nimport \" /styles css\";\nexport default () => (\n<Popover Root>\n<Popover Trigger>…</Popover Trigger>\n<Popover Portal>\n<Popover Content className=\"PopoverContent\">…</Popover Content>\n</Popover Portal>\n</Popover Root>\n);\n/* styles css */ PopoverContent {\nanimation-duration: 0 6s;\nanimation-timing-function: cubic-bezier(0 16, 1, 0 3, 1);\n} PopoverContent[data-side=\"top\"] {\nanimation-name: slideUp;\n} PopoverContent[data-side=\"bottom\"] {\nanimation-name: slideDown;\n}\n@keyframes slideDown {\nfrom {\nopacity: 0;\ntransform: translateY(-10px);\n}\nto {\nopacity: 1;\ntransform: translateY(0);\n}\n}\n@keyframes slideUp {\nfrom {\nopacity: 0;\ntransform: translateY(10px);\n}\nto {\nopacity: 1;\ntransform: translateY(0);\n}\n}\nWith custom anchor\nYou can anchor the content to another element if you do not want to use the trigger as the anchor // index jsx\nimport { Popover } from \"radix-ui\";\nimport \" /styles css\";\nexport default () => (\n<Popover Root>\n<Popover Anchor asChild>\n<div className=\"Row\">\nRow as anchor <Popover Trigger>Trigger</Popover",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 712164,
      "relative_path": "documentation\\radix\\_primitives_docs_components_popover.html",
      "source_type": "documentation"
    },
    "token_count": 502,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "1fa6d96f329cea7d5dd8f650fab412a3",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_popover.html",
    "source_type": "documentation",
    "title": "Popover – Radix Primitives",
    "content": "1; transform: translateY(0); } } @keyframes slideUp { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } } With custom anchor You can anchor the content to another element if you do not want to use the trigger as the anchor // index jsx import { Popover } from \"radix-ui\"; import \" /styles css\"; export default () => ( <Popover Root> <Popover Anchor asChild> <div className=\"Row\"> Row as anchor <Popover Trigger>Trigger</PopoverTrigger>\n</div>\n</Popover Anchor>\n<Popover Portal>\n<Popover Content>…</Popover Content>\n</Popover Portal>\n</Popover Root>\n);\n/* styles css */ Row {\nbackground-color: gainsboro;\npadding: 20px;\n}\nAccessibility\nAdheres to the Dialog WAI-ARIA design pattern Keyboard Interactions\nKeyDescriptionSpaceOpens/closes the popover EnterOpens/closes the popover TabMoves focus to the next focusable elementShift + TabMoves focus to the previous focusable elementEscCloses the popover and moves focus to Popover Trigger Custom APIs\nCreate your own API by abstracting the primitive parts into your own component Abstract the arrow and set default configuration\nThis example abstracts the Popover Arrow part and sets a default sideOffset configuration Usage\nimport { Popover, PopoverTrigger, PopoverContent } from \" /your-popover\";\nexport default () => (\n<Popover>\n<PopoverTrigger>Popover trigger</PopoverTrigger>\n<PopoverContent>Popover content</PopoverContent>\n</Popover>\n);\nImplementation\n// your-popover jsx\nimport * as React from \"react\";\nimport { Popover as PopoverPrimitive } from \"radix-ui\";\nexport const Popover = PopoverPrimitive Root;\nexport const PopoverTrigger = PopoverPrimitive Trigger;\nexport const PopoverContent = React forwardRef(\n({ children, props }, forwardedRef) => (\n<PopoverPrimitive Portal>\n<PopoverPrimitive Content sideOffset={5} { props} ref={forwardedRef}>\n{children}\n<PopoverPrimitive Arrow />\n</PopoverPrimitive Content>\n</PopoverPrimitive Portal>\n),\n);\nQuick navPreviousPassword Toggle FieldNextProgressEdit this page on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 712164,
      "relative_path": "documentation\\radix\\_primitives_docs_components_popover.html",
      "source_type": "documentation"
    },
    "token_count": 458,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "bad96cce9a4b5dc018ea3ff36bed565b",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_radio-group.html",
    "source_type": "documentation",
    "title": "Radio Group – Radix Primitives",
    "content": "Radio Group – Radix PrimitivesRadix HomepageMade by WorkOSRadix HomepageMade by WorkOSThemesThemesPrimitivesPrimitivesIconsIconsColorsColorsDocumentationCase studiesBlogSearch/OverviewIntroductionGetting startedAccessibilityReleasesGuidesStylingAnimationCompositionServer-side renderingComponentsAccordionAlert DialogAspect RatioAvatarCheckboxCollapsibleContext MenuDialogDropdown MenuFormPreviewHover CardLabelMenubarNavigation MenuOne-Time Password FieldPreviewPassword Toggle FieldPreviewPopoverProgressRadio GroupScroll AreaSelectSeparatorSliderSwitchTabsToastToggleToggle GroupToolbarTooltipUtilitiesAccessible IconDirection ProviderPortalSlotVisually HiddenComponentsRadio Group\nA set of checkable buttons—known as radio buttons—where no more than one of\nthe buttons can be checked at a time DefaultComfortableCompact\nindex jsxindex jsxstyles cssstyles cssimport * as React from \"react\";\nimport { RadioGroup } from \"radix-ui\";\nimport \" /styles css\";\nconst RadioGroupDemo = () => (\n<form>\n<RadioGroup Root\nclassName=\"RadioGroupRoot\"\ndefaultValue=\"default\"\naria-label=\"View density\"\n>\n<div style={{ display: \"flex\", alignItems: \"center\" }}>\n<RadioGroup Item className=\"RadioGroupItem\" value=\"default\" id=\"r1\">\n<RadioGroup Indicator className=\"RadioGroupIndicator\" />\n</RadioGroup Item>\n<label className=\"Label\" htmlFor=\"r1\">\nDefault\n</label>\n</div>\n<div style={{ display: \"flex\", alignItems: \"center\" }}>\n<RadioGroup Item className=\"RadioGroupItem\" value=\"comfortable\" id=\"r2\">\n<RadioGroup Indicator className=\"RadioGroupIndicator\" />\n</RadioGroup Item>\n<label className=\"Label\" htmlFor=\"r2\">\nComfortable\n</label>\n</div>\n<div style={{ display: \"flex\", alignItems: \"center\" }}>\n<RadioGroup Item className=\"RadioGroupItem\" value=\"compact\" id=\"r3\">\n<RadioGroup Indicator className=\"RadioGroupIndicator\" />\n</RadioGroup Item>\n<label className=\"Label\" htmlFor=\"r3\">\nCompact\n</label>\n</div>\n</RadioGroup Root>\n</form>\n);\nexport default RadioGroupDemo;\nExpand code\nFeaturesFull keyboard navigation Supports horizontal/vertical orientation Can be controlled or uncontrolled Component Reference LinksVersion: 1 3 7Size: 9 88 kBView sourceReport an issueARIA design pattern\nInstallation\nInstall the component from your command line",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 323991,
      "relative_path": "documentation\\radix\\_primitives_docs_components_radio-group.html",
      "source_type": "documentation"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "ac873e24d08064a2dfb05d1d9abb56c4",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_radio-group.html",
    "source_type": "documentation",
    "title": "Radio Group – Radix Primitives",
    "content": "className=\"RadioGroupIndicator\" /> </RadioGroup Item> <label className=\"Label\" htmlFor=\"r2\"> Comfortable </label> </div> <div style={{ display: \"flex\", alignItems: \"center\" }}> <RadioGroup Item className=\"RadioGroupItem\" value=\"compact\" id=\"r3\"> <RadioGroup Indicator className=\"RadioGroupIndicator\" /> </RadioGroup Item> <label className=\"Label\" htmlFor=\"r3\"> Compact </label> </div> </RadioGroup Root> </form> ); export default RadioGroupDemo; Expand code FeaturesFull keyboard navigation Supports horizontal/vertical orientation Can be controlled or uncontrolled Component Reference LinksVersion: 1 3 7Size: 9 88 kBView sourceReport an issueARIA design pattern Installation Install the component from your command linenpm install @radix-ui/react-radio-group\nAnatomy\nImport all parts and piece them together import { RadioGroup } from \"radix-ui\";\nexport default () => (\n<RadioGroup Root>\n<RadioGroup Item>\n<RadioGroup Indicator />\n</RadioGroup Item>\n</RadioGroup Root>\n);\nAPI Reference\nRoot\nContains all the parts of a radio group PropTypeDefaultasChildProp descriptionbooleanfalsedefaultValueProp descriptionstringNo default valuevalueProp descriptionstringNo default valueonValueChangeProp descriptionfunctionSee full typeNo default valuedisabledProp descriptionbooleanNo default valuenameProp descriptionstringNo default valuerequiredProp descriptionbooleanNo default valueorientationProp descriptionenumSee full typeundefineddirProp descriptionenumSee full typeNo default valueloopProp descriptionbooleantrue\nData attributeValues[data-disabled]Present when disabled\nItem\nAn item in the group that can be checked An input will also render when used within a form to ensure events propagate correctly PropTypeDefaultasChildProp descriptionbooleanfalsevalueProp descriptionstringNo default valuedisabledProp descriptionbooleanNo default valuerequiredProp descriptionbooleanNo default value\nData attributeValues[data-state]\"checked\"  | \"unchecked\" [data-disabled]Present when disabled\nIndicator\nRenders when the radio item is in a checked state You can style this element directly, or you can use it as a wrapper to put an icon into, or both",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 323991,
      "relative_path": "documentation\\radix\\_primitives_docs_components_radio-group.html",
      "source_type": "documentation"
    },
    "token_count": 453,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "a0a9357e04d2494fc89f14f576843b1f",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_radio-group.html",
    "source_type": "documentation",
    "title": "Radio Group – Radix Primitives",
    "content": "disabled Item An item in the group that can be checked An input will also render when used within a form to ensure events propagate correctly PropTypeDefaultasChildProp descriptionbooleanfalsevalueProp descriptionstringNo default valuedisabledProp descriptionbooleanNo default valuerequiredProp descriptionbooleanNo default value Data attributeValues[data-state]\"checked\" | \"unchecked\" [data-disabled]Present when disabled Indicator Renders when the radio item is in a checked state You can style this element directly, or you can use it as a wrapper to put an icon into, or bothPropTypeDefaultasChildProp descriptionbooleanfalseforceMountProp descriptionbooleanNo default value\nData attributeValues[data-state]\"checked\"  | \"unchecked\" [data-disabled]Present when disabled\nAccessibility\nAdheres to the Radio Group WAI-ARIA design pattern and uses roving tabindex to manage focus movement among radio items Keyboard Interactions\nKeyDescriptionTabMoves focus to either the checked radio item or the first radio item in the group SpaceWhen focus is on an unchecked radio item, checks it ArrowDownMoves focus and checks the next radio item in the group ArrowRightMoves focus and checks the next radio item in the group ArrowUpMoves focus to the previous radio item in the group ArrowLeftMoves focus to the previous radio item in the group Quick navPreviousProgressNextScroll AreaEdit this page on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 323991,
      "relative_path": "documentation\\radix\\_primitives_docs_components_radio-group.html",
      "source_type": "documentation"
    },
    "token_count": 275,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "3524975d8d730d077120498a15b560f9",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_scroll-area.html",
    "source_type": "documentation",
    "title": "Scroll Area – Radix Primitives",
    "content": "Scroll Area – Radix PrimitivesRadix HomepageMade by WorkOSRadix HomepageMade by WorkOSThemesThemesPrimitivesPrimitivesIconsIconsColorsColorsDocumentationCase studiesBlogSearch/OverviewIntroductionGetting startedAccessibilityReleasesGuidesStylingAnimationCompositionServer-side renderingComponentsAccordionAlert DialogAspect RatioAvatarCheckboxCollapsibleContext MenuDialogDropdown MenuFormPreviewHover CardLabelMenubarNavigation MenuOne-Time Password FieldPreviewPassword Toggle FieldPreviewPopoverProgressRadio GroupScroll AreaSelectSeparatorSliderSwitchTabsToastToggleToggle GroupToolbarTooltipUtilitiesAccessible IconDirection ProviderPortalSlotVisually HiddenComponentsScroll Area\nAugments native scroll functionality for custom, cross-browser styling Tagsv1 2 0-beta 50v1 2 0-beta 49v1 2 0-beta 48v1 2 0-beta 47v1 2 0-beta 46v1 2 0-beta 45v1 2 0-beta 44v1 2 0-beta 43v1 2 0-beta 42v1 2 0-beta 41v1 2 0-beta 40v1 2 0-beta 39v1 2 0-beta 38v1 2 0-beta 37v1 2 0-beta 36v1 2 0-beta 35v1 2 0-beta 34v1 2 0-beta 33v1 2 0-beta 32v1 2 0-beta 31v1 2 0-beta 30v1 2 0-beta 29v1 2 0-beta 28v1 2 0-beta 27v1 2 0-beta 26v1 2 0-beta 25v1 2 0-beta 24v1 2 0-beta 23v1 2 0-beta 22v1 2 0-beta 21v1 2 0-beta 20v1 2 0-beta 19v1 2 0-beta 18v1 2 0-beta 17v1 2 0-beta 16v1 2 0-beta 15v1 2 0-beta 14v1 2 0-beta 13v1 2 0-beta 12v1 2 0-beta 11v1 2 0-beta 10v1 2 0-beta 9v1 2 0-beta 8v1 2 0-beta 7v1 2 0-beta 6v1 2 0-beta 5v1 2 0-beta 4v1 2 0-beta 3v1 2 0-beta 2v1 2 0-beta 1\nindex jsxindex jsxstyles cssstyles cssimport * as React from \"react\";\nimport { ScrollArea } from \"radix-ui\";\nimport \" /styles css\";\nconst TAGS = Array from({ length: 50 }) map(\n(_, i, a) => `v1 2 0-beta ${a",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 327368,
      "relative_path": "documentation\\radix\\_primitives_docs_components_scroll-area.html",
      "source_type": "documentation"
    },
    "token_count": 644,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "f8ba8ae4d36369897a214d7041e8f1d0",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_scroll-area.html",
    "source_type": "documentation",
    "title": "Scroll Area – Radix Primitives",
    "content": "2 0-beta 13v1 2 0-beta 12v1 2 0-beta 11v1 2 0-beta 10v1 2 0-beta 9v1 2 0-beta 8v1 2 0-beta 7v1 2 0-beta 6v1 2 0-beta 5v1 2 0-beta 4v1 2 0-beta 3v1 2 0-beta 2v1 2 0-beta 1 index jsxindex jsxstyles cssstyles cssimport * as React from \"react\"; import { ScrollArea } from \"radix-ui\"; import \" /styles css\"; const TAGS = Array from({ length: 50 }) map( (_, i, a) => `v1 2 0-beta ${alength - i}`,\n);\nconst ScrollAreaDemo = () => (\n<ScrollArea Root className=\"ScrollAreaRoot\">\n<ScrollArea Viewport className=\"ScrollAreaViewport\">\n<div style={{ padding: \"15px 20px\" }}>\n<div className=\"Text\">Tags</div>\n{TAGS map((tag) => (\n<div className=\"Tag\" key={tag}>\n{tag}\n</div>\n))}\n</div>\n</ScrollArea Viewport>\n<ScrollArea Scrollbar\nclassName=\"ScrollAreaScrollbar\"\norientation=\"vertical\"\n>\n<ScrollArea Thumb className=\"ScrollAreaThumb\" />\n</ScrollArea Scrollbar>\n<ScrollArea Scrollbar\nclassName=\"ScrollAreaScrollbar\"\norientation=\"horizontal\"\n>\n<ScrollArea Thumb className=\"ScrollAreaThumb\" />\n</ScrollArea Scrollbar>\n<ScrollArea Corner className=\"ScrollAreaCorner\" />\n</ScrollArea Root>\n);\nexport default ScrollAreaDemo;\nExpand code\nFeaturesScrollbar sits on top of the scrollable content, taking up no space Scrolling is native; no underlying position movements via CSS transformations Shims pointer behaviors only when interacting with the controls, so keyboard controls are unaffected Supports Right to Left direction Component Reference LinksVersion: 1 2 9Size: 6 48 kBView sourceReport an issue\nInstallation\nInstall the component from your command line npm install @radix-ui/react-scroll-area\nAnatomy\nImport all parts and piece them together import { ScrollArea } from \"radix-ui\";\nexport default () => (\n<ScrollArea Root>\n<ScrollArea Viewport />\n<ScrollArea Scrollbar orientation=\"horizontal\">\n<ScrollArea Thumb />\n</ScrollArea",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 327368,
      "relative_path": "documentation\\radix\\_primitives_docs_components_scroll-area.html",
      "source_type": "documentation"
    },
    "token_count": 506,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "303bea2676f21a22710eabf8fcbae7c8",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_scroll-area.html",
    "source_type": "documentation",
    "title": "Scroll Area – Radix Primitives",
    "content": "via CSS transformations Shims pointer behaviors only when interacting with the controls, so keyboard controls are unaffected Supports Right to Left direction Component Reference LinksVersion: 1 2 9Size: 6 48 kBView sourceReport an issue Installation Install the component from your command line npm install @radix-ui/react-scroll-area Anatomy Import all parts and piece them together import { ScrollArea } from \"radix-ui\"; export default () => ( <ScrollArea Root> <ScrollArea Viewport /> <ScrollArea Scrollbar orientation=\"horizontal\"> <ScrollArea Thumb /> </ScrollAreaScrollbar>\n<ScrollArea Scrollbar orientation=\"vertical\">\n<ScrollArea Thumb />\n</ScrollArea Scrollbar>\n<ScrollArea Corner />\n</ScrollArea Root>\n);\nAPI Reference\nRoot\nContains all the parts of a scroll area PropTypeDefaultasChildProp descriptionbooleanfalsetypeProp descriptionenumSee full type\"hover\"scrollHideDelayProp descriptionnumber600dirProp descriptionenumSee full typeNo default valuenonceProp descriptionstringNo default value\nViewport\nThe viewport area of the scroll area PropTypeDefaultasChildProp descriptionbooleanfalse\nScrollbar\nThe vertical scrollbar Add a second Scrollbar with an orientation prop to enable horizontal scrolling PropTypeDefaultasChildProp descriptionbooleanfalseforceMountProp descriptionbooleanNo default valueorientationProp descriptionenumSee full typevertical\nData attributeValues[data-state]\"visible\"  | \"hidden\" [data-orientation]\"vertical\"  | \"horizontal\"\nThumb\nThe thumb to be used in ScrollArea Scrollbar PropTypeDefaultasChildProp descriptionbooleanfalse\nData attributeValues[data-state]\"visible\"  | \"hidden\"\nCorner\nThe corner where both vertical and horizontal scrollbars meet PropTypeDefaultasChildProp descriptionbooleanfalse\nAccessibility\nIn most cases, it's best to rely on native scrolling and work with the customization options available in CSS When that isn't enough, ScrollArea provides additional customizability while maintaining the browser's native scroll behavior (as well as accessibility features, like keyboard scrolling) Keyboard Interactions\nScrolling via keyboard is supported by default because the component relies on native scrolling Specific keyboard interactions may differ between platforms, so we do not specify them here or add specific event listeners to handle scrolling via key events Quick navPreviousRadio GroupNextSelectEdit this page on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 327368,
      "relative_path": "documentation\\radix\\_primitives_docs_components_scroll-area.html",
      "source_type": "documentation"
    },
    "token_count": 465,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "8d8718dc554e427d5cfd055f38d8a5f0",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_menubar.html",
    "source_type": "documentation",
    "title": "Menubar – Radix Primitives",
    "content": "Menubar – Radix PrimitivesRadix HomepageMade by WorkOSRadix HomepageMade by WorkOSThemesThemesPrimitivesPrimitivesIconsIconsColorsColorsDocumentationCase studiesBlogSearch/OverviewIntroductionGetting startedAccessibilityReleasesGuidesStylingAnimationCompositionServer-side renderingComponentsAccordionAlert DialogAspect RatioAvatarCheckboxCollapsibleContext MenuDialogDropdown MenuFormPreviewHover CardLabelMenubarNavigation MenuOne-Time Password FieldPreviewPassword Toggle FieldPreviewPopoverProgressRadio GroupScroll AreaSelectSeparatorSliderSwitchTabsToastToggleToggle GroupToolbarTooltipUtilitiesAccessible IconDirection ProviderPortalSlotVisually HiddenComponentsMenu Bar\nA visually persistent menu common in desktop applications that provides quick\naccess to a consistent set of commands FileEditViewProfiles\nindex jsxindex jsxstyles cssstyles cssimport * as React from \"react\";\nimport { Menubar } from \"radix-ui\";\nimport {\nCheckIcon,\nChevronRightIcon,\nDotFilledIcon,\n} from \"@radix-ui/react-icons\";\nimport \" /styles css\";\nconst RADIO_ITEMS = [\"Andy\", \"Benoît\", \"Luis\"];\nconst CHECK_ITEMS = [\"Always Show Bookmarks Bar\", \"Always Show Full URLs\"];\nconst MenubarDemo = () => {\nconst [checkedSelection, setCheckedSelection] = React useState([\nCHECK_ITEMS[1],\n]);\nconst [radioSelection, setRadioSelection] = React useState(RADIO_ITEMS[2]);\nreturn (\n<Menubar Root className=\"MenubarRoot\">\n<Menubar Menu>\n<Menubar Trigger className=\"MenubarTrigger\">File</Menubar Trigger>\n<Menubar Portal>\n<Menubar Content\nclassName=\"MenubarContent\"\nalign=\"start\"\nsideOffset={5}\nalignOffset={-3}\n>\n<Menubar Item className=\"MenubarItem\">\nNew Tab <div className=\"RightSlot\">⌘ T</div>\n</Menubar Item>\n<Menubar Item className=\"MenubarItem\">\nNew Window <div className=\"RightSlot\">⌘ N</div>\n</Menubar Item>\n<Menubar Item className=\"MenubarItem\" disabled>\nNew Incognito Window\n</Menubar Item>\n<Menubar Separator className=\"MenubarSeparator\" />\n<Menubar Sub>\n<Menubar SubTrigger className=\"MenubarSubTrigger\">\nShare\n<div className=\"RightSlot\">\n<ChevronRightIcon />\n</div>\n</Menubar SubTrigger>\n<Menubar Portal>\n<Menubar",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1398443,
      "relative_path": "documentation\\radix\\_primitives_docs_components_menubar.html",
      "source_type": "documentation"
    },
    "token_count": 484,
    "chunk_index": 0,
    "total_chunks": 17
  },
  {
    "id": "3f32f457dab6142dc318d4c05e948a3f",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_menubar.html",
    "source_type": "documentation",
    "title": "Menubar – Radix Primitives",
    "content": "]); const [radioSelection, setRadioSelection] = React useState(RADIO_ITEMS[2]); return ( <Menubar Root className=\"MenubarRoot\"> <Menubar Menu> <Menubar Trigger className=\"MenubarTrigger\">File</Menubar Trigger> <Menubar Portal> <Menubar Content className=\"MenubarContent\" align=\"start\" sideOffset={5} alignOffset={-3} > <Menubar Item className=\"MenubarItem\"> New Tab <div className=\"RightSlot\">⌘ T</div> </Menubar Item> <Menubar Item className=\"MenubarItem\"> New Window <div className=\"RightSlot\">⌘ N</div> </Menubar Item> <Menubar Item className=\"MenubarItem\" disabled> New Incognito Window </Menubar Item> <Menubar Separator className=\"MenubarSeparator\" /> <Menubar Sub> <Menubar SubTrigger className=\"MenubarSubTrigger\"> Share <div className=\"RightSlot\"> <ChevronRightIcon /> </div> </Menubar SubTrigger> <Menubar Portal> <MenubarSubContent\nclassName=\"MenubarSubContent\"\nalignOffset={-5}\n>\n<Menubar Item className=\"MenubarItem\">\nEmail Link\n</Menubar Item>\n<Menubar Item className=\"MenubarItem\">Messages</Menubar Item>\n<Menubar Item className=\"MenubarItem\">Notes</Menubar Item>\n</Menubar SubContent>\n</Menubar Portal>\n</Menubar Sub>\n<Menubar Separator className=\"MenubarSeparator\" />\n<Menubar Item className=\"MenubarItem\">\nPrint… <div className=\"RightSlot\">⌘ P</div>\n</Menubar Item>\n</Menubar Content>\n</Menubar Portal>\n</Menubar Menu>\n<Menubar Menu>\n<Menubar Trigger className=\"MenubarTrigger\">Edit</Menubar Trigger>\n<Menubar Portal>\n<Menubar Content\nclassName=\"MenubarContent\"\nalign=\"start\"\nsideOffset={5}\nalignOffset={-3}\n>\n<Menubar Item className=\"MenubarItem\">\nUndo <div className=\"RightSlot\">⌘ Z</div>\n</Menubar Item>\n<Menubar Item className=\"MenubarItem\">\nRedo <div className=\"RightSlot\">⇧ ⌘ Z</div>\n</Menubar Item>\n<Menubar Separator className=\"MenubarSeparator\" />\n<Menubar",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1398443,
      "relative_path": "documentation\\radix\\_primitives_docs_components_menubar.html",
      "source_type": "documentation"
    },
    "token_count": 496,
    "chunk_index": 1,
    "total_chunks": 17
  },
  {
    "id": "33f1585d245166c67559eaa7efe3da58",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_menubar.html",
    "source_type": "documentation",
    "title": "Menubar – Radix Primitives",
    "content": "Email Link </Menubar Item> <Menubar Item className=\"MenubarItem\">Messages</Menubar Item> <Menubar Item className=\"MenubarItem\">Notes</Menubar Item> </Menubar SubContent> </Menubar Portal> </Menubar Sub> <Menubar Separator className=\"MenubarSeparator\" /> <Menubar Item className=\"MenubarItem\"> Print… <div className=\"RightSlot\">⌘ P</div> </Menubar Item> </Menubar Content> </Menubar Portal> </Menubar Menu> <Menubar Menu> <Menubar Trigger className=\"MenubarTrigger\">Edit</Menubar Trigger> <Menubar Portal> <Menubar Content className=\"MenubarContent\" align=\"start\" sideOffset={5} alignOffset={-3} > <Menubar Item className=\"MenubarItem\"> Undo <div className=\"RightSlot\">⌘ Z</div> </Menubar Item> <Menubar Item className=\"MenubarItem\"> Redo <div className=\"RightSlot\">⇧ ⌘ Z</div> </Menubar Item> <Menubar Separator className=\"MenubarSeparator\" /> <MenubarSub>\n<Menubar SubTrigger className=\"MenubarSubTrigger\">\nFind\n<div className=\"RightSlot\">\n<ChevronRightIcon />\n</div>\n</Menubar SubTrigger>\n<Menubar Portal>\n<Menubar SubContent\nclassName=\"MenubarSubContent\"\nalignOffset={-5}\n>\n<Menubar Item className=\"MenubarItem\">\nSearch the web…\n</Menubar Item>\n<Menubar Separator className=\"MenubarSeparator\" />\n<Menubar Item className=\"MenubarItem\">Find…</Menubar Item>\n<Menubar Item className=\"MenubarItem\">Find Next</Menubar Item>\n<Menubar Item className=\"MenubarItem\">\nFind Previous\n</Menubar Item>\n</Menubar SubContent>\n</Menubar Portal>\n</Menubar Sub>\n<Menubar Separator className=\"MenubarSeparator\" />\n<Menubar Item className=\"MenubarItem\">Cut</Menubar Item>\n<Menubar Item className=\"MenubarItem\">Copy</Menubar Item>\n<Menubar Item className=\"MenubarItem\">Paste</Menubar Item>\n</Menubar Content>\n</Menubar Portal>\n</Menubar Menu>\n<Menubar Menu>\n<Menubar Trigger className=\"MenubarTrigger\">View</Menubar Trigger>\n<Menubar",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1398443,
      "relative_path": "documentation\\radix\\_primitives_docs_components_menubar.html",
      "source_type": "documentation"
    },
    "token_count": 500,
    "chunk_index": 2,
    "total_chunks": 17
  },
  {
    "id": "90b8417241c340fc10ee5f237091f422",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_menubar.html",
    "source_type": "documentation",
    "title": "Menubar – Radix Primitives",
    "content": "className=\"RightSlot\"> <ChevronRightIcon /> </div> </Menubar SubTrigger> <Menubar Portal> <Menubar SubContent className=\"MenubarSubContent\" alignOffset={-5} > <Menubar Item className=\"MenubarItem\"> Search the web… </Menubar Item> <Menubar Separator className=\"MenubarSeparator\" /> <Menubar Item className=\"MenubarItem\">Find…</Menubar Item> <Menubar Item className=\"MenubarItem\">Find Next</Menubar Item> <Menubar Item className=\"MenubarItem\"> Find Previous </Menubar Item> </Menubar SubContent> </Menubar Portal> </Menubar Sub> <Menubar Separator className=\"MenubarSeparator\" /> <Menubar Item className=\"MenubarItem\">Cut</Menubar Item> <Menubar Item className=\"MenubarItem\">Copy</Menubar Item> <Menubar Item className=\"MenubarItem\">Paste</Menubar Item> </Menubar Content> </Menubar Portal> </Menubar Menu> <Menubar Menu> <Menubar Trigger className=\"MenubarTrigger\">View</Menubar Trigger> <MenubarPortal>\n<Menubar Content\nclassName=\"MenubarContent\"\nalign=\"start\"\nsideOffset={5}\nalignOffset={-14}\n>\n{CHECK_ITEMS map((item) => (\n<Menubar CheckboxItem\nclassName=\"MenubarCheckboxItem inset\"\nkey={item}\nchecked={checkedSelection includes(item)}\nonCheckedChange={() =>\nsetCheckedSelection((current) =>\ncurrent includes(item) current filter((el) => el == item)\n: current concat(item),\n)\n}\n>\n<Menubar ItemIndicator className=\"MenubarItemIndicator\">\n<CheckIcon />\n</Menubar ItemIndicator>\n{item}\n</Menubar CheckboxItem>\n))}\n<Menubar Separator className=\"MenubarSeparator\" />\n<Menubar Item className=\"MenubarItem inset\">\nReload <div className=\"RightSlot\">⌘ R</div>\n</Menubar Item>\n<Menubar Item className=\"MenubarItem inset\" disabled>\nForce Reload <div className=\"RightSlot\">⇧ ⌘ R</div>\n</Menubar Item>\n<Menubar Separator className=\"MenubarSeparator\" />\n<Menubar Item className=\"MenubarItem inset\">\nToggle Fullscreen\n</Menubar Item>\n<Menubar Separator className=\"MenubarSeparator\" />\n<Menubar",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1398443,
      "relative_path": "documentation\\radix\\_primitives_docs_components_menubar.html",
      "source_type": "documentation"
    },
    "token_count": 491,
    "chunk_index": 3,
    "total_chunks": 17
  },
  {
    "id": "1ab1535c2ab466719d30fb6e3d1152df",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_menubar.html",
    "source_type": "documentation",
    "title": "Menubar – Radix Primitives",
    "content": "key={item} checked={checkedSelection includes(item)} onCheckedChange={() => setCheckedSelection((current) => current includes(item) current filter((el) => el == item) : current concat(item), ) } > <Menubar ItemIndicator className=\"MenubarItemIndicator\"> <CheckIcon /> </Menubar ItemIndicator> {item} </Menubar CheckboxItem> ))} <Menubar Separator className=\"MenubarSeparator\" /> <Menubar Item className=\"MenubarItem inset\"> Reload <div className=\"RightSlot\">⌘ R</div> </Menubar Item> <Menubar Item className=\"MenubarItem inset\" disabled> Force Reload <div className=\"RightSlot\">⇧ ⌘ R</div> </Menubar Item> <Menubar Separator className=\"MenubarSeparator\" /> <Menubar Item className=\"MenubarItem inset\"> Toggle Fullscreen </Menubar Item> <Menubar Separator className=\"MenubarSeparator\" /> <MenubarItem className=\"MenubarItem inset\">\nHide Sidebar\n</Menubar Item>\n</Menubar Content>\n</Menubar Portal>\n</Menubar Menu>\n<Menubar Menu>\n<Menubar Trigger className=\"MenubarTrigger\">Profiles</Menubar Trigger>\n<Menubar Portal>\n<Menubar Content\nclassName=\"MenubarContent\"\nalign=\"start\"\nsideOffset={5}\nalignOffset={-14}\n>\n<Menubar RadioGroup\nvalue={radioSelection}\nonValueChange={setRadioSelection}\n>\n{RADIO_ITEMS map((item) => (\n<Menubar RadioItem\nclassName=\"MenubarRadioItem inset\"\nkey={item}\nvalue={item}\n>\n<Menubar ItemIndicator className=\"MenubarItemIndicator\">\n<DotFilledIcon />\n</Menubar ItemIndicator>\n{item}\n</Menubar RadioItem>\n))}\n<Menubar Separator className=\"MenubarSeparator\" />\n<Menubar Item className=\"MenubarItem inset\">Edit…</Menubar Item>\n<Menubar Separator className=\"MenubarSeparator\" />\n<Menubar Item className=\"MenubarItem inset\">\nAdd Profile…\n</Menubar Item>\n</Menubar RadioGroup>\n</Menubar Content>\n</Menubar Portal>\n</Menubar Menu>\n</Menubar Root>\n);\n};\nexport default MenubarDemo;\nExpand code\nFeaturesCan be controlled or uncontrolled Supports submenus with configurable reading direction Supports items, labels, groups of items",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1398443,
      "relative_path": "documentation\\radix\\_primitives_docs_components_menubar.html",
      "source_type": "documentation"
    },
    "token_count": 489,
    "chunk_index": 4,
    "total_chunks": 17
  },
  {
    "id": "621a66da97d56d6edec3f451ac1a0f84",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_menubar.html",
    "source_type": "documentation",
    "title": "Menubar – Radix Primitives",
    "content": "map((item) => ( <Menubar RadioItem className=\"MenubarRadioItem inset\" key={item} value={item} > <Menubar ItemIndicator className=\"MenubarItemIndicator\"> <DotFilledIcon /> </Menubar ItemIndicator> {item} </Menubar RadioItem> ))} <Menubar Separator className=\"MenubarSeparator\" /> <Menubar Item className=\"MenubarItem inset\">Edit…</Menubar Item> <Menubar Separator className=\"MenubarSeparator\" /> <Menubar Item className=\"MenubarItem inset\"> Add Profile… </Menubar Item> </Menubar RadioGroup> </Menubar Content> </Menubar Portal> </Menubar Menu> </Menubar Root> ); }; export default MenubarDemo; Expand code FeaturesCan be controlled or uncontrolled Supports submenus with configurable reading direction Supports items, labels, groups of itemsSupports checkable items (single or multiple) Customize side, alignment, offsets, collision handling Optionally render a pointing arrow Focus is fully managed Full keyboard navigation Typeahead support Component Reference LinksVersion: 1 1 15Size: 33 81 kBView sourceReport an issueARIA design pattern\nInstallation\nInstall the component from your command line npm install @radix-ui/react-menubar\nAnatomy\nImport all parts and piece them together import { Menubar } from \"radix-ui\";\nexport default () => (\n<Menubar Root>\n<Menubar Menu>\n<Menubar Trigger />\n<Menubar Portal>\n<Menubar Content>\n<Menubar Label />\n<Menubar Item />\n<Menubar Group>\n<Menubar Item />\n</Menubar Group>\n<Menubar CheckboxItem>\n<Menubar ItemIndicator />\n</Menubar CheckboxItem>\n<Menubar RadioGroup>\n<Menubar RadioItem>\n<Menubar ItemIndicator />\n</Menubar RadioItem>\n</Menubar RadioGroup>\n<Menubar Sub>\n<Menubar SubTrigger />\n<Menubar Portal>\n<Menubar SubContent />\n</Menubar Portal>\n</Menubar Sub>\n<Menubar Separator />\n<Menubar Arrow />\n</Menubar Content>\n</Menubar Portal>\n</Menubar Menu>\n</Menubar Root>\n);\nAPI Reference\nRoot\nContains all the parts of a menubar",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1398443,
      "relative_path": "documentation\\radix\\_primitives_docs_components_menubar.html",
      "source_type": "documentation"
    },
    "token_count": 460,
    "chunk_index": 5,
    "total_chunks": 17
  },
  {
    "id": "1a6c6b0f97896f5da0c95f29e86a3f8e",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_menubar.html",
    "source_type": "documentation",
    "title": "Menubar – Radix Primitives",
    "content": "Trigger /> <Menubar Portal> <Menubar Content> <Menubar Label /> <Menubar Item /> <Menubar Group> <Menubar Item /> </Menubar Group> <Menubar CheckboxItem> <Menubar ItemIndicator /> </Menubar CheckboxItem> <Menubar RadioGroup> <Menubar RadioItem> <Menubar ItemIndicator /> </Menubar RadioItem> </Menubar RadioGroup> <Menubar Sub> <Menubar SubTrigger /> <Menubar Portal> <Menubar SubContent /> </Menubar Portal> </Menubar Sub> <Menubar Separator /> <Menubar Arrow /> </Menubar Content> </Menubar Portal> </Menubar Menu> </Menubar Root> ); API Reference Root Contains all the parts of a menubarPropTypeDefaultasChildProp descriptionbooleanfalsedefaultValueProp descriptionstringNo default valuevalueProp descriptionstringNo default valueonValueChangeProp descriptionfunctionSee full typeNo default valuedirProp descriptionenumSee full typeNo default valueloopProp descriptionbooleanfalse\nMenu\nA top level menu item, contains a trigger with content combination PropTypeDefaultasChildProp descriptionbooleanfalsevalueProp descriptionstringNo default value\nTrigger\nThe button that toggles the content By default, the Menubar Content will position itself against the trigger PropTypeDefaultasChildProp descriptionbooleanfalse\nData attributeValues[data-state]\"open\"  | \"closed\" [data-highlighted]Present when highlighted[data-disabled]Present when disabled\nPortal\nWhen used, portals the content part into the body PropTypeDefaultforceMountProp descriptionbooleanNo default valuecontainerProp descriptionHTMLElementdocument body\nContent\nThe component that pops out when a menu is open",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1398443,
      "relative_path": "documentation\\radix\\_primitives_docs_components_menubar.html",
      "source_type": "documentation"
    },
    "token_count": 347,
    "chunk_index": 6,
    "total_chunks": 17
  },
  {
    "id": "bb1aebcb2c25c3c66e884435effa7046",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_menubar.html",
    "source_type": "documentation",
    "title": "Menubar – Radix Primitives",
    "content": "default valueloopProp descriptionbooleanfalse Menu A top level menu item, contains a trigger with content combination PropTypeDefaultasChildProp descriptionbooleanfalsevalueProp descriptionstringNo default value Trigger The button that toggles the content By default, the Menubar Content will position itself against the trigger PropTypeDefaultasChildProp descriptionbooleanfalse Data attributeValues[data-state]\"open\" | \"closed\" [data-highlighted]Present when highlighted[data-disabled]Present when disabled Portal When used, portals the content part into the body PropTypeDefaultforceMountProp descriptionbooleanNo default valuecontainerProp descriptionHTMLElementdocument body Content The component that pops out when a menu is openPropTypeDefaultasChildProp descriptionbooleanfalseloopProp descriptionbooleanfalseonCloseAutoFocusProp descriptionfunctionSee full typeNo default valueonEscapeKeyDownProp descriptionfunctionSee full typeNo default valueonPointerDownOutsideProp descriptionfunctionSee full typeNo default valueonFocusOutsideProp descriptionfunctionSee full typeNo default valueonInteractOutsideProp descriptionfunctionSee full typeNo default valueforceMountProp descriptionbooleanNo default valuesideProp descriptionenumSee full type\"bottom\"sideOffsetProp descriptionnumber0alignProp descriptionenumSee full type\"center\"alignOffsetProp descriptionnumber0avoidCollisionsProp descriptionbooleantruecollisionBoundaryProp descriptionBoundarySee full type[]collisionPaddingProp descriptionnumber | PaddingSee full type0arrowPaddingProp descriptionnumber0stickyProp descriptionenumSee full type\"partial\"hideWhenDetachedProp descriptionbooleanfalse\nData attributeValues[data-state]\"open\"  | \"closed\" [data-side]\"left\"  | \"right\"  | \"bottom\"  | \"top\" [data-align]\"start\"  | \"end\"  | \"center\"\nCSS VariableDescription--radix-menubar-content-transform-originThe transform-origin computed from the content and arrow positions/offsets--radix-menubar-content-available-widthThe remaining width between the trigger and the boundary edge--radix-menubar-content-available-heightThe remaining height between the trigger and the boundary edge--radix-menubar-trigger-widthThe width of the trigger--radix-menubar-trigger-heightThe height of the trigger\nArrow\nAn optional arrow element to render alongside a menubar menu This can be used to help visually link the trigger with the Menubar Content Must be rendered inside Menubar Content",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1398443,
      "relative_path": "documentation\\radix\\_primitives_docs_components_menubar.html",
      "source_type": "documentation"
    },
    "token_count": 473,
    "chunk_index": 7,
    "total_chunks": 17
  },
  {
    "id": "425aa5f38f33fd3ba635cf38a804bd60",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_menubar.html",
    "source_type": "documentation",
    "title": "Menubar – Radix Primitives",
    "content": "| \"bottom\" | \"top\" [data-align]\"start\" | \"end\" | \"center\" CSS VariableDescription--radix-menubar-content-transform-originThe transform-origin computed from the content and arrow positions/offsets--radix-menubar-content-available-widthThe remaining width between the trigger and the boundary edge--radix-menubar-content-available-heightThe remaining height between the trigger and the boundary edge--radix-menubar-trigger-widthThe width of the trigger--radix-menubar-trigger-heightThe height of the trigger Arrow An optional arrow element to render alongside a menubar menu This can be used to help visually link the trigger with the Menubar Content Must be rendered inside Menubar ContentPropTypeDefaultasChildProp descriptionbooleanfalsewidthProp descriptionnumber10heightProp descriptionnumber5\nItem\nThe component that contains the menubar items PropTypeDefaultasChildProp descriptionbooleanfalsedisabledProp descriptionbooleanNo default valueonSelectProp descriptionfunctionSee full typeNo default valuetextValueProp descriptionstringNo default value\nData attributeValues[data-highlighted]Present when highlighted[data-disabled]Present when disabled\nGroup\nUsed to group multiple Menubar Items PropTypeDefaultasChildProp descriptionbooleanfalse\nLabel\nUsed to render a label It won't be focusable using arrow keys PropTypeDefaultasChildProp descriptionbooleanfalse\nCheckboxItem\nAn item that can be controlled and rendered like a checkbox PropTypeDefaultasChildProp descriptionbooleanfalsecheckedProp descriptionboolean | 'indeterminate'No default valueonCheckedChangeProp descriptionfunctionSee full typeNo default valuedisabledProp descriptionbooleanNo default valueonSelectProp descriptionfunctionSee full typeNo default valuetextValueProp descriptionstringNo default value\nData attributeValues[data-state]\"checked\"  | \"unchecked\" [data-highlighted]Present when highlighted[data-disabled]Present when disabled\nRadioGroup\nUsed to group multiple Menubar RadioItems PropTypeDefaultasChildProp descriptionbooleanfalsevalueProp descriptionstringNo default valueonValueChangeProp descriptionfunctionSee full typeNo default value\nRadioItem\nAn item that can be controlled and rendered like a radio",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1398443,
      "relative_path": "documentation\\radix\\_primitives_docs_components_menubar.html",
      "source_type": "documentation"
    },
    "token_count": 429,
    "chunk_index": 8,
    "total_chunks": 17
  },
  {
    "id": "24fde954504b0f12ebb188c809d4577a",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_menubar.html",
    "source_type": "documentation",
    "title": "Menubar – Radix Primitives",
    "content": "keys PropTypeDefaultasChildProp descriptionbooleanfalse CheckboxItem An item that can be controlled and rendered like a checkbox PropTypeDefaultasChildProp descriptionbooleanfalsecheckedProp descriptionboolean | 'indeterminate'No default valueonCheckedChangeProp descriptionfunctionSee full typeNo default valuedisabledProp descriptionbooleanNo default valueonSelectProp descriptionfunctionSee full typeNo default valuetextValueProp descriptionstringNo default value Data attributeValues[data-state]\"checked\" | \"unchecked\" [data-highlighted]Present when highlighted[data-disabled]Present when disabled RadioGroup Used to group multiple Menubar RadioItems PropTypeDefaultasChildProp descriptionbooleanfalsevalueProp descriptionstringNo default valueonValueChangeProp descriptionfunctionSee full typeNo default value RadioItem An item that can be controlled and rendered like a radioPropTypeDefaultasChildProp descriptionbooleanfalsevalue*Prop descriptionstringNo default valuedisabledProp descriptionbooleanNo default valueonSelectProp descriptionfunctionSee full typeNo default valuetextValueProp descriptionstringNo default value\nData attributeValues[data-state]\"checked\"  | \"unchecked\" [data-highlighted]Present when highlighted[data-disabled]Present when disabled\nItemIndicator\nRenders when the parent Menubar CheckboxItem or Menubar RadioItem is checked You can style this element directly, or you can use it as a wrapper to put an icon into, or both PropTypeDefaultasChildProp descriptionbooleanfalseforceMountProp descriptionbooleanNo default value\nData attributeValues[data-state]\"checked\"  | \"unchecked\"\nSeparator\nUsed to visually separate items in a menubar menu PropTypeDefaultasChildProp descriptionbooleanfalse\nSub\nContains all the parts of a submenu PropTypeDefaultdefaultOpenProp descriptionbooleanNo default valueopenProp descriptionbooleanNo default valueonOpenChangeProp descriptionfunctionSee full typeNo default value\nSubTrigger\nAn item that opens a submenu Must be rendered inside Menubar Sub PropTypeDefaultasChildProp descriptionbooleanfalsedisabledProp descriptionbooleanNo default valuetextValueProp descriptionstringNo default value\nData attributeValues[data-state]\"open\"  | \"closed\" [data-highlighted]Present when highlighted[data-disabled]Present when disabled\nSubContent\nThe component that pops out when a submenu is open Must be rendered inside Menubar Sub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1398443,
      "relative_path": "documentation\\radix\\_primitives_docs_components_menubar.html",
      "source_type": "documentation"
    },
    "token_count": 462,
    "chunk_index": 9,
    "total_chunks": 17
  },
  {
    "id": "86e75f0d54d4ea7c5d3ea68ebebdad4c",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_menubar.html",
    "source_type": "documentation",
    "title": "Menubar – Radix Primitives",
    "content": "visually separate items in a menubar menu PropTypeDefaultasChildProp descriptionbooleanfalse Sub Contains all the parts of a submenu PropTypeDefaultdefaultOpenProp descriptionbooleanNo default valueopenProp descriptionbooleanNo default valueonOpenChangeProp descriptionfunctionSee full typeNo default value SubTrigger An item that opens a submenu Must be rendered inside Menubar Sub PropTypeDefaultasChildProp descriptionbooleanfalsedisabledProp descriptionbooleanNo default valuetextValueProp descriptionstringNo default value Data attributeValues[data-state]\"open\" | \"closed\" [data-highlighted]Present when highlighted[data-disabled]Present when disabled SubContent The component that pops out when a submenu is open Must be rendered inside Menubar SubPropTypeDefaultasChildProp descriptionbooleanfalseloopProp descriptionbooleanfalseonEscapeKeyDownProp descriptionfunctionSee full typeNo default valueonPointerDownOutsideProp descriptionfunctionSee full typeNo default valueonFocusOutsideProp descriptionfunctionSee full typeNo default valueonInteractOutsideProp descriptionfunctionSee full typeNo default valueforceMountProp descriptionbooleanNo default valuesideOffsetProp descriptionnumber0alignOffsetProp descriptionnumber0avoidCollisionsProp descriptionbooleantruecollisionBoundaryProp descriptionBoundarySee full type[]collisionPaddingProp descriptionnumber | PaddingSee full type0arrowPaddingProp descriptionnumber0stickyProp descriptionenumSee full type\"partial\"hideWhenDetachedProp descriptionbooleanfalse\nData attributeValues[data-state]\"open\"  | \"closed\" [data-side]\"left\"  | \"right\"  | \"bottom\"  | \"top\" [data-align]\"start\"  | \"end\"  | \"center\" [data-orientation]\"vertical\"  | \"horizontal\"\nCSS VariableDescription--radix-menubar-content-transform-originThe transform-origin computed from the content and arrow positions/offsets--radix-menubar-content-available-widthThe remaining width between the trigger and the boundary edge--radix-menubar-content-available-heightThe remaining height between the trigger and the boundary edge--radix-menubar-trigger-widthThe width of the trigger--radix-menubar-trigger-heightThe height of the trigger\nExamples\nWith submenus\nYou can create submenus by using Menubar Sub in combination with its parts <Menubar Root>\n<Menubar Menu>\n<Menubar Trigger>…</Menubar Trigger>\n<Menubar Portal>\n<Menubar Content>\n<Menubar Item>…</Menubar Item>\n<Menubar Item>…</Menubar",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1398443,
      "relative_path": "documentation\\radix\\_primitives_docs_components_menubar.html",
      "source_type": "documentation"
    },
    "token_count": 500,
    "chunk_index": 10,
    "total_chunks": 17
  },
  {
    "id": "5768fa6fdcf6ad924a3ef6fb6a013b86",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_menubar.html",
    "source_type": "documentation",
    "title": "Menubar – Radix Primitives",
    "content": "[data-align]\"start\" | \"end\" | \"center\" [data-orientation]\"vertical\" | \"horizontal\" CSS VariableDescription--radix-menubar-content-transform-originThe transform-origin computed from the content and arrow positions/offsets--radix-menubar-content-available-widthThe remaining width between the trigger and the boundary edge--radix-menubar-content-available-heightThe remaining height between the trigger and the boundary edge--radix-menubar-trigger-widthThe width of the trigger--radix-menubar-trigger-heightThe height of the trigger Examples With submenus You can create submenus by using Menubar Sub in combination with its parts <Menubar Root> <Menubar Menu> <Menubar Trigger>…</Menubar Trigger> <Menubar Portal> <Menubar Content> <Menubar Item>…</Menubar Item> <Menubar Item>…</MenubarItem>\n<Menubar Separator />\n<Menubar Sub>\n<Menubar SubTrigger>Sub menu →</Menubar SubTrigger>\n<Menubar Portal>\n<Menubar SubContent>\n<Menubar Item>Sub menu item</Menubar Item>\n<Menubar Item>Sub menu item</Menubar Item>\n<Menubar Arrow />\n</Menubar SubContent>\n</Menubar Portal>\n</Menubar Sub>\n<Menubar Separator />\n<Menubar Item>…</Menubar Item>\n</Menubar Content>\n</Menubar Portal>\n</Menubar Menu>\n</Menubar Root>\nWith disabled items\nYou can add special styles to disabled items via the data-disabled attribute // index jsx\nimport { Menubar } from \"radix-ui\";\nimport \" /styles css\";\nexport default () => (\n<Menubar Root>\n<Menubar Menu>\n<Menubar Trigger>…</Menubar Trigger>\n<Menubar Portal>\n<Menubar Content>\n<Menubar Item className=\"MenubarItem\" disabled>\n…\n</Menubar Item>\n<Menubar Item className=\"MenubarItem\">…</Menubar Item>\n</Menubar Content>\n</Menubar Portal>\n</Menubar Menu>\n</Menubar Root>\n);\n/* styles css */ MenubarItem[data-disabled] {\ncolor: gainsboro;\n}\nWith separators\nUse the Separator part to add a separator between items <Menubar Root>\n<Menubar Menu>\n<Menubar Trigger>…</Menubar Trigger>\n<Menubar Portal>\n<Menubar Content>\n<Menubar Item>…</Menubar",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1398443,
      "relative_path": "documentation\\radix\\_primitives_docs_components_menubar.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 11,
    "total_chunks": 17
  },
  {
    "id": "6899ee0e0975c4f9919273e757cfc23b",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_menubar.html",
    "source_type": "documentation",
    "title": "Menubar – Radix Primitives",
    "content": "from \"radix-ui\"; import \" /styles css\"; export default () => ( <Menubar Root> <Menubar Menu> <Menubar Trigger>…</Menubar Trigger> <Menubar Portal> <Menubar Content> <Menubar Item className=\"MenubarItem\" disabled> … </Menubar Item> <Menubar Item className=\"MenubarItem\">…</Menubar Item> </Menubar Content> </Menubar Portal> </Menubar Menu> </Menubar Root> ); /* styles css */ MenubarItem[data-disabled] { color: gainsboro; } With separators Use the Separator part to add a separator between items <Menubar Root> <Menubar Menu> <Menubar Trigger>…</Menubar Trigger> <Menubar Portal> <Menubar Content> <Menubar Item>…</MenubarItem>\n<Menubar Separator />\n<Menubar Item>…</Menubar Item>\n<Menubar Separator />\n<Menubar Item>…</Menubar Item>\n</Menubar Content>\n</Menubar Portal>\n</Menubar Menu>\n</Menubar Root>\nWith labels\nUse the Label part to help label a section <Menubar Root>\n<Menubar Menu>\n<Menubar Trigger>…</Menubar Trigger>\n<Menubar Portal>\n<Menubar Content>\n<Menubar Label>Label</Menubar Label>\n<Menubar Item>…</Menubar Item>\n<Menubar Item>…</Menubar Item>\n<Menubar Item>…</Menubar Item>\n</Menubar Content>\n</Menubar Portal>\n</Menubar Menu>\n</Menubar Root>\nWith checkbox items\nUse the CheckboxItem part to add an item that can be checked import * as React from \"react\";\nimport { CheckIcon } from \"@radix-ui/react-icons\";\nimport { Menubar } from \"radix-ui\";\nexport default () => {\nconst [checked, setChecked] = React useState(true);\nreturn (\n<Menubar Root>\n<Menubar Menu>\n<Menubar Trigger>…</Menubar Trigger>\n<Menubar Portal>\n<Menubar Content>\n<Menubar Item>…</Menubar Item>\n<Menubar Item>…</Menubar Item>\n<Menubar Separator />\n<Menubar CheckboxItem\nchecked={checked}\nonCheckedChange={setChecked}\n>\n<Menubar ItemIndicator>\n<CheckIcon />\n</Menubar ItemIndicator>\nCheckbox item\n</Menubar",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1398443,
      "relative_path": "documentation\\radix\\_primitives_docs_components_menubar.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 12,
    "total_chunks": 17
  },
  {
    "id": "202bc0b97c3f4e2e680bfbdb7558d408",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_menubar.html",
    "source_type": "documentation",
    "title": "Menubar – Radix Primitives",
    "content": "the CheckboxItem part to add an item that can be checked import * as React from \"react\"; import { CheckIcon } from \"@radix-ui/react-icons\"; import { Menubar } from \"radix-ui\"; export default () => { const [checked, setChecked] = React useState(true); return ( <Menubar Root> <Menubar Menu> <Menubar Trigger>…</Menubar Trigger> <Menubar Portal> <Menubar Content> <Menubar Item>…</Menubar Item> <Menubar Item>…</Menubar Item> <Menubar Separator /> <Menubar CheckboxItem checked={checked} onCheckedChange={setChecked} > <Menubar ItemIndicator> <CheckIcon /> </Menubar ItemIndicator> Checkbox item </MenubarCheckboxItem>\n</Menubar Content>\n</Menubar Portal>\n</Menubar Menu>\n</Menubar Root>\n);\n};\nWith radio items\nUse the RadioGroup and RadioItem parts to add an item that can be checked amongst others import * as React from \"react\";\nimport { CheckIcon } from \"@radix-ui/react-icons\";\nimport { Menubar } from \"radix-ui\";\nexport default () => {\nconst [color, setColor] = React useState(\"blue\");\nreturn (\n<Menubar Root>\n<Menubar Menu>\n<Menubar Trigger>…</Menubar Trigger>\n<Menubar Portal>\n<Menubar Content>\n<Menubar RadioGroup value={color} onValueChange={setColor}>\n<Menubar RadioItem value=\"red\">\n<Menubar ItemIndicator>\n<CheckIcon />\n</Menubar ItemIndicator>\nRed\n</Menubar RadioItem>\n<Menubar RadioItem value=\"blue\">\n<Menubar ItemIndicator>\n<CheckIcon />\n</Menubar ItemIndicator>\nBlue\n</Menubar RadioItem>\n</Menubar RadioGroup>\n</Menubar Content>\n</Menubar Portal>\n</Menubar Menu>\n</Menubar Root>\n);\n};\nWith complex items\nYou can add extra decorative elements in the Item parts, such as images import { Menubar } from \"radix-ui\";\nexport default () => (\n<Menubar Root>\n<Menubar Menu>\n<Menubar Trigger>…</Menubar Trigger>\n<Menubar Portal>\n<Menubar Content>\n<Menubar Item>\n<img src=\"…\" />\nAdolfo Hess\n</Menubar Item>\n<Menubar Item>\n<img src=\"…\" />\nMiyah Myles\n</Menubar",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1398443,
      "relative_path": "documentation\\radix\\_primitives_docs_components_menubar.html",
      "source_type": "documentation"
    },
    "token_count": 500,
    "chunk_index": 13,
    "total_chunks": 17
  },
  {
    "id": "966410d5d9d0019e16cc70a8a2904911",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_menubar.html",
    "source_type": "documentation",
    "title": "Menubar – Radix Primitives",
    "content": "<Menubar ItemIndicator> <CheckIcon /> </Menubar ItemIndicator> Blue </Menubar RadioItem> </Menubar RadioGroup> </Menubar Content> </Menubar Portal> </Menubar Menu> </Menubar Root> ); }; With complex items You can add extra decorative elements in the Item parts, such as images import { Menubar } from \"radix-ui\"; export default () => ( <Menubar Root> <Menubar Menu> <Menubar Trigger>…</Menubar Trigger> <Menubar Portal> <Menubar Content> <Menubar Item> <img src=\"…\" /> Adolfo Hess </Menubar Item> <Menubar Item> <img src=\"…\" /> Miyah Myles </MenubarItem>\n</Menubar Content>\n</Menubar Portal>\n</Menubar Menu>\n</Menubar Root>\n);\nConstrain the content/sub-content size\nYou may want to constrain the width of the content (or sub-content) so that it matches the trigger (or sub-trigger) width You may also want to constrain its height to not exceed the viewport We expose several CSS custom properties such as --radix-menubar-trigger-width and --radix-menubar-content-available-height to support this Use them to constrain the content dimensions // index jsx\nimport { Menubar } from \"radix-ui\";\nimport \" /styles css\";\nexport default () => (\n<Menubar Root>\n<Menubar Trigger>…</Menubar Trigger>\n<Menubar Portal>\n<Menubar Content className=\"MenubarContent\" sideOffset={5}>\n…\n</Menubar Content>\n</Menubar Portal>\n</Menubar Root>\n);\n/* styles css */ MenubarContent {\nwidth: var(--radix-menubar-trigger-width);\nmax-height: var(--radix-menubar-content-available-height);\n}\nOrigin-aware animations\nWe expose a CSS custom property --radix-menubar-content-transform-origin Use it to animate the content from its computed origin based on side, sideOffset, align, alignOffset and any collisions // index jsx\nimport { Menubar } from \"radix-ui\";\nimport \" /styles css\";\nexport default () => (\n<Menubar Root>\n<Menubar Menu>\n<Menubar Trigger>…</Menubar Trigger>\n<Menubar Portal>\n<Menubar Content className=\"MenubarContent\">…</Menubar Content>\n</Menubar Portal>\n</Menubar Menu>\n</Menubar Root>\n);\n/* styles css */",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1398443,
      "relative_path": "documentation\\radix\\_primitives_docs_components_menubar.html",
      "source_type": "documentation"
    },
    "token_count": 500,
    "chunk_index": 14,
    "total_chunks": 17
  },
  {
    "id": "4f38c73e083c10d4c3d4d70777c8a07e",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_menubar.html",
    "source_type": "documentation",
    "title": "Menubar – Radix Primitives",
    "content": "{ width: var(--radix-menubar-trigger-width); max-height: var(--radix-menubar-content-available-height); } Origin-aware animations We expose a CSS custom property --radix-menubar-content-transform-origin Use it to animate the content from its computed origin based on side, sideOffset, align, alignOffset and any collisions // index jsx import { Menubar } from \"radix-ui\"; import \" /styles css\"; export default () => ( <Menubar Root> <Menubar Menu> <Menubar Trigger>…</Menubar Trigger> <Menubar Portal> <Menubar Content className=\"MenubarContent\">…</Menubar Content> </Menubar Portal> </Menubar Menu> </Menubar Root> ); /* styles css */MenubarContent {\ntransform-origin: var(--radix-menubar-content-transform-origin);\nanimation: scaleIn 0 5s ease-out;\n}\n@keyframes scaleIn {\nfrom {\nopacity: 0;\ntransform: scale(0);\n}\nto {\nopacity: 1;\ntransform: scale(1);\n}\n}\nCollision-aware animations\nWe expose data-side and data-align attributes Their values will change at runtime to reflect collisions Use them to create collision and direction-aware animations // index jsx\nimport { Menubar } from \"radix-ui\";\nimport \" /styles css\";\nexport default () => (\n<Menubar Root>\n<Menubar Menu>\n<Menubar Trigger>…</Menubar Trigger>\n<Menubar Portal>\n<Menubar Content className=\"MenubarContent\">…</Menubar Content>\n</Menubar Portal>\n</Menubar Menu>\n</Menubar Root>\n);\n/* styles css */ MenubarContent {\nanimation-duration: 0 6s;\nanimation-timing-function: cubic-bezier(0 16, 1, 0 3, 1);\n} MenubarContent[data-side=\"top\"] {\nanimation-name: slideUp;\n}",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1398443,
      "relative_path": "documentation\\radix\\_primitives_docs_components_menubar.html",
      "source_type": "documentation"
    },
    "token_count": 391,
    "chunk_index": 15,
    "total_chunks": 17
  },
  {
    "id": "05608f19ae8302fbddd9471880afa71d",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_menubar.html",
    "source_type": "documentation",
    "title": "Menubar – Radix Primitives",
    "content": "values will change at runtime to reflect collisions Use them to create collision and direction-aware animations // index jsx import { Menubar } from \"radix-ui\"; import \" /styles css\"; export default () => ( <Menubar Root> <Menubar Menu> <Menubar Trigger>…</Menubar Trigger> <Menubar Portal> <Menubar Content className=\"MenubarContent\">…</Menubar Content> </Menubar Portal> </Menubar Menu> </Menubar Root> ); /* styles css */ MenubarContent { animation-duration: 0 6s; animation-timing-function: cubic-bezier(0 16, 1, 0 3, 1); } MenubarContent[data-side=\"top\"] { animation-name: slideUp; }MenubarContent[data-side=\"bottom\"] {\nanimation-name: slideDown;\n}\n@keyframes slideUp {\nfrom {\nopacity: 0;\ntransform: translateY(10px);\n}\nto {\nopacity: 1;\ntransform: translateY(0);\n}\n}\n@keyframes slideDown {\nfrom {\nopacity: 0;\ntransform: translateY(-10px);\n}\nto {\nopacity: 1;\ntransform: translateY(0);\n}\n}\nAccessibility\nAdheres to the Menu Button WAI-ARIA design pattern and uses roving tabindex to manage focus movement among menu items Keyboard Interactions\nKeyDescriptionSpaceWhen focus is on Menubar Trigger, opens the menubar and focuses the first item When focus is on an item, activates the focused item EnterWhen focus is on Menubar Trigger, opens the associated menu When focus is on an item, activates the focused item ArrowDownWhen focus is on Menubar Trigger, opens the associated menu When focus is on an item, moves focus to the next item ArrowUpWhen focus is on an item, moves focus to the previous item ArrowRightArrowLeftWhen focus is on a Menubar Trigger, moves focus to the next or previous item When focus is on a Menubar SubTrigger, opens or closes the submenu depending on reading direction When focus is within a Menubar Content, opens the next menu in the menubar EscCloses the currently open menu and moves focus to its Menubar Trigger Quick navPreviousLabelNextNavigation MenuEdit this page on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1398443,
      "relative_path": "documentation\\radix\\_primitives_docs_components_menubar.html",
      "source_type": "documentation"
    },
    "token_count": 459,
    "chunk_index": 16,
    "total_chunks": 17
  },
  {
    "id": "fcc629f4ee9f3db6c57389781b8bc674",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_navigation-menu.html",
    "source_type": "documentation",
    "title": "Navigation Menu – Radix Primitives",
    "content": "Navigation Menu – Radix PrimitivesRadix HomepageMade by WorkOSRadix HomepageMade by WorkOSThemesThemesPrimitivesPrimitivesIconsIconsColorsColorsDocumentationCase studiesBlogSearch/OverviewIntroductionGetting startedAccessibilityReleasesGuidesStylingAnimationCompositionServer-side renderingComponentsAccordionAlert DialogAspect RatioAvatarCheckboxCollapsibleContext MenuDialogDropdown MenuFormPreviewHover CardLabelMenubarNavigation MenuOne-Time Password FieldPreviewPassword Toggle FieldPreviewPopoverProgressRadio GroupScroll AreaSelectSeparatorSliderSwitchTabsToastToggleToggle GroupToolbarTooltipUtilitiesAccessible IconDirection ProviderPortalSlotVisually HiddenComponentsNavigation Menu\nA collection of links for navigating websites Learn Overview Github\nindex jsxindex jsxstyles cssstyles cssimport * as React from \"react\";\nimport { NavigationMenu } from \"radix-ui\";\nimport classNames from \"classnames\";\nimport { CaretDownIcon } from \"@radix-ui/react-icons\";\nimport \" /styles css\";\nconst NavigationMenuDemo = () => {\nreturn (\n<NavigationMenu Root className=\"NavigationMenuRoot\">\n<NavigationMenu List className=\"NavigationMenuList\">\n<NavigationMenu Item>\n<NavigationMenu Trigger className=\"NavigationMenuTrigger\">\nLearn <CaretDownIcon className=\"CaretDown\" aria-hidden />\n</NavigationMenu Trigger>\n<NavigationMenu Content className=\"NavigationMenuContent\">\n<ul className=\"List one\">\n<li style={{ gridRow: \"span 3\" }}>\n<NavigationMenu Link asChild>\n<a className=\"Callout\" href=\"/\">\n<svg\naria-hidden\nwidth=\"38\"\nheight=\"38\"\nviewBox=\"0 0 25 25\"\nfill=\"white\"\n>\n<path d=\"M12 25C7 58173 25 4 21 4183 4 17C4 12 5817 7 58173 9 12 9V25Z\"></path>\n<path d=\"M12 0H4V8H12V0Z\"></path>\n<path d=\"M17 8C19 2091 8 21 6 20914 21 4C21 1 79086 19 2091 0 17 0C14 7909 0 13 1 79086 13 4C13 6 20914 14 7909 8 17 8Z\"></path>\n</svg>\n<div className=\"CalloutHeading\">Radix Primitives</div>\n<p className=\"CalloutText\">\nUnstyled, accessible components for React </p>\n</a>\n</NavigationMenu",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1103667,
      "relative_path": "documentation\\radix\\_primitives_docs_components_navigation-menu.html",
      "source_type": "documentation"
    },
    "token_count": 512,
    "chunk_index": 0,
    "total_chunks": 11
  },
  {
    "id": "0b5b7b06d0090ed18027ebe8579be0cd",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_navigation-menu.html",
    "source_type": "documentation",
    "title": "Navigation Menu – Radix Primitives",
    "content": "href=\"/\"> <svg aria-hidden width=\"38\" height=\"38\" viewBox=\"0 0 25 25\" fill=\"white\" > <path d=\"M12 25C7 58173 25 4 21 4183 4 17C4 12 5817 7 58173 9 12 9V25Z\"></path> <path d=\"M12 0H4V8H12V0Z\"></path> <path d=\"M17 8C19 2091 8 21 6 20914 21 4C21 1 79086 19 2091 0 17 0C14 7909 0 13 1 79086 13 4C13 6 20914 14 7909 8 17 8Z\"></path> </svg> <div className=\"CalloutHeading\">Radix Primitives</div> <p className=\"CalloutText\"> Unstyled, accessible components for React </p> </a> </NavigationMenuLink>\n</li>\n<ListItem href=\"https://stitches dev/\" title=\"Stitches\">\nCSS-in-JS with best-in-class developer experience </ListItem>\n<ListItem href=\"/colors\" title=\"Colors\">\nBeautiful, thought-out palettes with auto dark mode </ListItem>\n<ListItem href=\"https://icons radix-ui com/\" title=\"Icons\">\nA crisp set of 15x15 icons, balanced and consistent </ListItem>\n</ul>\n</NavigationMenu Content>\n</NavigationMenu Item>\n<NavigationMenu Item>\n<NavigationMenu Trigger className=\"NavigationMenuTrigger\">\nOverview <CaretDownIcon className=\"CaretDown\" aria-hidden />\n</NavigationMenu Trigger>\n<NavigationMenu Content className=\"NavigationMenuContent\">\n<ul className=\"List two\">\n<ListItem\ntitle=\"Introduction\"\nhref=\"/primitives/docs/overview/introduction\"\n>\nBuild high-quality, accessible design systems and web apps </ListItem>\n<ListItem\ntitle=\"Getting started\"\nhref=\"/primitives/docs/overview/getting-started\"\n>\nA quick tutorial to get you up and running with Radix\nPrimitives </ListItem>\n<ListItem title=\"Styling\" href=\"/primitives/docs/guides/styling\">\nUnstyled and compatible with any styling solution",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1103667,
      "relative_path": "documentation\\radix\\_primitives_docs_components_navigation-menu.html",
      "source_type": "documentation"
    },
    "token_count": 472,
    "chunk_index": 1,
    "total_chunks": 11
  },
  {
    "id": "e8736875c9e119e376c0a6750503bd73",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_navigation-menu.html",
    "source_type": "documentation",
    "title": "Navigation Menu – Radix Primitives",
    "content": "com/\" title=\"Icons\"> A crisp set of 15x15 icons, balanced and consistent </ListItem> </ul> </NavigationMenu Content> </NavigationMenu Item> <NavigationMenu Item> <NavigationMenu Trigger className=\"NavigationMenuTrigger\"> Overview <CaretDownIcon className=\"CaretDown\" aria-hidden /> </NavigationMenu Trigger> <NavigationMenu Content className=\"NavigationMenuContent\"> <ul className=\"List two\"> <ListItem title=\"Introduction\" href=\"/primitives/docs/overview/introduction\" > Build high-quality, accessible design systems and web apps </ListItem> <ListItem title=\"Getting started\" href=\"/primitives/docs/overview/getting-started\" > A quick tutorial to get you up and running with Radix Primitives </ListItem> <ListItem title=\"Styling\" href=\"/primitives/docs/guides/styling\"> Unstyled and compatible with any styling solution</ListItem>\n<ListItem\ntitle=\"Animation\"\nhref=\"/primitives/docs/guides/animation\"\n>\nUse CSS keyframes or any animation library of your choice </ListItem>\n<ListItem\ntitle=\"Accessibility\"\nhref=\"/primitives/docs/overview/accessibility\"\n>\nTested in a range of browsers and assistive technologies </ListItem>\n<ListItem\ntitle=\"Releases\"\nhref=\"/primitives/docs/overview/releases\"\n>\nRadix Primitives releases and their changelogs </ListItem>\n</ul>\n</NavigationMenu Content>\n</NavigationMenu Item>\n<NavigationMenu Item>\n<NavigationMenu Link\nclassName=\"NavigationMenuLink\"\nhref=\"https://github com/radix-ui\"\n>\nGithub\n</NavigationMenu Link>\n</NavigationMenu Item>\n<NavigationMenu Indicator className=\"NavigationMenuIndicator\">\n<div className=\"Arrow\" />\n</NavigationMenu Indicator>\n</NavigationMenu List>\n<div className=\"ViewportPosition\">\n<NavigationMenu Viewport className=\"NavigationMenuViewport\" />\n</div>\n</NavigationMenu Root>\n);\n};\nconst ListItem = React forwardRef(\n({ className, children, title, props }, forwardedRef) => (\n<li>\n<NavigationMenu Link asChild>\n<a\nclassName={classNames(\"ListItemLink\", className)}\n{ props}\nref={forwardedRef}\n>\n<div className=\"ListItemHeading\">{title}</div>\n<p className=\"ListItemText\">{children}</p>\n</a>\n</NavigationMenu Link>\n</li>\n),\n);\nexport default NavigationMenuDemo;\nExpand code\nFeaturesCan be controlled or uncontrolled Flexible layout structure with managed tab focus Supports submenus Optional active item indicator",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1103667,
      "relative_path": "documentation\\radix\\_primitives_docs_components_navigation-menu.html",
      "source_type": "documentation"
    },
    "token_count": 499,
    "chunk_index": 2,
    "total_chunks": 11
  },
  {
    "id": "61b81aa0b2db41f8c9a6e0d6c4efc38b",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_navigation-menu.html",
    "source_type": "documentation",
    "title": "Navigation Menu – Radix Primitives",
    "content": "<div className=\"Arrow\" /> </NavigationMenu Indicator> </NavigationMenu List> <div className=\"ViewportPosition\"> <NavigationMenu Viewport className=\"NavigationMenuViewport\" /> </div> </NavigationMenu Root> ); }; const ListItem = React forwardRef( ({ className, children, title, props }, forwardedRef) => ( <li> <NavigationMenu Link asChild> <a className={classNames(\"ListItemLink\", className)} { props} ref={forwardedRef} > <div className=\"ListItemHeading\">{title}</div> <p className=\"ListItemText\">{children}</p> </a> </NavigationMenu Link> </li> ), ); export default NavigationMenuDemo; Expand code FeaturesCan be controlled or uncontrolled Flexible layout structure with managed tab focus Supports submenus Optional active item indicatorFull keyboard navigation Exposes CSS variables for advanced animation Supports custom timings Component Reference LinksVersion: 1 2 13Size: 11 9 kBView sourceReport an issueARIA design pattern\nInstallation\nInstall the component from your command line npm install @radix-ui/react-navigation-menu\nAnatomy\nImport all parts and piece them together import { NavigationMenu } from \"radix-ui\";\nexport default () => (\n<NavigationMenu Root>\n<NavigationMenu List>\n<NavigationMenu Item>\n<NavigationMenu Trigger />\n<NavigationMenu Content>\n<NavigationMenu Link />\n</NavigationMenu Content>\n</NavigationMenu Item>\n<NavigationMenu Item>\n<NavigationMenu Link />\n</NavigationMenu Item>\n<NavigationMenu Item>\n<NavigationMenu Trigger />\n<NavigationMenu Content>\n<NavigationMenu Sub>\n<NavigationMenu List />\n<NavigationMenu Viewport />\n</NavigationMenu Sub>\n</NavigationMenu Content>\n</NavigationMenu Item>\n<NavigationMenu Indicator />\n</NavigationMenu List>\n<NavigationMenu Viewport />\n</NavigationMenu Root>\n);\nAPI Reference\nRoot\nContains all the parts of a navigation menu PropTypeDefaultdefaultValueProp descriptionstringNo default valuevalueProp descriptionstringNo default valueonValueChangeProp descriptionfunctionSee full typeNo default valuedelayDurationProp descriptionnumber200skipDelayDurationProp descriptionnumber300dirProp descriptionenumSee full typeNo default valueorientationProp descriptionenumSee full type\"horizontal\"\nData attributeValues[data-orientation]\"vertical\"  | \"horizontal\"\nSub\nSignifies a submenu Use it in place of the root part when nested to create a submenu",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1103667,
      "relative_path": "documentation\\radix\\_primitives_docs_components_navigation-menu.html",
      "source_type": "documentation"
    },
    "token_count": 478,
    "chunk_index": 3,
    "total_chunks": 11
  },
  {
    "id": "80d046abdf1873a85083b6225148bf22",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_navigation-menu.html",
    "source_type": "documentation",
    "title": "Navigation Menu – Radix Primitives",
    "content": "/> <NavigationMenu Viewport /> </NavigationMenu Sub> </NavigationMenu Content> </NavigationMenu Item> <NavigationMenu Indicator /> </NavigationMenu List> <NavigationMenu Viewport /> </NavigationMenu Root> ); API Reference Root Contains all the parts of a navigation menu PropTypeDefaultdefaultValueProp descriptionstringNo default valuevalueProp descriptionstringNo default valueonValueChangeProp descriptionfunctionSee full typeNo default valuedelayDurationProp descriptionnumber200skipDelayDurationProp descriptionnumber300dirProp descriptionenumSee full typeNo default valueorientationProp descriptionenumSee full type\"horizontal\" Data attributeValues[data-orientation]\"vertical\" | \"horizontal\" Sub Signifies a submenu Use it in place of the root part when nested to create a submenuPropTypeDefaultdefaultValueProp descriptionstringNo default valuevalueProp descriptionstringNo default valueonValueChangeProp descriptionfunctionSee full typeNo default valueorientationProp descriptionenumSee full type\"horizontal\"\nData attributeValues[data-orientation]\"vertical\"  | \"horizontal\"\nList\nContains the top level menu items PropTypeDefaultasChildProp descriptionbooleanfalse\nData attributeValues[data-orientation]\"vertical\"  | \"horizontal\"\nItem\nA top level menu item, contains a link or trigger with content combination PropTypeDefaultasChildProp descriptionbooleanfalsevalueProp descriptionstringNo default value\nTrigger\nThe button that toggles the content PropTypeDefaultasChildProp descriptionbooleanfalse\nData attributeValues[data-state]\"open\"  | \"closed\" [data-disabled]Present when disabled\nContent\nContains the content associated with each trigger PropTypeDefaultasChildProp descriptionbooleanfalseonEscapeKeyDownProp descriptionfunctionSee full typeNo default valueonPointerDownOutsideProp descriptionfunctionSee full typeNo default valueonFocusOutsideProp descriptionfunctionSee full typeNo default valueonInteractOutsideProp descriptionfunctionSee full typeNo default valueforceMountProp descriptionbooleanNo default value\nData attributeValues[data-state]\"open\"  | \"closed\" [data-motion]\"to-start\"  | \"to-end\"  | \"from-start\"  | \"from-end\" [data-orientation]\"vertical\"  | \"horizontal\"\nLink\nA navigational link PropTypeDefaultasChildProp descriptionbooleanfalseactiveProp descriptionbooleanfalseonSelectProp descriptionfunctionSee full typeNo default value\nData attributeValues[data-active]Present when active\nIndicator\nAn optional indicator element that renders below the list, is used to highlight the currently active trigger",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1103667,
      "relative_path": "documentation\\radix\\_primitives_docs_components_navigation-menu.html",
      "source_type": "documentation"
    },
    "token_count": 496,
    "chunk_index": 4,
    "total_chunks": 11
  },
  {
    "id": "f42f5f208be7c3e6310d477df06fd259",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_navigation-menu.html",
    "source_type": "documentation",
    "title": "Navigation Menu – Radix Primitives",
    "content": "with each trigger PropTypeDefaultasChildProp descriptionbooleanfalseonEscapeKeyDownProp descriptionfunctionSee full typeNo default valueonPointerDownOutsideProp descriptionfunctionSee full typeNo default valueonFocusOutsideProp descriptionfunctionSee full typeNo default valueonInteractOutsideProp descriptionfunctionSee full typeNo default valueforceMountProp descriptionbooleanNo default value Data attributeValues[data-state]\"open\" | \"closed\" [data-motion]\"to-start\" | \"to-end\" | \"from-start\" | \"from-end\" [data-orientation]\"vertical\" | \"horizontal\" Link A navigational link PropTypeDefaultasChildProp descriptionbooleanfalseactiveProp descriptionbooleanfalseonSelectProp descriptionfunctionSee full typeNo default value Data attributeValues[data-active]Present when active Indicator An optional indicator element that renders below the list, is used to highlight the currently active triggerPropTypeDefaultasChildProp descriptionbooleanfalseforceMountProp descriptionbooleanNo default value\nData attributeValues[data-state]\"visible\"  | \"hidden\" [data-orientation]\"vertical\"  | \"horizontal\"\nViewport\nAn optional viewport element that is used to render active content outside of the list PropTypeDefaultasChildProp descriptionbooleanfalseforceMountProp descriptionbooleanNo default value\nData attributeValues[data-state]\"open\"  | \"closed\" [data-orientation]\"vertical\"  | \"horizontal\"\nCSS VariableDescription--radix-navigation-menu-viewport-widthThe width of the viewport when visible/hidden, computed from the active content--radix-navigation-menu-viewport-heightThe height of the viewport when visible/hidden, computed from the active content\nExamples\nVertical\nYou can create a vertical menu by using the orientation prop <NavigationMenu Root orientation=\"vertical\">\n<NavigationMenu List>\n<NavigationMenu Item>\n<NavigationMenu Trigger>Item one</NavigationMenu Trigger>\n<NavigationMenu Content>Item one content</NavigationMenu Content>\n</NavigationMenu Item>\n<NavigationMenu Item>\n<NavigationMenu Trigger>Item two</NavigationMenu Trigger>\n<NavigationMenu Content>Item Two content</NavigationMenu Content>\n</NavigationMenu Item>\n</NavigationMenu List>\n</NavigationMenu Root>\nFlexible layouts\nUse the Viewport part when you need extra control over where Content is rendered This can be helpful when your design\nrequires an adjusted DOM structure or if you need flexibility to achieve advanced animation Tab focus will be maintained automatically <NavigationMenu Root>\n<NavigationMenu List>\n<NavigationMenu Item>\n<NavigationMenu",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1103667,
      "relative_path": "documentation\\radix\\_primitives_docs_components_navigation-menu.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 5,
    "total_chunks": 11
  },
  {
    "id": "c8ebc7b0779295bca12eb99553693116",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_navigation-menu.html",
    "source_type": "documentation",
    "title": "Navigation Menu – Radix Primitives",
    "content": "one</NavigationMenu Trigger> <NavigationMenu Content>Item one content</NavigationMenu Content> </NavigationMenu Item> <NavigationMenu Item> <NavigationMenu Trigger>Item two</NavigationMenu Trigger> <NavigationMenu Content>Item Two content</NavigationMenu Content> </NavigationMenu Item> </NavigationMenu List> </NavigationMenu Root> Flexible layouts Use the Viewport part when you need extra control over where Content is rendered This can be helpful when your design requires an adjusted DOM structure or if you need flexibility to achieve advanced animation Tab focus will be maintained automatically <NavigationMenu Root> <NavigationMenu List> <NavigationMenu Item> <NavigationMenuTrigger>Item one</NavigationMenu Trigger>\n<NavigationMenu Content>Item one content</NavigationMenu Content>\n</NavigationMenu Item>\n<NavigationMenu Item>\n<NavigationMenu Trigger>Item two</NavigationMenu Trigger>\n<NavigationMenu Content>Item two content</NavigationMenu Content>\n</NavigationMenu Item>\n</NavigationMenu List>\n{/* NavigationMenu Content will be rendered here when active */}\n<NavigationMenu Viewport />\n</NavigationMenu Root>\nWith indicator\nYou can use the optional Indicator part to highlight the currently active Trigger, this is useful when you want to provide\nan animated visual cue such as an arrow or highlight to accompany the Viewport // index jsx\nimport { NavigationMenu } from \"radix-ui\";\nimport \" /styles css\";\nexport default () => (\n<NavigationMenu Root>\n<NavigationMenu List>\n<NavigationMenu Item>\n<NavigationMenu Trigger>Item one</NavigationMenu Trigger>\n<NavigationMenu Content>Item one content</NavigationMenu Content>\n</NavigationMenu Item>\n<NavigationMenu Item>\n<NavigationMenu Trigger>Item two</NavigationMenu Trigger>\n<NavigationMenu Content>Item two content</NavigationMenu Content>\n</NavigationMenu Item>\n<NavigationMenu Indicator className=\"NavigationMenuIndicator\" />\n</NavigationMenu List>\n<NavigationMenu Viewport />\n</NavigationMenu Root>\n);\n/* styles css */ NavigationMenuIndicator {\nbackground-color: grey;\n} NavigationMenuIndicator[data-orientation=\"horizontal\"] {\nheight: 3px;\ntransition:\nwidth,\ntransform,\n250ms ease;\n}\nWith submenus\nCreate a submenu by nesting your NavigationMenu and using the Sub part in place of its Root Submenus work differently to Root navigation menus and are similar to Tabs in that one item should always be active, so be\nsure to assign and set a defaultValue <NavigationMenu Root>\n<NavigationMenu List>\n<NavigationMenu",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1103667,
      "relative_path": "documentation\\radix\\_primitives_docs_components_navigation-menu.html",
      "source_type": "documentation"
    },
    "token_count": 503,
    "chunk_index": 6,
    "total_chunks": 11
  },
  {
    "id": "3cedb5b3186802e520def434e0a4fa89",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_navigation-menu.html",
    "source_type": "documentation",
    "title": "Navigation Menu – Radix Primitives",
    "content": "/> </NavigationMenu Root> ); /* styles css */ NavigationMenuIndicator { background-color: grey; } NavigationMenuIndicator[data-orientation=\"horizontal\"] { height: 3px; transition: width, transform, 250ms ease; } With submenus Create a submenu by nesting your NavigationMenu and using the Sub part in place of its Root Submenus work differently to Root navigation menus and are similar to Tabs in that one item should always be active, so be sure to assign and set a defaultValue <NavigationMenu Root> <NavigationMenu List> <NavigationMenuItem>\n<NavigationMenu Trigger>Item one</NavigationMenu Trigger>\n<NavigationMenu Content>Item one content</NavigationMenu Content>\n</NavigationMenu Item>\n<NavigationMenu Item>\n<NavigationMenu Trigger>Item two</NavigationMenu Trigger>\n<NavigationMenu Content>\n<NavigationMenu Sub defaultValue=\"sub1\">\n<NavigationMenu List>\n<NavigationMenu Item value=\"sub1\">\n<NavigationMenu Trigger>Sub item one</NavigationMenu Trigger>\n<NavigationMenu Content>\nSub item one content\n</NavigationMenu Content>\n</NavigationMenu Item>\n<NavigationMenu Item value=\"sub2\">\n<NavigationMenu Trigger>Sub item two</NavigationMenu Trigger>\n<NavigationMenu Content>\nSub item two content\n</NavigationMenu Content>\n</NavigationMenu Item>\n</NavigationMenu List>\n</NavigationMenu Sub>\n</NavigationMenu Content>\n</NavigationMenu Item>\n</NavigationMenu List>\n</NavigationMenu Root>\nWith client side routing\nIf you need to use the Link component provided by your routing package then we recommend composing with NavigationMenu Link via a custom component This will ensure accessibility and consistent keyboard control is maintained Here's an example using Next js:\n// index jsx\nimport { usePathname } from \"next/navigation\";\nimport NextLink from \"next/link\";\nimport { NavigationMenu } from \"radix-ui\";\nimport \" /styles css\";\nconst Link = ({ href, props }) => {\nconst pathname = usePathname();\nconst isActive = href === pathname;\nreturn (\n<NavigationMenu Link asChild active={isActive}>\n<NextLink href={href} className=\"NavigationMenuLink\" { props} />\n</NavigationMenu Link>\n);\n};\nexport default () => (\n<NavigationMenu Root>\n<NavigationMenu List>\n<NavigationMenu Item>\n<Link href=\"/\">Home</Link>\n</NavigationMenu Item>\n<NavigationMenu Item>\n<Link href=\"/about\">About</Link>\n</NavigationMenu Item>\n</NavigationMenu",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1103667,
      "relative_path": "documentation\\radix\\_primitives_docs_components_navigation-menu.html",
      "source_type": "documentation"
    },
    "token_count": 497,
    "chunk_index": 7,
    "total_chunks": 11
  },
  {
    "id": "39a5ad3a041e40bbe3f20ef95114c02c",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_navigation-menu.html",
    "source_type": "documentation",
    "title": "Navigation Menu – Radix Primitives",
    "content": "{ usePathname } from \"next/navigation\"; import NextLink from \"next/link\"; import { NavigationMenu } from \"radix-ui\"; import \" /styles css\"; const Link = ({ href, props }) => { const pathname = usePathname(); const isActive = href === pathname; return ( <NavigationMenu Link asChild active={isActive}> <NextLink href={href} className=\"NavigationMenuLink\" { props} /> </NavigationMenu Link> ); }; export default () => ( <NavigationMenu Root> <NavigationMenu List> <NavigationMenu Item> <Link href=\"/\">Home</Link> </NavigationMenu Item> <NavigationMenu Item> <Link href=\"/about\">About</Link> </NavigationMenu Item> </NavigationMenuList>\n</NavigationMenu Root>\n);\n/* styles css */ NavigationMenuLink {\ntext-decoration: none;\n} NavigationMenuLink[data-active] {\ntext-decoration: \"underline\";\n}\nAdvanced animation\nWe expose --radix-navigation-menu-viewport-[width|height] and data-motion['from-start'|'to-start'|'from-end'|'to-end'] attributes\nto allow you to animate Viewport size and Content position based on the enter/exit direction Combining these with position: absolute; allows you to create smooth overlapping animation effects when moving between items // index jsx\nimport { NavigationMenu } from \"radix-ui\";\nimport \" /styles css\";\nexport default () => (\n<NavigationMenu Root>\n<NavigationMenu List>\n<NavigationMenu Item>\n<NavigationMenu Trigger>Item one</NavigationMenu Trigger>\n<NavigationMenu Content className=\"NavigationMenuContent\">\nItem one content\n</NavigationMenu Content>\n</NavigationMenu Item>\n<NavigationMenu Item>\n<NavigationMenu Trigger>Item two</NavigationMenu Trigger>\n<NavigationMenu Content className=\"NavigationMenuContent\">\nItem two content\n</NavigationMenu Content>\n</NavigationMenu Item>\n</NavigationMenu List>\n<NavigationMenu Viewport className=\"NavigationMenuViewport\" />\n</NavigationMenu Root>\n);\n/* styles css */ NavigationMenuContent {\nposition: absolute;\ntop: 0;\nleft: 0;\nanimation-duration: 250ms;\nanimation-timing-function: ease;\n} NavigationMenuContent[data-motion=\"from-start\"] {\nanimation-name: enterFromLeft;\n} NavigationMenuContent[data-motion=\"from-end\"] {\nanimation-name: enterFromRight;\n} NavigationMenuContent[data-motion=\"to-start\"] {\nanimation-name: exitToLeft;\n}",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1103667,
      "relative_path": "documentation\\radix\\_primitives_docs_components_navigation-menu.html",
      "source_type": "documentation"
    },
    "token_count": 494,
    "chunk_index": 8,
    "total_chunks": 11
  },
  {
    "id": "f8fb35eb74a1cf38c8bc216073c26609",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_navigation-menu.html",
    "source_type": "documentation",
    "title": "Navigation Menu – Radix Primitives",
    "content": "Root> <NavigationMenu List> <NavigationMenu Item> <NavigationMenu Trigger>Item one</NavigationMenu Trigger> <NavigationMenu Content className=\"NavigationMenuContent\"> Item one content </NavigationMenu Content> </NavigationMenu Item> <NavigationMenu Item> <NavigationMenu Trigger>Item two</NavigationMenu Trigger> <NavigationMenu Content className=\"NavigationMenuContent\"> Item two content </NavigationMenu Content> </NavigationMenu Item> </NavigationMenu List> <NavigationMenu Viewport className=\"NavigationMenuViewport\" /> </NavigationMenu Root> ); /* styles css */ NavigationMenuContent { position: absolute; top: 0; left: 0; animation-duration: 250ms; animation-timing-function: ease; } NavigationMenuContent[data-motion=\"from-start\"] { animation-name: enterFromLeft; } NavigationMenuContent[data-motion=\"from-end\"] { animation-name: enterFromRight; } NavigationMenuContent[data-motion=\"to-start\"] { animation-name: exitToLeft; }NavigationMenuContent[data-motion=\"to-end\"] {\nanimation-name: exitToRight;\n} NavigationMenuViewport {\nposition: relative;\nwidth: var(--radix-navigation-menu-viewport-width);\nheight: var(--radix-navigation-menu-viewport-height);\ntransition:\nwidth,\nheight,\n250ms ease;\n}\n@keyframes enterFromRight {\nfrom {\nopacity: 0;\ntransform: translateX(200px);\n}\nto {\nopacity: 1;\ntransform: translateX(0);\n}\n}\n@keyframes enterFromLeft {\nfrom {\nopacity: 0;\ntransform: translateX(-200px);\n}\nto {\nopacity: 1;\ntransform: translateX(0);\n}\n}\n@keyframes exitToRight {\nfrom {\nopacity: 1;\ntransform: translateX(0);\n}\nto {\nopacity: 0;\ntransform: translateX(200px);\n}\n}\n@keyframes exitToLeft {\nfrom {\nopacity: 1;\ntransform: translateX(0);\n}\nto {\nopacity: 0;\ntransform: translateX(-200px);\n}\n}\nAccessibility\nAdheres to the navigation role requirements Differences to menubar\nNavigationMenu should not be confused with menubar, although this primitive shares the name menu in the colloquial sense to refer to a set of navigation links, it does not use the WAI-ARIA menu role",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1103667,
      "relative_path": "documentation\\radix\\_primitives_docs_components_navigation-menu.html",
      "source_type": "documentation"
    },
    "token_count": 475,
    "chunk_index": 9,
    "total_chunks": 11
  },
  {
    "id": "e502647305e88b3eb745d9fc7d2a03b9",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_navigation-menu.html",
    "source_type": "documentation",
    "title": "Navigation Menu – Radix Primitives",
    "content": "{ opacity: 1; transform: translateX(0); } to { opacity: 0; transform: translateX(200px); } } @keyframes exitToLeft { from { opacity: 1; transform: translateX(0); } to { opacity: 0; transform: translateX(-200px); } } Accessibility Adheres to the navigation role requirements Differences to menubar NavigationMenu should not be confused with menubar, although this primitive shares the name menu in the colloquial sense to refer to a set of navigation links, it does not use the WAI-ARIA menu roleThis is because menu and menubars behave like native operating system menus most commonly found in desktop application windows, as such they feature complex functionality like composite focus management and first-character navigation These features are often considered unnecessary for website navigation and at worst can confuse users who are familiar with established website patterns See the W3C Disclosure Navigation Menu example for more information Link usage and aria-current\nIt's important to use NavigationMenu Link for all navigational links within a menu, this not only applies to the main list\nbut also within any content rendered via NavigationMenu Content This will ensure consistent keyboard interactions and accessibility\nwhile also giving access to the active prop for setting aria-current and the active styles See this example for more information on usage with third party routing components Keyboard Interactions\nKeyDescriptionSpaceEnterWhen focus is on NavigationMenu Trigger, opens the content TabMoves focus to the next focusable element ArrowDownWhen horizontal and focus is on an open NavigationMenu Trigger, moves focus into NavigationMenu Content Moves focus to the next NavigationMenu Trigger or NavigationMenu Link ArrowUpMoves focus to the previous NavigationMenu Trigger or NavigationMenu Link ArrowRightArrowLeftWhen vertical and focus is on an open NavigationMenu Trigger, moves focus into its NavigationMenu Content Moves focus to the next / previous NavigationMenu Trigger or NavigationMenu Link HomeEndMoves focus to the first/last NavigationMenu Trigger or NavigationMenu Link EscCloses open NavigationMenu Content and moves focus to its NavigationMenu Trigger Quick navPreviousMenubarNextOne-Time Password FieldEdit this page on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1103667,
      "relative_path": "documentation\\radix\\_primitives_docs_components_navigation-menu.html",
      "source_type": "documentation"
    },
    "token_count": 433,
    "chunk_index": 10,
    "total_chunks": 11
  },
  {
    "id": "5024a2efb087c07b683e0358f78a455a",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_switch.html",
    "source_type": "documentation",
    "title": "Switch – Radix Primitives",
    "content": "Switch – Radix PrimitivesRadix HomepageMade by WorkOSRadix HomepageMade by WorkOSThemesThemesPrimitivesPrimitivesIconsIconsColorsColorsDocumentationCase studiesBlogSearch/OverviewIntroductionGetting startedAccessibilityReleasesGuidesStylingAnimationCompositionServer-side renderingComponentsAccordionAlert DialogAspect RatioAvatarCheckboxCollapsibleContext MenuDialogDropdown MenuFormPreviewHover CardLabelMenubarNavigation MenuOne-Time Password FieldPreviewPassword Toggle FieldPreviewPopoverProgressRadio GroupScroll AreaSelectSeparatorSliderSwitchTabsToastToggleToggle GroupToolbarTooltipUtilitiesAccessible IconDirection ProviderPortalSlotVisually HiddenComponentsSwitch\nA control that allows the user to toggle between checked and not checked Airplane mode\nindex jsxindex jsxstyles cssstyles cssimport * as React from \"react\";\nimport { Switch } from \"radix-ui\";\nimport \" /styles css\";\nconst SwitchDemo = () => (\n<form>\n<div style={{ display: \"flex\", alignItems: \"center\" }}>\n<label\nclassName=\"Label\"\nhtmlFor=\"airplane-mode\"\nstyle={{ paddingRight: 15 }}\n>\nAirplane mode\n</label>\n<Switch Root className=\"SwitchRoot\" id=\"airplane-mode\">\n<Switch Thumb className=\"SwitchThumb\" />\n</Switch Root>\n</div>\n</form>\n);\nexport default SwitchDemo;\nExpand code\nFeaturesFull keyboard navigation Can be controlled or uncontrolled Component Reference LinksVersion: 1 2 5Size: 4 06 kBView sourceReport an issueARIA design pattern\nInstallation\nInstall the component from your command line npm install @radix-ui/react-switch\nAnatomy\nImport all parts and piece them together import { Switch } from \"radix-ui\";\nexport default () => (\n<Switch Root>\n<Switch Thumb />\n</Switch Root>\n);\nAPI Reference\nRoot\nContains all the parts of a switch An input will also render when used within a form to ensure events propagate correctly PropTypeDefaultasChildProp descriptionbooleanfalsedefaultCheckedProp descriptionbooleanNo default valuecheckedProp descriptionbooleanNo default valueonCheckedChangeProp descriptionfunctionSee full typeNo default valuedisabledProp descriptionbooleanNo default valuerequiredProp descriptionbooleanNo default valuenameProp descriptionstringNo default valuevalueProp descriptionstringon\nData attributeValues[data-state]\"checked\"  | \"unchecked\" [data-disabled]Present when disabled\nThumb\nThe thumb that is used to visually indicate whether the switch is on or off",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 225813,
      "relative_path": "documentation\\radix\\_primitives_docs_components_switch.html",
      "source_type": "documentation"
    },
    "token_count": 484,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "89c82df93acff499b2fe37862e89d82e",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_switch.html",
    "source_type": "documentation",
    "title": "Switch – Radix Primitives",
    "content": "Thumb /> </Switch Root> ); API Reference Root Contains all the parts of a switch An input will also render when used within a form to ensure events propagate correctly PropTypeDefaultasChildProp descriptionbooleanfalsedefaultCheckedProp descriptionbooleanNo default valuecheckedProp descriptionbooleanNo default valueonCheckedChangeProp descriptionfunctionSee full typeNo default valuedisabledProp descriptionbooleanNo default valuerequiredProp descriptionbooleanNo default valuenameProp descriptionstringNo default valuevalueProp descriptionstringon Data attributeValues[data-state]\"checked\" | \"unchecked\" [data-disabled]Present when disabled Thumb The thumb that is used to visually indicate whether the switch is on or offPropTypeDefaultasChildProp descriptionbooleanfalse\nData attributeValues[data-state]\"checked\"  | \"unchecked\" [data-disabled]Present when disabled\nAccessibility\nAdheres to the switch role requirements Keyboard Interactions\nKeyDescriptionSpaceToggles the component's state EnterToggles the component's state Quick navPreviousSliderNextTabsEdit this page on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 225813,
      "relative_path": "documentation\\radix\\_primitives_docs_components_switch.html",
      "source_type": "documentation"
    },
    "token_count": 205,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c33ed63dd82108ef9d5f83cddea5a1d8",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_separator.html",
    "source_type": "documentation",
    "title": "Separator – Radix Primitives",
    "content": "Separator – Radix PrimitivesRadix HomepageMade by WorkOSRadix HomepageMade by WorkOSThemesThemesPrimitivesPrimitivesIconsIconsColorsColorsDocumentationCase studiesBlogSearch/OverviewIntroductionGetting startedAccessibilityReleasesGuidesStylingAnimationCompositionServer-side renderingComponentsAccordionAlert DialogAspect RatioAvatarCheckboxCollapsibleContext MenuDialogDropdown MenuFormPreviewHover CardLabelMenubarNavigation MenuOne-Time Password FieldPreviewPassword Toggle FieldPreviewPopoverProgressRadio GroupScroll AreaSelectSeparatorSliderSwitchTabsToastToggleToggle GroupToolbarTooltipUtilitiesAccessible IconDirection ProviderPortalSlotVisually HiddenComponentsSeparator\nVisually or semantically separates content Radix PrimitivesAn open-source UI component library BlogDocsSource\nindex jsxindex jsxstyles cssstyles cssimport * as React from \"react\";\nimport { Separator } from \"radix-ui\";\nimport \" /styles css\";\nconst SeparatorDemo = () => (\n<div style={{ width: \"100%\", maxWidth: 300, margin: \"0 15px\" }}>\n<div className=\"Text\" style={{ fontWeight: 500 }}>\nRadix Primitives\n</div>\n<div className=\"Text\">An open-source UI component library </div>\n<Separator Root className=\"SeparatorRoot\" style={{ margin: \"15px 0\" }} />\n<div style={{ display: \"flex\", height: 20, alignItems: \"center\" }}>\n<div className=\"Text\">Blog</div>\n<Separator Root\nclassName=\"SeparatorRoot\"\ndecorative\norientation=\"vertical\"\nstyle={{ margin: \"0 15px\" }}\n/>\n<div className=\"Text\">Docs</div>\n<Separator Root\nclassName=\"SeparatorRoot\"\ndecorative\norientation=\"vertical\"\nstyle={{ margin: \"0 15px\" }}\n/>\n<div className=\"Text\">Source</div>\n</div>\n</div>\n);\nexport default SeparatorDemo;\nExpand code\nFeaturesSupports horizontal and vertical orientations Component Reference LinksVersion: 1 1 7Size: 1 69 kBView sourceReport an issueARIA design pattern\nInstallation\nInstall the component from your command line npm install @radix-ui/react-separator\nAnatomy\nImport all parts and piece them together import { Separator } from \"radix-ui\";\nexport default () => <Separator Root />;\nAPI Reference\nRoot\nThe separator",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 206341,
      "relative_path": "documentation\\radix\\_primitives_docs_components_separator.html",
      "source_type": "documentation"
    },
    "token_count": 458,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "1b1bfe3607b34b8e92b956e444c6c08b",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_separator.html",
    "source_type": "documentation",
    "title": "Separator – Radix Primitives",
    "content": "Root className=\"SeparatorRoot\" decorative orientation=\"vertical\" style={{ margin: \"0 15px\" }} /> <div className=\"Text\">Source</div> </div> </div> ); export default SeparatorDemo; Expand code FeaturesSupports horizontal and vertical orientations Component Reference LinksVersion: 1 1 7Size: 1 69 kBView sourceReport an issueARIA design pattern Installation Install the component from your command line npm install @radix-ui/react-separator Anatomy Import all parts and piece them together import { Separator } from \"radix-ui\"; export default () => <Separator Root />; API Reference Root The separatorPropTypeDefaultasChildProp descriptionbooleanfalseorientationProp descriptionenumSee full type\"horizontal\"decorativeProp descriptionbooleanNo default value\nData attributeValues[data-orientation]\"vertical\"  | \"horizontal\"\nAccessibility\nAdheres to the separator role requirements Quick navPreviousSelectNextSliderEdit this page on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 206341,
      "relative_path": "documentation\\radix\\_primitives_docs_components_separator.html",
      "source_type": "documentation"
    },
    "token_count": 193,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "fa07c8d946407b43a9f8fad19182bad9",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_slider.html",
    "source_type": "documentation",
    "title": "Slider – Radix Primitives",
    "content": "Slider – Radix PrimitivesRadix HomepageMade by WorkOSRadix HomepageMade by WorkOSThemesThemesPrimitivesPrimitivesIconsIconsColorsColorsDocumentationCase studiesBlogSearch/OverviewIntroductionGetting startedAccessibilityReleasesGuidesStylingAnimationCompositionServer-side renderingComponentsAccordionAlert DialogAspect RatioAvatarCheckboxCollapsibleContext MenuDialogDropdown MenuFormPreviewHover CardLabelMenubarNavigation MenuOne-Time Password FieldPreviewPassword Toggle FieldPreviewPopoverProgressRadio GroupScroll AreaSelectSeparatorSliderSwitchTabsToastToggleToggle GroupToolbarTooltipUtilitiesAccessible IconDirection ProviderPortalSlotVisually HiddenComponentsSlider\nAn input where the user selects a value from within a given range index jsxindex jsxstyles cssstyles cssimport * as React from \"react\";\nimport { Slider } from \"radix-ui\";\nimport \" /styles css\";\nconst SliderDemo = () => (\n<form>\n<Slider Root className=\"SliderRoot\" defaultValue={[50]} max={100} step={1}>\n<Slider Track className=\"SliderTrack\">\n<Slider Range className=\"SliderRange\" />\n</Slider Track>\n<Slider Thumb className=\"SliderThumb\" aria-label=\"Volume\" />\n</Slider Root>\n</form>\n);\nexport default SliderDemo;\nExpand code\nFeaturesCan be controlled or uncontrolled Supports multiple thumbs Supports a minimum value between thumbs Supports touch or click on track to update value Supports Right to Left direction Full keyboard navigation Component Reference LinksVersion: 1 3 5Size: 8 49 kBView sourceReport an issueARIA design pattern\nInstallation\nInstall the component from your command line npm install @radix-ui/react-slider\nAnatomy\nImport all parts and piece them together import { Slider } from \"radix-ui\";\nexport default () => (\n<Slider Root>\n<Slider Track>\n<Slider Range />\n</Slider Track>\n<Slider Thumb />\n</Slider Root>\n);\nAPI Reference\nRoot\nContains all the parts of a slider It will render an input for each thumb when used within a form to ensure events propagate correctly",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 400924,
      "relative_path": "documentation\\radix\\_primitives_docs_components_slider.html",
      "source_type": "documentation"
    },
    "token_count": 400,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "db825aaeadca2bcae9c33cbce1cf9ddd",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_slider.html",
    "source_type": "documentation",
    "title": "Slider – Radix Primitives",
    "content": "issueARIA design pattern Installation Install the component from your command line npm install @radix-ui/react-slider Anatomy Import all parts and piece them together import { Slider } from \"radix-ui\"; export default () => ( <Slider Root> <Slider Track> <Slider Range /> </Slider Track> <Slider Thumb /> </Slider Root> ); API Reference Root Contains all the parts of a slider It will render an input for each thumb when used within a form to ensure events propagate correctlyPropTypeDefaultasChildProp descriptionbooleanfalsedefaultValueProp descriptionnumber[]No default valuevalueProp descriptionnumber[]No default valueonValueChangeProp descriptionfunctionSee full typeNo default valueonValueCommitProp descriptionfunctionSee full typeNo default valuenameProp descriptionstringNo default valuedisabledProp descriptionbooleanfalseorientationProp descriptionenumSee full type\"horizontal\"dirProp descriptionenumSee full typeNo default valueinvertedProp descriptionbooleanfalseminProp descriptionnumber0maxProp descriptionnumber100stepProp descriptionnumber1minStepsBetweenThumbsProp descriptionnumber0formProp descriptionstringNo default value\nData attributeValues[data-disabled]Present when disabled[data-orientation]\"vertical\"  | \"horizontal\"\nTrack\nThe track that contains the Slider Range PropTypeDefaultasChildProp descriptionbooleanfalse\nData attributeValues[data-disabled]Present when disabled[data-orientation]\"vertical\"  | \"horizontal\"\nRange\nThe range part Must live inside Slider Track PropTypeDefaultasChildProp descriptionbooleanfalse\nData attributeValues[data-disabled]Present when disabled[data-orientation]\"vertical\"  | \"horizontal\"\nThumb\nA draggable thumb You can render multiple thumbs PropTypeDefaultasChildProp descriptionbooleanfalse\nData attributeValues[data-disabled]Present when disabled[data-orientation]\"vertical\"  | \"horizontal\"\nExamples\nVertical orientation\nUse the orientation prop to create a vertical slider // index jsx\nimport { Slider } from \"radix-ui\";\nimport \" /styles css\";\nexport default () => (\n<Slider Root\nclassName=\"SliderRoot\"\ndefaultValue={[50]}\norientation=\"vertical\"\n>\n<Slider Track className=\"SliderTrack\">\n<Slider Range className=\"SliderRange\" />\n</Slider Track>\n<Slider Thumb className=\"SliderThumb\" />\n</Slider Root>\n);\n/* styles css */ SliderRoot {\nposition: relative;\ndisplay: flex;\nalign-items: center;\n} SliderRoot[data-orientation=\"vertical\"] {\nflex-direction: column;\nwidth: 20px;\nheight: 100px;\n}",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 400924,
      "relative_path": "documentation\\radix\\_primitives_docs_components_slider.html",
      "source_type": "documentation"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "f027efc2d42185498831cca7ae1d8ae3",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_slider.html",
    "source_type": "documentation",
    "title": "Slider – Radix Primitives",
    "content": "| \"horizontal\" Examples Vertical orientation Use the orientation prop to create a vertical slider // index jsx import { Slider } from \"radix-ui\"; import \" /styles css\"; export default () => ( <Slider Root className=\"SliderRoot\" defaultValue={[50]} orientation=\"vertical\" > <Slider Track className=\"SliderTrack\"> <Slider Range className=\"SliderRange\" /> </Slider Track> <Slider Thumb className=\"SliderThumb\" /> </Slider Root> ); /* styles css */ SliderRoot { position: relative; display: flex; align-items: center; } SliderRoot[data-orientation=\"vertical\"] { flex-direction: column; width: 20px; height: 100px; }SliderTrack {\nposition: relative;\nflex-grow: 1;\nbackground-color: grey;\n} SliderTrack[data-orientation=\"vertical\"] {\nwidth: 3px;\n} SliderRange {\nposition: absolute;\nbackground-color: black;\n} SliderRange[data-orientation=\"vertical\"] {\nwidth: 100%;\n} SliderThumb {\ndisplay: block;\nwidth: 20px;\nheight: 20px;\nbackground-color: black;\n}\nCreate a range\nAdd multiple thumbs and values to create a range slider import { Slider } from \"radix-ui\";\nexport default () => (\n<Slider Root defaultValue={[25, 75]}>\n<Slider Track>\n<Slider Range />\n</Slider Track>\n<Slider Thumb />\n<Slider Thumb />\n</Slider Root>\n);\nDefine step size\nUse the step prop to increase the stepping interval import { Slider } from \"radix-ui\";\nexport default () => (\n<Slider Root defaultValue={[50]} step={10}>\n<Slider Track>\n<Slider Range />\n</Slider Track>\n<Slider Thumb />\n</Slider Root>\n);\nPrevent thumb overlap\nUse minStepsBetweenThumbs to avoid thumbs with equal values import { Slider } from \"radix-ui\";\nexport default () => (\n<Slider Root defaultValue={[25, 75]} step={10} minStepsBetweenThumbs={1}>\n<Slider Track>\n<Slider Range />\n</Slider Track>\n<Slider Thumb />\n<Slider Thumb />\n</Slider Root>\n);\nAccessibility\nAdheres to the Slider WAI-ARIA design pattern Keyboard Interactions\nKeyDescriptionArrowRightIncrements/decrements by the step value depending on orientation ArrowLeftIncrements/decrements by the step value depending on orientation ArrowUpIncreases the value by the step amount ArrowDownDecreases the value by the step amount",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 400924,
      "relative_path": "documentation\\radix\\_primitives_docs_components_slider.html",
      "source_type": "documentation"
    },
    "token_count": 499,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "d034406f39a01599a09d888ba4204c8a",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_slider.html",
    "source_type": "documentation",
    "title": "Slider – Radix Primitives",
    "content": "with equal values import { Slider } from \"radix-ui\"; export default () => ( <Slider Root defaultValue={[25, 75]} step={10} minStepsBetweenThumbs={1}> <Slider Track> <Slider Range /> </Slider Track> <Slider Thumb /> <Slider Thumb /> </Slider Root> ); Accessibility Adheres to the Slider WAI-ARIA design pattern Keyboard Interactions KeyDescriptionArrowRightIncrements/decrements by the step value depending on orientation ArrowLeftIncrements/decrements by the step value depending on orientation ArrowUpIncreases the value by the step amount ArrowDownDecreases the value by the step amountPageUpIncreases the value by a larger step PageDownDecreases the value by a larger step Shift + ArrowUpIncreases the value by a larger step Shift + ArrowDownDecreases the value by a larger step HomeSets the value to its minimum EndSets the value to its maximum Custom APIs\nCreate your own API by abstracting the primitive parts into your own component Abstract all parts\nThis example abstracts all of the Slider parts so it can be used as a self closing element Usage\nimport { Slider } from \" /your-slider\";\nexport default () => <Slider defaultValue={[25]} />;\nImplementation\n// your-slider jsx\nimport { Slider as SliderPrimitive } from \"radix-ui\";\nexport const Slider = React forwardRef((props, forwardedRef) => {\nconst value = props value || props defaultValue;\nreturn (\n<SliderPrimitive Slider { props} ref={forwardedRef}>\n<SliderPrimitive Track>\n<SliderPrimitive Range />\n</SliderPrimitive Track>\n{value map((_, i) => (\n<SliderPrimitive Thumb key={i} />\n))}\n</SliderPrimitive Slider>\n);\n});\nCaveats\nMouse events are not fired\nBecause of a limitation we faced during implementation, the following example won't work as expected and the onMouseDown and onMouseUp event handlers won't be fired:\n<Slider Root\nonMouseDown={() => console log(\"onMouseDown\")}\nonMouseUp={() => console log(\"onMouseUp\")}\n>\n…\n</Slider Root>\nWe recommend using pointer events instead (eg onPointerDown, onPointerUp) Regardless of the above limitation, these events are better suited for cross-platform/device handling as they are fired for all pointer input types (mouse, touch, pen, etc ) Quick navPreviousSeparatorNextSwitchEdit this page on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 400924,
      "relative_path": "documentation\\radix\\_primitives_docs_components_slider.html",
      "source_type": "documentation"
    },
    "token_count": 484,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "0f32e19c65ba482a84aa3cffe965c2c3",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_tabs.html",
    "source_type": "documentation",
    "title": "Tabs – Radix Primitives",
    "content": "Tabs – Radix PrimitivesRadix HomepageMade by WorkOSRadix HomepageMade by WorkOSThemesThemesPrimitivesPrimitivesIconsIconsColorsColorsDocumentationCase studiesBlogSearch/OverviewIntroductionGetting startedAccessibilityReleasesGuidesStylingAnimationCompositionServer-side renderingComponentsAccordionAlert DialogAspect RatioAvatarCheckboxCollapsibleContext MenuDialogDropdown MenuFormPreviewHover CardLabelMenubarNavigation MenuOne-Time Password FieldPreviewPassword Toggle FieldPreviewPopoverProgressRadio GroupScroll AreaSelectSeparatorSliderSwitchTabsToastToggleToggle GroupToolbarTooltipUtilitiesAccessible IconDirection ProviderPortalSlotVisually HiddenComponentsTabs\nA set of layered sections of content—known as tab panels—that are displayed\none at a time AccountPasswordMake changes to your account here Click save when you're done NameUsernameSave changes\nindex jsxindex jsxstyles cssstyles cssimport * as React from \"react\";\nimport { Tabs } from \"radix-ui\";\nimport \" /styles css\";\nconst TabsDemo = () => (\n<Tabs Root className=\"TabsRoot\" defaultValue=\"tab1\">\n<Tabs List className=\"TabsList\" aria-label=\"Manage your account\">\n<Tabs Trigger className=\"TabsTrigger\" value=\"tab1\">\nAccount\n</Tabs Trigger>\n<Tabs Trigger className=\"TabsTrigger\" value=\"tab2\">\nPassword\n</Tabs Trigger>\n</Tabs List>\n<Tabs Content className=\"TabsContent\" value=\"tab1\">\n<p className=\"Text\">\nMake changes to your account here Click save when you're done </p>\n<fieldset className=\"Fieldset\">\n<label className=\"Label\" htmlFor=\"name\">\nName\n</label>\n<input className=\"Input\" id=\"name\" defaultValue=\"Pedro Duarte\" />\n</fieldset>\n<fieldset className=\"Fieldset\">\n<label className=\"Label\" htmlFor=\"username\">\nUsername\n</label>\n<input className=\"Input\" id=\"username\" defaultValue=\"@peduarte\" />\n</fieldset>\n<div\nstyle={{ display: \"flex\", marginTop: 20, justifyContent: \"flex-end\" }}\n>\n<button className=\"Button green\">Save changes</button>\n</div>\n</Tabs Content>\n<Tabs Content className=\"TabsContent\" value=\"tab2\">\n<p className=\"Text\">\nChange your password here After saving, you'll be logged out",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 519063,
      "relative_path": "documentation\\radix\\_primitives_docs_components_tabs.html",
      "source_type": "documentation"
    },
    "token_count": 446,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "03418af028533eba6953f33b52d70b25",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_tabs.html",
    "source_type": "documentation",
    "title": "Tabs – Radix Primitives",
    "content": "className=\"TabsContent\" value=\"tab1\"> <p className=\"Text\"> Make changes to your account here Click save when you're done </p> <fieldset className=\"Fieldset\"> <label className=\"Label\" htmlFor=\"name\"> Name </label> <input className=\"Input\" id=\"name\" defaultValue=\"Pedro Duarte\" /> </fieldset> <fieldset className=\"Fieldset\"> <label className=\"Label\" htmlFor=\"username\"> Username </label> <input className=\"Input\" id=\"username\" defaultValue=\"@peduarte\" /> </fieldset> <div style={{ display: \"flex\", marginTop: 20, justifyContent: \"flex-end\" }} > <button className=\"Button green\">Save changes</button> </div> </Tabs Content> <Tabs Content className=\"TabsContent\" value=\"tab2\"> <p className=\"Text\"> Change your password here After saving, you'll be logged out</p>\n<fieldset className=\"Fieldset\">\n<label className=\"Label\" htmlFor=\"currentPassword\">\nCurrent password\n</label>\n<input className=\"Input\" id=\"currentPassword\" type=\"password\" />\n</fieldset>\n<fieldset className=\"Fieldset\">\n<label className=\"Label\" htmlFor=\"newPassword\">\nNew password\n</label>\n<input className=\"Input\" id=\"newPassword\" type=\"password\" />\n</fieldset>\n<fieldset className=\"Fieldset\">\n<label className=\"Label\" htmlFor=\"confirmPassword\">\nConfirm password\n</label>\n<input className=\"Input\" id=\"confirmPassword\" type=\"password\" />\n</fieldset>\n<div\nstyle={{ display: \"flex\", marginTop: 20, justifyContent: \"flex-end\" }}\n>\n<button className=\"Button green\">Change password</button>\n</div>\n</Tabs Content>\n</Tabs Root>\n);\nexport default TabsDemo;\nExpand code\nFeaturesCan be controlled or uncontrolled Supports horizontal/vertical orientation Supports automatic/manual activation Full keyboard navigation Component Reference LinksVersion: 1 1 12Size: 9 38 kBView sourceReport an issueARIA design pattern\nInstallation\nInstall the component from your command line npm install @radix-ui/react-tabs\nAnatomy\nImport all parts and piece them together import { Tabs } from \"radix-ui\";\nexport default () => (\n<Tabs Root>\n<Tabs List>\n<Tabs Trigger />\n</Tabs List>\n<Tabs Content />\n</Tabs Root>\n);\nAPI Reference\nRoot\nContains all the tabs component parts",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 519063,
      "relative_path": "documentation\\radix\\_primitives_docs_components_tabs.html",
      "source_type": "documentation"
    },
    "token_count": 488,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "535510f30ad9aea9febc84d541fe6ee4",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_tabs.html",
    "source_type": "documentation",
    "title": "Tabs – Radix Primitives",
    "content": "horizontal/vertical orientation Supports automatic/manual activation Full keyboard navigation Component Reference LinksVersion: 1 1 12Size: 9 38 kBView sourceReport an issueARIA design pattern Installation Install the component from your command line npm install @radix-ui/react-tabs Anatomy Import all parts and piece them together import { Tabs } from \"radix-ui\"; export default () => ( <Tabs Root> <Tabs List> <Tabs Trigger /> </Tabs List> <Tabs Content /> </Tabs Root> ); API Reference Root Contains all the tabs component partsPropTypeDefaultasChildProp descriptionbooleanfalsedefaultValueProp descriptionstringNo default valuevalueProp descriptionstringNo default valueonValueChangeProp descriptionfunctionSee full typeNo default valueorientationProp descriptionenumSee full type\"horizontal\"dirProp descriptionenumSee full typeNo default valueactivationModeProp descriptionenumSee full type\"automatic\"\nData attributeValues[data-orientation]\"vertical\"  | \"horizontal\"\nList\nContains the triggers that are aligned along the edge of the active content PropTypeDefaultasChildProp descriptionbooleanfalseloopProp descriptionbooleantrue\nData attributeValues[data-orientation]\"vertical\"  | \"horizontal\"\nTrigger\nThe button that activates its associated content PropTypeDefaultasChildProp descriptionbooleanfalsevalue*Prop descriptionstringNo default valuedisabledProp descriptionbooleanfalse\nData attributeValues[data-state]\"active\"  | \"inactive\" [data-disabled]Present when disabled[data-orientation]\"vertical\"  | \"horizontal\"\nContent\nContains the content associated with each trigger PropTypeDefaultasChildProp descriptionbooleanfalsevalue*Prop descriptionstringNo default valueforceMountProp descriptionbooleanNo default value\nData attributeValues[data-state]\"active\"  | \"inactive\" [data-orientation]\"vertical\"  | \"horizontal\"\nExamples\nVertical\nYou can create vertical tabs by using the orientation prop import { Tabs } from \"radix-ui\";\nexport default () => (\n<Tabs Root defaultValue=\"tab1\" orientation=\"vertical\">\n<Tabs List aria-label=\"tabs example\">\n<Tabs Trigger value=\"tab1\">One</Tabs Trigger>\n<Tabs Trigger value=\"tab2\">Two</Tabs Trigger>\n<Tabs Trigger value=\"tab3\">Three</Tabs Trigger>\n</Tabs List>\n<Tabs Content value=\"tab1\">Tab one content</Tabs Content>\n<Tabs Content value=\"tab2\">Tab two content</Tabs Content>\n<Tabs Content value=\"tab3\">Tab three content</Tabs",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 519063,
      "relative_path": "documentation\\radix\\_primitives_docs_components_tabs.html",
      "source_type": "documentation"
    },
    "token_count": 500,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "6b351a159970b094b99330377c886cd2",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_tabs.html",
    "source_type": "documentation",
    "title": "Tabs – Radix Primitives",
    "content": "descriptionbooleanfalsevalue*Prop descriptionstringNo default valueforceMountProp descriptionbooleanNo default value Data attributeValues[data-state]\"active\" | \"inactive\" [data-orientation]\"vertical\" | \"horizontal\" Examples Vertical You can create vertical tabs by using the orientation prop import { Tabs } from \"radix-ui\"; export default () => ( <Tabs Root defaultValue=\"tab1\" orientation=\"vertical\"> <Tabs List aria-label=\"tabs example\"> <Tabs Trigger value=\"tab1\">One</Tabs Trigger> <Tabs Trigger value=\"tab2\">Two</Tabs Trigger> <Tabs Trigger value=\"tab3\">Three</Tabs Trigger> </Tabs List> <Tabs Content value=\"tab1\">Tab one content</Tabs Content> <Tabs Content value=\"tab2\">Tab two content</Tabs Content> <Tabs Content value=\"tab3\">Tab three content</TabsContent>\n</Tabs Root>\n);\nAccessibility\nAdheres to the Tabs WAI-ARIA design pattern Keyboard Interactions\nKeyDescriptionTabWhen focus moves onto the tabs, focuses the active trigger When a trigger is focused, moves focus to the active content ArrowDownMoves focus to the next trigger depending on orientation and activates its associated content ArrowRightMoves focus to the next trigger depending on orientation and activates its associated content ArrowUpMoves focus to the previous trigger depending on orientation and activates its associated content ArrowLeftMoves focus to the previous trigger depending on orientation and activates its associated content HomeMoves focus to the first trigger and activates its associated content EndMoves focus to the last trigger and activates its associated content Quick navPreviousSwitchNextToastEdit this page on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 519063,
      "relative_path": "documentation\\radix\\_primitives_docs_components_tabs.html",
      "source_type": "documentation"
    },
    "token_count": 327,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "dc8b9887eea54d8693c090b73d5fc1a2",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_toggle.html",
    "source_type": "documentation",
    "title": "Toggle – Radix Primitives",
    "content": "Toggle – Radix PrimitivesRadix HomepageMade by WorkOSRadix HomepageMade by WorkOSThemesThemesPrimitivesPrimitivesIconsIconsColorsColorsDocumentationCase studiesBlogSearch/OverviewIntroductionGetting startedAccessibilityReleasesGuidesStylingAnimationCompositionServer-side renderingComponentsAccordionAlert DialogAspect RatioAvatarCheckboxCollapsibleContext MenuDialogDropdown MenuFormPreviewHover CardLabelMenubarNavigation MenuOne-Time Password FieldPreviewPassword Toggle FieldPreviewPopoverProgressRadio GroupScroll AreaSelectSeparatorSliderSwitchTabsToastToggleToggle GroupToolbarTooltipUtilitiesAccessible IconDirection ProviderPortalSlotVisually HiddenComponentsToggle\nA two-state button that can be either on or off.\nindex.jsxindex.jsxstyles.cssstyles.cssimport * as React from \"react\";\nimport { Toggle } from \"radix-ui\";\nimport { FontItalicIcon } from \"@radix-ui/react-icons\";\nimport \"./styles.css\";\nconst ToggleDemo = () => (\n<Toggle.Root className=\"Toggle\" aria-label=\"Toggle italic\">\n<FontItalicIcon />\n</Toggle.Root>\n);\nexport default ToggleDemo;\nExpand code\nFeaturesFull keyboard navigation.Can be controlled or uncontrolled.Component Reference LinksVersion: 1.1.9Size: 2.77 kBView sourceReport an issueARIA design pattern\nInstallation\nInstall the component from your command line.\nnpm install @radix-ui/react-toggle\nAnatomy\nImport the component.\nimport { Toggle } from \"radix-ui\";\nexport default () => <Toggle.Root />;\nAPI Reference\nRoot\nThe toggle.\nPropTypeDefaultasChildProp descriptionbooleanfalsedefaultPressedProp descriptionbooleanNo default valuepressedProp descriptionbooleanNo default valueonPressedChangeProp descriptionfunctionSee full typeNo default valuedisabledProp descriptionbooleanNo default value\nData attributeValues[data-state]\"on\"  | \"off\" [data-disabled]Present when disabled\nAccessibility\nKeyboard Interactions\nKeyDescriptionSpaceActivates/deactivates the toggle.EnterActivates/deactivates the toggle.Quick navPreviousToastNextToggle GroupEdit this page on GitHub.",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 173709,
      "relative_path": "documentation\\radix\\_primitives_docs_components_toggle.html",
      "source_type": "documentation"
    },
    "token_count": 407,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "df17528ec91039390c6e5b70cf546366",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_toggle-group.html",
    "source_type": "documentation",
    "title": "Toggle Group – Radix Primitives",
    "content": "Toggle Group – Radix PrimitivesRadix HomepageMade by WorkOSRadix HomepageMade by WorkOSThemesThemesPrimitivesPrimitivesIconsIconsColorsColorsDocumentationCase studiesBlogSearch/OverviewIntroductionGetting startedAccessibilityReleasesGuidesStylingAnimationCompositionServer-side renderingComponentsAccordionAlert DialogAspect RatioAvatarCheckboxCollapsibleContext MenuDialogDropdown MenuFormPreviewHover CardLabelMenubarNavigation MenuOne-Time Password FieldPreviewPassword Toggle FieldPreviewPopoverProgressRadio GroupScroll AreaSelectSeparatorSliderSwitchTabsToastToggleToggle GroupToolbarTooltipUtilitiesAccessible IconDirection ProviderPortalSlotVisually HiddenComponentsToggle Group\nA set of two-state buttons that can be toggled on or off index jsxindex jsxstyles cssstyles cssimport * as React from \"react\";\nimport { ToggleGroup } from \"radix-ui\";\nimport {\nTextAlignLeftIcon,\nTextAlignCenterIcon,\nTextAlignRightIcon,\n} from \"@radix-ui/react-icons\";\nimport \" /styles css\";\nconst ToggleGroupDemo = () => (\n<ToggleGroup Root\nclassName=\"ToggleGroup\"\ntype=\"single\"\ndefaultValue=\"center\"\naria-label=\"Text alignment\"\n>\n<ToggleGroup Item\nclassName=\"ToggleGroupItem\"\nvalue=\"left\"\naria-label=\"Left aligned\"\n>\n<TextAlignLeftIcon />\n</ToggleGroup Item>\n<ToggleGroup Item\nclassName=\"ToggleGroupItem\"\nvalue=\"center\"\naria-label=\"Center aligned\"\n>\n<TextAlignCenterIcon />\n</ToggleGroup Item>\n<ToggleGroup Item\nclassName=\"ToggleGroupItem\"\nvalue=\"right\"\naria-label=\"Right aligned\"\n>\n<TextAlignRightIcon />\n</ToggleGroup Item>\n</ToggleGroup Root>\n);\nexport default ToggleGroupDemo;\nExpand code\nFeaturesFull keyboard navigation Supports horizontal/vertical orientation Support single and multiple pressed buttons Can be controlled or uncontrolled Component Reference LinksVersion: 1 1 10Size: 8 44 kBView sourceReport an issueARIA design pattern\nInstallation\nInstall the component from your command line npm install @radix-ui/react-toggle-group\nAnatomy\nImport the component import { ToggleGroup } from \"radix-ui\";\nexport default () => (\n<ToggleGroup Root>\n<ToggleGroup Item />\n</ToggleGroup Root>\n);\nAPI Reference\nRoot\nContains all the parts of a toggle group",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 303447,
      "relative_path": "documentation\\radix\\_primitives_docs_components_toggle-group.html",
      "source_type": "documentation"
    },
    "token_count": 454,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "6ed72bee1389e9e9d3d43621f65f5492",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_toggle-group.html",
    "source_type": "documentation",
    "title": "Toggle Group – Radix Primitives",
    "content": "FeaturesFull keyboard navigation Supports horizontal/vertical orientation Support single and multiple pressed buttons Can be controlled or uncontrolled Component Reference LinksVersion: 1 1 10Size: 8 44 kBView sourceReport an issueARIA design pattern Installation Install the component from your command line npm install @radix-ui/react-toggle-group Anatomy Import the component import { ToggleGroup } from \"radix-ui\"; export default () => ( <ToggleGroup Root> <ToggleGroup Item /> </ToggleGroup Root> ); API Reference Root Contains all the parts of a toggle groupPropTypeDefaultasChildProp descriptionbooleanfalsetype*Prop descriptionenumSee full typeNo default valuevalueProp descriptionstringNo default valuedefaultValueProp descriptionstringNo default valueonValueChangeProp descriptionfunctionSee full typeNo default valuevalueProp descriptionstring[][]defaultValueProp descriptionstring[][]onValueChangeProp descriptionfunctionSee full typeNo default valuedisabledProp descriptionbooleanfalserovingFocusProp descriptionbooleantrueorientationProp descriptionenumSee full typeundefineddirProp descriptionenumSee full typeNo default valueloopProp descriptionbooleantrue\nData attributeValues[data-orientation]\"vertical\"  | \"horizontal\"\nItem\nAn item in the group PropTypeDefaultasChildProp descriptionbooleanfalsevalue*Prop descriptionstringNo default valuedisabledProp descriptionbooleanNo default value\nData attributeValues[data-state]\"on\"  | \"off\" [data-disabled]Present when disabled[data-orientation]\"vertical\"  | \"horizontal\"\nExamples\nEnsuring there is always a value\nYou can control the component to ensure a value import * as React from \"react\";\nimport { ToggleGroup } from \"radix-ui\";\nexport default () => {\nconst [value, setValue] = React useState(\"left\");\nreturn (\n<ToggleGroup Root\ntype=\"single\"\nvalue={value}\nonValueChange={(value) => {\nif (value) setValue(value);\n}}\n>\n<ToggleGroup Item value=\"left\">\n<TextAlignLeftIcon />\n</ToggleGroup Item>\n<ToggleGroup Item value=\"center\">\n<TextAlignCenterIcon />\n</ToggleGroup Item>\n<ToggleGroup Item value=\"right\">\n<TextAlignRightIcon />\n</ToggleGroup Item>\n</ToggleGroup Root>\n);\n};\nAccessibility\nUses roving tabindex to manage focus movement among items Keyboard Interactions\nKeyDescriptionTabMoves focus to either the pressed item or the first item in the group SpaceActivates/deactivates the item EnterActivates/deactivates the item",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 303447,
      "relative_path": "documentation\\radix\\_primitives_docs_components_toggle-group.html",
      "source_type": "documentation"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "299091f38f70da57bcafaaf5043e0b7f",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_toggle-group.html",
    "source_type": "documentation",
    "title": "Toggle Group – Radix Primitives",
    "content": "[value, setValue] = React useState(\"left\"); return ( <ToggleGroup Root type=\"single\" value={value} onValueChange={(value) => { if (value) setValue(value); }} > <ToggleGroup Item value=\"left\"> <TextAlignLeftIcon /> </ToggleGroup Item> <ToggleGroup Item value=\"center\"> <TextAlignCenterIcon /> </ToggleGroup Item> <ToggleGroup Item value=\"right\"> <TextAlignRightIcon /> </ToggleGroup Item> </ToggleGroup Root> ); }; Accessibility Uses roving tabindex to manage focus movement among items Keyboard Interactions KeyDescriptionTabMoves focus to either the pressed item or the first item in the group SpaceActivates/deactivates the item EnterActivates/deactivates the itemArrowDownMoves focus to the next item in the group ArrowRightMoves focus to the next item in the group ArrowUpMoves focus to the previous item in the group ArrowLeftMoves focus to the previous item in the group HomeMoves focus to the first item EndMoves focus to the last item Quick navPreviousToggleNextToolbarEdit this page on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 303447,
      "relative_path": "documentation\\radix\\_primitives_docs_components_toggle-group.html",
      "source_type": "documentation"
    },
    "token_count": 221,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "d61063c56a150839871ca751d0375348",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_toast.html",
    "source_type": "documentation",
    "title": "Toast – Radix Primitives",
    "content": "Toast – Radix PrimitivesRadix HomepageMade by WorkOSRadix HomepageMade by WorkOSThemesThemesPrimitivesPrimitivesIconsIconsColorsColorsDocumentationCase studiesBlogSearch/OverviewIntroductionGetting startedAccessibilityReleasesGuidesStylingAnimationCompositionServer-side renderingComponentsAccordionAlert DialogAspect RatioAvatarCheckboxCollapsibleContext MenuDialogDropdown MenuFormPreviewHover CardLabelMenubarNavigation MenuOne-Time Password FieldPreviewPassword Toggle FieldPreviewPopoverProgressRadio GroupScroll AreaSelectSeparatorSliderSwitchTabsToastToggleToggle GroupToolbarTooltipUtilitiesAccessible IconDirection ProviderPortalSlotVisually HiddenComponentsToast\nA succinct message that is displayed temporarily Add to calendar\nindex jsxindex jsxstyles cssstyles cssimport * as React from \"react\";\nimport { Toast } from \"radix-ui\";\nimport \" /styles css\";\nconst ToastDemo = () => {\nconst [open, setOpen] = React useState(false);\nconst eventDateRef = React useRef(new Date());\nconst timerRef = React useRef(0);\nReact useEffect(() => {\nreturn () => clearTimeout(timerRef current);\n}, []);\nreturn (\n<Toast Provider swipeDirection=\"right\">\n<button\nclassName=\"Button large violet\"\nonClick={() => {\nsetOpen(false);\nwindow clearTimeout(timerRef current);\ntimerRef current = window setTimeout(() => {\neventDateRef current = oneWeekAway();\nsetOpen(true);\n}, 100);\n}}\n>\nAdd to calendar\n</button>\n<Toast Root className=\"ToastRoot\" open={open} onOpenChange={setOpen}>\n<Toast Title className=\"ToastTitle\">Scheduled: Catch up</Toast Title>\n<Toast Description asChild>\n<time\nclassName=\"ToastDescription\"\ndateTime={eventDateRef current toISOString()}\n>\n{prettyDate(eventDateRef current)}\n</time>\n</Toast Description>\n<Toast Action\nclassName=\"ToastAction\"\nasChild\naltText=\"Goto schedule to undo\"\n>\n<button className=\"Button small green\">Undo</button>\n</Toast Action>\n</Toast Root>\n<Toast Viewport className=\"ToastViewport\" />\n</Toast Provider>\n);\n};\nfunction oneWeekAway(date) {\nconst now = new Date();\nconst inOneWeek = now setDate(now getDate() + 7);\nreturn new Date(inOneWeek);\n}\nfunction prettyDate(date) {\nreturn new Intl DateTimeFormat(\"en-US\", {\ndateStyle: \"full\",\ntimeStyle: \"short\",\n}) format(date);\n}\nexport default ToastDemo;\nExpand code\nFeaturesAutomatically closes",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 722981,
      "relative_path": "documentation\\radix\\_primitives_docs_components_toast.html",
      "source_type": "documentation"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "1570112bc90c9c12492199ce26f9975a",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_toast.html",
    "source_type": "documentation",
    "title": "Toast – Radix Primitives",
    "content": "dateTime={eventDateRef current toISOString()} > {prettyDate(eventDateRef current)} </time> </Toast Description> <Toast Action className=\"ToastAction\" asChild altText=\"Goto schedule to undo\" > <button className=\"Button small green\">Undo</button> </Toast Action> </Toast Root> <Toast Viewport className=\"ToastViewport\" /> </Toast Provider> ); }; function oneWeekAway(date) { const now = new Date(); const inOneWeek = now setDate(now getDate() + 7); return new Date(inOneWeek); } function prettyDate(date) { return new Intl DateTimeFormat(\"en-US\", { dateStyle: \"full\", timeStyle: \"short\", }) format(date); } export default ToastDemo; Expand code FeaturesAutomatically closesPauses closing on hover, focus and window blur Supports hotkey to jump to toast viewport Supports closing via swipe gesture Exposes CSS variables for swipe gesture animations Can be controlled or uncontrolled Component Reference LinksVersion: 1 2 14Size: 11 15 kBView sourceReport an issueARIA design pattern\nInstallation\nInstall the component from your command line npm install @radix-ui/react-toast\nAnatomy\nImport the component import { Toast } from \"radix-ui\";\nexport default () => (\n<Toast Provider>\n<Toast Root>\n<Toast Title />\n<Toast Description />\n<Toast Action />\n<Toast Close />\n</Toast Root>\n<Toast Viewport />\n</Toast Provider>\n);\nAPI Reference\nProvider\nThe provider that wraps your toasts and toast viewport It usually wraps the application PropTypeDefaultdurationProp descriptionnumber5000label*Prop descriptionstring\"Notification\"swipeDirectionProp descriptionenumSee full type\"right\"swipeThresholdProp descriptionnumber50\nViewport\nThe fixed area where toasts appear Users can jump to the viewport by pressing a hotkey It is up to you to ensure the discoverability of the hotkey for keyboard users PropTypeDefaultasChildProp descriptionbooleanfalsehotkeyProp descriptionstring[][\"F8\"]labelProp descriptionstring\"Notifications ({hotkey})\"\nRoot\nThe toast that automatically closes It should not be held open to acquire a user response",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 722981,
      "relative_path": "documentation\\radix\\_primitives_docs_components_toast.html",
      "source_type": "documentation"
    },
    "token_count": 443,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "2c7b5f9ca508db52736bd0cd6e966e91",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_toast.html",
    "source_type": "documentation",
    "title": "Toast – Radix Primitives",
    "content": "Provider The provider that wraps your toasts and toast viewport It usually wraps the application PropTypeDefaultdurationProp descriptionnumber5000label*Prop descriptionstring\"Notification\"swipeDirectionProp descriptionenumSee full type\"right\"swipeThresholdProp descriptionnumber50 Viewport The fixed area where toasts appear Users can jump to the viewport by pressing a hotkey It is up to you to ensure the discoverability of the hotkey for keyboard users PropTypeDefaultasChildProp descriptionbooleanfalsehotkeyProp descriptionstring[][\"F8\"]labelProp descriptionstring\"Notifications ({hotkey})\" Root The toast that automatically closes It should not be held open to acquire a user responsePropTypeDefaultasChildProp descriptionbooleanfalsetypeProp descriptionenumSee full type\"foreground\"durationProp descriptionnumberNo default valuedefaultOpenProp descriptionbooleantrueopenProp descriptionbooleanNo default valueonOpenChangeProp descriptionfunctionSee full typeNo default valueonEscapeKeyDownProp descriptionfunctionSee full typeNo default valueonPauseProp descriptionfunctionSee full typeNo default valueonResumeProp descriptionfunctionSee full typeNo default valueonSwipeStartProp descriptionfunctionSee full typeNo default valueonSwipeMoveProp descriptionfunctionSee full typeNo default valueonSwipeEndProp descriptionfunctionSee full typeNo default valueonSwipeCancelProp descriptionfunctionSee full typeNo default valueforceMountProp descriptionbooleanNo default value\nData attributeValues[data-state]\"open\"  | \"closed\" [data-swipe]\"start\"  | \"move\"  | \"cancel\"  | \"end\" [data-swipe-direction]\"up\"  | \"down\"  | \"left\"  | \"right\"\nCSS VariableDescription--radix-toast-swipe-move-xThe offset position of the toast when horizontally swiping--radix-toast-swipe-move-yThe offset position of the toast when vertically swiping--radix-toast-swipe-end-xThe offset end position of the toast after horizontally swiping--radix-toast-swipe-end-yThe offset end position of the toast after vertically swiping\nTitle\nAn optional title for the toast PropTypeDefaultasChildProp descriptionbooleanfalse\nDescription\nThe toast message PropTypeDefaultasChildProp descriptionbooleanfalse\nAction\nAn action that is safe to ignore to ensure users are not expected to complete tasks with unexpected side effects as a result of a time limit When obtaining a user response is necessary, portal an AlertDialog styled as a toast into the viewport instead",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 722981,
      "relative_path": "documentation\\radix\\_primitives_docs_components_toast.html",
      "source_type": "documentation"
    },
    "token_count": 496,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "95305853427867f9381a664a441eccf6",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_toast.html",
    "source_type": "documentation",
    "title": "Toast – Radix Primitives",
    "content": "of the toast after horizontally swiping--radix-toast-swipe-end-yThe offset end position of the toast after vertically swiping Title An optional title for the toast PropTypeDefaultasChildProp descriptionbooleanfalse Description The toast message PropTypeDefaultasChildProp descriptionbooleanfalse Action An action that is safe to ignore to ensure users are not expected to complete tasks with unexpected side effects as a result of a time limit When obtaining a user response is necessary, portal an AlertDialog styled as a toast into the viewport insteadPropTypeDefaultasChildProp descriptionbooleanfalsealtText*Prop descriptionstringNo default value\nClose\nA button that allows users to dismiss the toast before its duration has elapsed PropTypeDefaultasChildProp descriptionbooleanfalse\nExamples\nCustom hotkey\nOverride the default hotkey using the event code value for each key from keycode info <Toast Provider>\n{/* */}\n<Toast Viewport hotkey={[\"altKey\", \"KeyT\"]} />\n</Toast Provider>\nCustom duration\nCustomise the duration of a toast to override the provider value <Toast Root duration={3000}>\n<Toast Description>Saved </Toast Description>\n</Toast Root>\nDuplicate toasts\nWhen a toast must appear every time a user clicks a button, use state to render multiple instances of the same toast (see below) Alternatively, you can abstract the parts to create your own imperative API export default () => {\nconst [savedCount, setSavedCount] = React useState(0);\nreturn (\n<div>\n<form onSubmit={() => setSavedCount((count) => count + 1)}>\n{/* */}\n<button>save</button>\n</form>\n{Array from({ length: savedCount }) map((_, index) => (\n<Toast Root key={index}>\n<Toast Description>Saved </Toast Description>\n</Toast Root>\n))}\n</div>\n);\n};\nAnimating swipe gesture\nCombine --radix-toast-swipe-move-[x|y] and --radix-toast-swipe-end-[x|y] CSS variables with data-swipe=\"[start|move|cancel|end]\" attributes to animate a swipe to close gesture Here's an example:\n// index jsx\nimport { Toast } from \"radix-ui\";\nimport \" /styles css\";\nexport default () => (\n<Toast Provider swipeDirection=\"right\">\n<Toast Root className=\"ToastRoot\"> </Toast Root>\n<Toast Viewport />\n</Toast Provider>\n);\n/* styles css */",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 722981,
      "relative_path": "documentation\\radix\\_primitives_docs_components_toast.html",
      "source_type": "documentation"
    },
    "token_count": 485,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "911c93b3abed874c07d445734b9b750e",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_toast.html",
    "source_type": "documentation",
    "title": "Toast – Radix Primitives",
    "content": "}) map((_, index) => ( <Toast Root key={index}> <Toast Description>Saved </Toast Description> </Toast Root> ))} </div> ); }; Animating swipe gesture Combine --radix-toast-swipe-move-[x|y] and --radix-toast-swipe-end-[x|y] CSS variables with data-swipe=\"[start|move|cancel|end]\" attributes to animate a swipe to close gesture Here's an example: // index jsx import { Toast } from \"radix-ui\"; import \" /styles css\"; export default () => ( <Toast Provider swipeDirection=\"right\"> <Toast Root className=\"ToastRoot\"> </Toast Root> <Toast Viewport /> </Toast Provider> ); /* styles css */ToastRoot[data-swipe=\"move\"] {\ntransform: translateX(var(--radix-toast-swipe-move-x));\n} ToastRoot[data-swipe=\"cancel\"] {\ntransform: translateX(0);\ntransition: transform 200ms ease-out;\n} ToastRoot[data-swipe=\"end\"] {\nanimation: slideRight 100ms ease-out;\n}\n@keyframes slideRight {\nfrom {\ntransform: translateX(var(--radix-toast-swipe-end-x));\n}\nto {\ntransform: translateX(100%);\n}\n}\nAccessibility\nAdheres to the aria-live requirements Sensitivity\nControl the sensitivity of the toast for screen readers using the type prop For toasts that are the result of a user action, choose foreground Toasts generated from background tasks should use background Foreground\nForeground toasts are announced immediately Assistive technologies may choose to clear previously queued messages when a foreground toast appears Try to avoid stacking distinct foreground toasts at the same time Background\nBackground toasts are announced at the next graceful opportunity, for example, when the screen reader has finished reading its current sentence They do not clear queued messages so overusing them can be perceived as a laggy user experience for screen reader users when used in response to a user interaction <Toast Root type=\"foreground\">\n<Toast Description>File removed successfully </Toast Description>\n<Toast Close>Dismiss</Toast Close>\n</Toast Root>\n<Toast Root type=\"background\">\n<Toast Description>We've just released Radix 1 0 </Toast Description>\n<Toast Close>Dismiss</Toast Close>\n</Toast Root>\nAlternative action\nUse the altText prop on the Action to instruct an alternative way of actioning the toast to screen reader users",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 722981,
      "relative_path": "documentation\\radix\\_primitives_docs_components_toast.html",
      "source_type": "documentation"
    },
    "token_count": 490,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "4055158a9fe1d9d2d0a2ebaee9cfeb87",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_toast.html",
    "source_type": "documentation",
    "title": "Toast – Radix Primitives",
    "content": "so overusing them can be perceived as a laggy user experience for screen reader users when used in response to a user interaction <Toast Root type=\"foreground\"> <Toast Description>File removed successfully </Toast Description> <Toast Close>Dismiss</Toast Close> </Toast Root> <Toast Root type=\"background\"> <Toast Description>We've just released Radix 1 0 </Toast Description> <Toast Close>Dismiss</Toast Close> </Toast Root> Alternative action Use the altText prop on the Action to instruct an alternative way of actioning the toast to screen reader usersYou can direct the user to a permanent place in your application where they can action it or implement your own custom hotkey logic If implementing the latter, use foreground type to announce immediately and increase the duration to give the user ample time <Toast Root type=\"background\">\n<Toast Title>Upgrade Available </Toast Title>\n<Toast Description>We've just released Radix 1 0 </Toast Description>\n<Toast Action altText=\"Goto account settings to upgrade\">\nUpgrade\n</Toast Action>\n<Toast Close>Dismiss</Toast Close>\n</Toast Root>\n<Toast Root type=\"foreground\" duration={10000}>\n<Toast Description>File removed successfully </Toast Description>\n<Toast Action altText=\"Undo (Alt+U)\">\nUndo <kbd>Alt</kbd>+<kbd>U</kbd>\n</Toast Action>\n<Toast Close>Dismiss</Toast Close>\n</Toast Root>\nClose icon button\nWhen providing an icon (or font icon), remember to label it correctly for screen reader users <Toast Root type=\"foreground\">\n<Toast Description>Saved </Toast Description>\n<Toast Close aria-label=\"Close\">\n<span aria-hidden>×</span>\n</Toast Close>\n</Toast Root>\nKeyboard Interactions\nKeyDescriptionF8Focuses toasts viewport TabMoves focus to the next focusable element Shift + TabMoves focus to the previous focusable element SpaceWhen focus is on a Toast Action or Toast Close, closes the toast EnterWhen focus is on a Toast Action or Toast Close, closes the toast EscWhen focus is on a Toast, closes the toast Custom APIs\nAbstract parts\nCreate your own API by abstracting the primitive parts into your own component Usage\nimport { Toast } from \" /your-toast\";\nexport default () => (\n<Toast title=\"Upgrade available\" content=\"We've just released Radix 3 0",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 722981,
      "relative_path": "documentation\\radix\\_primitives_docs_components_toast.html",
      "source_type": "documentation"
    },
    "token_count": 487,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "e980152f3f6ee49db297317fc9fd5847",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_toast.html",
    "source_type": "documentation",
    "title": "Toast – Radix Primitives",
    "content": "focusable element SpaceWhen focus is on a Toast Action or Toast Close, closes the toast EnterWhen focus is on a Toast Action or Toast Close, closes the toast EscWhen focus is on a Toast, closes the toast Custom APIs Abstract parts Create your own API by abstracting the primitive parts into your own component Usage import { Toast } from \" /your-toast\"; export default () => ( <Toast title=\"Upgrade available\" content=\"We've just released Radix 3 0\">\n<button onClick={handleUpgrade}>Upgrade</button>\n</Toast>\n);\nImplementation\n// your-toast jsx\nimport { Toast as ToastPrimitive } from \"radix-ui\";\nexport const Toast = ({ title, content, children, props }) => {\nreturn (\n<ToastPrimitive Root { props}>\n{title && <ToastPrimitive Title>{title}</ToastPrimitive Title>}\n<ToastPrimitive Description>{content}</ToastPrimitive Description>\n{children && (\n<ToastPrimitive Action asChild>{children}</ToastPrimitive Action>\n)}\n<ToastPrimitive Close aria-label=\"Close\">\n<span aria-hidden>×</span>\n</ToastPrimitive Close>\n</ToastPrimitive Root>\n);\n};\nImperative API\nCreate your own imperative API to allow toast duplication if preferred Usage\nimport { Toast } from \" /your-toast\";\nexport default () => {\nconst savedRef = React useRef();\nreturn (\n<div>\n<form onSubmit={() => savedRef current publish()}>\n{/* */}\n<button>Save</button>\n</form>\n<Toast ref={savedRef}>Saved successfully </Toast>\n</div>\n);\n};\nImplementation\n// your-toast jsx\nimport * as React from \"react\";\nimport { Toast as ToastPrimitive } from \"radix-ui\";\nexport const Toast = React forwardRef((props, forwardedRef) => {\nconst { children, toastProps } = props;\nconst [count, setCount] = React useState(0);\nReact useImperativeHandle(forwardedRef, () => ({\npublish: () => setCount((count) => count + 1),\n}));\nreturn (\n<>\n{Array from({ length: count }) map((_, index) => (\n<ToastPrimitive Root key={index} { toastProps}>\n<ToastPrimitive Description>{children}</ToastPrimitive Description>\n<ToastPrimitive Close>Dismiss</ToastPrimitive Close>\n</ToastPrimitive Root>\n))}\n</>\n);\n});\nQuick navPreviousTabsNextToggleEdit this page on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 722981,
      "relative_path": "documentation\\radix\\_primitives_docs_components_toast.html",
      "source_type": "documentation"
    },
    "token_count": 477,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "7697741ba5c51ee2593e9fc7121b150d",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_select.html",
    "source_type": "documentation",
    "title": "Select – Radix Primitives",
    "content": "Select – Radix PrimitivesRadix HomepageMade by WorkOSRadix HomepageMade by WorkOSThemesThemesPrimitivesPrimitivesIconsIconsColorsColorsDocumentationCase studiesBlogSearch/OverviewIntroductionGetting startedAccessibilityReleasesGuidesStylingAnimationCompositionServer-side renderingComponentsAccordionAlert DialogAspect RatioAvatarCheckboxCollapsibleContext MenuDialogDropdown MenuFormPreviewHover CardLabelMenubarNavigation MenuOne-Time Password FieldPreviewPassword Toggle FieldPreviewPopoverProgressRadio GroupScroll AreaSelectSeparatorSliderSwitchTabsToastToggleToggle GroupToolbarTooltipUtilitiesAccessible IconDirection ProviderPortalSlotVisually HiddenComponentsSelect\nDisplays a list of options for the user to pick from—triggered by a button Select a fruit…\nindex jsxindex jsxstyles cssstyles cssimport * as React from \"react\";\nimport { Select } from \"radix-ui\";\nimport classnames from \"classnames\";\nimport {\nCheckIcon,\nChevronDownIcon,\nChevronUpIcon,\n} from \"@radix-ui/react-icons\";\nimport \" /styles css\";\nconst SelectDemo = () => (\n<Select Root>\n<Select Trigger className=\"SelectTrigger\" aria-label=\"Food\">\n<Select Value placeholder=\"Select a fruit…\" />\n<Select Icon className=\"SelectIcon\">\n<ChevronDownIcon />\n</Select Icon>\n</Select Trigger>\n<Select Portal>\n<Select Content className=\"SelectContent\">\n<Select ScrollUpButton className=\"SelectScrollButton\">\n<ChevronUpIcon />\n</Select ScrollUpButton>\n<Select Viewport className=\"SelectViewport\">\n<Select Group>\n<Select Label className=\"SelectLabel\">Fruits</Select Label>\n<SelectItem value=\"apple\">Apple</SelectItem>\n<SelectItem value=\"banana\">Banana</SelectItem>\n<SelectItem value=\"blueberry\">Blueberry</SelectItem>\n<SelectItem value=\"grapes\">Grapes</SelectItem>\n<SelectItem value=\"pineapple\">Pineapple</SelectItem>\n</Select Group>\n<Select Separator className=\"SelectSeparator\" />\n<Select Group>\n<Select Label className=\"SelectLabel\">Vegetables</Select Label>\n<SelectItem value=\"aubergine\">Aubergine</SelectItem>\n<SelectItem value=\"broccoli\">Broccoli</SelectItem>\n<SelectItem value=\"carrot\" disabled>\nCarrot\n</SelectItem>\n<SelectItem value=\"courgette\">Courgette</SelectItem>\n<SelectItem value=\"leek\">Leek</SelectItem>\n</Select Group>\n<Select Separator className=\"SelectSeparator\" />\n<Select Group>\n<Select Label className=\"SelectLabel\">Meat</Select",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1005356,
      "relative_path": "documentation\\radix\\_primitives_docs_components_select.html",
      "source_type": "documentation"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 12
  },
  {
    "id": "e30f86e460f4166273d91553fdf3cef4",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_select.html",
    "source_type": "documentation",
    "title": "Select – Radix Primitives",
    "content": "<Select Icon className=\"SelectIcon\"> <ChevronDownIcon /> </Select Icon> </Select Trigger> <Select Portal> <Select Content className=\"SelectContent\"> <Select ScrollUpButton className=\"SelectScrollButton\"> <ChevronUpIcon /> </Select ScrollUpButton> <Select Viewport className=\"SelectViewport\"> <Select Group> <Select Label className=\"SelectLabel\">Fruits</Select Label> <SelectItem value=\"apple\">Apple</SelectItem> <SelectItem value=\"banana\">Banana</SelectItem> <SelectItem value=\"blueberry\">Blueberry</SelectItem> <SelectItem value=\"grapes\">Grapes</SelectItem> <SelectItem value=\"pineapple\">Pineapple</SelectItem> </Select Group> <Select Separator className=\"SelectSeparator\" /> <Select Group> <Select Label className=\"SelectLabel\">Vegetables</Select Label> <SelectItem value=\"aubergine\">Aubergine</SelectItem> <SelectItem value=\"broccoli\">Broccoli</SelectItem> <SelectItem value=\"carrot\" disabled> Carrot </SelectItem> <SelectItem value=\"courgette\">Courgette</SelectItem> <SelectItem value=\"leek\">Leek</SelectItem> </Select Group> <Select Separator className=\"SelectSeparator\" /> <Select Group> <Select Label className=\"SelectLabel\">Meat</SelectLabel>\n<SelectItem value=\"beef\">Beef</SelectItem>\n<SelectItem value=\"chicken\">Chicken</SelectItem>\n<SelectItem value=\"lamb\">Lamb</SelectItem>\n<SelectItem value=\"pork\">Pork</SelectItem>\n</Select Group>\n</Select Viewport>\n<Select ScrollDownButton className=\"SelectScrollButton\">\n<ChevronDownIcon />\n</Select ScrollDownButton>\n</Select Content>\n</Select Portal>\n</Select Root>\n);\nconst SelectItem = React forwardRef(\n({ children, className, props }, forwardedRef) => {\nreturn (\n<Select Item\nclassName={classnames(\"SelectItem\", className)}\n{ props}\nref={forwardedRef}\n>\n<Select ItemText>{children}</Select ItemText>\n<Select ItemIndicator className=\"SelectItemIndicator\">\n<CheckIcon />\n</Select ItemIndicator>\n</Select Item>\n);\n},\n);\nexport default SelectDemo;\nExpand code\nFeaturesCan be controlled or uncontrolled Offers 2 positioning modes Supports items, labels, groups of items Focus is fully managed",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1005356,
      "relative_path": "documentation\\radix\\_primitives_docs_components_select.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 12
  },
  {
    "id": "d14c29732b75d9c3620d9dd49d51ae99",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_select.html",
    "source_type": "documentation",
    "title": "Select – Radix Primitives",
    "content": "<Select ScrollDownButton className=\"SelectScrollButton\"> <ChevronDownIcon /> </Select ScrollDownButton> </Select Content> </Select Portal> </Select Root> ); const SelectItem = React forwardRef( ({ children, className, props }, forwardedRef) => { return ( <Select Item className={classnames(\"SelectItem\", className)} { props} ref={forwardedRef} > <Select ItemText>{children}</Select ItemText> <Select ItemIndicator className=\"SelectItemIndicator\"> <CheckIcon /> </Select ItemIndicator> </Select Item> ); }, ); export default SelectDemo; Expand code FeaturesCan be controlled or uncontrolled Offers 2 positioning modes Supports items, labels, groups of items Focus is fully managedFull keyboard navigation Supports custom placeholder Typeahead support Supports Right to Left direction Component Reference LinksVersion: 2 2 5Size: 34 2 kBView sourceReport an issueARIA design pattern\nInstallation\nInstall the component from your command line npm install @radix-ui/react-select\nAnatomy\nImport all parts and piece them together import { Select } from \"radix-ui\";\nexport default () => (\n<Select Root>\n<Select Trigger>\n<Select Value />\n<Select Icon />\n</Select Trigger>\n<Select Portal>\n<Select Content>\n<Select ScrollUpButton />\n<Select Viewport>\n<Select Item>\n<Select ItemText />\n<Select ItemIndicator />\n</Select Item>\n<Select Group>\n<Select Label />\n<Select Item>\n<Select ItemText />\n<Select ItemIndicator />\n</Select Item>\n</Select Group>\n<Select Separator />\n</Select Viewport>\n<Select ScrollDownButton />\n<Select Arrow />\n</Select Content>\n</Select Portal>\n</Select Root>\n);\nAPI Reference\nRoot\nContains all the parts of a select PropTypeDefaultdefaultValueProp descriptionstringNo default valuevalueProp descriptionstringNo default valueonValueChangeProp descriptionfunctionSee full typeNo default valuedefaultOpenProp descriptionbooleanNo default valueopenProp descriptionbooleanNo default valueonOpenChangeProp descriptionfunctionSee full typeNo default valuedirProp descriptionenumSee full typeNo default valuenameProp descriptionstringNo default valuedisabledProp descriptionbooleanNo default valuerequiredProp descriptionbooleanNo default value\nTrigger\nThe button that toggles the select The Select Content will position itself by aligning over the trigger PropTypeDefaultasChildProp descriptionbooleanfalse\nData attributeValues[data-state]\"open\"  | \"closed\" [data-disabled]Present when disabled[data-placeholder]Present when has placeholder\nValue\nThe part that reflects the selected value",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1005356,
      "relative_path": "documentation\\radix\\_primitives_docs_components_select.html",
      "source_type": "documentation"
    },
    "token_count": 502,
    "chunk_index": 2,
    "total_chunks": 12
  },
  {
    "id": "9213f080771e117eaeb292fc815ae6e3",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_select.html",
    "source_type": "documentation",
    "title": "Select – Radix Primitives",
    "content": "select PropTypeDefaultdefaultValueProp descriptionstringNo default valuevalueProp descriptionstringNo default valueonValueChangeProp descriptionfunctionSee full typeNo default valuedefaultOpenProp descriptionbooleanNo default valueopenProp descriptionbooleanNo default valueonOpenChangeProp descriptionfunctionSee full typeNo default valuedirProp descriptionenumSee full typeNo default valuenameProp descriptionstringNo default valuedisabledProp descriptionbooleanNo default valuerequiredProp descriptionbooleanNo default value Trigger The button that toggles the select The Select Content will position itself by aligning over the trigger PropTypeDefaultasChildProp descriptionbooleanfalse Data attributeValues[data-state]\"open\" | \"closed\" [data-disabled]Present when disabled[data-placeholder]Present when has placeholder Value The part that reflects the selected valueBy default the selected item's text will be rendered if you require more control, you can instead control the select and pass your own children It should not be styled to ensure correct positioning An optional placeholder prop is also available for when the select has no value PropTypeDefaultasChildProp descriptionbooleanfalseplaceholderProp descriptionReactNodeNo default value\nIcon\nA small icon often displayed next to the value as a visual affordance for the fact it can be open By default renders ▼ but you can use your own icon via asChild or use children PropTypeDefaultasChildProp descriptionbooleanfalse\nPortal\nWhen used, portals the content part into the body PropTypeDefaultcontainerProp descriptionHTMLElementdocument body\nContent\nThe component that pops out when the select is open",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1005356,
      "relative_path": "documentation\\radix\\_primitives_docs_components_select.html",
      "source_type": "documentation"
    },
    "token_count": 306,
    "chunk_index": 3,
    "total_chunks": 12
  },
  {
    "id": "6d0a9d27089ef2e7295cbbac237ffb90",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_select.html",
    "source_type": "documentation",
    "title": "Select – Radix Primitives",
    "content": "available for when the select has no value PropTypeDefaultasChildProp descriptionbooleanfalseplaceholderProp descriptionReactNodeNo default value Icon A small icon often displayed next to the value as a visual affordance for the fact it can be open By default renders ▼ but you can use your own icon via asChild or use children PropTypeDefaultasChildProp descriptionbooleanfalse Portal When used, portals the content part into the body PropTypeDefaultcontainerProp descriptionHTMLElementdocument body Content The component that pops out when the select is openPropTypeDefaultasChildProp descriptionbooleanfalseonCloseAutoFocusProp descriptionfunctionSee full typeNo default valueonEscapeKeyDownProp descriptionfunctionSee full typeNo default valueonPointerDownOutsideProp descriptionfunctionSee full typeNo default valuepositionProp descriptionenumSee full type\"item-aligned\"sideProp descriptionenumSee full type\"bottom\"sideOffsetProp descriptionnumber0alignProp descriptionenumSee full type\"start\"alignOffsetProp descriptionnumber0avoidCollisionsProp descriptionbooleantruecollisionBoundaryProp descriptionBoundarySee full type[]collisionPaddingProp descriptionnumber | PaddingSee full type10arrowPaddingProp descriptionnumber0stickyProp descriptionenumSee full type\"partial\"hideWhenDetachedProp descriptionbooleanfalse\nData attributeValues[data-state]\"open\"  | \"closed\" [data-side]\"left\"  | \"right\"  | \"bottom\"  | \"top\" [data-align]\"start\"  | \"end\"  | \"center\"\nCSS VariableDescription--radix-select-content-transform-originThe transform-origin computed from the content and arrow positions/offsets Only present when position=\"popper\" --radix-select-content-available-widthThe remaining width between the trigger and the boundary edge Only present when position=\"popper\" --radix-select-content-available-heightThe remaining height between the trigger and the boundary edge Only present when position=\"popper\" --radix-select-trigger-widthThe width of the trigger Only present when position=\"popper\" --radix-select-trigger-heightThe height of the trigger Only present when position=\"popper\" Viewport\nThe scrolling viewport that contains all of the items PropTypeDefaultasChildProp descriptionbooleanfalse\nItem\nThe component that contains the select items",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1005356,
      "relative_path": "documentation\\radix\\_primitives_docs_components_select.html",
      "source_type": "documentation"
    },
    "token_count": 447,
    "chunk_index": 4,
    "total_chunks": 12
  },
  {
    "id": "b79ac0d3245022bad78c62a3cb796ad8",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_select.html",
    "source_type": "documentation",
    "title": "Select – Radix Primitives",
    "content": "from the content and arrow positions/offsets Only present when position=\"popper\" --radix-select-content-available-widthThe remaining width between the trigger and the boundary edge Only present when position=\"popper\" --radix-select-content-available-heightThe remaining height between the trigger and the boundary edge Only present when position=\"popper\" --radix-select-trigger-widthThe width of the trigger Only present when position=\"popper\" --radix-select-trigger-heightThe height of the trigger Only present when position=\"popper\" Viewport The scrolling viewport that contains all of the items PropTypeDefaultasChildProp descriptionbooleanfalse Item The component that contains the select itemsPropTypeDefaultasChildProp descriptionbooleanfalsevalue*Prop descriptionstringNo default valuedisabledProp descriptionbooleanNo default valuetextValueProp descriptionstringNo default value\nData attributeValues[data-state]\"checked\"  | \"unchecked\" [data-highlighted]Present when highlighted[data-disabled]Present when disabled\nItemText\nThe textual part of the item It should only contain the text you want to see in the trigger when that item is selected It should not be styled to ensure correct positioning PropTypeDefaultasChildProp descriptionbooleanfalse\nItemIndicator\nRenders when the item is selected You can style this element directly, or you can use it as a wrapper to put an icon into, or both PropTypeDefaultasChildProp descriptionbooleanfalse\nScrollUpButton\nAn optional button used as an affordance to show the viewport overflow as well as functionaly enable scrolling upwards PropTypeDefaultasChildProp descriptionbooleanfalse\nScrollDownButton\nAn optional button used as an affordance to show the viewport overflow as well as functionaly enable scrolling downwards PropTypeDefaultasChildProp descriptionbooleanfalse\nGroup\nUsed to group multiple items use in conjunction with Select Label to ensure good accessibility via automatic labelling PropTypeDefaultasChildProp descriptionbooleanfalse\nLabel\nUsed to render the label of a group It won't be focusable using arrow keys PropTypeDefaultasChildProp descriptionbooleanfalse\nSeparator\nUsed to visually separate items in the select PropTypeDefaultasChildProp descriptionbooleanfalse\nArrow\nAn optional arrow element to render alongside the content This can be used to help visually link the trigger with the Select Content Must be rendered inside Select Content Only available when position is set to popper",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1005356,
      "relative_path": "documentation\\radix\\_primitives_docs_components_select.html",
      "source_type": "documentation"
    },
    "token_count": 475,
    "chunk_index": 5,
    "total_chunks": 12
  },
  {
    "id": "84fa2e7d65a74f674f0af71683727c42",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_select.html",
    "source_type": "documentation",
    "title": "Select – Radix Primitives",
    "content": "to ensure good accessibility via automatic labelling PropTypeDefaultasChildProp descriptionbooleanfalse Label Used to render the label of a group It won't be focusable using arrow keys PropTypeDefaultasChildProp descriptionbooleanfalse Separator Used to visually separate items in the select PropTypeDefaultasChildProp descriptionbooleanfalse Arrow An optional arrow element to render alongside the content This can be used to help visually link the trigger with the Select Content Must be rendered inside Select Content Only available when position is set to popperPropTypeDefaultasChildProp descriptionbooleanfalsewidthProp descriptionnumber10heightProp descriptionnumber5\nExamples\nChange the positioning mode\nBy default, Select will behave similarly to a native MacOS menu by positioning Select Content relative to the active item If you would prefer an alternative positioning approach similar to Popover or DropdownMenu then you can set position to popper and make use of additional alignment options such as side, sideOffset and more // index jsx\nimport { Select } from \"radix-ui\";\nexport default () => (\n<Select Root>\n<Select Trigger>…</Select Trigger>\n<Select Portal>\n<Select Content position=\"popper\" sideOffset={5}>\n…\n</Select Content>\n</Select Portal>\n</Select Root>\n);\nConstrain the content size\nWhen using position=\"popper\" on Select Content, you may want to constrain the width of the content so that it matches the trigger width You may also want to constrain its height to not exceed the viewport We expose several CSS custom properties such as --radix-select-trigger-width and --radix-select-content-available-height to support this Use them to constrain the content dimensions // index jsx\nimport { Select } from \"radix-ui\";\nimport \" /styles css\";\nexport default () => (\n<Select Root>\n<Select Trigger>…</Select Trigger>\n<Select Portal>\n<Select Content\nclassName=\"SelectContent\"\nposition=\"popper\"\nsideOffset={5}\n>\n…\n</Select Content>\n</Select Portal>\n</Select Root>\n);\n/* styles css */ SelectContent {\nwidth: var(--radix-select-trigger-width);\nmax-height: var(--radix-select-content-available-height);\n}\nWith disabled items\nYou can add special styles to disabled items via the data-disabled attribute // index jsx\nimport { Select } from \"radix-ui\";\nimport \" /styles css\";\nexport default () => (\n<Select Root>\n<Select Trigger>…</Select Trigger>\n<Select Portal>\n<Select Content>\n<Select Viewport>\n<Select Item className=\"SelectItem\" disabled>\n…\n</Select",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1005356,
      "relative_path": "documentation\\radix\\_primitives_docs_components_select.html",
      "source_type": "documentation"
    },
    "token_count": 502,
    "chunk_index": 6,
    "total_chunks": 12
  },
  {
    "id": "2dc16ab37f2e60f43da180dc45328495",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_select.html",
    "source_type": "documentation",
    "title": "Select – Radix Primitives",
    "content": "Portal> <Select Content className=\"SelectContent\" position=\"popper\" sideOffset={5} > … </Select Content> </Select Portal> </Select Root> ); /* styles css */ SelectContent { width: var(--radix-select-trigger-width); max-height: var(--radix-select-content-available-height); } With disabled items You can add special styles to disabled items via the data-disabled attribute // index jsx import { Select } from \"radix-ui\"; import \" /styles css\"; export default () => ( <Select Root> <Select Trigger>…</Select Trigger> <Select Portal> <Select Content> <Select Viewport> <Select Item className=\"SelectItem\" disabled> … </SelectItem>\n<Select Item>…</Select Item>\n<Select Item>…</Select Item>\n</Select Viewport>\n</Select Content>\n</Select Portal>\n</Select Root>\n);\n/* styles css */ SelectItem[data-disabled] {\ncolor: \"gainsboro\";\n}\nWith a placeholder\nYou can use the placeholder prop on Value for when the select has no value There's also a data-placeholder attribute on Trigger to help with styling // index jsx\nimport { Select } from \"radix-ui\";\nimport \" /styles css\";\nexport default () => (\n<Select Root>\n<Select Trigger className=\"SelectTrigger\">\n<Select Value placeholder=\"Pick an option\" />\n<Select Icon />\n</Select Trigger>\n<Select Portal>\n<Select Content>…</Select Content>\n</Select Portal>\n</Select Root>\n);\n/* styles css */ SelectTrigger[data-placeholder] {\ncolor: \"gainsboro\";\n}\nWith separators\nUse the Separator part to add a separator between items <Select Root>\n<Select Trigger>…</Select Trigger>\n<Select Portal>\n<Select Content>\n<Select Viewport>\n<Select Item>…</Select Item>\n<Select Item>…</Select Item>\n<Select Item>…</Select Item>\n<Select Separator />\n<Select Item>…</Select Item>\n<Select Item>…</Select Item>\n</Select Viewport>\n</Select Content>\n</Select Portal>\n</Select Root>\nWith grouped items\nUse the Group and Label parts to group items in a section <Select Root>\n<Select Trigger>…</Select Trigger>\n<Select Portal>\n<Select Content>\n<Select Viewport>\n<Select Group>\n<Select Label>Label</Select Label>\n<Select Item>…</Select Item>\n<Select Item>…</Select Item>\n<Select Item>…</Select Item>\n</Select Group>\n</Select Viewport>\n</Select Content>\n</Select Portal>\n</Select",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1005356,
      "relative_path": "documentation\\radix\\_primitives_docs_components_select.html",
      "source_type": "documentation"
    },
    "token_count": 506,
    "chunk_index": 7,
    "total_chunks": 12
  },
  {
    "id": "bf90f585733e9af07e652c818077e393",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_select.html",
    "source_type": "documentation",
    "title": "Select – Radix Primitives",
    "content": "Viewport> <Select Item>…</Select Item> <Select Item>…</Select Item> <Select Item>…</Select Item> <Select Separator /> <Select Item>…</Select Item> <Select Item>…</Select Item> </Select Viewport> </Select Content> </Select Portal> </Select Root> With grouped items Use the Group and Label parts to group items in a section <Select Root> <Select Trigger>…</Select Trigger> <Select Portal> <Select Content> <Select Viewport> <Select Group> <Select Label>Label</Select Label> <Select Item>…</Select Item> <Select Item>…</Select Item> <Select Item>…</Select Item> </Select Group> </Select Viewport> </Select Content> </Select Portal> </SelectRoot>\nWith complex items\nYou can use custom content in your items import { Select } from \"radix-ui\";\nexport default () => (\n<Select Root>\n<Select Trigger>…</Select Trigger>\n<Select Portal>\n<Select Content>\n<Select Viewport>\n<Select Item>\n<Select ItemText>\n<img src=\"…\" />\nAdolfo Hess\n</Select ItemText>\n<Select ItemIndicator>…</Select ItemIndicator>\n</Select Item>\n<Select Item>…</Select Item>\n<Select Item>…</Select Item>\n</Select Viewport>\n</Select Content>\n</Select Portal>\n</Select Root>\n);\nControlling the value displayed in the trigger\nBy default the trigger will automatically display the selected item ItemText's content You can control what appears by chosing to put things inside/outside the ItemText part If you need more flexibility, you can control the component using value/onValueChange props and passing children to SelectValue Remember to make sure what you put in there is accessible const countries = { france: \"🇫🇷\", \"united-kingdom\": \"🇬🇧\", spain: \"🇪🇸\" };\nexport default () => {\nconst [value, setValue] = React useState(\"france\");\nreturn (\n<Select Root value={value} onValueChange={setValue}>\n<Select Trigger>\n<Select Value aria-label={value}>\n{countries[value]}\n</Select Value>\n<Select Icon />\n</Select Trigger>\n<Select Portal>\n<Select Content>\n<Select Viewport>\n<Select Item value=\"france\">\n<Select ItemText>France</Select ItemText>\n<Select ItemIndicator>…</Select ItemIndicator>\n</Select Item>\n<Select",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1005356,
      "relative_path": "documentation\\radix\\_primitives_docs_components_select.html",
      "source_type": "documentation"
    },
    "token_count": 503,
    "chunk_index": 8,
    "total_chunks": 12
  },
  {
    "id": "421629c7f345bd77c1f7acd94f01f929",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_select.html",
    "source_type": "documentation",
    "title": "Select – Radix Primitives",
    "content": "props and passing children to SelectValue Remember to make sure what you put in there is accessible const countries = { france: \"🇫🇷\", \"united-kingdom\": \"🇬🇧\", spain: \"🇪🇸\" }; export default () => { const [value, setValue] = React useState(\"france\"); return ( <Select Root value={value} onValueChange={setValue}> <Select Trigger> <Select Value aria-label={value}> {countries[value]} </Select Value> <Select Icon /> </Select Trigger> <Select Portal> <Select Content> <Select Viewport> <Select Item value=\"france\"> <Select ItemText>France</Select ItemText> <Select ItemIndicator>…</Select ItemIndicator> </Select Item> <SelectItem value=\"united-kingdom\">\n<Select ItemText>United Kingdom</Select ItemText>\n<Select ItemIndicator>…</Select ItemIndicator>\n</Select Item>\n<Select Item value=\"spain\">\n<Select ItemText>Spain</Select ItemText>\n<Select ItemIndicator>…</Select ItemIndicator>\n</Select Item>\n</Select Viewport>\n</Select Content>\n</Select Portal>\n</Select Root>\n);\n};\nWith custom scrollbar\nThe native scrollbar is hidden by default as we recommend using the ScrollUpButton and ScrollDownButton parts for the best UX If you do not want to use these parts, compose your select with our Scroll Area primitive // index jsx\nimport { Select, ScrollArea } from \"radix-ui\";\nimport \" /styles css\";\nexport default () => (\n<Select Root>\n<Select Trigger>…</Select Trigger>\n<Select Portal>\n<Select Content>\n<ScrollArea Root className=\"ScrollAreaRoot\" type=\"auto\">\n<Select Viewport asChild>\n<ScrollArea Viewport className=\"ScrollAreaViewport\">\n<StyledItem>…</StyledItem>\n<StyledItem>…</StyledItem>\n<StyledItem>…</StyledItem>\n</ScrollArea Viewport>\n</Select Viewport>\n<ScrollArea Scrollbar\nclassName=\"ScrollAreaScrollbar\"\norientation=\"vertical\"\n>\n<ScrollArea Thumb className=\"ScrollAreaThumb\" />\n</ScrollArea Scrollbar>\n</ScrollArea Root>\n</Select Content>\n</Select Portal>\n</Select Root>\n);\n/* styles css */ ScrollAreaRoot {\nwidth: 100%;\nheight: 100%;\n} ScrollAreaViewport {\nwidth: 100%;\nheight: 100%;\n}",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1005356,
      "relative_path": "documentation\\radix\\_primitives_docs_components_select.html",
      "source_type": "documentation"
    },
    "token_count": 499,
    "chunk_index": 9,
    "total_chunks": 12
  },
  {
    "id": "ad0cba6142a138c37c847ae9c88c66ed",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_select.html",
    "source_type": "documentation",
    "title": "Select – Radix Primitives",
    "content": "} from \"radix-ui\"; import \" /styles css\"; export default () => ( <Select Root> <Select Trigger>…</Select Trigger> <Select Portal> <Select Content> <ScrollArea Root className=\"ScrollAreaRoot\" type=\"auto\"> <Select Viewport asChild> <ScrollArea Viewport className=\"ScrollAreaViewport\"> <StyledItem>…</StyledItem> <StyledItem>…</StyledItem> <StyledItem>…</StyledItem> </ScrollArea Viewport> </Select Viewport> <ScrollArea Scrollbar className=\"ScrollAreaScrollbar\" orientation=\"vertical\" > <ScrollArea Thumb className=\"ScrollAreaThumb\" /> </ScrollArea Scrollbar> </ScrollArea Root> </Select Content> </Select Portal> </Select Root> ); /* styles css */ ScrollAreaRoot { width: 100%; height: 100%; } ScrollAreaViewport { width: 100%; height: 100%; }ScrollAreaScrollbar {\nwidth: 4px;\npadding: 5px 2px;\n} ScrollAreaThumb {\nbackground: rgba(0, 0, 0, 0 3);\nborder-radius: 3px;\n}\nAccessibility\nAdheres to the ListBox WAI-ARIA design pattern See the W3C Select-Only Combobox example for more information Keyboard Interactions\nKeyDescriptionSpaceWhen focus is on Select Trigger, opens the select and focuses the selected item When focus is on an item, selects the focused item EnterWhen focus is on Select Trigger, opens the select and focuses the first item When focus is on an item, selects the focused item ArrowDownWhen focus is on Select Trigger, opens the select When focus is on an item, moves focus to the next item ArrowUpWhen focus is on Select Trigger, opens the select When focus is on an item, moves focus to the previous item EscCloses the select and moves focus to Select Trigger Labelling\nUse our Label component in order to offer a visual and accessible label for the select import { Select, Label } from \"radix-ui\";\nexport default () => (\n<>\n<Label>\nCountry\n<Select Root>…</Select Root>\n</Label>\n{/* or */}\n<Label htmlFor=\"country\">Country</Label>\n<Select Root>\n<Select Trigger id=\"country\">…</Select Trigger>\n<Select Portal>\n<Select Content>…</Select Content>\n</Select Portal>\n</Select",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1005356,
      "relative_path": "documentation\\radix\\_primitives_docs_components_select.html",
      "source_type": "documentation"
    },
    "token_count": 490,
    "chunk_index": 10,
    "total_chunks": 12
  },
  {
    "id": "3bce4f5c53895610ac688b9b47090d3e",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_select.html",
    "source_type": "documentation",
    "title": "Select – Radix Primitives",
    "content": "When focus is on an item, moves focus to the previous item EscCloses the select and moves focus to Select Trigger Labelling Use our Label component in order to offer a visual and accessible label for the select import { Select, Label } from \"radix-ui\"; export default () => ( <> <Label> Country <Select Root>…</Select Root> </Label> {/* or */} <Label htmlFor=\"country\">Country</Label> <Select Root> <Select Trigger id=\"country\">…</Select Trigger> <Select Portal> <Select Content>…</Select Content> </Select Portal> </SelectRoot>\n</>\n);\nCustom APIs\nCreate your own API by abstracting the primitive parts into your own component Abstract down to Select and SelectItem\nThis example abstracts most of the parts Usage\nimport { Select, SelectItem } from \" /your-select\";\nexport default () => (\n<Select defaultValue=\"2\">\n<SelectItem value=\"1\">Item 1</SelectItem>\n<SelectItem value=\"2\">Item 2</SelectItem>\n<SelectItem value=\"3\">Item 3</SelectItem>\n</Select>\n);\nImplementation\n// your-select jsx\nimport * as React from \"react\";\nimport { Select as SelectPrimitive } from \"radix-ui\";\nimport {\nCheckIcon,\nChevronDownIcon,\nChevronUpIcon,\n} from \"@radix-ui/react-icons\";\nexport const Select = React forwardRef(\n({ children, props }, forwardedRef) => {\nreturn (\n<SelectPrimitive Root { props}>\n<SelectPrimitive Trigger ref={forwardedRef}>\n<SelectPrimitive Value />\n<SelectPrimitive Icon>\n<ChevronDownIcon />\n</SelectPrimitive Icon>\n</SelectPrimitive Trigger>\n<SelectPrimitive Portal>\n<SelectPrimitive Content>\n<SelectPrimitive ScrollUpButton>\n<ChevronUpIcon />\n</SelectPrimitive ScrollUpButton>\n<SelectPrimitive Viewport>{children}</SelectPrimitive Viewport>\n<SelectPrimitive ScrollDownButton>\n<ChevronDownIcon />\n</SelectPrimitive ScrollDownButton>\n</SelectPrimitive Content>\n</SelectPrimitive Portal>\n</SelectPrimitive Root>\n);\n},\n);\nexport const SelectItem = React forwardRef(\n({ children, props }, forwardedRef) => {\nreturn (\n<SelectPrimitive Item { props} ref={forwardedRef}>\n<SelectPrimitive ItemText>{children}</SelectPrimitive ItemText>\n<SelectPrimitive ItemIndicator>\n<CheckIcon />\n</SelectPrimitive ItemIndicator>\n</SelectPrimitive Item>\n);\n},\n);\nQuick navPreviousScroll AreaNextSeparatorEdit this page on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1005356,
      "relative_path": "documentation\\radix\\_primitives_docs_components_select.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 11,
    "total_chunks": 12
  },
  {
    "id": "07cf65517b1d09aed7e1847e9d5d6ab8",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_guides_animation.html",
    "source_type": "documentation",
    "title": "Animation – Radix Primitives",
    "content": "Animation – Radix PrimitivesRadix HomepageMade by WorkOSRadix HomepageMade by WorkOSThemesThemesPrimitivesPrimitivesIconsIconsColorsColorsDocumentationCase studiesBlogSearch/OverviewIntroductionGetting startedAccessibilityReleasesGuidesStylingAnimationCompositionServer-side renderingComponentsAccordionAlert DialogAspect RatioAvatarCheckboxCollapsibleContext MenuDialogDropdown MenuFormPreviewHover CardLabelMenubarNavigation MenuOne-Time Password FieldPreviewPassword Toggle FieldPreviewPopoverProgressRadio GroupScroll AreaSelectSeparatorSliderSwitchTabsToastToggleToggle GroupToolbarTooltipUtilitiesAccessible IconDirection ProviderPortalSlotVisually HiddenGuidesAnimation\nAnimate Radix Primitives with CSS keyframes or the JavaScript animation\nlibrary of your choice Adding animation to Radix Primitives should feel similar to any other component, but there are some caveats noted here in regards to exiting animations with JS animation libraries Animating with CSS animation\nThe simplest way to animate Primitives is with CSS You can use CSS animation to animate both mount and unmount phases The latter is possible because the Radix Primitives will suspend unmount while your animation plays out @keyframes fadeIn {\nfrom {\nopacity: 0;\n}\nto {\nopacity: 1;\n}\n}\n@keyframes fadeOut {\nfrom {\nopacity: 1;\n}\nto {\nopacity: 0;\n}\n} DialogOverlay[data-state=\"open\"], DialogContent[data-state=\"open\"] {\nanimation: fadeIn 300ms ease-out;\n} DialogOverlay[data-state=\"closed\"], DialogContent[data-state=\"closed\"] {\nanimation: fadeOut 300ms ease-in;\n}\nDelegating unmounting for JavaScript Animation\nWhen many stateful Primitives are hidden from view, they are actually removed from the React Tree, and their elements removed from the DOM JavaScript animation libraries need control of the unmounting phase, so we provide the forceMount prop on many components to allow consumers to delegate the mounting and unmounting of children based on the animation state determined by those libraries For example, if you want to use React Spring to animate a Dialog, you would do so by conditionally rendering the dialog Overlay and Content parts based on the animation state from one of its hooks like useTransition:\nimport { Dialog } from \"radix-ui\";\nimport { useTransition, animated, config } from \"react-spring\";\nfunction Example() {\nconst [open, setOpen] = React",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 117785,
      "relative_path": "documentation\\radix\\_primitives_docs_guides_animation.html",
      "source_type": "documentation"
    },
    "token_count": 472,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "6cba40a55ef3c59e64178da111343122",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_guides_animation.html",
    "source_type": "documentation",
    "title": "Animation – Radix Primitives",
    "content": "delegate the mounting and unmounting of children based on the animation state determined by those libraries For example, if you want to use React Spring to animate a Dialog, you would do so by conditionally rendering the dialog Overlay and Content parts based on the animation state from one of its hooks like useTransition: import { Dialog } from \"radix-ui\"; import { useTransition, animated, config } from \"react-spring\"; function Example() { const [open, setOpen] = ReactuseState(false);\nconst transitions = useTransition(open, {\nfrom: { opacity: 0, y: -10 },\nenter: { opacity: 1, y: 0 },\nleave: { opacity: 0, y: 10 },\nconfig: config stiff,\n});\nreturn (\n<Dialog Root open={open} onOpenChange={setOpen}>\n<Dialog Trigger>Open Dialog</Dialog Trigger>\n{transitions((styles, item) =>\nitem (\n<>\n<Dialog Overlay forceMount asChild>\n<animated div\nstyle={{\nopacity: styles opacity,\n}}\n/>\n</Dialog Overlay>\n<Dialog Content forceMount asChild>\n<animated div style={styles}>\n<h1>Hello from inside the Dialog </h1>\n<Dialog Close>close</Dialog Close>\n</animated div>\n</Dialog Content>\n</>\n) : null,\n)}\n</Dialog Root>\n);\n}\nQuick navPreviousStylingNextCompositionEdit this page on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 117785,
      "relative_path": "documentation\\radix\\_primitives_docs_guides_animation.html",
      "source_type": "documentation"
    },
    "token_count": 285,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "abdbc6bc976c48c7af8095391e7b6a67",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_guides_server-side-rendering.html",
    "source_type": "documentation",
    "title": "Server-side rendering – Radix Primitives",
    "content": "Server-side rendering – Radix PrimitivesRadix HomepageMade by WorkOSRadix HomepageMade by WorkOSThemesThemesPrimitivesPrimitivesIconsIconsColorsColorsDocumentationCase studiesBlogSearch/OverviewIntroductionGetting startedAccessibilityReleasesGuidesStylingAnimationCompositionServer-side renderingComponentsAccordionAlert DialogAspect RatioAvatarCheckboxCollapsibleContext MenuDialogDropdown MenuFormPreviewHover CardLabelMenubarNavigation MenuOne-Time Password FieldPreviewPassword Toggle FieldPreviewPopoverProgressRadio GroupScroll AreaSelectSeparatorSliderSwitchTabsToastToggleToggle GroupToolbarTooltipUtilitiesAccessible IconDirection ProviderPortalSlotVisually HiddenGuidesServer-side rendering\nRadix Primitives can be rendered on the server. However, Primitives in React\nversions less than 18 rely on hydration for ids.\nOverview\nServer-side rendering or SSR, is a technique used to render components to HTML on the server, as opposed to rendering them only on the client.\nStatic rendering is another similar approach. Instead it pre-renders pages to HTML at build time rather than on each request.\nYou should be able to use all of our primitives with both approaches, for example with Next.js, Remix, or Gatsby.\nGotcha\nPrimitives in React versions less than 18 rely on hydration for ids (used in aria attributes) to avoid server/client mismatch errors.\nIn other words, the equivalent of Time to Interactive for screen reader users will depend on the download speed of the JS bundle. If you'd like to generate ids server-side to improve this experience, we suggest upgrading to React 18.Quick navPreviousCompositionNextAccordionEdit this page on GitHub.",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 69567,
      "relative_path": "documentation\\radix\\_primitives_docs_guides_server-side-rendering.html",
      "source_type": "documentation"
    },
    "token_count": 321,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d109ec84a2cb98bd24e2b8f80aca2928",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_toolbar.html",
    "source_type": "documentation",
    "title": "Toolbar – Radix Primitives",
    "content": "Toolbar – Radix PrimitivesRadix HomepageMade by WorkOSRadix HomepageMade by WorkOSThemesThemesPrimitivesPrimitivesIconsIconsColorsColorsDocumentationCase studiesBlogSearch/OverviewIntroductionGetting startedAccessibilityReleasesGuidesStylingAnimationCompositionServer-side renderingComponentsAccordionAlert DialogAspect RatioAvatarCheckboxCollapsibleContext MenuDialogDropdown MenuFormPreviewHover CardLabelMenubarNavigation MenuOne-Time Password FieldPreviewPassword Toggle FieldPreviewPopoverProgressRadio GroupScroll AreaSelectSeparatorSliderSwitchTabsToastToggleToggle GroupToolbarTooltipUtilitiesAccessible IconDirection ProviderPortalSlotVisually HiddenComponentsToolbar\nA container for grouping a set of controls, such as buttons, toggle groups or\ndropdown menus Edited 2 hours agoShare\nindex jsxindex jsxstyles cssstyles cssimport * as React from \"react\";\nimport { Toolbar } from \"radix-ui\";\nimport {\nStrikethroughIcon,\nTextAlignLeftIcon,\nTextAlignCenterIcon,\nTextAlignRightIcon,\nFontBoldIcon,\nFontItalicIcon,\n} from \"@radix-ui/react-icons\";\nimport \" /styles css\";\nconst ToolbarDemo = () => (\n<Toolbar Root className=\"ToolbarRoot\" aria-label=\"Formatting options\">\n<Toolbar ToggleGroup type=\"multiple\" aria-label=\"Text formatting\">\n<Toolbar ToggleItem\nclassName=\"ToolbarToggleItem\"\nvalue=\"bold\"\naria-label=\"Bold\"\n>\n<FontBoldIcon />\n</Toolbar ToggleItem>\n<Toolbar ToggleItem\nclassName=\"ToolbarToggleItem\"\nvalue=\"italic\"\naria-label=\"Italic\"\n>\n<FontItalicIcon />\n</Toolbar ToggleItem>\n<Toolbar ToggleItem\nclassName=\"ToolbarToggleItem\"\nvalue=\"strikethrough\"\naria-label=\"Strike through\"\n>\n<StrikethroughIcon />\n</Toolbar ToggleItem>\n</Toolbar ToggleGroup>\n<Toolbar Separator className=\"ToolbarSeparator\" />\n<Toolbar ToggleGroup\ntype=\"single\"\ndefaultValue=\"center\"\naria-label=\"Text alignment\"\n>\n<Toolbar ToggleItem\nclassName=\"ToolbarToggleItem\"\nvalue=\"left\"\naria-label=\"Left aligned\"\n>\n<TextAlignLeftIcon />\n</Toolbar ToggleItem>\n<Toolbar ToggleItem\nclassName=\"ToolbarToggleItem\"\nvalue=\"center\"\naria-label=\"Center aligned\"\n>\n<TextAlignCenterIcon />\n</Toolbar ToggleItem>\n<Toolbar ToggleItem\nclassName=\"ToolbarToggleItem\"\nvalue=\"right\"\naria-label=\"Right aligned\"\n>\n<TextAlignRightIcon />\n</Toolbar ToggleItem>\n</Toolbar ToggleGroup>\n<Toolbar Separator className=\"ToolbarSeparator\" />\n<Toolbar",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 443514,
      "relative_path": "documentation\\radix\\_primitives_docs_components_toolbar.html",
      "source_type": "documentation"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "5ece253737e8bf98064422d37ea313ba",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_toolbar.html",
    "source_type": "documentation",
    "title": "Toolbar – Radix Primitives",
    "content": "</Toolbar ToggleItem> <Toolbar ToggleItem className=\"ToolbarToggleItem\" value=\"italic\" aria-label=\"Italic\" > <FontItalicIcon /> </Toolbar ToggleItem> <Toolbar ToggleItem className=\"ToolbarToggleItem\" value=\"strikethrough\" aria-label=\"Strike through\" > <StrikethroughIcon /> </Toolbar ToggleItem> </Toolbar ToggleGroup> <Toolbar Separator className=\"ToolbarSeparator\" /> <Toolbar ToggleGroup type=\"single\" defaultValue=\"center\" aria-label=\"Text alignment\" > <Toolbar ToggleItem className=\"ToolbarToggleItem\" value=\"left\" aria-label=\"Left aligned\" > <TextAlignLeftIcon /> </Toolbar ToggleItem> <Toolbar ToggleItem className=\"ToolbarToggleItem\" value=\"center\" aria-label=\"Center aligned\" > <TextAlignCenterIcon /> </Toolbar ToggleItem> <Toolbar ToggleItem className=\"ToolbarToggleItem\" value=\"right\" aria-label=\"Right aligned\" > <TextAlignRightIcon /> </Toolbar ToggleItem> </Toolbar ToggleGroup> <Toolbar Separator className=\"ToolbarSeparator\" /> <ToolbarLink\nclassName=\"ToolbarLink\"\nhref=\"#\"\ntarget=\"_blank\"\nstyle={{ marginRight: 10 }}\n>\nEdited 2 hours ago\n</Toolbar Link>\n<Toolbar Button className=\"ToolbarButton\" style={{ marginLeft: \"auto\" }}>\nShare\n</Toolbar Button>\n</Toolbar Root>\n);\nexport default ToolbarDemo;\nExpand code\nFeaturesFull keyboard navigation Component Reference LinksVersion: 1 1 10Size: 10 48 kBView sourceReport an issueARIA design pattern\nInstallation\nInstall the component from your command line npm install @radix-ui/react-toolbar\nAnatomy\nImport the component import { Toolbar } from \"radix-ui\";\nexport default () => (\n<Toolbar Root>\n<Toolbar Button />\n<Toolbar Separator />\n<Toolbar Link />\n<Toolbar ToggleGroup>\n<Toolbar ToggleItem />\n</Toolbar ToggleGroup>\n</Toolbar Root>\n);\nAPI Reference\nRoot\nContains all the toolbar component parts PropTypeDefaultasChildProp descriptionbooleanfalseorientationProp descriptionenumSee full type\"horizontal\"dirProp descriptionenumSee full typeNo default valueloopProp descriptionbooleantrue\nData attributeValues[data-orientation]\"vertical\"  | \"horizontal\"\nButton\nA button item PropTypeDefaultasChildProp descriptionbooleanfalse\nData attributeValues[data-orientation]\"vertical\"  | \"horizontal\"\nLink\nA link item",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 443514,
      "relative_path": "documentation\\radix\\_primitives_docs_components_toolbar.html",
      "source_type": "documentation"
    },
    "token_count": 485,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "b79ee71d4c13ee56b7306ced7c6118cd",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_toolbar.html",
    "source_type": "documentation",
    "title": "Toolbar – Radix Primitives",
    "content": "install @radix-ui/react-toolbar Anatomy Import the component import { Toolbar } from \"radix-ui\"; export default () => ( <Toolbar Root> <Toolbar Button /> <Toolbar Separator /> <Toolbar Link /> <Toolbar ToggleGroup> <Toolbar ToggleItem /> </Toolbar ToggleGroup> </Toolbar Root> ); API Reference Root Contains all the toolbar component parts PropTypeDefaultasChildProp descriptionbooleanfalseorientationProp descriptionenumSee full type\"horizontal\"dirProp descriptionenumSee full typeNo default valueloopProp descriptionbooleantrue Data attributeValues[data-orientation]\"vertical\" | \"horizontal\" Button A button item PropTypeDefaultasChildProp descriptionbooleanfalse Data attributeValues[data-orientation]\"vertical\" | \"horizontal\" Link A link itemPropTypeDefaultasChildProp descriptionbooleanfalse\nToggleGroup\nA set of two-state buttons that can be toggled on or off PropTypeDefaultasChildProp descriptionbooleanfalsetype*Prop descriptionenumSee full typeNo default valuevalueProp descriptionstringNo default valuedefaultValueProp descriptionstringNo default valueonValueChangeProp descriptionfunctionSee full typeNo default valuevalueProp descriptionstring[][]defaultValueProp descriptionstring[][]onValueChangeProp descriptionfunctionSee full typeNo default valuedisabledProp descriptionbooleanfalse\nData attributeValues[data-orientation]\"vertical\"  | \"horizontal\"\nToggleItem\nAn item in the group PropTypeDefaultasChildProp descriptionbooleanfalsevalue*Prop descriptionstringNo default valuedisabledProp descriptionbooleanNo default value\nData attributeValues[data-state]\"on\"  | \"off\" [data-disabled]Present when disabled[data-orientation]\"vertical\"  | \"horizontal\"\nSeparator\nUsed to visually separate items in the toolbar PropTypeDefaultasChildProp descriptionbooleanfalse\nData attributeValues[data-orientation]\"vertical\"  | \"horizontal\"\nExamples\nUse with other primitives\nAll our primitives which expose a Trigger part, such as Dialog, AlertDialog, Popover, DropdownMenu can be composed within a toolbar by using the asChild prop Here is an example using our DropdownMenu primitive import { Toolbar, DropdownMenu } from \"radix-ui\";\nexport default () => (\n<Toolbar Root>\n<Toolbar Button>Action 1</Toolbar Button>\n<Toolbar Separator />\n<DropdownMenu Root>\n<Toolbar Button asChild>\n<DropdownMenu Trigger>Trigger</DropdownMenu Trigger>\n</Toolbar Button>\n<DropdownMenu Content>…</DropdownMenu Content>\n</DropdownMenu Root>\n</Toolbar",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 443514,
      "relative_path": "documentation\\radix\\_primitives_docs_components_toolbar.html",
      "source_type": "documentation"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "19498a86daf6abf041c3b7e5479b2265",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_toolbar.html",
    "source_type": "documentation",
    "title": "Toolbar – Radix Primitives",
    "content": "\"horizontal\" Examples Use with other primitives All our primitives which expose a Trigger part, such as Dialog, AlertDialog, Popover, DropdownMenu can be composed within a toolbar by using the asChild prop Here is an example using our DropdownMenu primitive import { Toolbar, DropdownMenu } from \"radix-ui\"; export default () => ( <Toolbar Root> <Toolbar Button>Action 1</Toolbar Button> <Toolbar Separator /> <DropdownMenu Root> <Toolbar Button asChild> <DropdownMenu Trigger>Trigger</DropdownMenu Trigger> </Toolbar Button> <DropdownMenu Content>…</DropdownMenu Content> </DropdownMenu Root> </ToolbarRoot>\n);\nAccessibility\nUses roving tabindex to manage focus movement among items Keyboard Interactions\nKeyDescriptionTabMoves focus to the first item in the group SpaceActivates/deactivates the item EnterActivates/deactivates the item ArrowDownMoves focus to the next item depending on orientation ArrowRightMoves focus to the next item depending on orientation ArrowUpMoves focus to the previous item depending on orientation ArrowLeftMoves focus to the previous item depending on orientation HomeMoves focus to the first item EndMoves focus to the last item Quick navPreviousToggle GroupNextTooltipEdit this page on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 443514,
      "relative_path": "documentation\\radix\\_primitives_docs_components_toolbar.html",
      "source_type": "documentation"
    },
    "token_count": 246,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "0b07de2f2faca426c2ff3cad4c3617eb",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_guides_composition.html",
    "source_type": "documentation",
    "title": "Composition – Radix Primitives",
    "content": "Composition – Radix PrimitivesRadix HomepageMade by WorkOSRadix HomepageMade by WorkOSThemesThemesPrimitivesPrimitivesIconsIconsColorsColorsDocumentationCase studiesBlogSearch/OverviewIntroductionGetting startedAccessibilityReleasesGuidesStylingAnimationCompositionServer-side renderingComponentsAccordionAlert DialogAspect RatioAvatarCheckboxCollapsibleContext MenuDialogDropdown MenuFormPreviewHover CardLabelMenubarNavigation MenuOne-Time Password FieldPreviewPassword Toggle FieldPreviewPopoverProgressRadio GroupScroll AreaSelectSeparatorSliderSwitchTabsToastToggleToggle GroupToolbarTooltipUtilitiesAccessible IconDirection ProviderPortalSlotVisually HiddenGuidesComposition\nUse the asChild prop to compose Radix's functionality onto alternative\nelement types or your own React components All Radix primitive parts that render a DOM element accept an asChild prop When asChild is set to true, Radix will not render a default DOM element, instead cloning the part's child and passing it the props and behavior required to make it functional Changing the element type\nIn the majority of cases you shouldn’t need to modify the element type as Radix has been designed to provide the most appropriate defaults However, there are cases where it is helpful to do so A good example is with Tooltip Trigger By default this part is rendered as a button, though you may want to add a tooltip to a link (a tag) as well Let's see how you can achieve this using asChild:\nimport * as React from \"react\";\nimport { Tooltip } from \"radix-ui\";\nexport default () => (\n<Tooltip Root>\n<Tooltip Trigger asChild>\n<a href=\"https://www radix-ui com/\">Radix UI</a>\n</Tooltip Trigger>\n<Tooltip Portal>…</Tooltip Portal>\n</Tooltip Root>\n);\nIf you do decide to change the underlying element type, it is your responsibility to ensure it remains accessible and functional In the case of Tooltip Trigger for example, it must be a focusable element that can respond to pointer and keyboard events If you were to switch it to a div, it would no longer be accessible In reality, you will rarely modify the underlying DOM element like we've seen above Instead it's more common to use your own React components This is especially true for most Trigger parts, as you usually want to compose the functionality with the custom buttons and links in your design system Composing with your own React components\nThis works exactly the same as above, you pass asChild to the part and then wrap your own component with it",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 134276,
      "relative_path": "documentation\\radix\\_primitives_docs_guides_composition.html",
      "source_type": "documentation"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "23f88b721c76e165a40fb9d26004dc42",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_guides_composition.html",
    "source_type": "documentation",
    "title": "Composition – Radix Primitives",
    "content": "reality, you will rarely modify the underlying DOM element like we've seen above Instead it's more common to use your own React components This is especially true for most Trigger parts, as you usually want to compose the functionality with the custom buttons and links in your design system Composing with your own React components This works exactly the same as above, you pass asChild to the part and then wrap your own component with itHowever, there are a few gotchas to be aware of Your component must spread props\nWhen Radix clones your component, it will pass its own props and event handlers to make it functional and accessible If your component doesn't support those props, it will break This is done by spreading all of the props onto the underlying DOM node // before\nconst MyButton = () => <button />;\n// after\nconst MyButton = (props) => <button { props} />;\nWe recommend always doing this so that you are not concerned with implementation details (ie which props/events to accept) We find this is good practice for \"leaf\" components in general Similarly to when changing the element type directly, it is your responsibility to ensure the element type rendered by your custom component remains accessible and functional Your component must forward ref\nAdditionally, Radix will sometimes need to attach a ref to your component (for example to measure its size) If your component doesn't accept a ref, then it will break This is done using React forwardRef (read more on react dev) // before\nconst MyButton = (props) => <button { props} />;\n// after\nconst MyButton = React forwardRef((props, forwardedRef) => (\n<button { props} ref={forwardedRef} />\n));\nWhilst this isn't necessary for all parts, we recommend always doing it so that you are not concerned with implementation details This is also generally good practice anyway for leaf components Composing multiple primitives\nasChild can be used as deeply as you need to This means it is a great way to compose multiple primitive's behavior together Here is an example of how you can compose Tooltip Trigger and Dialog Trigger together with your own button:\nimport * as React from \"react\";\nimport { Dialog, Tooltip } from \"radix-ui\";\nconst MyButton = React forwardRef((props, forwardedRef) => (\n<button { props} ref={forwardedRef} />\n));\nexport default () => {\nreturn (\n<Dialog Root>\n<Tooltip Root>\n<Tooltip Trigger asChild>\n<Dialog",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 134276,
      "relative_path": "documentation\\radix\\_primitives_docs_guides_composition.html",
      "source_type": "documentation"
    },
    "token_count": 496,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "6c6573c7bd5fcd6e6b2dc683758af8e2",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_guides_composition.html",
    "source_type": "documentation",
    "title": "Composition – Radix Primitives",
    "content": "need to This means it is a great way to compose multiple primitive's behavior together Here is an example of how you can compose Tooltip Trigger and Dialog Trigger together with your own button: import * as React from \"react\"; import { Dialog, Tooltip } from \"radix-ui\"; const MyButton = React forwardRef((props, forwardedRef) => ( <button { props} ref={forwardedRef} /> )); export default () => { return ( <Dialog Root> <Tooltip Root> <Tooltip Trigger asChild> <DialogTrigger asChild>\n<MyButton>Open dialog</MyButton>\n</Dialog Trigger>\n</Tooltip Trigger>\n<Tooltip Portal>…</Tooltip Portal>\n</Tooltip Root>\n<Dialog Portal> </Dialog Portal>\n</Dialog Root>\n);\n};\nQuick navPreviousAnimationNextServer-side renderingEdit this page on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 134276,
      "relative_path": "documentation\\radix\\_primitives_docs_guides_composition.html",
      "source_type": "documentation"
    },
    "token_count": 168,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "22f0ffed37434340784f7437d1737512",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_overview_accessibility.html",
    "source_type": "documentation",
    "title": "Accessibility – Radix Primitives",
    "content": "Accessibility – Radix PrimitivesRadix HomepageMade by WorkOSRadix HomepageMade by WorkOSThemesThemesPrimitivesPrimitivesIconsIconsColorsColorsDocumentationCase studiesBlogSearch/OverviewIntroductionGetting startedAccessibilityReleasesGuidesStylingAnimationCompositionServer-side renderingComponentsAccordionAlert DialogAspect RatioAvatarCheckboxCollapsibleContext MenuDialogDropdown MenuFormPreviewHover CardLabelMenubarNavigation MenuOne-Time Password FieldPreviewPassword Toggle FieldPreviewPopoverProgressRadio GroupScroll AreaSelectSeparatorSliderSwitchTabsToastToggleToggle GroupToolbarTooltipUtilitiesAccessible IconDirection ProviderPortalSlotVisually HiddenOverviewAccessibility\nRadix Primitives follow the WAI-ARIA authoring practices guidelines and are\ntested in a wide selection of modern browsers and commonly used assistive\ntechnologies We take care of many of the difficult implementation details related to accessibility, including aria and role attributes, focus management, and keyboard navigation That means that users should be able to use our components as-is in most contexts and rely on functionality to follow the expected accessibility design patterns WAI-ARIA\nWAI-ARIA, published and maintained by the W3C, specifies the semantics for many common UI patterns that show up in Radix Primitives This is designed to provide meaning for controls that aren't built using elements provided by the browser For example, if you use a div instead of a button element to create a button, there are attributes you need to add to the div in order to convey that it's a button for screen readers or voice recognition tools In addition to semantics, there are behaviors that are expected from different types of components A button element is going to respond to certain interactions in ways that a div will not, so it's up to the developer to reimplement those interactions with JavaScript The WAI-ARIA authoring practices provide additional guidance for implementing behaviors for various controls that come with Radix Primitives Accessible Labels\nWith many built-in form controls, the native HTML label element is designed to provide semantic meaning and context for corresponding input elements For non-form control elements, or for custom controls like those provided by Radix Primitives, WAI-ARIA provides a specification for how to provide accessible names and descriptions to those controls Where possible, Radix Primitives include abstractions to make labelling our controls simple The Label primitive is designed to work with many of our controls Ultimately it's up to you to provide those labels so that users have the proper context when navigating your application",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 82337,
      "relative_path": "documentation\\radix\\_primitives_docs_overview_accessibility.html",
      "source_type": "documentation"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "875b141a189216480d3668d75db690b8",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_overview_accessibility.html",
    "source_type": "documentation",
    "title": "Accessibility – Radix Primitives",
    "content": "corresponding input elements For non-form control elements, or for custom controls like those provided by Radix Primitives, WAI-ARIA provides a specification for how to provide accessible names and descriptions to those controls Where possible, Radix Primitives include abstractions to make labelling our controls simple The Label primitive is designed to work with many of our controls Ultimately it's up to you to provide those labels so that users have the proper context when navigating your applicationKeyboard Navigation\nMany complex components, like Tabs and Dialog, come with expectations from users on how to interact with their content using a keyboard or other non-mouse input modalities Radix Primitives provide basic keyboard support in accordance with the WAI-ARIA authoring practices Focus Management\nProper keyboard navigation and good labelling often go hand-in-hand with managing focus When a user interacts with an element and something changes as a result, it's often helpful to move focus with the interaction so that the next tab stop is logical depending on the new context of the app And for screen reader users, moving focus often results in an announcement to convey this new context, which relies on proper labelling In many Radix Primitives, we move focus based on the interactions a user normally takes in a given component For example, in AlertDialog, when the modal is opened, focus is programmatically moved to a Cancel button element to anticipate a response to the prompt Quick navPreviousGetting startedNextReleasesEdit this page on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 82337,
      "relative_path": "documentation\\radix\\_primitives_docs_overview_accessibility.html",
      "source_type": "documentation"
    },
    "token_count": 296,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "2eb4aa86e31877aff787ff5120ad771c",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_guides_styling.html",
    "source_type": "documentation",
    "title": "Styling – Radix Primitives",
    "content": "Styling – Radix PrimitivesRadix HomepageMade by WorkOSRadix HomepageMade by WorkOSThemesThemesPrimitivesPrimitivesIconsIconsColorsColorsDocumentationCase studiesBlogSearch/OverviewIntroductionGetting startedAccessibilityReleasesGuidesStylingAnimationCompositionServer-side renderingComponentsAccordionAlert DialogAspect RatioAvatarCheckboxCollapsibleContext MenuDialogDropdown MenuFormPreviewHover CardLabelMenubarNavigation MenuOne-Time Password FieldPreviewPassword Toggle FieldPreviewPopoverProgressRadio GroupScroll AreaSelectSeparatorSliderSwitchTabsToastToggleToggle GroupToolbarTooltipUtilitiesAccessible IconDirection ProviderPortalSlotVisually HiddenGuidesStyling\nRadix Primitives are unstyled—and compatible with any styling solution—giving\nyou complete control over styling Styling overview\nFunctional styles\nYou are in control of all aspects of styling, including functional styles For example—by default—a Dialog Overlay won't cover the entire viewport You're responsible for adding those styles, plus any presentation styles Classes\nAll components and their parts accept a className prop This class will be passed through to the DOM element You can use it in CSS as expected Data attributes\nWhen components are stateful, their state will be exposed in a data-state attribute For example, when an Accordion Item is opened, it includes a data-state=\"open\" attribute Styling with CSS\nStyling a part\nYou can style a component part by targeting the className that you provide import * as React from \"react\";\nimport { Accordion } from \"radix-ui\";\nimport \" /styles css\";\nconst AccordionDemo = () => (\n<Accordion Root>\n<Accordion Item className=\"AccordionItem\" value=\"item-1\" />\n{/* … */}\n</Accordion Root>\n);\nexport default AccordionDemo;\nStyling a state\nYou can style a component state by targeting its data-state attribute AccordionItem {\nborder-bottom: 1px solid gainsboro;\n} AccordionItem[data-state=\"open\"] {\nborder-bottom-width: 2px;\n}\nStyling with CSS-in-JS\nThe examples below are using styled-components, but you can use any CSS-in-JS library of your choice Styling a part\nMost CSS-in-JS libraries export a function for passing components and their styles You can provide the Radix primitive component directly import * as React from \"react\";\nimport { Accordion } from \"radix-ui\";\nimport styled from \"styled-components\";\nconst StyledItem = styled(Accordion",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 149191,
      "relative_path": "documentation\\radix\\_primitives_docs_guides_styling.html",
      "source_type": "documentation"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "e989ae68b9a10c6bbeca4647b820bdbc",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_guides_styling.html",
    "source_type": "documentation",
    "title": "Styling – Radix Primitives",
    "content": "data-state attribute AccordionItem { border-bottom: 1px solid gainsboro; } AccordionItem[data-state=\"open\"] { border-bottom-width: 2px; } Styling with CSS-in-JS The examples below are using styled-components, but you can use any CSS-in-JS library of your choice Styling a part Most CSS-in-JS libraries export a function for passing components and their styles You can provide the Radix primitive component directly import * as React from \"react\"; import { Accordion } from \"radix-ui\"; import styled from \"styled-components\"; const StyledItem = styled(AccordionItem)`\nborder-bottom: 1px solid gainsboro;\n`;\nconst AccordionDemo = () => (\n<Accordion Root>\n<StyledItem value=\"item-1\" />\n{/* … */}\n</Accordion Root>\n);\nexport default AccordionDemo;\nStyling a state\nYou can style a component state by targeting its data-state attribute import { Accordion } from \"radix-ui\";\nimport styled from \"styled-components\";\nconst StyledItem = styled(Accordion Item)`\nborder-bottom: 1px solid gainsboro;\n&[data-state=\"open\"] {\nborder-bottom-width: 2px;\n}\n`;\nExtending a primitive\nExtending a primitive is done the same way you extend any React component import * as React from \"react\";\nimport { Accordion as AccordionPrimitive } from \"radix-ui\";\nconst AccordionItem = React forwardRef<\nReact ElementRef<typeof AccordionPrimitive Item>,\nReact ComponentPropsWithoutRef<typeof AccordionPrimitive Item>\n>((props, forwardedRef) => (\n<AccordionPrimitive Item { props} ref={forwardedRef} />\n));\nAccordionItem displayName = \"AccordionItem\";\nSummary\nRadix Primitives were designed to encapsulate accessibility concerns and other complex functionalities, while ensuring you retain complete control over styling For convenience, stateful components include a data-state attribute Quick navPreviousReleasesNextAnimationEdit this page on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 149191,
      "relative_path": "documentation\\radix\\_primitives_docs_guides_styling.html",
      "source_type": "documentation"
    },
    "token_count": 398,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "403e5c5bb1e6a7ef772cc3b991610b9f",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_tooltip.html",
    "source_type": "documentation",
    "title": "Tooltip – Radix Primitives",
    "content": "Tooltip – Radix PrimitivesRadix HomepageMade by WorkOSRadix HomepageMade by WorkOSThemesThemesPrimitivesPrimitivesIconsIconsColorsColorsDocumentationCase studiesBlogSearch/OverviewIntroductionGetting startedAccessibilityReleasesGuidesStylingAnimationCompositionServer-side renderingComponentsAccordionAlert DialogAspect RatioAvatarCheckboxCollapsibleContext MenuDialogDropdown MenuFormPreviewHover CardLabelMenubarNavigation MenuOne-Time Password FieldPreviewPassword Toggle FieldPreviewPopoverProgressRadio GroupScroll AreaSelectSeparatorSliderSwitchTabsToastToggleToggle GroupToolbarTooltipUtilitiesAccessible IconDirection ProviderPortalSlotVisually HiddenComponentsTooltip\nA popup that displays information related to an element when the element\nreceives keyboard focus or the mouse hovers over it index jsxindex jsxstyles cssstyles cssimport * as React from \"react\";\nimport { Tooltip } from \"radix-ui\";\nimport { PlusIcon } from \"@radix-ui/react-icons\";\nimport \" /styles css\";\nconst TooltipDemo = () => {\nreturn (\n<Tooltip Provider>\n<Tooltip Root>\n<Tooltip Trigger asChild>\n<button className=\"IconButton\">\n<PlusIcon />\n</button>\n</Tooltip Trigger>\n<Tooltip Portal>\n<Tooltip Content className=\"TooltipContent\" sideOffset={5}>\nAdd to library\n<Tooltip Arrow className=\"TooltipArrow\" />\n</Tooltip Content>\n</Tooltip Portal>\n</Tooltip Root>\n</Tooltip Provider>\n);\n};\nexport default TooltipDemo;\nExpand code\nFeaturesProvider to control display delay globally Opens when the trigger is focused or hovered Closes when the trigger is activated or when pressing escape Supports custom timings Component Reference LinksVersion: 1 2 7Size: 18 79 kBView sourceReport an issueARIA design pattern\nInstallation\nInstall the component from your command line npm install @radix-ui/react-tooltip\nAnatomy\nImport all parts and piece them together import { Tooltip } from \"radix-ui\";\nexport default () => (\n<Tooltip Provider>\n<Tooltip Root>\n<Tooltip Trigger />\n<Tooltip Portal>\n<Tooltip Content>\n<Tooltip Arrow />\n</Tooltip Content>\n</Tooltip Portal>\n</Tooltip Root>\n</Tooltip Provider>\n);\nAPI Reference\nProvider\nWraps your app to provide global functionality to your tooltips PropTypeDefaultdelayDurationProp descriptionnumber700skipDelayDurationProp descriptionnumber300disableHoverableContentProp descriptionbooleanNo default value\nRoot\nContains all the parts of a tooltip",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 547234,
      "relative_path": "documentation\\radix\\_primitives_docs_components_tooltip.html",
      "source_type": "documentation"
    },
    "token_count": 473,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "f58d391e31debe8aa6682637ec32dcc0",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_tooltip.html",
    "source_type": "documentation",
    "title": "Tooltip – Radix Primitives",
    "content": "from your command line npm install @radix-ui/react-tooltip Anatomy Import all parts and piece them together import { Tooltip } from \"radix-ui\"; export default () => ( <Tooltip Provider> <Tooltip Root> <Tooltip Trigger /> <Tooltip Portal> <Tooltip Content> <Tooltip Arrow /> </Tooltip Content> </Tooltip Portal> </Tooltip Root> </Tooltip Provider> ); API Reference Provider Wraps your app to provide global functionality to your tooltips PropTypeDefaultdelayDurationProp descriptionnumber700skipDelayDurationProp descriptionnumber300disableHoverableContentProp descriptionbooleanNo default value Root Contains all the parts of a tooltipPropTypeDefaultdefaultOpenProp descriptionbooleanNo default valueopenProp descriptionbooleanNo default valueonOpenChangeProp descriptionfunctionSee full typeNo default valuedelayDurationProp descriptionnumber700disableHoverableContentProp descriptionbooleanNo default value\nTrigger\nThe button that toggles the tooltip By default, the Tooltip Content will position itself against the trigger PropTypeDefaultasChildProp descriptionbooleanfalse\nData attributeValues[data-state]\"closed\"  | \"delayed-open\"  | \"instant-open\"\nPortal\nWhen used, portals the content part into the body PropTypeDefaultforceMountProp descriptionbooleanNo default valuecontainerProp descriptionHTMLElementdocument body\nContent\nThe component that pops out when the tooltip is open",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 547234,
      "relative_path": "documentation\\radix\\_primitives_docs_components_tooltip.html",
      "source_type": "documentation"
    },
    "token_count": 265,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "2fbc3cd30176c944fea399ed11e9e298",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_tooltip.html",
    "source_type": "documentation",
    "title": "Tooltip – Radix Primitives",
    "content": "Root Contains all the parts of a tooltipPropTypeDefaultdefaultOpenProp descriptionbooleanNo default valueopenProp descriptionbooleanNo default valueonOpenChangeProp descriptionfunctionSee full typeNo default valuedelayDurationProp descriptionnumber700disableHoverableContentProp descriptionbooleanNo default value Trigger The button that toggles the tooltip By default, the Tooltip Content will position itself against the trigger PropTypeDefaultasChildProp descriptionbooleanfalse Data attributeValues[data-state]\"closed\" | \"delayed-open\" | \"instant-open\" Portal When used, portals the content part into the body PropTypeDefaultforceMountProp descriptionbooleanNo default valuecontainerProp descriptionHTMLElementdocument body Content The component that pops out when the tooltip is openPropTypeDefaultasChildProp descriptionbooleanfalsearia-labelProp descriptionstringNo default valueonEscapeKeyDownProp descriptionfunctionSee full typeNo default valueonPointerDownOutsideProp descriptionfunctionSee full typeNo default valueforceMountProp descriptionbooleanNo default valuesideProp descriptionenumSee full type\"top\"sideOffsetProp descriptionnumber0alignProp descriptionenumSee full type\"center\"alignOffsetProp descriptionnumber0avoidCollisionsProp descriptionbooleantruecollisionBoundaryProp descriptionBoundarySee full type[]collisionPaddingProp descriptionnumber | PaddingSee full type0arrowPaddingProp descriptionnumber0stickyProp descriptionenumSee full type\"partial\"hideWhenDetachedProp descriptionbooleanfalse\nData attributeValues[data-state]\"closed\"  | \"delayed-open\"  | \"instant-open\" [data-side]\"left\"  | \"right\"  | \"bottom\"  | \"top\" [data-align]\"start\"  | \"end\"  | \"center\"\nCSS VariableDescription--radix-tooltip-content-transform-originThe transform-origin computed from the content and arrow positions/offsets--radix-tooltip-content-available-widthThe remaining width between the trigger and the boundary edge--radix-tooltip-content-available-heightThe remaining height between the trigger and the boundary edge--radix-tooltip-trigger-widthThe width of the trigger--radix-tooltip-trigger-heightThe height of the trigger\nArrow\nAn optional arrow element to render alongside the tooltip This can be used to help visually link the trigger with the Tooltip Content Must be rendered inside Tooltip Content PropTypeDefaultasChildProp descriptionbooleanfalsewidthProp descriptionnumber10heightProp descriptionnumber5\nExamples\nConfigure globally\nUse the Provider to control delayDuration and skipDelayDuration globally import { Tooltip } from \"radix-ui\";\nexport default () => (\n<Tooltip",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 547234,
      "relative_path": "documentation\\radix\\_primitives_docs_components_tooltip.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "cb68a0b8f00fb96ca82b1b5707d80806",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_tooltip.html",
    "source_type": "documentation",
    "title": "Tooltip – Radix Primitives",
    "content": "edge--radix-tooltip-content-available-heightThe remaining height between the trigger and the boundary edge--radix-tooltip-trigger-widthThe width of the trigger--radix-tooltip-trigger-heightThe height of the trigger Arrow An optional arrow element to render alongside the tooltip This can be used to help visually link the trigger with the Tooltip Content Must be rendered inside Tooltip Content PropTypeDefaultasChildProp descriptionbooleanfalsewidthProp descriptionnumber10heightProp descriptionnumber5 Examples Configure globally Use the Provider to control delayDuration and skipDelayDuration globally import { Tooltip } from \"radix-ui\"; export default () => ( <TooltipProvider delayDuration={800} skipDelayDuration={500}>\n<Tooltip Root>\n<Tooltip Trigger>…</Tooltip Trigger>\n<Tooltip Content>…</Tooltip Content>\n</Tooltip Root>\n<Tooltip Root>\n<Tooltip Trigger>…</Tooltip Trigger>\n<Tooltip Content>…</Tooltip Content>\n</Tooltip Root>\n</Tooltip Provider>\n);\nShow instantly\nUse the delayDuration prop to control the time it takes for the tooltip to open import { Tooltip } from \"radix-ui\";\nexport default () => (\n<Tooltip Root delayDuration={0}>\n<Tooltip Trigger>…</Tooltip Trigger>\n<Tooltip Content>…</Tooltip Content>\n</Tooltip Root>\n);\nConstrain the content size\nYou may want to constrain the width of the content so that it matches the trigger width You may also want to constrain its height to not exceed the viewport We expose several CSS custom properties such as --radix-tooltip-trigger-width and --radix-tooltip-content-available-height to support this Use them to constrain the content dimensions // index jsx\nimport { Tooltip } from \"radix-ui\";\nimport \" /styles css\";\nexport default () => (\n<Tooltip Root>\n<Tooltip Trigger>…</Tooltip Trigger>\n<Tooltip Portal>\n<Tooltip Content className=\"TooltipContent\" sideOffset={5}>\n…\n</Tooltip Content>\n</Tooltip Portal>\n</Tooltip Root>\n);\n/* styles css */ TooltipContent {\nwidth: var(--radix-tooltip-trigger-width);\nmax-height: var(--radix-tooltip-content-available-height);\n}\nOrigin-aware animations\nWe expose a CSS custom property --radix-tooltip-content-transform-origin Use it to animate the content from its computed origin based on side, sideOffset, align, alignOffset and any collisions // index jsx\nimport { Tooltip } from \"radix-ui\";\nimport \" /styles css\";\nexport default () => (\n<Tooltip Root>\n<Tooltip Trigger>…</Tooltip",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 547234,
      "relative_path": "documentation\\radix\\_primitives_docs_components_tooltip.html",
      "source_type": "documentation"
    },
    "token_count": 499,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "c67f750e9ce7bdcd69bcc740b2cb7e8a",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_tooltip.html",
    "source_type": "documentation",
    "title": "Tooltip – Radix Primitives",
    "content": "Trigger> <Tooltip Portal> <Tooltip Content className=\"TooltipContent\" sideOffset={5}> … </Tooltip Content> </Tooltip Portal> </Tooltip Root> ); /* styles css */ TooltipContent { width: var(--radix-tooltip-trigger-width); max-height: var(--radix-tooltip-content-available-height); } Origin-aware animations We expose a CSS custom property --radix-tooltip-content-transform-origin Use it to animate the content from its computed origin based on side, sideOffset, align, alignOffset and any collisions // index jsx import { Tooltip } from \"radix-ui\"; import \" /styles css\"; export default () => ( <Tooltip Root> <Tooltip Trigger>…</TooltipTrigger>\n<Tooltip Content className=\"TooltipContent\">…</Tooltip Content>\n</Tooltip Root>\n);\n/* styles css */ TooltipContent {\ntransform-origin: var(--radix-tooltip-content-transform-origin);\nanimation: scaleIn 0 5s ease-out;\n}\n@keyframes scaleIn {\nfrom {\nopacity: 0;\ntransform: scale(0);\n}\nto {\nopacity: 1;\ntransform: scale(1);\n}\n}\nCollision-aware animations\nWe expose data-side and data-align attributes Their values will change at runtime to reflect collisions Use them to create collision and direction-aware animations // index jsx\nimport { Tooltip } from \"radix-ui\";\nimport \" /styles css\";\nexport default () => (\n<Tooltip Root>\n<Tooltip Trigger>…</Tooltip Trigger>\n<Tooltip Content className=\"TooltipContent\">…</Tooltip Content>\n</Tooltip Root>\n);\n/* styles css */ TooltipContent {\nanimation-duration: 0 6s;\nanimation-timing-function: cubic-bezier(0 16, 1, 0 3, 1);\n} TooltipContent[data-side=\"top\"] {\nanimation-name: slideUp;\n} TooltipContent[data-side=\"bottom\"] {\nanimation-name: slideDown;\n}\n@keyframes slideDown {\nfrom {\nopacity: 0;\ntransform: translateY(-10px);\n}\nto {\nopacity: 1;\ntransform: translateY(0);\n}\n}\n@keyframes slideUp {\nfrom {\nopacity: 0;\ntransform: translateY(10px);\n}\nto {\nopacity: 1;\ntransform: translateY(0);\n}\n}\nAccessibility\nKeyboard Interactions\nKeyDescriptionTabOpens/closes the tooltip without delay SpaceIf open, closes the tooltip without delay EnterIf open, closes the tooltip without delay EscapeIf open, closes the tooltip without delay",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 547234,
      "relative_path": "documentation\\radix\\_primitives_docs_components_tooltip.html",
      "source_type": "documentation"
    },
    "token_count": 497,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "cc6942757c8bbd3a3572876ae539251e",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_components_tooltip.html",
    "source_type": "documentation",
    "title": "Tooltip – Radix Primitives",
    "content": "} TooltipContent[data-side=\"top\"] { animation-name: slideUp; } TooltipContent[data-side=\"bottom\"] { animation-name: slideDown; } @keyframes slideDown { from { opacity: 0; transform: translateY(-10px); } to { opacity: 1; transform: translateY(0); } } @keyframes slideUp { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } } Accessibility Keyboard Interactions KeyDescriptionTabOpens/closes the tooltip without delay SpaceIf open, closes the tooltip without delay EnterIf open, closes the tooltip without delay EscapeIf open, closes the tooltip without delayCustom APIs\nCreate your own API by abstracting the primitive parts into your own component Abstract parts and introduce a content prop\nThis example abstracts all of the Tooltip parts and introduces a new content prop Usage\nimport { Tooltip } from \" /your-tooltip\";\nexport default () => (\n<Tooltip content=\"Tooltip content\">\n<button>Tooltip trigger</button>\n</Tooltip>\n);\nImplementation\nUse the asChild prop to convert the trigger part into a slottable area It will replace the trigger with the child that gets passed to it // your-tooltip jsx\nimport * as React from \"react\";\nimport { Tooltip as TooltipPrimitive } from \"radix-ui\";\nexport function Tooltip({\nchildren,\ncontent,\nopen,\ndefaultOpen,\nonOpenChange, props\n}) {\nreturn (\n<TooltipPrimitive Root\nopen={open}\ndefaultOpen={defaultOpen}\nonOpenChange={onOpenChange}\n>\n<TooltipPrimitive Trigger asChild>\n{children}\n</TooltipPrimitive Trigger>\n<TooltipPrimitive Content side=\"top\" align=\"center\" { props}>\n{content}\n<TooltipPrimitive Arrow width={11} height={5} />\n</TooltipPrimitive Content>\n</TooltipPrimitive Root>\n);\n}\nQuick navPreviousToolbarNextAccessible IconEdit this page on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 547234,
      "relative_path": "documentation\\radix\\_primitives_docs_components_tooltip.html",
      "source_type": "documentation"
    },
    "token_count": 393,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "f9d63854f2b1c27ad698f043c4353822",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_utilities_accessible-icon.html",
    "source_type": "documentation",
    "title": "Accessible Icon – Radix Primitives",
    "content": "Accessible Icon – Radix PrimitivesRadix HomepageMade by WorkOSRadix HomepageMade by WorkOSThemesThemesPrimitivesPrimitivesIconsIconsColorsColorsDocumentationCase studiesBlogSearch/OverviewIntroductionGetting startedAccessibilityReleasesGuidesStylingAnimationCompositionServer-side renderingComponentsAccordionAlert DialogAspect RatioAvatarCheckboxCollapsibleContext MenuDialogDropdown MenuFormPreviewHover CardLabelMenubarNavigation MenuOne-Time Password FieldPreviewPassword Toggle FieldPreviewPopoverProgressRadio GroupScroll AreaSelectSeparatorSliderSwitchTabsToastToggleToggle GroupToolbarTooltipUtilitiesAccessible IconDirection ProviderPortalSlotVisually HiddenUtilitiesAccessible Icon\nMakes icons accessible by adding a label.\nFeaturesQuickly make any icon accessible by wrapping it and providing a meaningful label.No visual difference, but announced correctly by screen readers.Component Reference LinksVersion: 1.1.7Size: 1.82 kBView sourceReport an issue\nInstallation\nInstall the component from your command line.\nnpm install @radix-ui/react-accessible-icon\nAnatomy\nImport the component.\nimport { AccessibleIcon } from \"radix-ui\";\nexport default () => <AccessibleIcon.Root />;\nAPI Reference\nRoot\nContains the icon to make accessible.\nPropTypeDefaultlabel*Prop descriptionstringNo default value\nAccessibility\nMost icons or icon systems come with no accessibility built-in. For example, the same visual cross icon may in fact mean \"close\" or \"delete\". This component lets you give meaning to icons used throughout your app.\nThis is built with Visually Hidden.Quick navPreviousTooltipNextDirection ProviderEdit this page on GitHub.",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 88107,
      "relative_path": "documentation\\radix\\_primitives_docs_utilities_accessible-icon.html",
      "source_type": "documentation"
    },
    "token_count": 315,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c82acbfa3a32f104fbbe9bb4083bb408",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_utilities_direction-provider.html",
    "source_type": "documentation",
    "title": "Direction Provider – Radix Primitives",
    "content": "Direction Provider – Radix PrimitivesRadix HomepageMade by WorkOSRadix HomepageMade by WorkOSThemesThemesPrimitivesPrimitivesIconsIconsColorsColorsDocumentationCase studiesBlogSearch/OverviewIntroductionGetting startedAccessibilityReleasesGuidesStylingAnimationCompositionServer-side renderingComponentsAccordionAlert DialogAspect RatioAvatarCheckboxCollapsibleContext MenuDialogDropdown MenuFormPreviewHover CardLabelMenubarNavigation MenuOne-Time Password FieldPreviewPassword Toggle FieldPreviewPopoverProgressRadio GroupScroll AreaSelectSeparatorSliderSwitchTabsToastToggleToggle GroupToolbarTooltipUtilitiesAccessible IconDirection ProviderPortalSlotVisually HiddenUtilitiesDirection Provider\nWraps your app to provide global reading direction.\nFeaturesEnables all primitives to inherit global reading direction.Component Reference LinksVersion: 1.1.1Size: 320 BytesView sourceReport an issue\nInstallation\nInstall the component from your command line.\nnpm install @radix-ui/react-direction\nAnatomy\nImport the component.\nimport { Direction } from \"radix-ui\";\nexport default () => <Direction.Provider />;\nAPI Reference\nProvider\nWhen creating localized apps that require right-to-left (RTL) reading direction, you need to wrap your application with the Direction.Provider component to ensure all of the primitives adjust their behavior based on the dir prop.\nPropTypeDefaultdirProp descriptionenumSee full typeNo default value\nExample\nUse the direction provider.\nimport { Direction } from \"radix-ui\";\nexport default () => (\n<Direction.Provider dir=\"rtl\">{/* your app */}</Direction.Provider>\n);\nQuick navPreviousAccessible IconNextPortalEdit this page on GitHub.",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 94867,
      "relative_path": "documentation\\radix\\_primitives_docs_utilities_direction-provider.html",
      "source_type": "documentation"
    },
    "token_count": 315,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d2c676c6a5f96cfa3716441cb6ea1b3e",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_utilities_portal.html",
    "source_type": "documentation",
    "title": "Portal – Radix Primitives",
    "content": "Portal – Radix PrimitivesRadix HomepageMade by WorkOSRadix HomepageMade by WorkOSThemesThemesPrimitivesPrimitivesIconsIconsColorsColorsDocumentationCase studiesBlogSearch/OverviewIntroductionGetting startedAccessibilityReleasesGuidesStylingAnimationCompositionServer-side renderingComponentsAccordionAlert DialogAspect RatioAvatarCheckboxCollapsibleContext MenuDialogDropdown MenuFormPreviewHover CardLabelMenubarNavigation MenuOne-Time Password FieldPreviewPassword Toggle FieldPreviewPopoverProgressRadio GroupScroll AreaSelectSeparatorSliderSwitchTabsToastToggleToggle GroupToolbarTooltipUtilitiesAccessible IconDirection ProviderPortalSlotVisually HiddenUtilitiesPortal\nRenders a React subtree in a different part of the DOM.\nFeaturesRender any React subtree outside of your App.Appends to `document.body` by default but can be customized to use a different container.Component Reference LinksVersion: 1.1.9Size: 1.72 kBView sourceReport an issue\nInstallation\nInstall the component from your command line.\nnpm install @radix-ui/react-portal\nAnatomy\nImport the component.\nimport { Portal } from \"radix-ui\";\nexport default () => <Portal.Root />;\nBasic example\nUse the portal primitive.\nimport { Portal } from \"radix-ui\";\nexport default () => <Portal.Root>Content</Portal.Root>;\nAPI Reference\nRoot\nAnything you put inside this component will be rendered in a separate <div> element. By default, this element will be appended to document.body but you can choose a different container by using the container prop.\nPropTypeDefaultasChildProp descriptionbooleanfalsecontainerProp descriptionHTMLElementNo default valueQuick navPreviousDirection ProviderNextSlotEdit this page on GitHub.",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 95430,
      "relative_path": "documentation\\radix\\_primitives_docs_utilities_portal.html",
      "source_type": "documentation"
    },
    "token_count": 331,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "78bcb368c04d2a9ccf95a8f684e614b7",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_overview_getting-started.html",
    "source_type": "documentation",
    "title": "Getting started – Radix Primitives",
    "content": "Getting started – Radix PrimitivesRadix HomepageMade by WorkOSRadix HomepageMade by WorkOSThemesThemesPrimitivesPrimitivesIconsIconsColorsColorsDocumentationCase studiesBlogSearch/OverviewIntroductionGetting startedAccessibilityReleasesGuidesStylingAnimationCompositionServer-side renderingComponentsAccordionAlert DialogAspect RatioAvatarCheckboxCollapsibleContext MenuDialogDropdown MenuFormPreviewHover CardLabelMenubarNavigation MenuOne-Time Password FieldPreviewPassword Toggle FieldPreviewPopoverProgressRadio GroupScroll AreaSelectSeparatorSliderSwitchTabsToastToggleToggle GroupToolbarTooltipUtilitiesAccessible IconDirection ProviderPortalSlotVisually HiddenOverviewGetting started\nA quick tutorial to get you up and running with Radix Primitives Implementing a Popover\nIn this quick tutorial, we will install and style the Popover component 1 Install the primitive\nInstall Radix Primitives from your command line npm install radix-ui@latest\n2 Import the parts\nImport and structure the parts // index jsx\nimport * as React from \"react\";\nimport { Popover } from \"radix-ui\";\nconst PopoverDemo = () => (\n<Popover Root>\n<Popover Trigger>More info</Popover Trigger>\n<Popover Portal>\n<Popover Content>\nSome more info…\n<Popover Arrow />\n</Popover Content>\n</Popover Portal>\n</Popover Root>\n);\nexport default PopoverDemo;\n3 Add your styles\nAdd styles where desired // index jsx\nimport * as React from \"react\";\nimport { Popover } from \"radix-ui\";\nimport \" /styles css\";\nconst PopoverDemo = () => (\n<Popover Root>\n<Popover Trigger className=\"PopoverTrigger\">Show info</Popover Trigger>\n<Popover Portal>\n<Popover Content className=\"PopoverContent\">\nSome content\n<Popover Arrow className=\"PopoverArrow\" />\n</Popover Content>\n</Popover Portal>\n</Popover Root>\n);\nexport default PopoverDemo;\n/* styles css */ PopoverTrigger {\nbackground-color: white;\nborder-radius: 4px;\n} PopoverContent {\nborder-radius: 4px;\npadding: 20px;\nwidth: 260px;\nbackground-color: white;\n} PopoverArrow {\nfill: white;\n}\nDemo\nHere's a complete demo More info\nindex jsxindex jsxstyles cssstyles cssimport * as React from \"react\";\nimport { Popover } from \"radix-ui\";\nimport \" /styles css\";\nconst PopoverDemo = () => (\n<Popover Root>\n<Popover Trigger className=\"PopoverTrigger\">More info</Popover Trigger>\n<Popover Portal>\n<Popover",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 209418,
      "relative_path": "documentation\\radix\\_primitives_docs_overview_getting-started.html",
      "source_type": "documentation"
    },
    "token_count": 505,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "9610ff7b001863519f7226cf702d644c",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_overview_getting-started.html",
    "source_type": "documentation",
    "title": "Getting started – Radix Primitives",
    "content": "</Popover Root> ); export default PopoverDemo; /* styles css */ PopoverTrigger { background-color: white; border-radius: 4px; } PopoverContent { border-radius: 4px; padding: 20px; width: 260px; background-color: white; } PopoverArrow { fill: white; } Demo Here's a complete demo More info index jsxindex jsxstyles cssstyles cssimport * as React from \"react\"; import { Popover } from \"radix-ui\"; import \" /styles css\"; const PopoverDemo = () => ( <Popover Root> <Popover Trigger className=\"PopoverTrigger\">More info</Popover Trigger> <Popover Portal> <PopoverContent className=\"PopoverContent\" sideOffset={5}>\nSome more info…\n<Popover Arrow className=\"PopoverArrow\" />\n</Popover Content>\n</Popover Portal>\n</Popover Root>\n);\nexport default PopoverDemo;\nExpand code\nSummary\nThe steps above outline briefly what's involved in using a Radix Primitive in your application These components are low-level enough to give you control over how you want to wrap them You're free to introduce your own high-level API to better suit the needs of your team and product In a few simple steps, we've implemented a fully accessible Popover component, without having to worry about many of its complexities Adheres to WAI-ARIA design pattern Can be controlled or uncontrolled Customize side, alignment, offsets, collision handling Optionally render a pointing arrow Focus is fully managed and customizable Dismissing and layering behavior is highly customizable Quick navPreviousIntroductionNextAccessibilityEdit this page on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 209418,
      "relative_path": "documentation\\radix\\_primitives_docs_overview_getting-started.html",
      "source_type": "documentation"
    },
    "token_count": 327,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "43081d220d456014b642c77eeaf336bf",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_overview_introduction.html",
    "source_type": "documentation",
    "title": "Introduction – Radix Primitives",
    "content": "Introduction – Radix PrimitivesRadix HomepageMade by WorkOSRadix HomepageMade by WorkOSThemesThemesPrimitivesPrimitivesIconsIconsColorsColorsDocumentationCase studiesBlogSearch/OverviewIntroductionGetting startedAccessibilityReleasesGuidesStylingAnimationCompositionServer-side renderingComponentsAccordionAlert DialogAspect RatioAvatarCheckboxCollapsibleContext MenuDialogDropdown MenuFormPreviewHover CardLabelMenubarNavigation MenuOne-Time Password FieldPreviewPassword Toggle FieldPreviewPopoverProgressRadio GroupScroll AreaSelectSeparatorSliderSwitchTabsToastToggleToggle GroupToolbarTooltipUtilitiesAccessible IconDirection ProviderPortalSlotVisually HiddenOverviewIntroduction\nAn open-source UI component library for building high-quality, accessible\ndesign systems and web apps Radix Primitives is a low-level UI component library with a focus on accessibility, customization and developer experience You can use these components either as the base layer of your design system, or adopt them incrementally Vision\nMost of us share similar definitions for common UI patterns like accordion, checkbox,\ncombobox, dialog, dropdown, select, slider, and tooltip These UI patterns are documented by WAI-ARIA and generally understood by the community However, the implementations provided to us by the web platform are inadequate They're\neither non-existent, lacking in functionality, or cannot be customized sufficiently So, developers are forced to build custom components; an incredibly difficult task As a\nresult, most components on the web are inaccessible, non-performant, and lacking important\nfeatures Our goal is to create a well-funded, open-source component library that the community can\nuse to build accessible design systems Key Features\nAccessible\nComponents adhere to the WAI-ARIA design patterns where possible We handle many of the difficult implementation details related to accessibility, including aria and role attributes, focus management, and keyboard navigation Learn more in our accessibility overview Unstyled\nComponents ship without styles, giving you complete control over the look and feel Components can be styled with any styling solution Learn more in our styling guide Opened\nRadix Primitives are designed to be customized to suit your needs Our open component architecture provides you granular access to each component part, so you can wrap them and add your own event listeners, props, or refs Uncontrolled\nWhere applicable, components are uncontrolled by default but can also be controlled, alternatively All of the behavior wiring is handled internally, so you can get up and running as smoothly as possible, without needing to create any local states Developer experience\nOne of our main goals is to provide the best possible developer experience",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 112231,
      "relative_path": "documentation\\radix\\_primitives_docs_overview_introduction.html",
      "source_type": "documentation"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ba5e315a4c222a22801b50f3199c8013",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_overview_introduction.html",
    "source_type": "documentation",
    "title": "Introduction – Radix Primitives",
    "content": "you granular access to each component part, so you can wrap them and add your own event listeners, props, or refs Uncontrolled Where applicable, components are uncontrolled by default but can also be controlled, alternatively All of the behavior wiring is handled internally, so you can get up and running as smoothly as possible, without needing to create any local states Developer experience One of our main goals is to provide the best possible developer experienceRadix Primitives provides a fully-typed API All components share a similar API, creating a consistent and predictable experience We've also implemented an asChild prop, giving users full control over the rendered element Incremental adoption\nWe recommend installing the radix-ui package and importing the primitives you need This is the simplest way to get started, prevent version conflicts or duplication, and makes it easy to manage updates The package is tree-shakeable, so you should only ship the components you use npm install radix-ui\nimport { Dialog, DropdownMenu, Tooltip } from \"radix-ui\";\nAlternatively, each primitive can be installed individually:\nnpm install @radix-ui/react-dialog\nnpm install @radix-ui/react-dropdown-menu\nnpm install @radix-ui/react-tooltip\nimport * as Dialog from \"@radix-ui/react-dialog\";\nimport * as DropdownMenu from \"@radix-ui/react-dropdown-menu\";\nimport * as Tooltip from \"@radix-ui/react-tooltip\";\nWhen installing separately, we recommend updating all Radix packages together to prevent duplication of shared dependencies and keep your bundle size down Community\nTo get involved with the Radix community, ask questions and share tips, Join our Discord To receive updates on new primitives, announcements, blog posts, and general Radix tips, follow along on Bluesky or Twitter To file issues, request features, and contribute, check out our GitHub GitHub repo\nCode of conduct\nQuick navNextGetting startedEdit this page on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 112231,
      "relative_path": "documentation\\radix\\_primitives_docs_overview_introduction.html",
      "source_type": "documentation"
    },
    "token_count": 377,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "4cd64bcfd7b090f2f90d3b8beef0018f",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_utilities_visually-hidden.html",
    "source_type": "documentation",
    "title": "Visually Hidden – Radix Primitives",
    "content": "Visually Hidden – Radix PrimitivesRadix HomepageMade by WorkOSRadix HomepageMade by WorkOSThemesThemesPrimitivesPrimitivesIconsIconsColorsColorsDocumentationCase studiesBlogSearch/OverviewIntroductionGetting startedAccessibilityReleasesGuidesStylingAnimationCompositionServer-side renderingComponentsAccordionAlert DialogAspect RatioAvatarCheckboxCollapsibleContext MenuDialogDropdown MenuFormPreviewHover CardLabelMenubarNavigation MenuOne-Time Password FieldPreviewPassword Toggle FieldPreviewPopoverProgressRadio GroupScroll AreaSelectSeparatorSliderSwitchTabsToastToggleToggle GroupToolbarTooltipUtilitiesAccessible IconDirection ProviderPortalSlotVisually HiddenUtilitiesVisually Hidden\nHides content from the screen in an accessible way.\nFeaturesVisually hides content while preserving it for assistive technology.Component Reference LinksVersion: 1.2.3Size: 1.74 kBView sourceReport an issue\nInstallation\nInstall the component from your command line.\nnpm install @radix-ui/react-visually-hidden\nAnatomy\nImport the component.\nimport { VisuallyHidden } from \"radix-ui\";\nexport default () => <VisuallyHidden.Root />;\nBasic example\nUse the visually hidden primitive.\nimport { VisuallyHidden } from \"radix-ui\";\nimport { GearIcon } from \"@radix-ui/react-icons\";\nexport default () => (\n<button>\n<GearIcon />\n<VisuallyHidden.Root>Settings</VisuallyHidden.Root>\n</button>\n);\nAPI Reference\nRoot\nAnything you put inside this component will be hidden from the screen but will be announced by screen readers.\nPropTypeDefaultasChildProp descriptionbooleanfalse\nAccessibility\nThis is useful in certain scenarios as an alternative to traditional labelling with aria-label or aria-labelledby.Quick navPreviousSlotEdit this page on GitHub.",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 98432,
      "relative_path": "documentation\\radix\\_primitives_docs_utilities_visually-hidden.html",
      "source_type": "documentation"
    },
    "token_count": 346,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "16bc58c4182a50c6df198d69aa60b517",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_utilities_slot.html",
    "source_type": "documentation",
    "title": "Slot – Radix Primitives",
    "content": "Slot – Radix PrimitivesRadix HomepageMade by WorkOSRadix HomepageMade by WorkOSThemesThemesPrimitivesPrimitivesIconsIconsColorsColorsDocumentationCase studiesBlogSearch/OverviewIntroductionGetting startedAccessibilityReleasesGuidesStylingAnimationCompositionServer-side renderingComponentsAccordionAlert DialogAspect RatioAvatarCheckboxCollapsibleContext MenuDialogDropdown MenuFormPreviewHover CardLabelMenubarNavigation MenuOne-Time Password FieldPreviewPassword Toggle FieldPreviewPopoverProgressRadio GroupScroll AreaSelectSeparatorSliderSwitchTabsToastToggleToggle GroupToolbarTooltipUtilitiesAccessible IconDirection ProviderPortalSlotVisually HiddenUtilitiesSlot\nMerges its props onto its immediate child FeaturesCan be used to support your own `asChild` prop Component Reference LinksVersion: 1 2 3Size: 1 24 kBView sourceReport an issue\nInstallation\nInstall the component from your command line npm install @radix-ui/react-slot\nAnatomy\nImport the component import { Slot } from \"radix-ui\";\nexport default () => (\n<Slot Root>\n<div>Hello</div>\n</Slot Root>\n);\nBasic example\nUse to create your own asChild API When your component has a single children element:\n// your-button jsx\nimport * as React from \"react\";\nimport { Slot } from \"radix-ui\";\nfunction Button({ asChild, props }) {\nconst Comp = asChild Slot Root : \"button\";\nreturn <Comp { props} />;\n}\nUse Slottable when your component has multiple children to pass the props to the correct element:\n// your-button jsx\nimport * as React from \"react\";\nimport { Slot } from \"radix-ui\";\nfunction Button({ asChild, children, leftElement, rightElement, props }) {\nconst Comp = asChild Slot Root : \"button\";\nreturn (\n<Comp { props}>\n{leftElement}\n<Slot Slottable>{children}</Slot Slottable>\n{rightElement}\n</Comp>\n);\n}\nUsage\nimport { Button } from \" /your-button\";\nexport default () => (\n<Button asChild>\n<a href=\"/contact\">Contact</a>\n</Button>\n);\nEvent handlers\nAny prop that starts with on (e g , onClick) is considered an event handler When merging event handlers, Slot will create a new function where the child handler takes precedence over the slot handler If one of the event handlers relies on event defaultPrevented make sure that the order is correct import { Slot } from \"radix-ui\";\nexport default () => (\n<Slot",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 129976,
      "relative_path": "documentation\\radix\\_primitives_docs_utilities_slot.html",
      "source_type": "documentation"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "7804ccd13be149acc47f7f57ed8a42c0",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_utilities_slot.html",
    "source_type": "documentation",
    "title": "Slot – Radix Primitives",
    "content": "default () => ( <Button asChild> <a href=\"/contact\">Contact</a> </Button> ); Event handlers Any prop that starts with on (e g , onClick) is considered an event handler When merging event handlers, Slot will create a new function where the child handler takes precedence over the slot handler If one of the event handlers relies on event defaultPrevented make sure that the order is correct import { Slot } from \"radix-ui\"; export default () => ( <SlotRoot\nonClick={(event) => {\nif ( event defaultPrevented)\nconsole log(\"Not logged because default is prevented \");\n}}\n>\n<button onClick={(event) => event preventDefault()} />\n</Slot Root>\n);\nQuick navPreviousPortalNextVisually HiddenEdit this page on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 129976,
      "relative_path": "documentation\\radix\\_primitives_docs_utilities_slot.html",
      "source_type": "documentation"
    },
    "token_count": 155,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "d8b6038c264afc15932ca6d1abe0ddfe",
    "source_file": "corpus\\documentation\\shadcn\\_docs.html",
    "source_type": "documentation",
    "title": "Introduction - shadcn/ui",
    "content": "Introduction - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonIntroductionCopy PageNextshadcn/ui is a set of beautifully-designed, accessible components and a code distribution platform Works with your favorite frameworks and AI models Open Source Open Code This is not a component library It is how you build your component library You know how most traditional component libraries work: you install a package from NPM, import the components, and use them in your app This approach works well until you need to customize a component to fit your design system or require one that isn’t included in the library Often, you end up wrapping library components, writing workarounds to override styles, or mixing components from different libraries with incompatible APIs This is what shadcn/ui aims to solve It is built around the following principles:\nOpen Code: The top layer of your component code is open for modification Composition: Every component uses a common, composable interface, making them predictable Distribution: A flat-file schema and command-line tool make it easy to distribute components Beautiful Defaults: Carefully chosen default styles, so you get great design out-of-the-box AI-Ready: Open code for LLMs to read, understand, and improve Open Code\nshadcn/ui hands you the actual component code You have full control to customize and extend the components to your needs This means:\nFull Transparency: You see exactly how each component is built Easy Customization: Modify any part of a component to fit your design and functionality requirements AI Integration: Access to the code makes it straightforward for LLMs to read, understand, and even improve your components",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 300885,
      "relative_path": "documentation\\shadcn\\_docs.html",
      "source_type": "documentation"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "9261582f8a6458ec0b0625ccd0854243",
    "source_file": "corpus\\documentation\\shadcn\\_docs.html",
    "source_type": "documentation",
    "title": "Introduction - shadcn/ui",
    "content": "code for LLMs to read, understand, and improve Open Code shadcn/ui hands you the actual component code You have full control to customize and extend the components to your needs This means: Full Transparency: You see exactly how each component is built Easy Customization: Modify any part of a component to fit your design and functionality requirements AI Integration: Access to the code makes it straightforward for LLMs to read, understand, and even improve your componentsIn a typical library, if you need to change a button’s behavior, you have to override styles or wrap the component With shadcn/ui, you simply edit the button code directly How do I pull upstream updates in an Open Code approach Composition\nEvery component in shadcn/ui shares a common, composable interface If a component does not exist, we bring it in, make it composable, and adjust its style to match and work with the rest of the design system A shared, composable interface means it's predictable for both your team and LLMs You are not learning different APIs for every new component Even for third-party ones Distribution\nshadcn/ui is also a code distribution system It defines a schema for components and a CLI to distribute them Schema: A flat-file structure that defines the components, their dependencies, and properties CLI: A command-line tool to distribute and install components across projects with cross-framework support You can use the schema to distribute your components to other projects or have AI generate completely new components based on existing schema Beautiful Defaults\nshadcn/ui comes with a large collection of components that have carefully chosen default styles They are designed to look good on their own and to work well together as a consistent system:\nGood Out-of-the-Box: Your UI has a clean and minimal look without extra work Unified Design: Components naturally fit with one another Each component is built to match the others, keeping your UI consistent Easily Customizable: If you want to change something, it's simple to override and extend the defaults AI-Ready\nThe design of shadcn/ui makes it easy for AI tools to work with your code Its open code and consistent API allow AI models to read, understand, and even generate new components An AI model can learn how your components work and suggest improvements or even create new components that integrate with your existing design",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 300885,
      "relative_path": "documentation\\shadcn\\_docs.html",
      "source_type": "documentation"
    },
    "token_count": 464,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "046be0c5c810b4ff013bad761afd75d9",
    "source_file": "corpus\\documentation\\shadcn\\_docs.html",
    "source_type": "documentation",
    "title": "Introduction - shadcn/ui",
    "content": "keeping your UI consistent Easily Customizable: If you want to change something, it's simple to override and extend the defaults AI-Ready The design of shadcn/ui makes it easy for AI tools to work with your code Its open code and consistent API allow AI models to read, understand, and even generate new components An AI model can learn how your components work and suggest improvements or even create new components that integrate with your existing designInstallation On This PageOpen CodeCompositionDistributionBeautiful DefaultsAI-ReadyDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 300885,
      "relative_path": "documentation\\shadcn\\_docs.html",
      "source_type": "documentation"
    },
    "token_count": 161,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "94c51c81ede7293e1cf08e4131249675",
    "source_file": "corpus\\documentation\\shadcn\\_docs_blocks.html",
    "source_type": "documentation",
    "title": "Blocks - shadcn/ui",
    "content": "Blocks - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonBlocksCopy PagePreviousNextContribute components to the blocks library We are inviting the community to contribute to the blocks library Share your components and blocks with other developers and help build a library of high-quality, reusable components We'd love to see all types of blocks: applications, marketing, products, and more Setup your workspace\nFork the repositoryCopygit clone https://github com/shadcn-ui/ui gitCreate a new branchCopygit checkout -b username/my-new-blockInstall dependenciesCopypnpm installStart the dev serverCopypnpm www:dev\nAdd a block\nA block can be a single component (eg a variation of a ui component) or a complex component (eg a dashboard) with multiple components, hooks, and utils Create a new blockCreate a new folder in the apps/www/registry/new-york/blocks directory Make sure the folder is named in kebab-case and under new-york Copyapps\n└── www\n└── registry\n└── new-york\n└── blocks\n└── dashboard-01Note: The build script will take care of building the block for the default style Add your block filesAdd your files to the block folder Here is an example of a block with a page, components, hooks, and utils Copydashboard-01\n└── page tsx\n└── components\n└── hello-world tsx\n└── example-card tsx\n└── hooks\n└── use-hello-world ts\n└── lib\n└── format-date",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 388937,
      "relative_path": "documentation\\shadcn\\_docs_blocks.html",
      "source_type": "documentation"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "4ce6a7479ad960b04d362b1a00b7b5eb",
    "source_file": "corpus\\documentation\\shadcn\\_docs_blocks.html",
    "source_type": "documentation",
    "title": "Blocks - shadcn/ui",
    "content": "named in kebab-case and under new-york Copyapps └── www └── registry └── new-york └── blocks └── dashboard-01Note: The build script will take care of building the block for the default style Add your block filesAdd your files to the block folder Here is an example of a block with a page, components, hooks, and utils Copydashboard-01 └── page tsx └── components └── hello-world tsx └── example-card tsx └── hooks └── use-hello-world ts └── lib └── format-datetsNote: You can start with one file and add more files later Add your block to the registry\nAdd your block definition to registry-blocks tsxTo add your block to the registry, you need to add your block definition to registry-blocks ts This follows the registry schema at https://ui shadcn com/schema/registry-item json apps/www/registry/registry-blocks tsxCopyexport const blocks = [\n// {\nname: \"dashboard-01\",\nauthor: \"shadcn (https://ui shadcn com)\",\ntitle: \"Dashboard\",\ndescription: \"A simple dashboard with a hello world component \",\ntype: \"registry:block\",\nregistryDependencies: [\"input\", \"button\", \"card\"],\ndependencies: [\"zod\"],\nfiles: [\n{\npath: \"blocks/dashboard-01/page tsx\",\ntype: \"registry:page\",\ntarget: \"app/dashboard/page tsx\",\n},\n{\npath: \"blocks/dashboard-01/components/hello-world tsx\",\ntype: \"registry:component\",\n},\n{\npath: \"blocks/dashboard-01/components/example-card tsx\",\ntype: \"registry:component\",\n},\n{\npath: \"blocks/dashboard-01/hooks/use-hello-world ts\",\ntype: \"registry:hook\",\n},\n{\npath: \"blocks/dashboard-01/lib/format-date ts\",\ntype: \"registry:lib\",\n},\n],\ncategories: [\"dashboard\"],\n},\n]Make sure you add a name, description, type, registryDependencies, dependencies, files, and categories We'll go over each of these in more detail in the schema docs (coming soon) Run the build scriptCopypnpm registry:buildNote: you do not need to run this script for every change You only need to run it when you update the block definition",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 388937,
      "relative_path": "documentation\\shadcn\\_docs_blocks.html",
      "source_type": "documentation"
    },
    "token_count": 481,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "4adf168f33856a888fe31ce7e7ad49f2",
    "source_file": "corpus\\documentation\\shadcn\\_docs_blocks.html",
    "source_type": "documentation",
    "title": "Blocks - shadcn/ui",
    "content": "\"registry:component\", }, { path: \"blocks/dashboard-01/hooks/use-hello-world ts\", type: \"registry:hook\", }, { path: \"blocks/dashboard-01/lib/format-date ts\", type: \"registry:lib\", }, ], categories: [\"dashboard\"], }, ]Make sure you add a name, description, type, registryDependencies, dependencies, files, and categories We'll go over each of these in more detail in the schema docs (coming soon) Run the build scriptCopypnpm registry:buildNote: you do not need to run this script for every change You only need to run it when you update the block definitionView your blockOnce the build script is finished, you can view your block at http://localhost:3333/blocks/[CATEGORY] or a full screen preview at http://localhost:3333/view/styles/new-york/dashboard-01 Build your blockYou can now build your block by editing the files in the block folder and viewing the changes in the browser If you add more files, make sure to add them to the files array in the block definition Publish your block\nOnce you're ready to publish your block, you can submit a pull request to the main repository Run the build scriptCopypnpm registry:buildCapture a screenshotCopypnpm registry:captureNote: If you've run the capture script before, you might need to delete the existing screenshots (both light and dark) at apps/www/public/r/styles/new-york and run the script again Submit a pull requestCommit your changes and submit a pull request to the main repository Your block will be reviewed and merged Once merged it will be published to the website and available to be installed via the CLI Categories\nThe categories property is used to organize your block in the registry Add a category\nIf you need to add a new category, you can do so by adding it to the registryCategories array in apps/www/registry/registry-categories ts apps/www/registry/registry-categories tsCopyexport const registryCategories = [\n// {\nname: \"Input\",\nslug: \"input\",\nhidden: false,\n},\n]\nGuidelines\nHere are some guidelines to follow when contributing to the blocks library The following properties are required for the block definition: name, description, type, files, and categories Make sure to list all registry dependencies in registryDependencies A registry dependency is the name of the component in the registry eg input, button, card, etc Make sure to list all dependencies in dependencies",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 388937,
      "relative_path": "documentation\\shadcn\\_docs_blocks.html",
      "source_type": "documentation"
    },
    "token_count": 496,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "79c484fe55c876f878d10c4333712fd4",
    "source_file": "corpus\\documentation\\shadcn\\_docs_blocks.html",
    "source_type": "documentation",
    "title": "Blocks - shadcn/ui",
    "content": "const registryCategories = [ // { name: \"Input\", slug: \"input\", hidden: false, }, ] Guidelines Here are some guidelines to follow when contributing to the blocks library The following properties are required for the block definition: name, description, type, files, and categories Make sure to list all registry dependencies in registryDependencies A registry dependency is the name of the component in the registry eg input, button, card, etc Make sure to list all dependencies in dependenciesA dependency is the name of the package in the registry eg zod, sonner, etc If your block has a page (optional), it should be the first entry in the files array and it should have a target property This helps the CLI place the page in the correct location for file-based routing Imports should always use the @/registry path eg import { Input } from \"@/registry/new-york/input\"\nJavaScriptFigma On This PageSetup your workspaceFork the repositoryCreate a new branchInstall dependenciesStart the dev serverAdd a blockCreate a new blockAdd your block filesAdd your block to the registryAdd your block definition to registry-blocks tsxRun the build scriptView your blockBuild your blockPublish your blockRun the build scriptCapture a screenshotSubmit a pull requestCategoriesAdd a categoryGuidelinesDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 388937,
      "relative_path": "documentation\\shadcn\\_docs_blocks.html",
      "source_type": "documentation"
    },
    "token_count": 317,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "0af0b44e5364c922f002fe693cf38ed7",
    "source_file": "corpus\\documentation\\shadcn\\_docs_cli.html",
    "source_type": "documentation",
    "title": "shadcn - shadcn/ui",
    "content": "shadcn - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonshadcnCopy PagePreviousNextUse the shadcn CLI to add components to your project init\nUse the init command to initialize configuration and dependencies for a new project The init command installs dependencies, adds the cn util and configures CSS variables for the project pnpmnpmyarnbunpnpm dlx shadcn@latest initCopy\nOptions\nCopyUsage: shadcn init [options] [components ]\ninitialize your project and install dependencies\nArguments:\ncomponents         name, url or local path to component\nOptions:\n-t, --template <template>      the template to use (next, next-monorepo)\n-b, --base-color <base-color>  the base color to use (neutral, gray, zinc, stone, slate)\n-y, --yes                      skip confirmation prompt (default: true)\n-f, --force                    force overwrite of existing configuration (default: false)\n-c, --cwd <cwd>                the working directory defaults to the current directory -s, --silent                   mute output (default: false)\n--src-dir                      use the src directory when creating a new project (default: false)\n--no-src-dir                   do not use the src directory when creating a new project --css-variables                use css variables for theming (default: true)\n--no-css-variables             do not use css variables for theming -h, --help                     display help for command\nadd\nUse the add command to add components and dependencies to your project",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 396887,
      "relative_path": "documentation\\shadcn\\_docs_cli.html",
      "source_type": "documentation"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "a5f811ed19af37ddb354b9c68e0baf4b",
    "source_file": "corpus\\documentation\\shadcn\\_docs_cli.html",
    "source_type": "documentation",
    "title": "shadcn - shadcn/ui",
    "content": "-c, --cwd <cwd> the working directory defaults to the current directory -s, --silent mute output (default: false) --src-dir use the src directory when creating a new project (default: false) --no-src-dir do not use the src directory when creating a new project --css-variables use css variables for theming (default: true) --no-css-variables do not use css variables for theming -h, --help display help for command add Use the add command to add components and dependencies to your projectpnpmnpmyarnbunpnpm dlx shadcn@latest add [component]Copy\nOptions\nCopyUsage: shadcn add [options] [components ]\nadd a component to your project\nArguments:\ncomponents         name, url or local path to component\nOptions:\n-y, --yes           skip confirmation prompt (default: false)\n-o, --overwrite     overwrite existing files (default: false)\n-c, --cwd <cwd>     the working directory defaults to the current directory -a, --all           add all available components (default: false)\n-p, --path <path>   the path to add the component to -s, --silent        mute output (default: false)\n--src-dir           use the src directory when creating a new project (default: false)\n--no-src-dir        do not use the src directory when creating a new project --css-variables     use css variables for theming (default: true)\n--no-css-variables  do not use css variables for theming -h, --help          display help for command\nbuild\nUse the build command to generate the registry JSON files pnpmnpmyarnbunpnpm dlx shadcn@latest buildCopy\nThis command reads the registry json file and generates the registry JSON files in the public/r directory Options\nCopyUsage: shadcn build [options] [registry]\nbuild components for a shadcn registry\nArguments:\nregistry             path to registry json file (default: \" /registry json\")\nOptions:\n-o, --output <path>  destination directory for json files (default: \" /public/r\")\n-c, --cwd <cwd>      the working directory defaults to the current directory -h, --help           display help for command\nTo customize the output directory, use the --output option pnpmnpmyarnbunpnpm dlx shadcn@latest build --output",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 396887,
      "relative_path": "documentation\\shadcn\\_docs_cli.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "0d8426ee605df8a5b32df803afc84bf9",
    "source_file": "corpus\\documentation\\shadcn\\_docs_cli.html",
    "source_type": "documentation",
    "title": "shadcn - shadcn/ui",
    "content": "and generates the registry JSON files in the public/r directory Options CopyUsage: shadcn build [options] [registry] build components for a shadcn registry Arguments: registry path to registry json file (default: \" /registry json\") Options: -o, --output <path> destination directory for json files (default: \" /public/r\") -c, --cwd <cwd> the working directory defaults to the current directory -h, --help display help for command To customize the output directory, use the --output option pnpmnpmyarnbunpnpm dlx shadcn@latest build --output/public/registryCopy Dark ModeMonorepo On This PageinitOptionsaddOptionsbuildOptionsDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 396887,
      "relative_path": "documentation\\shadcn\\_docs_cli.html",
      "source_type": "documentation"
    },
    "token_count": 206,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "dd37cfd83d6ba4acea1a2024253f4b32",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components-json.html",
    "source_type": "documentation",
    "title": "components.json - shadcn/ui",
    "content": "components json - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsoncomponents jsonCopy PagePreviousNextConfiguration for your project The components json file holds configuration for your project We use it to understand how your project is set up and how to generate components customized for your project Note: The `components json` file is optionalIt is only required if you're using the CLI to add components to your\nproject If you're using the copy and paste method, you don't need this file You can create a components json file in your project by running the following command:\npnpmnpmyarnbunpnpm dlx shadcn@latest initCopy\nSee the CLI section for more information $schema\nYou can see the JSON Schema for components json here components jsonCopy{\n\"$schema\": \"https://ui shadcn com/schema json\"\n}\nstyle\nThe style for your components This cannot be changed after initialization components jsonCopy{\n\"style\": \"new-york\"\n}\nThe default style has been deprecated Use the new-york style instead tailwind\nConfiguration to help the CLI understand how Tailwind CSS is set up in your project See the installation section for how to set up Tailwind CSS tailwind config\nPath to where your tailwind config js file is located For Tailwind CSS v4, leave this blank components jsonCopy{\n\"tailwind\": {\n\"config\": \"tailwind config js\" | \"tailwind config ts\"\n}\n}\ntailwind css\nPath to the CSS file that imports Tailwind CSS into your project components jsonCopy{\n\"tailwind\": {\n\"css\": \"styles/global css\"\n}\n}\ntailwind",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 470291,
      "relative_path": "documentation\\shadcn\\_docs_components-json.html",
      "source_type": "documentation"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "bb0b57609719dc9bb2d6ba48de0cbd76",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components-json.html",
    "source_type": "documentation",
    "title": "components.json - shadcn/ui",
    "content": "Tailwind CSS is set up in your project See the installation section for how to set up Tailwind CSS tailwind config Path to where your tailwind config js file is located For Tailwind CSS v4, leave this blank components jsonCopy{ \"tailwind\": { \"config\": \"tailwind config js\" | \"tailwind config ts\" } } tailwind css Path to the CSS file that imports Tailwind CSS into your project components jsonCopy{ \"tailwind\": { \"css\": \"styles/global css\" } } tailwindbaseColor\nThis is used to generate the default color palette for your components This cannot be changed after initialization components jsonCopy{\n\"tailwind\": {\n\"baseColor\": \"gray\" | \"neutral\" | \"slate\" | \"stone\" | \"zinc\"\n}\n}\ntailwind cssVariables\nYou can choose between using CSS variables or Tailwind CSS utility classes for theming To use utility classes for theming set tailwind cssVariables to false For CSS variables, set tailwind cssVariables to true components jsonCopy{\n\"tailwind\": {\n\"cssVariables\": `true` | `false`\n}\n}\nFor more information, see the theming docs This cannot be changed after initialization To switch between CSS variables and utility classes, you'll have to delete and re-install your components tailwind prefix\nThe prefix to use for your Tailwind CSS utility classes Components will be added with this prefix components jsonCopy{\n\"tailwind\": {\n\"prefix\": \"tw-\"\n}\n}\nrsc\nWhether or not to enable support for React Server Components The CLI automatically adds a use client directive to client components when set to true components jsonCopy{\n\"rsc\": `true` | `false`\n}\ntsx\nChoose between TypeScript or JavaScript components Setting this option to false allows components to be added as JavaScript with the jsx file extension components jsonCopy{\n\"tsx\": `true` | `false`\n}\naliases\nThe CLI uses these values and the paths config from your tsconfig json or jsconfig json file to place generated components in the correct location Path aliases have to be set up in your tsconfig json or jsconfig json file Important: If you're using the src directory, make sure it is included\nunder paths in your tsconfig json or jsconfig json file aliases utils\nImport alias for your utility functions components jsonCopy{\n\"aliases\": {\n\"utils\": \"@/lib/utils\"\n}\n}\naliases components\nImport alias for your components",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 470291,
      "relative_path": "documentation\\shadcn\\_docs_components-json.html",
      "source_type": "documentation"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "6a0eee7c3148c53f35e3cf9ed1562829",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components-json.html",
    "source_type": "documentation",
    "title": "components.json - shadcn/ui",
    "content": "from your tsconfig json or jsconfig json file to place generated components in the correct location Path aliases have to be set up in your tsconfig json or jsconfig json file Important: If you're using the src directory, make sure it is included under paths in your tsconfig json or jsconfig json file aliases utils Import alias for your utility functions components jsonCopy{ \"aliases\": { \"utils\": \"@/lib/utils\" } } aliases components Import alias for your componentscomponents jsonCopy{\n\"aliases\": {\n\"components\": \"@/components\"\n}\n}\naliases ui\nImport alias for ui components The CLI will use the aliases ui value to determine where to place your ui components Use this config if you want to customize the installation directory for your ui components components jsonCopy{\n\"aliases\": {\n\"ui\": \"@/app/ui\"\n}\n}\naliases lib\nImport alias for lib functions such as format-date or generate-id components jsonCopy{\n\"aliases\": {\n\"lib\": \"@/lib\"\n}\n}\naliases hooks\nImport alias for hooks such as use-media-query or use-toast components jsonCopy{\n\"aliases\": {\n\"hooks\": \"@/hooks\"\n}\n} InstallationTheming On This Page$schemastyletailwindtailwind configtailwind csstailwind baseColortailwind cssVariablestailwind prefixrsctsxaliasesaliases utilsaliases componentsaliases uialiases libaliases hooksDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 470291,
      "relative_path": "documentation\\shadcn\\_docs_components-json.html",
      "source_type": "documentation"
    },
    "token_count": 336,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "9a20b99b7d571627f4e7818bb30ab8f7",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components.html",
    "source_type": "documentation",
    "title": "Components - shadcn/ui",
    "content": "Components - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation...Search...⌘K92.8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents.jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext.jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext.jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry.jsonregistry-item.jsonComponentsCopy PagePreviousNextHere you can find all the components available in the library. We are working on adding more components.AccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypography Legacy DocsAccordion Deploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more.Vercel provides tools and infrastructure to deploy apps and features at scale.Deploy NowDeploy to VercelBuilt by shadcn at Vercel. The source code is available on GitHub.",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 288110,
      "relative_path": "documentation\\shadcn\\_docs_components.html",
      "source_type": "documentation"
    },
    "token_count": 342,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f61b3da74a6ca02601bb8b96b4e1d77a",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_accordion.html",
    "source_type": "documentation",
    "title": "Accordion - shadcn/ui",
    "content": "Accordion - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonAccordionCopy PagePreviousNextA vertically stacked set of interactive headings that each reveal a section of content Docs API Reference PreviewCodeProduct InformationOur flagship product combines cutting-edge technology with sleek design Built with premium materials, it offers unparalleled performance and reliability Key features include advanced processing capabilities, and an intuitive user interface designed for both beginners and experts Shipping DetailsReturn PolicyCopyimport {\nAccordion,\nAccordionContent,\nAccordionItem,\nAccordionTrigger,\n} from \"@/components/ui/accordion\"\nexport function AccordionDemo() {\nreturn (\n<Accordion\ntype=\"single\"\ncollapsible\nclassName=\"w-full\"\ndefaultValue=\"item-1\"\n>\n<AccordionItem value=\"item-1\">\n<AccordionTrigger>Product Information</AccordionTrigger>\n<AccordionContent className=\"flex flex-col gap-4 text-balance\">\n<p>\nOur flagship product combines cutting-edge technology with sleek\ndesign Built with premium materials, it offers unparalleled\nperformance and reliability </p>\n<p>\nKey features include advanced processing capabilities, and an\nintuitive user interface designed for both beginners and experts </p>\n</AccordionContent>\n</AccordionItem>\n<AccordionItem value=\"item-2\">\n<AccordionTrigger>Shipping Details</AccordionTrigger>\n<AccordionContent className=\"flex flex-col gap-4 text-balance\">\n<p>\nWe offer worldwide shipping through trusted courier partners Standard delivery takes 3-5 business days, while express shipping\nensures delivery within 1-2 business days </p>\n<p>\nAll orders are carefully packaged and fully insured Track your\nshipment in real-time through our dedicated tracking portal",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 406511,
      "relative_path": "documentation\\shadcn\\_docs_components_accordion.html",
      "source_type": "documentation"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "4f44915cb5b6c29db6b4a43a5a199046",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_accordion.html",
    "source_type": "documentation",
    "title": "Accordion - shadcn/ui",
    "content": "reliability </p> <p> Key features include advanced processing capabilities, and an intuitive user interface designed for both beginners and experts </p> </AccordionContent> </AccordionItem> <AccordionItem value=\"item-2\"> <AccordionTrigger>Shipping Details</AccordionTrigger> <AccordionContent className=\"flex flex-col gap-4 text-balance\"> <p> We offer worldwide shipping through trusted courier partners Standard delivery takes 3-5 business days, while express shipping ensures delivery within 1-2 business days </p> <p> All orders are carefully packaged and fully insured Track your shipment in real-time through our dedicated tracking portal</p>\n</AccordionContent>\n</AccordionItem>\n<AccordionItem value=\"item-3\">\n<AccordionTrigger>Return Policy</AccordionTrigger>\n<AccordionContent className=\"flex flex-col gap-4 text-balance\">\n<p>\nWe stand behind our products with a comprehensive 30-day return\npolicy If you&apos;re not completely satisfied, simply return the\nitem in its original condition </p>\n<p>\nOur hassle-free return process includes free return shipping and\nfull refunds processed within 48 hours of receiving the returned\nitem </p>\n</AccordionContent>\n</AccordionItem>\n</Accordion>\n)\n}\nInstallation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add accordionCopy\nUsage\nCopyimport {\nAccordion,\nAccordionContent,\nAccordionItem,\nAccordionTrigger,\n} from \"@/components/ui/accordion\"\nCopy<Accordion type=\"single\" collapsible>\n<AccordionItem value=\"item-1\">\n<AccordionTrigger>Is it accessible </AccordionTrigger>\n<AccordionContent>\nYes It adheres to the WAI-ARIA design pattern </AccordionContent>\n</AccordionItem>\n</Accordion> ComponentsAlert On This PageInstallationUsageDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 406511,
      "relative_path": "documentation\\shadcn\\_docs_components_accordion.html",
      "source_type": "documentation"
    },
    "token_count": 428,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "947515d85480f2a4b02457297fd255d8",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_alert-dialog.html",
    "source_type": "documentation",
    "title": "Alert Dialog - shadcn/ui",
    "content": "Alert Dialog - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonAlert DialogCopy PagePreviousNextA modal dialog that interrupts the user with important content and expects a response Docs API Reference PreviewCodeShow DialogCopyimport {\nAlertDialog,\nAlertDialogAction,\nAlertDialogCancel,\nAlertDialogContent,\nAlertDialogDescription,\nAlertDialogFooter,\nAlertDialogHeader,\nAlertDialogTitle,\nAlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\"\nimport { Button } from \"@/components/ui/button\"\nexport function AlertDialogDemo() {\nreturn (\n<AlertDialog>\n<AlertDialogTrigger asChild>\n<Button variant=\"outline\">Show Dialog</Button>\n</AlertDialogTrigger>\n<AlertDialogContent>\n<AlertDialogHeader>\n<AlertDialogTitle>Are you absolutely sure </AlertDialogTitle>\n<AlertDialogDescription>\nThis action cannot be undone This will permanently delete your\naccount and remove your data from our servers </AlertDialogDescription>\n</AlertDialogHeader>\n<AlertDialogFooter>\n<AlertDialogCancel>Cancel</AlertDialogCancel>\n<AlertDialogAction>Continue</AlertDialogAction>\n</AlertDialogFooter>\n</AlertDialogContent>\n</AlertDialog>\n)\n}\nInstallation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add alert-dialogCopy\nUsage\nCopyimport {\nAlertDialog,\nAlertDialogAction,\nAlertDialogCancel,\nAlertDialogContent,\nAlertDialogDescription,\nAlertDialogFooter,\nAlertDialogHeader,\nAlertDialogTitle,\nAlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\"\nCopy<AlertDialog>\n<AlertDialogTrigger>Open</AlertDialogTrigger>\n<AlertDialogContent>\n<AlertDialogHeader>\n<AlertDialogTitle>Are you absolutely sure </AlertDialogTitle>\n<AlertDialogDescription>\nThis action cannot be undone This will permanently delete your account\nand remove your data from our servers",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 429705,
      "relative_path": "documentation\\shadcn\\_docs_components_alert-dialog.html",
      "source_type": "documentation"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "bc565c9d7e79a0c9e5cc8daf440776e1",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_alert-dialog.html",
    "source_type": "documentation",
    "title": "Alert Dialog - shadcn/ui",
    "content": "action cannot be undone This will permanently delete your account and remove your data from our servers </AlertDialogDescription> </AlertDialogHeader> <AlertDialogFooter> <AlertDialogCancel>Cancel</AlertDialogCancel> <AlertDialogAction>Continue</AlertDialogAction> </AlertDialogFooter> </AlertDialogContent> </AlertDialog> ) } Installation CLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add alert-dialogCopy Usage Copyimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger, } from \"@/components/ui/alert-dialog\" Copy<AlertDialog> <AlertDialogTrigger>Open</AlertDialogTrigger> <AlertDialogContent> <AlertDialogHeader> <AlertDialogTitle>Are you absolutely sure </AlertDialogTitle> <AlertDialogDescription> This action cannot be undone This will permanently delete your account and remove your data from our servers</AlertDialogDescription>\n</AlertDialogHeader>\n<AlertDialogFooter>\n<AlertDialogCancel>Cancel</AlertDialogCancel>\n<AlertDialogAction>Continue</AlertDialogAction>\n</AlertDialogFooter>\n</AlertDialogContent>\n</AlertDialog> AlertAspect Ratio On This PageInstallationUsageDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 429705,
      "relative_path": "documentation\\shadcn\\_docs_components_alert-dialog.html",
      "source_type": "documentation"
    },
    "token_count": 286,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "417bb40548a260d093e081cb9af79082",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_aspect-ratio.html",
    "source_type": "documentation",
    "title": "Aspect Ratio - shadcn/ui",
    "content": "Aspect Ratio - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation...Search...⌘K92.8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents.jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext.jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext.jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry.jsonregistry-item.jsonAspect RatioCopy PagePreviousNextDisplays content within a desired ratio.Docs API Reference PreviewCodeCopyimport Image from \"next/image\"\nimport { AspectRatio } from \"@/components/ui/aspect-ratio\"\nexport function AspectRatioDemo() {\nreturn (\n<AspectRatio ratio={16 / 9} className=\"bg-muted rounded-lg\">\n<Image\nsrc=\"https://images.unsplash.com/photo-1588345921523-c2dcdb7f1dcd?w=800&dpr=2&q=80\"\nalt=\"Photo by Drew Beamer\"\nfill\nclassName=\"h-full w-full rounded-lg object-cover dark:brightness-[0.2] dark:grayscale\"\n/>\n</AspectRatio>\n)\n}\nInstallation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add aspect-ratioCopy\nUsage\nCopyimport { AspectRatio } from \"@/components/ui/aspect-ratio\"\nCopy<AspectRatio ratio={16 / 9}>\n<Image src=\"...\" alt=\"Image\" className=\"rounded-md object-cover\" />\n</AspectRatio> Alert DialogAvatar On This PageInstallationUsageDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more.Vercel provides tools and infrastructure to deploy apps and features at scale.Deploy NowDeploy to VercelBuilt by shadcn at Vercel. The source code is available on GitHub.",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 348113,
      "relative_path": "documentation\\shadcn\\_docs_components_aspect-ratio.html",
      "source_type": "documentation"
    },
    "token_count": 468,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6095695981979cf66e4576ac95cae891",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_alert.html",
    "source_type": "documentation",
    "title": "Alert - shadcn/ui",
    "content": "Alert - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonAlertCopy PagePreviousNextDisplays a callout for user attention PreviewCodeSuccess Your changes have been savedThis is an alert with icon, title and description This Alert has a title and an icon No description Unable to process your payment Please verify your billing information and try again Check your card detailsEnsure sufficient fundsVerify billing addressCopyimport { AlertCircleIcon, CheckCircle2Icon, PopcornIcon } from \"lucide-react\"\nimport {\nAlert,\nAlertDescription,\nAlertTitle,\n} from \"@/components/ui/alert\"\nexport function AlertDemo() {\nreturn (\n<div className=\"grid w-full max-w-xl items-start gap-4\">\n<Alert>\n<CheckCircle2Icon />\n<AlertTitle>Success Your changes have been saved</AlertTitle>\n<AlertDescription>\nThis is an alert with icon, title and description </AlertDescription>\n</Alert>\n<Alert>\n<PopcornIcon />\n<AlertTitle>\nThis Alert has a title and an icon No description </AlertTitle>\n</Alert>\n<Alert variant=\"destructive\">\n<AlertCircleIcon />\n<AlertTitle>Unable to process your payment </AlertTitle>\n<AlertDescription>\n<p>Please verify your billing information and try again",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 376888,
      "relative_path": "documentation\\shadcn\\_docs_components_alert.html",
      "source_type": "documentation"
    },
    "token_count": 416,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "78a4a6215af5f46f2c4472f7e480098e",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_alert.html",
    "source_type": "documentation",
    "title": "Alert - shadcn/ui",
    "content": "import { Alert, AlertDescription, AlertTitle, } from \"@/components/ui/alert\" export function AlertDemo() { return ( <div className=\"grid w-full max-w-xl items-start gap-4\"> <Alert> <CheckCircle2Icon /> <AlertTitle>Success Your changes have been saved</AlertTitle> <AlertDescription> This is an alert with icon, title and description </AlertDescription> </Alert> <Alert> <PopcornIcon /> <AlertTitle> This Alert has a title and an icon No description </AlertTitle> </Alert> <Alert variant=\"destructive\"> <AlertCircleIcon /> <AlertTitle>Unable to process your payment </AlertTitle> <AlertDescription> <p>Please verify your billing information and try again</p>\n<ul className=\"list-inside list-disc text-sm\">\n<li>Check your card details</li>\n<li>Ensure sufficient funds</li>\n<li>Verify billing address</li>\n</ul>\n</AlertDescription>\n</Alert>\n</div>\n)\n}\nInstallation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add alertCopy\nUsage\nCopyimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\"\nCopy<Alert variant=\"default | destructive\">\n<Terminal />\n<AlertTitle>Heads up </AlertTitle>\n<AlertDescription>\nYou can add components and dependencies to your app using the cli </AlertDescription>\n</Alert> AccordionAlert Dialog On This PageInstallationUsageDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 376888,
      "relative_path": "documentation\\shadcn\\_docs_components_alert.html",
      "source_type": "documentation"
    },
    "token_count": 367,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "8b804d8cb7697d25d32ef1e1f6c5e8f8",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_avatar.html",
    "source_type": "documentation",
    "title": "Avatar - shadcn/ui",
    "content": "Avatar - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonAvatarCopy PagePreviousNextAn image element with a fallback for representing the user Docs API Reference PreviewCodeCNERCNLRERCopyimport {\nAvatar,\nAvatarFallback,\nAvatarImage,\n} from \"@/components/ui/avatar\"\nexport function AvatarDemo() {\nreturn (\n<div className=\"flex flex-row flex-wrap items-center gap-12\">\n<Avatar>\n<AvatarImage src=\"https://github com/shadcn png\" alt=\"@shadcn\" />\n<AvatarFallback>CN</AvatarFallback>\n</Avatar>\n<Avatar className=\"rounded-lg\">\n<AvatarImage\nsrc=\"https://github com/evilrabbit png\"\nalt=\"@evilrabbit\"\n/>\n<AvatarFallback>ER</AvatarFallback>\n</Avatar>\n<div className=\"*:data-[slot=avatar]:ring-background flex -space-x-2 *:data-[slot=avatar]:ring-2 *:data-[slot=avatar]:grayscale\">\n<Avatar>\n<AvatarImage src=\"https://github com/shadcn png\" alt=\"@shadcn\" />\n<AvatarFallback>CN</AvatarFallback>\n</Avatar>\n<Avatar>\n<AvatarImage src=\"https://github com/leerob png\" alt=\"@leerob\" />\n<AvatarFallback>LR</AvatarFallback>\n</Avatar>\n<Avatar>\n<AvatarImage\nsrc=\"https://github com/evilrabbit",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 378810,
      "relative_path": "documentation\\shadcn\\_docs_components_avatar.html",
      "source_type": "documentation"
    },
    "token_count": 449,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "f0f4a3aee0b2cd792a27369f4b995b9f",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_avatar.html",
    "source_type": "documentation",
    "title": "Avatar - shadcn/ui",
    "content": "a fallback for representing the user Docs API Reference PreviewCodeCNERCNLRERCopyimport { Avatar, AvatarFallback, AvatarImage, } from \"@/components/ui/avatar\" export function AvatarDemo() { return ( <div className=\"flex flex-row flex-wrap items-center gap-12\"> <Avatar> <AvatarImage src=\"https://github com/shadcn png\" alt=\"@shadcn\" /> <AvatarFallback>CN</AvatarFallback> </Avatar> <Avatar className=\"rounded-lg\"> <AvatarImage src=\"https://github com/evilrabbit png\" alt=\"@evilrabbit\" /> <AvatarFallback>ER</AvatarFallback> </Avatar> <div className=\"*:data-[slot=avatar]:ring-background flex -space-x-2 *:data-[slot=avatar]:ring-2 *:data-[slot=avatar]:grayscale\"> <Avatar> <AvatarImage src=\"https://github com/shadcn png\" alt=\"@shadcn\" /> <AvatarFallback>CN</AvatarFallback> </Avatar> <Avatar> <AvatarImage src=\"https://github com/leerob png\" alt=\"@leerob\" /> <AvatarFallback>LR</AvatarFallback> </Avatar> <Avatar> <AvatarImage src=\"https://github com/evilrabbitpng\"\nalt=\"@evilrabbit\"\n/>\n<AvatarFallback>ER</AvatarFallback>\n</Avatar>\n</div>\n</div>\n)\n}\nInstallation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add avatarCopy\nUsage\nCopyimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nCopy<Avatar>\n<AvatarImage src=\"https://github com/shadcn png\" />\n<AvatarFallback>CN</AvatarFallback>\n</Avatar> Aspect RatioBadge On This PageInstallationUsageDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 378810,
      "relative_path": "documentation\\shadcn\\_docs_components_avatar.html",
      "source_type": "documentation"
    },
    "token_count": 432,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c6ee1a45f3f2317a8c0bcac9ecc01b86",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_badge.html",
    "source_type": "documentation",
    "title": "Badge - shadcn/ui",
    "content": "Badge - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonBadgeCopy PagePreviousNextDisplays a badge or a component that looks like a badge",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 382415,
      "relative_path": "documentation\\shadcn\\_docs_components_badge.html",
      "source_type": "documentation"
    },
    "token_count": 195,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "a917ffea08bd34494c068b6e2d743813",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_badge.html",
    "source_type": "documentation",
    "title": "Badge - shadcn/ui",
    "content": "Badge - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonBadgeCopy PagePreviousNextDisplays a badge or a component that looks like a badgePreviewCodeBadgeSecondaryDestructiveOutlineVerified89920+Copyimport { AlertCircleIcon, BadgeCheckIcon, CheckIcon } from \"lucide-react\"\nimport { Badge } from \"@/components/ui/badge\"\nexport function BadgeDemo() {\nreturn (\n<div className=\"flex flex-col items-center gap-2\">\n<div className=\"flex w-full flex-wrap gap-2\">\n<Badge>Badge</Badge>\n<Badge variant=\"secondary\">Secondary</Badge>\n<Badge variant=\"destructive\">Destructive</Badge>\n<Badge variant=\"outline\">Outline</Badge>\n</div>\n<div className=\"flex w-full flex-wrap gap-2\">\n<Badge\nvariant=\"secondary\"\nclassName=\"bg-blue-500 text-white dark:bg-blue-600\"\n>\n<BadgeCheckIcon />\nVerified\n</Badge>\n<Badge className=\"h-5 min-w-5 rounded-full px-1 font-mono tabular-nums\">\n8\n</Badge>\n<Badge\nclassName=\"h-5 min-w-5 rounded-full px-1 font-mono tabular-nums\"\nvariant=\"destructive\"\n>\n99\n</Badge>\n<Badge\nclassName=\"h-5 min-w-5 rounded-full px-1 font-mono tabular-nums\"\nvariant=\"outline\"\n>\n20+\n</Badge>\n</div>\n</div>\n)\n}\nInstallation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add badgeCopy\nUsage\nCopyimport { Badge } from \"@/components/ui/badge\"\nCopy<Badge variant=\"default |outline | secondary | destructive\">Badge</Badge>\nLink\nYou can use the asChild prop to make another component look like a badge",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 382415,
      "relative_path": "documentation\\shadcn\\_docs_components_badge.html",
      "source_type": "documentation"
    },
    "token_count": 538,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "c7e4efd4a418db335a0425f65f459803",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_badge.html",
    "source_type": "documentation",
    "title": "Badge - shadcn/ui",
    "content": "dark:bg-blue-600\" > <BadgeCheckIcon /> Verified </Badge> <Badge className=\"h-5 min-w-5 rounded-full px-1 font-mono tabular-nums\"> 8 </Badge> <Badge className=\"h-5 min-w-5 rounded-full px-1 font-mono tabular-nums\" variant=\"destructive\" > 99 </Badge> <Badge className=\"h-5 min-w-5 rounded-full px-1 font-mono tabular-nums\" variant=\"outline\" > 20+ </Badge> </div> </div> ) } Installation CLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add badgeCopy Usage Copyimport { Badge } from \"@/components/ui/badge\" Copy<Badge variant=\"default |outline | secondary | destructive\">Badge</Badge> Link You can use the asChild prop to make another component look like a badgeHere's an example of a link that looks like a badge Copyimport { Link } from \"next/link\"\nimport { Badge } from \"@/components/ui/badge\"\nexport function LinkAsBadge() {\nreturn (\n<Badge asChild>\n<Link href=\"/\">Badge</Link>\n</Badge>\n)\n} AvatarBreadcrumb On This PageInstallationUsageLinkDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 382415,
      "relative_path": "documentation\\shadcn\\_docs_components_badge.html",
      "source_type": "documentation"
    },
    "token_count": 319,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "e4060e14c896a24e67d4eba363f5ab5b",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_button.html",
    "source_type": "documentation",
    "title": "Button - shadcn/ui",
    "content": "Button - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonButtonCopy PagePreviousNextDisplays a button or a component that looks like a button PreviewCodeButtonCopyimport { Button } from \"@/components/ui/button\"\nexport function ButtonDemo() {\nreturn (\n<div className=\"flex flex-wrap items-center gap-2 md:flex-row\">\n<Button>Button</Button>\n</div>\n)\n}\nInstallation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add buttonCopy\nUsage\nCopyimport { Button } from \"@/components/ui/button\"\nCopy<Button variant=\"outline\">Button</Button>\nLink\nYou can use the asChild prop to make another component look like a button Here's an example of a link that looks like a button",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 473180,
      "relative_path": "documentation\\shadcn\\_docs_components_button.html",
      "source_type": "documentation"
    },
    "token_count": 319,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "c8837e3fa934f88fc481d861e35fc703",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_button.html",
    "source_type": "documentation",
    "title": "Button - shadcn/ui",
    "content": "jsonregistry-item jsonButtonCopy PagePreviousNextDisplays a button or a component that looks like a button PreviewCodeButtonCopyimport { Button } from \"@/components/ui/button\" export function ButtonDemo() { return ( <div className=\"flex flex-wrap items-center gap-2 md:flex-row\"> <Button>Button</Button> </div> ) } Installation CLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add buttonCopy Usage Copyimport { Button } from \"@/components/ui/button\" Copy<Button variant=\"outline\">Button</Button> Link You can use the asChild prop to make another component look like a button Here's an example of a link that looks like a buttonCopyimport { Link } from \"next/link\"\nimport { Button } from \"@/components/ui/button\"\nexport function LinkAsButton() {\nreturn (\n<Button asChild>\n<Link href=\"/login\">Login</Link>\n</Button>\n)\n}\nExamples\nDefault\nPreviewCodeButtonCopyimport { Button } from \"@/components/ui/button\"\nexport function ButtonDemo() {\nreturn (\n<div className=\"flex flex-wrap items-center gap-2 md:flex-row\">\n<Button>Button</Button>\n</div>\n)\n}\nSecondary\nPreviewCodeSecondaryCopyimport { Button } from \"@/components/ui/button\"\nexport function ButtonSecondary() {\nreturn <Button variant=\"secondary\">Secondary</Button>\n}\nDestructive\nPreviewCodeDestructiveCopyimport { Button } from \"@/components/ui/button\"\nexport function ButtonDestructive() {\nreturn <Button variant=\"destructive\">Destructive</Button>\n}\nOutline\nPreviewCodeOutlineCopyimport { Button } from \"@/components/ui/button\"\nexport function ButtonOutline() {\nreturn <Button variant=\"outline\">Outline</Button>\n}\nGhost\nPreviewCodeGhostCopyimport { Button } from \"@/components/ui/button\"\nexport function ButtonGhost() {\nreturn <Button variant=\"ghost\">Ghost</Button>\n}\nLink\nPreviewCodeLinkCopyimport { Button } from \"@/components/ui/button\"\nexport function ButtonLink() {\nreturn <Button variant=\"link\">Link</Button>\n}\nIcon\nPreviewCodeCopyimport { ChevronRightIcon } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nexport function ButtonIcon() {\nreturn (\n<Button variant=\"secondary\" size=\"icon\" className=\"size-8\">\n<ChevronRightIcon />\n</Button>\n)\n}\nWith Icon\nPreviewCode New BranchCopyimport { IconGitBranch } from \"@tabler/icons-react\"\nimport { Button } from \"@/components/ui/button\"\nexport function ButtonWithIcon() {\nreturn (\n<Button variant=\"outline\" size=\"sm\">\n<IconGitBranch /> New Branch\n</Button>\n)\n}\nLoading\nPreviewCodePlease waitCopyimport { Loader2Icon } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nexport function ButtonLoading() {\nreturn (\n<Button size=\"sm\" disabled>\n<Loader2Icon className=\"animate-spin\" />\nPlease wait\n</Button>\n)\n}\nBreadcrumbCalendar On This PageInstallationUsageLinkExamplesDefaultSecondaryDestructiveOutlineGhostLinkIconWith IconLoadingDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 473180,
      "relative_path": "documentation\\shadcn\\_docs_components_button.html",
      "source_type": "documentation"
    },
    "token_count": 652,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "71d6fd4048bb22f9e1bada3a98dbc034",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_button.html",
    "source_type": "documentation",
    "title": "Button - shadcn/ui",
    "content": "New BranchCopyimport { IconGitBranch } from \"@tabler/icons-react\" import { Button } from \"@/components/ui/button\" export function ButtonWithIcon() { return ( <Button variant=\"outline\" size=\"sm\"> <IconGitBranch /> New Branch </Button> ) } Loading PreviewCodePlease waitCopyimport { Loader2Icon } from \"lucide-react\" import { Button } from \"@/components/ui/button\" export function ButtonLoading() { return ( <Button size=\"sm\" disabled> <Loader2Icon className=\"animate-spin\" /> Please wait </Button> ) } BreadcrumbCalendar On This PageInstallationUsageLinkExamplesDefaultSecondaryDestructiveOutlineGhostLinkIconWith IconLoadingDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and moreVercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 473180,
      "relative_path": "documentation\\shadcn\\_docs_components_button.html",
      "source_type": "documentation"
    },
    "token_count": 202,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "e0a8e57f8184dc7049b8febafda12af9",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_overview_releases.html",
    "source_type": "documentation",
    "title": "Releases – Radix Primitives",
    "content": "Releases – Radix PrimitivesRadix HomepageMade by WorkOSRadix HomepageMade by WorkOSThemesThemesPrimitivesPrimitivesIconsIconsColorsColorsDocumentationCase studiesBlogSearch/OverviewIntroductionGetting startedAccessibilityReleasesGuidesStylingAnimationCompositionServer-side renderingComponentsAccordionAlert DialogAspect RatioAvatarCheckboxCollapsibleContext MenuDialogDropdown MenuFormPreviewHover CardLabelMenubarNavigation MenuOne-Time Password FieldPreviewPassword Toggle FieldPreviewPopoverProgressRadio GroupScroll AreaSelectSeparatorSliderSwitchTabsToastToggleToggle GroupToolbarTooltipUtilitiesAccessible IconDirection ProviderPortalSlotVisually HiddenOverviewReleases\nRadix Primitives releases and their changelogs May 5, 2025\nThis release introduces a brand new primitive in preview: PasswordToggleField This new primitive provides components for rendering a password input alongside a button to toggle its visibility Aside from its primary functionality, it also includes:\nReturning focus to the input when toggling with a pointer\nMaintaining focus when toggling with keyboard or virtual navigation\nResetting visibility to hidden after form submission to prevent accidental storage\nImplicit accessible labeling for icon-based toggle buttons\nThis API is currently unstable, and we hope you'll help us test it out Import the primitive using the unstable_ prefix import { unstable_PasswordToggleField as PasswordToggleField } from \"radix-ui\";\nexport function PasswordField() {\nreturn (\n<PasswordToggleField Root>\n<PasswordToggleField Input />\n<PasswordToggleField Toggle>\n<PasswordToggleField Icon\nvisible={<EyeOpenIcon />}\nhidden={<EyeClosedIcon />}\n/>\n</PasswordToggleField Toggle>\n</PasswordToggleField Root>\n);\n}\nOther updates\nAdd unstable Provider, Trigger and BubbleInput parts to Checkbox (#3459)\nUpdate default input type to text and pass to the underlying input element (#3510)\nApril 22, 2025\nUpdate the dependency for use-sync-external-store to ensure entrypoint is valid – #3491\nApril 17, 2025\nThis release introduces a brand new primitive in preview: OneTimePasswordField This new group of components are designed to implement a common design pattern for one-time password fields displayed as separate input fields for each character This UI is deceptively complex to implement in such a way that interactions follow user expectations",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 577758,
      "relative_path": "documentation\\radix\\_primitives_docs_overview_releases.html",
      "source_type": "documentation"
    },
    "token_count": 450,
    "chunk_index": 0,
    "total_chunks": 24
  },
  {
    "id": "a8abe87ef827164ace46317f707ca2ca",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_overview_releases.html",
    "source_type": "documentation",
    "title": "Releases – Radix Primitives",
    "content": "pass to the underlying input element (#3510) April 22, 2025 Update the dependency for use-sync-external-store to ensure entrypoint is valid – #3491 April 17, 2025 This release introduces a brand new primitive in preview: OneTimePasswordField This new group of components are designed to implement a common design pattern for one-time password fields displayed as separate input fields for each character This UI is deceptively complex to implement in such a way that interactions follow user expectationsThe new primitive handles all of this complexity for you, including:\nKeyboard navigation mimicking the behavior of a single input field\nOverriding values on paste\nPassword manager autofill support\nInput validation for numeric and alphanumeric values\nAuto-submit on completion\nFocus management\nHidden input to provide a single value to form data\nAs this is a preview release, the API is currently unstable We hope you'll help us test it out and let us know how it goes Import the primitive using the unstable_ prefix import { unstable_OneTimePasswordField as OneTimePasswordField } from \"radix-ui\";\nexport function Verify() {\nreturn (\n<OneTimePasswordField Root>\n<OneTimePasswordField Input />\n<OneTimePasswordField Input />\n<OneTimePasswordField Input />\n<OneTimePasswordField Input />\n<OneTimePasswordField Input />\n<OneTimePasswordField Input />\n<OneTimePasswordField HiddenInput />\n</OneTimePasswordField Root>\n);\n}\nOther updates\nAll form controls with internal bubble inputs now use the Radix Primitive component by default This will allow us to expose these components in a future release so users can better control this behavior in the future Minor improvements to useControllableState to enhance performance, reduce surface area for bugs, and log warnings when misused\nApril 8, 2025\nImproved rendering performance for the Tooltip provider – #2720\nEnsure Tooltip is closed when pointerdown is fired on the trigger – #3380\nAdd support for crossOrigin in Avatar images – #3261\nFix Avatar flashing when an image is already cached – #3008\nImprove displayName for better debugging of slottable components – #3441\nFebruary 5, 2025\nUpdated dependencies to remove peer dependency warnings for react and react-dom – #3350\nSkip forwarding refs to SlotClone when the child is a Fragment – #3229\nJanuary 22, 2025\nAdded a radix-ui package that exposes the latest version of all Radix Primitives from a single place",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 577758,
      "relative_path": "documentation\\radix\\_primitives_docs_overview_releases.html",
      "source_type": "documentation"
    },
    "token_count": 496,
    "chunk_index": 1,
    "total_chunks": 24
  },
  {
    "id": "27a122f91ccaa55d500d762d8ca17dc0",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_overview_releases.html",
    "source_type": "documentation",
    "title": "Releases – Radix Primitives",
    "content": "crossOrigin in Avatar images – #3261 Fix Avatar flashing when an image is already cached – #3008 Improve displayName for better debugging of slottable components – #3441 February 5, 2025 Updated dependencies to remove peer dependency warnings for react and react-dom – #3350 Skip forwarding refs to SlotClone when the child is a Fragment – #3229 January 22, 2025 Added a radix-ui package that exposes the latest version of all Radix Primitives from a single placeThis tree-shakable entrypoint makes it easier to bring in whatever components you need and keep them up-to-date without worrying about conflicting or duplicate dependencies Updated aria-hidden and react-remove-scroll dependencies for the following components:\nAlert Dialog\nContext Menu\nDialog\nDropdown Menu\nHover Card\nMenubar\nNavigation Menu\nPopover\nSelect\nToast\nTooltip\nOctober 1, 2024\nAlert Dialog1 1 2\nFix allowPinchZoom bug for trackpad users – #3127\nAvatar1 1 1\nCheck for referrerPolicy when checking the image loading status – #2772\nCheckbox1 1 2\nFix a bug where defaultChecked unexpectedly changed for uncontrolled checkboxes – #2135\nForward the form prop to the bubble input element to fix non-parent form submissions – #3161\nDialog1 1 2\nFix allowPinchZoom bug for trackpad users – #3127\nRadio Group1 2 1\nForward the form prop to the bubble input element to fix non-parent form submissions – #3161\nScroll Area1 2 0\nFix asChild prop not working as expected on the Viewport – #2945\nUpdate internal styles to fix other issues with Viewport – #2945\nSelect2 1 2\nFix error thrown when items are initially undefined – #2623\nFix several bugs for touch devices – #2939\nForward the form prop to the bubble input element to fix non-parent form submissions – #3161\nFix position bug where popover may start off-screen for long items – #3149\nSlider1 2 1\nForward the root form prop to each thumb's bubble input element to fix non-parent form submissions – #3161\nSwitch1 1 1\nForward the form prop to the bubble input element to fix non-parent form submissions – #3161\nToast1 2 2\nFix incorrect focus when hotkey is an empty array – #2491\nJune 28, 2024\nCheckbox1 1",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 577758,
      "relative_path": "documentation\\radix\\_primitives_docs_overview_releases.html",
      "source_type": "documentation"
    },
    "token_count": 520,
    "chunk_index": 2,
    "total_chunks": 24
  },
  {
    "id": "fcf5d396c82b48db6dcb65b40c5e51c9",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_overview_releases.html",
    "source_type": "documentation",
    "title": "Releases – Radix Primitives",
    "content": "form submissions – #3161 Fix position bug where popover may start off-screen for long items – #3149 Slider1 2 1 Forward the root form prop to each thumb's bubble input element to fix non-parent form submissions – #3161 Switch1 1 1 Forward the form prop to the bubble input element to fix non-parent form submissions – #3161 Toast1 2 2 Fix incorrect focus when hotkey is an empty array – #2491 June 28, 2024 Checkbox1 11\nExport CheckedState type\nTooltip1 1 2\nExport TooltipProviderProps type\nJune 21, 2024\nPortal1 1 1\nAdd a missing internal utility to package json The corresponding packages that provide a Portal part also received a patch update – #2966\nJune 19, 2024\nAll primitives\nReleased minor versions for all primitives with the following changes:\nFull React 19 compatability – #2952\nFull RSC compatibility – #2923\nInternal build tooling changes – #2922 – #2931\nUpdate and pin react-remove-scroll dependency version to avoid double scrollbar bugs in edge cases – #2776\nDon’t scroll menu items in response to hover – #2451\nMake sure that components that close on Escape key press capture the corresponding keyboard event This way you can call stopPropagation in onEscapeKeyDown if you need more control rendering Radix components within another component that closes on Escape key press Make sure that components with roving focus do not interfere with browser or system hotkeys, such as back navigation – #2739\nMake sure that components that support hideWhenDetached prop do not allow interactions with hidden content – #2743 – #2745\nDialog1 1 0\nLog an error when an accessible title via the Dialog Title part is missing – #2948\nLog a warning when an accessible description via the Dialog Description part is missing – #2948\nLabel2 1 0\nMake sure that the component doesn’t interfere when clicking on the spinner of a number input\nNavigation Menu1 2 0\nRemove unsupported disableOutsidePointerEvents prop\nPortal1 1 0\nFix hydration error in SSR on the initial render – #2923\nProgress1 2 0\nExplicitly allow value={undefined} to represent an indeterminate state, matching the current practical behaviour – #2947\nSelect2 1",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 577758,
      "relative_path": "documentation\\radix\\_primitives_docs_overview_releases.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 3,
    "total_chunks": 24
  },
  {
    "id": "8272ee443992a95787e6d98cd92fcf5d",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_overview_releases.html",
    "source_type": "documentation",
    "title": "Releases – Radix Primitives",
    "content": "a warning when an accessible description via the Dialog Description part is missing – #2948 Label2 1 0 Make sure that the component doesn’t interfere when clicking on the spinner of a number input Navigation Menu1 2 0 Remove unsupported disableOutsidePointerEvents prop Portal1 1 0 Fix hydration error in SSR on the initial render – #2923 Progress1 2 0 Explicitly allow value={undefined} to represent an indeterminate state, matching the current practical behaviour – #2947 Select2 10\nAdd nonce prop to be able to pass CSP nonce to the inline styles – #2728\nScroll Area1 1 0\nAdd nonce prop to be able to pass CSP nonce to the inline styles – #2728\nSeptember 25, 2023\nAlert Dialog1 0 5\nFix pointer-events issue when clicking outside – #2177\nFix Portal part types lying about accepting DOM props – #2178\nAvatar1 0 4\nPrevent image flash – #2340\nContext Menu2 1 5\nFix pointer-events issue when clicking outside – #2177\nFix Portal part types lying about accepting DOM props – #2178\nDialog1 0 5\nFix pointer-events issue when clicking outside – #2177\nFix Portal part types lying about accepting DOM props – #2178\nDropdown Menu2 0 6\nFix pointer-events issue when clicking outside – #2177\nFix Portal part types lying about accepting DOM props – #2178\nHover Card1 0 7\nFix pointer-events issue when clicking outside – #2177\nFix Portal part types lying about accepting DOM props – #2178\nMenubar1 0 4\nFix pointer-events issue when clicking outside – #2177\nFix Portal part types lying about accepting DOM props – #2178\nNavigation Menu1 1 4\nFix pointer-events issue when clicking outside – #2177\nFix Portal part types lying about accepting DOM props – #2178\nPopover1 0 7\nFix pointer-events issue when clicking outside – #2177\nFix Portal part types lying about accepting DOM props – #2178\nFix Popover nested inside Dialog not opening – #2182\nScroll Area1 0 5\nAdd scroll-behavior: smooth compatibility – #2175\nSelect2 0 0Major\n[Breaking] Add ability to reset to placeholder using \"\" value Note that this is only a breaking change if you were using an option with a value of \"\"",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 577758,
      "relative_path": "documentation\\radix\\_primitives_docs_overview_releases.html",
      "source_type": "documentation"
    },
    "token_count": 520,
    "chunk_index": 4,
    "total_chunks": 24
  },
  {
    "id": "2a1cd984bf04f1a90c28846366f0df5e",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_overview_releases.html",
    "source_type": "documentation",
    "title": "Releases – Radix Primitives",
    "content": "props – #2178 Popover1 0 7 Fix pointer-events issue when clicking outside – #2177 Fix Portal part types lying about accepting DOM props – #2178 Fix Popover nested inside Dialog not opening – #2182 Scroll Area1 0 5 Add scroll-behavior: smooth compatibility – #2175 Select2 0 0Major [Breaking] Add ability to reset to placeholder using \"\" value Note that this is only a breaking change if you were using an option with a value of \"\"– #2174\nFix pointer-events issue when clicking outside – #2177\nFix Portal part types lying about accepting DOM props – #2178\nToast1 1 5\nFix pointer-events issue when clicking outside – #2177\nTooltip1 0 7\nFix pointer-events issue when clicking outside – #2177\nFix Portal part types lying about accepting DOM props – #2178\nFix issue with boundary padding calculations – #2185\nAdd option to always re-position Content on the fly – #2092\nMay 26, 2023\nThis release ensures all of our primitives are ESM compatible We have also updated to the latest version of Floating UI for all of our popper-positioned primitives All primitives\nImprove ESM compatibility – #2130\nFix possible upstream compiler errors (@types/react phantom dependency) – #1896\nContext Menu2 1 4\nPosition content correctly when matching trigger size – #1995\nDialog1 0 4\nPrevent non-modal dialog from re-opening when closing using trigger in Safari – #2110\nEnsure focus trapping is maintained when the focused item is deleted – #2145\nDropdown Menu2 0 5\nPosition content correctly when matching trigger size – #1995\nHover Card1 0 6\nPosition content correctly when matching trigger size – #1995\nMenubar1 0 3\nPosition content correctly when matching trigger size – #1995\nNavigation Menu1 1 3\nDo not close when clicking items and meta key is down – #2080\nPopover1 0 6\nPosition content correctly when matching trigger size – #1995\nPrevent non-modal popover from re-opening when closing using trigger in Safari – #2110\nEnsure --radix-popper-available-width is calculated correctly when using collisionBoundary – #2032\nSelect1 2 2\nPosition content correctly when matching trigger size – #1995\nImprove scroll buttons touch screen support – #1771\nSlider1 1",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 577758,
      "relative_path": "documentation\\radix\\_primitives_docs_overview_releases.html",
      "source_type": "documentation"
    },
    "token_count": 521,
    "chunk_index": 5,
    "total_chunks": 24
  },
  {
    "id": "1689195f0a40f9e21b69482e305a45bb",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_overview_releases.html",
    "source_type": "documentation",
    "title": "Releases – Radix Primitives",
    "content": "– #1995 Navigation Menu1 1 3 Do not close when clicking items and meta key is down – #2080 Popover1 0 6 Position content correctly when matching trigger size – #1995 Prevent non-modal popover from re-opening when closing using trigger in Safari – #2110 Ensure --radix-popper-available-width is calculated correctly when using collisionBoundary – #2032 Select1 2 2 Position content correctly when matching trigger size – #1995 Improve scroll buttons touch screen support – #1771 Slider1 12\nClamp thumb position within range – #1988\nSlot1 0 2\nEnsure Slot can be used in a React Server Component – #2116\nTooltip1 0 6\nPosition content correctly when matching trigger size – #1995\nImprove large content hoverability – #2155\nMarch 8, 2023\nThis release introduces a brand new primitive in preview: Form Form0 0 2Preview\nNew primitive – #1998\nFebruary 24, 2023\nCheckbox1 0 2\nReset checkbox state when form is reset – #1733\nContextMenu2 1 2\nExpose new CSS custom properties to enable size constraints – #1942\nDon't exit fullscreen mode when pressing escape to dismiss from submenu – #1752\nRelax onCheckedChange type on ContextMenu CheckboxItem – #1778\nDropdownMenu2 0 3\nExpose new CSS custom properties to enable size constraints – #1942\nDon't exit fullscreen mode when pressing escape to dismiss from submenu – #1752\nRelax onCheckedChange type on DropdownMenu CheckboxItem – #1778\nHoverCard1 0 4\nExpose new CSS custom properties to enable size constraints – #1942\nMenubar1 0 1\nExpose new CSS custom properties to enable size constraints – #1943\nDon't exit fullscreen mode when pressing escape to dismiss from submenu – #1752\nRelax onCheckedChange type on Menubar CheckboxItem – #1778\nPopover1 0 4\nExpose new CSS custom properties to enable size constraints – #1942\nTooltip1 0 4\nExpose new CSS custom properties to enable size constraints – #1942\nJanuary 17, 2023\nThis release introduces a brand new primitive: Menubar It also adds support for a highly requested feature for Select: the ability to position the content in a similar way to Popover or DropdownMenu Accordion1 1",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 577758,
      "relative_path": "documentation\\radix\\_primitives_docs_overview_releases.html",
      "source_type": "documentation"
    },
    "token_count": 515,
    "chunk_index": 6,
    "total_chunks": 24
  },
  {
    "id": "4c1a64754bc299ab0d02d6292668744e",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_overview_releases.html",
    "source_type": "documentation",
    "title": "Releases – Radix Primitives",
    "content": "– #1752 Relax onCheckedChange type on Menubar CheckboxItem – #1778 Popover1 0 4 Expose new CSS custom properties to enable size constraints – #1942 Tooltip1 0 4 Expose new CSS custom properties to enable size constraints – #1942 January 17, 2023 This release introduces a brand new primitive: Menubar It also adds support for a highly requested feature for Select: the ability to position the content in a similar way to Popover or DropdownMenu Accordion1 10\nAdd horizontal orientation support with new orientation prop, as well as RTL support with dir – #1850\nContext Menu2 1 1\nFix consistency issue with RTL positioning – #1890\nDropdown Menu2 0 2\nFix consistency issue with RTL positioning – #1890\nHover Card1 0 3\nFix consistency issue with RTL positioning – #1890\nMenubar1 0 0Major\nNew primitive – #1846\nPopover1 0 3\nFix consistency issue with RTL positioning – #1890\nSelect1 2 0\nAdd position prop to Select Content to enable popper positioning – #1853\nTooltip1 0 3\nFix consistency issue with RTL positioning – #1890\nDecember 14, 2022\nContext Menu2 1 0\nAdd disabled prop to ContextMenu Trigger – #1746\nNovember 15, 2022\nSelect1 1 2\nFix invalid pointerId in Cypress when running Firefox – #1753\nOctober 17, 2022\nAccordion1 0 1\nFix initial animation playback in Firefox and Safari – #1710\nAlert Dialog1 0 2\nFix issue with textarea elements not being scrollable in Firefox – #1550\nCollapsible1 0 1\nFix initial animation playback in Firefox and Safari – #1710\nContext Menu2 0 1Major\n[Breaking] Add support for indeterminate state on ContextMenu CheckboxItem Note that this is only a breaking change if you are currently using the CheckboxItem part and your codebase is written in TypeScript – #1624\nDialog1 0 2\nFix issue with textarea elements not being scrollable in Firefox – #1550\nDropdown Menu2 0 1Major\n[Breaking] Add support for indeterminate state on DropdownMenu CheckboxItem Note that this is only a breaking change if you are currently using the CheckboxItem part and your codebase is written in TypeScript – #1624\nCorrectly pair DropdownMenu",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 577758,
      "relative_path": "documentation\\radix\\_primitives_docs_overview_releases.html",
      "source_type": "documentation"
    },
    "token_count": 527,
    "chunk_index": 7,
    "total_chunks": 24
  },
  {
    "id": "6f23cbeaf0bab685e8d9d662ef4f874c",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_overview_releases.html",
    "source_type": "documentation",
    "title": "Releases – Radix Primitives",
    "content": "a breaking change if you are currently using the CheckboxItem part and your codebase is written in TypeScript – #1624 Dialog1 0 2 Fix issue with textarea elements not being scrollable in Firefox – #1550 Dropdown Menu2 0 1Major [Breaking] Add support for indeterminate state on DropdownMenu CheckboxItem Note that this is only a breaking change if you are currently using the CheckboxItem part and your codebase is written in TypeScript – #1624 Correctly pair DropdownMenuTrigger open state with aria-expanded when closed – #1644\nFix issue with eager selection of items when using asChild – #1647\nFix issue with dismissing when the component is used in a separate popup window – #1677\nHover Card1 0 2\nImprove text selection experience – #1692\nLabel2 0 0Major\n[Breaking] Remove useLabelContext and support for fully custom controls For native labelling to work, ensure your custom controls are based on native elements such as button or input – #1686\nImprove native behavior by using the native label element – #1686\nNavigation Menu1 1 1\nPrevent menu from re-opening with the pointer after being dismissed with escape – #1579\nAdd delayDuration and skipDelayDuration props to NavigationMenu Root Note that by default, triggers now have a brief delay before opening in order to improve UX, this can be modified using the props provided – #1716\nRadio Group1 1 0\nAdd disabled prop to RadioGroup Root – #1530\nFix issue where RadioGroup Root was focusable when all items were disabled – #1530\nSelect1 1 1\nAdd disabled prop to Select Root – #1699\nAdd required prop to Select Root – #1598\nSlider1 1 0\nAdd ability to visually invert the slider using the new inverted prop on Slider Root – #1695\nAdd onValueCommit prop to Slider Root to better handle discrete value changes – #1696\nSlot1 0 1\nStop eagerly creating callback props – #1713\nToast1 1 1\nFix regression with screen readers announcing as \"group\" rather than \"status\" – #1556\nFix regression with ref assignments on child elements returning null – #1668\nAdd onPause and onResume props to Toast Root – #1669\nFix timer reset issue which would cause toasts to dismiss early in some cases – #1682\nToolbar1 0 1\nPrevent Toolbar",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 577758,
      "relative_path": "documentation\\radix\\_primitives_docs_overview_releases.html",
      "source_type": "documentation"
    },
    "token_count": 516,
    "chunk_index": 8,
    "total_chunks": 24
  },
  {
    "id": "e7fa2080ac4258dbd627a93887186516",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_overview_releases.html",
    "source_type": "documentation",
    "title": "Releases – Radix Primitives",
    "content": "better handle discrete value changes – #1696 Slot1 0 1 Stop eagerly creating callback props – #1713 Toast1 1 1 Fix regression with screen readers announcing as \"group\" rather than \"status\" – #1556 Fix regression with ref assignments on child elements returning null – #1668 Add onPause and onResume props to Toast Root – #1669 Fix timer reset issue which would cause toasts to dismiss early in some cases – #1682 Toolbar1 0 1 Prevent ToolbarItem click handlers firing twice – #1526\nTooltip1 0 2\nEnsure tooltip doesn't open if interacting with the trigger before the open timer expires – #1693\nJuly 21, 2022\nWith this release, we start following semantic versioning strictly All primitives are now versioned 1 0 0 We also move the Select, Toast and NavigationMenu from preview to stable All primitives\nImprove support for React 18 – #1329\n[Breaking] Improve RTL performance You need to use DirectionProvider if you were relying on dir attribute inheritance from document (or any element) – #1119\nAlert Dialog1 0 0Major\n[Breaking] Remove allowPinchZoom prop, now defaults to true – #1514\nImprove compatibility with JS animation libraries with forceMount on AlertDialog Portal – #1075\nFix regressions with page interactivity while/after closing dialog – #1401\nContext Menu1 0 0Major\n[Breaking] Improve indirect nesting of context menus Submenus must now be created using explicit parts – #1394\n[Breaking] Remove allowPinchZoom prop, now defaults to true – #1514\n[Breaking] Add new Portal part To avoid regressions, use this part if you want portalling behavior Note that z-index isn't managed anymore so you have full control of layering – #1429\n[Breaking] Remove offset on Arrow part – #1531\n[Breaking] Rename collisionTolerance to collisionPadding on Content part and accepts a number or a padding object – #1531\nFix issue with native context menu appearing in React 18 – #1378\nAdd data-highlighted attribute to support styling – #1388\nAdd data-state attribute to Trigger part – #1455\nAdd collisionBoundary, arrowPadding, sticky, hideWhenDetached props on Content part – #1531\nDialog1 0",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 577758,
      "relative_path": "documentation\\radix\\_primitives_docs_overview_releases.html",
      "source_type": "documentation"
    },
    "token_count": 493,
    "chunk_index": 9,
    "total_chunks": 24
  },
  {
    "id": "9ca330563abf8472272bff1e44015a2a",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_overview_releases.html",
    "source_type": "documentation",
    "title": "Releases – Radix Primitives",
    "content": "so you have full control of layering – #1429 [Breaking] Remove offset on Arrow part – #1531 [Breaking] Rename collisionTolerance to collisionPadding on Content part and accepts a number or a padding object – #1531 Fix issue with native context menu appearing in React 18 – #1378 Add data-highlighted attribute to support styling – #1388 Add data-state attribute to Trigger part – #1455 Add collisionBoundary, arrowPadding, sticky, hideWhenDetached props on Content part – #1531 Dialog1 00Major\n[Breaking] Remove allowPinchZoom prop, now defaults to true – #1514\nImprove compatibility with JS animation libraries with forceMount on Dialog Portal – #1075\nFix regressions with page interactivity while/after closing dialog – #1401\nDropdown Menu1 0 0Major\n[Breaking] Improve indirect nesting of dropdown menus Submenus must now be created using explicit parts – #1394\n[Breaking] Remove allowPinchZoom prop, now defaults to true – #1514\n[Breaking] Add new Portal part To avoid regressions, use this part if you want portalling behavior Note that z-index isn't managed anymore so you have full control of layering – #1429\n[Breaking] Remove offset on Arrow part – #1531\n[Breaking] Rename collisionTolerance to collisionPadding on Content part and accepts a number or a padding object – #1531\nAdd data-highlighted attribute to support styling – #1388\nPrevent escape key from exiting fullscreen mode in Firefox & Safari – #1423\nAdd collisionBoundary, arrowPadding, sticky, hideWhenDetached props on Content part – #1531\nHover Card1 0 0Major\n[Breaking] Add new Portal part To avoid regressions, use this part if you want portalling behavior Note that z-index isn't managed anymore so you have full control of layering – #1426\n[Breaking] Remove offset on Arrow part – #1531\n[Breaking] Rename collisionTolerance to collisionPadding on Content part and accepts a number or a padding object – #1531\nAdd collisionBoundary, arrowPadding, sticky, hideWhenDetached props on Content part – #1531\nNavigation Menu1 0 0Major\nEnsure menu closes after clicking NavigationMenu Link – #1347\nAdd onSelect prop to NavigationMenu Link – #1372\nPopover1 0",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 577758,
      "relative_path": "documentation\\radix\\_primitives_docs_overview_releases.html",
      "source_type": "documentation"
    },
    "token_count": 502,
    "chunk_index": 10,
    "total_chunks": 24
  },
  {
    "id": "0047b23b69e435a17492a938a4c446b3",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_overview_releases.html",
    "source_type": "documentation",
    "title": "Releases – Radix Primitives",
    "content": "behavior Note that z-index isn't managed anymore so you have full control of layering – #1426 [Breaking] Remove offset on Arrow part – #1531 [Breaking] Rename collisionTolerance to collisionPadding on Content part and accepts a number or a padding object – #1531 Add collisionBoundary, arrowPadding, sticky, hideWhenDetached props on Content part – #1531 Navigation Menu1 0 0Major Ensure menu closes after clicking NavigationMenu Link – #1347 Add onSelect prop to NavigationMenu Link – #1372 Popover1 00Major\n[Breaking] Remove allowPinchZoom prop, now defaults to true – #1514\n[Breaking] Add new Portal part To avoid regressions, use this part if you want portalling behavior Note that z-index isn't managed anymore so you have full control of layering – #1425\n[Breaking] Remove offset on Arrow part – #1531\n[Breaking] Rename collisionTolerance to collisionPadding on Content part and accepts a number or a padding object – #1531\nAdd collisionBoundary, arrowPadding, sticky, hideWhenDetached props on Content part – #1531\nPortal1 0 0Major\n[Breaking] Note that z-index isn't managed anymore so you have full control of layering The prop to provide a custom container evolves from containerRef (ref) to container (element) The data-radix-portal was removed because you can use asChild to control the element – #1463\nRadioGroup1 0 0Major\nAdd aria-required to root – #1422\nScroll Area1 0 0Major\nScrollArea Thumb is now animatable – #1392\nSelect1 0 0Major\n[Breaking] Renamed data-state values from active|inactive to checked|unchecked – #1388\n[Breaking] Add new Portal part To avoid regressions, use this part if you want portalling behavior Note that z-index isn't managed anymore so you have full control of layering – #1459\nFix position breaking when using asChild on Select Content – #1245\nImprove trigger/content alignment when Select Content has padding – #1312\nFix trigger/content alignment when there are less than 5 items – #1355\nSupport trigger/content alignment when no value is provided – #1379\nAdd data-highlighted attribute to support styling – #1388\nAdd support for placeholder via placeholder prop on Select",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 577758,
      "relative_path": "documentation\\radix\\_primitives_docs_overview_releases.html",
      "source_type": "documentation"
    },
    "token_count": 502,
    "chunk_index": 11,
    "total_chunks": 24
  },
  {
    "id": "c411699120cab858241ef3706c88b9ea",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_overview_releases.html",
    "source_type": "documentation",
    "title": "Releases – Radix Primitives",
    "content": "behavior Note that z-index isn't managed anymore so you have full control of layering – #1459 Fix position breaking when using asChild on Select Content – #1245 Improve trigger/content alignment when Select Content has padding – #1312 Fix trigger/content alignment when there are less than 5 items – #1355 Support trigger/content alignment when no value is provided – #1379 Add data-highlighted attribute to support styling – #1388 Add support for placeholder via placeholder prop on SelectValue – #1384\nResolve value mismatch with underlying native select – #1421\nSlot1 0 0Major\nFix issue with children ordering when using Slottable – #1376\nTabs1 0 0Major\nAdd support for lifecycle animation to Tabs Content – #1346\nToast1 0 0Major\n[Breaking] The default toast order has changed, they now render top to bottom from oldest to newest – #1469\nImprove Typescript types when using asChild – #1300\nFix issue with toast reordering when updating React's key prop – #1283\nImprove compatability with animation libraries – #1468\nTooltip1 0 0Major\n[Breaking] Add new Portal part To avoid regressions, use this part if you want portalling behavior Note that z-index isn't managed anymore so you have full control of layering – #1427\n[Breaking] By default Tooltip Content will remain open when hovering (WCAG 2 1 Content on Hover compliance) disableHoverableContent can be supplied to Tooltip Provider to restore previous behavior – #1490\n[Breaking] side on Tooltip Content now defaults to top – #1490\n[Breaking] Tooltip Provider is now required, you must wrap your app to avoid regressions – #1490\n[Breaking] Remove offset on Arrow part – #1531\n[Breaking] Rename collisionTolerance to collisionPadding on Content part and accepts a number or a padding object – #1531\nImprove layering of tooltip with other primitives – #1314\nFix tooltip closing when transforming/animation trigger – #937\nAdd collisionBoundary, arrowPadding, sticky, hideWhenDetached props on Content part – #1531\nFebruary 28, 2022\nThis release introduces 3 brand new primitives in preview: Select, Toast and NavigationMenu, whilst also shipping a ton of fixes and improvements Accordion0 1 6\nPrevent form submission when pressing Accordion",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 577758,
      "relative_path": "documentation\\radix\\_primitives_docs_overview_releases.html",
      "source_type": "documentation"
    },
    "token_count": 507,
    "chunk_index": 12,
    "total_chunks": 24
  },
  {
    "id": "f0eee656f6f3b665d0ba473e21d5eed5",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_overview_releases.html",
    "source_type": "documentation",
    "title": "Releases – Radix Primitives",
    "content": "collisionPadding on Content part and accepts a number or a padding object – #1531 Improve layering of tooltip with other primitives – #1314 Fix tooltip closing when transforming/animation trigger – #937 Add collisionBoundary, arrowPadding, sticky, hideWhenDetached props on Content part – #1531 February 28, 2022 This release introduces 3 brand new primitives in preview: Select, Toast and NavigationMenu, whilst also shipping a ton of fixes and improvements Accordion0 1 6 Prevent form submission when pressing AccordionTrigger – #1085\nFix animation issue with React 18 – #1125\nAlert Dialog0 1 7\nImprove pointer-events management – #1079\nCheckbox0 1 5\nPrevent activation via enter key – #1104\nCollapsible0 1 6\nFix animation issue with React 18 – #1125\nContext Menu0 1 6\nPrevent DropdownMenu TriggerItem click from firing twice – #1057\nImprove idle performance – #1040\nDialog0 1 7Major\nImprove pointer-events management – #1079\n[Breaking] Dialog Title is now a required part so will throw an error if not used aria-describedby={undefined} must be passed to Dialog Content if no description is needed – #1098\nDropdown Menu0 1 6\nImprove composability with Dialog/AlertDialog – #1097\nPrevent clicking trigger to close from immediately reopening in non-modal mode – #1059\nPrevent DropdownMenu TriggerItem click from firing twice – #1057\nImprove idle performance – #1040\nNavigation Menu0 1 2Preview\nNew primitive – #1172\nRadio Group0 1 5\nPrevent activation via enter key – #1104\nSelect0 1 1Preview\nNew primitive – #1169\nSlider0 1 4\nPrevent page scroll when using Home and End keys – #1076\nTabs0 1 5\nPrevent accidental focus activation via right click – #1114\nToast0 1 1Preview\nNew primitive – #1165\nToggle Group0 1 5\nImprove accessibility by using radio role for single toggle group – #1118\nDecember 13, 2021\nThis release focuses on React 18 support and introduces a number of breaking changes to some packages, mostly related to portalling dialogs All primitives\n[Breaking] Deprecate IdProvider",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 577758,
      "relative_path": "documentation\\radix\\_primitives_docs_overview_releases.html",
      "source_type": "documentation"
    },
    "token_count": 510,
    "chunk_index": 13,
    "total_chunks": 24
  },
  {
    "id": "694ce118422e842e02209f85c44035bd",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_overview_releases.html",
    "source_type": "documentation",
    "title": "Releases – Radix Primitives",
    "content": "Prevent page scroll when using Home and End keys – #1076 Tabs0 1 5 Prevent accidental focus activation via right click – #1114 Toast0 1 1Preview New primitive – #1165 Toggle Group0 1 5 Improve accessibility by using radio role for single toggle group – #1118 December 13, 2021 This release focuses on React 18 support and introduces a number of breaking changes to some packages, mostly related to portalling dialogs All primitives [Breaking] Deprecate IdProviderImproves support for React 18 going forward and is no longer needed in older versions Remove from your app to avoid deprecation warnings – #1006\nAccordion0 1 5Major\nImprove React 18 support – #984\nImprove dev mode errors with mismatched type and value props – #979\nPrevent Accordion Content height animation on initial page load – #977\nAlert Dialog0 1 5Major\n[Breaking] Add new Portal part To avoid regressions, use this part if you want portalling behavior – #936\n[Breaking] Support scrolling within AlertDialog Overlay Move allowPinchZoom to root – #963\nFix asChild TypeScript error – #924\nCollapsible0 1 5\nPrevent Collapsible Content height animation on initial page load – #977\nDialog0 1 5Major\n[Breaking] Add new Portal part To avoid regressions, use this part if you want portalling behavior – #936\n[Breaking] Support scrolling within Dialog Overlay Move allowPinchZoom to root – #963\nDropdown Menu0 1 4\nPrevent disabled trigger from opening menu – #974\nHover Card0 1 3\nFix ability to focus HoverCard when inside a dialog – #920\nRadio Group0 1 4\nPrevent programmatic focus from changing value – #939\nTabs0 1 4Major\n[Breaking] Change Tabs Trigger to button element – #981\nImprove TSDocs – #978\nToggle Group0 1 4\nRemove invalid aria-orientation attribute on role=group element – #965\nToolbar0 1 4\nFix asChild TypeScript error – #924\nRemove invalid toolbaritem role – #950\nTooltip0 1 6Major\n[Breaking] Add new TooltipProvider part You must wrap your app to avoid regressions – #1007\n[Breaking] Remove type=button attribute from Tooltip Trigger – #1011\nFix tooltip activation regression – #1035\nSlot0 1",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 577758,
      "relative_path": "documentation\\radix\\_primitives_docs_overview_releases.html",
      "source_type": "documentation"
    },
    "token_count": 522,
    "chunk_index": 14,
    "total_chunks": 24
  },
  {
    "id": "f70982434a7c0beb101a5f4280b00a99",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_overview_releases.html",
    "source_type": "documentation",
    "title": "Releases – Radix Primitives",
    "content": "[Breaking] Change Tabs Trigger to button element – #981 Improve TSDocs – #978 Toggle Group0 1 4 Remove invalid aria-orientation attribute on role=group element – #965 Toolbar0 1 4 Fix asChild TypeScript error – #924 Remove invalid toolbaritem role – #950 Tooltip0 1 6Major [Breaking] Add new TooltipProvider part You must wrap your app to avoid regressions – #1007 [Breaking] Remove type=button attribute from Tooltip Trigger – #1011 Fix tooltip activation regression – #1035 Slot0 12\nFix key warnings – #1015\nOctober 15, 2021\nAll primitives\nAll primitives are now versioned 0 1 1\nFix composability issues between primitives by scoping context – #906\nFix CSS unmount animations – #851\nAccordion0 1 1\nAdd new CSS variable to Accordion Content to help with width animations – #879\nAlert Dialog0 1 1Major\nImprove composability with Dialog – #906\n[Breaking] Remove AlertDialog Content onInteractOutside prop – #846\nDialog0 1 1\nImprove composability with AlertDialog – #906\nAdd pinch to zoom support to DropdownMenu Content via allowPinchZoom prop – #884\nContext Menu0 1 1\nAdd pinch to zoom support to ContextMenu Content via allowPinchZoom prop – #884\nPrevent scroll via arrow keypress on submenu triggers – #908\nCollapsible0 1 1\nAdd new CSS variable to Collapsible Content to help with width animations – #879\nCheckbox0 1 1\nPrevent screen reader virtual cursor from accessing hidden input – #870\nDropdown Menu0 1 1\nImprove composability with Tooltip – #906\nAdd pinch to zoom support to DropdownMenu Content via allowPinchZoom prop – #884\nPrevent scroll via arrow keypress on submenu triggers – #908\nHover Card0 1 1\nOpen on focus to improve keyboard support – #902\nCompose correct pointer events internally – #893\nLabel0 1 1\nAllow its children to prevent event propagation – #861\nRadio Group0 1 1\nPrevent screen reader virtual cursor from accessing hidden inputs – #870\nPopover0 1 1\nAdd pinch to zoom support to Popover Content via allowPinchZoom prop – #884\nSlider0 1 1\nFix calculations when value is 0 – #866\nSwitch0 1",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 577758,
      "relative_path": "documentation\\radix\\_primitives_docs_overview_releases.html",
      "source_type": "documentation"
    },
    "token_count": 521,
    "chunk_index": 15,
    "total_chunks": 24
  },
  {
    "id": "0144e271f0c3bffa2e52e915df327c4b",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_overview_releases.html",
    "source_type": "documentation",
    "title": "Releases – Radix Primitives",
    "content": "Hover Card0 1 1 Open on focus to improve keyboard support – #902 Compose correct pointer events internally – #893 Label0 1 1 Allow its children to prevent event propagation – #861 Radio Group0 1 1 Prevent screen reader virtual cursor from accessing hidden inputs – #870 Popover0 1 1 Add pinch to zoom support to Popover Content via allowPinchZoom prop – #884 Slider0 1 1 Fix calculations when value is 0 – #866 Switch0 11\nPrevent screen reader virtual cursor from accessing hidden input – #870\nTabs0 1 1Major\n[Breaking] Unmount content within Tabs Content when tab is inactive – #859\nSeptember 7, 2021\nAll primitives\nAll primitives moved to Beta and are now versioned 0 1 0\n[Breaking] Replace polymorphic as prop with asChild boolean prop Learn more\nabout how to change the rendered element here – #835\nDialog0 1 0\nImprove composability with DropdownMenu – #818\nDropdown Menu0 1 0\nImprove composability with Dialog – #818\nRe-enable pointer-events when closed – #819\nPrevent body text from selecting on close (Firefox) – #812\nEnsure sub triggers receive focus on click (iOS Safari) – #820\nPrimitive0 1 0Major\n[Breaking] Deprecate extendPrimitive utility – #840\nAugust 4, 2021\nAll primitives\nImprove polymorphic types performance – #784\nAlert Dialog0 0 20Major\n[Breaking] Remove AlertDialog Content onPointerDownOutside prop – #700\nPrevent outside pointer events triggering prematurely on touch devices – #767\nContext Menu0 0 24Major\nAdd modality support via modal prop – #700\n[Breaking] Remove ContextMenu Content disableOutsidePointerEvents prop – #700\nPrevent outside pointer events triggering prematurely on touch devices – #767\nDialog0 0 20\nAdd modality support via modal prop – #700\nImprove animation rendering in React 18 – #776\nEnsure focus is restored to trigger on close when using the autofocus attribute on a child element – #739\nPrevent outside pointer events triggering prematurely on touch devices – #767\nEnsure iOS Safari consistently focuses the first focusable element – #776\nDropdown Menu0 0 23Major\nAdd modality support via modal prop – #700\n[Breaking] Remove DropdownMenu",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 577758,
      "relative_path": "documentation\\radix\\_primitives_docs_overview_releases.html",
      "source_type": "documentation"
    },
    "token_count": 513,
    "chunk_index": 16,
    "total_chunks": 24
  },
  {
    "id": "b96824a1ab9e7e85d3192922fd36ff5f",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_overview_releases.html",
    "source_type": "documentation",
    "title": "Releases – Radix Primitives",
    "content": "#767 Dialog0 0 20 Add modality support via modal prop – #700 Improve animation rendering in React 18 – #776 Ensure focus is restored to trigger on close when using the autofocus attribute on a child element – #739 Prevent outside pointer events triggering prematurely on touch devices – #767 Ensure iOS Safari consistently focuses the first focusable element – #776 Dropdown Menu0 0 23Major Add modality support via modal prop – #700 [Breaking] Remove DropdownMenuContent disableOutsideScroll prop – #700\n[Breaking] Remove DropdownMenu Content disableOutsidePointerEvents prop – #700\nPrevent outside pointer events triggering prematurely on touch devices – #767\nPopover0 0 20Major\nAdd modality support via modal prop – #700\n[Breaking] Remove Popover Content disableOutsideScroll prop – #700\n[Breaking] Remove Popover Content disableOutsidePointerEvents prop – #700\n[Breaking] Remove Popover Content trapFocus prop – #700\nImprove animation rendering in React 18 – #776\nEnsure focus is restored to trigger on close when using the autofocus attribute on a child element – #739\nPrevent outside pointer events triggering prematurely on touch devices – #767\nEnsure iOS Safari consistently focuses the first focusable element – #776\nScroll Area0 0 16\nAdd data-state to ScrollBar part – #801\nSlider0 0 17\nPrevent thumb receiving focus when disabled – #777\nPrevent focus loss on thumb when using React StrictMode – #794\nJune 24, 2021\nContext Menu0 0 23\nCan now be triggered on touch with a long press – #743\nDialog0 0 19\nAdd optional Title and Description parts for simpler labelling – #741\nScroll Area0 0 15\nAdd data-orientation to Scrollbar for styling convenience – #720\nFix forceMount type issue on Scrollbar – #738\nSlider0 0 16\nEnsure the correct thumb is focused when using keyboard and crossing another thumb – #731\nEnsure only one arrow press is needed when crossing another thumb – #733\nSlot0 0 12\nImprove types compatibility – #737\nToggle Group0 0 10\nEnsure only one click is needed to toggle a single controlled toggle group – #722\nEnsure focus behavior is consistent on Safari – #727\nJune 15, 2021\nAll primitives\nImprove polymorphic types – #648\nAccordion0 0",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 577758,
      "relative_path": "documentation\\radix\\_primitives_docs_overview_releases.html",
      "source_type": "documentation"
    },
    "token_count": 512,
    "chunk_index": 17,
    "total_chunks": 24
  },
  {
    "id": "2b88bbf0231eec0f4bc864f7c3d11b58",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_overview_releases.html",
    "source_type": "documentation",
    "title": "Releases – Radix Primitives",
    "content": "Ensure the correct thumb is focused when using keyboard and crossing another thumb – #731 Ensure only one arrow press is needed when crossing another thumb – #733 Slot0 0 12 Improve types compatibility – #737 Toggle Group0 0 10 Ensure only one click is needed to toggle a single controlled toggle group – #722 Ensure focus behavior is consistent on Safari – #727 June 15, 2021 All primitives Improve polymorphic types – #648 Accordion0 016Major\n[Breaking] Rename Accordion Button to Accordion Trigger – #651\n[Breaking] Rename Accordion Panel to Accordion Content – #651\n[Breaking] Rename custom property accordingly (--radix-accordion-content-height) – #651\n[Breaking] type=“single” Accordion now has a new collapsible prop which is false by default This means that the default behavior has now changed By default a user cannot close all items – #651\nAlert Dialog0 0 18Major\n[Breaking] Allow preventing default in onPointerDownOutside without inadvertently preventing focus – #654\nCheckbox0 0 16Major\n[Breaking] onCheckedChange(event) is now onCheckedChange(checked: CheckedState) – #672\nImprove compatibility with native form validation – #650\nAllow stopping propagation on Checkbox onClick – #672\nImprove compatibility with native label – #672\nImprove accessibility when wrapped in native label – #672\nCollapsible0 0 16Major\n[Breaking] Rename Collapsible Button to Collapsible Trigger – #651\nContext Menu0 0 22Major\nAdd submenu support – #682\nAdd ContextMenu TriggerItem – #682\nAdd ContextMenu Arrow – #682\nAdd dir prop for RTL support with submenus – #682\n[Breaking] Allow preventing default in onPointerDownOutside without inadvertently preventing focus – #654\n[Breaking] Remove ContextMenu Content side prop – #658\n[Breaking] Remove ContextMenu Content align prop – #658\n[Breaking] If you had sideOffset on ContextMenu Content before, you should now use alignOffset This is to standardize vertical alignment for both root and sub-menus – #712\n[Breaking] onFocusOutside is now a custom event – #671\nImprove support of content and item with no padding – #658\nAlign with WAI-ARIA spec by focusing first item when opening via keyboard – #694\nDialog0 0",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 577758,
      "relative_path": "documentation\\radix\\_primitives_docs_overview_releases.html",
      "source_type": "documentation"
    },
    "token_count": 497,
    "chunk_index": 18,
    "total_chunks": 24
  },
  {
    "id": "4544bdf9c41d049e852a30c5dcf65122",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_overview_releases.html",
    "source_type": "documentation",
    "title": "Releases – Radix Primitives",
    "content": "Content side prop – #658 [Breaking] Remove ContextMenu Content align prop – #658 [Breaking] If you had sideOffset on ContextMenu Content before, you should now use alignOffset This is to standardize vertical alignment for both root and sub-menus – #712 [Breaking] onFocusOutside is now a custom event – #671 Improve support of content and item with no padding – #658 Align with WAI-ARIA spec by focusing first item when opening via keyboard – #694 Dialog0 018Major\n[Breaking] Allow preventing default in onPointerDownOutside without inadvertently preventing focus – #654\nDropdown Menu0 0 21Major\nAdd submenu support – #682\nAdd DropdownMenu TriggerItem – #682\nAdd dir prop for RTL support with submenus – #682\n[Breaking] Allow preventing default in onPointerDownOutside without inadvertently preventing focus – #654\n[Breaking] onFocusOutside is now a custom event – #671\n[Breaking] The up arrow no longer opens the menu – #702\nAlign with WAI-ARIA spec by focusing first item when opening via keyboard – #694\nPopover0 0 18Major\n[Breaking] Allow preventing default in onPointerDownOutside without inadvertently preventing focus – #654\n[Breaking] onFocusOutside is now a custom event – #671\nRadio Group0 0 17Major\n[Breaking] onValueChange(event) is now onValueChange(value: string) – #685\n[Breaking] Remove RadioGroup Item onCheckedChange prop – #685\nImprove compatibility with native form validation – #650\nImprove usage within forms – #685\nScroll Area0 0 14Major\nBrand new version with a simpler API – #624\nImprove Safari support – #624\nImprove RTL support – #624\nImprove touch support – #624\nScrollbar mount/unmount can now be animated – #624\nAdd minimum width/height to thumb so it's always grabbable – #624\nMove functional CSS into component to improve DX – #624\nBundle size significantly reduced – #624\n[Breaking] Remove overflowX and overflowY props – #624\n[Breaking] Remove ScrollAreaButtonStart, ScrollAreaButtonEnd and ScrollAreaTrack – #624\n[Breaking] Rename scrollbarVisibility prop to type",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 577758,
      "relative_path": "documentation\\radix\\_primitives_docs_overview_releases.html",
      "source_type": "documentation"
    },
    "token_count": 473,
    "chunk_index": 19,
    "total_chunks": 24
  },
  {
    "id": "299bde83ec2dda2d3452afbd23c554b8",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_overview_releases.html",
    "source_type": "documentation",
    "title": "Releases – Radix Primitives",
    "content": "simpler API – #624 Improve Safari support – #624 Improve RTL support – #624 Improve touch support – #624 Scrollbar mount/unmount can now be animated – #624 Add minimum width/height to thumb so it's always grabbable – #624 Move functional CSS into component to improve DX – #624 Bundle size significantly reduced – #624 [Breaking] Remove overflowX and overflowY props – #624 [Breaking] Remove ScrollAreaButtonStart, ScrollAreaButtonEnd and ScrollAreaTrack – #624 [Breaking] Rename scrollbarVisibility prop to typeThe values are auto, always, scroll or hover – #624\n[Breaking] Rename scrollbarVisibilityRestTimeout prop to scrollHideDelay – #624\n[Breaking] Remove trackClickBehavior prop as we've removed built-in animation Clicking on track always snaps to pointer position – #624\n[Breaking] ScrollAreaScrollbarX and ScrollAreaScrollbarY are now <ScrollAreaScrollbar orientation=\"horizontal\" /> and <ScrollAreaScrollbar orientation=\"vertical\" /> – #624\nEnsure no scrollbars are shown when scrolling is disabled – #624\nEnsure children event handlers don't break – #624\nEnsure scroll area updates when children content size changes – #624\nSlider0 0 15\nImprove usage within forms – #678\nFix key binding issue in LTR – #718\nSwitch0 0 14Major\n[Breaking] onCheckedChange(event) is now onCheckedChange(checked: boolean) – #679\nImprove compatibility with native form validation – #650\nImprove usage within forms – #679\nImprove accessibility when wrapped in native label – #679\nTabs0 0 14Major\n[Breaking] Rename Tabs Tab to Tabs Trigger – #652\n[Breaking] Rename Tabs Panel to Tabs Content – #652\nMay 3, 2021\nAll primitives\nImprove polymorphic types performance – #613\nAccordion0 0 14\nEnsure only one click is needed to close a single controlled accordion – #594\nCheckbox0 0 14Major\n[Breaking] Remove readOnly prop – #600\nContext Menu0 0 18\nAdd onOpenChange prop – #604\nDialog0 0 16\nEnsure focus position isn't lost when blurring out window and re-focusing it – #589\nDropdown Menu0 0",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 577758,
      "relative_path": "documentation\\radix\\_primitives_docs_overview_releases.html",
      "source_type": "documentation"
    },
    "token_count": 481,
    "chunk_index": 20,
    "total_chunks": 24
  },
  {
    "id": "4450f9053bf61f451087bd6b3a21618e",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_overview_releases.html",
    "source_type": "documentation",
    "title": "Releases – Radix Primitives",
    "content": "#652 [Breaking] Rename Tabs Panel to Tabs Content – #652 May 3, 2021 All primitives Improve polymorphic types performance – #613 Accordion0 0 14 Ensure only one click is needed to close a single controlled accordion – #594 Checkbox0 0 14Major [Breaking] Remove readOnly prop – #600 Context Menu0 0 18 Add onOpenChange prop – #604 Dialog0 0 16 Ensure focus position isn't lost when blurring out window and re-focusing it – #589 Dropdown Menu0 018Major\nTake into account non-visible items – #618\n[Breaking] Remove anchorRef prop – #580\nPrevent page from scrolling when selecting an item with space key – #626\nHover Card0 0 1\nNew primitive – #595\nPopover0 0 16Major\n[Breaking] Remove anchorRef prop and replace with optional Anchor part – #580\nRadio Group0 0 15Major\nAdd optional orientation, dir, loop props – #618\n[Breaking] Remove readOnly prop – #600\nSwitch0 0 12Major\n[Breaking] Remove readOnly prop – #600\nToggle Group0 0 7\nAdd optional orientation, dir, loop props – #618\nTooltip0 0 17Major\n[Breaking] Remove anchorRef prop – #580\nMarch 26, 2021\nAll primitives\nImprove tree-shaking – #577\nContext Menu0 0 17\nEnsure you can open a context menu when one is already open – #565\nDropdown Menu0 0 17\nFix potential overlap issue – #541\nPopover0 0 15\nEnsure Content closes when it has multiple close animations – #571\nToggle0 0 6Major\n[Breaking] Rename ToggleButton primitive to Toggle – #546\n[Breaking] Rename toggled prop to pressed – #546\n[Breaking] Rename defaultToggled prop to defaultPressed – #546\n[Breaking] Rename onToggledChange prop to onPressedChange – #546\nToggle Group0 0 6\nNew primitive – #376\nToolbar0 0 9\nNew primitive – #412 #451 #545\nTooltip0 0 16\nAdd custom timing support – #550 #551 #554 #558\nAdd unmount animation support – #558\nMarch 5, 2021\nAccordion0 0 7\nAdd height CSS custom property to panel for easier animation – #537\nCollapsible0 0",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 577758,
      "relative_path": "documentation\\radix\\_primitives_docs_overview_releases.html",
      "source_type": "documentation"
    },
    "token_count": 520,
    "chunk_index": 21,
    "total_chunks": 24
  },
  {
    "id": "4d1a6c3f50c6efd234c994a30ae78862",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_overview_releases.html",
    "source_type": "documentation",
    "title": "Releases – Radix Primitives",
    "content": "prop to pressed – #546 [Breaking] Rename defaultToggled prop to defaultPressed – #546 [Breaking] Rename onToggledChange prop to onPressedChange – #546 Toggle Group0 0 6 New primitive – #376 Toolbar0 0 9 New primitive – #412 #451 #545 Tooltip0 0 16 Add custom timing support – #550 #551 #554 #558 Add unmount animation support – #558 March 5, 2021 Accordion0 0 7 Add height CSS custom property to panel for easier animation – #537 Collapsible0 07\nAdd height CSS custom property to content for easier animation – #537\nTooltip0 0 9\nFix type definition conflicts – #538\nMarch 3, 2021\nAll primitives\nAdd support for SSR\n[Breaking] Remove selector prop and data-radix-* atributes – #517\nAccordion0 0 6Major\n[Breaking] Add support for multiple values Note that this is a breaking change because the new type prop is required – #527\nSlider0 0 6\nEnsure step is rounded correctly – #463\nTabs0 0 6\nAdd RTL support (dir prop) – #497\nFebruary 17, 2021\nTooltip0 0 7\nEnsure events are composed when using <Trigger as={Slot}> – #461\nFebruary 15, 2021\nContext Menu0 0 8\nExpose onCloseAutoFocus prop – #456\nDropdown Menu0 0 8\nExpose onCloseAutoFocus prop – #456\nFebruary 10, 2021\nAll primitives\nFix type autocompletion when using as prop – #421\nAccordion0 0 5\nPrevent open/close flickering – #431\nDialog0 0 6\nEnsure focus is returned properly on close – #422\nRadio Group0 0 5Major\n[Breaking] Move name prop from Item to Root – #424\nFebruary 1, 2021\nContext Menu0 0 6\nRe–add missing children – #414\nDropdown Menu0 0 6\nRe–add missing children – #414\nPopover0 0 5\nPrevent flickering (sliding) issue – #415\nJanuary 29, 2021\nSlot0 0 1\nNew utility – #409\nJanuary 25, 2021\nDialog0 0 3\nFix regression when tabbing out would close – #403\nDropdown Menu0 0",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 577758,
      "relative_path": "documentation\\radix\\_primitives_docs_overview_releases.html",
      "source_type": "documentation"
    },
    "token_count": 522,
    "chunk_index": 22,
    "total_chunks": 24
  },
  {
    "id": "8e8fb83ae94827114b1cc079d1b7dde4",
    "source_file": "corpus\\documentation\\radix\\_primitives_docs_overview_releases.html",
    "source_type": "documentation",
    "title": "Releases – Radix Primitives",
    "content": "on close – #422 Radio Group0 0 5Major [Breaking] Move name prop from Item to Root – #424 February 1, 2021 Context Menu0 0 6 Re–add missing children – #414 Dropdown Menu0 0 6 Re–add missing children – #414 Popover0 0 5 Prevent flickering (sliding) issue – #415 January 29, 2021 Slot0 0 1 New utility – #409 January 25, 2021 Dialog0 0 3 Fix regression when tabbing out would close – #403 Dropdown Menu0 03\nFix broken arrow keys navigation – #404\nJanuary 22, 2021\nAll primitives\nAdd selector prop – #347\nAccordion0 0 2\nEnsure setting disabled={false} on Root doesn't enable disabled items – #400\nDropdown Menu0 0 2\nAdd enter key support on trigger – #381\nPrevent focus race condition – #394\nPopover0 0 2\nEnsure Content repositions on window resize – #359\nEnsure last element inside Content triggers blur event – #395\nDecember 15, 2020\nAll primitives0 0 1Major\nInitial release 🎉 – #338\nQuick navPreviousAccessibilityNextStylingEdit this page on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 577758,
      "relative_path": "documentation\\radix\\_primitives_docs_overview_releases.html",
      "source_type": "documentation"
    },
    "token_count": 275,
    "chunk_index": 23,
    "total_chunks": 24
  },
  {
    "id": "67d31ae82c47f5a50598138d33cb6f60",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_breadcrumb.html",
    "source_type": "documentation",
    "title": "Breadcrumb - shadcn/ui",
    "content": "Breadcrumb - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonBreadcrumbCopy PagePreviousNextDisplays the path to the current resource using a hierarchy of links",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 726563,
      "relative_path": "documentation\\shadcn\\_docs_components_breadcrumb.html",
      "source_type": "documentation"
    },
    "token_count": 196,
    "chunk_index": 0,
    "total_chunks": 10
  },
  {
    "id": "d76c5d61474a4e40912b502e69776a1e",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_breadcrumb.html",
    "source_type": "documentation",
    "title": "Breadcrumb - shadcn/ui",
    "content": "Breadcrumb - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonBreadcrumbCopy PagePreviousNextDisplays the path to the current resource using a hierarchy of linksPreviewCodeHomeMoreToggle menuComponentsBreadcrumbCopyimport Link from \"next/link\"\nimport {\nBreadcrumb,\nBreadcrumbEllipsis,\nBreadcrumbItem,\nBreadcrumbLink,\nBreadcrumbList,\nBreadcrumbPage,\nBreadcrumbSeparator,\n} from \"@/components/ui/breadcrumb\"\nimport {\nDropdownMenu,\nDropdownMenuContent,\nDropdownMenuItem,\nDropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nexport function BreadcrumbDemo() {\nreturn (\n<Breadcrumb>\n<BreadcrumbList>\n<BreadcrumbItem>\n<BreadcrumbLink asChild>\n<Link href=\"/\">Home</Link>\n</BreadcrumbLink>\n</BreadcrumbItem>\n<BreadcrumbSeparator />\n<BreadcrumbItem>\n<DropdownMenu>\n<DropdownMenuTrigger className=\"flex items-center gap-1\">\n<BreadcrumbEllipsis className=\"size-4\" />\n<span className=\"sr-only\">Toggle menu</span>\n</DropdownMenuTrigger>\n<DropdownMenuContent align=\"start\">\n<DropdownMenuItem>Documentation</DropdownMenuItem>\n<DropdownMenuItem>Themes</DropdownMenuItem>\n<DropdownMenuItem>GitHub</DropdownMenuItem>\n</DropdownMenuContent>\n</DropdownMenu>\n</BreadcrumbItem>\n<BreadcrumbSeparator />\n<BreadcrumbItem>\n<BreadcrumbLink asChild>\n<Link href=\"/docs/components\">Components</Link>\n</BreadcrumbLink>\n</BreadcrumbItem>\n<BreadcrumbSeparator />\n<BreadcrumbItem>\n<BreadcrumbPage>Breadcrumb</BreadcrumbPage>\n</BreadcrumbItem>\n</BreadcrumbList>\n</Breadcrumb>\n)\n}\nInstallation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add breadcrumbCopy\nUsage\nCopyimport {\nBreadcrumb,\nBreadcrumbItem,\nBreadcrumbLink,\nBreadcrumbList,\nBreadcrumbPage,\nBreadcrumbSeparator,\n} from \"@/components/ui/breadcrumb\"\nCopy<Breadcrumb>\n<BreadcrumbList>\n<BreadcrumbItem>\n<BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n</BreadcrumbItem>\n<BreadcrumbSeparator />\n<BreadcrumbItem>\n<BreadcrumbLink href=\"/components\">Components</BreadcrumbLink>\n</BreadcrumbItem>\n<BreadcrumbSeparator />\n<BreadcrumbItem>\n<BreadcrumbPage>Breadcrumb</BreadcrumbPage>\n</BreadcrumbItem>\n</BreadcrumbList>\n</Breadcrumb>\nExamples\nCustom separator\nUse a custom component as children for <BreadcrumbSeparator /> to create a custom separator",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 726563,
      "relative_path": "documentation\\shadcn\\_docs_components_breadcrumb.html",
      "source_type": "documentation"
    },
    "token_count": 624,
    "chunk_index": 1,
    "total_chunks": 10
  },
  {
    "id": "bfc9483ef7556c70b31f9491fb856467",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_breadcrumb.html",
    "source_type": "documentation",
    "title": "Breadcrumb - shadcn/ui",
    "content": "<DropdownMenuItem>GitHub</DropdownMenuItem> </DropdownMenuContent> </DropdownMenu> </BreadcrumbItem> <BreadcrumbSeparator /> <BreadcrumbItem> <BreadcrumbLink asChild> <Link href=\"/docs/components\">Components</Link> </BreadcrumbLink> </BreadcrumbItem> <BreadcrumbSeparator /> <BreadcrumbItem> <BreadcrumbPage>Breadcrumb</BreadcrumbPage> </BreadcrumbItem> </BreadcrumbList> </Breadcrumb> ) } Installation CLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add breadcrumbCopy Usage Copyimport { Breadcrumb, BreadcrumbItem, BreadcrumbLink, BreadcrumbList, BreadcrumbPage, BreadcrumbSeparator, } from \"@/components/ui/breadcrumb\" Copy<Breadcrumb> <BreadcrumbList> <BreadcrumbItem> <BreadcrumbLink href=\"/\">Home</BreadcrumbLink> </BreadcrumbItem> <BreadcrumbSeparator /> <BreadcrumbItem> <BreadcrumbLink href=\"/components\">Components</BreadcrumbLink> </BreadcrumbItem> <BreadcrumbSeparator /> <BreadcrumbItem> <BreadcrumbPage>Breadcrumb</BreadcrumbPage> </BreadcrumbItem> </BreadcrumbList> </Breadcrumb> Examples Custom separator Use a custom component as children for <BreadcrumbSeparator /> to create a custom separatorPreviewCodeHomeComponentsBreadcrumbCopyimport Link from \"next/link\"\nimport { SlashIcon } from \"lucide-react\"\nimport {\nBreadcrumb,\nBreadcrumbItem,\nBreadcrumbLink,\nBreadcrumbList,\nBreadcrumbPage,\nBreadcrumbSeparator,\n} from \"@/components/ui/breadcrumb\"\nexport function BreadcrumbWithCustomSeparator() {\nreturn (\n<Breadcrumb>\n<BreadcrumbList>\n<BreadcrumbItem>\n<BreadcrumbLink asChild>\n<Link href=\"/\">Home</Link>\n</BreadcrumbLink>\n</BreadcrumbItem>\n<BreadcrumbSeparator>\n<SlashIcon />\n</BreadcrumbSeparator>\n<BreadcrumbItem>\n<BreadcrumbLink asChild>\n<Link href=\"/components\">Components</Link>\n</BreadcrumbLink>\n</BreadcrumbItem>\n<BreadcrumbSeparator>\n<SlashIcon />\n</BreadcrumbSeparator>\n<BreadcrumbItem>\n<BreadcrumbPage>Breadcrumb</BreadcrumbPage>\n</BreadcrumbItem>\n</BreadcrumbList>\n</Breadcrumb>\n)\n}\nCopyimport { SlashIcon } from \"lucide-react\"",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 726563,
      "relative_path": "documentation\\shadcn\\_docs_components_breadcrumb.html",
      "source_type": "documentation"
    },
    "token_count": 424,
    "chunk_index": 2,
    "total_chunks": 10
  },
  {
    "id": "c87235c7d78de4100980da19d5194ceb",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_breadcrumb.html",
    "source_type": "documentation",
    "title": "Breadcrumb - shadcn/ui",
    "content": "a custom component as children for <BreadcrumbSeparator /> to create a custom separatorPreviewCodeHomeComponentsBreadcrumbCopyimport Link from \"next/link\" import { SlashIcon } from \"lucide-react\" import { Breadcrumb, BreadcrumbItem, BreadcrumbLink, BreadcrumbList, BreadcrumbPage, BreadcrumbSeparator, } from \"@/components/ui/breadcrumb\" export function BreadcrumbWithCustomSeparator() { return ( <Breadcrumb> <BreadcrumbList> <BreadcrumbItem> <BreadcrumbLink asChild> <Link href=\"/\">Home</Link> </BreadcrumbLink> </BreadcrumbItem> <BreadcrumbSeparator> <SlashIcon /> </BreadcrumbSeparator> <BreadcrumbItem> <BreadcrumbLink asChild> <Link href=\"/components\">Components</Link> </BreadcrumbLink> </BreadcrumbItem> <BreadcrumbSeparator> <SlashIcon /> </BreadcrumbSeparator> <BreadcrumbItem> <BreadcrumbPage>Breadcrumb</BreadcrumbPage> </BreadcrumbItem> </BreadcrumbList> </Breadcrumb> ) } Copyimport { SlashIcon } from \"lucide-react\"<Breadcrumb>\n<BreadcrumbList>\n<BreadcrumbItem>\n<BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n</BreadcrumbItem>\n<BreadcrumbSeparator>\n<SlashIcon />\n</BreadcrumbSeparator>\n<BreadcrumbItem>\n<BreadcrumbLink href=\"/components\">Components</BreadcrumbLink>\n</BreadcrumbItem>\n</BreadcrumbList>\n</Breadcrumb>\nDropdown\nYou can compose <BreadcrumbItem /> with a <DropdownMenu /> to create a dropdown in the breadcrumb PreviewCodeHomeComponentsBreadcrumbCopyimport Link from \"next/link\"\nimport { ChevronDownIcon, SlashIcon } from \"lucide-react\"\nimport {\nBreadcrumb,\nBreadcrumbItem,\nBreadcrumbLink,\nBreadcrumbList,\nBreadcrumbPage,\nBreadcrumbSeparator,\n} from \"@/components/ui/breadcrumb\"\nimport {\nDropdownMenu,\nDropdownMenuContent,\nDropdownMenuItem,\nDropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nexport function BreadcrumbWithDropdown() {\nreturn (\n<Breadcrumb>\n<BreadcrumbList>\n<BreadcrumbItem>\n<BreadcrumbLink asChild>\n<Link href=\"/\">Home</Link>\n</BreadcrumbLink>\n</BreadcrumbItem>\n<BreadcrumbSeparator>\n<SlashIcon />\n</BreadcrumbSeparator>\n<BreadcrumbItem>\n<DropdownMenu>\n<DropdownMenuTrigger className=\"flex items-center gap-1 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-3",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 726563,
      "relative_path": "documentation\\shadcn\\_docs_components_breadcrumb.html",
      "source_type": "documentation"
    },
    "token_count": 478,
    "chunk_index": 3,
    "total_chunks": 10
  },
  {
    "id": "468b08041c69669263193a49e25be302",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_breadcrumb.html",
    "source_type": "documentation",
    "title": "Breadcrumb - shadcn/ui",
    "content": "Dropdown You can compose <BreadcrumbItem /> with a <DropdownMenu /> to create a dropdown in the breadcrumb PreviewCodeHomeComponentsBreadcrumbCopyimport Link from \"next/link\" import { ChevronDownIcon, SlashIcon } from \"lucide-react\" import { Breadcrumb, BreadcrumbItem, BreadcrumbLink, BreadcrumbList, BreadcrumbPage, BreadcrumbSeparator, } from \"@/components/ui/breadcrumb\" import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger, } from \"@/components/ui/dropdown-menu\" export function BreadcrumbWithDropdown() { return ( <Breadcrumb> <BreadcrumbList> <BreadcrumbItem> <BreadcrumbLink asChild> <Link href=\"/\">Home</Link> </BreadcrumbLink> </BreadcrumbItem> <BreadcrumbSeparator> <SlashIcon /> </BreadcrumbSeparator> <BreadcrumbItem> <DropdownMenu> <DropdownMenuTrigger className=\"flex items-center gap-1 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-35\">\nComponents\n<ChevronDownIcon />\n</DropdownMenuTrigger>\n<DropdownMenuContent align=\"start\">\n<DropdownMenuItem>Documentation</DropdownMenuItem>\n<DropdownMenuItem>Themes</DropdownMenuItem>\n<DropdownMenuItem>GitHub</DropdownMenuItem>\n</DropdownMenuContent>\n</DropdownMenu>\n</BreadcrumbItem>\n<BreadcrumbSeparator>\n<SlashIcon />\n</BreadcrumbSeparator>\n<BreadcrumbItem>\n<BreadcrumbPage>Breadcrumb</BreadcrumbPage>\n</BreadcrumbItem>\n</BreadcrumbList>\n</Breadcrumb>\n)\n}\nCopyimport {\nDropdownMenu,\nDropdownMenuContent,\nDropdownMenuItem,\nDropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\" <BreadcrumbItem>\n<DropdownMenu>\n<DropdownMenuTrigger>\nComponents\n</DropdownMenuTrigger>\n<DropdownMenuContent align=\"start\">\n<DropdownMenuItem>Documentation</DropdownMenuItem>\n<DropdownMenuItem>Themes</DropdownMenuItem>\n<DropdownMenuItem>GitHub</DropdownMenuItem>\n</DropdownMenuContent>\n</DropdownMenu>\n</BreadcrumbItem>\nCollapsed\nWe provide a <BreadcrumbEllipsis /> component to show a collapsed state when the breadcrumb is too long",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 726563,
      "relative_path": "documentation\\shadcn\\_docs_components_breadcrumb.html",
      "source_type": "documentation"
    },
    "token_count": 429,
    "chunk_index": 4,
    "total_chunks": 10
  },
  {
    "id": "17b93bb415a726babedcbd029992c32b",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_breadcrumb.html",
    "source_type": "documentation",
    "title": "Breadcrumb - shadcn/ui",
    "content": "<BreadcrumbSeparator> <SlashIcon /> </BreadcrumbSeparator> <BreadcrumbItem> <DropdownMenu> <DropdownMenuTrigger className=\"flex items-center gap-1 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-35\"> Components <ChevronDownIcon /> </DropdownMenuTrigger> <DropdownMenuContent align=\"start\"> <DropdownMenuItem>Documentation</DropdownMenuItem> <DropdownMenuItem>Themes</DropdownMenuItem> <DropdownMenuItem>GitHub</DropdownMenuItem> </DropdownMenuContent> </DropdownMenu> </BreadcrumbItem> <BreadcrumbSeparator> <SlashIcon /> </BreadcrumbSeparator> <BreadcrumbItem> <BreadcrumbPage>Breadcrumb</BreadcrumbPage> </BreadcrumbItem> </BreadcrumbList> </Breadcrumb> ) } Copyimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger, } from \"@/components/ui/dropdown-menu\" <BreadcrumbItem> <DropdownMenu> <DropdownMenuTrigger> Components </DropdownMenuTrigger> <DropdownMenuContent align=\"start\"> <DropdownMenuItem>Documentation</DropdownMenuItem> <DropdownMenuItem>Themes</DropdownMenuItem> <DropdownMenuItem>GitHub</DropdownMenuItem> </DropdownMenuContent> </DropdownMenu> </BreadcrumbItem> Collapsed We provide a <BreadcrumbEllipsis /> component to show a collapsed state when the breadcrumb is too longPreviewCodeHomeMoreComponentsBreadcrumbCopyimport Link from \"next/link\"\nimport {\nBreadcrumb,\nBreadcrumbEllipsis,\nBreadcrumbItem,\nBreadcrumbLink,\nBreadcrumbList,\nBreadcrumbPage,\nBreadcrumbSeparator,\n} from \"@/components/ui/breadcrumb\"\nexport function BreadcrumbCollapsed() {\nreturn (\n<Breadcrumb>\n<BreadcrumbList>\n<BreadcrumbItem>\n<BreadcrumbLink asChild>\n<Link href=\"/\">Home</Link>\n</BreadcrumbLink>\n</BreadcrumbItem>\n<BreadcrumbSeparator />\n<BreadcrumbItem>\n<BreadcrumbEllipsis />\n</BreadcrumbItem>\n<BreadcrumbSeparator />\n<BreadcrumbItem>\n<BreadcrumbLink asChild>\n<Link href=\"/docs/components\">Components</Link>\n</BreadcrumbLink>\n</BreadcrumbItem>\n<BreadcrumbSeparator />\n<BreadcrumbItem>\n<BreadcrumbPage>Breadcrumb</BreadcrumbPage>\n</BreadcrumbItem>\n</BreadcrumbList>\n</Breadcrumb>\n)\n}\nCopyimport { BreadcrumbEllipsis } from \"@/components/ui/breadcrumb\" <Breadcrumb>\n<BreadcrumbList>\n{/* */}\n<BreadcrumbItem>\n<BreadcrumbEllipsis />\n</BreadcrumbItem>\n{/*",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 726563,
      "relative_path": "documentation\\shadcn\\_docs_components_breadcrumb.html",
      "source_type": "documentation"
    },
    "token_count": 479,
    "chunk_index": 5,
    "total_chunks": 10
  },
  {
    "id": "533114d2febfb301ad1beebd71a840ca",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_breadcrumb.html",
    "source_type": "documentation",
    "title": "Breadcrumb - shadcn/ui",
    "content": "state when the breadcrumb is too longPreviewCodeHomeMoreComponentsBreadcrumbCopyimport Link from \"next/link\" import { Breadcrumb, BreadcrumbEllipsis, BreadcrumbItem, BreadcrumbLink, BreadcrumbList, BreadcrumbPage, BreadcrumbSeparator, } from \"@/components/ui/breadcrumb\" export function BreadcrumbCollapsed() { return ( <Breadcrumb> <BreadcrumbList> <BreadcrumbItem> <BreadcrumbLink asChild> <Link href=\"/\">Home</Link> </BreadcrumbLink> </BreadcrumbItem> <BreadcrumbSeparator /> <BreadcrumbItem> <BreadcrumbEllipsis /> </BreadcrumbItem> <BreadcrumbSeparator /> <BreadcrumbItem> <BreadcrumbLink asChild> <Link href=\"/docs/components\">Components</Link> </BreadcrumbLink> </BreadcrumbItem> <BreadcrumbSeparator /> <BreadcrumbItem> <BreadcrumbPage>Breadcrumb</BreadcrumbPage> </BreadcrumbItem> </BreadcrumbList> </Breadcrumb> ) } Copyimport { BreadcrumbEllipsis } from \"@/components/ui/breadcrumb\" <Breadcrumb> <BreadcrumbList> {/* */} <BreadcrumbItem> <BreadcrumbEllipsis /> </BreadcrumbItem> {/**/}\n</BreadcrumbList>\n</Breadcrumb>\nLink component\nTo use a custom link component from your routing library, you can use the asChild prop on <BreadcrumbLink /> PreviewCodeHomeComponentsBreadcrumbCopyimport Link from \"next/link\"\nimport {\nBreadcrumb,\nBreadcrumbItem,\nBreadcrumbLink,\nBreadcrumbList,\nBreadcrumbPage,\nBreadcrumbSeparator,\n} from \"@/components/ui/breadcrumb\"\nexport function BreadcrumbWithCustomSeparator() {\nreturn (\n<Breadcrumb>\n<BreadcrumbList>\n<BreadcrumbItem>\n<BreadcrumbLink asChild>\n<Link href=\"/\">Home</Link>\n</BreadcrumbLink>\n</BreadcrumbItem>\n<BreadcrumbSeparator />\n<BreadcrumbItem>\n<BreadcrumbLink asChild>\n<Link href=\"/components\">Components</Link>\n</BreadcrumbLink>\n</BreadcrumbItem>\n<BreadcrumbSeparator />\n<BreadcrumbItem>\n<BreadcrumbPage>Breadcrumb</BreadcrumbPage>\n</BreadcrumbItem>\n</BreadcrumbList>\n</Breadcrumb>\n)\n}\nCopyimport { Link } from \"next/link\" <Breadcrumb>\n<BreadcrumbList>\n<BreadcrumbItem>\n<BreadcrumbLink asChild>\n<Link href=\"/\">Home</Link>\n</BreadcrumbLink>\n</BreadcrumbItem>\n{/* */}\n</BreadcrumbList>\n</Breadcrumb>\nResponsive\nHere's an example of a responsive breadcrumb that composes <BreadcrumbItem /> with <BreadcrumbEllipsis />, <DropdownMenu />, and <Drawer /> It displays a dropdown on desktop and a drawer on mobile",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 726563,
      "relative_path": "documentation\\shadcn\\_docs_components_breadcrumb.html",
      "source_type": "documentation"
    },
    "token_count": 493,
    "chunk_index": 6,
    "total_chunks": 10
  },
  {
    "id": "490a31f88aa5414fe5d1c248fd490f37",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_breadcrumb.html",
    "source_type": "documentation",
    "title": "Breadcrumb - shadcn/ui",
    "content": "<BreadcrumbList> <BreadcrumbItem> <BreadcrumbLink asChild> <Link href=\"/\">Home</Link> </BreadcrumbLink> </BreadcrumbItem> <BreadcrumbSeparator /> <BreadcrumbItem> <BreadcrumbLink asChild> <Link href=\"/components\">Components</Link> </BreadcrumbLink> </BreadcrumbItem> <BreadcrumbSeparator /> <BreadcrumbItem> <BreadcrumbPage>Breadcrumb</BreadcrumbPage> </BreadcrumbItem> </BreadcrumbList> </Breadcrumb> ) } Copyimport { Link } from \"next/link\" <Breadcrumb> <BreadcrumbList> <BreadcrumbItem> <BreadcrumbLink asChild> <Link href=\"/\">Home</Link> </BreadcrumbLink> </BreadcrumbItem> {/* */} </BreadcrumbList> </Breadcrumb> Responsive Here's an example of a responsive breadcrumb that composes <BreadcrumbItem /> with <BreadcrumbEllipsis />, <DropdownMenu />, and <Drawer /> It displays a dropdown on desktop and a drawer on mobilePreviewCodeHomeMoreData FetchingCaching and RevalidatingCopy\"use client\"\nimport * as React from \"react\"\nimport Link from \"next/link\"\nimport { useMediaQuery } from \"@/hooks/use-media-query\"\nimport {\nBreadcrumb,\nBreadcrumbEllipsis,\nBreadcrumbItem,\nBreadcrumbLink,\nBreadcrumbList,\nBreadcrumbPage,\nBreadcrumbSeparator,\n} from \"@/components/ui/breadcrumb\"\nimport { Button } from \"@/components/ui/button\"\nimport {\nDrawer,\nDrawerClose,\nDrawerContent,\nDrawerDescription,\nDrawerFooter,\nDrawerHeader,\nDrawerTitle,\nDrawerTrigger,\n} from \"@/components/ui/drawer\"\nimport {\nDropdownMenu,\nDropdownMenuContent,\nDropdownMenuItem,\nDropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nconst items = [\n{ href: \"#\", label: \"Home\" },\n{ href: \"#\", label: \"Documentation\" },\n{ href: \"#\", label: \"Building Your Application\" },\n{ href: \"#\", label: \"Data Fetching\" },\n{ label: \"Caching and Revalidating\" },\n]\nconst ITEMS_TO_DISPLAY = 3\nexport function BreadcrumbResponsive() {\nconst [open, setOpen] = React useState(false)\nconst isDesktop = useMediaQuery(\"(min-width: 768px)\")\nreturn (\n<Breadcrumb>\n<BreadcrumbList>\n<BreadcrumbItem>\n<BreadcrumbLink asChild>\n<Link href={items[0] href \"/\"}>{items[0] label}</Link>\n</BreadcrumbLink>\n</BreadcrumbItem>\n<BreadcrumbSeparator />\n{items length > ITEMS_TO_DISPLAY",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 726563,
      "relative_path": "documentation\\shadcn\\_docs_components_breadcrumb.html",
      "source_type": "documentation"
    },
    "token_count": 493,
    "chunk_index": 7,
    "total_chunks": 10
  },
  {
    "id": "0bc1985c8a00fedd98ecb2fbb7b07cec",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_breadcrumb.html",
    "source_type": "documentation",
    "title": "Breadcrumb - shadcn/ui",
    "content": "items = [ { href: \"#\", label: \"Home\" }, { href: \"#\", label: \"Documentation\" }, { href: \"#\", label: \"Building Your Application\" }, { href: \"#\", label: \"Data Fetching\" }, { label: \"Caching and Revalidating\" }, ] const ITEMS_TO_DISPLAY = 3 export function BreadcrumbResponsive() { const [open, setOpen] = React useState(false) const isDesktop = useMediaQuery(\"(min-width: 768px)\") return ( <Breadcrumb> <BreadcrumbList> <BreadcrumbItem> <BreadcrumbLink asChild> <Link href={items[0] href \"/\"}>{items[0] label}</Link> </BreadcrumbLink> </BreadcrumbItem> <BreadcrumbSeparator /> {items length > ITEMS_TO_DISPLAY(\n<>\n<BreadcrumbItem>\n{isDesktop (\n<DropdownMenu open={open} onOpenChange={setOpen}>\n<DropdownMenuTrigger\nclassName=\"flex items-center gap-1\"\naria-label=\"Toggle menu\"\n>\n<BreadcrumbEllipsis className=\"size-4\" />\n</DropdownMenuTrigger>\n<DropdownMenuContent align=\"start\">\n{items slice(1, -2) map((item, index) => (\n<DropdownMenuItem key={index}>\n<Link href={item href item href : \"#\"}>\n{item label}\n</Link>\n</DropdownMenuItem>\n))}\n</DropdownMenuContent>\n</DropdownMenu>\n) : (\n<Drawer open={open} onOpenChange={setOpen}>\n<DrawerTrigger aria-label=\"Toggle Menu\">\n<BreadcrumbEllipsis className=\"h-4 w-4\" />\n</DrawerTrigger>\n<DrawerContent>\n<DrawerHeader className=\"text-left\">\n<DrawerTitle>Navigate to</DrawerTitle>\n<DrawerDescription>\nSelect a page to navigate to </DrawerDescription>\n</DrawerHeader>\n<div className=\"grid gap-1 px-4\">\n{items slice(1, -2) map((item, index) => (\n<Link\nkey={index}\nhref={item href item href : \"#\"}\nclassName=\"py-1 text-sm\"\n>\n{item label}\n</Link>\n))}\n</div>\n<DrawerFooter className=\"pt-4\">\n<DrawerClose asChild>\n<Button variant=\"outline\">Close</Button>\n</DrawerClose>\n</DrawerFooter>\n</DrawerContent>\n</Drawer>\n)}\n</BreadcrumbItem>\n<BreadcrumbSeparator />\n</>\n) : null}\n{items slice(-ITEMS_TO_DISPLAY + 1)",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 726563,
      "relative_path": "documentation\\shadcn\\_docs_components_breadcrumb.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 8,
    "total_chunks": 10
  },
  {
    "id": "7ee88dad9c4fe0c31e9c6231e015efe0",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_breadcrumb.html",
    "source_type": "documentation",
    "title": "Breadcrumb - shadcn/ui",
    "content": ": ( <Drawer open={open} onOpenChange={setOpen}> <DrawerTrigger aria-label=\"Toggle Menu\"> <BreadcrumbEllipsis className=\"h-4 w-4\" /> </DrawerTrigger> <DrawerContent> <DrawerHeader className=\"text-left\"> <DrawerTitle>Navigate to</DrawerTitle> <DrawerDescription> Select a page to navigate to </DrawerDescription> </DrawerHeader> <div className=\"grid gap-1 px-4\"> {items slice(1, -2) map((item, index) => ( <Link key={index} href={item href item href : \"#\"} className=\"py-1 text-sm\" > {item label} </Link> ))} </div> <DrawerFooter className=\"pt-4\"> <DrawerClose asChild> <Button variant=\"outline\">Close</Button> </DrawerClose> </DrawerFooter> </DrawerContent> </Drawer> )} </BreadcrumbItem> <BreadcrumbSeparator /> </> ) : null} {items slice(-ITEMS_TO_DISPLAY + 1)map((item, index) => (\n<BreadcrumbItem key={index}>\n{item href (\n<>\n<BreadcrumbLink\nasChild\nclassName=\"max-w-20 truncate md:max-w-none\"\n>\n<Link href={item href}>{item label}</Link>\n</BreadcrumbLink>\n<BreadcrumbSeparator />\n</>\n) : (\n<BreadcrumbPage className=\"max-w-20 truncate md:max-w-none\">\n{item label}\n</BreadcrumbPage>\n)}\n</BreadcrumbItem>\n))}\n</BreadcrumbList>\n</Breadcrumb>\n)\n}\nBadgeButton On This PageInstallationUsageExamplesCustom separatorDropdownCollapsedLink componentResponsiveDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 726563,
      "relative_path": "documentation\\shadcn\\_docs_components_breadcrumb.html",
      "source_type": "documentation"
    },
    "token_count": 393,
    "chunk_index": 9,
    "total_chunks": 10
  },
  {
    "id": "d5dc54cd5b25203fcfda9d365c9ff5c2",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_card.html",
    "source_type": "documentation",
    "title": "Card - shadcn/ui",
    "content": "Card - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonCardCopy PagePreviousNextDisplays a card with header, content, and footer PreviewCodeLogin to your accountEnter your email below to login to your accountSign UpEmailPasswordForgot your password LoginLogin with GoogleCopyimport { Button } from \"@/components/ui/button\"\nimport {\nCard,\nCardAction,\nCardContent,\nCardDescription,\nCardFooter,\nCardHeader,\nCardTitle,\n} from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nexport function CardDemo() {\nreturn (\n<Card className=\"w-full max-w-sm\">\n<CardHeader>\n<CardTitle>Login to your account</CardTitle>\n<CardDescription>\nEnter your email below to login to your account\n</CardDescription>\n<CardAction>\n<Button variant=\"link\">Sign Up</Button>\n</CardAction>\n</CardHeader>\n<CardContent>\n<form>\n<div className=\"flex flex-col gap-6\">\n<div className=\"grid gap-2\">\n<Label htmlFor=\"email\">Email</Label>\n<Input\nid=\"email\"\ntype=\"email\"\nplaceholder=\"m@example com\"\nrequired\n/>\n</div>\n<div className=\"grid gap-2\">\n<div className=\"flex items-center\">\n<Label htmlFor=\"password\">Password</Label>\n<a\nhref=\"#\"\nclassName=\"ml-auto inline-block text-sm underline-offset-4 hover:underline\"\n>\nForgot your password",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 416816,
      "relative_path": "documentation\\shadcn\\_docs_components_card.html",
      "source_type": "documentation"
    },
    "token_count": 453,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "f0acb8d74c1bdc7c4c4ef2009f6b47f6",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_card.html",
    "source_type": "documentation",
    "title": "Card - shadcn/ui",
    "content": "\"@/components/ui/input\" import { Label } from \"@/components/ui/label\" export function CardDemo() { return ( <Card className=\"w-full max-w-sm\"> <CardHeader> <CardTitle>Login to your account</CardTitle> <CardDescription> Enter your email below to login to your account </CardDescription> <CardAction> <Button variant=\"link\">Sign Up</Button> </CardAction> </CardHeader> <CardContent> <form> <div className=\"flex flex-col gap-6\"> <div className=\"grid gap-2\"> <Label htmlFor=\"email\">Email</Label> <Input id=\"email\" type=\"email\" placeholder=\"m@example com\" required /> </div> <div className=\"grid gap-2\"> <div className=\"flex items-center\"> <Label htmlFor=\"password\">Password</Label> <a href=\"#\" className=\"ml-auto inline-block text-sm underline-offset-4 hover:underline\" > Forgot your password</a>\n</div>\n<Input id=\"password\" type=\"password\" required />\n</div>\n</div>\n</form>\n</CardContent>\n<CardFooter className=\"flex-col gap-2\">\n<Button type=\"submit\" className=\"w-full\">\nLogin\n</Button>\n<Button variant=\"outline\" className=\"w-full\">\nLogin with Google\n</Button>\n</CardFooter>\n</Card>\n)\n}\nInstallation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add cardCopy\nUsage\nCopyimport {\nCard,\nCardAction,\nCardContent,\nCardDescription,\nCardFooter,\nCardHeader,\nCardTitle,\n} from \"@/components/ui/card\"\nCopy<Card>\n<CardHeader>\n<CardTitle>Card Title</CardTitle>\n<CardDescription>Card Description</CardDescription>\n<CardAction>Card Action</CardAction>\n</CardHeader>\n<CardContent>\n<p>Card Content</p>\n</CardContent>\n<CardFooter>\n<p>Card Footer</p>\n</CardFooter>\n</Card> CalendarCarousel On This PageInstallationUsageDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 416816,
      "relative_path": "documentation\\shadcn\\_docs_components_card.html",
      "source_type": "documentation"
    },
    "token_count": 468,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "35d0f66f47436cde846283a73025b797",
    "source_file": "corpus\\documentation\\shadcn\\_docs_changelog.html",
    "source_type": "documentation",
    "title": "Changelog - shadcn/ui",
    "content": "Changelog - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonChangelogCopy PagePreviousNextLatest updates and announcements July 2025 - Universal Registry Items\nWe've added support for universal registry items This allows you to create registry items that can be distributed to any project i e no framework, no components json, no tailwind, no react required This new registry item type unlocks a lot of new workflows You can now distribute code, config, rules, docs, anything to any code project See the docs for more details and examples July 2025 - Local File Support\nThe shadcn CLI now supports local files Initialize projects and add components, themes, hooks, utils and more from local JSON files Copy# Initialize a project from a local file\nnpx shadcn init /template json\n# Add a component from a local file\nnpx shadcn add /block json\nThis feature enables powerful new workflows:\nZero setup - No remote registries required\nFaster development - Test registry items locally before publishing\nEnhanced workflow for agents and MCP - Generate and run registry items locally\nPrivate components - Keep proprietary components local and private June 2025 - radix-ui\nWe've added a new command to migrate to the new radix-ui package This command will replace all @radix-ui/react-* imports with radix-ui pnpmnpmyarnbunpnpm dlx shadcn@latest migrate radixCopy\nIt will automatically update all imports in your ui components and install radix-ui as a dependency components/ui/alert-dialog",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1277789,
      "relative_path": "documentation\\shadcn\\_docs_changelog.html",
      "source_type": "documentation"
    },
    "token_count": 476,
    "chunk_index": 0,
    "total_chunks": 26
  },
  {
    "id": "2d57bd8d4cc688f3678c2449d857fbc4",
    "source_file": "corpus\\documentation\\shadcn\\_docs_changelog.html",
    "source_type": "documentation",
    "title": "Changelog - shadcn/ui",
    "content": "- Test registry items locally before publishing Enhanced workflow for agents and MCP - Generate and run registry items locally Private components - Keep proprietary components local and private June 2025 - radix-ui We've added a new command to migrate to the new radix-ui package This command will replace all @radix-ui/react-* imports with radix-ui pnpmnpmyarnbunpnpm dlx shadcn@latest migrate radixCopy It will automatically update all imports in your ui components and install radix-ui as a dependency components/ui/alert-dialogtsxCopy- import * as AlertDialogPrimitive from \"@radix-ui/react-dialog\"\n+ import { AlertDialog as AlertDialogPrimitive } from \"radix-ui\"\nMake sure to test your components and project after running the command Note: To update imports for newly added components, run the migration command again June 2025 - Calendar Component\nWe've upgraded the Calendar component to the latest version of React DayPicker This is a major upgrade and includes a lot of new features and improvements We've also built a collection of 30+ calendar blocks that you can use to build your own calendar components See all calendar blocks in the Blocks Library page To upgrade your project to the latest version of the Calendar component, see the upgrade guide May 2025 - New Site\nWe've upgraded ui shadcn com to Next js 15 3 and Tailwind v4 The site now uses the upgraded new-york components We've also made some minor design updates to make the site faster and easier to navigate This upgrade unlocks a lot of new features that we're working on More to come April 2025 - MCP\nWe're working on zero-config MCP support for shadcn/ui registry One command npx shadcn registry:mcp to make any registry mcp-compatible Learn more in the thread here: https://x com/shadcn/status/1917597228513853603\nMarch 2025 - shadcn 2 5 0\nWe tagged shadcn 2 5 0 earlier this week It comes with a pretty cool feature: resolve anywhere Registries can now place files anywhere in an app and we'll properly resolve imports No need to stick to a fixed file structure It can even add files outside the registry itself On install, we track all files and perform a multi-pass resolution to correctly handle imports and aliases It's fast March 2025 - Cross-framework Route Support\nThe shadcn CLI can now auto-detect your framework and adapts routes for you",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1277789,
      "relative_path": "documentation\\shadcn\\_docs_changelog.html",
      "source_type": "documentation"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 26
  },
  {
    "id": "69b8c343decdb007ee986c7a045b4da5",
    "source_file": "corpus\\documentation\\shadcn\\_docs_changelog.html",
    "source_type": "documentation",
    "title": "Changelog - shadcn/ui",
    "content": "a pretty cool feature: resolve anywhere Registries can now place files anywhere in an app and we'll properly resolve imports No need to stick to a fixed file structure It can even add files outside the registry itself On install, we track all files and perform a multi-pass resolution to correctly handle imports and aliases It's fast March 2025 - Cross-framework Route Support The shadcn CLI can now auto-detect your framework and adapts routes for youWorks with all frameworks including Laravel, Vite and React Router February 2025 - Tailwind v4\nWe shipped the first preview of Tailwind v4 and React 19 Ready for you to try out You can start using it today What's New:\nThe CLI can now initialize projects with Tailwind v4 Full support for the new @theme directive and @theme inline option All components are updated for Tailwind v4 and React 19 We've removed the forwardRefs and adjusted the types Every primitive now has a data-slot attribute for styling We've fixed and cleaned up the style of the components We're deprecating the toast component in favor of sonner Buttons now use the default cursor We're deprecating the default style New projects will use new-york HSL colors are now converted to OKLCH Read more in the docs February 2025 - Updated Registry Schema\nWe're updating the registry schema to support more features Define code as a flat JSON file and distribute it via the CLI Custom styles: bring your own design system, components & tokens\nExtend, override, mix & match components from third-party registries and LLMs\nInstall themes, CSS vars, hooks, animations, and Tailwind layers & utilities\nJanuary 2025 - Blocks\nWe are inviting the community to contribute to the blocks library Share your components and blocks with other developers and help build a library of high-quality, reusable components We'd love to see all types of blocks: applications, marketing, products, and more See the docs page to get started December 2024 - Monorepo Support\nUntil now, using shadcn/ui in a monorepo was a bit of a pain You could add\ncomponents using the CLI, but you had to manage where the components\nwere installed and manually fix import paths With the new monorepo support in the CLI, we've made it a lot easier to use\nshadcn/ui in a monorepo",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1277789,
      "relative_path": "documentation\\shadcn\\_docs_changelog.html",
      "source_type": "documentation"
    },
    "token_count": 486,
    "chunk_index": 2,
    "total_chunks": 26
  },
  {
    "id": "44582272bebeb32daa853a048740c915",
    "source_file": "corpus\\documentation\\shadcn\\_docs_changelog.html",
    "source_type": "documentation",
    "title": "Changelog - shadcn/ui",
    "content": "all types of blocks: applications, marketing, products, and more See the docs page to get started December 2024 - Monorepo Support Until now, using shadcn/ui in a monorepo was a bit of a pain You could add components using the CLI, but you had to manage where the components were installed and manually fix import paths With the new monorepo support in the CLI, we've made it a lot easier to use shadcn/ui in a monorepoThe CLI now understands the monorepo structure and will install the components,\ndependencies and registry dependencies to the correct paths and handle imports\nfor you Read more in the docs November 2024 - Icons\nAn update on icons The new-york style now uses Lucide as the default icon set New projects will use Lucide by default\nNo breaking changes for existing projects\nUse the CLI to (optionally) migrate primitives to Lucide\nFor more info on why we're doing this, see the thread October 2024 - React 19\nshadcn/ui is now compatible with React 19 and Next js 15 We published a guide to help you upgrade your project to React 19 Read more here October 2024 - Sidebar\nIntroducing sidebar tsx: 25 components to help you build all kinds of sidebars I don't like building sidebars So I built 30+ of them All types Then simplified the core into sidebar tsx: a strong foundation to build on top of It works with Next js, Remix, Vite & Laravel See the announcement here August 2024 - npx shadcn init\nThe new CLI is now available It's a complete rewrite with a lot of new features and improvements You can now install components, themes, hooks, utils and more using npx shadcn add This is a major step towards distributing code that you and your LLMs can access and use First up, the cli now has support for all major React framework out of the box Next js, Remix, Vite and Laravel And when you init into a new app, we update your existing Tailwind files instead of overriding A component now ship its own dependencies Take the accordion for example, it can define its Tailwind keyframes When you add it to your project, we'll update your tailwind config ts file accordingly You can also install remote components using url npx shadcn add https://acme com/registry/navbar json",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1277789,
      "relative_path": "documentation\\shadcn\\_docs_changelog.html",
      "source_type": "documentation"
    },
    "token_count": 496,
    "chunk_index": 3,
    "total_chunks": 26
  },
  {
    "id": "589beddb5389a73d9ab9b9f1472b2cd6",
    "source_file": "corpus\\documentation\\shadcn\\_docs_changelog.html",
    "source_type": "documentation",
    "title": "Changelog - shadcn/ui",
    "content": "React framework out of the box Next js, Remix, Vite and Laravel And when you init into a new app, we update your existing Tailwind files instead of overriding A component now ship its own dependencies Take the accordion for example, it can define its Tailwind keyframes When you add it to your project, we'll update your tailwind config ts file accordingly You can also install remote components using url npx shadcn add https://acme com/registry/navbar jsonWe have also improve the init command It does framework detection and can even init a brand new Next js app in one command npx shadcn init We have created a new schema that you can use to ship your own component registry And since it has support for urls, you can even use it to distribute private components And a few more updates like better error handling and monorepo support You can try the new cli today pnpmnpmyarnbunpnpm dlx shadcn init sidebar-01 login-01Copy\nUpdate Your Project\nTo update an existing project to use the new CLI, update your components json file to include import aliases for your components, utils, ui, lib and hooks components jsonCopy{\n\"$schema\": \"https://ui shadcn com/schema json\",\n\"style\": \"new-york\",\n\"tailwind\": {\n// },\n\"aliases\": {\n\"components\": \"@/components\",\n\"utils\": \"@/lib/utils\",\n\"ui\": \"@/components/ui\",\n\"lib\": \"@/lib\",\n\"hooks\": \"@/hooks\"\n}\n}\nIf you're using a different import alias prefix eg ~, replace @ with your prefix April 2024 - Introducing Lift Mode\nWe're introducing a new mode for Blocks called Lift Mode Enable Lift Mode to automatically \"lift\" smaller components from a block template for copy and paste View the blocks library\nWith Lift Mode, you'll be able to copy the smaller components that make up a block template, like cards, buttons, and forms, and paste them directly into your project Visit the Blocks page to try it out March 2024 - Introducing Blocks\nOne of the most requested features since launch has been layouts: admin dashboards with sidebar, marketing page sections, cards and more Today, we're launching Blocks View the blocks library\nBlocks are ready-made components that you can use to build your apps",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1277789,
      "relative_path": "documentation\\shadcn\\_docs_changelog.html",
      "source_type": "documentation"
    },
    "token_count": 471,
    "chunk_index": 4,
    "total_chunks": 26
  },
  {
    "id": "7696917df6c13c903410228aa5f6b646",
    "source_file": "corpus\\documentation\\shadcn\\_docs_changelog.html",
    "source_type": "documentation",
    "title": "Changelog - shadcn/ui",
    "content": "copy the smaller components that make up a block template, like cards, buttons, and forms, and paste them directly into your project Visit the Blocks page to try it out March 2024 - Introducing Blocks One of the most requested features since launch has been layouts: admin dashboards with sidebar, marketing page sections, cards and more Today, we're launching Blocks View the blocks library Blocks are ready-made components that you can use to build your appsThey are fully responsive, accessible, and composable, meaning they are built using the same principles as the rest of the components in shadcn/ui We're starting with dashboard layouts and authentication pages, with plans to add more blocks in the coming weeks Open Source\nBlocks are open source You can find the source on GitHub Use them in your projects, customize them and contribute back View the blocks library\nRequest a Block\nWe're also introducing a \"Request a Block\" feature If there's a specific block you'd like to see, simply create a request on GitHub and the community can upvote and build it View the blocks library\nv0\nIf you have a v0 account, you can use the Edit in v0 feature to open the code on v0 for prompting and further generation That's it Looking forward to seeing what you build with Blocks March 2024 - Breadcrumb and Input OTP\nWe've added a new Breadcrumb component and an Input OTP component Breadcrumb\nAn accessible and flexible breadcrumb component It has support for collapsed items, custom separators, bring-your-own routing <Link /> and composable with other shadcn/ui components",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1277789,
      "relative_path": "documentation\\shadcn\\_docs_changelog.html",
      "source_type": "documentation"
    },
    "token_count": 322,
    "chunk_index": 5,
    "total_chunks": 26
  },
  {
    "id": "f1bea3d3c7d8cfeb88809de5e97cfbd2",
    "source_file": "corpus\\documentation\\shadcn\\_docs_changelog.html",
    "source_type": "documentation",
    "title": "Changelog - shadcn/ui",
    "content": "a v0 account, you can use the Edit in v0 feature to open the code on v0 for prompting and further generation That's it Looking forward to seeing what you build with Blocks March 2024 - Breadcrumb and Input OTP We've added a new Breadcrumb component and an Input OTP component Breadcrumb An accessible and flexible breadcrumb component It has support for collapsed items, custom separators, bring-your-own routing <Link /> and composable with other shadcn/ui componentsPreviewCodeHomeMoreToggle menuComponentsBreadcrumbCopyimport Link from \"next/link\"\nimport {\nBreadcrumb,\nBreadcrumbEllipsis,\nBreadcrumbItem,\nBreadcrumbLink,\nBreadcrumbList,\nBreadcrumbPage,\nBreadcrumbSeparator,\n} from \"@/components/ui/breadcrumb\"\nimport {\nDropdownMenu,\nDropdownMenuContent,\nDropdownMenuItem,\nDropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nexport function BreadcrumbDemo() {\nreturn (\n<Breadcrumb>\n<BreadcrumbList>\n<BreadcrumbItem>\n<BreadcrumbLink asChild>\n<Link href=\"/\">Home</Link>\n</BreadcrumbLink>\n</BreadcrumbItem>\n<BreadcrumbSeparator />\n<BreadcrumbItem>\n<DropdownMenu>\n<DropdownMenuTrigger className=\"flex items-center gap-1\">\n<BreadcrumbEllipsis className=\"size-4\" />\n<span className=\"sr-only\">Toggle menu</span>\n</DropdownMenuTrigger>\n<DropdownMenuContent align=\"start\">\n<DropdownMenuItem>Documentation</DropdownMenuItem>\n<DropdownMenuItem>Themes</DropdownMenuItem>\n<DropdownMenuItem>GitHub</DropdownMenuItem>\n</DropdownMenuContent>\n</DropdownMenu>\n</BreadcrumbItem>\n<BreadcrumbSeparator />\n<BreadcrumbItem>\n<BreadcrumbLink asChild>\n<Link href=\"/docs/components\">Components</Link>\n</BreadcrumbLink>\n</BreadcrumbItem>\n<BreadcrumbSeparator />\n<BreadcrumbItem>\n<BreadcrumbPage>Breadcrumb</BreadcrumbPage>\n</BreadcrumbItem>\n</BreadcrumbList>\n</Breadcrumb>\n)\n}\nSee more examples\nInput OTP\nA fully featured input OTP component It has support for numeric and alphanumeric codes, custom length, copy-paste and accessible Input OTP is built on top of input-otp by @guilherme_rodz",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1277789,
      "relative_path": "documentation\\shadcn\\_docs_changelog.html",
      "source_type": "documentation"
    },
    "token_count": 421,
    "chunk_index": 6,
    "total_chunks": 26
  },
  {
    "id": "2e335bcb1e6ee73c73aee8bdd6df11b1",
    "source_file": "corpus\\documentation\\shadcn\\_docs_changelog.html",
    "source_type": "documentation",
    "title": "Changelog - shadcn/ui",
    "content": "</BreadcrumbItem> <BreadcrumbSeparator /> <BreadcrumbItem> <DropdownMenu> <DropdownMenuTrigger className=\"flex items-center gap-1\"> <BreadcrumbEllipsis className=\"size-4\" /> <span className=\"sr-only\">Toggle menu</span> </DropdownMenuTrigger> <DropdownMenuContent align=\"start\"> <DropdownMenuItem>Documentation</DropdownMenuItem> <DropdownMenuItem>Themes</DropdownMenuItem> <DropdownMenuItem>GitHub</DropdownMenuItem> </DropdownMenuContent> </DropdownMenu> </BreadcrumbItem> <BreadcrumbSeparator /> <BreadcrumbItem> <BreadcrumbLink asChild> <Link href=\"/docs/components\">Components</Link> </BreadcrumbLink> </BreadcrumbItem> <BreadcrumbSeparator /> <BreadcrumbItem> <BreadcrumbPage>Breadcrumb</BreadcrumbPage> </BreadcrumbItem> </BreadcrumbList> </Breadcrumb> ) } See more examples Input OTP A fully featured input OTP component It has support for numeric and alphanumeric codes, custom length, copy-paste and accessible Input OTP is built on top of input-otp by @guilherme_rodzPreviewCodeCopyimport {\nInputOTP,\nInputOTPGroup,\nInputOTPSeparator,\nInputOTPSlot,\n} from \"@/components/ui/input-otp\"\nexport function InputOTPDemo() {\nreturn (\n<InputOTP maxLength={6}>\n<InputOTPGroup>\n<InputOTPSlot index={0} />\n<InputOTPSlot index={1} />\n<InputOTPSlot index={2} />\n</InputOTPGroup>\n<InputOTPSeparator />\n<InputOTPGroup>\n<InputOTPSlot index={3} />\n<InputOTPSlot index={4} />\n<InputOTPSlot index={5} />\n</InputOTPGroup>\n</InputOTP>\n)\n}\nRead the docs\nIf you have a v0, the new components are available for generation December 2023 - New components, CLI and more\nWe've added new components to shadcn/ui and made a lot of improvements to the CLI Here's a quick overview of what's new:\nCarousel - A carousel component with motion, swipe gestures and keyboard support Drawer - A drawer component that looks amazing on mobile Pagination - A pagination component with page navigation, previous and next buttons Resizable - A resizable component for building resizable panel groups and layouts Sonner - The last toast component you'll ever need CLI updates - Support for custom Tailwind prefix and tailwind config ts Carousel\nWe've added a fully featured carousel component with motion, swipe gestures and keyboard support",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1277789,
      "relative_path": "documentation\\shadcn\\_docs_changelog.html",
      "source_type": "documentation"
    },
    "token_count": 496,
    "chunk_index": 7,
    "total_chunks": 26
  },
  {
    "id": "c936217b457e2b97295860455a7dcc30",
    "source_file": "corpus\\documentation\\shadcn\\_docs_changelog.html",
    "source_type": "documentation",
    "title": "Changelog - shadcn/ui",
    "content": "motion, swipe gestures and keyboard support Drawer - A drawer component that looks amazing on mobile Pagination - A pagination component with page navigation, previous and next buttons Resizable - A resizable component for building resizable panel groups and layouts Sonner - The last toast component you'll ever need CLI updates - Support for custom Tailwind prefix and tailwind config ts Carousel We've added a fully featured carousel component with motion, swipe gestures and keyboard supportBuilt on top of Embla Carousel It has support for infinite looping, autoplay, vertical orientation, and more PreviewCode12345Previous slideNext slideCopyimport * as React from \"react\"\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport {\nCarousel,\nCarouselContent,\nCarouselItem,\nCarouselNext,\nCarouselPrevious,\n} from \"@/components/ui/carousel\"\nexport function CarouselDemo() {\nreturn (\n<Carousel className=\"w-full max-w-xs\">\n<CarouselContent>\n{Array from({ length: 5 }) map((_, index) => (\n<CarouselItem key={index}>\n<div className=\"p-1\">\n<Card>\n<CardContent className=\"flex aspect-square items-center justify-center p-6\">\n<span className=\"text-4xl font-semibold\">{index + 1}</span>\n</CardContent>\n</Card>\n</div>\n</CarouselItem>\n))}\n</CarouselContent>\n<CarouselPrevious />\n<CarouselNext />\n</Carousel>\n)\n}\nDrawer\nOh the drawer component 😍 Built on top of Vaul by emilkowalski_ Try opening the following drawer on mobile It looks amazing",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1277789,
      "relative_path": "documentation\\shadcn\\_docs_changelog.html",
      "source_type": "documentation"
    },
    "token_count": 308,
    "chunk_index": 8,
    "total_chunks": 26
  },
  {
    "id": "03afba4670f7386751a271292e9777bc",
    "source_file": "corpus\\documentation\\shadcn\\_docs_changelog.html",
    "source_type": "documentation",
    "title": "Changelog - shadcn/ui",
    "content": "CarouselNext, CarouselPrevious, } from \"@/components/ui/carousel\" export function CarouselDemo() { return ( <Carousel className=\"w-full max-w-xs\"> <CarouselContent> {Array from({ length: 5 }) map((_, index) => ( <CarouselItem key={index}> <div className=\"p-1\"> <Card> <CardContent className=\"flex aspect-square items-center justify-center p-6\"> <span className=\"text-4xl font-semibold\">{index + 1}</span> </CardContent> </Card> </div> </CarouselItem> ))} </CarouselContent> <CarouselPrevious /> <CarouselNext /> </Carousel> ) } Drawer Oh the drawer component 😍 Built on top of Vaul by emilkowalski_ Try opening the following drawer on mobile It looks amazingPreviewCodeOpen DrawerCopy\"use client\"\nimport * as React from \"react\"\nimport { Minus, Plus } from \"lucide-react\"\nimport { Bar, BarChart, ResponsiveContainer } from \"recharts\"\nimport { Button } from \"@/components/ui/button\"\nimport {\nDrawer,\nDrawerClose,\nDrawerContent,\nDrawerDescription,\nDrawerFooter,\nDrawerHeader,\nDrawerTitle,\nDrawerTrigger,\n} from \"@/components/ui/drawer\"\nconst data = [\n{\ngoal: 400,\n},\n{\ngoal: 300,\n},\n{\ngoal: 200,\n},\n{\ngoal: 300,\n},\n{\ngoal: 200,\n},\n{\ngoal: 278,\n},\n{\ngoal: 189,\n},\n{\ngoal: 239,\n},\n{\ngoal: 300,\n},\n{\ngoal: 200,\n},\n{\ngoal: 278,\n},\n{\ngoal: 189,\n},\n{\ngoal: 349,\n},\n]\nexport function DrawerDemo() {\nconst [goal, setGoal] = React useState(350)\nfunction onClick(adjustment: number) {\nsetGoal(Math max(200, Math min(400, goal + adjustment)))\n}\nreturn (\n<Drawer>\n<DrawerTrigger asChild>\n<Button variant=\"outline\">Open Drawer</Button>\n</DrawerTrigger>\n<DrawerContent>\n<div className=\"mx-auto w-full max-w-sm\">\n<DrawerHeader>\n<DrawerTitle>Move Goal</DrawerTitle>\n<DrawerDescription>Set your daily activity goal",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1277789,
      "relative_path": "documentation\\shadcn\\_docs_changelog.html",
      "source_type": "documentation"
    },
    "token_count": 457,
    "chunk_index": 9,
    "total_chunks": 26
  },
  {
    "id": "76f25fa872883a04538fcc8733b2b460",
    "source_file": "corpus\\documentation\\shadcn\\_docs_changelog.html",
    "source_type": "documentation",
    "title": "Changelog - shadcn/ui",
    "content": "goal: 278, }, { goal: 189, }, { goal: 239, }, { goal: 300, }, { goal: 200, }, { goal: 278, }, { goal: 189, }, { goal: 349, }, ] export function DrawerDemo() { const [goal, setGoal] = React useState(350) function onClick(adjustment: number) { setGoal(Math max(200, Math min(400, goal + adjustment))) } return ( <Drawer> <DrawerTrigger asChild> <Button variant=\"outline\">Open Drawer</Button> </DrawerTrigger> <DrawerContent> <div className=\"mx-auto w-full max-w-sm\"> <DrawerHeader> <DrawerTitle>Move Goal</DrawerTitle> <DrawerDescription>Set your daily activity goal</DrawerDescription>\n</DrawerHeader>\n<div className=\"p-4 pb-0\">\n<div className=\"flex items-center justify-center space-x-2\">\n<Button\nvariant=\"outline\"\nsize=\"icon\"\nclassName=\"h-8 w-8 shrink-0 rounded-full\"\nonClick={() => onClick(-10)}\ndisabled={goal <= 200}\n>\n<Minus />\n<span className=\"sr-only\">Decrease</span>\n</Button>\n<div className=\"flex-1 text-center\">\n<div className=\"text-7xl font-bold tracking-tighter\">\n{goal}\n</div>\n<div className=\"text-muted-foreground text-[0 70rem] uppercase\">\nCalories/day\n</div>\n</div>\n<Button\nvariant=\"outline\"\nsize=\"icon\"\nclassName=\"h-8 w-8 shrink-0 rounded-full\"\nonClick={() => onClick(10)}\ndisabled={goal >= 400}\n>\n<Plus />\n<span className=\"sr-only\">Increase</span>\n</Button>\n</div>\n<div className=\"mt-3 h-[120px]\">\n<ResponsiveContainer width=\"100%\" height=\"100%\">\n<BarChart data={data}>\n<Bar\ndataKey=\"goal\"\nstyle={\n{\nfill: \"hsl(var(--foreground))\",\nopacity: 0 9,\n} as React",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1277789,
      "relative_path": "documentation\\shadcn\\_docs_changelog.html",
      "source_type": "documentation"
    },
    "token_count": 426,
    "chunk_index": 10,
    "total_chunks": 26
  },
  {
    "id": "6bc8c0a8f30ef5fcf9783d2a41f01f2a",
    "source_file": "corpus\\documentation\\shadcn\\_docs_changelog.html",
    "source_type": "documentation",
    "title": "Changelog - shadcn/ui",
    "content": "<Button variant=\"outline\" size=\"icon\" className=\"h-8 w-8 shrink-0 rounded-full\" onClick={() => onClick(-10)} disabled={goal <= 200} > <Minus /> <span className=\"sr-only\">Decrease</span> </Button> <div className=\"flex-1 text-center\"> <div className=\"text-7xl font-bold tracking-tighter\"> {goal} </div> <div className=\"text-muted-foreground text-[0 70rem] uppercase\"> Calories/day </div> </div> <Button variant=\"outline\" size=\"icon\" className=\"h-8 w-8 shrink-0 rounded-full\" onClick={() => onClick(10)} disabled={goal >= 400} > <Plus /> <span className=\"sr-only\">Increase</span> </Button> </div> <div className=\"mt-3 h-[120px]\"> <ResponsiveContainer width=\"100%\" height=\"100%\"> <BarChart data={data}> <Bar dataKey=\"goal\" style={ { fill: \"hsl(var(--foreground))\", opacity: 0 9, } as ReactCSSProperties\n}\n/>\n</BarChart>\n</ResponsiveContainer>\n</div>\n</div>\n<DrawerFooter>\n<Button>Submit</Button>\n<DrawerClose asChild>\n<Button variant=\"outline\">Cancel</Button>\n</DrawerClose>\n</DrawerFooter>\n</div>\n</DrawerContent>\n</Drawer>\n)\n}\nPagination\nWe've added a pagination component with page navigation, previous and next buttons Simple, flexible and works with your framework's <Link /> component PreviewCodePrevious123More pagesNextCopyimport {\nPagination,\nPaginationContent,\nPaginationEllipsis,\nPaginationItem,\nPaginationLink,\nPaginationNext,\nPaginationPrevious,\n} from \"@/components/ui/pagination\"\nexport function PaginationDemo() {\nreturn (\n<Pagination>\n<PaginationContent>\n<PaginationItem>\n<PaginationPrevious href=\"#\" />\n</PaginationItem>\n<PaginationItem>\n<PaginationLink href=\"#\">1</PaginationLink>\n</PaginationItem>\n<PaginationItem>\n<PaginationLink href=\"#\" isActive>\n2\n</PaginationLink>\n</PaginationItem>\n<PaginationItem>\n<PaginationLink href=\"#\">3</PaginationLink>\n</PaginationItem>\n<PaginationItem>\n<PaginationEllipsis />\n</PaginationItem>\n<PaginationItem>\n<PaginationNext href=\"#\" />\n</PaginationItem>\n</PaginationContent>\n</Pagination>\n)\n}\nResizable\nBuild resizable panel groups and layouts with this <Resizable /> component",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1277789,
      "relative_path": "documentation\\shadcn\\_docs_changelog.html",
      "source_type": "documentation"
    },
    "token_count": 499,
    "chunk_index": 11,
    "total_chunks": 26
  },
  {
    "id": "5cc3174ad0399557f06f93277e2e9281",
    "source_file": "corpus\\documentation\\shadcn\\_docs_changelog.html",
    "source_type": "documentation",
    "title": "Changelog - shadcn/ui",
    "content": "Simple, flexible and works with your framework's <Link /> component PreviewCodePrevious123More pagesNextCopyimport { Pagination, PaginationContent, PaginationEllipsis, PaginationItem, PaginationLink, PaginationNext, PaginationPrevious, } from \"@/components/ui/pagination\" export function PaginationDemo() { return ( <Pagination> <PaginationContent> <PaginationItem> <PaginationPrevious href=\"#\" /> </PaginationItem> <PaginationItem> <PaginationLink href=\"#\">1</PaginationLink> </PaginationItem> <PaginationItem> <PaginationLink href=\"#\" isActive> 2 </PaginationLink> </PaginationItem> <PaginationItem> <PaginationLink href=\"#\">3</PaginationLink> </PaginationItem> <PaginationItem> <PaginationEllipsis /> </PaginationItem> <PaginationItem> <PaginationNext href=\"#\" /> </PaginationItem> </PaginationContent> </Pagination> ) } Resizable Build resizable panel groups and layouts with this <Resizable /> componentPreviewCodeOneTwoThreeCopyimport {\nResizableHandle,\nResizablePanel,\nResizablePanelGroup,\n} from \"@/components/ui/resizable\"\nexport function ResizableDemo() {\nreturn (\n<ResizablePanelGroup\ndirection=\"horizontal\"\nclassName=\"max-w-md rounded-lg border md:min-w-[450px]\"\n>\n<ResizablePanel defaultSize={50}>\n<div className=\"flex h-[200px] items-center justify-center p-6\">\n<span className=\"font-semibold\">One</span>\n</div>\n</ResizablePanel>\n<ResizableHandle withHandle />\n<ResizablePanel defaultSize={50}>\n<ResizablePanelGroup direction=\"vertical\">\n<ResizablePanel defaultSize={25}>\n<div className=\"flex h-full items-center justify-center p-6\">\n<span className=\"font-semibold\">Two</span>\n</div>\n</ResizablePanel>\n<ResizableHandle withHandle />\n<ResizablePanel defaultSize={75}>\n<div className=\"flex h-full items-center justify-center p-6\">\n<span className=\"font-semibold\">Three</span>\n</div>\n</ResizablePanel>\n</ResizablePanelGroup>\n</ResizablePanel>\n</ResizablePanelGroup>\n)\n}\n<Resizable /> is built using react-resizable-panels by bvaughn It has support for mouse, touch and keyboard Sonner\nAnother one by emilkowalski_ The last toast component you'll ever need Sonner is now availabe in shadcn/ui",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1277789,
      "relative_path": "documentation\\shadcn\\_docs_changelog.html",
      "source_type": "documentation"
    },
    "token_count": 468,
    "chunk_index": 12,
    "total_chunks": 26
  },
  {
    "id": "eb37b2ffdcecf97025759a11032360a7",
    "source_file": "corpus\\documentation\\shadcn\\_docs_changelog.html",
    "source_type": "documentation",
    "title": "Changelog - shadcn/ui",
    "content": "className=\"font-semibold\">One</span> </div> </ResizablePanel> <ResizableHandle withHandle /> <ResizablePanel defaultSize={50}> <ResizablePanelGroup direction=\"vertical\"> <ResizablePanel defaultSize={25}> <div className=\"flex h-full items-center justify-center p-6\"> <span className=\"font-semibold\">Two</span> </div> </ResizablePanel> <ResizableHandle withHandle /> <ResizablePanel defaultSize={75}> <div className=\"flex h-full items-center justify-center p-6\"> <span className=\"font-semibold\">Three</span> </div> </ResizablePanel> </ResizablePanelGroup> </ResizablePanel> </ResizablePanelGroup> ) } <Resizable /> is built using react-resizable-panels by bvaughn It has support for mouse, touch and keyboard Sonner Another one by emilkowalski_ The last toast component you'll ever need Sonner is now availabe in shadcn/uiPreviewCodeShow ToastCopy\"use client\"\nimport { toast } from \"sonner\"\nimport { Button } from \"@/components/ui/button\"\nexport function SonnerDemo() {\nreturn (\n<Button\nvariant=\"outline\"\nonClick={() =>\ntoast(\"Event has been created\", {\ndescription: \"Sunday, December 03, 2023 at 9:00 AM\",\naction: {\nlabel: \"Undo\",\nonClick: () => console log(\"Undo\"),\n},\n})\n}\n>\nShow Toast\n</Button>\n)\n}\nCLI updates\nThis has been one of the most requested features You can now configure a custom Tailwind prefix and the cli will automatically prefix your utility classes when adding components This means you can now easily add shadcn/ui components to existing projects like Docusaurus, Nextra etc A drop-in for your existing design system with no conflict 🔥\nCopy<AlertDialog className=\"tw-grid tw-gap-4 tw-border tw-bg-background tw-shadow-lg\" />\nIt works with cn, cva and CSS variables The cli can now also detect tailwind config ts and add the TypeScript version of the config for you That's it Happy Holidays July 2023 - JavaScript\nThis project and the components are written in TypeScript We recommend using TypeScript for your project as well However we provide a JavaScript version of the components, available via the cli CopyWould you like to use TypeScript (recommended) no\nTo opt-out of TypeScript, you can use the tsx flag in your components json file components",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1277789,
      "relative_path": "documentation\\shadcn\\_docs_changelog.html",
      "source_type": "documentation"
    },
    "token_count": 494,
    "chunk_index": 13,
    "total_chunks": 26
  },
  {
    "id": "061f67c554f376a47bd6c64a29ae663d",
    "source_file": "corpus\\documentation\\shadcn\\_docs_changelog.html",
    "source_type": "documentation",
    "title": "Changelog - shadcn/ui",
    "content": "tailwind config ts and add the TypeScript version of the config for you That's it Happy Holidays July 2023 - JavaScript This project and the components are written in TypeScript We recommend using TypeScript for your project as well However we provide a JavaScript version of the components, available via the cli CopyWould you like to use TypeScript (recommended) no To opt-out of TypeScript, you can use the tsx flag in your components json file componentsjsonCopy{\n\"style\": \"default\",\n\"tailwind\": {\n\"config\": \"tailwind config js\",\n\"css\": \"src/app/globals css\",\n\"baseColor\": \"zinc\",\n\"cssVariables\": true\n},\n\"rsc\": false,\n\"tsx\": false,\n\"aliases\": {\n\"utils\": \"~/lib/utils\",\n\"components\": \"~/components\"\n}\n}\nTo configure import aliases, you can use the following jsconfig json:\njsconfig jsonCopy{\n\"compilerOptions\": {\n\"paths\": {\n\"@/*\": [\" /*\"]\n}\n}\n}\nJune 2023 - New CLI, Styles and more\nI have a lot of updates to share with you today:\nNew CLI - Rewrote the CLI from scratch You can now add components, dependencies and configure import paths Theming - Choose between using CSS variables or Tailwind CSS utility classes for theming Base color - Configure the base color for your project This will be used to generate the default color palette for your components React Server Components - Opt out of using React Server Components The CLI will automatically append or remove the use client directive Styles - Introducing a new concept called Style A style comes with its own set of components, animations, icons and more Exit animations - Added exit animations to all components Other updates - New icon button size, updated sheet component and more Updating your project - How to update your project to get the latest changes New CLI\nI've been working on a new CLI for the past few weeks It's a complete rewrite It comes with a lot of new features and improvements init\npnpmnpmyarnbunpnpm dlx shadcn@latest initCopy\nWhen you run the init command, you will be asked a few questions to configure components json:\nCopyWhich style would you like to use › Default\nWhich color would you like to use as base color › Slate\nWhere is your global CSS file › › app/globals css\nDo you want to use CSS variables for colors › no / yes\nWhere is your tailwind config js located",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1277789,
      "relative_path": "documentation\\shadcn\\_docs_changelog.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 14,
    "total_chunks": 26
  },
  {
    "id": "2067b14798edf99233dc82799f0ec611",
    "source_file": "corpus\\documentation\\shadcn\\_docs_changelog.html",
    "source_type": "documentation",
    "title": "Changelog - shadcn/ui",
    "content": "features and improvements init pnpmnpmyarnbunpnpm dlx shadcn@latest initCopy When you run the init command, you will be asked a few questions to configure components json: CopyWhich style would you like to use › Default Which color would you like to use as base color › Slate Where is your global CSS file › › app/globals css Do you want to use CSS variables for colors › no / yes Where is your tailwind config js located› tailwind config js\nConfigure the import alias for components: › @/components\nConfigure the import alias for utils: › @/lib/utils\nAre you using React Server Components › no / yes\nThis file contains all the information about your components: where to install them, the import paths, how they are styled etc You can use this file to change the import path of a component, set a baseColor or change the styling method components jsonCopy{\n\"style\": \"default\",\n\"tailwind\": {\n\"config\": \"tailwind config ts\",\n\"css\": \"src/app/globals css\",\n\"baseColor\": \"zinc\",\n\"cssVariables\": true\n},\n\"rsc\": false,\n\"aliases\": {\n\"utils\": \"~/lib/utils\",\n\"components\": \"~/components\"\n}\n}\nThis means you can now use the CLI with any directory structure including src and app directories add\npnpmnpmyarnbunpnpm dlx shadcn@latest addCopy\nThe add command is now much more capable You can now add UI components but also import more complex components (coming soon) The CLI will automatically resolve all components and dependencies, format them based on your custom config and add them to your project diff (experimental)\npnpmnpmyarnbunpnpm dlx shadcn diffCopy\nWe're also introducing a new diff command to help you keep track of upstream updates You can use this command to see what has changed in the upstream repository and update your project accordingly Run the diff command to get a list of components that have updates available:\npnpmnpmyarnbunpnpm dlx shadcn diffCopy\nCopyThe following components have updates available:\n- button\n- /path/to/my-app/components/ui/button tsx\n- toast\n- /path/to/my-app/components/ui/use-toast ts\n- /path/to/my-app/components/ui/toaster",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1277789,
      "relative_path": "documentation\\shadcn\\_docs_changelog.html",
      "source_type": "documentation"
    },
    "token_count": 480,
    "chunk_index": 15,
    "total_chunks": 26
  },
  {
    "id": "e937fecea60182dbe4283c004731fe2e",
    "source_file": "corpus\\documentation\\shadcn\\_docs_changelog.html",
    "source_type": "documentation",
    "title": "Changelog - shadcn/ui",
    "content": "diff (experimental) pnpmnpmyarnbunpnpm dlx shadcn diffCopy We're also introducing a new diff command to help you keep track of upstream updates You can use this command to see what has changed in the upstream repository and update your project accordingly Run the diff command to get a list of components that have updates available: pnpmnpmyarnbunpnpm dlx shadcn diffCopy CopyThe following components have updates available: - button - /path/to/my-app/components/ui/button tsx - toast - /path/to/my-app/components/ui/use-toast ts - /path/to/my-app/components/ui/toastertsx\nThen run diff [component] to see the changes:\npnpmnpmyarnbunpnpm dlx shadcn diff alertCopy\nCopyconst alertVariants = cva(\n- \"relative w-full rounded-lg border\",\n+ \"relative w-full pl-12 rounded-lg border\"\n)\nTheming with CSS Variables or Tailwind Colors\nYou can choose between using CSS variables or Tailwind CSS utility classes for theming When you add new components, the CLI will automatically use the correct theming methods based on your components json configuration Utility classes\nCopy<div className=\"bg-zinc-950 dark:bg-white\" />\nTo use utility classes for theming set tailwind cssVariables to false in your components json file components jsonCopy{\n\"tailwind\": {\n\"config\": \"tailwind config js\",\n\"css\": \"app/globals css\",\n\"baseColor\": \"slate\",\n\"cssVariables\": false\n}\n}\nCSS Variables\nCopy<div className=\"bg-background text-foreground\" />\nTo use CSS variables classes for theming set tailwind cssVariables to true in your components json file components jsonCopy{\n\"tailwind\": {\n\"config\": \"tailwind config js\",\n\"css\": \"app/globals css\",\n\"baseColor\": \"slate\",\n\"cssVariables\": true\n}\n}\nBase color\nYou can now configure the base color for your project This will be used to generate the default color palette for your components components jsonCopy{\n\"tailwind\": {\n\"config\": \"tailwind config js\",\n\"css\": \"app/globals css\",\n\"baseColor\": \"zinc\",\n\"cssVariables\": false\n}\n}\nChoose between gray, neutral, slate, stone or zinc If you have cssVariables set to true, we will set the base colors as CSS variables in your globals css file",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1277789,
      "relative_path": "documentation\\shadcn\\_docs_changelog.html",
      "source_type": "documentation"
    },
    "token_count": 500,
    "chunk_index": 16,
    "total_chunks": 26
  },
  {
    "id": "fc6d72eca66f52a1be0bf0cd6171a1e3",
    "source_file": "corpus\\documentation\\shadcn\\_docs_changelog.html",
    "source_type": "documentation",
    "title": "Changelog - shadcn/ui",
    "content": "\"slate\", \"cssVariables\": true } } Base color You can now configure the base color for your project This will be used to generate the default color palette for your components components jsonCopy{ \"tailwind\": { \"config\": \"tailwind config js\", \"css\": \"app/globals css\", \"baseColor\": \"zinc\", \"cssVariables\": false } } Choose between gray, neutral, slate, stone or zinc If you have cssVariables set to true, we will set the base colors as CSS variables in your globals css fileIf you have cssVariables set to false, we will inline the Tailwind CSS utility classes in your components React Server Components\nIf you're using a framework that does not support React Server Components, you can now opt out by setting rsc to false We will automatically append or remove the use client directive when adding components components jsonCopy{\n\"rsc\": false\n}\nStyles\nWe are introducing a new concept called Style You can think of style as the visual foundation: shapes, icons, animations & typography A style comes with its own set of components, animations, icons and more We are shipping two styles: default and new-york (with more coming soon) The default style is the one you are used to It's the one we've been using since the beginning of this project It uses lucide-react for icons and tailwindcss-animate for animations The new-york style is a new style It ships with smaller buttons, cards with shadows and a new set of icons from Radix Icons When you run the init command, you will be asked which style you would like to use This is saved in your components json file components jsonCopy{\n\"style\": \"new-york\"\n}\nTheming\nStart with a style as the base then theme using CSS variables or Tailwind CSS utility classes to completely change the look of your components Exit animations\nI added exit animations to all components Click on the combobox below to see the subtle exit animation PreviewCodeSelect framework",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1277789,
      "relative_path": "documentation\\shadcn\\_docs_changelog.html",
      "source_type": "documentation"
    },
    "token_count": 405,
    "chunk_index": 17,
    "total_chunks": 26
  },
  {
    "id": "9806598b4302045a5f9b095cdecefabd",
    "source_file": "corpus\\documentation\\shadcn\\_docs_changelog.html",
    "source_type": "documentation",
    "title": "Changelog - shadcn/ui",
    "content": "run the init command, you will be asked which style you would like to use This is saved in your components json file components jsonCopy{ \"style\": \"new-york\" } Theming Start with a style as the base then theme using CSS variables or Tailwind CSS utility classes to completely change the look of your components Exit animations I added exit animations to all components Click on the combobox below to see the subtle exit animation PreviewCodeSelect frameworkCopy\"use client\"\nimport * as React from \"react\"\nimport { Check, ChevronsUpDown } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport {\nCommand,\nCommandEmpty,\nCommandGroup,\nCommandInput,\nCommandItem,\nCommandList,\n} from \"@/components/ui/command\"\nimport {\nPopover,\nPopoverContent,\nPopoverTrigger,\n} from \"@/components/ui/popover\"\nconst frameworks = [\n{\nvalue: \"next js\",\nlabel: \"Next js\",\n},\n{\nvalue: \"sveltekit\",\nlabel: \"SvelteKit\",\n},\n{\nvalue: \"nuxt js\",\nlabel: \"Nuxt js\",\n},\n{\nvalue: \"remix\",\nlabel: \"Remix\",\n},\n{\nvalue: \"astro\",\nlabel: \"Astro\",\n},\n]\nexport function ComboboxDemo() {\nconst [open, setOpen] = React useState(false)\nconst [value, setValue] = React useState(\"\")\nreturn (\n<Popover open={open} onOpenChange={setOpen}>\n<PopoverTrigger asChild>\n<Button\nvariant=\"outline\"\nrole=\"combobox\"\naria-expanded={open}\nclassName=\"w-[200px] justify-between\"\n>\n{value frameworks find((framework) => framework value === value) label\n: \"Select framework \"}\n<ChevronsUpDown className=\"opacity-50\" />\n</Button>\n</PopoverTrigger>\n<PopoverContent className=\"w-[200px] p-0\">\n<Command>\n<CommandInput placeholder=\"Search framework \" className=\"h-9\" />\n<CommandList>\n<CommandEmpty>No framework found </CommandEmpty>\n<CommandGroup>\n{frameworks map((framework) => (\n<CommandItem\nkey={framework value}\nvalue={framework value}\nonSelect={(currentValue) => {\nsetValue(currentValue === value \"\" : currentValue)\nsetOpen(false)\n}}\n>\n{framework label}\n<Check\nclassName={cn(\n\"ml-auto\",\nvalue === framework value",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1277789,
      "relative_path": "documentation\\shadcn\\_docs_changelog.html",
      "source_type": "documentation"
    },
    "token_count": 488,
    "chunk_index": 18,
    "total_chunks": 26
  },
  {
    "id": "84fa6a0a5553f702953149d3b8631148",
    "source_file": "corpus\\documentation\\shadcn\\_docs_changelog.html",
    "source_type": "documentation",
    "title": "Changelog - shadcn/ui",
    "content": "<Popover open={open} onOpenChange={setOpen}> <PopoverTrigger asChild> <Button variant=\"outline\" role=\"combobox\" aria-expanded={open} className=\"w-[200px] justify-between\" > {value frameworks find((framework) => framework value === value) label : \"Select framework \"} <ChevronsUpDown className=\"opacity-50\" /> </Button> </PopoverTrigger> <PopoverContent className=\"w-[200px] p-0\"> <Command> <CommandInput placeholder=\"Search framework \" className=\"h-9\" /> <CommandList> <CommandEmpty>No framework found </CommandEmpty> <CommandGroup> {frameworks map((framework) => ( <CommandItem key={framework value} value={framework value} onSelect={(currentValue) => { setValue(currentValue === value \"\" : currentValue) setOpen(false) }} > {framework label} <Check className={cn( \"ml-auto\", value === framework value\"opacity-100\" : \"opacity-0\"\n)}\n/>\n</CommandItem>\n))}\n</CommandGroup>\n</CommandList>\n</Command>\n</PopoverContent>\n</Popover>\n)\n}\nThe animations can be customized using utility classes Other updates\nButton\nAdded a new button size icon:\nPreviewCodeCopyimport { ChevronRightIcon } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nexport function ButtonIcon() {\nreturn (\n<Button variant=\"secondary\" size=\"icon\" className=\"size-8\">\n<ChevronRightIcon />\n</Button>\n)\n}\nSheet\nRenamed position to side to match the other elements PreviewCodetoprightbottomleftCopy\"use client\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport {\nSheet,\nSheetClose,\nSheetContent,\nSheetDescription,\nSheetFooter,\nSheetHeader,\nSheetTitle,\nSheetTrigger,\n} from \"@/components/ui/sheet\"\nconst SHEET_SIDES = [\"top\", \"right\", \"bottom\", \"left\"] as const\ntype SheetSide = (typeof SHEET_SIDES)[number]\nexport function SheetSide() {\nreturn (\n<div className=\"grid grid-cols-2 gap-2\">\n{SHEET_SIDES",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1277789,
      "relative_path": "documentation\\shadcn\\_docs_changelog.html",
      "source_type": "documentation"
    },
    "token_count": 459,
    "chunk_index": 19,
    "total_chunks": 26
  },
  {
    "id": "c517d0f547b6dac7c3e9a476d60ad683",
    "source_file": "corpus\\documentation\\shadcn\\_docs_changelog.html",
    "source_type": "documentation",
    "title": "Changelog - shadcn/ui",
    "content": "variant=\"secondary\" size=\"icon\" className=\"size-8\"> <ChevronRightIcon /> </Button> ) } Sheet Renamed position to side to match the other elements PreviewCodetoprightbottomleftCopy\"use client\" import { Button } from \"@/components/ui/button\" import { Input } from \"@/components/ui/input\" import { Label } from \"@/components/ui/label\" import { Sheet, SheetClose, SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetTitle, SheetTrigger, } from \"@/components/ui/sheet\" const SHEET_SIDES = [\"top\", \"right\", \"bottom\", \"left\"] as const type SheetSide = (typeof SHEET_SIDES)[number] export function SheetSide() { return ( <div className=\"grid grid-cols-2 gap-2\"> {SHEET_SIDESmap((side) => (\n<Sheet key={side}>\n<SheetTrigger asChild>\n<Button variant=\"outline\">{side}</Button>\n</SheetTrigger>\n<SheetContent side={side}>\n<SheetHeader>\n<SheetTitle>Edit profile</SheetTitle>\n<SheetDescription>\nMake changes to your profile here Click save when you're done </SheetDescription>\n</SheetHeader>\n<div className=\"grid gap-4 py-4\">\n<div className=\"grid grid-cols-4 items-center gap-4\">\n<Label htmlFor=\"name\" className=\"text-right\">\nName\n</Label>\n<Input id=\"name\" value=\"Pedro Duarte\" className=\"col-span-3\" />\n</div>\n<div className=\"grid grid-cols-4 items-center gap-4\">\n<Label htmlFor=\"username\" className=\"text-right\">\nUsername\n</Label>\n<Input id=\"username\" value=\"@peduarte\" className=\"col-span-3\" />\n</div>\n</div>\n<SheetFooter>\n<SheetClose asChild>\n<Button type=\"submit\">Save changes</Button>\n</SheetClose>\n</SheetFooter>\n</SheetContent>\n</Sheet>\n))}\n</div>\n)\n}\nRemoved the size props Use className=\"w-[200px] md:w-[450px]\" for responsive sizing Updating your project\nSince we follow a copy and paste approach, you will need to manually update your project to get the latest changes Note: we are working on a diff command to help you\nkeep track of upstream updates Add components jsonCreating a components json file at the root:components",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1277789,
      "relative_path": "documentation\\shadcn\\_docs_changelog.html",
      "source_type": "documentation"
    },
    "token_count": 483,
    "chunk_index": 20,
    "total_chunks": 26
  },
  {
    "id": "2e649fbcd4f2638dc72a87262978af41",
    "source_file": "corpus\\documentation\\shadcn\\_docs_changelog.html",
    "source_type": "documentation",
    "title": "Changelog - shadcn/ui",
    "content": "</div> </div> <SheetFooter> <SheetClose asChild> <Button type=\"submit\">Save changes</Button> </SheetClose> </SheetFooter> </SheetContent> </Sheet> ))} </div> ) } Removed the size props Use className=\"w-[200px] md:w-[450px]\" for responsive sizing Updating your project Since we follow a copy and paste approach, you will need to manually update your project to get the latest changes Note: we are working on a diff command to help you keep track of upstream updates Add components jsonCreating a components json file at the root:componentsjsonCopy{\n\"style\": \"default\",\n\"rsc\": true,\n\"tailwind\": {\n\"config\": \"tailwind config js\",\n\"css\": \"app/globals css\",\n\"baseColor\": \"slate\",\n\"cssVariables\": true\n},\n\"aliases\": {\n\"components\": \"@/components\",\n\"utils\": \"@/lib/utils\"\n}\n}Update the values for tailwind css and aliases to match your project structure ButtonAdd the icon size to the buttonVariants:components/ui/button tsxCopyconst buttonVariants = cva({\nvariants: {\nsize: {\ndefault: \"h-10 px-4 py-2\",\nsm: \"h-9 rounded-md px-3\",\nlg: \"h-11 rounded-md px-8\",\nicon: \"h-10 w-10\",\n},\n},\n})Sheet\nReplace the content of sheet tsx with the following:\ncomponents/ui/sheet tsxCopy\"use client\"\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\nconst Sheet = SheetPrimitive Root\nconst SheetTrigger = SheetPrimitive Trigger\nconst SheetClose = SheetPrimitive Close\nconst SheetPortal = ({\nclassName, props\n}: SheetPrimitive DialogPortalProps) => (\n<SheetPrimitive Portal className={cn(className)} { props} />\n)\nSheetPortal displayName = SheetPrimitive Portal displayName\nconst SheetOverlay = React forwardRef<\nReact ElementRef<typeof SheetPrimitive Overlay>,\nReact ComponentPropsWithoutRef<typeof SheetPrimitive Overlay>\n>(({ className, props }, ref) => (\n<SheetPrimitive",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1277789,
      "relative_path": "documentation\\shadcn\\_docs_changelog.html",
      "source_type": "documentation"
    },
    "token_count": 475,
    "chunk_index": 21,
    "total_chunks": 26
  },
  {
    "id": "c834bbcc6d800c11c55312db326059e1",
    "source_file": "corpus\\documentation\\shadcn\\_docs_changelog.html",
    "source_type": "documentation",
    "title": "Changelog - shadcn/ui",
    "content": "VariantProps } from \"class-variance-authority\" import { X } from \"lucide-react\" import { cn } from \"@/lib/utils\" const Sheet = SheetPrimitive Root const SheetTrigger = SheetPrimitive Trigger const SheetClose = SheetPrimitive Close const SheetPortal = ({ className, props }: SheetPrimitive DialogPortalProps) => ( <SheetPrimitive Portal className={cn(className)} { props} /> ) SheetPortal displayName = SheetPrimitive Portal displayName const SheetOverlay = React forwardRef< React ElementRef<typeof SheetPrimitive Overlay>, React ComponentPropsWithoutRef<typeof SheetPrimitive Overlay> >(({ className, props }, ref) => ( <SheetPrimitiveOverlay\nclassName={cn(\n\"bg-background/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 backdrop-blur-sm\",\nclassName\n)}\n{ props}\nref={ref}\n/>\n))\nSheetOverlay displayName = SheetPrimitive Overlay displayName\nconst sheetVariants = cva(\n\"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n{\nvariants: {\nside: {\ntop: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\nbottom:\n\"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\nleft: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\nright:\n\"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n},\n},\ndefaultVariants: {\nside: \"right\",\n},\n}\n)\ninterface SheetContentProps\nextends React ComponentPropsWithoutRef<typeof SheetPrimitive Content>,\nVariantProps<typeof sheetVariants> {}\nconst SheetContent = React forwardRef<\nReact ElementRef<typeof SheetPrimitive Content>,\nSheetContentProps\n>(({ side = \"right\", className, children,",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1277789,
      "relative_path": "documentation\\shadcn\\_docs_changelog.html",
      "source_type": "documentation"
    },
    "token_count": 495,
    "chunk_index": 22,
    "total_chunks": 26
  },
  {
    "id": "34200fd0435119d98685475477a7e628",
    "source_file": "corpus\\documentation\\shadcn\\_docs_changelog.html",
    "source_type": "documentation",
    "title": "Changelog - shadcn/ui",
    "content": "transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\", { variants: { side: { top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\", bottom: \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\", left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\", right: \"inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\", }, }, defaultVariants: { side: \"right\", }, } ) interface SheetContentProps extends React ComponentPropsWithoutRef<typeof SheetPrimitive Content>, VariantProps<typeof sheetVariants> {} const SheetContent = React forwardRef< React ElementRef<typeof SheetPrimitive Content>, SheetContentProps >(({ side = \"right\", className, children,props }, ref) => (\n<SheetPortal>\n<SheetOverlay />\n<SheetPrimitive Content\nref={ref}\nclassName={cn(sheetVariants({ side }), className)}\n{ props}\n>\n{children}\n<SheetPrimitive Close className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-sm opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-none disabled:pointer-events-none\">\n<X className=\"h-4 w-4\" />\n<span className=\"sr-only\">Close</span>\n</SheetPrimitive Close>\n</SheetPrimitive Content>\n</SheetPortal>\n))\nSheetContent displayName = SheetPrimitive Content displayName\nconst SheetHeader = ({\nclassName, props\n}: React HTMLAttributes<HTMLDivElement>) => (\n<div\nclassName={cn(\n\"flex flex-col space-y-2 text-center sm:text-left\",\nclassName\n)}\n{ props}\n/>\n)\nSheetHeader displayName = \"SheetHeader\"\nconst SheetFooter = ({\nclassName, props\n}: React",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1277789,
      "relative_path": "documentation\\shadcn\\_docs_changelog.html",
      "source_type": "documentation"
    },
    "token_count": 475,
    "chunk_index": 23,
    "total_chunks": 26
  },
  {
    "id": "7a8c9413a50c5a7ca2696f1fe6247ff0",
    "source_file": "corpus\\documentation\\shadcn\\_docs_changelog.html",
    "source_type": "documentation",
    "title": "Changelog - shadcn/ui",
    "content": "}), className)} { props} > {children} <SheetPrimitive Close className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-sm opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-none disabled:pointer-events-none\"> <X className=\"h-4 w-4\" /> <span className=\"sr-only\">Close</span> </SheetPrimitive Close> </SheetPrimitive Content> </SheetPortal> )) SheetContent displayName = SheetPrimitive Content displayName const SheetHeader = ({ className, props }: React HTMLAttributes<HTMLDivElement>) => ( <div className={cn( \"flex flex-col space-y-2 text-center sm:text-left\", className )} { props} /> ) SheetHeader displayName = \"SheetHeader\" const SheetFooter = ({ className, props }: ReactHTMLAttributes<HTMLDivElement>) => (\n<div\nclassName={cn(\n\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\nclassName\n)}\n{ props}\n/>\n)\nSheetFooter displayName = \"SheetFooter\"\nconst SheetTitle = React forwardRef<\nReact ElementRef<typeof SheetPrimitive Title>,\nReact ComponentPropsWithoutRef<typeof SheetPrimitive Title>\n>(({ className, props }, ref) => (\n<SheetPrimitive Title\nref={ref}\nclassName={cn(\"text-foreground text-lg font-semibold\", className)}\n{ props}\n/>\n))\nSheetTitle displayName = SheetPrimitive Title displayName\nconst SheetDescription = React forwardRef<\nReact ElementRef<typeof SheetPrimitive Description>,\nReact ComponentPropsWithoutRef<typeof SheetPrimitive Description>\n>(({ className, props }, ref) => (\n<SheetPrimitive Description\nref={ref}\nclassName={cn(\"text-muted-foreground text-sm\", className)}\n{ props}\n/>\n))\nSheetDescription displayName = SheetPrimitive Description displayName\nexport {\nSheet,\nSheetTrigger,\nSheetClose,\nSheetContent,\nSheetHeader,\nSheetFooter,\nSheetTitle,\nSheetDescription,\n}\nRename position to side\nCopy- <Sheet position=\"right\" />\n+ <Sheet side=\"right\" />\nThank you\nI'd like to thank everyone who has been using this project, providing feedback and contributing to it I really appreciate it",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1277789,
      "relative_path": "documentation\\shadcn\\_docs_changelog.html",
      "source_type": "documentation"
    },
    "token_count": 444,
    "chunk_index": 24,
    "total_chunks": 26
  },
  {
    "id": "5f6cb3407d9b28622dde0e5622d663b9",
    "source_file": "corpus\\documentation\\shadcn\\_docs_changelog.html",
    "source_type": "documentation",
    "title": "Changelog - shadcn/ui",
    "content": "ElementRef<typeof SheetPrimitive Description>, React ComponentPropsWithoutRef<typeof SheetPrimitive Description> >(({ className, props }, ref) => ( <SheetPrimitive Description ref={ref} className={cn(\"text-muted-foreground text-sm\", className)} { props} /> )) SheetDescription displayName = SheetPrimitive Description displayName export { Sheet, SheetTrigger, SheetClose, SheetContent, SheetHeader, SheetFooter, SheetTitle, SheetDescription, } Rename position to side Copy- <Sheet position=\"right\" /> + <Sheet side=\"right\" /> Thank you I'd like to thank everyone who has been using this project, providing feedback and contributing to it I really appreciate itThank you 🙏 FigmaLegacy Docs On This PageJuly 2025 - Universal Registry ItemsJuly 2025 - Local File SupportJune 2025 - radix-uiJune 2025 - Calendar ComponentMay 2025 - New SiteApril 2025 - MCPMarch 2025 - shadcn 2 5 0March 2025 - Cross-framework Route SupportFebruary 2025 - Tailwind v4February 2025 - Updated Registry SchemaJanuary 2025 - BlocksDecember 2024 - Monorepo SupportNovember 2024 - IconsOctober 2024 - React 19October 2024 - SidebarAugust 2024 - npx shadcn initUpdate Your ProjectApril 2024 - Introducing Lift ModeMarch 2024 - Introducing BlocksOpen SourceRequest a Blockv0March 2024 - Breadcrumb and Input OTPBreadcrumbInput OTPDecember 2023 - New components, CLI and moreCarouselDrawerPaginationResizableSonnerCLI updatesJuly 2023 - JavaScriptJune 2023 - New CLI, Styles and moreNew CLIinitadddiff (experimental)Theming with CSS Variables or Tailwind ColorsUtility classesCSS VariablesBase colorReact Server ComponentsStylesThemingExit animationsOther updatesButtonSheetUpdating your projectAdd components jsonButtonSheetThank youDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1277789,
      "relative_path": "documentation\\shadcn\\_docs_changelog.html",
      "source_type": "documentation"
    },
    "token_count": 457,
    "chunk_index": 25,
    "total_chunks": 26
  },
  {
    "id": "497488974daa1c42e62f5828a6e1d641",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_checkbox.html",
    "source_type": "documentation",
    "title": "Checkbox - shadcn/ui",
    "content": "Checkbox - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonCheckboxCopy PagePreviousNextA control that allows the user to toggle between checked and not checked Docs API Reference PreviewCodeAccept terms and conditionsAccept terms and conditionsBy clicking this checkbox, you agree to the terms and conditions Enable notificationsEnable notificationsYou can enable or disable notifications at any time Copy\"use client\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport { Label } from \"@/components/ui/label\"\nexport function CheckboxDemo() {\nreturn (\n<div className=\"flex flex-col gap-6\">\n<div className=\"flex items-center gap-3\">\n<Checkbox id=\"terms\" />\n<Label htmlFor=\"terms\">Accept terms and conditions</Label>\n</div>\n<div className=\"flex items-start gap-3\">\n<Checkbox id=\"terms-2\" defaultChecked />\n<div className=\"grid gap-2\">\n<Label htmlFor=\"terms-2\">Accept terms and conditions</Label>\n<p className=\"text-muted-foreground text-sm\">\nBy clicking this checkbox, you agree to the terms and conditions",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 469492,
      "relative_path": "documentation\\shadcn\\_docs_components_checkbox.html",
      "source_type": "documentation"
    },
    "token_count": 378,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "1e0ea632904d18c163fe4cc9aea58bb1",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_checkbox.html",
    "source_type": "documentation",
    "title": "Checkbox - shadcn/ui",
    "content": "notificationsYou can enable or disable notifications at any time Copy\"use client\" import { Checkbox } from \"@/components/ui/checkbox\" import { Label } from \"@/components/ui/label\" export function CheckboxDemo() { return ( <div className=\"flex flex-col gap-6\"> <div className=\"flex items-center gap-3\"> <Checkbox id=\"terms\" /> <Label htmlFor=\"terms\">Accept terms and conditions</Label> </div> <div className=\"flex items-start gap-3\"> <Checkbox id=\"terms-2\" defaultChecked /> <div className=\"grid gap-2\"> <Label htmlFor=\"terms-2\">Accept terms and conditions</Label> <p className=\"text-muted-foreground text-sm\"> By clicking this checkbox, you agree to the terms and conditions</p>\n</div>\n</div>\n<div className=\"flex items-start gap-3\">\n<Checkbox id=\"toggle\" disabled />\n<Label htmlFor=\"toggle\">Enable notifications</Label>\n</div>\n<Label className=\"hover:bg-accent/50 flex items-start gap-3 rounded-lg border p-3 has-[[aria-checked=true]]:border-blue-600 has-[[aria-checked=true]]:bg-blue-50 dark:has-[[aria-checked=true]]:border-blue-900 dark:has-[[aria-checked=true]]:bg-blue-950\">\n<Checkbox\nid=\"toggle-2\"\ndefaultChecked\nclassName=\"data-[state=checked]:border-blue-600 data-[state=checked]:bg-blue-600 data-[state=checked]:text-white dark:data-[state=checked]:border-blue-700 dark:data-[state=checked]:bg-blue-700\"\n/>\n<div className=\"grid gap-1 5 font-normal\">\n<p className=\"text-sm leading-none font-medium\">\nEnable notifications\n</p>\n<p className=\"text-muted-foreground text-sm\">\nYou can enable or disable notifications at any time </p>\n</div>\n</Label>\n</div>\n)\n}\nInstallation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add checkboxCopy\nUsage\nCopyimport { Checkbox } from \"@/components/ui/checkbox\"\nCopy<Checkbox />\nExamples\nForm\nPreviewCodeSidebarSelect the items you want to display in the sidebar",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 469492,
      "relative_path": "documentation\\shadcn\\_docs_components_checkbox.html",
      "source_type": "documentation"
    },
    "token_count": 460,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "d3364057aa3e7f8b9b426489f24ccd97",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_checkbox.html",
    "source_type": "documentation",
    "title": "Checkbox - shadcn/ui",
    "content": "flex items-start gap-3 rounded-lg border p-3 has-[[aria-checked=true]]:border-blue-600 has-[[aria-checked=true]]:bg-blue-50 dark:has-[[aria-checked=true]]:border-blue-900 dark:has-[[aria-checked=true]]:bg-blue-950\"> <Checkbox id=\"toggle-2\" defaultChecked className=\"data-[state=checked]:border-blue-600 data-[state=checked]:bg-blue-600 data-[state=checked]:text-white dark:data-[state=checked]:border-blue-700 dark:data-[state=checked]:bg-blue-700\" /> <div className=\"grid gap-1 5 font-normal\"> <p className=\"text-sm leading-none font-medium\"> Enable notifications </p> <p className=\"text-muted-foreground text-sm\"> You can enable or disable notifications at any time </p> </div> </Label> </div> ) } Installation CLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add checkboxCopy Usage Copyimport { Checkbox } from \"@/components/ui/checkbox\" Copy<Checkbox /> Examples Form PreviewCodeSidebarSelect the items you want to display in the sidebarRecentsHomeApplicationsDesktopDownloadsDocumentsSubmitCopy\"use client\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport { toast } from \"sonner\"\nimport { z } from \"zod\"\nimport { Button } from \"@/components/ui/button\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport {\nForm,\nFormControl,\nFormDescription,\nFormField,\nFormItem,\nFormLabel,\nFormMessage,\n} from \"@/components/ui/form\"\nconst items = [\n{\nid: \"recents\",\nlabel: \"Recents\",\n},\n{\nid: \"home\",\nlabel: \"Home\",\n},\n{\nid: \"applications\",\nlabel: \"Applications\",\n},\n{\nid: \"desktop\",\nlabel: \"Desktop\",\n},\n{\nid: \"downloads\",\nlabel: \"Downloads\",\n},\n{\nid: \"documents\",\nlabel: \"Documents\",\n},\n] as const\nconst FormSchema = z object({\nitems: z array(z string()) refine((value) => value some((item) => item), {\nmessage: \"You have to select at least one item \",\n}),\n})\nexport function CheckboxReactHookFormMultiple() {\nconst form = useForm<z",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 469492,
      "relative_path": "documentation\\shadcn\\_docs_components_checkbox.html",
      "source_type": "documentation"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "7d011d0ac7ca1047cd217bd27f97f316",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_checkbox.html",
    "source_type": "documentation",
    "title": "Checkbox - shadcn/ui",
    "content": "[ { id: \"recents\", label: \"Recents\", }, { id: \"home\", label: \"Home\", }, { id: \"applications\", label: \"Applications\", }, { id: \"desktop\", label: \"Desktop\", }, { id: \"downloads\", label: \"Downloads\", }, { id: \"documents\", label: \"Documents\", }, ] as const const FormSchema = z object({ items: z array(z string()) refine((value) => value some((item) => item), { message: \"You have to select at least one item \", }), }) export function CheckboxReactHookFormMultiple() { const form = useForm<zinfer<typeof FormSchema>>({\nresolver: zodResolver(FormSchema),\ndefaultValues: {\nitems: [\"recents\", \"home\"],\n},\n})\nfunction onSubmit(data: z infer<typeof FormSchema>) {\ntoast(\"You submitted the following values\", {\ndescription: (\n<pre className=\"mt-2 w-[320px] rounded-md bg-neutral-950 p-4\">\n<code className=\"text-white\">{JSON stringify(data, null, 2)}</code>\n</pre>\n),\n})\n}\nreturn (\n<Form { form}>\n<form onSubmit={form handleSubmit(onSubmit)} className=\"space-y-8\">\n<FormField\ncontrol={form control}\nname=\"items\"\nrender={() => (\n<FormItem>\n<div className=\"mb-4\">\n<FormLabel className=\"text-base\">Sidebar</FormLabel>\n<FormDescription>\nSelect the items you want to display in the sidebar </FormDescription>\n</div>\n{items map((item) => (\n<FormField\nkey={item id}\ncontrol={form control}\nname=\"items\"\nrender={({ field }) => {\nreturn (\n<FormItem\nkey={item id}\nclassName=\"flex flex-row items-center gap-2\"\n>\n<FormControl>\n<Checkbox\nchecked={field value includes(item id)}\nonCheckedChange={(checked) => {\nreturn checked field onChange([ field value, item id])\n: field onChange(\nfield value filter(\n(value) => value == item id\n)\n)\n}}\n/>\n</FormControl>\n<FormLabel className=\"text-sm font-normal\">\n{item",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 469492,
      "relative_path": "documentation\\shadcn\\_docs_components_checkbox.html",
      "source_type": "documentation"
    },
    "token_count": 431,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "ab234537405127e546e3cc2fafca85c8",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_checkbox.html",
    "source_type": "documentation",
    "title": "Checkbox - shadcn/ui",
    "content": "<FormDescription> Select the items you want to display in the sidebar </FormDescription> </div> {items map((item) => ( <FormField key={item id} control={form control} name=\"items\" render={({ field }) => { return ( <FormItem key={item id} className=\"flex flex-row items-center gap-2\" > <FormControl> <Checkbox checked={field value includes(item id)} onCheckedChange={(checked) => { return checked field onChange([ field value, item id]) : field onChange( field value filter( (value) => value == item id ) ) }} /> </FormControl> <FormLabel className=\"text-sm font-normal\"> {itemlabel}\n</FormLabel>\n</FormItem>\n)\n}}\n/>\n))}\n<FormMessage />\n</FormItem>\n)}\n/>\n<Button type=\"submit\">Submit</Button>\n</form>\n</Form>\n)\n}\nChartCollapsible On This PageInstallationUsageExamplesFormDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 469492,
      "relative_path": "documentation\\shadcn\\_docs_components_checkbox.html",
      "source_type": "documentation"
    },
    "token_count": 247,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "c9e711d80068addb3246c20647bc322f",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_carousel.html",
    "source_type": "documentation",
    "title": "Carousel - shadcn/ui",
    "content": "Carousel - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonCarouselCopy PagePreviousNextA carousel with motion and swipe built using Embla Docs API Reference PreviewCode12345Previous slideNext slideCopyimport * as React from \"react\"\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport {\nCarousel,\nCarouselContent,\nCarouselItem,\nCarouselNext,\nCarouselPrevious,\n} from \"@/components/ui/carousel\"\nexport function CarouselDemo() {\nreturn (\n<Carousel className=\"w-full max-w-xs\">\n<CarouselContent>\n{Array from({ length: 5 }) map((_, index) => (\n<CarouselItem key={index}>\n<div className=\"p-1\">\n<Card>\n<CardContent className=\"flex aspect-square items-center justify-center p-6\">\n<span className=\"text-4xl font-semibold\">{index + 1}</span>\n</CardContent>\n</Card>\n</div>\n</CarouselItem>\n))}\n</CarouselContent>\n<CarouselPrevious />\n<CarouselNext />\n</Carousel>\n)\n}\nAbout\nThe carousel component is built using the Embla Carousel library Installation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add carouselCopy\nUsage\nCopyimport {\nCarousel,\nCarouselContent,\nCarouselItem,\nCarouselNext,\nCarouselPrevious,\n} from \"@/components/ui/carousel\"\nCopy<Carousel>\n<CarouselContent>\n<CarouselItem> </CarouselItem>\n<CarouselItem> </CarouselItem>\n<CarouselItem>",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 808768,
      "relative_path": "documentation\\shadcn\\_docs_components_carousel.html",
      "source_type": "documentation"
    },
    "token_count": 460,
    "chunk_index": 0,
    "total_chunks": 9
  },
  {
    "id": "8d2ca1eabc0f484fc77feeb98eb57eb9",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_carousel.html",
    "source_type": "documentation",
    "title": "Carousel - shadcn/ui",
    "content": "className=\"w-full max-w-xs\"> <CarouselContent> {Array from({ length: 5 }) map((_, index) => ( <CarouselItem key={index}> <div className=\"p-1\"> <Card> <CardContent className=\"flex aspect-square items-center justify-center p-6\"> <span className=\"text-4xl font-semibold\">{index + 1}</span> </CardContent> </Card> </div> </CarouselItem> ))} </CarouselContent> <CarouselPrevious /> <CarouselNext /> </Carousel> ) } About The carousel component is built using the Embla Carousel library Installation CLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add carouselCopy Usage Copyimport { Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious, } from \"@/components/ui/carousel\" Copy<Carousel> <CarouselContent> <CarouselItem> </CarouselItem> <CarouselItem> </CarouselItem> <CarouselItem></CarouselItem>\n</CarouselContent>\n<CarouselPrevious />\n<CarouselNext />\n</Carousel>\nExamples\nSizes\nTo set the size of the items, you can use the basis utility class on the <CarouselItem /> PreviewCode12345Previous slideNext slideCopyimport * as React from \"react\"\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport {\nCarousel,\nCarouselContent,\nCarouselItem,\nCarouselNext,\nCarouselPrevious,\n} from \"@/components/ui/carousel\"\nexport function CarouselSize() {\nreturn (\n<Carousel\nopts={{\nalign: \"start\",\n}}\nclassName=\"w-full max-w-sm\"\n>\n<CarouselContent>\n{Array from({ length: 5 }) map((_, index) => (\n<CarouselItem key={index} className=\"md:basis-1/2 lg:basis-1/3\">\n<div className=\"p-1\">\n<Card>\n<CardContent className=\"flex aspect-square items-center justify-center p-6\">\n<span className=\"text-3xl font-semibold\">{index + 1}</span>\n</CardContent>\n</Card>\n</div>\n</CarouselItem>\n))}\n</CarouselContent>\n<CarouselPrevious />\n<CarouselNext />\n</Carousel>\n)\n}\nCopy// 33% of the carousel width <Carousel>\n<CarouselContent>\n<CarouselItem className=\"basis-1/3\"> </CarouselItem>\n<CarouselItem className=\"basis-1/3\"> </CarouselItem>\n<CarouselItem className=\"basis-1/3\">",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 808768,
      "relative_path": "documentation\\shadcn\\_docs_components_carousel.html",
      "source_type": "documentation"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 9
  },
  {
    "id": "47822539be7f430b0a2a09a882a35872",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_carousel.html",
    "source_type": "documentation",
    "title": "Carousel - shadcn/ui",
    "content": "CarouselNext, CarouselPrevious, } from \"@/components/ui/carousel\" export function CarouselSize() { return ( <Carousel opts={{ align: \"start\", }} className=\"w-full max-w-sm\" > <CarouselContent> {Array from({ length: 5 }) map((_, index) => ( <CarouselItem key={index} className=\"md:basis-1/2 lg:basis-1/3\"> <div className=\"p-1\"> <Card> <CardContent className=\"flex aspect-square items-center justify-center p-6\"> <span className=\"text-3xl font-semibold\">{index + 1}</span> </CardContent> </Card> </div> </CarouselItem> ))} </CarouselContent> <CarouselPrevious /> <CarouselNext /> </Carousel> ) } Copy// 33% of the carousel width <Carousel> <CarouselContent> <CarouselItem className=\"basis-1/3\"> </CarouselItem> <CarouselItem className=\"basis-1/3\"> </CarouselItem> <CarouselItem className=\"basis-1/3\"></CarouselItem>\n</CarouselContent>\n</Carousel>\nCopy// 50% on small screens and 33% on larger screens <Carousel>\n<CarouselContent>\n<CarouselItem className=\"md:basis-1/2 lg:basis-1/3\"> </CarouselItem>\n<CarouselItem className=\"md:basis-1/2 lg:basis-1/3\"> </CarouselItem>\n<CarouselItem className=\"md:basis-1/2 lg:basis-1/3\"> </CarouselItem>\n</CarouselContent>\n</Carousel>\nSpacing\nTo set the spacing between the items, we use a pl-[VALUE] utility on the <CarouselItem /> and a negative -ml-[VALUE] on the <CarouselContent /> Why: I tried to use the gap property or a grid layout on the    <CarouselContent /> but it required a lot of math and mental effort to get the\nspacing right I found pl-[VALUE] and -ml-[VALUE] utilities much easier to\nuse You can always adjust this in your own project if you need to",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 808768,
      "relative_path": "documentation\\shadcn\\_docs_components_carousel.html",
      "source_type": "documentation"
    },
    "token_count": 434,
    "chunk_index": 2,
    "total_chunks": 9
  },
  {
    "id": "fdbb1de07ce8e0c32924adbbf84c95ae",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_carousel.html",
    "source_type": "documentation",
    "title": "Carousel - shadcn/ui",
    "content": "the spacing between the items, we use a pl-[VALUE] utility on the <CarouselItem /> and a negative -ml-[VALUE] on the <CarouselContent /> Why: I tried to use the gap property or a grid layout on the <CarouselContent /> but it required a lot of math and mental effort to get the spacing right I found pl-[VALUE] and -ml-[VALUE] utilities much easier to use You can always adjust this in your own project if you need toPreviewCode12345Previous slideNext slideCopyimport * as React from \"react\"\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport {\nCarousel,\nCarouselContent,\nCarouselItem,\nCarouselNext,\nCarouselPrevious,\n} from \"@/components/ui/carousel\"\nexport function CarouselSpacing() {\nreturn (\n<Carousel className=\"w-full max-w-sm\">\n<CarouselContent className=\"-ml-1\">\n{Array from({ length: 5 }) map((_, index) => (\n<CarouselItem key={index} className=\"pl-1 md:basis-1/2 lg:basis-1/3\">\n<div className=\"p-1\">\n<Card>\n<CardContent className=\"flex aspect-square items-center justify-center p-6\">\n<span className=\"text-2xl font-semibold\">{index + 1}</span>\n</CardContent>\n</Card>\n</div>\n</CarouselItem>\n))}\n</CarouselContent>\n<CarouselPrevious />\n<CarouselNext />\n</Carousel>\n)\n}\nCopy<Carousel>\n<CarouselContent className=\"-ml-4\">\n<CarouselItem className=\"pl-4\"> </CarouselItem>\n<CarouselItem className=\"pl-4\"> </CarouselItem>\n<CarouselItem className=\"pl-4\"> </CarouselItem>\n</CarouselContent>\n</Carousel>\nCopy<Carousel>\n<CarouselContent className=\"-ml-2 md:-ml-4\">\n<CarouselItem className=\"pl-2 md:pl-4\"> </CarouselItem>\n<CarouselItem className=\"pl-2 md:pl-4\"> </CarouselItem>\n<CarouselItem className=\"pl-2 md:pl-4\"> </CarouselItem>\n</CarouselContent>\n</Carousel>\nOrientation\nUse the orientation prop to set the orientation of the carousel",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 808768,
      "relative_path": "documentation\\shadcn\\_docs_components_carousel.html",
      "source_type": "documentation"
    },
    "token_count": 445,
    "chunk_index": 3,
    "total_chunks": 9
  },
  {
    "id": "09fad0a7503dba178dbeee98f47951f4",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_carousel.html",
    "source_type": "documentation",
    "title": "Carousel - shadcn/ui",
    "content": "<CarouselItem key={index} className=\"pl-1 md:basis-1/2 lg:basis-1/3\"> <div className=\"p-1\"> <Card> <CardContent className=\"flex aspect-square items-center justify-center p-6\"> <span className=\"text-2xl font-semibold\">{index + 1}</span> </CardContent> </Card> </div> </CarouselItem> ))} </CarouselContent> <CarouselPrevious /> <CarouselNext /> </Carousel> ) } Copy<Carousel> <CarouselContent className=\"-ml-4\"> <CarouselItem className=\"pl-4\"> </CarouselItem> <CarouselItem className=\"pl-4\"> </CarouselItem> <CarouselItem className=\"pl-4\"> </CarouselItem> </CarouselContent> </Carousel> Copy<Carousel> <CarouselContent className=\"-ml-2 md:-ml-4\"> <CarouselItem className=\"pl-2 md:pl-4\"> </CarouselItem> <CarouselItem className=\"pl-2 md:pl-4\"> </CarouselItem> <CarouselItem className=\"pl-2 md:pl-4\"> </CarouselItem> </CarouselContent> </Carousel> Orientation Use the orientation prop to set the orientation of the carouselPreviewCode12345Previous slideNext slideCopyimport * as React from \"react\"\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport {\nCarousel,\nCarouselContent,\nCarouselItem,\nCarouselNext,\nCarouselPrevious,\n} from \"@/components/ui/carousel\"\nexport function CarouselOrientation() {\nreturn (\n<Carousel\nopts={{\nalign: \"start\",\n}}\norientation=\"vertical\"\nclassName=\"w-full max-w-xs\"\n>\n<CarouselContent className=\"-mt-1 h-[200px]\">\n{Array from({ length: 5 }) map((_, index) => (\n<CarouselItem key={index} className=\"pt-1 md:basis-1/2\">\n<div className=\"p-1\">\n<Card>\n<CardContent className=\"flex items-center justify-center p-6\">\n<span className=\"text-3xl font-semibold\">{index + 1}</span>\n</CardContent>\n</Card>\n</div>\n</CarouselItem>\n))}\n</CarouselContent>\n<CarouselPrevious />\n<CarouselNext />\n</Carousel>\n)\n}\nCopy<Carousel orientation=\"vertical | horizontal\">\n<CarouselContent>\n<CarouselItem> </CarouselItem>\n<CarouselItem> </CarouselItem>\n<CarouselItem>",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 808768,
      "relative_path": "documentation\\shadcn\\_docs_components_carousel.html",
      "source_type": "documentation"
    },
    "token_count": 492,
    "chunk_index": 4,
    "total_chunks": 9
  },
  {
    "id": "d2309222b14a1e3d60e3f9cf4839e4f1",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_carousel.html",
    "source_type": "documentation",
    "title": "Carousel - shadcn/ui",
    "content": "{ Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious, } from \"@/components/ui/carousel\" export function CarouselOrientation() { return ( <Carousel opts={{ align: \"start\", }} orientation=\"vertical\" className=\"w-full max-w-xs\" > <CarouselContent className=\"-mt-1 h-[200px]\"> {Array from({ length: 5 }) map((_, index) => ( <CarouselItem key={index} className=\"pt-1 md:basis-1/2\"> <div className=\"p-1\"> <Card> <CardContent className=\"flex items-center justify-center p-6\"> <span className=\"text-3xl font-semibold\">{index + 1}</span> </CardContent> </Card> </div> </CarouselItem> ))} </CarouselContent> <CarouselPrevious /> <CarouselNext /> </Carousel> ) } Copy<Carousel orientation=\"vertical | horizontal\"> <CarouselContent> <CarouselItem> </CarouselItem> <CarouselItem> </CarouselItem> <CarouselItem></CarouselItem>\n</CarouselContent>\n</Carousel>\nOptions\nYou can pass options to the carousel using the opts prop See the Embla Carousel docs for more information Copy<Carousel\nopts={{\nalign: \"start\",\nloop: true,\n}}\n>\n<CarouselContent>\n<CarouselItem> </CarouselItem>\n<CarouselItem> </CarouselItem>\n<CarouselItem> </CarouselItem>\n</CarouselContent>\n</Carousel>\nAPI\nUse a state and the setApi props to get an instance of the carousel API PreviewCode12345Previous slideNext slideSlide 0 of 0Copy\"use client\"\nimport * as React from \"react\"\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport {\nCarousel,\nCarouselContent,\nCarouselItem,\nCarouselNext,\nCarouselPrevious,\ntype CarouselApi,\n} from \"@/components/ui/carousel\"\nexport function CarouselDApiDemo() {\nconst [api, setApi] = React useState<CarouselApi>()\nconst [current, setCurrent] = React useState(0)\nconst [count, setCount] = React useState(0)\nReact useEffect(() => {\nif ( api) {\nreturn\n}\nsetCount(api scrollSnapList() length)\nsetCurrent(api selectedScrollSnap() + 1)\napi on(\"select\", () => {\nsetCurrent(api",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 808768,
      "relative_path": "documentation\\shadcn\\_docs_components_carousel.html",
      "source_type": "documentation"
    },
    "token_count": 469,
    "chunk_index": 5,
    "total_chunks": 9
  },
  {
    "id": "f37af3377e22c20bacd72420248904af",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_carousel.html",
    "source_type": "documentation",
    "title": "Carousel - shadcn/ui",
    "content": "slideNext slideSlide 0 of 0Copy\"use client\" import * as React from \"react\" import { Card, CardContent } from \"@/components/ui/card\" import { Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious, type CarouselApi, } from \"@/components/ui/carousel\" export function CarouselDApiDemo() { const [api, setApi] = React useState<CarouselApi>() const [current, setCurrent] = React useState(0) const [count, setCount] = React useState(0) React useEffect(() => { if ( api) { return } setCount(api scrollSnapList() length) setCurrent(api selectedScrollSnap() + 1) api on(\"select\", () => { setCurrent(apiselectedScrollSnap() + 1)\n})\n}, [api])\nreturn (\n<div className=\"mx-auto max-w-xs\">\n<Carousel setApi={setApi} className=\"w-full max-w-xs\">\n<CarouselContent>\n{Array from({ length: 5 }) map((_, index) => (\n<CarouselItem key={index}>\n<Card>\n<CardContent className=\"flex aspect-square items-center justify-center p-6\">\n<span className=\"text-4xl font-semibold\">{index + 1}</span>\n</CardContent>\n</Card>\n</CarouselItem>\n))}\n</CarouselContent>\n<CarouselPrevious />\n<CarouselNext />\n</Carousel>\n<div className=\"text-muted-foreground py-2 text-center text-sm\">\nSlide {current} of {count}\n</div>\n</div>\n)\n}\nCopyimport { type CarouselApi } from \"@/components/ui/carousel\"\nexport function Example() {\nconst [api, setApi] = React useState<CarouselApi>()\nconst [current, setCurrent] = React useState(0)\nconst [count, setCount] = React useState(0)\nReact useEffect(() => {\nif ( api) {\nreturn\n}\nsetCount(api scrollSnapList() length)\nsetCurrent(api selectedScrollSnap() + 1)\napi on(\"select\", () => {\nsetCurrent(api selectedScrollSnap() + 1)\n})\n}, [api])\nreturn (\n<Carousel setApi={setApi}>\n<CarouselContent>\n<CarouselItem> </CarouselItem>\n<CarouselItem> </CarouselItem>\n<CarouselItem> </CarouselItem>\n</CarouselContent>\n</Carousel>\n)\n}\nEvents\nYou can listen to events using the api instance from setApi",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 808768,
      "relative_path": "documentation\\shadcn\\_docs_components_carousel.html",
      "source_type": "documentation"
    },
    "token_count": 483,
    "chunk_index": 6,
    "total_chunks": 9
  },
  {
    "id": "5efd58694d0371448f47d3a104fc8a58",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_carousel.html",
    "source_type": "documentation",
    "title": "Carousel - shadcn/ui",
    "content": "Example() { const [api, setApi] = React useState<CarouselApi>() const [current, setCurrent] = React useState(0) const [count, setCount] = React useState(0) React useEffect(() => { if ( api) { return } setCount(api scrollSnapList() length) setCurrent(api selectedScrollSnap() + 1) api on(\"select\", () => { setCurrent(api selectedScrollSnap() + 1) }) }, [api]) return ( <Carousel setApi={setApi}> <CarouselContent> <CarouselItem> </CarouselItem> <CarouselItem> </CarouselItem> <CarouselItem> </CarouselItem> </CarouselContent> </Carousel> ) } Events You can listen to events using the api instance from setApiCopyimport { type CarouselApi } from \"@/components/ui/carousel\"\nexport function Example() {\nconst [api, setApi] = React useState<CarouselApi>()\nReact useEffect(() => {\nif ( api) {\nreturn\n}\napi on(\"select\", () => {\n// Do something on select })\n}, [api])\nreturn (\n<Carousel setApi={setApi}>\n<CarouselContent>\n<CarouselItem> </CarouselItem>\n<CarouselItem> </CarouselItem>\n<CarouselItem> </CarouselItem>\n</CarouselContent>\n</Carousel>\n)\n}\nSee the Embla Carousel docs for more information on using events Plugins\nYou can use the plugins prop to add plugins to the carousel Copyimport Autoplay from \"embla-carousel-autoplay\"\nexport function Example() {\nreturn (\n<Carousel\nplugins={[\nAutoplay({\ndelay: 2000,\n}),\n]}\n>\n// </Carousel>\n)\n}\nPreviewCode12345Previous slideNext slideCopy\"use client\"\nimport * as React from \"react\"\nimport Autoplay from \"embla-carousel-autoplay\"\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport {\nCarousel,\nCarouselContent,\nCarouselItem,\nCarouselNext,\nCarouselPrevious,\n} from \"@/components/ui/carousel\"\nexport function CarouselPlugin() {\nconst plugin = React useRef(\nAutoplay({ delay: 2000, stopOnInteraction: true })\n)\nreturn (\n<Carousel\nplugins={[plugin current]}\nclassName=\"w-full max-w-xs\"\nonMouseEnter={plugin current stop}\nonMouseLeave={plugin current reset}\n>\n<CarouselContent>\n{Array from({ length: 5 })",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 808768,
      "relative_path": "documentation\\shadcn\\_docs_components_carousel.html",
      "source_type": "documentation"
    },
    "token_count": 479,
    "chunk_index": 7,
    "total_chunks": 9
  },
  {
    "id": "f688a008df680fc2c9d1b93a3aebba98",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_carousel.html",
    "source_type": "documentation",
    "title": "Carousel - shadcn/ui",
    "content": "delay: 2000, }), ]} > // </Carousel> ) } PreviewCode12345Previous slideNext slideCopy\"use client\" import * as React from \"react\" import Autoplay from \"embla-carousel-autoplay\" import { Card, CardContent } from \"@/components/ui/card\" import { Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious, } from \"@/components/ui/carousel\" export function CarouselPlugin() { const plugin = React useRef( Autoplay({ delay: 2000, stopOnInteraction: true }) ) return ( <Carousel plugins={[plugin current]} className=\"w-full max-w-xs\" onMouseEnter={plugin current stop} onMouseLeave={plugin current reset} > <CarouselContent> {Array from({ length: 5 })map((_, index) => (\n<CarouselItem key={index}>\n<div className=\"p-1\">\n<Card>\n<CardContent className=\"flex aspect-square items-center justify-center p-6\">\n<span className=\"text-4xl font-semibold\">{index + 1}</span>\n</CardContent>\n</Card>\n</div>\n</CarouselItem>\n))}\n</CarouselContent>\n<CarouselPrevious />\n<CarouselNext />\n</Carousel>\n)\n}\nSee the Embla Carousel docs for more information on using plugins CardChart On This PageAboutInstallationUsageExamplesSizesSpacingOrientationOptionsAPIEventsPluginsDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 808768,
      "relative_path": "documentation\\shadcn\\_docs_components_carousel.html",
      "source_type": "documentation"
    },
    "token_count": 332,
    "chunk_index": 8,
    "total_chunks": 9
  },
  {
    "id": "fdee3f4c7440aafc9b26de14898f4fa1",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_collapsible.html",
    "source_type": "documentation",
    "title": "Collapsible - shadcn/ui",
    "content": "Collapsible - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonCollapsibleCopy PagePreviousNextAn interactive component which expands/collapses a panel Docs API Reference PreviewCode@peduarte starred 3 repositoriesToggle@radix-ui/primitivesCopy\"use client\"\nimport * as React from \"react\"\nimport { ChevronsUpDown } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport {\nCollapsible,\nCollapsibleContent,\nCollapsibleTrigger,\n} from \"@/components/ui/collapsible\"\nexport function CollapsibleDemo() {\nconst [isOpen, setIsOpen] = React",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 373568,
      "relative_path": "documentation\\shadcn\\_docs_components_collapsible.html",
      "source_type": "documentation"
    },
    "token_count": 290,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "44873a993d95177caf3089c7823b32f2",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_collapsible.html",
    "source_type": "documentation",
    "title": "Collapsible - shadcn/ui",
    "content": "DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonCollapsibleCopy PagePreviousNextAn interactive component which expands/collapses a panel Docs API Reference PreviewCode@peduarte starred 3 repositoriesToggle@radix-ui/primitivesCopy\"use client\" import * as React from \"react\" import { ChevronsUpDown } from \"lucide-react\" import { Button } from \"@/components/ui/button\" import { Collapsible, CollapsibleContent, CollapsibleTrigger, } from \"@/components/ui/collapsible\" export function CollapsibleDemo() { const [isOpen, setIsOpen] = ReactuseState(false)\nreturn (\n<Collapsible\nopen={isOpen}\nonOpenChange={setIsOpen}\nclassName=\"flex w-[350px] flex-col gap-2\"\n>\n<div className=\"flex items-center justify-between gap-4 px-4\">\n<h4 className=\"text-sm font-semibold\">\n@peduarte starred 3 repositories\n</h4>\n<CollapsibleTrigger asChild>\n<Button variant=\"ghost\" size=\"icon\" className=\"size-8\">\n<ChevronsUpDown />\n<span className=\"sr-only\">Toggle</span>\n</Button>\n</CollapsibleTrigger>\n</div>\n<div className=\"rounded-md border px-4 py-2 font-mono text-sm\">\n@radix-ui/primitives\n</div>\n<CollapsibleContent className=\"flex flex-col gap-2\">\n<div className=\"rounded-md border px-4 py-2 font-mono text-sm\">\n@radix-ui/colors\n</div>\n<div className=\"rounded-md border px-4 py-2 font-mono text-sm\">\n@stitches/react\n</div>\n</CollapsibleContent>\n</Collapsible>\n)\n}\nInstallation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add collapsibleCopy\nUsage\nCopyimport {\nCollapsible,\nCollapsibleContent,\nCollapsibleTrigger,\n} from \"@/components/ui/collapsible\"\nCopy<Collapsible>\n<CollapsibleTrigger>Can I use this in my project",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 373568,
      "relative_path": "documentation\\shadcn\\_docs_components_collapsible.html",
      "source_type": "documentation"
    },
    "token_count": 517,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "54a219c1084f170d74adfc6df4fa8787",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_collapsible.html",
    "source_type": "documentation",
    "title": "Collapsible - shadcn/ui",
    "content": "@peduarte starred 3 repositories </h4> <CollapsibleTrigger asChild> <Button variant=\"ghost\" size=\"icon\" className=\"size-8\"> <ChevronsUpDown /> <span className=\"sr-only\">Toggle</span> </Button> </CollapsibleTrigger> </div> <div className=\"rounded-md border px-4 py-2 font-mono text-sm\"> @radix-ui/primitives </div> <CollapsibleContent className=\"flex flex-col gap-2\"> <div className=\"rounded-md border px-4 py-2 font-mono text-sm\"> @radix-ui/colors </div> <div className=\"rounded-md border px-4 py-2 font-mono text-sm\"> @stitches/react </div> </CollapsibleContent> </Collapsible> ) } Installation CLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add collapsibleCopy Usage Copyimport { Collapsible, CollapsibleContent, CollapsibleTrigger, } from \"@/components/ui/collapsible\" Copy<Collapsible> <CollapsibleTrigger>Can I use this in my project</CollapsibleTrigger>\n<CollapsibleContent>\nYes Free to use for personal and commercial projects No attribution\nrequired </CollapsibleContent>\n</Collapsible> CheckboxCombobox On This PageInstallationUsageDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 373568,
      "relative_path": "documentation\\shadcn\\_docs_components_collapsible.html",
      "source_type": "documentation"
    },
    "token_count": 333,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "c161ba6f48dfc1827a608dd1820c6f54",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_calendar.html",
    "source_type": "documentation",
    "title": "Calendar - shadcn/ui",
    "content": "Calendar - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonCalendarCopy PagePreviousNextA date field component that allows users to enter and edit date Docs PreviewCodeJanFebMarAprMayJunJulAugSepOctNovDecAug192519261927192819291930193119321933193419351936193719381939194019411942194319441945194619471948194919501951195219531954195519561957195819591960196119621963196419651966196719681969197019711972197319741975197619771978197919801981198219831984198519861987198819891990199119921993199419951996199719981999200020012002200320042005200620072008200920102011201220132014201520162017201820192020202120222023202420252025August 2025SuMoTuWeThFrSa272829303112345678910111213141516171819202122232425262728293031123456Copy\"use client\"\nimport * as React from \"react\"\nimport { Calendar } from \"@/components/ui/calendar\"\nexport function CalendarDemo() {\nconst [date, setDate] = React useState<Date | undefined>(new Date())\nreturn (\n<Calendar\nmode=\"single\"\nselected={date}\nonSelect={setDate}\nclassName=\"rounded-md border shadow-sm\"\ncaptionLayout=\"dropdown\"\n/>\n)\n}\nBlocks\nWe have built a collection of 30+ calendar blocks that you can use to build your own calendar components See all calendar blocks in the Blocks Library page",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1471538,
      "relative_path": "documentation\\shadcn\\_docs_components_calendar.html",
      "source_type": "documentation"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 24
  },
  {
    "id": "8ad27f185018bd3a6350ad5110b2e390",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_calendar.html",
    "source_type": "documentation",
    "title": "Calendar - shadcn/ui",
    "content": "to enter and edit date Docs PreviewCodeJanFebMarAprMayJunJulAugSepOctNovDecAug192519261927192819291930193119321933193419351936193719381939194019411942194319441945194619471948194919501951195219531954195519561957195819591960196119621963196419651966196719681969197019711972197319741975197619771978197919801981198219831984198519861987198819891990199119921993199419951996199719981999200020012002200320042005200620072008200920102011201220132014201520162017201820192020202120222023202420252025August 2025SuMoTuWeThFrSa272829303112345678910111213141516171819202122232425262728293031123456Copy\"use client\" import * as React from \"react\" import { Calendar } from \"@/components/ui/calendar\" export function CalendarDemo() { const [date, setDate] = React useState<Date | undefined>(new Date()) return ( <Calendar mode=\"single\" selected={date} onSelect={setDate} className=\"rounded-md border shadow-sm\" captionLayout=\"dropdown\" /> ) } Blocks We have built a collection of 30+ calendar blocks that you can use to build your own calendar components See all calendar blocks in the Blocks Library pageInstallation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add calendarCopy\nUsage\nCopyimport { Calendar } from \"@/components/ui/calendar\"\nCopyconst [date, setDate] = React useState<Date | undefined>(new Date())\nreturn (\n<Calendar\nmode=\"single\"\nselected={date}\nonSelect={setDate}\nclassName=\"rounded-lg border\"\n/>\n)\nSee the React DayPicker documentation for more information About\nThe Calendar component is built on top of React DayPicker Customization\nSee the React DayPicker documentation for more information on how to customize the Calendar component Date Picker\nYou can use the <Calendar> component to build a date picker See the Date Picker page for more information Persian / Hijri / Jalali Calendar\nTo use the Persian calendar, edit components/ui/calendar tsx and replace react-day-picker with react-day-picker/persian",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1471538,
      "relative_path": "documentation\\shadcn\\_docs_components_calendar.html",
      "source_type": "documentation"
    },
    "token_count": 478,
    "chunk_index": 1,
    "total_chunks": 24
  },
  {
    "id": "9a949dafb190cfea5d59125b1121fc58",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_calendar.html",
    "source_type": "documentation",
    "title": "Calendar - shadcn/ui",
    "content": ") See the React DayPicker documentation for more information About The Calendar component is built on top of React DayPicker Customization See the React DayPicker documentation for more information on how to customize the Calendar component Date Picker You can use the <Calendar> component to build a date picker See the Date Picker page for more information Persian / Hijri / Jalali Calendar To use the Persian calendar, edit components/ui/calendar tsx and replace react-day-picker with react-day-picker/persianCopy- import { DayPicker } from \"react-day-picker\"\n+ import { DayPicker } from \"react-day-picker/persian\"\nPreviewCodeخرداد ۱۴۰۴ش۱ش۲ش۳ش۴ش۵شج۲۷۲۸۲۹۳۰۳۱۱۲۳۴۵۶۷۸۹۱۰۱۱۱۲۱۳۱۴۱۵۱۶۱۷۱۸۱۹۲۰۲۱۲۲۲۳۲۴۲۵۲۶۲۷۲۸۲۹۳۰۳۱۱۲۳۴۵۶Copy\"use client\"\nimport * as React from \"react\"\nimport {\nChevronDownIcon,\nChevronLeftIcon,\nChevronRightIcon,\n} from \"lucide-react\"\nimport { DayButton, getDefaultClassNames } from \"react-day-picker\"\nimport { DayPicker } from \"react-day-picker/persian\"\nimport { cn } from \"@/lib/utils\"\nimport { Button, buttonVariants } from \"@/components/ui/button\"\nexport function CalendarHijri() {\nconst [date, setDate] = React useState<Date | undefined>(\nnew Date(2025, 5, 12)\n)\nreturn (\n<Calendar\nmode=\"single\"\ndefaultMonth={date}\nselected={date}\nonSelect={setDate}\nclassName=\"rounded-lg border shadow-sm\"\n/>\n)\n}\n// ----------------------------------------------------------------------------\n// The code below is for this example only // For your own calendar, you would edit the calendar tsx component directly",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1471538,
      "relative_path": "documentation\\shadcn\\_docs_components_calendar.html",
      "source_type": "documentation"
    },
    "token_count": 477,
    "chunk_index": 2,
    "total_chunks": 24
  },
  {
    "id": "202843a90dc49a74bdc3335846632863",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_calendar.html",
    "source_type": "documentation",
    "title": "Calendar - shadcn/ui",
    "content": "} from \"react-day-picker\" import { DayPicker } from \"react-day-picker/persian\" import { cn } from \"@/lib/utils\" import { Button, buttonVariants } from \"@/components/ui/button\" export function CalendarHijri() { const [date, setDate] = React useState<Date | undefined>( new Date(2025, 5, 12) ) return ( <Calendar mode=\"single\" defaultMonth={date} selected={date} onSelect={setDate} className=\"rounded-lg border shadow-sm\" /> ) } // ---------------------------------------------------------------------------- // The code below is for this example only // For your own calendar, you would edit the calendar tsx component directly// ----------------------------------------------------------------------------\nfunction Calendar({\nclassName,\nclassNames,\nshowOutsideDays = true,\ncaptionLayout = \"label\",\nbuttonVariant = \"ghost\",\nformatters,\ncomponents, props\n}: React ComponentProps<typeof DayPicker> & {\nbuttonVariant : React ComponentProps<typeof Button>[\"variant\"]\n}) {\nconst defaultClassNames = getDefaultClassNames()\nreturn (\n<DayPicker\nshowOutsideDays={showOutsideDays}\nclassName={cn(\n\"bg-background group/calendar p-3 [--cell-size:--spacing(8)] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent\",\nString raw`rtl:**:[ rdp-button\\_next>svg]:rotate-180`,\nString raw`rtl:**:[ rdp-button\\_previous>svg]:rotate-180`,\nclassName\n)}\ncaptionLayout={captionLayout}\nformatters={{\nformatMonthDropdown: (date) =>\ndate toLocaleString(\"default\", { month: \"short\" }), formatters,\n}}\nclassNames={{\nroot: cn(\"w-fit\", defaultClassNames root),\nmonths: cn(\n\"flex gap-4 flex-col md:flex-row relative\",\ndefaultClassNames months\n),\nmonth: cn(\"flex flex-col w-full gap-4\", defaultClassNames month),\nnav: cn(\n\"flex items-center gap-1 w-full absolute top-0 inset-x-0 justify-between\",\ndefaultClassNames nav\n),\nbutton_previous: cn(\nbuttonVariants({ variant: buttonVariant }),\n\"size-(--cell-size) aria-disabled:opacity-50 p-0 select-none\",\ndefaultClassNames button_previous\n),\nbutton_next: cn(\nbuttonVariants({ variant: buttonVariant }),\n\"size-(--cell-size) aria-disabled:opacity-50 p-0 select-none\",\ndefaultClassNames",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1471538,
      "relative_path": "documentation\\shadcn\\_docs_components_calendar.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 3,
    "total_chunks": 24
  },
  {
    "id": "401d9d9f298564352bafec828c017f5a",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_calendar.html",
    "source_type": "documentation",
    "title": "Calendar - shadcn/ui",
    "content": "raw`rtl:**:[ rdp-button\\_previous>svg]:rotate-180`, className )} captionLayout={captionLayout} formatters={{ formatMonthDropdown: (date) => date toLocaleString(\"default\", { month: \"short\" }), formatters, }} classNames={{ root: cn(\"w-fit\", defaultClassNames root), months: cn( \"flex gap-4 flex-col md:flex-row relative\", defaultClassNames months ), month: cn(\"flex flex-col w-full gap-4\", defaultClassNames month), nav: cn( \"flex items-center gap-1 w-full absolute top-0 inset-x-0 justify-between\", defaultClassNames nav ), button_previous: cn( buttonVariants({ variant: buttonVariant }), \"size-(--cell-size) aria-disabled:opacity-50 p-0 select-none\", defaultClassNames button_previous ), button_next: cn( buttonVariants({ variant: buttonVariant }), \"size-(--cell-size) aria-disabled:opacity-50 p-0 select-none\", defaultClassNamesbutton_next\n),\nmonth_caption: cn(\n\"flex items-center justify-center h-(--cell-size) w-full px-(--cell-size)\",\ndefaultClassNames month_caption\n),\ndropdowns: cn(\n\"w-full flex items-center text-sm font-medium justify-center h-(--cell-size) gap-1 5\",\ndefaultClassNames dropdowns\n),\ndropdown_root: cn(\n\"relative has-focus:border-ring border border-input shadow-xs has-focus:ring-ring/50 has-focus:ring-[3px] rounded-md\",\ndefaultClassNames dropdown_root\n),\ndropdown: cn(\"absolute inset-0 opacity-0\", defaultClassNames dropdown),\ncaption_label: cn(\n\"select-none font-medium\",\ncaptionLayout === \"label\" \"text-sm\"\n: \"rounded-md pl-2 pr-1 flex items-center gap-1 text-sm h-8 [&>svg]:text-muted-foreground [&>svg]:size-3 5\",\ndefaultClassNames caption_label\n),\ntable: \"w-full border-collapse\",\nweekdays: cn(\"flex\", defaultClassNames weekdays),\nweekday: cn(\n\"text-muted-foreground rounded-md flex-1 font-normal text-[0 8rem] select-none\",\ndefaultClassNames weekday\n),\nweek: cn(\"flex w-full mt-2\", defaultClassNames week),\nweek_number_header: cn(\n\"select-none w-(--cell-size)\",\ndefaultClassNames",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1471538,
      "relative_path": "documentation\\shadcn\\_docs_components_calendar.html",
      "source_type": "documentation"
    },
    "token_count": 493,
    "chunk_index": 4,
    "total_chunks": 24
  },
  {
    "id": "b7819ae710e5189e1353e665f6339445",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_calendar.html",
    "source_type": "documentation",
    "title": "Calendar - shadcn/ui",
    "content": "5\", defaultClassNames dropdowns ), dropdown_root: cn( \"relative has-focus:border-ring border border-input shadow-xs has-focus:ring-ring/50 has-focus:ring-[3px] rounded-md\", defaultClassNames dropdown_root ), dropdown: cn(\"absolute inset-0 opacity-0\", defaultClassNames dropdown), caption_label: cn( \"select-none font-medium\", captionLayout === \"label\" \"text-sm\" : \"rounded-md pl-2 pr-1 flex items-center gap-1 text-sm h-8 [&>svg]:text-muted-foreground [&>svg]:size-3 5\", defaultClassNames caption_label ), table: \"w-full border-collapse\", weekdays: cn(\"flex\", defaultClassNames weekdays), weekday: cn( \"text-muted-foreground rounded-md flex-1 font-normal text-[0 8rem] select-none\", defaultClassNames weekday ), week: cn(\"flex w-full mt-2\", defaultClassNames week), week_number_header: cn( \"select-none w-(--cell-size)\", defaultClassNamesweek_number_header\n),\nweek_number: cn(\n\"text-[0 8rem] select-none text-muted-foreground\",\ndefaultClassNames week_number\n),\nday: cn(\n\"relative w-full h-full p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md group/day aspect-square select-none\",\ndefaultClassNames day\n),\nrange_start: cn(\n\"rounded-l-md bg-accent\",\ndefaultClassNames range_start\n),\nrange_middle: cn(\"rounded-none\", defaultClassNames range_middle),\nrange_end: cn(\"rounded-r-md bg-accent\", defaultClassNames range_end),\ntoday: cn(\n\"bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none\",\ndefaultClassNames today\n),\noutside: cn(\n\"text-muted-foreground aria-selected:text-muted-foreground\",\ndefaultClassNames outside\n),\ndisabled: cn(\n\"text-muted-foreground opacity-50\",\ndefaultClassNames disabled\n),\nhidden: cn(\"invisible\", defaultClassNames hidden), classNames,\n}}\ncomponents={{\nRoot: ({ className, rootRef, props }) => {\nreturn (\n<div\ndata-slot=\"calendar\"\nref={rootRef}\nclassName={cn(className)}\n{ props}\n/>\n)\n},\nChevron: ({ className, orientation,",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1471538,
      "relative_path": "documentation\\shadcn\\_docs_components_calendar.html",
      "source_type": "documentation"
    },
    "token_count": 483,
    "chunk_index": 5,
    "total_chunks": 24
  },
  {
    "id": "025092ad6de45287d36e0622cb49b485",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_calendar.html",
    "source_type": "documentation",
    "title": "Calendar - shadcn/ui",
    "content": "[&:last-child[data-selected=true]_button]:rounded-r-md group/day aspect-square select-none\", defaultClassNames day ), range_start: cn( \"rounded-l-md bg-accent\", defaultClassNames range_start ), range_middle: cn(\"rounded-none\", defaultClassNames range_middle), range_end: cn(\"rounded-r-md bg-accent\", defaultClassNames range_end), today: cn( \"bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none\", defaultClassNames today ), outside: cn( \"text-muted-foreground aria-selected:text-muted-foreground\", defaultClassNames outside ), disabled: cn( \"text-muted-foreground opacity-50\", defaultClassNames disabled ), hidden: cn(\"invisible\", defaultClassNames hidden), classNames, }} components={{ Root: ({ className, rootRef, props }) => { return ( <div data-slot=\"calendar\" ref={rootRef} className={cn(className)} { props} /> ) }, Chevron: ({ className, orientation,props }) => {\nif (orientation === \"left\") {\nreturn (\n<ChevronLeftIcon className={cn(\"size-4\", className)} { props} />\n)\n}\nif (orientation === \"right\") {\nreturn (\n<ChevronRightIcon\nclassName={cn(\"size-4\", className)}\n{ props}\n/>\n)\n}\nreturn (\n<ChevronDownIcon className={cn(\"size-4\", className)} { props} />\n)\n},\nDayButton: CalendarDayButton,\nWeekNumber: ({ children, props }) => {\nreturn (\n<td { props}>\n<div className=\"flex size-(--cell-size) items-center justify-center text-center\">\n{children}\n</div>\n</td>\n)\n}, components,\n}}\n{ props}\n/>\n)\n}\nfunction CalendarDayButton({\nclassName,\nday,\nmodifiers, props\n}: React ComponentProps<typeof DayButton>) {\nconst defaultClassNames = getDefaultClassNames()\nconst ref = React useRef<HTMLButtonElement>(null)\nReact useEffect(() => {\nif (modifiers focused) ref current focus()\n}, [modifiers focused])\nreturn (\n<Button\nref={ref}\nvariant=\"ghost\"\nsize=\"icon\"\ndata-day={day date toLocaleDateString()}\ndata-selected-single={\nmodifiers selected && modifiers range_start && modifiers range_end && modifiers range_middle\n}\ndata-range-start={modifiers range_start}\ndata-range-end={modifiers range_end}\ndata-range-middle={modifiers",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1471538,
      "relative_path": "documentation\\shadcn\\_docs_components_calendar.html",
      "source_type": "documentation"
    },
    "token_count": 482,
    "chunk_index": 6,
    "total_chunks": 24
  },
  {
    "id": "a607be18f2eb8066e020af3d210eda52",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_calendar.html",
    "source_type": "documentation",
    "title": "Calendar - shadcn/ui",
    "content": "size-(--cell-size) items-center justify-center text-center\"> {children} </div> </td> ) }, components, }} { props} /> ) } function CalendarDayButton({ className, day, modifiers, props }: React ComponentProps<typeof DayButton>) { const defaultClassNames = getDefaultClassNames() const ref = React useRef<HTMLButtonElement>(null) React useEffect(() => { if (modifiers focused) ref current focus() }, [modifiers focused]) return ( <Button ref={ref} variant=\"ghost\" size=\"icon\" data-day={day date toLocaleDateString()} data-selected-single={ modifiers selected && modifiers range_start && modifiers range_end && modifiers range_middle } data-range-start={modifiers range_start} data-range-end={modifiers range_end} data-range-middle={modifiersrange_middle}\nclassName={cn(\n\"data-[selected-single=true]:bg-primary data-[selected-single=true]:text-primary-foreground data-[range-middle=true]:bg-accent data-[range-middle=true]:text-accent-foreground data-[range-start=true]:bg-primary data-[range-start=true]:text-primary-foreground data-[range-end=true]:bg-primary data-[range-end=true]:text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:ring-ring/50 dark:hover:text-accent-foreground flex aspect-square size-auto w-full min-w-(--cell-size) flex-col gap-1 leading-none font-normal group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] data-[range-end=true]:rounded-md data-[range-end=true]:rounded-r-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md data-[range-start=true]:rounded-l-md [&>span]:text-xs [&>span]:opacity-70\",\ndefaultClassNames day,\nclassName\n)}\n{ props}\n/>\n)\n}\nExamples\nRange Calendar\nPreviewCodeJune 2025SuMoTuWeThFrSa12345678910111213141516171819202122232425262728293012345July 2025SuMoTuWeThFrSa29301234567891011121314151617181920212223242526272829303112Copy\"use client\"\nimport * as React from \"react\"\nimport { Calendar } from \"@/components/ui/calendar\"\nexport function Calendar02() {\nconst [date, setDate] = React",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1471538,
      "relative_path": "documentation\\shadcn\\_docs_components_calendar.html",
      "source_type": "documentation"
    },
    "token_count": 496,
    "chunk_index": 7,
    "total_chunks": 24
  },
  {
    "id": "fb115196048e17a6e5a426c9a252ad5c",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_calendar.html",
    "source_type": "documentation",
    "title": "Calendar - shadcn/ui",
    "content": "modifiers range_middle } data-range-start={modifiers range_start} data-range-end={modifiers range_end} data-range-middle={modifiersrange_middle} className={cn( \"data-[selected-single=true]:bg-primary data-[selected-single=true]:text-primary-foreground data-[range-middle=true]:bg-accent data-[range-middle=true]:text-accent-foreground data-[range-start=true]:bg-primary data-[range-start=true]:text-primary-foreground data-[range-end=true]:bg-primary data-[range-end=true]:text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:ring-ring/50 dark:hover:text-accent-foreground flex aspect-square size-auto w-full min-w-(--cell-size) flex-col gap-1 leading-none font-normal group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] data-[range-end=true]:rounded-md data-[range-end=true]:rounded-r-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md data-[range-start=true]:rounded-l-md [&>span]:text-xs [&>span]:opacity-70\", defaultClassNames day, className )} { props} /> ) } Examples Range Calendar PreviewCodeJune 2025SuMoTuWeThFrSa12345678910111213141516171819202122232425262728293012345July 2025SuMoTuWeThFrSa29301234567891011121314151617181920212223242526272829303112Copy\"use client\" import * as React from \"react\" import { Calendar } from \"@/components/ui/calendar\" export function Calendar02() { const [date, setDate] = ReactuseState<Date | undefined>(\nnew Date(2025, 5, 12)\n)\nreturn (\n<Calendar\nmode=\"single\"\ndefaultMonth={date}\nnumberOfMonths={2}\nselected={date}\nonSelect={setDate}\nclassName=\"rounded-lg border shadow-sm\"\n/>\n)\n}\nMonth and Year Selector\nPreviewCodeJanFebMarAprMayJunJulAugSepOctNovDecJun192519261927192819291930193119321933193419351936193719381939194019411942194319441945194619471948194919501951195219531954195519561957195819591960196119621963196419651966196719681969197019711972197319741975197619771978197919801981198219831984198519861987198819891990199119921993199419951996199719981999200020012002200320042005200620072008200920102011201220132014201520162017201820192020202120222023202420252025June 2025SuMoTuWeThFrSa12345678910111213141516171819202122232425262728293012345DropdownCopy\"use client\"\nimport * as React from \"react\"\nimport { Calendar } from \"@/components/ui/calendar\"\nimport { Label } from \"@/components/ui/label\"\nimport {\nSelect,\nSelectContent,\nSelectItem,\nSelectTrigger,\nSelectValue,\n} from \"@/components/ui/select\"\nexport function Calendar13() {\nconst [dropdown, setDropdown] =\nReact",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1471538,
      "relative_path": "documentation\\shadcn\\_docs_components_calendar.html",
      "source_type": "documentation"
    },
    "token_count": 678,
    "chunk_index": 8,
    "total_chunks": 24
  },
  {
    "id": "4bc149517987cc5d46673884b9b68a84",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_calendar.html",
    "source_type": "documentation",
    "title": "Calendar - shadcn/ui",
    "content": "from \"@/components/ui/calendar\" export function Calendar02() { const [date, setDate] = ReactuseState<Date | undefined>( new Date(2025, 5, 12) ) return ( <Calendar mode=\"single\" defaultMonth={date} numberOfMonths={2} selected={date} onSelect={setDate} className=\"rounded-lg border shadow-sm\" /> ) } Month and Year Selector PreviewCodeJanFebMarAprMayJunJulAugSepOctNovDecJun192519261927192819291930193119321933193419351936193719381939194019411942194319441945194619471948194919501951195219531954195519561957195819591960196119621963196419651966196719681969197019711972197319741975197619771978197919801981198219831984198519861987198819891990199119921993199419951996199719981999200020012002200320042005200620072008200920102011201220132014201520162017201820192020202120222023202420252025June 2025SuMoTuWeThFrSa12345678910111213141516171819202122232425262728293012345DropdownCopy\"use client\" import * as React from \"react\" import { Calendar } from \"@/components/ui/calendar\" import { Label } from \"@/components/ui/label\" import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue, } from \"@/components/ui/select\" export function Calendar13() { const [dropdown, setDropdown] = ReactuseState<React ComponentProps<typeof Calendar>[\"captionLayout\"]>(\n\"dropdown\"\n)\nconst [date, setDate] = React useState<Date | undefined>(\nnew Date(2025, 5, 12)\n)\nreturn (\n<div className=\"flex flex-col gap-4\">\n<Calendar\nmode=\"single\"\ndefaultMonth={date}\nselected={date}\nonSelect={setDate}\ncaptionLayout={dropdown}\nclassName=\"rounded-lg border shadow-sm\"\n/>\n<div className=\"flex flex-col gap-3\">\n<Label htmlFor=\"dropdown\" className=\"px-1\">\nDropdown\n</Label>\n<Select\nvalue={dropdown}\nonValueChange={(value) =>\nsetDropdown(\nvalue as React",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1471538,
      "relative_path": "documentation\\shadcn\\_docs_components_calendar.html",
      "source_type": "documentation"
    },
    "token_count": 470,
    "chunk_index": 9,
    "total_chunks": 24
  },
  {
    "id": "1d9b899b0f238da2e84c5bd95697ae44",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_calendar.html",
    "source_type": "documentation",
    "title": "Calendar - shadcn/ui",
    "content": "\"@/components/ui/calendar\" import { Label } from \"@/components/ui/label\" import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue, } from \"@/components/ui/select\" export function Calendar13() { const [dropdown, setDropdown] = ReactuseState<React ComponentProps<typeof Calendar>[\"captionLayout\"]>( \"dropdown\" ) const [date, setDate] = React useState<Date | undefined>( new Date(2025, 5, 12) ) return ( <div className=\"flex flex-col gap-4\"> <Calendar mode=\"single\" defaultMonth={date} selected={date} onSelect={setDate} captionLayout={dropdown} className=\"rounded-lg border shadow-sm\" /> <div className=\"flex flex-col gap-3\"> <Label htmlFor=\"dropdown\" className=\"px-1\"> Dropdown </Label> <Select value={dropdown} onValueChange={(value) => setDropdown( value as ReactComponentProps<typeof Calendar>[\"captionLayout\"]\n)\n}\n>\n<SelectTrigger\nid=\"dropdown\"\nsize=\"sm\"\nclassName=\"bg-background w-full\"\n>\n<SelectValue placeholder=\"Dropdown\" />\n</SelectTrigger>\n<SelectContent align=\"center\">\n<SelectItem value=\"dropdown\">Month and Year</SelectItem>\n<SelectItem value=\"dropdown-months\">Month Only</SelectItem>\n<SelectItem value=\"dropdown-years\">Year Only</SelectItem>\n</SelectContent>\n</Select>\n</div>\n</div>\n)\n}\nDate of Birth Picker\nPreviewCodeDate of birthSelect dateCopy\"use client\"\nimport * as React from \"react\"\nimport { ChevronDownIcon } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Calendar } from \"@/components/ui/calendar\"\nimport { Label } from \"@/components/ui/label\"\nimport {\nPopover,\nPopoverContent,\nPopoverTrigger,\n} from \"@/components/ui/popover\"\nexport function Calendar22() {\nconst [open, setOpen] = React useState(false)\nconst [date, setDate] = React useState<Date | undefined>(undefined)\nreturn (\n<div className=\"flex flex-col gap-3\">\n<Label htmlFor=\"date\" className=\"px-1\">\nDate of birth\n</Label>\n<Popover open={open} onOpenChange={setOpen}>\n<PopoverTrigger asChild>\n<Button\nvariant=\"outline\"\nid=\"date\"\nclassName=\"w-48 justify-between font-normal\"\n>\n{date date",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1471538,
      "relative_path": "documentation\\shadcn\\_docs_components_calendar.html",
      "source_type": "documentation"
    },
    "token_count": 486,
    "chunk_index": 10,
    "total_chunks": 24
  },
  {
    "id": "ff1da3e5c841cf2fd0abfa3013053162",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_calendar.html",
    "source_type": "documentation",
    "title": "Calendar - shadcn/ui",
    "content": "{ ChevronDownIcon } from \"lucide-react\" import { Button } from \"@/components/ui/button\" import { Calendar } from \"@/components/ui/calendar\" import { Label } from \"@/components/ui/label\" import { Popover, PopoverContent, PopoverTrigger, } from \"@/components/ui/popover\" export function Calendar22() { const [open, setOpen] = React useState(false) const [date, setDate] = React useState<Date | undefined>(undefined) return ( <div className=\"flex flex-col gap-3\"> <Label htmlFor=\"date\" className=\"px-1\"> Date of birth </Label> <Popover open={open} onOpenChange={setOpen}> <PopoverTrigger asChild> <Button variant=\"outline\" id=\"date\" className=\"w-48 justify-between font-normal\" > {date datetoLocaleDateString() : \"Select date\"}\n<ChevronDownIcon />\n</Button>\n</PopoverTrigger>\n<PopoverContent className=\"w-auto overflow-hidden p-0\" align=\"start\">\n<Calendar\nmode=\"single\"\nselected={date}\ncaptionLayout=\"dropdown\"\nonSelect={(date) => {\nsetDate(date)\nsetOpen(false)\n}}\n/>\n</PopoverContent>\n</Popover>\n</div>\n)\n}\nDate and Time Picker\nPreviewCodeDateSelect dateTimeCopy\"use client\"\nimport * as React from \"react\"\nimport { ChevronDownIcon } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Calendar } from \"@/components/ui/calendar\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport {\nPopover,\nPopoverContent,\nPopoverTrigger,\n} from \"@/components/ui/popover\"\nexport function Calendar24() {\nconst [open, setOpen] = React useState(false)\nconst [date, setDate] = React useState<Date | undefined>(undefined)\nreturn (\n<div className=\"flex gap-4\">\n<div className=\"flex flex-col gap-3\">\n<Label htmlFor=\"date-picker\" className=\"px-1\">\nDate\n</Label>\n<Popover open={open} onOpenChange={setOpen}>\n<PopoverTrigger asChild>\n<Button\nvariant=\"outline\"\nid=\"date-picker\"\nclassName=\"w-32 justify-between font-normal\"\n>\n{date date",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1471538,
      "relative_path": "documentation\\shadcn\\_docs_components_calendar.html",
      "source_type": "documentation"
    },
    "token_count": 462,
    "chunk_index": 11,
    "total_chunks": 24
  },
  {
    "id": "f1abc63b23db86e0772612352ecacba7",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_calendar.html",
    "source_type": "documentation",
    "title": "Calendar - shadcn/ui",
    "content": "Button } from \"@/components/ui/button\" import { Calendar } from \"@/components/ui/calendar\" import { Input } from \"@/components/ui/input\" import { Label } from \"@/components/ui/label\" import { Popover, PopoverContent, PopoverTrigger, } from \"@/components/ui/popover\" export function Calendar24() { const [open, setOpen] = React useState(false) const [date, setDate] = React useState<Date | undefined>(undefined) return ( <div className=\"flex gap-4\"> <div className=\"flex flex-col gap-3\"> <Label htmlFor=\"date-picker\" className=\"px-1\"> Date </Label> <Popover open={open} onOpenChange={setOpen}> <PopoverTrigger asChild> <Button variant=\"outline\" id=\"date-picker\" className=\"w-32 justify-between font-normal\" > {date datetoLocaleDateString() : \"Select date\"}\n<ChevronDownIcon />\n</Button>\n</PopoverTrigger>\n<PopoverContent className=\"w-auto overflow-hidden p-0\" align=\"start\">\n<Calendar\nmode=\"single\"\nselected={date}\ncaptionLayout=\"dropdown\"\nonSelect={(date) => {\nsetDate(date)\nsetOpen(false)\n}}\n/>\n</PopoverContent>\n</Popover>\n</div>\n<div className=\"flex flex-col gap-3\">\n<Label htmlFor=\"time-picker\" className=\"px-1\">\nTime\n</Label>\n<Input\ntype=\"time\"\nid=\"time-picker\"\nstep=\"1\"\ndefaultValue=\"10:30:00\"\nclassName=\"bg-background appearance-none [&::-webkit-calendar-picker-indicator]:hidden [&::-webkit-calendar-picker-indicator]:appearance-none\"\n/>\n</div>\n</div>\n)\n}\nNatural Language Picker\nThis component uses the chrono-node library to parse natural language dates PreviewCodeSchedule DateSelect dateYour post will be published on August 15, 2025 Copy\"use client\"\nimport * as React from \"react\"\nimport { parseDate } from \"chrono-node\"\nimport { CalendarIcon } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Calendar } from \"@/components/ui/calendar\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport {\nPopover,\nPopoverContent,\nPopoverTrigger,\n} from \"@/components/ui/popover\"\nfunction formatDate(date: Date | undefined) {\nif ( date) {\nreturn \"\"\n}\nreturn date",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1471538,
      "relative_path": "documentation\\shadcn\\_docs_components_calendar.html",
      "source_type": "documentation"
    },
    "token_count": 490,
    "chunk_index": 12,
    "total_chunks": 24
  },
  {
    "id": "7e1b55ba8cc0bbf3cc9f738e78441d8c",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_calendar.html",
    "source_type": "documentation",
    "title": "Calendar - shadcn/ui",
    "content": "dateYour post will be published on August 15, 2025 Copy\"use client\" import * as React from \"react\" import { parseDate } from \"chrono-node\" import { CalendarIcon } from \"lucide-react\" import { Button } from \"@/components/ui/button\" import { Calendar } from \"@/components/ui/calendar\" import { Input } from \"@/components/ui/input\" import { Label } from \"@/components/ui/label\" import { Popover, PopoverContent, PopoverTrigger, } from \"@/components/ui/popover\" function formatDate(date: Date | undefined) { if ( date) { return \"\" } return datetoLocaleDateString(\"en-US\", {\nday: \"2-digit\",\nmonth: \"long\",\nyear: \"numeric\",\n})\n}\nexport function Calendar29() {\nconst [open, setOpen] = React useState(false)\nconst [value, setValue] = React useState(\"In 2 days\")\nconst [date, setDate] = React useState<Date | undefined>(\nparseDate(value) || undefined\n)\nconst [month, setMonth] = React useState<Date | undefined>(date)\nreturn (\n<div className=\"flex flex-col gap-3\">\n<Label htmlFor=\"date\" className=\"px-1\">\nSchedule Date\n</Label>\n<div className=\"relative flex gap-2\">\n<Input\nid=\"date\"\nvalue={value}\nplaceholder=\"Tomorrow or next week\"\nclassName=\"bg-background pr-10\"\nonChange={(e) => {\nsetValue(e target value)\nconst date = parseDate(e target value)\nif (date) {\nsetDate(date)\nsetMonth(date)\n}\n}}\nonKeyDown={(e) => {\nif (e key === \"ArrowDown\") {\ne preventDefault()\nsetOpen(true)\n}\n}}\n/>\n<Popover open={open} onOpenChange={setOpen}>\n<PopoverTrigger asChild>\n<Button\nid=\"date-picker\"\nvariant=\"ghost\"\nclassName=\"absolute top-1/2 right-2 size-6 -translate-y-1/2\"\n>\n<CalendarIcon className=\"size-3",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1471538,
      "relative_path": "documentation\\shadcn\\_docs_components_calendar.html",
      "source_type": "documentation"
    },
    "token_count": 412,
    "chunk_index": 13,
    "total_chunks": 24
  },
  {
    "id": "4686b46622dcdc51071861897e223ef9",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_calendar.html",
    "source_type": "documentation",
    "title": "Calendar - shadcn/ui",
    "content": "undefined>(date) return ( <div className=\"flex flex-col gap-3\"> <Label htmlFor=\"date\" className=\"px-1\"> Schedule Date </Label> <div className=\"relative flex gap-2\"> <Input id=\"date\" value={value} placeholder=\"Tomorrow or next week\" className=\"bg-background pr-10\" onChange={(e) => { setValue(e target value) const date = parseDate(e target value) if (date) { setDate(date) setMonth(date) } }} onKeyDown={(e) => { if (e key === \"ArrowDown\") { e preventDefault() setOpen(true) } }} /> <Popover open={open} onOpenChange={setOpen}> <PopoverTrigger asChild> <Button id=\"date-picker\" variant=\"ghost\" className=\"absolute top-1/2 right-2 size-6 -translate-y-1/2\" > <CalendarIcon className=\"size-35\" />\n<span className=\"sr-only\">Select date</span>\n</Button>\n</PopoverTrigger>\n<PopoverContent className=\"w-auto overflow-hidden p-0\" align=\"end\">\n<Calendar\nmode=\"single\"\nselected={date}\ncaptionLayout=\"dropdown\"\nmonth={month}\nonMonthChange={setMonth}\nonSelect={(date) => {\nsetDate(date)\nsetValue(formatDate(date))\nsetOpen(false)\n}}\n/>\n</PopoverContent>\n</Popover>\n</div>\n<div className=\"text-muted-foreground px-1 text-sm\">\nYour post will be published on{\" \"}\n<span className=\"font-medium\">{formatDate(date)}</span> </div>\n</div>\n)\n}\nForm\nPreviewCodeDate of birthPick a dateYour date of birth is used to calculate your age SubmitCopy\"use client\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { format } from \"date-fns\"\nimport { CalendarIcon } from \"lucide-react\"\nimport { useForm } from \"react-hook-form\"\nimport { toast } from \"sonner\"\nimport { z } from \"zod\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Calendar } from \"@/components/ui/calendar\"\nimport {\nForm,\nFormControl,\nFormDescription,\nFormField,\nFormItem,\nFormLabel,\nFormMessage,\n} from \"@/components/ui/form\"\nimport {\nPopover,\nPopoverContent,\nPopoverTrigger,\n} from \"@/components/ui/popover\"\nconst FormSchema = z object({\ndob: z",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1471538,
      "relative_path": "documentation\\shadcn\\_docs_components_calendar.html",
      "source_type": "documentation"
    },
    "token_count": 500,
    "chunk_index": 14,
    "total_chunks": 24
  },
  {
    "id": "5a999e23f5ed1e7ae2475b058f7a3a90",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_calendar.html",
    "source_type": "documentation",
    "title": "Calendar - shadcn/ui",
    "content": "\"@hookform/resolvers/zod\" import { format } from \"date-fns\" import { CalendarIcon } from \"lucide-react\" import { useForm } from \"react-hook-form\" import { toast } from \"sonner\" import { z } from \"zod\" import { cn } from \"@/lib/utils\" import { Button } from \"@/components/ui/button\" import { Calendar } from \"@/components/ui/calendar\" import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage, } from \"@/components/ui/form\" import { Popover, PopoverContent, PopoverTrigger, } from \"@/components/ui/popover\" const FormSchema = z object({ dob: zdate({\nrequired_error: \"A date of birth is required \",\n}),\n})\nexport function CalendarForm() {\nconst form = useForm<z infer<typeof FormSchema>>({\nresolver: zodResolver(FormSchema),\n})\nfunction onSubmit(data: z infer<typeof FormSchema>) {\ntoast(\"You submitted the following values\", {\ndescription: (\n<pre className=\"mt-2 w-[320px] rounded-md bg-neutral-950 p-4\">\n<code className=\"text-white\">{JSON stringify(data, null, 2)}</code>\n</pre>\n),\n})\n}\nreturn (\n<Form { form}>\n<form onSubmit={form handleSubmit(onSubmit)} className=\"space-y-8\">\n<FormField\ncontrol={form control}\nname=\"dob\"\nrender={({ field }) => (\n<FormItem className=\"flex flex-col\">\n<FormLabel>Date of birth</FormLabel>\n<Popover>\n<PopoverTrigger asChild>\n<FormControl>\n<Button\nvariant={\"outline\"}\nclassName={cn(\n\"w-[240px] pl-3 text-left font-normal\", field value && \"text-muted-foreground\"\n)}\n>\n{field value (\nformat(field value, \"PPP\")\n) : (\n<span>Pick a date</span>\n)}\n<CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n</Button>\n</FormControl>\n</PopoverTrigger>\n<PopoverContent className=\"w-auto p-0\" align=\"start\">\n<Calendar\nmode=\"single\"\nselected={field value}\nonSelect={field onChange}\ndisabled={(date) =>\ndate > new Date() || date < new Date(\"1900-01-01\")\n}\ncaptionLayout=\"dropdown\"\n/>\n</PopoverContent>\n</Popover>\n<FormDescription>\nYour date of birth is used to calculate your age",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1471538,
      "relative_path": "documentation\\shadcn\\_docs_components_calendar.html",
      "source_type": "documentation"
    },
    "token_count": 492,
    "chunk_index": 15,
    "total_chunks": 24
  },
  {
    "id": "549013c20723787b6f2f2ec30b200421",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_calendar.html",
    "source_type": "documentation",
    "title": "Calendar - shadcn/ui",
    "content": "<Popover> <PopoverTrigger asChild> <FormControl> <Button variant={\"outline\"} className={cn( \"w-[240px] pl-3 text-left font-normal\", field value && \"text-muted-foreground\" )} > {field value ( format(field value, \"PPP\") ) : ( <span>Pick a date</span> )} <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" /> </Button> </FormControl> </PopoverTrigger> <PopoverContent className=\"w-auto p-0\" align=\"start\"> <Calendar mode=\"single\" selected={field value} onSelect={field onChange} disabled={(date) => date > new Date() || date < new Date(\"1900-01-01\") } captionLayout=\"dropdown\" /> </PopoverContent> </Popover> <FormDescription> Your date of birth is used to calculate your age</FormDescription>\n<FormMessage />\n</FormItem>\n)}\n/>\n<Button type=\"submit\">Submit</Button>\n</form>\n</Form>\n)\n}\nUpgrade Guide\nTailwind v4\nIf you're already using Tailwind v4, you can upgrade to the latest version of the Calendar component by running the following command:\npnpmnpmyarnbunpnpm dlx shadcn@latest add calendarCopy\nWhen you're prompted to overwrite the existing Calendar component, select Yes If you have made any changes to the Calendar component, you will need to merge your changes with the new version This will update the Calendar component and react-day-picker to the latest version Next, follow the React DayPicker upgrade guide to upgrade your existing components to the latest version Installing Blocks\nAfter upgrading the Calendar component, you can install the new blocks by running the shadcn@latest add command pnpmnpmyarnbunpnpm dlx shadcn@latest add calendar-02Copy\nThis will install the latest version of the calendar blocks Tailwind v3\nIf you're using Tailwind v3, you can upgrade to the latest version of the Calendar by copying the following code to your calendar tsx file Expandcomponents/ui/calendar",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1471538,
      "relative_path": "documentation\\shadcn\\_docs_components_calendar.html",
      "source_type": "documentation"
    },
    "token_count": 430,
    "chunk_index": 16,
    "total_chunks": 24
  },
  {
    "id": "0c1264f939c09be279d18ea7d864861b",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_calendar.html",
    "source_type": "documentation",
    "title": "Calendar - shadcn/ui",
    "content": "the React DayPicker upgrade guide to upgrade your existing components to the latest version Installing Blocks After upgrading the Calendar component, you can install the new blocks by running the shadcn@latest add command pnpmnpmyarnbunpnpm dlx shadcn@latest add calendar-02Copy This will install the latest version of the calendar blocks Tailwind v3 If you're using Tailwind v3, you can upgrade to the latest version of the Calendar by copying the following code to your calendar tsx file Expandcomponents/ui/calendartsxCopy\"use client\"\nimport * as React from \"react\"\nimport {\nChevronDownIcon,\nChevronLeftIcon,\nChevronRightIcon,\n} from \"lucide-react\"\nimport { DayButton, DayPicker, getDefaultClassNames } from \"react-day-picker\"\nimport { cn } from \"@/lib/utils\"\nimport { Button, buttonVariants } from \"@/components/ui/button\"\nfunction Calendar({\nclassName,\nclassNames,\nshowOutsideDays = true,\ncaptionLayout = \"label\",\nbuttonVariant = \"ghost\",\nformatters,\ncomponents, props\n}: React ComponentProps<typeof DayPicker> & {\nbuttonVariant : React ComponentProps<typeof Button>[\"variant\"]\n}) {\nconst defaultClassNames = getDefaultClassNames()\nreturn (\n<DayPicker\nshowOutsideDays={showOutsideDays}\nclassName={cn(\n\"bg-background group/calendar p-3 [--cell-size:2rem] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent\",\nString raw`rtl:**:[ rdp-button\\_next>svg]:rotate-180`,\nString raw`rtl:**:[ rdp-button\\_previous>svg]:rotate-180`,\nclassName\n)}\ncaptionLayout={captionLayout}\nformatters={{\nformatMonthDropdown: (date) =>\ndate toLocaleString(\"default\", { month: \"short\" }), formatters,\n}}\nclassNames={{\nroot: cn(\"w-fit\", defaultClassNames root),\nmonths: cn(\n\"relative flex flex-col gap-4 md:flex-row\",\ndefaultClassNames months\n),\nmonth: cn(\"flex w-full flex-col gap-4\", defaultClassNames month),\nnav: cn(\n\"absolute inset-x-0 top-0 flex w-full items-center justify-between gap-1\",\ndefaultClassNames",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1471538,
      "relative_path": "documentation\\shadcn\\_docs_components_calendar.html",
      "source_type": "documentation"
    },
    "token_count": 467,
    "chunk_index": 17,
    "total_chunks": 24
  },
  {
    "id": "21d5af8efac1a9b97d3c8ed93317a297",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_calendar.html",
    "source_type": "documentation",
    "title": "Calendar - shadcn/ui",
    "content": "buttonVariant : React ComponentProps<typeof Button>[\"variant\"] }) { const defaultClassNames = getDefaultClassNames() return ( <DayPicker showOutsideDays={showOutsideDays} className={cn( \"bg-background group/calendar p-3 [--cell-size:2rem] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent\", String raw`rtl:**:[ rdp-button\\_next>svg]:rotate-180`, String raw`rtl:**:[ rdp-button\\_previous>svg]:rotate-180`, className )} captionLayout={captionLayout} formatters={{ formatMonthDropdown: (date) => date toLocaleString(\"default\", { month: \"short\" }), formatters, }} classNames={{ root: cn(\"w-fit\", defaultClassNames root), months: cn( \"relative flex flex-col gap-4 md:flex-row\", defaultClassNames months ), month: cn(\"flex w-full flex-col gap-4\", defaultClassNames month), nav: cn( \"absolute inset-x-0 top-0 flex w-full items-center justify-between gap-1\", defaultClassNamesnav\n),\nbutton_previous: cn(\nbuttonVariants({ variant: buttonVariant }),\n\"h-[--cell-size] w-[--cell-size] select-none p-0 aria-disabled:opacity-50\",\ndefaultClassNames button_previous\n),\nbutton_next: cn(\nbuttonVariants({ variant: buttonVariant }),\n\"h-[--cell-size] w-[--cell-size] select-none p-0 aria-disabled:opacity-50\",\ndefaultClassNames button_next\n),\nmonth_caption: cn(\n\"flex h-[--cell-size] w-full items-center justify-center px-[--cell-size]\",\ndefaultClassNames month_caption\n),\ndropdowns: cn(\n\"flex h-[--cell-size] w-full items-center justify-center gap-1 5 text-sm font-medium\",\ndefaultClassNames dropdowns\n),\ndropdown_root: cn(\n\"has-focus:border-ring border-input shadow-xs has-focus:ring-ring/50 has-focus:ring-[3px] relative rounded-md border\",\ndefaultClassNames dropdown_root\n),\ndropdown: cn(\"absolute inset-0 opacity-0\", defaultClassNames dropdown),\ncaption_label: cn(\n\"select-none font-medium\",\ncaptionLayout === \"label\"",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1471538,
      "relative_path": "documentation\\shadcn\\_docs_components_calendar.html",
      "source_type": "documentation"
    },
    "token_count": 470,
    "chunk_index": 18,
    "total_chunks": 24
  },
  {
    "id": "0c447267ec3a9e294abd8ebc10509732",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_calendar.html",
    "source_type": "documentation",
    "title": "Calendar - shadcn/ui",
    "content": "variant: buttonVariant }), \"h-[--cell-size] w-[--cell-size] select-none p-0 aria-disabled:opacity-50\", defaultClassNames button_previous ), button_next: cn( buttonVariants({ variant: buttonVariant }), \"h-[--cell-size] w-[--cell-size] select-none p-0 aria-disabled:opacity-50\", defaultClassNames button_next ), month_caption: cn( \"flex h-[--cell-size] w-full items-center justify-center px-[--cell-size]\", defaultClassNames month_caption ), dropdowns: cn( \"flex h-[--cell-size] w-full items-center justify-center gap-1 5 text-sm font-medium\", defaultClassNames dropdowns ), dropdown_root: cn( \"has-focus:border-ring border-input shadow-xs has-focus:ring-ring/50 has-focus:ring-[3px] relative rounded-md border\", defaultClassNames dropdown_root ), dropdown: cn(\"absolute inset-0 opacity-0\", defaultClassNames dropdown), caption_label: cn( \"select-none font-medium\", captionLayout === \"label\"\"text-sm\"\n: \"[&>svg]:text-muted-foreground flex h-8 items-center gap-1 rounded-md pl-2 pr-1 text-sm [&>svg]:size-3 5\",\ndefaultClassNames caption_label\n),\ntable: \"w-full border-collapse\",\nweekdays: cn(\"flex\", defaultClassNames weekdays),\nweekday: cn(\n\"text-muted-foreground flex-1 select-none rounded-md text-[0 8rem] font-normal\",\ndefaultClassNames weekday\n),\nweek: cn(\"mt-2 flex w-full\", defaultClassNames week),\nweek_number_header: cn(\n\"w-[--cell-size] select-none\",\ndefaultClassNames week_number_header\n),\nweek_number: cn(\n\"text-muted-foreground select-none text-[0 8rem]\",\ndefaultClassNames week_number\n),\nday: cn(\n\"group/day relative aspect-square h-full w-full select-none p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md\",\ndefaultClassNames day\n),\nrange_start: cn(\n\"bg-accent rounded-l-md\",\ndefaultClassNames range_start\n),\nrange_middle: cn(\"rounded-none\", defaultClassNames range_middle),\nrange_end: cn(\"bg-accent rounded-r-md\", defaultClassNames",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1471538,
      "relative_path": "documentation\\shadcn\\_docs_components_calendar.html",
      "source_type": "documentation"
    },
    "token_count": 489,
    "chunk_index": 19,
    "total_chunks": 24
  },
  {
    "id": "f0484ae54a8289b561b61ed4946cdc7d",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_calendar.html",
    "source_type": "documentation",
    "title": "Calendar - shadcn/ui",
    "content": "[&>svg]:size-3 5\", defaultClassNames caption_label ), table: \"w-full border-collapse\", weekdays: cn(\"flex\", defaultClassNames weekdays), weekday: cn( \"text-muted-foreground flex-1 select-none rounded-md text-[0 8rem] font-normal\", defaultClassNames weekday ), week: cn(\"mt-2 flex w-full\", defaultClassNames week), week_number_header: cn( \"w-[--cell-size] select-none\", defaultClassNames week_number_header ), week_number: cn( \"text-muted-foreground select-none text-[0 8rem]\", defaultClassNames week_number ), day: cn( \"group/day relative aspect-square h-full w-full select-none p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md\", defaultClassNames day ), range_start: cn( \"bg-accent rounded-l-md\", defaultClassNames range_start ), range_middle: cn(\"rounded-none\", defaultClassNames range_middle), range_end: cn(\"bg-accent rounded-r-md\", defaultClassNamesrange_end),\ntoday: cn(\n\"bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none\",\ndefaultClassNames today\n),\noutside: cn(\n\"text-muted-foreground aria-selected:text-muted-foreground\",\ndefaultClassNames outside\n),\ndisabled: cn(\n\"text-muted-foreground opacity-50\",\ndefaultClassNames disabled\n),\nhidden: cn(\"invisible\", defaultClassNames hidden), classNames,\n}}\ncomponents={{\nRoot: ({ className, rootRef, props }) => {\nreturn (\n<div\ndata-slot=\"calendar\"\nref={rootRef}\nclassName={cn(className)}\n{ props}\n/>\n)\n},\nChevron: ({ className, orientation, props }) => {\nif (orientation === \"left\") {\nreturn (\n<ChevronLeftIcon className={cn(\"size-4\", className)} { props} />\n)\n}\nif (orientation === \"right\") {\nreturn (\n<ChevronRightIcon\nclassName={cn(\"size-4\", className)}\n{ props}\n/>\n)\n}\nreturn (\n<ChevronDownIcon className={cn(\"size-4\", className)} { props} />\n)\n},\nDayButton: CalendarDayButton,\nWeekNumber: ({ children, props }) => {\nreturn (\n<td {",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1471538,
      "relative_path": "documentation\\shadcn\\_docs_components_calendar.html",
      "source_type": "documentation"
    },
    "token_count": 477,
    "chunk_index": 20,
    "total_chunks": 24
  },
  {
    "id": "66e7afd020ef1f075fc0e0dc6452cc28",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_calendar.html",
    "source_type": "documentation",
    "title": "Calendar - shadcn/ui",
    "content": "props }) => { return ( <div data-slot=\"calendar\" ref={rootRef} className={cn(className)} { props} /> ) }, Chevron: ({ className, orientation, props }) => { if (orientation === \"left\") { return ( <ChevronLeftIcon className={cn(\"size-4\", className)} { props} /> ) } if (orientation === \"right\") { return ( <ChevronRightIcon className={cn(\"size-4\", className)} { props} /> ) } return ( <ChevronDownIcon className={cn(\"size-4\", className)} { props} /> ) }, DayButton: CalendarDayButton, WeekNumber: ({ children, props }) => { return ( <td {props}>\n<div className=\"flex size-[--cell-size] items-center justify-center text-center\">\n{children}\n</div>\n</td>\n)\n}, components,\n}}\n{ props}\n/>\n)\n}\nfunction CalendarDayButton({\nclassName,\nday,\nmodifiers, props\n}: React ComponentProps<typeof DayButton>) {\nconst defaultClassNames = getDefaultClassNames()\nconst ref = React useRef<HTMLButtonElement>(null)\nReact useEffect(() => {\nif (modifiers focused) ref current focus()\n}, [modifiers focused])\nreturn (\n<Button\nref={ref}\nvariant=\"ghost\"\nsize=\"icon\"\ndata-day={day date toLocaleDateString()}\ndata-selected-single={\nmodifiers selected && modifiers range_start && modifiers range_end && modifiers range_middle\n}\ndata-range-start={modifiers range_start}\ndata-range-end={modifiers range_end}\ndata-range-middle={modifiers",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1471538,
      "relative_path": "documentation\\shadcn\\_docs_components_calendar.html",
      "source_type": "documentation"
    },
    "token_count": 313,
    "chunk_index": 21,
    "total_chunks": 24
  },
  {
    "id": "7d447188190cd29c18f5ff45f6624e0d",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_calendar.html",
    "source_type": "documentation",
    "title": "Calendar - shadcn/ui",
    "content": "size-[--cell-size] items-center justify-center text-center\"> {children} </div> </td> ) }, components, }} { props} /> ) } function CalendarDayButton({ className, day, modifiers, props }: React ComponentProps<typeof DayButton>) { const defaultClassNames = getDefaultClassNames() const ref = React useRef<HTMLButtonElement>(null) React useEffect(() => { if (modifiers focused) ref current focus() }, [modifiers focused]) return ( <Button ref={ref} variant=\"ghost\" size=\"icon\" data-day={day date toLocaleDateString()} data-selected-single={ modifiers selected && modifiers range_start && modifiers range_end && modifiers range_middle } data-range-start={modifiers range_start} data-range-end={modifiers range_end} data-range-middle={modifiersrange_middle}\nclassName={cn(\n\"data-[selected-single=true]:bg-primary data-[selected-single=true]:text-primary-foreground data-[range-middle=true]:bg-accent data-[range-middle=true]:text-accent-foreground data-[range-start=true]:bg-primary data-[range-start=true]:text-primary-foreground data-[range-end=true]:bg-primary data-[range-end=true]:text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:ring-ring/50 flex aspect-square h-auto w-full min-w-[--cell-size] flex-col gap-1 font-normal leading-none data-[range-end=true]:rounded-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] [&>span]:text-xs [&>span]:opacity-70\",\ndefaultClassNames day,\nclassName\n)}\n{ props}\n/>\n)\n}\nexport { Calendar, CalendarDayButton }Expand\nIf you have made any changes to the Calendar component, you will need to merge your changes with the new version Then follow the React DayPicker upgrade guide to upgrade your dependencies and existing components to the latest version Installing Blocks\nAfter upgrading the Calendar component, you can install the new blocks by running the shadcn@latest add command pnpmnpmyarnbunpnpm dlx shadcn@latest add calendar-02Copy\nThis will install the latest version of the calendar blocks",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1471538,
      "relative_path": "documentation\\shadcn\\_docs_components_calendar.html",
      "source_type": "documentation"
    },
    "token_count": 475,
    "chunk_index": 22,
    "total_chunks": 24
  },
  {
    "id": "5d39c66494ab0920fb7c5323a4fe2a64",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_calendar.html",
    "source_type": "documentation",
    "title": "Calendar - shadcn/ui",
    "content": "Calendar, CalendarDayButton }Expand If you have made any changes to the Calendar component, you will need to merge your changes with the new version Then follow the React DayPicker upgrade guide to upgrade your dependencies and existing components to the latest version Installing Blocks After upgrading the Calendar component, you can install the new blocks by running the shadcn@latest add command pnpmnpmyarnbunpnpm dlx shadcn@latest add calendar-02Copy This will install the latest version of the calendar blocksButtonCard On This PageBlocksInstallationUsageAboutCustomizationDate PickerPersian / Hijri / Jalali CalendarExamplesRange CalendarMonth and Year SelectorDate of Birth PickerDate and Time PickerNatural Language PickerFormUpgrade GuideTailwind v4Installing BlocksTailwind v3Installing BlocksDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1471538,
      "relative_path": "documentation\\shadcn\\_docs_components_calendar.html",
      "source_type": "documentation"
    },
    "token_count": 219,
    "chunk_index": 23,
    "total_chunks": 24
  },
  {
    "id": "ac6480062b3775080d2d46fef0cdd44e",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_command.html",
    "source_type": "documentation",
    "title": "Command - shadcn/ui",
    "content": "Command - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonCommandCopy PagePreviousNextFast, composable, unstyled command menu for React Docs PreviewCodeNo results found SuggestionsCalendarSearch EmojiCalculatorSettingsProfile⌘PBilling⌘BSettings⌘SCopyimport {\nCalculator,\nCalendar,\nCreditCard,\nSettings,\nSmile,\nUser,\n} from \"lucide-react\"\nimport {\nCommand,\nCommandEmpty,\nCommandGroup,\nCommandInput,\nCommandItem,\nCommandList,\nCommandSeparator,\nCommandShortcut,\n} from \"@/components/ui/command\"\nexport function CommandDemo() {\nreturn (\n<Command className=\"rounded-lg border shadow-md md:min-w-[450px]\">\n<CommandInput placeholder=\"Type a command or search \" />\n<CommandList>\n<CommandEmpty>No results found",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 571629,
      "relative_path": "documentation\\shadcn\\_docs_components_command.html",
      "source_type": "documentation"
    },
    "token_count": 326,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "727b893f7155b74936e7fab620c9a133",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_command.html",
    "source_type": "documentation",
    "title": "Command - shadcn/ui",
    "content": "OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonCommandCopy PagePreviousNextFast, composable, unstyled command menu for React Docs PreviewCodeNo results found SuggestionsCalendarSearch EmojiCalculatorSettingsProfile⌘PBilling⌘BSettings⌘SCopyimport { Calculator, Calendar, CreditCard, Settings, Smile, User, } from \"lucide-react\" import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList, CommandSeparator, CommandShortcut, } from \"@/components/ui/command\" export function CommandDemo() { return ( <Command className=\"rounded-lg border shadow-md md:min-w-[450px]\"> <CommandInput placeholder=\"Type a command or search \" /> <CommandList> <CommandEmpty>No results found</CommandEmpty>\n<CommandGroup heading=\"Suggestions\">\n<CommandItem>\n<Calendar />\n<span>Calendar</span>\n</CommandItem>\n<CommandItem>\n<Smile />\n<span>Search Emoji</span>\n</CommandItem>\n<CommandItem disabled>\n<Calculator />\n<span>Calculator</span>\n</CommandItem>\n</CommandGroup>\n<CommandSeparator />\n<CommandGroup heading=\"Settings\">\n<CommandItem>\n<User />\n<span>Profile</span>\n<CommandShortcut>⌘P</CommandShortcut>\n</CommandItem>\n<CommandItem>\n<CreditCard />\n<span>Billing</span>\n<CommandShortcut>⌘B</CommandShortcut>\n</CommandItem>\n<CommandItem>\n<Settings />\n<span>Settings</span>\n<CommandShortcut>⌘S</CommandShortcut>\n</CommandItem>\n</CommandGroup>\n</CommandList>\n</Command>\n)\n}\nAbout\nThe <Command /> component uses the cmdk component by pacocoursey Installation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add commandCopy\nUsage\nCopyimport {\nCommand,\nCommandDialog,\nCommandEmpty,\nCommandGroup,\nCommandInput,\nCommandItem,\nCommandList,\nCommandSeparator,\nCommandShortcut,\n} from \"@/components/ui/command\"\nCopy<Command>\n<CommandInput placeholder=\"Type a command or search",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 571629,
      "relative_path": "documentation\\shadcn\\_docs_components_command.html",
      "source_type": "documentation"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "dd67e5ecc78c4884405715445462337d",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_command.html",
    "source_type": "documentation",
    "title": "Command - shadcn/ui",
    "content": "<span>Search Emoji</span> </CommandItem> <CommandItem disabled> <Calculator /> <span>Calculator</span> </CommandItem> </CommandGroup> <CommandSeparator /> <CommandGroup heading=\"Settings\"> <CommandItem> <User /> <span>Profile</span> <CommandShortcut>⌘P</CommandShortcut> </CommandItem> <CommandItem> <CreditCard /> <span>Billing</span> <CommandShortcut>⌘B</CommandShortcut> </CommandItem> <CommandItem> <Settings /> <span>Settings</span> <CommandShortcut>⌘S</CommandShortcut> </CommandItem> </CommandGroup> </CommandList> </Command> ) } About The <Command /> component uses the cmdk component by pacocoursey Installation CLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add commandCopy Usage Copyimport { Command, CommandDialog, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList, CommandSeparator, CommandShortcut, } from \"@/components/ui/command\" Copy<Command> <CommandInput placeholder=\"Type a command or search\" />\n<CommandList>\n<CommandEmpty>No results found </CommandEmpty>\n<CommandGroup heading=\"Suggestions\">\n<CommandItem>Calendar</CommandItem>\n<CommandItem>Search Emoji</CommandItem>\n<CommandItem>Calculator</CommandItem>\n</CommandGroup>\n<CommandSeparator />\n<CommandGroup heading=\"Settings\">\n<CommandItem>Profile</CommandItem>\n<CommandItem>Billing</CommandItem>\n<CommandItem>Settings</CommandItem>\n</CommandGroup>\n</CommandList>\n</Command>\nExamples\nDialog\nPreviewCodePress ⌘JCommand PaletteSearch for a command to run Copy\"use client\"\nimport * as React from \"react\"\nimport {\nCalculator,\nCalendar,\nCreditCard,\nSettings,\nSmile,\nUser,\n} from \"lucide-react\"\nimport {\nCommandDialog,\nCommandEmpty,\nCommandGroup,\nCommandInput,\nCommandItem,\nCommandList,\nCommandSeparator,\nCommandShortcut,\n} from \"@/components/ui/command\"\nexport function CommandDialogDemo() {\nconst [open, setOpen] = React useState(false)\nReact useEffect(() => {\nconst down = (e: KeyboardEvent) => {\nif (e key === \"j\" && (e metaKey || e ctrlKey)) {\ne preventDefault()\nsetOpen((open) => open)\n}\n}\ndocument",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 571629,
      "relative_path": "documentation\\shadcn\\_docs_components_command.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "a6d83f516f3833d6eabc78254a3c6581",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_command.html",
    "source_type": "documentation",
    "title": "Command - shadcn/ui",
    "content": "command to run Copy\"use client\" import * as React from \"react\" import { Calculator, Calendar, CreditCard, Settings, Smile, User, } from \"lucide-react\" import { CommandDialog, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList, CommandSeparator, CommandShortcut, } from \"@/components/ui/command\" export function CommandDialogDemo() { const [open, setOpen] = React useState(false) React useEffect(() => { const down = (e: KeyboardEvent) => { if (e key === \"j\" && (e metaKey || e ctrlKey)) { e preventDefault() setOpen((open) => open) } } documentaddEventListener(\"keydown\", down)\nreturn () => document removeEventListener(\"keydown\", down)\n}, [])\nreturn (\n<>\n<p className=\"text-muted-foreground text-sm\">\nPress{\" \"}\n<kbd className=\"bg-muted text-muted-foreground pointer-events-none inline-flex h-5 items-center gap-1 rounded border px-1 5 font-mono text-[10px] font-medium opacity-100 select-none\">\n<span className=\"text-xs\">⌘</span>J\n</kbd>\n</p>\n<CommandDialog open={open} onOpenChange={setOpen}>\n<CommandInput placeholder=\"Type a command or search \" />\n<CommandList>\n<CommandEmpty>No results found </CommandEmpty>\n<CommandGroup heading=\"Suggestions\">\n<CommandItem>\n<Calendar />\n<span>Calendar</span>\n</CommandItem>\n<CommandItem>\n<Smile />\n<span>Search Emoji</span>\n</CommandItem>\n<CommandItem>\n<Calculator />\n<span>Calculator</span>\n</CommandItem>\n</CommandGroup>\n<CommandSeparator />\n<CommandGroup heading=\"Settings\">\n<CommandItem>\n<User />\n<span>Profile</span>\n<CommandShortcut>⌘P</CommandShortcut>\n</CommandItem>\n<CommandItem>\n<CreditCard />\n<span>Billing</span>\n<CommandShortcut>⌘B</CommandShortcut>\n</CommandItem>\n<CommandItem>\n<Settings />\n<span>Settings</span>\n<CommandShortcut>⌘S</CommandShortcut>\n</CommandItem>\n</CommandGroup>\n</CommandList>\n</CommandDialog>\n</>\n)\n}\nTo show the command menu in a dialog, use the <CommandDialog /> component components/example-command-menu tsxCopyexport function CommandMenu() {\nconst [open, setOpen] = React useState(false)\nReact",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 571629,
      "relative_path": "documentation\\shadcn\\_docs_components_command.html",
      "source_type": "documentation"
    },
    "token_count": 497,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "9f2350eed7c4e3d73fdc1b8d5cd5ea02",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_command.html",
    "source_type": "documentation",
    "title": "Command - shadcn/ui",
    "content": "<CommandEmpty>No results found </CommandEmpty> <CommandGroup heading=\"Suggestions\"> <CommandItem> <Calendar /> <span>Calendar</span> </CommandItem> <CommandItem> <Smile /> <span>Search Emoji</span> </CommandItem> <CommandItem> <Calculator /> <span>Calculator</span> </CommandItem> </CommandGroup> <CommandSeparator /> <CommandGroup heading=\"Settings\"> <CommandItem> <User /> <span>Profile</span> <CommandShortcut>⌘P</CommandShortcut> </CommandItem> <CommandItem> <CreditCard /> <span>Billing</span> <CommandShortcut>⌘B</CommandShortcut> </CommandItem> <CommandItem> <Settings /> <span>Settings</span> <CommandShortcut>⌘S</CommandShortcut> </CommandItem> </CommandGroup> </CommandList> </CommandDialog> </> ) } To show the command menu in a dialog, use the <CommandDialog /> component components/example-command-menu tsxCopyexport function CommandMenu() { const [open, setOpen] = React useState(false) ReactuseEffect(() => {\nconst down = (e: KeyboardEvent) => {\nif (e key === \"k\" && (e metaKey || e ctrlKey)) {\ne preventDefault()\nsetOpen((open) => open)\n}\n}\ndocument addEventListener(\"keydown\", down)\nreturn () => document removeEventListener(\"keydown\", down)\n}, [])\nreturn (\n<CommandDialog open={open} onOpenChange={setOpen}>\n<CommandInput placeholder=\"Type a command or search \" />\n<CommandList>\n<CommandEmpty>No results found </CommandEmpty>\n<CommandGroup heading=\"Suggestions\">\n<CommandItem>Calendar</CommandItem>\n<CommandItem>Search Emoji</CommandItem>\n<CommandItem>Calculator</CommandItem>\n</CommandGroup>\n</CommandList>\n</CommandDialog>\n)\n}\nCombobox\nYou can use the <Command /> component as a combobox See the Combobox page for more information ComboboxContext Menu On This PageAboutInstallationUsageExamplesDialogComboboxDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 571629,
      "relative_path": "documentation\\shadcn\\_docs_components_command.html",
      "source_type": "documentation"
    },
    "token_count": 495,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "4ff0df6e798b0635d9fbf329cc98aef6",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_context-menu.html",
    "source_type": "documentation",
    "title": "Context Menu - shadcn/ui",
    "content": "Context Menu - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonContext MenuCopy PagePreviousNextDisplays a menu to the user — such as a set of actions or functions — triggered by a button Docs API Reference PreviewCodeRight click hereCopyimport {\nContextMenu,\nContextMenuCheckboxItem,\nContextMenuContent,\nContextMenuItem,\nContextMenuLabel,\nContextMenuRadioGroup,\nContextMenuRadioItem,\nContextMenuSeparator,\nContextMenuShortcut,\nContextMenuSub,\nContextMenuSubContent,\nContextMenuSubTrigger,\nContextMenuTrigger,\n} from \"@/components/ui/context-menu\"\nexport function ContextMenuDemo() {\nreturn (\n<ContextMenu>\n<ContextMenuTrigger className=\"flex h-[150px] w-[300px] items-center justify-center rounded-md border border-dashed text-sm\">\nRight click here\n</ContextMenuTrigger>\n<ContextMenuContent className=\"w-52\">\n<ContextMenuItem inset>\nBack\n<ContextMenuShortcut>⌘[</ContextMenuShortcut>\n</ContextMenuItem>\n<ContextMenuItem inset disabled>\nForward\n<ContextMenuShortcut>⌘]</ContextMenuShortcut>\n</ContextMenuItem>\n<ContextMenuItem inset>\nReload\n<ContextMenuShortcut>⌘R</ContextMenuShortcut>\n</ContextMenuItem>\n<ContextMenuSub>\n<ContextMenuSubTrigger inset>More Tools</ContextMenuSubTrigger>\n<ContextMenuSubContent className=\"w-44\">\n<ContextMenuItem>Save Page </ContextMenuItem>\n<ContextMenuItem>Create Shortcut </ContextMenuItem>\n<ContextMenuItem>Name Window",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 487446,
      "relative_path": "documentation\\shadcn\\_docs_components_context-menu.html",
      "source_type": "documentation"
    },
    "token_count": 446,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "c4d4e1b45282ee621e11472a3b66af91",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_context-menu.html",
    "source_type": "documentation",
    "title": "Context Menu - shadcn/ui",
    "content": "Docs API Reference PreviewCodeRight click hereCopyimport { ContextMenu, ContextMenuCheckboxItem, ContextMenuContent, ContextMenuItem, ContextMenuLabel, ContextMenuRadioGroup, ContextMenuRadioItem, ContextMenuSeparator, ContextMenuShortcut, ContextMenuSub, ContextMenuSubContent, ContextMenuSubTrigger, ContextMenuTrigger, } from \"@/components/ui/context-menu\" export function ContextMenuDemo() { return ( <ContextMenu> <ContextMenuTrigger className=\"flex h-[150px] w-[300px] items-center justify-center rounded-md border border-dashed text-sm\"> Right click here </ContextMenuTrigger> <ContextMenuContent className=\"w-52\"> <ContextMenuItem inset> Back <ContextMenuShortcut>⌘[</ContextMenuShortcut> </ContextMenuItem> <ContextMenuItem inset disabled> Forward <ContextMenuShortcut>⌘]</ContextMenuShortcut> </ContextMenuItem> <ContextMenuItem inset> Reload <ContextMenuShortcut>⌘R</ContextMenuShortcut> </ContextMenuItem> <ContextMenuSub> <ContextMenuSubTrigger inset>More Tools</ContextMenuSubTrigger> <ContextMenuSubContent className=\"w-44\"> <ContextMenuItem>Save Page </ContextMenuItem> <ContextMenuItem>Create Shortcut </ContextMenuItem> <ContextMenuItem>Name Window</ContextMenuItem>\n<ContextMenuSeparator />\n<ContextMenuItem>Developer Tools</ContextMenuItem>\n<ContextMenuSeparator />\n<ContextMenuItem variant=\"destructive\">Delete</ContextMenuItem>\n</ContextMenuSubContent>\n</ContextMenuSub>\n<ContextMenuSeparator />\n<ContextMenuCheckboxItem checked>\nShow Bookmarks\n</ContextMenuCheckboxItem>\n<ContextMenuCheckboxItem>Show Full URLs</ContextMenuCheckboxItem>\n<ContextMenuSeparator />\n<ContextMenuRadioGroup value=\"pedro\">\n<ContextMenuLabel inset>People</ContextMenuLabel>\n<ContextMenuRadioItem value=\"pedro\">\nPedro Duarte\n</ContextMenuRadioItem>\n<ContextMenuRadioItem value=\"colm\">Colm Tuite</ContextMenuRadioItem>\n</ContextMenuRadioGroup>\n</ContextMenuContent>\n</ContextMenu>\n)\n}\nInstallation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add context-menuCopy\nUsage\nCopyimport {\nContextMenu,\nContextMenuContent,\nContextMenuItem,\nContextMenuTrigger,\n} from \"@/components/ui/context-menu\"\nCopy<ContextMenu>\n<ContextMenuTrigger>Right click</ContextMenuTrigger>\n<ContextMenuContent>\n<ContextMenuItem>Profile</ContextMenuItem>\n<ContextMenuItem>Billing</ContextMenuItem>\n<ContextMenuItem>Team</ContextMenuItem>\n<ContextMenuItem>Subscription</ContextMenuItem>\n</ContextMenuContent>\n</ContextMenu> CommandData Table On This PageInstallationUsageDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 487446,
      "relative_path": "documentation\\shadcn\\_docs_components_context-menu.html",
      "source_type": "documentation"
    },
    "token_count": 538,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "4c3ec7371862040ebb4da2ab7574d924",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_context-menu.html",
    "source_type": "documentation",
    "title": "Context Menu - shadcn/ui",
    "content": "/> <ContextMenuItem variant=\"destructive\">Delete</ContextMenuItem> </ContextMenuSubContent> </ContextMenuSub> <ContextMenuSeparator /> <ContextMenuCheckboxItem checked> Show Bookmarks </ContextMenuCheckboxItem> <ContextMenuCheckboxItem>Show Full URLs</ContextMenuCheckboxItem> <ContextMenuSeparator /> <ContextMenuRadioGroup value=\"pedro\"> <ContextMenuLabel inset>People</ContextMenuLabel> <ContextMenuRadioItem value=\"pedro\"> Pedro Duarte </ContextMenuRadioItem> <ContextMenuRadioItem value=\"colm\">Colm Tuite</ContextMenuRadioItem> </ContextMenuRadioGroup> </ContextMenuContent> </ContextMenu> ) } Installation CLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add context-menuCopy Usage Copyimport { ContextMenu, ContextMenuContent, ContextMenuItem, ContextMenuTrigger, } from \"@/components/ui/context-menu\" Copy<ContextMenu> <ContextMenuTrigger>Right click</ContextMenuTrigger> <ContextMenuContent> <ContextMenuItem>Profile</ContextMenuItem> <ContextMenuItem>Billing</ContextMenuItem> <ContextMenuItem>Team</ContextMenuItem> <ContextMenuItem>Subscription</ContextMenuItem> </ContextMenuContent> </ContextMenu> CommandData Table On This PageInstallationUsageDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and moreVercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 487446,
      "relative_path": "documentation\\shadcn\\_docs_components_context-menu.html",
      "source_type": "documentation"
    },
    "token_count": 303,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "d5bcfbab1497aea790e7d96d2b3644f9",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_combobox.html",
    "source_type": "documentation",
    "title": "Combobox - shadcn/ui",
    "content": "Combobox - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonComboboxCopy PagePreviousNextAutocomplete input and command palette with a list of suggestions PreviewCodeSelect framework Copy\"use client\"\nimport * as React from \"react\"\nimport { Check, ChevronsUpDown } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport {\nCommand,\nCommandEmpty,\nCommandGroup,\nCommandInput,\nCommandItem,\nCommandList,\n} from \"@/components/ui/command\"\nimport {\nPopover,\nPopoverContent,\nPopoverTrigger,\n} from \"@/components/ui/popover\"\nconst frameworks = [\n{\nvalue: \"next js\",\nlabel: \"Next js\",\n},\n{\nvalue: \"sveltekit\",\nlabel: \"SvelteKit\",\n},\n{\nvalue: \"nuxt js\",\nlabel: \"Nuxt js\",\n},\n{\nvalue: \"remix\",\nlabel: \"Remix\",\n},\n{\nvalue: \"astro\",\nlabel: \"Astro\",\n},\n]\nexport function ComboboxDemo() {\nconst [open, setOpen] = React useState(false)\nconst [value, setValue] = React useState(\"\")\nreturn (\n<Popover open={open} onOpenChange={setOpen}>\n<PopoverTrigger asChild>\n<Button\nvariant=\"outline\"\nrole=\"combobox\"\naria-expanded={open}\nclassName=\"w-[200px] justify-between\"\n>\n{value frameworks find((framework) => framework value === value) label\n: \"Select framework",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 801186,
      "relative_path": "documentation\\shadcn\\_docs_components_combobox.html",
      "source_type": "documentation"
    },
    "token_count": 465,
    "chunk_index": 0,
    "total_chunks": 15
  },
  {
    "id": "4079626dc5544cca975620a3974aa914",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_combobox.html",
    "source_type": "documentation",
    "title": "Combobox - shadcn/ui",
    "content": "value: \"next js\", label: \"Next js\", }, { value: \"sveltekit\", label: \"SvelteKit\", }, { value: \"nuxt js\", label: \"Nuxt js\", }, { value: \"remix\", label: \"Remix\", }, { value: \"astro\", label: \"Astro\", }, ] export function ComboboxDemo() { const [open, setOpen] = React useState(false) const [value, setValue] = React useState(\"\") return ( <Popover open={open} onOpenChange={setOpen}> <PopoverTrigger asChild> <Button variant=\"outline\" role=\"combobox\" aria-expanded={open} className=\"w-[200px] justify-between\" > {value frameworks find((framework) => framework value === value) label : \"Select framework\"}\n<ChevronsUpDown className=\"opacity-50\" />\n</Button>\n</PopoverTrigger>\n<PopoverContent className=\"w-[200px] p-0\">\n<Command>\n<CommandInput placeholder=\"Search framework \" className=\"h-9\" />\n<CommandList>\n<CommandEmpty>No framework found </CommandEmpty>\n<CommandGroup>\n{frameworks map((framework) => (\n<CommandItem\nkey={framework value}\nvalue={framework value}\nonSelect={(currentValue) => {\nsetValue(currentValue === value \"\" : currentValue)\nsetOpen(false)\n}}\n>\n{framework label}\n<Check\nclassName={cn(\n\"ml-auto\",\nvalue === framework value \"opacity-100\" : \"opacity-0\"\n)}\n/>\n</CommandItem>\n))}\n</CommandGroup>\n</CommandList>\n</Command>\n</PopoverContent>\n</Popover>\n)\n}\nInstallation\nThe Combobox is built using a composition of the <Popover /> and the <Command /> components See installation instructions for the Popover and the Command components Usage\nExpandcomponents/example-combobox tsxCopy\"use client\"\nimport * as React from \"react\"\nimport { CheckIcon, ChevronsUpDownIcon } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport {\nCommand,\nCommandEmpty,\nCommandGroup,\nCommandInput,\nCommandItem,\nCommandList,\n} from \"@/components/ui/command\"\nimport {\nPopover,\nPopoverContent,\nPopoverTrigger,\n} from \"@/components/ui/popover\"\nconst frameworks = [\n{\nvalue: \"next js\",\nlabel: \"Next",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 801186,
      "relative_path": "documentation\\shadcn\\_docs_components_combobox.html",
      "source_type": "documentation"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 15
  },
  {
    "id": "8c4804977e3f900aae3a6bfee82be535",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_combobox.html",
    "source_type": "documentation",
    "title": "Combobox - shadcn/ui",
    "content": "the <Popover /> and the <Command /> components See installation instructions for the Popover and the Command components Usage Expandcomponents/example-combobox tsxCopy\"use client\" import * as React from \"react\" import { CheckIcon, ChevronsUpDownIcon } from \"lucide-react\" import { cn } from \"@/lib/utils\" import { Button } from \"@/components/ui/button\" import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList, } from \"@/components/ui/command\" import { Popover, PopoverContent, PopoverTrigger, } from \"@/components/ui/popover\" const frameworks = [ { value: \"next js\", label: \"Nextjs\",\n},\n{\nvalue: \"sveltekit\",\nlabel: \"SvelteKit\",\n},\n{\nvalue: \"nuxt js\",\nlabel: \"Nuxt js\",\n},\n{\nvalue: \"remix\",\nlabel: \"Remix\",\n},\n{\nvalue: \"astro\",\nlabel: \"Astro\",\n},\n]\nexport function ExampleCombobox() {\nconst [open, setOpen] = React useState(false)\nconst [value, setValue] = React useState(\"\")\nreturn (\n<Popover open={open} onOpenChange={setOpen}>\n<PopoverTrigger asChild>\n<Button\nvariant=\"outline\"\nrole=\"combobox\"\naria-expanded={open}\nclassName=\"w-[200px] justify-between\"\n>\n{value frameworks find((framework) => framework value === value) label\n: \"Select framework \"}\n<ChevronsUpDownIcon className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n</Button>\n</PopoverTrigger>\n<PopoverContent className=\"w-[200px] p-0\">\n<Command>\n<CommandInput placeholder=\"Search framework \" />\n<CommandList>\n<CommandEmpty>No framework found </CommandEmpty>\n<CommandGroup>\n{frameworks map((framework) => (\n<CommandItem\nkey={framework value}\nvalue={framework value}\nonSelect={(currentValue) => {\nsetValue(currentValue === value \"\" : currentValue)\nsetOpen(false)\n}}\n>\n<CheckIcon\nclassName={cn(\n\"mr-2 h-4 w-4\",\nvalue === framework value \"opacity-100\" : \"opacity-0\"\n)}\n/>\n{framework label}\n</CommandItem>\n))}\n</CommandGroup>\n</CommandList>\n</Command>\n</PopoverContent>\n</Popover>\n)\n}Expand\nExamples\nCombobox\nPreviewCodeSelect framework",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 801186,
      "relative_path": "documentation\\shadcn\\_docs_components_combobox.html",
      "source_type": "documentation"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 15
  },
  {
    "id": "437d6875f4ce69978e29f1fa0dd26a60",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_combobox.html",
    "source_type": "documentation",
    "title": "Combobox - shadcn/ui",
    "content": "framework \"} <ChevronsUpDownIcon className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" /> </Button> </PopoverTrigger> <PopoverContent className=\"w-[200px] p-0\"> <Command> <CommandInput placeholder=\"Search framework \" /> <CommandList> <CommandEmpty>No framework found </CommandEmpty> <CommandGroup> {frameworks map((framework) => ( <CommandItem key={framework value} value={framework value} onSelect={(currentValue) => { setValue(currentValue === value \"\" : currentValue) setOpen(false) }} > <CheckIcon className={cn( \"mr-2 h-4 w-4\", value === framework value \"opacity-100\" : \"opacity-0\" )} /> {framework label} </CommandItem> ))} </CommandGroup> </CommandList> </Command> </PopoverContent> </Popover> ) }Expand Examples Combobox PreviewCodeSelect frameworkCopy\"use client\"\nimport * as React from \"react\"\nimport { Check, ChevronsUpDown } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport {\nCommand,\nCommandEmpty,\nCommandGroup,\nCommandInput,\nCommandItem,\nCommandList,\n} from \"@/components/ui/command\"\nimport {\nPopover,\nPopoverContent,\nPopoverTrigger,\n} from \"@/components/ui/popover\"\nconst frameworks = [\n{\nvalue: \"next js\",\nlabel: \"Next js\",\n},\n{\nvalue: \"sveltekit\",\nlabel: \"SvelteKit\",\n},\n{\nvalue: \"nuxt js\",\nlabel: \"Nuxt js\",\n},\n{\nvalue: \"remix\",\nlabel: \"Remix\",\n},\n{\nvalue: \"astro\",\nlabel: \"Astro\",\n},\n]\nexport function ComboboxDemo() {\nconst [open, setOpen] = React useState(false)\nconst [value, setValue] = React useState(\"\")\nreturn (\n<Popover open={open} onOpenChange={setOpen}>\n<PopoverTrigger asChild>\n<Button\nvariant=\"outline\"\nrole=\"combobox\"\naria-expanded={open}\nclassName=\"w-[200px] justify-between\"\n>\n{value frameworks find((framework) => framework value === value) label\n: \"Select framework",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 801186,
      "relative_path": "documentation\\shadcn\\_docs_components_combobox.html",
      "source_type": "documentation"
    },
    "token_count": 459,
    "chunk_index": 3,
    "total_chunks": 15
  },
  {
    "id": "ebf53cae5b061bf9ddb6b717d457735e",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_combobox.html",
    "source_type": "documentation",
    "title": "Combobox - shadcn/ui",
    "content": "value: \"next js\", label: \"Next js\", }, { value: \"sveltekit\", label: \"SvelteKit\", }, { value: \"nuxt js\", label: \"Nuxt js\", }, { value: \"remix\", label: \"Remix\", }, { value: \"astro\", label: \"Astro\", }, ] export function ComboboxDemo() { const [open, setOpen] = React useState(false) const [value, setValue] = React useState(\"\") return ( <Popover open={open} onOpenChange={setOpen}> <PopoverTrigger asChild> <Button variant=\"outline\" role=\"combobox\" aria-expanded={open} className=\"w-[200px] justify-between\" > {value frameworks find((framework) => framework value === value) label : \"Select framework\"}\n<ChevronsUpDown className=\"opacity-50\" />\n</Button>\n</PopoverTrigger>\n<PopoverContent className=\"w-[200px] p-0\">\n<Command>\n<CommandInput placeholder=\"Search framework \" className=\"h-9\" />\n<CommandList>\n<CommandEmpty>No framework found </CommandEmpty>\n<CommandGroup>\n{frameworks map((framework) => (\n<CommandItem\nkey={framework value}\nvalue={framework value}\nonSelect={(currentValue) => {\nsetValue(currentValue === value \"\" : currentValue)\nsetOpen(false)\n}}\n>\n{framework label}\n<Check\nclassName={cn(\n\"ml-auto\",\nvalue === framework value",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 801186,
      "relative_path": "documentation\\shadcn\\_docs_components_combobox.html",
      "source_type": "documentation"
    },
    "token_count": 301,
    "chunk_index": 4,
    "total_chunks": 15
  },
  {
    "id": "6c6c9c71d07c7a83170be3c08592234d",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_combobox.html",
    "source_type": "documentation",
    "title": "Combobox - shadcn/ui",
    "content": "( <Popover open={open} onOpenChange={setOpen}> <PopoverTrigger asChild> <Button variant=\"outline\" role=\"combobox\" aria-expanded={open} className=\"w-[200px] justify-between\" > {value frameworks find((framework) => framework value === value) label : \"Select framework\"} <ChevronsUpDown className=\"opacity-50\" /> </Button> </PopoverTrigger> <PopoverContent className=\"w-[200px] p-0\"> <Command> <CommandInput placeholder=\"Search framework \" className=\"h-9\" /> <CommandList> <CommandEmpty>No framework found </CommandEmpty> <CommandGroup> {frameworks map((framework) => ( <CommandItem key={framework value} value={framework value} onSelect={(currentValue) => { setValue(currentValue === value \"\" : currentValue) setOpen(false) }} > {framework label} <Check className={cn( \"ml-auto\", value === framework value\"opacity-100\" : \"opacity-0\"\n)}\n/>\n</CommandItem>\n))}\n</CommandGroup>\n</CommandList>\n</Command>\n</PopoverContent>\n</Popover>\n)\n}\nPopover\nPreviewCodeStatus+ Set statusCopy\"use client\"\nimport * as React from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport {\nCommand,\nCommandEmpty,\nCommandGroup,\nCommandInput,\nCommandItem,\nCommandList,\n} from \"@/components/ui/command\"\nimport {\nPopover,\nPopoverContent,\nPopoverTrigger,\n} from \"@/components/ui/popover\"\ntype Status = {\nvalue: string\nlabel: string\n}\nconst statuses: Status[] = [\n{\nvalue: \"backlog\",\nlabel: \"Backlog\",\n},\n{\nvalue: \"todo\",\nlabel: \"Todo\",\n},\n{\nvalue: \"in progress\",\nlabel: \"In Progress\",\n},\n{\nvalue: \"done\",\nlabel: \"Done\",\n},\n{\nvalue: \"canceled\",\nlabel: \"Canceled\",\n},\n]\nexport function ComboboxPopover() {\nconst [open, setOpen] = React useState(false)\nconst [selectedStatus, setSelectedStatus] = React useState<Status | null>(\nnull\n)\nreturn (\n<div className=\"flex items-center space-x-4\">\n<p className=\"text-muted-foreground text-sm\">Status</p>\n<Popover open={open} onOpenChange={setOpen}>\n<PopoverTrigger asChild>\n<Button variant=\"outline\" className=\"w-[150px] justify-start\">\n{selectedStatus <>{selectedStatus",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 801186,
      "relative_path": "documentation\\shadcn\\_docs_components_combobox.html",
      "source_type": "documentation"
    },
    "token_count": 499,
    "chunk_index": 5,
    "total_chunks": 15
  },
  {
    "id": "ab627130509d52c705a8c269296dfe78",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_combobox.html",
    "source_type": "documentation",
    "title": "Combobox - shadcn/ui",
    "content": "Status[] = [ { value: \"backlog\", label: \"Backlog\", }, { value: \"todo\", label: \"Todo\", }, { value: \"in progress\", label: \"In Progress\", }, { value: \"done\", label: \"Done\", }, { value: \"canceled\", label: \"Canceled\", }, ] export function ComboboxPopover() { const [open, setOpen] = React useState(false) const [selectedStatus, setSelectedStatus] = React useState<Status | null>( null ) return ( <div className=\"flex items-center space-x-4\"> <p className=\"text-muted-foreground text-sm\">Status</p> <Popover open={open} onOpenChange={setOpen}> <PopoverTrigger asChild> <Button variant=\"outline\" className=\"w-[150px] justify-start\"> {selectedStatus <>{selectedStatuslabel}</> : <>+ Set status</>}\n</Button>\n</PopoverTrigger>\n<PopoverContent className=\"p-0\" side=\"right\" align=\"start\">\n<Command>\n<CommandInput placeholder=\"Change status \" />\n<CommandList>\n<CommandEmpty>No results found </CommandEmpty>\n<CommandGroup>\n{statuses map((status) => (\n<CommandItem\nkey={status value}\nvalue={status value}\nonSelect={(value) => {\nsetSelectedStatus(\nstatuses find((priority) => priority value === value) ||\nnull\n)\nsetOpen(false)\n}}\n>\n{status label}\n</CommandItem>\n))}\n</CommandGroup>\n</CommandList>\n</Command>\n</PopoverContent>\n</Popover>\n</div>\n)\n}\nDropdown menu\nPreviewCodefeatureCreate a new projectCopy\"use client\"\nimport * as React from \"react\"\nimport { MoreHorizontal } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport {\nCommand,\nCommandEmpty,\nCommandGroup,\nCommandInput,\nCommandItem,\nCommandList,\n} from \"@/components/ui/command\"\nimport {\nDropdownMenu,\nDropdownMenuContent,\nDropdownMenuGroup,\nDropdownMenuItem,\nDropdownMenuLabel,\nDropdownMenuSeparator,\nDropdownMenuShortcut,\nDropdownMenuSub,\nDropdownMenuSubContent,\nDropdownMenuSubTrigger,\nDropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nconst labels = [\n\"feature\",\n\"bug\",\n\"enhancement\",\n\"documentation\",\n\"design\",\n\"question\",\n\"maintenance\",\n]\nexport function ComboboxDropdownMenu() {\nconst [label, setLabel] = React",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 801186,
      "relative_path": "documentation\\shadcn\\_docs_components_combobox.html",
      "source_type": "documentation"
    },
    "token_count": 496,
    "chunk_index": 6,
    "total_chunks": 15
  },
  {
    "id": "6bdcb95ffe1d1214bb36686f22b0a3ea",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_combobox.html",
    "source_type": "documentation",
    "title": "Combobox - shadcn/ui",
    "content": "</div> ) } Dropdown menu PreviewCodefeatureCreate a new projectCopy\"use client\" import * as React from \"react\" import { MoreHorizontal } from \"lucide-react\" import { Button } from \"@/components/ui/button\" import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList, } from \"@/components/ui/command\" import { DropdownMenu, DropdownMenuContent, DropdownMenuGroup, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuShortcut, DropdownMenuSub, DropdownMenuSubContent, DropdownMenuSubTrigger, DropdownMenuTrigger, } from \"@/components/ui/dropdown-menu\" const labels = [ \"feature\", \"bug\", \"enhancement\", \"documentation\", \"design\", \"question\", \"maintenance\", ] export function ComboboxDropdownMenu() { const [label, setLabel] = ReactuseState(\"feature\")\nconst [open, setOpen] = React useState(false)\nreturn (\n<div className=\"flex w-full flex-col items-start justify-between rounded-md border px-4 py-3 sm:flex-row sm:items-center\">\n<p className=\"text-sm leading-none font-medium\">\n<span className=\"bg-primary text-primary-foreground mr-2 rounded-lg px-2 py-1 text-xs\">\n{label}\n</span>\n<span className=\"text-muted-foreground\">Create a new project</span>\n</p>\n<DropdownMenu open={open} onOpenChange={setOpen}>\n<DropdownMenuTrigger asChild>\n<Button variant=\"ghost\" size=\"sm\">\n<MoreHorizontal />\n</Button>\n</DropdownMenuTrigger>\n<DropdownMenuContent align=\"end\" className=\"w-[200px]\">\n<DropdownMenuLabel>Actions</DropdownMenuLabel>\n<DropdownMenuGroup>\n<DropdownMenuItem>Assign to </DropdownMenuItem>\n<DropdownMenuItem>Set due date </DropdownMenuItem>\n<DropdownMenuSeparator />\n<DropdownMenuSub>\n<DropdownMenuSubTrigger>Apply label</DropdownMenuSubTrigger>\n<DropdownMenuSubContent className=\"p-0\">\n<Command>\n<CommandInput\nplaceholder=\"Filter label \"\nautoFocus={true}\nclassName=\"h-9\"\n/>\n<CommandList>\n<CommandEmpty>No label found </CommandEmpty>\n<CommandGroup>\n{labels",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 801186,
      "relative_path": "documentation\\shadcn\\_docs_components_combobox.html",
      "source_type": "documentation"
    },
    "token_count": 450,
    "chunk_index": 7,
    "total_chunks": 15
  },
  {
    "id": "aca8d71cb743a61ed0c61aa7462f22a2",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_combobox.html",
    "source_type": "documentation",
    "title": "Combobox - shadcn/ui",
    "content": "w-full flex-col items-start justify-between rounded-md border px-4 py-3 sm:flex-row sm:items-center\"> <p className=\"text-sm leading-none font-medium\"> <span className=\"bg-primary text-primary-foreground mr-2 rounded-lg px-2 py-1 text-xs\"> {label} </span> <span className=\"text-muted-foreground\">Create a new project</span> </p> <DropdownMenu open={open} onOpenChange={setOpen}> <DropdownMenuTrigger asChild> <Button variant=\"ghost\" size=\"sm\"> <MoreHorizontal /> </Button> </DropdownMenuTrigger> <DropdownMenuContent align=\"end\" className=\"w-[200px]\"> <DropdownMenuLabel>Actions</DropdownMenuLabel> <DropdownMenuGroup> <DropdownMenuItem>Assign to </DropdownMenuItem> <DropdownMenuItem>Set due date </DropdownMenuItem> <DropdownMenuSeparator /> <DropdownMenuSub> <DropdownMenuSubTrigger>Apply label</DropdownMenuSubTrigger> <DropdownMenuSubContent className=\"p-0\"> <Command> <CommandInput placeholder=\"Filter label \" autoFocus={true} className=\"h-9\" /> <CommandList> <CommandEmpty>No label found </CommandEmpty> <CommandGroup> {labelsmap((label) => (\n<CommandItem\nkey={label}\nvalue={label}\nonSelect={(value) => {\nsetLabel(value)\nsetOpen(false)\n}}\n>\n{label}\n</CommandItem>\n))}\n</CommandGroup>\n</CommandList>\n</Command>\n</DropdownMenuSubContent>\n</DropdownMenuSub>\n<DropdownMenuSeparator />\n<DropdownMenuItem className=\"text-red-600\">\nDelete\n<DropdownMenuShortcut>⌘⌫</DropdownMenuShortcut>\n</DropdownMenuItem>\n</DropdownMenuGroup>\n</DropdownMenuContent>\n</DropdownMenu>\n</div>\n)\n}\nResponsive\nYou can create a responsive combobox by using the <Popover /> on desktop and the <Drawer /> components on mobile",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 801186,
      "relative_path": "documentation\\shadcn\\_docs_components_combobox.html",
      "source_type": "documentation"
    },
    "token_count": 403,
    "chunk_index": 8,
    "total_chunks": 15
  },
  {
    "id": "038103cbf9700c850f348ffba5b95c6a",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_combobox.html",
    "source_type": "documentation",
    "title": "Combobox - shadcn/ui",
    "content": "<DropdownMenuSeparator /> <DropdownMenuSub> <DropdownMenuSubTrigger>Apply label</DropdownMenuSubTrigger> <DropdownMenuSubContent className=\"p-0\"> <Command> <CommandInput placeholder=\"Filter label \" autoFocus={true} className=\"h-9\" /> <CommandList> <CommandEmpty>No label found </CommandEmpty> <CommandGroup> {labelsmap((label) => ( <CommandItem key={label} value={label} onSelect={(value) => { setLabel(value) setOpen(false) }} > {label} </CommandItem> ))} </CommandGroup> </CommandList> </Command> </DropdownMenuSubContent> </DropdownMenuSub> <DropdownMenuSeparator /> <DropdownMenuItem className=\"text-red-600\"> Delete <DropdownMenuShortcut>⌘⌫</DropdownMenuShortcut> </DropdownMenuItem> </DropdownMenuGroup> </DropdownMenuContent> </DropdownMenu> </div> ) } Responsive You can create a responsive combobox by using the <Popover /> on desktop and the <Drawer /> components on mobilePreviewCode+ Set statusCopy\"use client\"\nimport * as React from \"react\"\nimport { useMediaQuery } from \"@/hooks/use-media-query\"\nimport { Button } from \"@/components/ui/button\"\nimport {\nCommand,\nCommandEmpty,\nCommandGroup,\nCommandInput,\nCommandItem,\nCommandList,\n} from \"@/components/ui/command\"\nimport {\nDrawer,\nDrawerContent,\nDrawerTrigger,\n} from \"@/components/ui/drawer\"\nimport {\nPopover,\nPopoverContent,\nPopoverTrigger,\n} from \"@/components/ui/popover\"\ntype Status = {\nvalue: string\nlabel: string\n}\nconst statuses: Status[] = [\n{\nvalue: \"backlog\",\nlabel: \"Backlog\",\n},\n{\nvalue: \"todo\",\nlabel: \"Todo\",\n},\n{\nvalue: \"in progress\",\nlabel: \"In Progress\",\n},\n{\nvalue: \"done\",\nlabel: \"Done\",\n},\n{\nvalue: \"canceled\",\nlabel: \"Canceled\",\n},\n]\nexport function ComboBoxResponsive() {\nconst [open, setOpen] = React useState(false)\nconst isDesktop = useMediaQuery(\"(min-width: 768px)\")\nconst [selectedStatus, setSelectedStatus] = React",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 801186,
      "relative_path": "documentation\\shadcn\\_docs_components_combobox.html",
      "source_type": "documentation"
    },
    "token_count": 449,
    "chunk_index": 9,
    "total_chunks": 15
  },
  {
    "id": "88d9ac9cc2e1cc50e54c09ae043d66a9",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_combobox.html",
    "source_type": "documentation",
    "title": "Combobox - shadcn/ui",
    "content": "\"@/components/ui/drawer\" import { Popover, PopoverContent, PopoverTrigger, } from \"@/components/ui/popover\" type Status = { value: string label: string } const statuses: Status[] = [ { value: \"backlog\", label: \"Backlog\", }, { value: \"todo\", label: \"Todo\", }, { value: \"in progress\", label: \"In Progress\", }, { value: \"done\", label: \"Done\", }, { value: \"canceled\", label: \"Canceled\", }, ] export function ComboBoxResponsive() { const [open, setOpen] = React useState(false) const isDesktop = useMediaQuery(\"(min-width: 768px)\") const [selectedStatus, setSelectedStatus] = ReactuseState<Status | null>(\nnull\n)\nif (isDesktop) {\nreturn (\n<Popover open={open} onOpenChange={setOpen}>\n<PopoverTrigger asChild>\n<Button variant=\"outline\" className=\"w-[150px] justify-start\">\n{selectedStatus <>{selectedStatus label}</> : <>+ Set status</>}\n</Button>\n</PopoverTrigger>\n<PopoverContent className=\"w-[200px] p-0\" align=\"start\">\n<StatusList setOpen={setOpen} setSelectedStatus={setSelectedStatus} />\n</PopoverContent>\n</Popover>\n)\n}\nreturn (\n<Drawer open={open} onOpenChange={setOpen}>\n<DrawerTrigger asChild>\n<Button variant=\"outline\" className=\"w-[150px] justify-start\">\n{selectedStatus <>{selectedStatus label}</> : <>+ Set status</>}\n</Button>\n</DrawerTrigger>\n<DrawerContent>\n<div className=\"mt-4 border-t\">\n<StatusList setOpen={setOpen} setSelectedStatus={setSelectedStatus} />\n</div>\n</DrawerContent>\n</Drawer>\n)\n}\nfunction StatusList({\nsetOpen,\nsetSelectedStatus,\n}: {\nsetOpen: (open: boolean) => void\nsetSelectedStatus: (status: Status | null) => void\n}) {\nreturn (\n<Command>\n<CommandInput placeholder=\"Filter status \" />\n<CommandList>\n<CommandEmpty>No results found </CommandEmpty>\n<CommandGroup>\n{statuses map((status) => (\n<CommandItem\nkey={status value}\nvalue={status value}\nonSelect={(value) => {\nsetSelectedStatus(\nstatuses find((priority) => priority",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 801186,
      "relative_path": "documentation\\shadcn\\_docs_components_combobox.html",
      "source_type": "documentation"
    },
    "token_count": 485,
    "chunk_index": 10,
    "total_chunks": 15
  },
  {
    "id": "e6d0e273796ec6668d4b3245c04da4c2",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_combobox.html",
    "source_type": "documentation",
    "title": "Combobox - shadcn/ui",
    "content": "variant=\"outline\" className=\"w-[150px] justify-start\"> {selectedStatus <>{selectedStatus label}</> : <>+ Set status</>} </Button> </DrawerTrigger> <DrawerContent> <div className=\"mt-4 border-t\"> <StatusList setOpen={setOpen} setSelectedStatus={setSelectedStatus} /> </div> </DrawerContent> </Drawer> ) } function StatusList({ setOpen, setSelectedStatus, }: { setOpen: (open: boolean) => void setSelectedStatus: (status: Status | null) => void }) { return ( <Command> <CommandInput placeholder=\"Filter status \" /> <CommandList> <CommandEmpty>No results found </CommandEmpty> <CommandGroup> {statuses map((status) => ( <CommandItem key={status value} value={status value} onSelect={(value) => { setSelectedStatus( statuses find((priority) => priorityvalue === value) || null\n)\nsetOpen(false)\n}}\n>\n{status label}\n</CommandItem>\n))}\n</CommandGroup>\n</CommandList>\n</Command>\n)\n}\nForm\nPreviewCodeLanguageSelect languageThis is the language that will be used in the dashboard",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 801186,
      "relative_path": "documentation\\shadcn\\_docs_components_combobox.html",
      "source_type": "documentation"
    },
    "token_count": 237,
    "chunk_index": 11,
    "total_chunks": 15
  },
  {
    "id": "72d49ea0143c2af558a06b30ce8b6556",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_combobox.html",
    "source_type": "documentation",
    "title": "Combobox - shadcn/ui",
    "content": "{ setOpen: (open: boolean) => void setSelectedStatus: (status: Status | null) => void }) { return ( <Command> <CommandInput placeholder=\"Filter status \" /> <CommandList> <CommandEmpty>No results found </CommandEmpty> <CommandGroup> {statuses map((status) => ( <CommandItem key={status value} value={status value} onSelect={(value) => { setSelectedStatus( statuses find((priority) => priorityvalue === value) || null ) setOpen(false) }} > {status label} </CommandItem> ))} </CommandGroup> </CommandList> </Command> ) } Form PreviewCodeLanguageSelect languageThis is the language that will be used in the dashboardSubmitCopy\"use client\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { Check, ChevronsUpDown } from \"lucide-react\"\nimport { useForm } from \"react-hook-form\"\nimport { toast } from \"sonner\"\nimport { z } from \"zod\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport {\nCommand,\nCommandEmpty,\nCommandGroup,\nCommandInput,\nCommandItem,\nCommandList,\n} from \"@/components/ui/command\"\nimport {\nForm,\nFormControl,\nFormDescription,\nFormField,\nFormItem,\nFormLabel,\nFormMessage,\n} from \"@/components/ui/form\"\nimport {\nPopover,\nPopoverContent,\nPopoverTrigger,\n} from \"@/components/ui/popover\"\nconst languages = [\n{ label: \"English\", value: \"en\" },\n{ label: \"French\", value: \"fr\" },\n{ label: \"German\", value: \"de\" },\n{ label: \"Spanish\", value: \"es\" },\n{ label: \"Portuguese\", value: \"pt\" },\n{ label: \"Russian\", value: \"ru\" },\n{ label: \"Japanese\", value: \"ja\" },\n{ label: \"Korean\", value: \"ko\" },\n{ label: \"Chinese\", value: \"zh\" },\n] as const\nconst FormSchema = z object({\nlanguage: z string({\nrequired_error: \"Please select a language \",\n}),\n})\nexport function ComboboxForm() {\nconst form = useForm<z infer<typeof FormSchema>>({\nresolver: zodResolver(FormSchema),\n})\nfunction onSubmit(data: z",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 801186,
      "relative_path": "documentation\\shadcn\\_docs_components_combobox.html",
      "source_type": "documentation"
    },
    "token_count": 473,
    "chunk_index": 12,
    "total_chunks": 15
  },
  {
    "id": "1f43440d5378d3433c7c0be24b75f8d8",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_combobox.html",
    "source_type": "documentation",
    "title": "Combobox - shadcn/ui",
    "content": "label: \"German\", value: \"de\" }, { label: \"Spanish\", value: \"es\" }, { label: \"Portuguese\", value: \"pt\" }, { label: \"Russian\", value: \"ru\" }, { label: \"Japanese\", value: \"ja\" }, { label: \"Korean\", value: \"ko\" }, { label: \"Chinese\", value: \"zh\" }, ] as const const FormSchema = z object({ language: z string({ required_error: \"Please select a language \", }), }) export function ComboboxForm() { const form = useForm<z infer<typeof FormSchema>>({ resolver: zodResolver(FormSchema), }) function onSubmit(data: zinfer<typeof FormSchema>) {\ntoast(\"You submitted the following values\", {\ndescription: (\n<pre className=\"mt-2 w-[320px] rounded-md bg-neutral-950 p-4\">\n<code className=\"text-white\">{JSON stringify(data, null, 2)}</code>\n</pre>\n),\n})\n}\nreturn (\n<Form { form}>\n<form onSubmit={form handleSubmit(onSubmit)} className=\"space-y-6\">\n<FormField\ncontrol={form control}\nname=\"language\"\nrender={({ field }) => (\n<FormItem className=\"flex flex-col\">\n<FormLabel>Language</FormLabel>\n<Popover>\n<PopoverTrigger asChild>\n<FormControl>\n<Button\nvariant=\"outline\"\nrole=\"combobox\"\nclassName={cn(\n\"w-[200px] justify-between\", field value && \"text-muted-foreground\"\n)}\n>\n{field value languages find(\n(language) => language value === field value\n) label\n: \"Select language\"}\n<ChevronsUpDown className=\"opacity-50\" />\n</Button>\n</FormControl>\n</PopoverTrigger>\n<PopoverContent className=\"w-[200px] p-0\">\n<Command>\n<CommandInput\nplaceholder=\"Search framework \"\nclassName=\"h-9\"\n/>\n<CommandList>\n<CommandEmpty>No framework found </CommandEmpty>\n<CommandGroup>\n{languages map((language) => (\n<CommandItem\nvalue={language label}\nkey={language value}\nonSelect={() => {\nform setValue(\"language\", language value)\n}}\n>\n{language label}\n<Check\nclassName={cn(\n\"ml-auto\",\nlanguage value === field value",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 801186,
      "relative_path": "documentation\\shadcn\\_docs_components_combobox.html",
      "source_type": "documentation"
    },
    "token_count": 461,
    "chunk_index": 13,
    "total_chunks": 15
  },
  {
    "id": "e00e54bb1d89592930a626c24a18c07f",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_combobox.html",
    "source_type": "documentation",
    "title": "Combobox - shadcn/ui",
    "content": "role=\"combobox\" className={cn( \"w-[200px] justify-between\", field value && \"text-muted-foreground\" )} > {field value languages find( (language) => language value === field value ) label : \"Select language\"} <ChevronsUpDown className=\"opacity-50\" /> </Button> </FormControl> </PopoverTrigger> <PopoverContent className=\"w-[200px] p-0\"> <Command> <CommandInput placeholder=\"Search framework \" className=\"h-9\" /> <CommandList> <CommandEmpty>No framework found </CommandEmpty> <CommandGroup> {languages map((language) => ( <CommandItem value={language label} key={language value} onSelect={() => { form setValue(\"language\", language value) }} > {language label} <Check className={cn( \"ml-auto\", language value === field value\"opacity-100\"\n: \"opacity-0\"\n)}\n/>\n</CommandItem>\n))}\n</CommandGroup>\n</CommandList>\n</Command>\n</PopoverContent>\n</Popover>\n<FormDescription>\nThis is the language that will be used in the dashboard </FormDescription>\n<FormMessage />\n</FormItem>\n)}\n/>\n<Button type=\"submit\">Submit</Button>\n</form>\n</Form>\n)\n}\nCollapsibleCommand On This PageInstallationUsageExamplesComboboxPopoverDropdown menuResponsiveFormDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 801186,
      "relative_path": "documentation\\shadcn\\_docs_components_combobox.html",
      "source_type": "documentation"
    },
    "token_count": 334,
    "chunk_index": 14,
    "total_chunks": 15
  },
  {
    "id": "adfbf374908593f1f372f833531c3733",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_chart.html",
    "source_type": "documentation",
    "title": "Chart - shadcn/ui",
    "content": "Chart - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonChartCopy PagePreviousNextBeautiful charts Built using Recharts Copy and paste into your apps Note: We're working on upgrading to Recharts v3 In the meantime, if you'd like to start testing v3, see the code in the comment here We'll have an official release soon",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1407472,
      "relative_path": "documentation\\shadcn\\_docs_components_chart.html",
      "source_type": "documentation"
    },
    "token_count": 236,
    "chunk_index": 0,
    "total_chunks": 28
  },
  {
    "id": "f93b7378bc99c32f3fdf3eef7397b1fa",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_chart.html",
    "source_type": "documentation",
    "title": "Chart - shadcn/ui",
    "content": "layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonChartCopy PagePreviousNextBeautiful charts Built using Recharts Copy and paste into your apps Note: We're working on upgrading to Recharts v3 In the meantime, if you'd like to start testing v3, see the code in the comment here We'll have an official release soonBar Chart - InteractiveShowing total visitors for the last 3 monthsDesktop24,828Mobile25,010Copy\"use client\"\nimport * as React from \"react\"\nimport { Bar, BarChart, CartesianGrid, XAxis } from \"recharts\"\nimport {\nCard,\nCardContent,\nCardDescription,\nCardHeader,\nCardTitle,\n} from \"@/components/ui/card\"\nimport {\nChartConfig,\nChartContainer,\nChartTooltip,\nChartTooltipContent,\n} from \"@/components/ui/chart\"\nexport const description = \"An interactive bar chart\"\nconst chartData = [\n{ date: \"2024-04-01\", desktop: 222, mobile: 150 },\n{ date: \"2024-04-02\", desktop: 97, mobile: 180 },\n{ date: \"2024-04-03\", desktop: 167, mobile: 120 },\n{ date: \"2024-04-04\", desktop: 242, mobile: 260 },\n{ date: \"2024-04-05\", desktop: 373, mobile: 290 },\n{ date: \"2024-04-06\", desktop: 301, mobile: 340 },\n{ date: \"2024-04-07\", desktop: 245, mobile: 180 },\n{ date: \"2024-04-08\", desktop: 409, mobile: 320 },\n{ date: \"2024-04-09\", desktop: 59, mobile: 110 },\n{ date: \"2024-04-10\", desktop: 261, mobile: 190 },\n{ date: \"2024-04-11\", desktop: 327, mobile: 350 },\n{ date: \"2024-04-12\", desktop: 292, mobile: 210 },\n{ date: \"2024-04-13\", desktop: 342, mobile: 380 },\n{ date: \"2024-04-14\", desktop: 137, mobile: 220 },\n{ date: \"2024-04-15\", desktop: 120, mobile: 170 },\n{ date: \"2024-04-16\", desktop: 138, mobile: 190 },\n{ date: \"2024-04-17\", desktop: 446, mobile: 360 },\n{ date: \"2024-04-18\", desktop: 364, mobile: 410 },\n{ date: \"2024-04-19\", desktop: 243, mobile: 180 },\n{ date: \"2024-04-20\", desktop: 89, mobile: 150 },\n{ date: \"2024-04-21\", desktop: 137, mobile: 200 },\n{ date: \"2024-04-22\", desktop: 224, mobile: 170 },\n{ date: \"2024-04-23\", desktop: 138, mobile: 230 },\n{ date: \"2024-04-24\", desktop: 387, mobile: 290 },\n{ date: \"2024-04-25\", desktop: 215, mobile: 250 },\n{ date: \"2024-04-26\", desktop: 75, mobile: 130 },\n{ date: \"2024-04-27\", desktop: 383, mobile: 420 },\n{ date: \"2024-04-28\", desktop: 122, mobile: 180 },\n{ date: \"2024-04-29\", desktop: 315, mobile: 240 },\n{ date: \"2024-04-30\", desktop: 454, mobile: 380 },\n{ date: \"2024-05-01\", desktop: 165, mobile: 220 },\n{ date: \"2024-05-02\", desktop: 293, mobile: 310 },\n{ date: \"2024-05-03\", desktop: 247, mobile: 190 },\n{ date: \"2024-05-04\", desktop: 385, mobile: 420 },\n{ date: \"2024-05-05\", desktop: 481, mobile: 390 },\n{ date: \"2024-05-06\", desktop: 498, mobile: 520 },\n{ date: \"2024-05-07\", desktop: 388, mobile: 300 },\n{ date: \"2024-05-08\", desktop: 149, mobile: 210 },\n{ date: \"2024-05-09\", desktop: 227, mobile: 180 },\n{ date: \"2024-05-10\", desktop: 293, mobile: 330 },\n{ date: \"2024-05-11\", desktop: 335, mobile: 270 },\n{ date: \"2024-05-12\", desktop: 197, mobile: 240 },\n{ date: \"2024-05-13\", desktop: 197, mobile: 160 },\n{ date: \"2024-05-14\", desktop: 448, mobile: 490 },\n{ date: \"2024-05-15\", desktop: 473, mobile: 380 },\n{ date: \"2024-05-16\", desktop: 338, mobile: 400 },\n{ date: \"2024-05-17\", desktop: 499, mobile: 420 },\n{ date: \"2024-05-18\", desktop: 315, mobile: 350 },\n{ date: \"2024-05-19\", desktop: 235, mobile: 180 },\n{ date: \"2024-05-20\", desktop: 177, mobile: 230 },\n{ date: \"2024-05-21\", desktop: 82, mobile: 140 },\n{ date: \"2024-05-22\", desktop: 81, mobile: 120 },\n{ date: \"2024-05-23\", desktop: 252, mobile: 290 },\n{ date: \"2024-05-24\", desktop: 294, mobile: 220 },\n{ date: \"2024-05-25\", desktop: 201, mobile: 250 },\n{ date: \"2024-05-26\", desktop: 213, mobile: 170 },\n{ date: \"2024-05-27\", desktop: 420, mobile: 460 },\n{ date: \"2024-05-28\", desktop: 233, mobile: 190 },\n{ date: \"2024-05-29\", desktop: 78, mobile: 130 },\n{ date: \"2024-05-30\", desktop: 340, mobile: 280 },\n{ date: \"2024-05-31\", desktop: 178, mobile: 230 },\n{ date: \"2024-06-01\", desktop: 178, mobile: 200 },\n{ date: \"2024-06-02\", desktop: 470, mobile: 410 },\n{ date: \"2024-06-03\", desktop: 103, mobile: 160 },\n{ date: \"2024-06-04\", desktop: 439, mobile: 380 },\n{ date: \"2024-06-05\", desktop: 88, mobile: 140 },\n{ date: \"2024-06-06\", desktop: 294, mobile: 250 },\n{ date: \"2024-06-07\", desktop: 323, mobile: 370 },\n{ date: \"2024-06-08\", desktop: 385, mobile: 320 },\n{ date: \"2024-06-09\", desktop: 438, mobile: 480 },\n{ date: \"2024-06-10\", desktop: 155, mobile: 200 },\n{ date: \"2024-06-11\", desktop: 92, mobile: 150 },\n{ date: \"2024-06-12\", desktop: 492, mobile: 420 },\n{ date: \"2024-06-13\", desktop: 81, mobile: 130 },\n{ date: \"2024-06-14\", desktop: 426, mobile: 380 },\n{ date: \"2024-06-15\", desktop: 307, mobile: 350 },\n{ date: \"2024-06-16\", desktop: 371, mobile: 310 },\n{ date: \"2024-06-17\", desktop: 475, mobile: 520 },\n{ date: \"2024-06-18\", desktop: 107, mobile: 170 },\n{ date: \"2024-06-19\", desktop: 341, mobile: 290 },\n{ date: \"2024-06-20\", desktop: 408, mobile: 450 },\n{ date: \"2024-06-21\", desktop: 169, mobile: 210 },\n{ date: \"2024-06-22\", desktop: 317, mobile: 270 },\n{ date: \"2024-06-23\", desktop: 480, mobile: 530 },\n{ date: \"2024-06-24\", desktop: 132, mobile: 180 },\n{ date: \"2024-06-25\", desktop: 141, mobile: 190 },\n{ date: \"2024-06-26\", desktop: 434, mobile: 380 },\n{ date: \"2024-06-27\", desktop: 448, mobile: 490 },\n{ date: \"2024-06-28\", desktop: 149, mobile: 200 },\n{ date: \"2024-06-29\", desktop: 103, mobile: 160 },\n{ date: \"2024-06-30\", desktop: 446, mobile: 400 },\n]\nconst chartConfig = {\nviews: {\nlabel: \"Page Views\",\n},\ndesktop: {\nlabel: \"Desktop\",\ncolor: \"var(--chart-2)\",\n},\nmobile: {\nlabel: \"Mobile\",\ncolor: \"var(--chart-1)\",\n},\n} satisfies ChartConfig\nexport function ChartBarInteractive() {\nconst [activeChart, setActiveChart] =\nReact",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1407472,
      "relative_path": "documentation\\shadcn\\_docs_components_chart.html",
      "source_type": "documentation"
    },
    "token_count": 2300,
    "chunk_index": 1,
    "total_chunks": 28
  },
  {
    "id": "08da2cd72ea83f8be3f15246d5c353e0",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_chart.html",
    "source_type": "documentation",
    "title": "Chart - shadcn/ui",
    "content": "date: \"2024-06-26\", desktop: 434, mobile: 380 }, { date: \"2024-06-27\", desktop: 448, mobile: 490 }, { date: \"2024-06-28\", desktop: 149, mobile: 200 }, { date: \"2024-06-29\", desktop: 103, mobile: 160 }, { date: \"2024-06-30\", desktop: 446, mobile: 400 }, ] const chartConfig = { views: { label: \"Page Views\", }, desktop: { label: \"Desktop\", color: \"var(--chart-2)\", }, mobile: { label: \"Mobile\", color: \"var(--chart-1)\", }, } satisfies ChartConfig export function ChartBarInteractive() { const [activeChart, setActiveChart] = ReactuseState<keyof typeof chartConfig>(\"desktop\")\nconst total = React useMemo(\n() => ({\ndesktop: chartData reduce((acc, curr) => acc + curr desktop, 0),\nmobile: chartData reduce((acc, curr) => acc + curr mobile, 0),\n}),\n[]\n)\nreturn (\n<Card className=\"py-0\">\n<CardHeader className=\"flex flex-col items-stretch border-b p-0 sm:flex-row\">\n<div className=\"flex flex-1 flex-col justify-center gap-1 px-6 pt-4 pb-3 sm: py-0\">\n<CardTitle>Bar Chart - Interactive</CardTitle>\n<CardDescription>\nShowing total visitors for the last 3 months\n</CardDescription>\n</div>\n<div className=\"flex\">\n{[\"desktop\", \"mobile\"] map((key) => {\nconst chart = key as keyof typeof chartConfig\nreturn (\n<button\nkey={chart}\ndata-active={activeChart === chart}\nclassName=\"data-[active=true]:bg-muted/50 relative z-30 flex flex-1 flex-col justify-center gap-1 border-t px-6 py-4 text-left even:border-l sm:border-t-0 sm:border-l sm:px-8 sm:py-6\"\nonClick={() => setActiveChart(chart)}\n>\n<span className=\"text-muted-foreground text-xs\">\n{chartConfig[chart] label}\n</span>\n<span className=\"text-lg leading-none font-bold sm:text-3xl\">\n{total[key as keyof typeof total]",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1407472,
      "relative_path": "documentation\\shadcn\\_docs_components_chart.html",
      "source_type": "documentation"
    },
    "token_count": 479,
    "chunk_index": 2,
    "total_chunks": 28
  },
  {
    "id": "872c7d4ee6180d2e2ad190f6cfa894b6",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_chart.html",
    "source_type": "documentation",
    "title": "Chart - shadcn/ui",
    "content": "sm: py-0\"> <CardTitle>Bar Chart - Interactive</CardTitle> <CardDescription> Showing total visitors for the last 3 months </CardDescription> </div> <div className=\"flex\"> {[\"desktop\", \"mobile\"] map((key) => { const chart = key as keyof typeof chartConfig return ( <button key={chart} data-active={activeChart === chart} className=\"data-[active=true]:bg-muted/50 relative z-30 flex flex-1 flex-col justify-center gap-1 border-t px-6 py-4 text-left even:border-l sm:border-t-0 sm:border-l sm:px-8 sm:py-6\" onClick={() => setActiveChart(chart)} > <span className=\"text-muted-foreground text-xs\"> {chartConfig[chart] label} </span> <span className=\"text-lg leading-none font-bold sm:text-3xl\"> {total[key as keyof typeof total]toLocaleString()}\n</span>\n</button>\n)\n})}\n</div>\n</CardHeader>\n<CardContent className=\"px-2 sm:p-6\">\n<ChartContainer\nconfig={chartConfig}\nclassName=\"aspect-auto h-[250px] w-full\"\n>\n<BarChart\naccessibilityLayer\ndata={chartData}\nmargin={{\nleft: 12,\nright: 12,\n}}\n>\n<CartesianGrid vertical={false} />\n<XAxis\ndataKey=\"date\"\ntickLine={false}\naxisLine={false}\ntickMargin={8}\nminTickGap={32}\ntickFormatter={(value) => {\nconst date = new Date(value)\nreturn date toLocaleDateString(\"en-US\", {\nmonth: \"short\",\nday: \"numeric\",\n})\n}}\n/>\n<ChartTooltip\ncontent={\n<ChartTooltipContent\nclassName=\"w-[150px]\"\nnameKey=\"views\"\nlabelFormatter={(value) => {\nreturn new Date(value) toLocaleDateString(\"en-US\", {\nmonth: \"short\",\nday: \"numeric\",\nyear: \"numeric\",\n})\n}}\n/>\n}\n/>\n<Bar dataKey={activeChart} fill={`var(--color-${activeChart})`} />\n</BarChart>\n</ChartContainer>\n</CardContent>\n</Card>\n)\n}\nIntroducing Charts A collection of chart components that you can copy and paste into your apps Charts are designed to look great out of the box They work well with the other components and are fully customizable to fit your project Browse the Charts Library Component\nWe use Recharts under the hood",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1407472,
      "relative_path": "documentation\\shadcn\\_docs_components_chart.html",
      "source_type": "documentation"
    },
    "token_count": 501,
    "chunk_index": 3,
    "total_chunks": 28
  },
  {
    "id": "b93e3c4a3f8afb5897e501a03ba2fa89",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_chart.html",
    "source_type": "documentation",
    "title": "Chart - shadcn/ui",
    "content": "Date(value) toLocaleDateString(\"en-US\", { month: \"short\", day: \"numeric\", year: \"numeric\", }) }} /> } /> <Bar dataKey={activeChart} fill={`var(--color-${activeChart})`} /> </BarChart> </ChartContainer> </CardContent> </Card> ) } Introducing Charts A collection of chart components that you can copy and paste into your apps Charts are designed to look great out of the box They work well with the other components and are fully customizable to fit your project Browse the Charts Library Component We use Recharts under the hoodWe designed the chart component with composition in mind You build your charts using Recharts components and only bring in custom components, such as ChartTooltip, when and where you need it Copyimport { Bar, BarChart } from \"recharts\"\nimport { ChartContainer, ChartTooltipContent } from \"@/components/ui/charts\"\nexport function MyChart() {\nreturn (\n<ChartContainer>\n<BarChart data={data}>\n<Bar dataKey=\"value\" />\n<ChartTooltip content={<ChartTooltipContent />} />\n</BarChart>\n</ChartContainer>\n)\n}\nWe do not wrap Recharts This means you're not locked into an abstraction When a new Recharts version is released, you can follow the official upgrade path to upgrade your charts The components are yours Installation\nNote: If you are using charts with React 19 or the Next js 15, see the note here CLIManualRun the following command to install chart tsxpnpmnpmyarnbunpnpm dlx shadcn@latest add chartCopyAdd the following colors to your CSS fileapp/globals cssCopy@layer base {\n:root {\n--chart-1: oklch(0 646 0 222 41 116);\n--chart-2: oklch(0 6 0 118 184 704);\n--chart-3: oklch(0 398 0 07 227 392);\n--chart-4: oklch(0 828 0 189 84 429);\n--chart-5: oklch(0 769 0 188 70 08);\n} dark {\n--chart-1: oklch(0 488 0 243 264 376);\n--chart-2: oklch(0 696 0 17 162 48);\n--chart-3: oklch(0 769 0 188 70 08);\n--chart-4: oklch(0",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1407472,
      "relative_path": "documentation\\shadcn\\_docs_components_chart.html",
      "source_type": "documentation"
    },
    "token_count": 525,
    "chunk_index": 4,
    "total_chunks": 28
  },
  {
    "id": "c8c7da6b15a3a3bc5ba5f2f61efdffaf",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_chart.html",
    "source_type": "documentation",
    "title": "Chart - shadcn/ui",
    "content": "shadcn@latest add chartCopyAdd the following colors to your CSS fileapp/globals cssCopy@layer base { :root { --chart-1: oklch(0 646 0 222 41 116); --chart-2: oklch(0 6 0 118 184 704); --chart-3: oklch(0 398 0 07 227 392); --chart-4: oklch(0 828 0 189 84 429); --chart-5: oklch(0 769 0 188 70 08); } dark { --chart-1: oklch(0 488 0 243 264 376); --chart-2: oklch(0 696 0 17 162 48); --chart-3: oklch(0 769 0 188 70 08); --chart-4: oklch(0627 0 265 303 9);\n--chart-5: oklch(0 645 0 246 16 439);\n}\n}\nYour First Chart\nLet's build your first chart We'll build a bar chart, add a grid, axis, tooltip and legend Start by defining your dataThe following data represents the number of desktop and mobile users for each month Note: Your data can be in any shape You are not limited to the shape of the data below Use the dataKey prop to map your data to the chart components/example-chart tsxCopyconst chartData = [\n{ month: \"January\", desktop: 186, mobile: 80 },\n{ month: \"February\", desktop: 305, mobile: 200 },\n{ month: \"March\", desktop: 237, mobile: 120 },\n{ month: \"April\", desktop: 73, mobile: 190 },\n{ month: \"May\", desktop: 209, mobile: 130 },\n{ month: \"June\", desktop: 214, mobile: 140 },\n]Define your chart configThe chart config holds configuration for the chart This is where you place human-readable strings, such as labels, icons and color tokens for theming components/example-chart",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1407472,
      "relative_path": "documentation\\shadcn\\_docs_components_chart.html",
      "source_type": "documentation"
    },
    "token_count": 462,
    "chunk_index": 5,
    "total_chunks": 28
  },
  {
    "id": "421433fa09042392a21cb5803566d04b",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_chart.html",
    "source_type": "documentation",
    "title": "Chart - shadcn/ui",
    "content": "{ month: \"January\", desktop: 186, mobile: 80 }, { month: \"February\", desktop: 305, mobile: 200 }, { month: \"March\", desktop: 237, mobile: 120 }, { month: \"April\", desktop: 73, mobile: 190 }, { month: \"May\", desktop: 209, mobile: 130 }, { month: \"June\", desktop: 214, mobile: 140 }, ]Define your chart configThe chart config holds configuration for the chart This is where you place human-readable strings, such as labels, icons and color tokens for theming components/example-charttsxCopyimport { type ChartConfig } from \"@/components/ui/chart\"\nconst chartConfig = {\ndesktop: {\nlabel: \"Desktop\",\ncolor: \"#2563eb\",\n},\nmobile: {\nlabel: \"Mobile\",\ncolor: \"#60a5fa\",\n},\n} satisfies ChartConfigBuild your chartYou can now build your chart using Recharts components Important: Remember to set a min-h-[VALUE] on the ChartContainer component This is required for the chart be responsive Expandcomponents/example-chart",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1407472,
      "relative_path": "documentation\\shadcn\\_docs_components_chart.html",
      "source_type": "documentation"
    },
    "token_count": 229,
    "chunk_index": 6,
    "total_chunks": 28
  },
  {
    "id": "fc2f5cd4c5bbfc107440ae4aaf8d1d64",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_chart.html",
    "source_type": "documentation",
    "title": "Chart - shadcn/ui",
    "content": "for the chart This is where you place human-readable strings, such as labels, icons and color tokens for theming components/example-charttsxCopyimport { type ChartConfig } from \"@/components/ui/chart\" const chartConfig = { desktop: { label: \"Desktop\", color: \"#2563eb\", }, mobile: { label: \"Mobile\", color: \"#60a5fa\", }, } satisfies ChartConfigBuild your chartYou can now build your chart using Recharts components Important: Remember to set a min-h-[VALUE] on the ChartContainer component This is required for the chart be responsive Expandcomponents/example-charttsxCopy\"use client\"\nimport { Bar, BarChart } from \"recharts\"\nimport { ChartConfig, ChartContainer } from \"@/components/ui/chart\"\nconst chartData = [\n{ month: \"January\", desktop: 186, mobile: 80 },\n{ month: \"February\", desktop: 305, mobile: 200 },\n{ month: \"March\", desktop: 237, mobile: 120 },\n{ month: \"April\", desktop: 73, mobile: 190 },\n{ month: \"May\", desktop: 209, mobile: 130 },\n{ month: \"June\", desktop: 214, mobile: 140 },\n]\nconst chartConfig = {\ndesktop: {\nlabel: \"Desktop\",\ncolor: \"#2563eb\",\n},\nmobile: {\nlabel: \"Mobile\",\ncolor: \"#60a5fa\",\n},\n} satisfies ChartConfig\nexport function Component() {\nreturn (\n<ChartContainer config={chartConfig} className=\"min-h-[200px] w-full\">\n<BarChart accessibilityLayer data={chartData}>\n<Bar dataKey=\"desktop\" fill=\"var(--color-desktop)\" radius={4} />\n<Bar dataKey=\"mobile\" fill=\"var(--color-mobile)\" radius={4} />\n</BarChart>\n</ChartContainer>\n)\n}\nExpandPreviewCodeCopy\"use client\"\nimport { Bar, BarChart } from \"recharts\"\nimport { ChartConfig, ChartContainer } from \"@/components/ui/chart\"\nconst chartData = [\n{ month: \"January\", desktop: 186, mobile: 80 },\n{ month: \"February\", desktop: 305, mobile: 200 },\n{ month: \"March\", desktop: 237, mobile: 120 },\n{ month: \"April\", desktop: 73, mobile: 190 },\n{ month: \"May\", desktop: 209, mobile: 130 },\n{ month: \"June\", desktop: 214, mobile: 140 },\n]\nconst chartConfig = {\ndesktop: {\nlabel: \"Desktop\",\ncolor: \"#2563eb\",\n},\nmobile: {\nlabel: \"Mobile\",\ncolor: \"#60a5fa\",\n},\n} satisfies ChartConfig\nexport function Component() {\nreturn (\n<ChartContainer config={chartConfig} className=\"min-h-[200px] w-full\">\n<BarChart accessibilityLayer data={chartData}>\n<Bar dataKey=\"desktop\" fill=\"var(--color-desktop)\" radius={4} />\n<Bar dataKey=\"mobile\" fill=\"var(--color-mobile)\" radius={4} />\n</BarChart>\n</ChartContainer>\n)\n}\nAdd a Grid\nLet's add a grid to the chart",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1407472,
      "relative_path": "documentation\\shadcn\\_docs_components_chart.html",
      "source_type": "documentation"
    },
    "token_count": 657,
    "chunk_index": 7,
    "total_chunks": 28
  },
  {
    "id": "5c277d82c8c5a33e8011636be8a92416",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_chart.html",
    "source_type": "documentation",
    "title": "Chart - shadcn/ui",
    "content": "}, { month: \"May\", desktop: 209, mobile: 130 }, { month: \"June\", desktop: 214, mobile: 140 }, ] const chartConfig = { desktop: { label: \"Desktop\", color: \"#2563eb\", }, mobile: { label: \"Mobile\", color: \"#60a5fa\", }, } satisfies ChartConfig export function Component() { return ( <ChartContainer config={chartConfig} className=\"min-h-[200px] w-full\"> <BarChart accessibilityLayer data={chartData}> <Bar dataKey=\"desktop\" fill=\"var(--color-desktop)\" radius={4} /> <Bar dataKey=\"mobile\" fill=\"var(--color-mobile)\" radius={4} /> </BarChart> </ChartContainer> ) } Add a Grid Let's add a grid to the chartImport the CartesianGrid component Copyimport { Bar, BarChart, CartesianGrid } from \"recharts\"Add the CartesianGrid component to your chart",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1407472,
      "relative_path": "documentation\\shadcn\\_docs_components_chart.html",
      "source_type": "documentation"
    },
    "token_count": 200,
    "chunk_index": 8,
    "total_chunks": 28
  },
  {
    "id": "3e47e1e95de10bdd2f15c9498de97ba8",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_chart.html",
    "source_type": "documentation",
    "title": "Chart - shadcn/ui",
    "content": "] const chartConfig = { desktop: { label: \"Desktop\", color: \"#2563eb\", }, mobile: { label: \"Mobile\", color: \"#60a5fa\", }, } satisfies ChartConfig export function Component() { return ( <ChartContainer config={chartConfig} className=\"min-h-[200px] w-full\"> <BarChart accessibilityLayer data={chartData}> <Bar dataKey=\"desktop\" fill=\"var(--color-desktop)\" radius={4} /> <Bar dataKey=\"mobile\" fill=\"var(--color-mobile)\" radius={4} /> </BarChart> </ChartContainer> ) } Add a Grid Let's add a grid to the chartImport the CartesianGrid component Copyimport { Bar, BarChart, CartesianGrid } from \"recharts\"Add the CartesianGrid component to your chartCopy<ChartContainer config={chartConfig} className=\"min-h-[200px] w-full\">\n<BarChart accessibilityLayer data={chartData}>\n<CartesianGrid vertical={false} />\n<Bar dataKey=\"desktop\" fill=\"var(--color-desktop)\" radius={4} />\n<Bar dataKey=\"mobile\" fill=\"var(--color-mobile)\" radius={4} />\n</BarChart>\n</ChartContainer>PreviewCodeCopy\"use client\"\nimport { Bar, BarChart, CartesianGrid } from \"recharts\"\nimport { ChartConfig, ChartContainer } from \"@/components/ui/chart\"\nconst chartData = [\n{ month: \"January\", desktop: 186, mobile: 80 },\n{ month: \"February\", desktop: 305, mobile: 200 },\n{ month: \"March\", desktop: 237, mobile: 120 },\n{ month: \"April\", desktop: 73, mobile: 190 },\n{ month: \"May\", desktop: 209, mobile: 130 },\n{ month: \"June\", desktop: 214, mobile: 140 },\n]\nconst chartConfig = {\ndesktop: {\nlabel: \"Desktop\",\ncolor: \"#2563eb\",\n},\nmobile: {\nlabel: \"Mobile\",\ncolor: \"#60a5fa\",\n},\n} satisfies ChartConfig\nexport function Component() {\nreturn (\n<ChartContainer config={chartConfig} className=\"min-h-[200px] w-full\">\n<BarChart accessibilityLayer data={chartData}>\n<CartesianGrid vertical={false} />\n<Bar dataKey=\"desktop\" fill=\"var(--color-desktop)\" radius={4} />\n<Bar dataKey=\"mobile\" fill=\"var(--color-mobile)\" radius={4} />\n</BarChart>\n</ChartContainer>\n)\n}\nAdd an Axis\nTo add an x-axis to the chart, we'll use the XAxis component",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1407472,
      "relative_path": "documentation\\shadcn\\_docs_components_chart.html",
      "source_type": "documentation"
    },
    "token_count": 545,
    "chunk_index": 9,
    "total_chunks": 28
  },
  {
    "id": "852d8b8ce9ced4703e044f709f0e8b27",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_chart.html",
    "source_type": "documentation",
    "title": "Chart - shadcn/ui",
    "content": "}, { month: \"June\", desktop: 214, mobile: 140 }, ] const chartConfig = { desktop: { label: \"Desktop\", color: \"#2563eb\", }, mobile: { label: \"Mobile\", color: \"#60a5fa\", }, } satisfies ChartConfig export function Component() { return ( <ChartContainer config={chartConfig} className=\"min-h-[200px] w-full\"> <BarChart accessibilityLayer data={chartData}> <CartesianGrid vertical={false} /> <Bar dataKey=\"desktop\" fill=\"var(--color-desktop)\" radius={4} /> <Bar dataKey=\"mobile\" fill=\"var(--color-mobile)\" radius={4} /> </BarChart> </ChartContainer> ) } Add an Axis To add an x-axis to the chart, we'll use the XAxis componentImport the XAxis component Copyimport { Bar, BarChart, CartesianGrid, XAxis } from \"recharts\"Add the XAxis component to your chart Copy<ChartContainer config={chartConfig} className=\"h-[200px] w-full\">\n<BarChart accessibilityLayer data={chartData}>\n<CartesianGrid vertical={false} />\n<XAxis\ndataKey=\"month\"\ntickLine={false}\ntickMargin={10}\naxisLine={false}\ntickFormatter={(value) => value",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1407472,
      "relative_path": "documentation\\shadcn\\_docs_components_chart.html",
      "source_type": "documentation"
    },
    "token_count": 272,
    "chunk_index": 10,
    "total_chunks": 28
  },
  {
    "id": "afdfdc5e4a50fff9646b6a45502be75d",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_chart.html",
    "source_type": "documentation",
    "title": "Chart - shadcn/ui",
    "content": "( <ChartContainer config={chartConfig} className=\"min-h-[200px] w-full\"> <BarChart accessibilityLayer data={chartData}> <CartesianGrid vertical={false} /> <Bar dataKey=\"desktop\" fill=\"var(--color-desktop)\" radius={4} /> <Bar dataKey=\"mobile\" fill=\"var(--color-mobile)\" radius={4} /> </BarChart> </ChartContainer> ) } Add an Axis To add an x-axis to the chart, we'll use the XAxis componentImport the XAxis component Copyimport { Bar, BarChart, CartesianGrid, XAxis } from \"recharts\"Add the XAxis component to your chart Copy<ChartContainer config={chartConfig} className=\"h-[200px] w-full\"> <BarChart accessibilityLayer data={chartData}> <CartesianGrid vertical={false} /> <XAxis dataKey=\"month\" tickLine={false} tickMargin={10} axisLine={false} tickFormatter={(value) => valueslice(0, 3)}\n/>\n<Bar dataKey=\"desktop\" fill=\"var(--color-desktop)\" radius={4} />\n<Bar dataKey=\"mobile\" fill=\"var(--color-mobile)\" radius={4} />\n</BarChart>\n</ChartContainer>PreviewCodeCopy\"use client\"\nimport { Bar, BarChart, CartesianGrid, XAxis } from \"recharts\"\nimport { ChartConfig, ChartContainer } from \"@/components/ui/chart\"\nconst chartData = [\n{ month: \"January\", desktop: 186, mobile: 80 },\n{ month: \"February\", desktop: 305, mobile: 200 },\n{ month: \"March\", desktop: 237, mobile: 120 },\n{ month: \"April\", desktop: 73, mobile: 190 },\n{ month: \"May\", desktop: 209, mobile: 130 },\n{ month: \"June\", desktop: 214, mobile: 140 },\n]\nconst chartConfig = {\ndesktop: {\nlabel: \"Desktop\",\ncolor: \"#2563eb\",\n},\nmobile: {\nlabel: \"Mobile\",\ncolor: \"#60a5fa\",\n},\n} satisfies ChartConfig\nexport function Component() {\nreturn (\n<ChartContainer config={chartConfig} className=\"min-h-[200px] w-full\">\n<BarChart accessibilityLayer data={chartData}>\n<CartesianGrid vertical={false} />\n<XAxis\ndataKey=\"month\"\ntickLine={false}\ntickMargin={10}\naxisLine={false}\ntickFormatter={(value) => value",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1407472,
      "relative_path": "documentation\\shadcn\\_docs_components_chart.html",
      "source_type": "documentation"
    },
    "token_count": 518,
    "chunk_index": 11,
    "total_chunks": 28
  },
  {
    "id": "d1a43ecee83965e2b8009b5cbca21e53",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_chart.html",
    "source_type": "documentation",
    "title": "Chart - shadcn/ui",
    "content": "\"March\", desktop: 237, mobile: 120 }, { month: \"April\", desktop: 73, mobile: 190 }, { month: \"May\", desktop: 209, mobile: 130 }, { month: \"June\", desktop: 214, mobile: 140 }, ] const chartConfig = { desktop: { label: \"Desktop\", color: \"#2563eb\", }, mobile: { label: \"Mobile\", color: \"#60a5fa\", }, } satisfies ChartConfig export function Component() { return ( <ChartContainer config={chartConfig} className=\"min-h-[200px] w-full\"> <BarChart accessibilityLayer data={chartData}> <CartesianGrid vertical={false} /> <XAxis dataKey=\"month\" tickLine={false} tickMargin={10} axisLine={false} tickFormatter={(value) => valueslice(0, 3)}\n/>\n<Bar dataKey=\"desktop\" fill=\"var(--color-desktop)\" radius={4} />\n<Bar dataKey=\"mobile\" fill=\"var(--color-mobile)\" radius={4} />\n</BarChart>\n</ChartContainer>\n)\n}\nAdd Tooltip\nSo far we've only used components from Recharts They look great out of the box thanks to some customization in the chart component To add a tooltip, we'll use the custom ChartTooltip and ChartTooltipContent components from chart Import the ChartTooltip and ChartTooltipContent components Copyimport { ChartTooltip, ChartTooltipContent } from \"@/components/ui/chart\"Add the components to your chart Copy<ChartContainer config={chartConfig} className=\"h-[200px] w-full\">\n<BarChart accessibilityLayer data={chartData}>\n<CartesianGrid vertical={false} />\n<XAxis\ndataKey=\"month\"\ntickLine={false}\ntickMargin={10}\naxisLine={false}\ntickFormatter={(value) => value",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1407472,
      "relative_path": "documentation\\shadcn\\_docs_components_chart.html",
      "source_type": "documentation"
    },
    "token_count": 381,
    "chunk_index": 12,
    "total_chunks": 28
  },
  {
    "id": "3afbc7cb78ac121e551742101d7df618",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_chart.html",
    "source_type": "documentation",
    "title": "Chart - shadcn/ui",
    "content": "} Add Tooltip So far we've only used components from Recharts They look great out of the box thanks to some customization in the chart component To add a tooltip, we'll use the custom ChartTooltip and ChartTooltipContent components from chart Import the ChartTooltip and ChartTooltipContent components Copyimport { ChartTooltip, ChartTooltipContent } from \"@/components/ui/chart\"Add the components to your chart Copy<ChartContainer config={chartConfig} className=\"h-[200px] w-full\"> <BarChart accessibilityLayer data={chartData}> <CartesianGrid vertical={false} /> <XAxis dataKey=\"month\" tickLine={false} tickMargin={10} axisLine={false} tickFormatter={(value) => valueslice(0, 3)}\n/>\n<ChartTooltip content={<ChartTooltipContent />} />\n<Bar dataKey=\"desktop\" fill=\"var(--color-desktop)\" radius={4} />\n<Bar dataKey=\"mobile\" fill=\"var(--color-mobile)\" radius={4} />\n</BarChart>\n</ChartContainer>PreviewCodeCopy\"use client\"\nimport { Bar, BarChart, CartesianGrid, XAxis } from \"recharts\"\nimport {\nChartConfig,\nChartContainer,\nChartTooltip,\nChartTooltipContent,\n} from \"@/components/ui/chart\"\nconst chartData = [\n{ month: \"January\", desktop: 186, mobile: 80 },\n{ month: \"February\", desktop: 305, mobile: 200 },\n{ month: \"March\", desktop: 237, mobile: 120 },\n{ month: \"April\", desktop: 73, mobile: 190 },\n{ month: \"May\", desktop: 209, mobile: 130 },\n{ month: \"June\", desktop: 214, mobile: 140 },\n]\nconst chartConfig = {\ndesktop: {\nlabel: \"Desktop\",\ncolor: \"#2563eb\",\n},\nmobile: {\nlabel: \"Mobile\",\ncolor: \"#60a5fa\",\n},\n} satisfies ChartConfig\nexport function Component() {\nreturn (\n<ChartContainer config={chartConfig} className=\"min-h-[200px] w-full\">\n<BarChart accessibilityLayer data={chartData}>\n<CartesianGrid vertical={false} />\n<XAxis\ndataKey=\"month\"\ntickLine={false}\ntickMargin={10}\naxisLine={false}\ntickFormatter={(value) => value",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1407472,
      "relative_path": "documentation\\shadcn\\_docs_components_chart.html",
      "source_type": "documentation"
    },
    "token_count": 476,
    "chunk_index": 13,
    "total_chunks": 28
  },
  {
    "id": "3412c690ac63b340577c1a5639c34543",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_chart.html",
    "source_type": "documentation",
    "title": "Chart - shadcn/ui",
    "content": "\"March\", desktop: 237, mobile: 120 }, { month: \"April\", desktop: 73, mobile: 190 }, { month: \"May\", desktop: 209, mobile: 130 }, { month: \"June\", desktop: 214, mobile: 140 }, ] const chartConfig = { desktop: { label: \"Desktop\", color: \"#2563eb\", }, mobile: { label: \"Mobile\", color: \"#60a5fa\", }, } satisfies ChartConfig export function Component() { return ( <ChartContainer config={chartConfig} className=\"min-h-[200px] w-full\"> <BarChart accessibilityLayer data={chartData}> <CartesianGrid vertical={false} /> <XAxis dataKey=\"month\" tickLine={false} tickMargin={10} axisLine={false} tickFormatter={(value) => valueslice(0, 3)}\n/>\n<ChartTooltip content={<ChartTooltipContent />} />\n<Bar dataKey=\"desktop\" fill=\"var(--color-desktop)\" radius={4} />\n<Bar dataKey=\"mobile\" fill=\"var(--color-mobile)\" radius={4} />\n</BarChart>\n</ChartContainer>\n)\n}\nHover to see the tooltips Easy, right Two components, and we've got a beautiful tooltip Add Legend\nWe'll do the same for the legend We'll use the ChartLegend and ChartLegendContent components from chart Import the ChartLegend and ChartLegendContent components Copyimport { ChartLegend, ChartLegendContent } from \"@/components/ui/chart\"Add the components to your chart Copy<ChartContainer config={chartConfig} className=\"h-[200px] w-full\">\n<BarChart accessibilityLayer data={chartData}>\n<CartesianGrid vertical={false} />\n<XAxis\ndataKey=\"month\"\ntickLine={false}\ntickMargin={10}\naxisLine={false}\ntickFormatter={(value) => value",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1407472,
      "relative_path": "documentation\\shadcn\\_docs_components_chart.html",
      "source_type": "documentation"
    },
    "token_count": 386,
    "chunk_index": 14,
    "total_chunks": 28
  },
  {
    "id": "c6eb7b10fe4d0761101f7c8ceaf48410",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_chart.html",
    "source_type": "documentation",
    "title": "Chart - shadcn/ui",
    "content": "fill=\"var(--color-mobile)\" radius={4} /> </BarChart> </ChartContainer> ) } Hover to see the tooltips Easy, right Two components, and we've got a beautiful tooltip Add Legend We'll do the same for the legend We'll use the ChartLegend and ChartLegendContent components from chart Import the ChartLegend and ChartLegendContent components Copyimport { ChartLegend, ChartLegendContent } from \"@/components/ui/chart\"Add the components to your chart Copy<ChartContainer config={chartConfig} className=\"h-[200px] w-full\"> <BarChart accessibilityLayer data={chartData}> <CartesianGrid vertical={false} /> <XAxis dataKey=\"month\" tickLine={false} tickMargin={10} axisLine={false} tickFormatter={(value) => valueslice(0, 3)}\n/>\n<ChartTooltip content={<ChartTooltipContent />} />\n<ChartLegend content={<ChartLegendContent />} />\n<Bar dataKey=\"desktop\" fill=\"var(--color-desktop)\" radius={4} />\n<Bar dataKey=\"mobile\" fill=\"var(--color-mobile)\" radius={4} />\n</BarChart>\n</ChartContainer>PreviewCodeCopy\"use client\"\nimport { Bar, BarChart, CartesianGrid, XAxis } from \"recharts\"\nimport {\nChartConfig,\nChartContainer,\nChartLegend,\nChartLegendContent,\nChartTooltip,\nChartTooltipContent,\n} from \"@/components/ui/chart\"\nconst chartData = [\n{ month: \"January\", desktop: 186, mobile: 80 },\n{ month: \"February\", desktop: 305, mobile: 200 },\n{ month: \"March\", desktop: 237, mobile: 120 },\n{ month: \"April\", desktop: 73, mobile: 190 },\n{ month: \"May\", desktop: 209, mobile: 130 },\n{ month: \"June\", desktop: 214, mobile: 140 },\n]\nconst chartConfig = {\ndesktop: {\nlabel: \"Desktop\",\ncolor: \"#2563eb\",\n},\nmobile: {\nlabel: \"Mobile\",\ncolor: \"#60a5fa\",\n},\n} satisfies ChartConfig\nexport function Component() {\nreturn (\n<ChartContainer config={chartConfig} className=\"min-h-[200px] w-full\">\n<BarChart accessibilityLayer data={chartData}>\n<CartesianGrid vertical={false} />\n<XAxis\ndataKey=\"month\"\ntickLine={false}\ntickMargin={10}\naxisLine={false}\ntickFormatter={(value) => value",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1407472,
      "relative_path": "documentation\\shadcn\\_docs_components_chart.html",
      "source_type": "documentation"
    },
    "token_count": 509,
    "chunk_index": 15,
    "total_chunks": 28
  },
  {
    "id": "bfb10fb688b7b5f9b28a43d950aad926",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_chart.html",
    "source_type": "documentation",
    "title": "Chart - shadcn/ui",
    "content": "\"March\", desktop: 237, mobile: 120 }, { month: \"April\", desktop: 73, mobile: 190 }, { month: \"May\", desktop: 209, mobile: 130 }, { month: \"June\", desktop: 214, mobile: 140 }, ] const chartConfig = { desktop: { label: \"Desktop\", color: \"#2563eb\", }, mobile: { label: \"Mobile\", color: \"#60a5fa\", }, } satisfies ChartConfig export function Component() { return ( <ChartContainer config={chartConfig} className=\"min-h-[200px] w-full\"> <BarChart accessibilityLayer data={chartData}> <CartesianGrid vertical={false} /> <XAxis dataKey=\"month\" tickLine={false} tickMargin={10} axisLine={false} tickFormatter={(value) => valueslice(0, 3)}\n/>\n<ChartTooltip content={<ChartTooltipContent />} />\n<ChartLegend content={<ChartLegendContent />} />\n<Bar dataKey=\"desktop\" fill=\"var(--color-desktop)\" radius={4} />\n<Bar dataKey=\"mobile\" fill=\"var(--color-mobile)\" radius={4} />\n</BarChart>\n</ChartContainer>\n)\n}\nDone You've built your first chart What's next Themes and Colors\nTooltip\nLegend\nChart Config\nThe chart config is where you define the labels, icons and colors for a chart It is intentionally decoupled from chart data This allows you to share config and color tokens between charts It can also works independently for cases where your data or color tokens live remotely or in a different format Copyimport { Monitor } from \"lucide-react\"\nimport { type ChartConfig } from \"@/components/ui/chart\"\nconst chartConfig = {\ndesktop: {\nlabel: \"Desktop\",\nicon: Monitor,\n// A color like 'hsl(220, 98%, 61%)' or 'var(--color-name)'\ncolor: \"#2563eb\",\n// OR a theme object with 'light' and 'dark' keys\ntheme: {\nlight: \"#2563eb\",\ndark: \"#dc2626\",\n},\n},\n} satisfies ChartConfig\nTheming\nCharts has built-in support for theming You can use css variables (recommended) or color values in any color format, such as hex, hsl or oklch CSS Variables\nDefine your colors in your css fileapp/globals",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1407472,
      "relative_path": "documentation\\shadcn\\_docs_components_chart.html",
      "source_type": "documentation"
    },
    "token_count": 493,
    "chunk_index": 16,
    "total_chunks": 28
  },
  {
    "id": "e5c849b41f524ca29a137970c77152b0",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_chart.html",
    "source_type": "documentation",
    "title": "Chart - shadcn/ui",
    "content": "chartConfig = { desktop: { label: \"Desktop\", icon: Monitor, // A color like 'hsl(220, 98%, 61%)' or 'var(--color-name)' color: \"#2563eb\", // OR a theme object with 'light' and 'dark' keys theme: { light: \"#2563eb\", dark: \"#dc2626\", }, }, } satisfies ChartConfig Theming Charts has built-in support for theming You can use css variables (recommended) or color values in any color format, such as hex, hsl or oklch CSS Variables Define your colors in your css fileapp/globalscssCopy@layer base {\n:root {\n--chart-1: oklch(0 646 0 222 41 116);\n--chart-2: oklch(0 6 0 118 184 704);\n} dark: {\n--chart-1: oklch(0 488 0 243 264 376);\n--chart-2: oklch(0 696 0 17 162 48);\n}\n}Add the color to your chartConfigCopyconst chartConfig = {\ndesktop: {\nlabel: \"Desktop\",\ncolor: \"var(--chart-1)\",\n},\nmobile: {\nlabel: \"Mobile\",\ncolor: \"var(--chart-2)\",\n},\n} satisfies ChartConfig\nhex, hsl or oklch\nYou can also define your colors directly in the chart config Use the color format you prefer Copyconst chartConfig = {\ndesktop: {\nlabel: \"Desktop\",\ncolor: \"#2563eb\",\n},\n} satisfies ChartConfig\nUsing Colors\nTo use the theme colors in your chart, reference the colors using the format var(--color-KEY) Components\nCopy<Bar dataKey=\"desktop\" fill=\"var(--color-desktop)\" />\nChart Data\nCopyconst chartData = [\n{ browser: \"chrome\", visitors: 275, fill: \"var(--color-chrome)\" },\n{ browser: \"safari\", visitors: 200, fill: \"var(--color-safari)\" },\n]\nTailwind\nCopy<LabelList className=\"fill-[--color-desktop]\" />\nTooltip\nA chart tooltip contains a label, name, indicator and value You can use a combination of these to customize your tooltip",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1407472,
      "relative_path": "documentation\\shadcn\\_docs_components_chart.html",
      "source_type": "documentation"
    },
    "token_count": 474,
    "chunk_index": 17,
    "total_chunks": 28
  },
  {
    "id": "5e043a4e1addcfa4b5c0fc868221ecf8",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_chart.html",
    "source_type": "documentation",
    "title": "Chart - shadcn/ui",
    "content": "\"#2563eb\", }, } satisfies ChartConfig Using Colors To use the theme colors in your chart, reference the colors using the format var(--color-KEY) Components Copy<Bar dataKey=\"desktop\" fill=\"var(--color-desktop)\" /> Chart Data Copyconst chartData = [ { browser: \"chrome\", visitors: 275, fill: \"var(--color-chrome)\" }, { browser: \"safari\", visitors: 200, fill: \"var(--color-safari)\" }, ] Tailwind Copy<LabelList className=\"fill-[--color-desktop]\" /> Tooltip A chart tooltip contains a label, name, indicator and value You can use a combination of these to customize your tooltipLabelPage ViewsDesktop186Mobile80NameChrome1,286Firefox1,000Page ViewsDesktop12,486IndicatorChrome1,286Copy\"use client\"\nimport * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\nexport function Component() {\nreturn (\n<div className=\"text-foreground grid aspect-video w-full max-w-md justify-center md:grid-cols-2 [&>div]:relative [&>div]:flex [&>div]:h-[137px] [&>div]:w-[224px] [&>div]:items-center [&>div]:justify-center [&>div]:p-4\">\n<div>\n<div className=\"absolute top-[45px] left-[-35px] z-10 text-sm font-medium\">\nLabel\n</div>\n<svg\nxmlns=\"http://www w3 org/2000/svg\"\nviewBox=\"0 0 193 40\"\nwidth=\"50\"\nheight=\"12\"\nfill=\"none\"\nclassName=\"absolute top-[50px] left-[5px] z-10\"\n>\n<g clipPath=\"url(#a)\">\n<path\nfill=\"currentColor\"\nd=\"M173 928 21 13C115 811 44 938 58 751 45 773 0 26 141c4 227-4 386 7 82-2 715 10 567-1 88 21 133 5 64 42 9 6 266 64 457 7 101 31 066 1 253 60 441-5 848 89 183-17 335 1 268- 418 2 325-1 253 4 861-2 924-14 582-2 924-29 165 2 089-41 845-3 76 212- 835 212-1 879 423-2 714 9 51- 627 19",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1407472,
      "relative_path": "documentation\\shadcn\\_docs_components_chart.html",
      "source_type": "documentation"
    },
    "token_count": 544,
    "chunk_index": 18,
    "total_chunks": 28
  },
  {
    "id": "eee331c69e2c988ab52482463f195440",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_chart.html",
    "source_type": "documentation",
    "title": "Chart - shadcn/ui",
    "content": "z-10\" > <g clipPath=\"url(#a)\"> <path fill=\"currentColor\" d=\"M173 928 21 13C115 811 44 938 58 751 45 773 0 26 141c4 227-4 386 7 82-2 715 10 567-1 88 21 133 5 64 42 9 6 266 64 457 7 101 31 066 1 253 60 441-5 848 89 183-17 335 1 268- 418 2 325-1 253 4 861-2 924-14 582-2 924-29 165 2 089-41 845-3 76 212- 835 212-1 879 423-2 714 9 51- 627 19231-1 253 28 742-2 089 9 51- 835 18 808-1 88 28 318-2 506 6 974- 418 9 933 2 924 7 397 9 19-3 17 8 145-7 608 15 664-11 623 23 391- 423 836-1 057 1 88-1 902 2 298-2 325 835-4 65 1 044-7 186 1 67- 422-2 088-1 479-4 386-1 268-6 265 423-2 506 1 902-4 595 3 804-9 19Z\"\n/>\n</g>\n<defs>\n<clipPath id=\"a\">\n<path fill=\"currentColor\" d=\"M0 0h193v40H0z\" />\n</clipPath>\n</defs>\n</svg>\n<TooltipDemo\nlabel=\"Page Views\"\npayload={[\n{ name: \"Desktop\", value: 186, fill: \"hsl(var(--chart-1))\" },\n{ name: \"Mobile\", value: 80, fill: \"hsl(var(--chart-2))\" },\n]}\nclassName=\"w-[8rem]\"\n/>\n</div>\n<div className=\"items-end\">\n<div className=\"absolute top-[0px] left-[122px] z-10 text-sm font-medium\">\nName\n</div>\n<svg\nxmlns=\"http://www w3",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1407472,
      "relative_path": "documentation\\shadcn\\_docs_components_chart.html",
      "source_type": "documentation"
    },
    "token_count": 528,
    "chunk_index": 19,
    "total_chunks": 28
  },
  {
    "id": "da224606b76840a8258ef208b275a95b",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_chart.html",
    "source_type": "documentation",
    "title": "Chart - shadcn/ui",
    "content": "902 2 298-2 325 835-4 65 1 044-7 186 1 67- 422-2 088-1 479-4 386-1 268-6 265 423-2 506 1 902-4 595 3 804-9 19Z\" /> </g> <defs> <clipPath id=\"a\"> <path fill=\"currentColor\" d=\"M0 0h193v40H0z\" /> </clipPath> </defs> </svg> <TooltipDemo label=\"Page Views\" payload={[ { name: \"Desktop\", value: 186, fill: \"hsl(var(--chart-1))\" }, { name: \"Mobile\", value: 80, fill: \"hsl(var(--chart-2))\" }, ]} className=\"w-[8rem]\" /> </div> <div className=\"items-end\"> <div className=\"absolute top-[0px] left-[122px] z-10 text-sm font-medium\"> Name </div> <svg xmlns=\"http://www w3org/2000/svg\"\nwidth=\"35\"\nheight=\"42\"\nfill=\"none\"\nviewBox=\"0 0 122 148\"\nclassName=\"absolute top-[10px] left-[85px] z-10 -scale-x-100\"\n>\n<g clipPath=\"url(#ab)\">\n<path\nfill=\"currentColor\"\nd=\"M0 2 65c6 15-4 024 12 299-2 753 17 812- 847a115 56 115 56 0 0 1 21 84 10 59C70 4 32 727 88 849 61 744 96 483 97 54c1 908 9 108 2 544 18 639 3 817 29 017 8 481-4 871 12 934-14 402 21 416-19 909 1 061 4 236-1 06 6 989-2 756 9 319-6 998 9 531-14 207 19 062-21 63 28 382-3 604 4 448-6 36 4 871-10 177 1 059-8 058-7 837-12 935-17 368-14 42-28 382 0- 424 636-1 059 1 485-2 118 9 118 2 33 6 997 13 979 14 843 18",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1407472,
      "relative_path": "documentation\\shadcn\\_docs_components_chart.html",
      "source_type": "documentation"
    },
    "token_count": 561,
    "chunk_index": 20,
    "total_chunks": 28
  },
  {
    "id": "64e0d7457bd23976ef5bbc68880f36ae",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_chart.html",
    "source_type": "documentation",
    "title": "Chart - shadcn/ui",
    "content": "96 483 97 54c1 908 9 108 2 544 18 639 3 817 29 017 8 481-4 871 12 934-14 402 21 416-19 909 1 061 4 236-1 06 6 989-2 756 9 319-6 998 9 531-14 207 19 062-21 63 28 382-3 604 4 448-6 36 4 871-10 177 1 059-8 058-7 837-12 935-17 368-14 42-28 382 0- 424 636-1 059 1 485-2 118 9 118 2 33 6 997 13 979 14 843 18215 3 393-14 614 848-28 593-2 969-42 149-4 029-14 19-9 33-27 746-17 812-39 82-8 27-11 86-18 66-21 392-30 11-30 287C26 93 11 758 14 207 6 039 0 2 65Z\"\n/>\n</g>\n<defs>\n<clipPath id=\"ab\">\n<path fill=\"currentColor\" d=\"M0 0h122v148H0z\" />\n</clipPath>\n</defs>\n</svg>\n<TooltipDemo\nlabel=\"Browser\"\nhideLabel\npayload={[\n{ name: \"Chrome\", value: 1286, fill: \"hsl(var(--chart-3))\" },\n{ name: \"Firefox\", value: 1000, fill: \"hsl(var(--chart-4))\" },\n]}\nindicator=\"dashed\"\nclassName=\"w-[8rem]\"\n/>\n</div>\n<div className=\" hidden md: flex\">\n<TooltipDemo\nlabel=\"Page Views\"\npayload={[\n{ name: \"Desktop\", value: 12486, fill: \"hsl(var(--chart-3))\" },\n]}\nclassName=\"w-[9rem]\"\nindicator=\"line\"\n/>\n</div>\n<div className=\" items-start",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1407472,
      "relative_path": "documentation\\shadcn\\_docs_components_chart.html",
      "source_type": "documentation"
    },
    "token_count": 476,
    "chunk_index": 21,
    "total_chunks": 28
  },
  {
    "id": "f4611e207b1a8810f4368a45f0a83664",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_chart.html",
    "source_type": "documentation",
    "title": "Chart - shadcn/ui",
    "content": "392-30 11-30 287C26 93 11 758 14 207 6 039 0 2 65Z\" /> </g> <defs> <clipPath id=\"ab\"> <path fill=\"currentColor\" d=\"M0 0h122v148H0z\" /> </clipPath> </defs> </svg> <TooltipDemo label=\"Browser\" hideLabel payload={[ { name: \"Chrome\", value: 1286, fill: \"hsl(var(--chart-3))\" }, { name: \"Firefox\", value: 1000, fill: \"hsl(var(--chart-4))\" }, ]} indicator=\"dashed\" className=\"w-[8rem]\" /> </div> <div className=\" hidden md: flex\"> <TooltipDemo label=\"Page Views\" payload={[ { name: \"Desktop\", value: 12486, fill: \"hsl(var(--chart-3))\" }, ]} className=\"w-[9rem]\" indicator=\"line\" /> </div> <div className=\" items-startjustify-start\">\n<div className=\"absolute top-[60px] left-[50px] z-10 text-sm font-medium\">\nIndicator\n</div>\n<TooltipDemo\nlabel=\"Browser\"\nhideLabel\npayload={[\n{ name: \"Chrome\", value: 1286, fill: \"hsl(var(--chart-1))\" },\n]}\nindicator=\"dot\"\nclassName=\"w-[8rem]\"\n/>\n<svg\nxmlns=\"http://www w3 org/2000/svg\"\nwidth=\"15\"\nheight=\"34\"\nfill=\"none\"\nviewBox=\"0 0 75 175\"\nclassName=\"absolute top-[38px] left-[30px] z-10 rotate-[-40deg]\"\n>\n<g clipPath=\"url(#abc)\">\n<path\nfill=\"currentColor\"\nd=\"M20 187 175c-4 439-2 109-7 186-2 531-8 032-4 008-3 17-5 484-6 763-10 968-8 454-17 084-5 073-16 242-4 439-32 694-1 057-49 146 5 707-28 053 18 388-52 942 34 24-76 565 1 692-2 531 3 171-5 063 4 862-7 805 0- 21- 211- 632- 634-1 265-4 65 1 265-9",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1407472,
      "relative_path": "documentation\\shadcn\\_docs_components_chart.html",
      "source_type": "documentation"
    },
    "token_count": 538,
    "chunk_index": 22,
    "total_chunks": 28
  },
  {
    "id": "207119006ba10bea4e93d4625767f19c",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_chart.html",
    "source_type": "documentation",
    "title": "Chart - shadcn/ui",
    "content": "fill: \"hsl(var(--chart-1))\" }, ]} indicator=\"dot\" className=\"w-[8rem]\" /> <svg xmlns=\"http://www w3 org/2000/svg\" width=\"15\" height=\"34\" fill=\"none\" viewBox=\"0 0 75 175\" className=\"absolute top-[38px] left-[30px] z-10 rotate-[-40deg]\" > <g clipPath=\"url(#abc)\"> <path fill=\"currentColor\" d=\"M20 187 175c-4 439-2 109-7 186-2 531-8 032-4 008-3 17-5 484-6 763-10 968-8 454-17 084-5 073-16 242-4 439-32 694-1 057-49 146 5 707-28 053 18 388-52 942 34 24-76 565 1 692-2 531 3 171-5 063 4 862-7 805 0- 21- 211- 632- 634-1 265-4 65 1 265-9511 2 53-14 161 3 585-2 537 422-5 496 422-8 032- 421-1 48- 422-3 593-2 742-3 593-4 219 0-1 898 1 48-4 218 2 747-5 906 1 057-1 054 2 96-1 265 4 65-1 687C35 406 7 315 48 088 3 729 60 98 776c10 99-2 53 14 584 1 055 13 95 11 812- 634 11 18- 846 22 358-1 268 33 326- 212 3 375- 846 6 96-1 268 10 757-8 878-4 007-8 878-4 007-12 048-38 177C47 03 33 259 38 153 49 289 29 91 65 741 21 667 82 193 16 17 99 49 13 212 117 84c-2 959 18 984 634 36 912 6 975 57",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1407472,
      "relative_path": "documentation\\shadcn\\_docs_components_chart.html",
      "source_type": "documentation"
    },
    "token_count": 543,
    "chunk_index": 23,
    "total_chunks": 28
  },
  {
    "id": "61497775394dc0f18515be73eee929de",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_chart.html",
    "source_type": "documentation",
    "title": "Chart - shadcn/ui",
    "content": "406 7 315 48 088 3 729 60 98 776c10 99-2 53 14 584 1 055 13 95 11 812- 634 11 18- 846 22 358-1 268 33 326- 212 3 375- 846 6 96-1 268 10 757-8 878-4 007-8 878-4 007-12 048-38 177C47 03 33 259 38 153 49 289 29 91 65 741 21 667 82 193 16 17 99 49 13 212 117 84c-2 959 18 984 634 36 912 6 975 57161Z\"\n/>\n</g>\n<defs>\n<clipPath id=\"abc\">\n<path fill=\"currentColor\" d=\"M0 0h75v175H0z\" />\n</clipPath>\n</defs>\n</svg>\n</div>\n</div>\n)\n}\nfunction TooltipDemo({\nindicator = \"dot\",\nlabel,\npayload,\nhideLabel,\nhideIndicator,\nclassName,\n}: {\nlabel: string\nhideLabel : boolean\nhideIndicator : boolean\nindicator : \"line\" | \"dot\" | \"dashed\"\npayload: {\nname: string\nvalue: number\nfill: string\n}[]\nnameKey : string\nlabelKey : string\n} & React ComponentProps<\"div\">) {\nconst tooltipLabel = hideLabel null : (\n<div className=\"font-medium\">{label}</div>\n)\nif ( payload length) {\nreturn null\n}\nconst nestLabel = payload length === 1 && indicator == \"dot\"\nreturn (\n<div\nclassName={cn(\n\"border-border/50 bg-background grid min-w-[8rem] items-start gap-1 5 rounded-lg border px-2 5 py-1 5 text-xs shadow-xl transition-all ease-in-out hover:-translate-y-0 5\",\nclassName\n)}\n>\n{ nestLabel tooltipLabel : null}\n<div className=\"grid gap-1 5\">\n{payload map((item, index) => {\nconst indicatorColor = item fill\nreturn (\n<div\nkey={index}\nclassName={cn(\n\"[&>svg]:text-muted-foreground flex w-full items-stretch gap-2 [&>svg]:h-2",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1407472,
      "relative_path": "documentation\\shadcn\\_docs_components_chart.html",
      "source_type": "documentation"
    },
    "token_count": 504,
    "chunk_index": 24,
    "total_chunks": 28
  },
  {
    "id": "738297bd6313e870d1f2ccf7024ae000",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_chart.html",
    "source_type": "documentation",
    "title": "Chart - shadcn/ui",
    "content": ") if ( payload length) { return null } const nestLabel = payload length === 1 && indicator == \"dot\" return ( <div className={cn( \"border-border/50 bg-background grid min-w-[8rem] items-start gap-1 5 rounded-lg border px-2 5 py-1 5 text-xs shadow-xl transition-all ease-in-out hover:-translate-y-0 5\", className )} > { nestLabel tooltipLabel : null} <div className=\"grid gap-1 5\"> {payload map((item, index) => { const indicatorColor = item fill return ( <div key={index} className={cn( \"[&>svg]:text-muted-foreground flex w-full items-stretch gap-2 [&>svg]:h-25 [&>svg]:w-2 5\",\nindicator === \"dot\" && \"items-center\"\n)}\n>\n<>\n{ hideIndicator && (\n<div\nclassName={cn(\n\"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n{\n\"h-2 5 w-2 5\": indicator === \"dot\",\n\"w-1\": indicator === \"line\",\n\"w-0 border-[1 5px] border-dashed bg-transparent\":\nindicator === \"dashed\",\n\"my-0 5\": nestLabel && indicator === \"dashed\",\n}\n)}\nstyle={\n{\n\"--color-bg\": indicatorColor,\n\"--color-border\": indicatorColor,\n} as React CSSProperties\n}\n/>\n)}\n<div\nclassName={cn(\n\"flex flex-1 justify-between leading-none\",\nnestLabel \"items-end\" : \"items-center\"\n)}\n>\n<div className=\"grid gap-1 5\">\n{nestLabel tooltipLabel : null}\n<span className=\"text-muted-foreground\">{item name}</span>\n</div>\n<span className=\"text-foreground font-mono font-medium tabular-nums\">\n{item value toLocaleString()}\n</span>\n</div>\n</>\n</div>\n)\n})}\n</div>\n</div>\n)\n}\nYou can turn on/off any of these using the hideLabel, hideIndicator props and customize the indicator style using the indicator prop Use labelKey and nameKey to use a custom key for the tooltip label and name Chart comes with the <ChartTooltip> and <ChartTooltipContent> components You can use these two components to add custom tooltips to your chart",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1407472,
      "relative_path": "documentation\\shadcn\\_docs_components_chart.html",
      "source_type": "documentation"
    },
    "token_count": 486,
    "chunk_index": 25,
    "total_chunks": 28
  },
  {
    "id": "150661ef3bf2ee94ac0e77ad87b1e292",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_chart.html",
    "source_type": "documentation",
    "title": "Chart - shadcn/ui",
    "content": "</div> <span className=\"text-foreground font-mono font-medium tabular-nums\"> {item value toLocaleString()} </span> </div> </> </div> ) })} </div> </div> ) } You can turn on/off any of these using the hideLabel, hideIndicator props and customize the indicator style using the indicator prop Use labelKey and nameKey to use a custom key for the tooltip label and name Chart comes with the <ChartTooltip> and <ChartTooltipContent> components You can use these two components to add custom tooltips to your chartCopyimport { ChartTooltip, ChartTooltipContent } from \"@/components/ui/chart\"\nCopy<ChartTooltip content={<ChartTooltipContent />} />\nProps\nUse the following props to customize the tooltip PropTypeDescriptionlabelKeystringThe config or data key to use for the label nameKeystringThe config or data key to use for the name indicatordot line or dashedThe indicator style for the tooltip hideLabelbooleanWhether to hide the label hideIndicatorbooleanWhether to hide the indicator Colors\nColors are automatically referenced from the chart config Custom\nTo use a custom key for tooltip label and names, use the labelKey and nameKey props Copyconst chartData = [\n{ browser: \"chrome\", visitors: 187, fill: \"var(--color-chrome)\" },\n{ browser: \"safari\", visitors: 200, fill: \"var(--color-safari)\" },\n]\nconst chartConfig = {\nvisitors: {\nlabel: \"Total Visitors\",\n},\nchrome: {\nlabel: \"Chrome\",\ncolor: \"hsl(var(--chart-1))\",\n},\nsafari: {\nlabel: \"Safari\",\ncolor: \"hsl(var(--chart-2))\",\n},\n} satisfies ChartConfig\nCopy<ChartTooltip\ncontent={<ChartTooltipContent labelKey=\"visitors\" nameKey=\"browser\" />}\n/>\nThis will use Total Visitors for label and Chrome and Safari for the tooltip names Legend\nYou can use the custom <ChartLegend> and <ChartLegendContent> components to add a legend to your chart Copyimport { ChartLegend, ChartLegendContent } from \"@/components/ui/chart\"\nCopy<ChartLegend content={<ChartLegendContent />} />\nColors\nColors are automatically referenced from the chart config Custom\nTo use a custom key for legend names, use the nameKey prop",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1407472,
      "relative_path": "documentation\\shadcn\\_docs_components_chart.html",
      "source_type": "documentation"
    },
    "token_count": 476,
    "chunk_index": 26,
    "total_chunks": 28
  },
  {
    "id": "96cdc11c38e153e8220dbe64d39d80dc",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_chart.html",
    "source_type": "documentation",
    "title": "Chart - shadcn/ui",
    "content": "\"hsl(var(--chart-2))\", }, } satisfies ChartConfig Copy<ChartTooltip content={<ChartTooltipContent labelKey=\"visitors\" nameKey=\"browser\" />} /> This will use Total Visitors for label and Chrome and Safari for the tooltip names Legend You can use the custom <ChartLegend> and <ChartLegendContent> components to add a legend to your chart Copyimport { ChartLegend, ChartLegendContent } from \"@/components/ui/chart\" Copy<ChartLegend content={<ChartLegendContent />} /> Colors Colors are automatically referenced from the chart config Custom To use a custom key for legend names, use the nameKey propCopyconst chartData = [\n{ browser: \"chrome\", visitors: 187, fill: \"var(--color-chrome)\" },\n{ browser: \"safari\", visitors: 200, fill: \"var(--color-safari)\" },\n]\nconst chartConfig = {\nchrome: {\nlabel: \"Chrome\",\ncolor: \"hsl(var(--chart-1))\",\n},\nsafari: {\nlabel: \"Safari\",\ncolor: \"hsl(var(--chart-2))\",\n},\n} satisfies ChartConfig\nCopy<ChartLegend content={<ChartLegendContent nameKey=\"browser\" />} />\nThis will use Chrome and Safari for the legend names Accessibility\nYou can turn on the accessibilityLayer prop to add an accessible layer to your chart This prop adds keyboard access and screen reader support to your charts Copy<LineChart accessibilityLayer /> CarouselCheckbox On This PageComponentInstallationYour First ChartAdd a GridAdd an AxisAdd TooltipAdd LegendChart ConfigThemingCSS Variableshex, hsl or oklchUsing ColorsComponentsChart DataTailwindTooltipPropsColorsCustomLegendColorsCustomAccessibilityDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1407472,
      "relative_path": "documentation\\shadcn\\_docs_components_chart.html",
      "source_type": "documentation"
    },
    "token_count": 404,
    "chunk_index": 27,
    "total_chunks": 28
  },
  {
    "id": "ddc748804ea8db15a0f2480f6b78b0ca",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_dialog.html",
    "source_type": "documentation",
    "title": "Dialog - shadcn/ui",
    "content": "Dialog - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonDialogCopy PagePreviousNextA window overlaid on either the primary window or another dialog window, rendering the content underneath inert Docs API Reference PreviewCodeOpen DialogCopyimport { Button } from \"@/components/ui/button\"\nimport {\nDialog,\nDialogClose,\nDialogContent,\nDialogDescription,\nDialogFooter,\nDialogHeader,\nDialogTitle,\nDialogTrigger,\n} from \"@/components/ui/dialog\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nexport function DialogDemo() {\nreturn (\n<Dialog>\n<form>\n<DialogTrigger asChild>\n<Button variant=\"outline\">Open Dialog</Button>\n</DialogTrigger>\n<DialogContent className=\"sm:max-w-[425px]\">\n<DialogHeader>\n<DialogTitle>Edit profile</DialogTitle>\n<DialogDescription>\nMake changes to your profile here Click save when you&apos;re\ndone",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 516555,
      "relative_path": "documentation\\shadcn\\_docs_components_dialog.html",
      "source_type": "documentation"
    },
    "token_count": 347,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "229d6c564d3c4d5c79c3fce2c2a59a62",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_dialog.html",
    "source_type": "documentation",
    "title": "Dialog - shadcn/ui",
    "content": "window or another dialog window, rendering the content underneath inert Docs API Reference PreviewCodeOpen DialogCopyimport { Button } from \"@/components/ui/button\" import { Dialog, DialogClose, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger, } from \"@/components/ui/dialog\" import { Input } from \"@/components/ui/input\" import { Label } from \"@/components/ui/label\" export function DialogDemo() { return ( <Dialog> <form> <DialogTrigger asChild> <Button variant=\"outline\">Open Dialog</Button> </DialogTrigger> <DialogContent className=\"sm:max-w-[425px]\"> <DialogHeader> <DialogTitle>Edit profile</DialogTitle> <DialogDescription> Make changes to your profile here Click save when you&apos;re done</DialogDescription>\n</DialogHeader>\n<div className=\"grid gap-4\">\n<div className=\"grid gap-3\">\n<Label htmlFor=\"name-1\">Name</Label>\n<Input id=\"name-1\" name=\"name\" defaultValue=\"Pedro Duarte\" />\n</div>\n<div className=\"grid gap-3\">\n<Label htmlFor=\"username-1\">Username</Label>\n<Input id=\"username-1\" name=\"username\" defaultValue=\"@peduarte\" />\n</div>\n</div>\n<DialogFooter>\n<DialogClose asChild>\n<Button variant=\"outline\">Cancel</Button>\n</DialogClose>\n<Button type=\"submit\">Save changes</Button>\n</DialogFooter>\n</DialogContent>\n</form>\n</Dialog>\n)\n}\nInstallation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add dialogCopy\nUsage\nCopyimport {\nDialog,\nDialogContent,\nDialogDescription,\nDialogHeader,\nDialogTitle,\nDialogTrigger,\n} from \"@/components/ui/dialog\"\nCopy<Dialog>\n<DialogTrigger>Open</DialogTrigger>\n<DialogContent>\n<DialogHeader>\n<DialogTitle>Are you absolutely sure </DialogTitle>\n<DialogDescription>\nThis action cannot be undone This will permanently delete your account\nand remove your data from our servers",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 516555,
      "relative_path": "documentation\\shadcn\\_docs_components_dialog.html",
      "source_type": "documentation"
    },
    "token_count": 412,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "2385b7ded16fbea68d44c77cc0ed0990",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_dialog.html",
    "source_type": "documentation",
    "title": "Dialog - shadcn/ui",
    "content": "Duarte\" /> </div> <div className=\"grid gap-3\"> <Label htmlFor=\"username-1\">Username</Label> <Input id=\"username-1\" name=\"username\" defaultValue=\"@peduarte\" /> </div> </div> <DialogFooter> <DialogClose asChild> <Button variant=\"outline\">Cancel</Button> </DialogClose> <Button type=\"submit\">Save changes</Button> </DialogFooter> </DialogContent> </form> </Dialog> ) } Installation CLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add dialogCopy Usage Copyimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger, } from \"@/components/ui/dialog\" Copy<Dialog> <DialogTrigger>Open</DialogTrigger> <DialogContent> <DialogHeader> <DialogTitle>Are you absolutely sure </DialogTitle> <DialogDescription> This action cannot be undone This will permanently delete your account and remove your data from our servers</DialogDescription>\n</DialogHeader>\n</DialogContent>\n</Dialog>\nExamples\nCustom close button\nPreviewCodeShareCopyimport { Button } from \"@/components/ui/button\"\nimport {\nDialog,\nDialogClose,\nDialogContent,\nDialogDescription,\nDialogFooter,\nDialogHeader,\nDialogTitle,\nDialogTrigger,\n} from \"@/components/ui/dialog\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nexport function DialogCloseButton() {\nreturn (\n<Dialog>\n<DialogTrigger asChild>\n<Button variant=\"outline\">Share</Button>\n</DialogTrigger>\n<DialogContent className=\"sm:max-w-md\">\n<DialogHeader>\n<DialogTitle>Share link</DialogTitle>\n<DialogDescription>\nAnyone who has this link will be able to view this </DialogDescription>\n</DialogHeader>\n<div className=\"flex items-center gap-2\">\n<div className=\"grid flex-1 gap-2\">\n<Label htmlFor=\"link\" className=\"sr-only\">\nLink\n</Label>\n<Input\nid=\"link\"\ndefaultValue=\"https://ui shadcn",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 516555,
      "relative_path": "documentation\\shadcn\\_docs_components_dialog.html",
      "source_type": "documentation"
    },
    "token_count": 416,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "42ac791c2fb73a1de7a0b43997d46390",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_dialog.html",
    "source_type": "documentation",
    "title": "Dialog - shadcn/ui",
    "content": "} from \"@/components/ui/button\" import { Dialog, DialogClose, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger, } from \"@/components/ui/dialog\" import { Input } from \"@/components/ui/input\" import { Label } from \"@/components/ui/label\" export function DialogCloseButton() { return ( <Dialog> <DialogTrigger asChild> <Button variant=\"outline\">Share</Button> </DialogTrigger> <DialogContent className=\"sm:max-w-md\"> <DialogHeader> <DialogTitle>Share link</DialogTitle> <DialogDescription> Anyone who has this link will be able to view this </DialogDescription> </DialogHeader> <div className=\"flex items-center gap-2\"> <div className=\"grid flex-1 gap-2\"> <Label htmlFor=\"link\" className=\"sr-only\"> Link </Label> <Input id=\"link\" defaultValue=\"https://ui shadcncom/docs/installation\"\nreadOnly\n/>\n</div>\n</div>\n<DialogFooter className=\"sm:justify-start\">\n<DialogClose asChild>\n<Button type=\"button\" variant=\"secondary\">\nClose\n</Button>\n</DialogClose>\n</DialogFooter>\n</DialogContent>\n</Dialog>\n)\n}\nNotes\nTo use the Dialog component from within a Context Menu or Dropdown Menu, you must encase the Context Menu or\nDropdown Menu component in the Dialog component components/example-dialog-context-menu tsxCopy<Dialog>\n<ContextMenu>\n<ContextMenuTrigger>Right click</ContextMenuTrigger>\n<ContextMenuContent>\n<ContextMenuItem>Open</ContextMenuItem>\n<ContextMenuItem>Download</ContextMenuItem>\n<DialogTrigger asChild>\n<ContextMenuItem>\n<span>Delete</span>\n</ContextMenuItem>\n</DialogTrigger>\n</ContextMenuContent>\n</ContextMenu>\n<DialogContent>\n<DialogHeader>\n<DialogTitle>Are you absolutely sure </DialogTitle>\n<DialogDescription>\nThis action cannot be undone Are you sure you want to permanently\ndelete this file from our servers </DialogDescription>\n</DialogHeader>\n<DialogFooter>\n<Button type=\"submit\">Confirm</Button>\n</DialogFooter>\n</DialogContent>\n</Dialog> Date PickerDrawer On This PageInstallationUsageExamplesCustom close buttonNotesDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 516555,
      "relative_path": "documentation\\shadcn\\_docs_components_dialog.html",
      "source_type": "documentation"
    },
    "token_count": 501,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "739c000a5d49291feb1e0a5540547569",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_drawer.html",
    "source_type": "documentation",
    "title": "Drawer - shadcn/ui",
    "content": "Drawer - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonDrawerCopy PagePreviousNextA drawer component for React Docs PreviewCodeOpen DrawerCopy\"use client\"\nimport * as React from \"react\"\nimport { Minus, Plus } from \"lucide-react\"\nimport { Bar, BarChart, ResponsiveContainer } from \"recharts\"\nimport { Button } from \"@/components/ui/button\"\nimport {\nDrawer,\nDrawerClose,\nDrawerContent,\nDrawerDescription,\nDrawerFooter,\nDrawerHeader,\nDrawerTitle,\nDrawerTrigger,\n} from \"@/components/ui/drawer\"\nconst data = [\n{\ngoal: 400,\n},\n{\ngoal: 300,\n},\n{\ngoal: 200,\n},\n{\ngoal: 300,\n},\n{\ngoal: 200,\n},\n{\ngoal: 278,\n},\n{\ngoal: 189,\n},\n{\ngoal: 239,\n},\n{\ngoal: 300,\n},\n{\ngoal: 200,\n},\n{\ngoal: 278,\n},\n{\ngoal: 189,\n},\n{\ngoal: 349,\n},\n]\nexport function DrawerDemo() {\nconst [goal, setGoal] = React useState(350)\nfunction onClick(adjustment: number) {\nsetGoal(Math max(200, Math min(400, goal + adjustment)))\n}\nreturn (\n<Drawer>\n<DrawerTrigger asChild>\n<Button variant=\"outline\">Open Drawer</Button>\n</DrawerTrigger>\n<DrawerContent>\n<div className=\"mx-auto w-full max-w-sm\">\n<DrawerHeader>\n<DrawerTitle>Move Goal</DrawerTitle>\n<DrawerDescription>Set your daily activity goal",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 541361,
      "relative_path": "documentation\\shadcn\\_docs_components_drawer.html",
      "source_type": "documentation"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "2c5d69910bd3a11896db483b53f4884e",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_drawer.html",
    "source_type": "documentation",
    "title": "Drawer - shadcn/ui",
    "content": "goal: 278, }, { goal: 189, }, { goal: 239, }, { goal: 300, }, { goal: 200, }, { goal: 278, }, { goal: 189, }, { goal: 349, }, ] export function DrawerDemo() { const [goal, setGoal] = React useState(350) function onClick(adjustment: number) { setGoal(Math max(200, Math min(400, goal + adjustment))) } return ( <Drawer> <DrawerTrigger asChild> <Button variant=\"outline\">Open Drawer</Button> </DrawerTrigger> <DrawerContent> <div className=\"mx-auto w-full max-w-sm\"> <DrawerHeader> <DrawerTitle>Move Goal</DrawerTitle> <DrawerDescription>Set your daily activity goal</DrawerDescription>\n</DrawerHeader>\n<div className=\"p-4 pb-0\">\n<div className=\"flex items-center justify-center space-x-2\">\n<Button\nvariant=\"outline\"\nsize=\"icon\"\nclassName=\"h-8 w-8 shrink-0 rounded-full\"\nonClick={() => onClick(-10)}\ndisabled={goal <= 200}\n>\n<Minus />\n<span className=\"sr-only\">Decrease</span>\n</Button>\n<div className=\"flex-1 text-center\">\n<div className=\"text-7xl font-bold tracking-tighter\">\n{goal}\n</div>\n<div className=\"text-muted-foreground text-[0 70rem] uppercase\">\nCalories/day\n</div>\n</div>\n<Button\nvariant=\"outline\"\nsize=\"icon\"\nclassName=\"h-8 w-8 shrink-0 rounded-full\"\nonClick={() => onClick(10)}\ndisabled={goal >= 400}\n>\n<Plus />\n<span className=\"sr-only\">Increase</span>\n</Button>\n</div>\n<div className=\"mt-3 h-[120px]\">\n<ResponsiveContainer width=\"100%\" height=\"100%\">\n<BarChart data={data}>\n<Bar\ndataKey=\"goal\"\nstyle={\n{\nfill: \"hsl(var(--foreground))\",\nopacity: 0 9,\n} as React",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 541361,
      "relative_path": "documentation\\shadcn\\_docs_components_drawer.html",
      "source_type": "documentation"
    },
    "token_count": 426,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "77133c242f15bc0479a4d8854244ea64",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_drawer.html",
    "source_type": "documentation",
    "title": "Drawer - shadcn/ui",
    "content": "<Button variant=\"outline\" size=\"icon\" className=\"h-8 w-8 shrink-0 rounded-full\" onClick={() => onClick(-10)} disabled={goal <= 200} > <Minus /> <span className=\"sr-only\">Decrease</span> </Button> <div className=\"flex-1 text-center\"> <div className=\"text-7xl font-bold tracking-tighter\"> {goal} </div> <div className=\"text-muted-foreground text-[0 70rem] uppercase\"> Calories/day </div> </div> <Button variant=\"outline\" size=\"icon\" className=\"h-8 w-8 shrink-0 rounded-full\" onClick={() => onClick(10)} disabled={goal >= 400} > <Plus /> <span className=\"sr-only\">Increase</span> </Button> </div> <div className=\"mt-3 h-[120px]\"> <ResponsiveContainer width=\"100%\" height=\"100%\"> <BarChart data={data}> <Bar dataKey=\"goal\" style={ { fill: \"hsl(var(--foreground))\", opacity: 0 9, } as ReactCSSProperties\n}\n/>\n</BarChart>\n</ResponsiveContainer>\n</div>\n</div>\n<DrawerFooter>\n<Button>Submit</Button>\n<DrawerClose asChild>\n<Button variant=\"outline\">Cancel</Button>\n</DrawerClose>\n</DrawerFooter>\n</div>\n</DrawerContent>\n</Drawer>\n)\n}\nAbout\nDrawer is built on top of Vaul by emilkowalski_ Installation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add drawerCopy\nUsage\nCopyimport {\nDrawer,\nDrawerClose,\nDrawerContent,\nDrawerDescription,\nDrawerFooter,\nDrawerHeader,\nDrawerTitle,\nDrawerTrigger,\n} from \"@/components/ui/drawer\"\nCopy<Drawer>\n<DrawerTrigger>Open</DrawerTrigger>\n<DrawerContent>\n<DrawerHeader>\n<DrawerTitle>Are you absolutely sure </DrawerTitle>\n<DrawerDescription>This action cannot be undone </DrawerDescription>\n</DrawerHeader>\n<DrawerFooter>\n<Button>Submit</Button>\n<DrawerClose>\n<Button variant=\"outline\">Cancel</Button>\n</DrawerClose>\n</DrawerFooter>\n</DrawerContent>\n</Drawer>\nExamples\nResponsive Dialog\nYou can combine the Dialog and Drawer components to create a responsive dialog This renders a Dialog component on desktop and a Drawer on mobile",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 541361,
      "relative_path": "documentation\\shadcn\\_docs_components_drawer.html",
      "source_type": "documentation"
    },
    "token_count": 489,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "0725d9c8d1b40ec560d2150fe7458e19",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_drawer.html",
    "source_type": "documentation",
    "title": "Drawer - shadcn/ui",
    "content": "Vaul by emilkowalski_ Installation CLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add drawerCopy Usage Copyimport { Drawer, DrawerClose, DrawerContent, DrawerDescription, DrawerFooter, DrawerHeader, DrawerTitle, DrawerTrigger, } from \"@/components/ui/drawer\" Copy<Drawer> <DrawerTrigger>Open</DrawerTrigger> <DrawerContent> <DrawerHeader> <DrawerTitle>Are you absolutely sure </DrawerTitle> <DrawerDescription>This action cannot be undone </DrawerDescription> </DrawerHeader> <DrawerFooter> <Button>Submit</Button> <DrawerClose> <Button variant=\"outline\">Cancel</Button> </DrawerClose> </DrawerFooter> </DrawerContent> </Drawer> Examples Responsive Dialog You can combine the Dialog and Drawer components to create a responsive dialog This renders a Dialog component on desktop and a Drawer on mobilePreviewCodeEdit ProfileCopy\"use client\"\nimport * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\nimport { useMediaQuery } from \"@/hooks/use-media-query\"\nimport { Button } from \"@/components/ui/button\"\nimport {\nDialog,\nDialogContent,\nDialogDescription,\nDialogHeader,\nDialogTitle,\nDialogTrigger,\n} from \"@/components/ui/dialog\"\nimport {\nDrawer,\nDrawerClose,\nDrawerContent,\nDrawerDescription,\nDrawerFooter,\nDrawerHeader,\nDrawerTitle,\nDrawerTrigger,\n} from \"@/components/ui/drawer\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nexport function DrawerDialogDemo() {\nconst [open, setOpen] = React useState(false)\nconst isDesktop = useMediaQuery(\"(min-width: 768px)\")\nif (isDesktop) {\nreturn (\n<Dialog open={open} onOpenChange={setOpen}>\n<DialogTrigger asChild>\n<Button variant=\"outline\">Edit Profile</Button>\n</DialogTrigger>\n<DialogContent className=\"sm:max-w-[425px]\">\n<DialogHeader>\n<DialogTitle>Edit profile</DialogTitle>\n<DialogDescription>\nMake changes to your profile here Click save when you&apos;re\ndone",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 541361,
      "relative_path": "documentation\\shadcn\\_docs_components_drawer.html",
      "source_type": "documentation"
    },
    "token_count": 425,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "5c3321eaa152a49bb888b383f082c4ba",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_drawer.html",
    "source_type": "documentation",
    "title": "Drawer - shadcn/ui",
    "content": "DialogTitle, DialogTrigger, } from \"@/components/ui/dialog\" import { Drawer, DrawerClose, DrawerContent, DrawerDescription, DrawerFooter, DrawerHeader, DrawerTitle, DrawerTrigger, } from \"@/components/ui/drawer\" import { Input } from \"@/components/ui/input\" import { Label } from \"@/components/ui/label\" export function DrawerDialogDemo() { const [open, setOpen] = React useState(false) const isDesktop = useMediaQuery(\"(min-width: 768px)\") if (isDesktop) { return ( <Dialog open={open} onOpenChange={setOpen}> <DialogTrigger asChild> <Button variant=\"outline\">Edit Profile</Button> </DialogTrigger> <DialogContent className=\"sm:max-w-[425px]\"> <DialogHeader> <DialogTitle>Edit profile</DialogTitle> <DialogDescription> Make changes to your profile here Click save when you&apos;re done</DialogDescription>\n</DialogHeader>\n<ProfileForm />\n</DialogContent>\n</Dialog>\n)\n}\nreturn (\n<Drawer open={open} onOpenChange={setOpen}>\n<DrawerTrigger asChild>\n<Button variant=\"outline\">Edit Profile</Button>\n</DrawerTrigger>\n<DrawerContent>\n<DrawerHeader className=\"text-left\">\n<DrawerTitle>Edit profile</DrawerTitle>\n<DrawerDescription>\nMake changes to your profile here Click save when you&apos;re done </DrawerDescription>\n</DrawerHeader>\n<ProfileForm className=\"px-4\" />\n<DrawerFooter className=\"pt-2\">\n<DrawerClose asChild>\n<Button variant=\"outline\">Cancel</Button>\n</DrawerClose>\n</DrawerFooter>\n</DrawerContent>\n</Drawer>\n)\n}\nfunction ProfileForm({ className }: React ComponentProps<\"form\">) {\nreturn (\n<form className={cn(\"grid items-start gap-6\", className)}>\n<div className=\"grid gap-3\">\n<Label htmlFor=\"email\">Email</Label>\n<Input type=\"email\" id=\"email\" defaultValue=\"shadcn@example com\" />\n</div>\n<div className=\"grid gap-3\">\n<Label htmlFor=\"username\">Username</Label>\n<Input id=\"username\" defaultValue=\"@shadcn\" />\n</div>\n<Button type=\"submit\">Save changes</Button>\n</form>\n)\n}\nDialogDropdown Menu On This PageAboutInstallationUsageExamplesResponsive DialogDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 541361,
      "relative_path": "documentation\\shadcn\\_docs_components_drawer.html",
      "source_type": "documentation"
    },
    "token_count": 488,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "55acae8fff58727b4091bb5b605ea07c",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_drawer.html",
    "source_type": "documentation",
    "title": "Drawer - shadcn/ui",
    "content": "</DrawerDescription> </DrawerHeader> <ProfileForm className=\"px-4\" /> <DrawerFooter className=\"pt-2\"> <DrawerClose asChild> <Button variant=\"outline\">Cancel</Button> </DrawerClose> </DrawerFooter> </DrawerContent> </Drawer> ) } function ProfileForm({ className }: React ComponentProps<\"form\">) { return ( <form className={cn(\"grid items-start gap-6\", className)}> <div className=\"grid gap-3\"> <Label htmlFor=\"email\">Email</Label> <Input type=\"email\" id=\"email\" defaultValue=\"shadcn@example com\" /> </div> <div className=\"grid gap-3\"> <Label htmlFor=\"username\">Username</Label> <Input id=\"username\" defaultValue=\"@shadcn\" /> </div> <Button type=\"submit\">Save changes</Button> </form> ) } DialogDropdown Menu On This PageAboutInstallationUsageExamplesResponsive DialogDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and moreVercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 541361,
      "relative_path": "documentation\\shadcn\\_docs_components_drawer.html",
      "source_type": "documentation"
    },
    "token_count": 256,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "c137f51acf707079b07204f1a82b7b1d",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_date-picker.html",
    "source_type": "documentation",
    "title": "Date Picker - shadcn/ui",
    "content": "Date Picker - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonDate PickerCopy PagePreviousNextA date picker component with range and presets PreviewCodeDate of birthSelect dateCopy\"use client\"\nimport * as React from \"react\"\nimport { ChevronDownIcon } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Calendar } from \"@/components/ui/calendar\"\nimport { Label } from \"@/components/ui/label\"\nimport {\nPopover,\nPopoverContent,\nPopoverTrigger,\n} from \"@/components/ui/popover\"\nexport function Calendar22() {\nconst [open, setOpen] = React useState(false)\nconst [date, setDate] = React useState<Date | undefined>(undefined)\nreturn (\n<div className=\"flex flex-col gap-3\">\n<Label htmlFor=\"date\" className=\"px-1\">\nDate of birth\n</Label>\n<Popover open={open} onOpenChange={setOpen}>\n<PopoverTrigger asChild>\n<Button\nvariant=\"outline\"\nid=\"date\"\nclassName=\"w-48 justify-between font-normal\"\n>\n{date date toLocaleDateString() : \"Select date\"}\n<ChevronDownIcon />\n</Button>\n</PopoverTrigger>\n<PopoverContent className=\"w-auto overflow-hidden p-0\" align=\"start\">\n<Calendar\nmode=\"single\"\nselected={date}\ncaptionLayout=\"dropdown\"\nonSelect={(date) => {\nsetDate(date)\nsetOpen(false)\n}}\n/>\n</PopoverContent>\n</Popover>\n</div>\n)\n}\nInstallation\nThe Date Picker is built using a composition of the <Popover /> and the <Calendar /> components See installation instructions for the Popover and the Calendar components",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 686081,
      "relative_path": "documentation\\shadcn\\_docs_components_date-picker.html",
      "source_type": "documentation"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 10
  },
  {
    "id": "ab858353adccfb8115b0e4d89e4de001",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_date-picker.html",
    "source_type": "documentation",
    "title": "Date Picker - shadcn/ui",
    "content": "className=\"px-1\"> Date of birth </Label> <Popover open={open} onOpenChange={setOpen}> <PopoverTrigger asChild> <Button variant=\"outline\" id=\"date\" className=\"w-48 justify-between font-normal\" > {date date toLocaleDateString() : \"Select date\"} <ChevronDownIcon /> </Button> </PopoverTrigger> <PopoverContent className=\"w-auto overflow-hidden p-0\" align=\"start\"> <Calendar mode=\"single\" selected={date} captionLayout=\"dropdown\" onSelect={(date) => { setDate(date) setOpen(false) }} /> </PopoverContent> </Popover> </div> ) } Installation The Date Picker is built using a composition of the <Popover /> and the <Calendar /> components See installation instructions for the Popover and the Calendar componentsUsage\ncomponents/example-date-picker tsxCopy\"use client\"\nimport * as React from \"react\"\nimport { format } from \"date-fns\"\nimport { Calendar as CalendarIcon } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Calendar } from \"@/components/ui/calendar\"\nimport {\nPopover,\nPopoverContent,\nPopoverTrigger,\n} from \"@/components/ui/popover\"\nexport function DatePickerDemo() {\nconst [date, setDate] = React useState<Date>()\nreturn (\n<Popover>\n<PopoverTrigger asChild>\n<Button\nvariant=\"outline\"\ndata-empty={ date}\nclassName=\"data-[empty=true]:text-muted-foreground w-[280px] justify-start text-left font-normal\"\n>\n<CalendarIcon />\n{date format(date, \"PPP\") : <span>Pick a date</span>}\n</Button>\n</PopoverTrigger>\n<PopoverContent className=\"w-auto p-0\">\n<Calendar mode=\"single\" selected={date} onSelect={setDate} />\n</PopoverContent>\n</Popover>\n)\n}\nSee the React DayPicker documentation for more information Examples\nDate of Birth Picker\nPreviewCodeDate of birthSelect dateCopy\"use client\"\nimport * as React from \"react\"\nimport { ChevronDownIcon } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Calendar } from \"@/components/ui/calendar\"\nimport { Label } from \"@/components/ui/label\"\nimport {\nPopover,\nPopoverContent,\nPopoverTrigger,\n} from \"@/components/ui/popover\"\nexport function Calendar22() {\nconst [open, setOpen] = React",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 686081,
      "relative_path": "documentation\\shadcn\\_docs_components_date-picker.html",
      "source_type": "documentation"
    },
    "token_count": 496,
    "chunk_index": 1,
    "total_chunks": 10
  },
  {
    "id": "fbd251231025bde03a1143b631d5644d",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_date-picker.html",
    "source_type": "documentation",
    "title": "Date Picker - shadcn/ui",
    "content": "className=\"w-auto p-0\"> <Calendar mode=\"single\" selected={date} onSelect={setDate} /> </PopoverContent> </Popover> ) } See the React DayPicker documentation for more information Examples Date of Birth Picker PreviewCodeDate of birthSelect dateCopy\"use client\" import * as React from \"react\" import { ChevronDownIcon } from \"lucide-react\" import { Button } from \"@/components/ui/button\" import { Calendar } from \"@/components/ui/calendar\" import { Label } from \"@/components/ui/label\" import { Popover, PopoverContent, PopoverTrigger, } from \"@/components/ui/popover\" export function Calendar22() { const [open, setOpen] = ReactuseState(false)\nconst [date, setDate] = React useState<Date | undefined>(undefined)\nreturn (\n<div className=\"flex flex-col gap-3\">\n<Label htmlFor=\"date\" className=\"px-1\">\nDate of birth\n</Label>\n<Popover open={open} onOpenChange={setOpen}>\n<PopoverTrigger asChild>\n<Button\nvariant=\"outline\"\nid=\"date\"\nclassName=\"w-48 justify-between font-normal\"\n>\n{date date toLocaleDateString() : \"Select date\"}\n<ChevronDownIcon />\n</Button>\n</PopoverTrigger>\n<PopoverContent className=\"w-auto overflow-hidden p-0\" align=\"start\">\n<Calendar\nmode=\"single\"\nselected={date}\ncaptionLayout=\"dropdown\"\nonSelect={(date) => {\nsetDate(date)\nsetOpen(false)\n}}\n/>\n</PopoverContent>\n</Popover>\n</div>\n)\n}\nPicker with Input\nPreviewCodeSubscription DateSelect dateCopy\"use client\"\nimport * as React from \"react\"\nimport { CalendarIcon } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Calendar } from \"@/components/ui/calendar\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport {\nPopover,\nPopoverContent,\nPopoverTrigger,\n} from \"@/components/ui/popover\"\nfunction formatDate(date: Date | undefined) {\nif ( date) {\nreturn \"\"\n}\nreturn date toLocaleDateString(\"en-US\", {\nday: \"2-digit\",\nmonth: \"long\",\nyear: \"numeric\",\n})\n}\nfunction isValidDate(date: Date | undefined) {\nif ( date) {\nreturn false\n}\nreturn isNaN(date getTime())\n}\nexport function Calendar28() {\nconst [open, setOpen] = React",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 686081,
      "relative_path": "documentation\\shadcn\\_docs_components_date-picker.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 2,
    "total_chunks": 10
  },
  {
    "id": "20a565a1ed65c5e16ac6971378bf2f93",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_date-picker.html",
    "source_type": "documentation",
    "title": "Date Picker - shadcn/ui",
    "content": "{ Calendar } from \"@/components/ui/calendar\" import { Input } from \"@/components/ui/input\" import { Label } from \"@/components/ui/label\" import { Popover, PopoverContent, PopoverTrigger, } from \"@/components/ui/popover\" function formatDate(date: Date | undefined) { if ( date) { return \"\" } return date toLocaleDateString(\"en-US\", { day: \"2-digit\", month: \"long\", year: \"numeric\", }) } function isValidDate(date: Date | undefined) { if ( date) { return false } return isNaN(date getTime()) } export function Calendar28() { const [open, setOpen] = ReactuseState(false)\nconst [date, setDate] = React useState<Date | undefined>(\nnew Date(\"2025-06-01\")\n)\nconst [month, setMonth] = React useState<Date | undefined>(date)\nconst [value, setValue] = React useState(formatDate(date))\nreturn (\n<div className=\"flex flex-col gap-3\">\n<Label htmlFor=\"date\" className=\"px-1\">\nSubscription Date\n</Label>\n<div className=\"relative flex gap-2\">\n<Input\nid=\"date\"\nvalue={value}\nplaceholder=\"June 01, 2025\"\nclassName=\"bg-background pr-10\"\nonChange={(e) => {\nconst date = new Date(e target value)\nsetValue(e target value)\nif (isValidDate(date)) {\nsetDate(date)\nsetMonth(date)\n}\n}}\nonKeyDown={(e) => {\nif (e key === \"ArrowDown\") {\ne preventDefault()\nsetOpen(true)\n}\n}}\n/>\n<Popover open={open} onOpenChange={setOpen}>\n<PopoverTrigger asChild>\n<Button\nid=\"date-picker\"\nvariant=\"ghost\"\nclassName=\"absolute top-1/2 right-2 size-6 -translate-y-1/2\"\n>\n<CalendarIcon className=\"size-3",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 686081,
      "relative_path": "documentation\\shadcn\\_docs_components_date-picker.html",
      "source_type": "documentation"
    },
    "token_count": 383,
    "chunk_index": 3,
    "total_chunks": 10
  },
  {
    "id": "f3ff97706f4496d0b75e7cb44a2deb70",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_date-picker.html",
    "source_type": "documentation",
    "title": "Date Picker - shadcn/ui",
    "content": "useState(formatDate(date)) return ( <div className=\"flex flex-col gap-3\"> <Label htmlFor=\"date\" className=\"px-1\"> Subscription Date </Label> <div className=\"relative flex gap-2\"> <Input id=\"date\" value={value} placeholder=\"June 01, 2025\" className=\"bg-background pr-10\" onChange={(e) => { const date = new Date(e target value) setValue(e target value) if (isValidDate(date)) { setDate(date) setMonth(date) } }} onKeyDown={(e) => { if (e key === \"ArrowDown\") { e preventDefault() setOpen(true) } }} /> <Popover open={open} onOpenChange={setOpen}> <PopoverTrigger asChild> <Button id=\"date-picker\" variant=\"ghost\" className=\"absolute top-1/2 right-2 size-6 -translate-y-1/2\" > <CalendarIcon className=\"size-35\" />\n<span className=\"sr-only\">Select date</span>\n</Button>\n</PopoverTrigger>\n<PopoverContent\nclassName=\"w-auto overflow-hidden p-0\"\nalign=\"end\"\nalignOffset={-8}\nsideOffset={10}\n>\n<Calendar\nmode=\"single\"\nselected={date}\ncaptionLayout=\"dropdown\"\nmonth={month}\nonMonthChange={setMonth}\nonSelect={(date) => {\nsetDate(date)\nsetValue(formatDate(date))\nsetOpen(false)\n}}\n/>\n</PopoverContent>\n</Popover>\n</div>\n</div>\n)\n}\nDate and Time Picker\nPreviewCodeDateSelect dateTimeCopy\"use client\"\nimport * as React from \"react\"\nimport { ChevronDownIcon } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Calendar } from \"@/components/ui/calendar\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport {\nPopover,\nPopoverContent,\nPopoverTrigger,\n} from \"@/components/ui/popover\"\nexport function Calendar24() {\nconst [open, setOpen] = React useState(false)\nconst [date, setDate] = React",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 686081,
      "relative_path": "documentation\\shadcn\\_docs_components_date-picker.html",
      "source_type": "documentation"
    },
    "token_count": 429,
    "chunk_index": 4,
    "total_chunks": 10
  },
  {
    "id": "87b9ad3354b58591a9ca9c1ff2fc60ed",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_date-picker.html",
    "source_type": "documentation",
    "title": "Date Picker - shadcn/ui",
    "content": "setValue(formatDate(date)) setOpen(false) }} /> </PopoverContent> </Popover> </div> </div> ) } Date and Time Picker PreviewCodeDateSelect dateTimeCopy\"use client\" import * as React from \"react\" import { ChevronDownIcon } from \"lucide-react\" import { Button } from \"@/components/ui/button\" import { Calendar } from \"@/components/ui/calendar\" import { Input } from \"@/components/ui/input\" import { Label } from \"@/components/ui/label\" import { Popover, PopoverContent, PopoverTrigger, } from \"@/components/ui/popover\" export function Calendar24() { const [open, setOpen] = React useState(false) const [date, setDate] = ReactuseState<Date | undefined>(undefined)\nreturn (\n<div className=\"flex gap-4\">\n<div className=\"flex flex-col gap-3\">\n<Label htmlFor=\"date-picker\" className=\"px-1\">\nDate\n</Label>\n<Popover open={open} onOpenChange={setOpen}>\n<PopoverTrigger asChild>\n<Button\nvariant=\"outline\"\nid=\"date-picker\"\nclassName=\"w-32 justify-between font-normal\"\n>\n{date date toLocaleDateString() : \"Select date\"}\n<ChevronDownIcon />\n</Button>\n</PopoverTrigger>\n<PopoverContent className=\"w-auto overflow-hidden p-0\" align=\"start\">\n<Calendar\nmode=\"single\"\nselected={date}\ncaptionLayout=\"dropdown\"\nonSelect={(date) => {\nsetDate(date)\nsetOpen(false)\n}}\n/>\n</PopoverContent>\n</Popover>\n</div>\n<div className=\"flex flex-col gap-3\">\n<Label htmlFor=\"time-picker\" className=\"px-1\">\nTime\n</Label>\n<Input\ntype=\"time\"\nid=\"time-picker\"\nstep=\"1\"\ndefaultValue=\"10:30:00\"\nclassName=\"bg-background appearance-none [&::-webkit-calendar-picker-indicator]:hidden [&::-webkit-calendar-picker-indicator]:appearance-none\"\n/>\n</div>\n</div>\n)\n}\nNatural Language Picker\nThis component uses the chrono-node library to parse natural language dates PreviewCodeSchedule DateSelect dateYour post will be published on August 15, 2025",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 686081,
      "relative_path": "documentation\\shadcn\\_docs_components_date-picker.html",
      "source_type": "documentation"
    },
    "token_count": 438,
    "chunk_index": 5,
    "total_chunks": 10
  },
  {
    "id": "d1074d5d96b038ad20e1b7ec4925caf1",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_date-picker.html",
    "source_type": "documentation",
    "title": "Date Picker - shadcn/ui",
    "content": "date toLocaleDateString() : \"Select date\"} <ChevronDownIcon /> </Button> </PopoverTrigger> <PopoverContent className=\"w-auto overflow-hidden p-0\" align=\"start\"> <Calendar mode=\"single\" selected={date} captionLayout=\"dropdown\" onSelect={(date) => { setDate(date) setOpen(false) }} /> </PopoverContent> </Popover> </div> <div className=\"flex flex-col gap-3\"> <Label htmlFor=\"time-picker\" className=\"px-1\"> Time </Label> <Input type=\"time\" id=\"time-picker\" step=\"1\" defaultValue=\"10:30:00\" className=\"bg-background appearance-none [&::-webkit-calendar-picker-indicator]:hidden [&::-webkit-calendar-picker-indicator]:appearance-none\" /> </div> </div> ) } Natural Language Picker This component uses the chrono-node library to parse natural language dates PreviewCodeSchedule DateSelect dateYour post will be published on August 15, 2025Copy\"use client\"\nimport * as React from \"react\"\nimport { parseDate } from \"chrono-node\"\nimport { CalendarIcon } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Calendar } from \"@/components/ui/calendar\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport {\nPopover,\nPopoverContent,\nPopoverTrigger,\n} from \"@/components/ui/popover\"\nfunction formatDate(date: Date | undefined) {\nif ( date) {\nreturn \"\"\n}\nreturn date toLocaleDateString(\"en-US\", {\nday: \"2-digit\",\nmonth: \"long\",\nyear: \"numeric\",\n})\n}\nexport function Calendar29() {\nconst [open, setOpen] = React useState(false)\nconst [value, setValue] = React useState(\"In 2 days\")\nconst [date, setDate] = React useState<Date | undefined>(\nparseDate(value) || undefined\n)\nconst [month, setMonth] = React useState<Date | undefined>(date)\nreturn (\n<div className=\"flex flex-col gap-3\">\n<Label htmlFor=\"date\" className=\"px-1\">\nSchedule Date\n</Label>\n<div className=\"relative flex gap-2\">\n<Input\nid=\"date\"\nvalue={value}\nplaceholder=\"Tomorrow or next week\"\nclassName=\"bg-background pr-10\"\nonChange={(e) => {\nsetValue(e target value)\nconst date = parseDate(e target",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 686081,
      "relative_path": "documentation\\shadcn\\_docs_components_date-picker.html",
      "source_type": "documentation"
    },
    "token_count": 488,
    "chunk_index": 6,
    "total_chunks": 10
  },
  {
    "id": "b4671a50a358fb860df2e8597badf91b",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_date-picker.html",
    "source_type": "documentation",
    "title": "Date Picker - shadcn/ui",
    "content": "}) } export function Calendar29() { const [open, setOpen] = React useState(false) const [value, setValue] = React useState(\"In 2 days\") const [date, setDate] = React useState<Date | undefined>( parseDate(value) || undefined ) const [month, setMonth] = React useState<Date | undefined>(date) return ( <div className=\"flex flex-col gap-3\"> <Label htmlFor=\"date\" className=\"px-1\"> Schedule Date </Label> <div className=\"relative flex gap-2\"> <Input id=\"date\" value={value} placeholder=\"Tomorrow or next week\" className=\"bg-background pr-10\" onChange={(e) => { setValue(e target value) const date = parseDate(e targetvalue)\nif (date) {\nsetDate(date)\nsetMonth(date)\n}\n}}\nonKeyDown={(e) => {\nif (e key === \"ArrowDown\") {\ne preventDefault()\nsetOpen(true)\n}\n}}\n/>\n<Popover open={open} onOpenChange={setOpen}>\n<PopoverTrigger asChild>\n<Button\nid=\"date-picker\"\nvariant=\"ghost\"\nclassName=\"absolute top-1/2 right-2 size-6 -translate-y-1/2\"\n>\n<CalendarIcon className=\"size-3 5\" />\n<span className=\"sr-only\">Select date</span>\n</Button>\n</PopoverTrigger>\n<PopoverContent className=\"w-auto overflow-hidden p-0\" align=\"end\">\n<Calendar\nmode=\"single\"\nselected={date}\ncaptionLayout=\"dropdown\"\nmonth={month}\nonMonthChange={setMonth}\nonSelect={(date) => {\nsetDate(date)\nsetValue(formatDate(date))\nsetOpen(false)\n}}\n/>\n</PopoverContent>\n</Popover>\n</div>\n<div className=\"text-muted-foreground px-1 text-sm\">\nYour post will be published on{\" \"}\n<span className=\"font-medium\">{formatDate(date)}</span> </div>\n</div>\n)\n}\nForm\nPreviewCodeDate of birthPick a dateYour date of birth is used to calculate your age",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 686081,
      "relative_path": "documentation\\shadcn\\_docs_components_date-picker.html",
      "source_type": "documentation"
    },
    "token_count": 418,
    "chunk_index": 7,
    "total_chunks": 10
  },
  {
    "id": "ba630865535a6a52dc42b589752ef472",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_date-picker.html",
    "source_type": "documentation",
    "title": "Date Picker - shadcn/ui",
    "content": "open={open} onOpenChange={setOpen}> <PopoverTrigger asChild> <Button id=\"date-picker\" variant=\"ghost\" className=\"absolute top-1/2 right-2 size-6 -translate-y-1/2\" > <CalendarIcon className=\"size-3 5\" /> <span className=\"sr-only\">Select date</span> </Button> </PopoverTrigger> <PopoverContent className=\"w-auto overflow-hidden p-0\" align=\"end\"> <Calendar mode=\"single\" selected={date} captionLayout=\"dropdown\" month={month} onMonthChange={setMonth} onSelect={(date) => { setDate(date) setValue(formatDate(date)) setOpen(false) }} /> </PopoverContent> </Popover> </div> <div className=\"text-muted-foreground px-1 text-sm\"> Your post will be published on{\" \"} <span className=\"font-medium\">{formatDate(date)}</span> </div> </div> ) } Form PreviewCodeDate of birthPick a dateYour date of birth is used to calculate your ageSubmitCopy\"use client\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { format } from \"date-fns\"\nimport { CalendarIcon } from \"lucide-react\"\nimport { useForm } from \"react-hook-form\"\nimport { toast } from \"sonner\"\nimport { z } from \"zod\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Calendar } from \"@/components/ui/calendar\"\nimport {\nForm,\nFormControl,\nFormDescription,\nFormField,\nFormItem,\nFormLabel,\nFormMessage,\n} from \"@/components/ui/form\"\nimport {\nPopover,\nPopoverContent,\nPopoverTrigger,\n} from \"@/components/ui/popover\"\nconst FormSchema = z object({\ndob: z date({\nrequired_error: \"A date of birth is required \",\n}),\n})\nexport function DatePickerForm() {\nconst form = useForm<z infer<typeof FormSchema>>({\nresolver: zodResolver(FormSchema),\n})\nfunction onSubmit(data: z infer<typeof FormSchema>) {\ntoast(\"You submitted the following values\", {\ndescription: (\n<pre className=\"mt-2 w-[320px] rounded-md bg-neutral-950 p-4\">\n<code className=\"text-white\">{JSON stringify(data, null, 2)}</code>\n</pre>\n),\n})\n}\nreturn (\n<Form { form}>\n<form onSubmit={form",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 686081,
      "relative_path": "documentation\\shadcn\\_docs_components_date-picker.html",
      "source_type": "documentation"
    },
    "token_count": 489,
    "chunk_index": 8,
    "total_chunks": 10
  },
  {
    "id": "1cf130664ac3e23d0c0e516d6edabfc8",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_date-picker.html",
    "source_type": "documentation",
    "title": "Date Picker - shadcn/ui",
    "content": "\"@/components/ui/form\" import { Popover, PopoverContent, PopoverTrigger, } from \"@/components/ui/popover\" const FormSchema = z object({ dob: z date({ required_error: \"A date of birth is required \", }), }) export function DatePickerForm() { const form = useForm<z infer<typeof FormSchema>>({ resolver: zodResolver(FormSchema), }) function onSubmit(data: z infer<typeof FormSchema>) { toast(\"You submitted the following values\", { description: ( <pre className=\"mt-2 w-[320px] rounded-md bg-neutral-950 p-4\"> <code className=\"text-white\">{JSON stringify(data, null, 2)}</code> </pre> ), }) } return ( <Form { form}> <form onSubmit={formhandleSubmit(onSubmit)} className=\"space-y-8\">\n<FormField\ncontrol={form control}\nname=\"dob\"\nrender={({ field }) => (\n<FormItem className=\"flex flex-col\">\n<FormLabel>Date of birth</FormLabel>\n<Popover>\n<PopoverTrigger asChild>\n<FormControl>\n<Button\nvariant={\"outline\"}\nclassName={cn(\n\"w-[240px] pl-3 text-left font-normal\", field value && \"text-muted-foreground\"\n)}\n>\n{field value (\nformat(field value, \"PPP\")\n) : (\n<span>Pick a date</span>\n)}\n<CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n</Button>\n</FormControl>\n</PopoverTrigger>\n<PopoverContent className=\"w-auto p-0\" align=\"start\">\n<Calendar\nmode=\"single\"\nselected={field value}\nonSelect={field onChange}\ndisabled={(date) =>\ndate > new Date() || date < new Date(\"1900-01-01\")\n}\ncaptionLayout=\"dropdown\"\n/>\n</PopoverContent>\n</Popover>\n<FormDescription>\nYour date of birth is used to calculate your age </FormDescription>\n<FormMessage />\n</FormItem>\n)}\n/>\n<Button type=\"submit\">Submit</Button>\n</form>\n</Form>\n)\n}\nData TableDialog On This PageInstallationUsageExamplesDate of Birth PickerPicker with InputDate and Time PickerNatural Language PickerFormDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 686081,
      "relative_path": "documentation\\shadcn\\_docs_components_date-picker.html",
      "source_type": "documentation"
    },
    "token_count": 500,
    "chunk_index": 9,
    "total_chunks": 10
  },
  {
    "id": "356e52cdb8d519702954a1480d0ed791",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_hover-card.html",
    "source_type": "documentation",
    "title": "Hover Card - shadcn/ui",
    "content": "Hover Card - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonHover CardCopy PagePreviousNextFor sighted users to preview content available behind a link Docs API Reference PreviewCode@nextjsCopyimport { CalendarIcon } from \"lucide-react\"\nimport {\nAvatar,\nAvatarFallback,\nAvatarImage,\n} from \"@/components/ui/avatar\"\nimport { Button } from \"@/components/ui/button\"\nimport {\nHoverCard,\nHoverCardContent,\nHoverCardTrigger,\n} from \"@/components/ui/hover-card\"\nexport function HoverCardDemo() {\nreturn (\n<HoverCard>\n<HoverCardTrigger asChild>\n<Button variant=\"link\">@nextjs</Button>\n</HoverCardTrigger>\n<HoverCardContent className=\"w-80\">\n<div className=\"flex justify-between gap-4\">\n<Avatar>\n<AvatarImage src=\"https://github com/vercel png\" />\n<AvatarFallback>VC</AvatarFallback>\n</Avatar>\n<div className=\"space-y-1\">\n<h4 className=\"text-sm font-semibold\">@nextjs</h4>\n<p className=\"text-sm\">\nThe React Framework – created and maintained by @vercel",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 384043,
      "relative_path": "documentation\\shadcn\\_docs_components_hover-card.html",
      "source_type": "documentation"
    },
    "token_count": 390,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "f27631afcf6355b9b34f00383ba5952c",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_hover-card.html",
    "source_type": "documentation",
    "title": "Hover Card - shadcn/ui",
    "content": "behind a link Docs API Reference PreviewCode@nextjsCopyimport { CalendarIcon } from \"lucide-react\" import { Avatar, AvatarFallback, AvatarImage, } from \"@/components/ui/avatar\" import { Button } from \"@/components/ui/button\" import { HoverCard, HoverCardContent, HoverCardTrigger, } from \"@/components/ui/hover-card\" export function HoverCardDemo() { return ( <HoverCard> <HoverCardTrigger asChild> <Button variant=\"link\">@nextjs</Button> </HoverCardTrigger> <HoverCardContent className=\"w-80\"> <div className=\"flex justify-between gap-4\"> <Avatar> <AvatarImage src=\"https://github com/vercel png\" /> <AvatarFallback>VC</AvatarFallback> </Avatar> <div className=\"space-y-1\"> <h4 className=\"text-sm font-semibold\">@nextjs</h4> <p className=\"text-sm\"> The React Framework – created and maintained by @vercel</p>\n<div className=\"text-muted-foreground text-xs\">\nJoined December 2021\n</div>\n</div>\n</div>\n</HoverCardContent>\n</HoverCard>\n)\n}\nInstallation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add hover-cardCopy\nUsage\nCopyimport {\nHoverCard,\nHoverCardContent,\nHoverCardTrigger,\n} from \"@/components/ui/hover-card\"\nCopy<HoverCard>\n<HoverCardTrigger>Hover</HoverCardTrigger>\n<HoverCardContent>\nThe React Framework – created and maintained by @vercel </HoverCardContent>\n</HoverCard> React Hook FormInput On This PageInstallationUsageDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 384043,
      "relative_path": "documentation\\shadcn\\_docs_components_hover-card.html",
      "source_type": "documentation"
    },
    "token_count": 398,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "908eae45ed38db3dfe05d9e283bd23f4",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_dropdown-menu.html",
    "source_type": "documentation",
    "title": "Dropdown Menu - shadcn/ui",
    "content": "Dropdown Menu - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonDropdown MenuCopy PagePreviousNextDisplays a menu to the user — such as a set of actions or functions — triggered by a button",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 570973,
      "relative_path": "documentation\\shadcn\\_docs_components_dropdown-menu.html",
      "source_type": "documentation"
    },
    "token_count": 206,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "46ae2cab2c218acbdbea68a1f367ab08",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_dropdown-menu.html",
    "source_type": "documentation",
    "title": "Dropdown Menu - shadcn/ui",
    "content": "Dropdown Menu - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonDropdown MenuCopy PagePreviousNextDisplays a menu to the user — such as a set of actions or functions — triggered by a buttonDocs API Reference PreviewCodeOpenCopyimport { Button } from \"@/components/ui/button\"\nimport {\nDropdownMenu,\nDropdownMenuContent,\nDropdownMenuGroup,\nDropdownMenuItem,\nDropdownMenuLabel,\nDropdownMenuPortal,\nDropdownMenuSeparator,\nDropdownMenuShortcut,\nDropdownMenuSub,\nDropdownMenuSubContent,\nDropdownMenuSubTrigger,\nDropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nexport function DropdownMenuDemo() {\nreturn (\n<DropdownMenu>\n<DropdownMenuTrigger asChild>\n<Button variant=\"outline\">Open</Button>\n</DropdownMenuTrigger>\n<DropdownMenuContent className=\"w-56\" align=\"start\">\n<DropdownMenuLabel>My Account</DropdownMenuLabel>\n<DropdownMenuGroup>\n<DropdownMenuItem>\nProfile\n<DropdownMenuShortcut>⇧⌘P</DropdownMenuShortcut>\n</DropdownMenuItem>\n<DropdownMenuItem>\nBilling\n<DropdownMenuShortcut>⌘B</DropdownMenuShortcut>\n</DropdownMenuItem>\n<DropdownMenuItem>\nSettings\n<DropdownMenuShortcut>⌘S</DropdownMenuShortcut>\n</DropdownMenuItem>\n<DropdownMenuItem>\nKeyboard shortcuts\n<DropdownMenuShortcut>⌘K</DropdownMenuShortcut>\n</DropdownMenuItem>\n</DropdownMenuGroup>\n<DropdownMenuSeparator />\n<DropdownMenuGroup>\n<DropdownMenuItem>Team</DropdownMenuItem>\n<DropdownMenuSub>\n<DropdownMenuSubTrigger>Invite users</DropdownMenuSubTrigger>\n<DropdownMenuPortal>\n<DropdownMenuSubContent>\n<DropdownMenuItem>Email</DropdownMenuItem>\n<DropdownMenuItem>Message</DropdownMenuItem>\n<DropdownMenuSeparator />\n<DropdownMenuItem>More",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 570973,
      "relative_path": "documentation\\shadcn\\_docs_components_dropdown-menu.html",
      "source_type": "documentation"
    },
    "token_count": 528,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "6b21e60014aa175f8f466e0606362441",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_dropdown-menu.html",
    "source_type": "documentation",
    "title": "Dropdown Menu - shadcn/ui",
    "content": "buttonDocs API Reference PreviewCodeOpenCopyimport { Button } from \"@/components/ui/button\" import { DropdownMenu, DropdownMenuContent, DropdownMenuGroup, DropdownMenuItem, DropdownMenuLabel, DropdownMenuPortal, DropdownMenuSeparator, DropdownMenuShortcut, DropdownMenuSub, DropdownMenuSubContent, DropdownMenuSubTrigger, DropdownMenuTrigger, } from \"@/components/ui/dropdown-menu\" export function DropdownMenuDemo() { return ( <DropdownMenu> <DropdownMenuTrigger asChild> <Button variant=\"outline\">Open</Button> </DropdownMenuTrigger> <DropdownMenuContent className=\"w-56\" align=\"start\"> <DropdownMenuLabel>My Account</DropdownMenuLabel> <DropdownMenuGroup> <DropdownMenuItem> Profile <DropdownMenuShortcut>⇧⌘P</DropdownMenuShortcut> </DropdownMenuItem> <DropdownMenuItem> Billing <DropdownMenuShortcut>⌘B</DropdownMenuShortcut> </DropdownMenuItem> <DropdownMenuItem> Settings <DropdownMenuShortcut>⌘S</DropdownMenuShortcut> </DropdownMenuItem> <DropdownMenuItem> Keyboard shortcuts <DropdownMenuShortcut>⌘K</DropdownMenuShortcut> </DropdownMenuItem> </DropdownMenuGroup> <DropdownMenuSeparator /> <DropdownMenuGroup> <DropdownMenuItem>Team</DropdownMenuItem> <DropdownMenuSub> <DropdownMenuSubTrigger>Invite users</DropdownMenuSubTrigger> <DropdownMenuPortal> <DropdownMenuSubContent> <DropdownMenuItem>Email</DropdownMenuItem> <DropdownMenuItem>Message</DropdownMenuItem> <DropdownMenuSeparator /> <DropdownMenuItem>More</DropdownMenuItem>\n</DropdownMenuSubContent>\n</DropdownMenuPortal>\n</DropdownMenuSub>\n<DropdownMenuItem>\nNew Team\n<DropdownMenuShortcut>⌘+T</DropdownMenuShortcut>\n</DropdownMenuItem>\n</DropdownMenuGroup>\n<DropdownMenuSeparator />\n<DropdownMenuItem>GitHub</DropdownMenuItem>\n<DropdownMenuItem>Support</DropdownMenuItem>\n<DropdownMenuItem disabled>API</DropdownMenuItem>\n<DropdownMenuSeparator />\n<DropdownMenuItem>\nLog out\n<DropdownMenuShortcut>⇧⌘Q</DropdownMenuShortcut>\n</DropdownMenuItem>\n</DropdownMenuContent>\n</DropdownMenu>\n)\n}\nInstallation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add dropdown-menuCopy\nUsage\nCopyimport {\nDropdownMenu,\nDropdownMenuContent,\nDropdownMenuItem,\nDropdownMenuLabel,\nDropdownMenuSeparator,\nDropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nCopy<DropdownMenu>\n<DropdownMenuTrigger>Open</DropdownMenuTrigger>\n<DropdownMenuContent>\n<DropdownMenuLabel>My Account</DropdownMenuLabel>\n<DropdownMenuSeparator />\n<DropdownMenuItem>Profile</DropdownMenuItem>\n<DropdownMenuItem>Billing</DropdownMenuItem>\n<DropdownMenuItem>Team</DropdownMenuItem>\n<DropdownMenuItem>Subscription</DropdownMenuItem>\n</DropdownMenuContent>\n</DropdownMenu>\nExamples\nCheckboxes\nPreviewCodeOpenCopy\"use client\"\nimport * as React from \"react\"\nimport { DropdownMenuCheckboxItemProps } from \"@radix-ui/react-dropdown-menu\"\nimport { Button } from \"@/components/ui/button\"\nimport {\nDropdownMenu,\nDropdownMenuCheckboxItem,\nDropdownMenuContent,\nDropdownMenuLabel,\nDropdownMenuSeparator,\nDropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\ntype Checked = DropdownMenuCheckboxItemProps[\"checked\"]\nexport function DropdownMenuCheckboxes() {\nconst [showStatusBar, setShowStatusBar] = React",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 570973,
      "relative_path": "documentation\\shadcn\\_docs_components_dropdown-menu.html",
      "source_type": "documentation"
    },
    "token_count": 703,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "98bd08b9e02c68b69857819b34fd89a0",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_dropdown-menu.html",
    "source_type": "documentation",
    "title": "Dropdown Menu - shadcn/ui",
    "content": "CLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add dropdown-menuCopy Usage Copyimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger, } from \"@/components/ui/dropdown-menu\" Copy<DropdownMenu> <DropdownMenuTrigger>Open</DropdownMenuTrigger> <DropdownMenuContent> <DropdownMenuLabel>My Account</DropdownMenuLabel> <DropdownMenuSeparator /> <DropdownMenuItem>Profile</DropdownMenuItem> <DropdownMenuItem>Billing</DropdownMenuItem> <DropdownMenuItem>Team</DropdownMenuItem> <DropdownMenuItem>Subscription</DropdownMenuItem> </DropdownMenuContent> </DropdownMenu> Examples Checkboxes PreviewCodeOpenCopy\"use client\" import * as React from \"react\" import { DropdownMenuCheckboxItemProps } from \"@radix-ui/react-dropdown-menu\" import { Button } from \"@/components/ui/button\" import { DropdownMenu, DropdownMenuCheckboxItem, DropdownMenuContent, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger, } from \"@/components/ui/dropdown-menu\" type Checked = DropdownMenuCheckboxItemProps[\"checked\"] export function DropdownMenuCheckboxes() { const [showStatusBar, setShowStatusBar] = ReactuseState<Checked>(true)\nconst [showActivityBar, setShowActivityBar] = React useState<Checked>(false)\nconst [showPanel, setShowPanel] = React",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 570973,
      "relative_path": "documentation\\shadcn\\_docs_components_dropdown-menu.html",
      "source_type": "documentation"
    },
    "token_count": 283,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "e9d5fc0d6aa5a745876ccb17e1cb358c",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_dropdown-menu.html",
    "source_type": "documentation",
    "title": "Dropdown Menu - shadcn/ui",
    "content": "DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger, } from \"@/components/ui/dropdown-menu\" Copy<DropdownMenu> <DropdownMenuTrigger>Open</DropdownMenuTrigger> <DropdownMenuContent> <DropdownMenuLabel>My Account</DropdownMenuLabel> <DropdownMenuSeparator /> <DropdownMenuItem>Profile</DropdownMenuItem> <DropdownMenuItem>Billing</DropdownMenuItem> <DropdownMenuItem>Team</DropdownMenuItem> <DropdownMenuItem>Subscription</DropdownMenuItem> </DropdownMenuContent> </DropdownMenu> Examples Checkboxes PreviewCodeOpenCopy\"use client\" import * as React from \"react\" import { DropdownMenuCheckboxItemProps } from \"@radix-ui/react-dropdown-menu\" import { Button } from \"@/components/ui/button\" import { DropdownMenu, DropdownMenuCheckboxItem, DropdownMenuContent, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger, } from \"@/components/ui/dropdown-menu\" type Checked = DropdownMenuCheckboxItemProps[\"checked\"] export function DropdownMenuCheckboxes() { const [showStatusBar, setShowStatusBar] = ReactuseState<Checked>(true) const [showActivityBar, setShowActivityBar] = React useState<Checked>(false) const [showPanel, setShowPanel] = ReactuseState<Checked>(false)\nreturn (\n<DropdownMenu>\n<DropdownMenuTrigger asChild>\n<Button variant=\"outline\">Open</Button>\n</DropdownMenuTrigger>\n<DropdownMenuContent className=\"w-56\">\n<DropdownMenuLabel>Appearance</DropdownMenuLabel>\n<DropdownMenuSeparator />\n<DropdownMenuCheckboxItem\nchecked={showStatusBar}\nonCheckedChange={setShowStatusBar}\n>\nStatus Bar\n</DropdownMenuCheckboxItem>\n<DropdownMenuCheckboxItem\nchecked={showActivityBar}\nonCheckedChange={setShowActivityBar}\ndisabled\n>\nActivity Bar\n</DropdownMenuCheckboxItem>\n<DropdownMenuCheckboxItem\nchecked={showPanel}\nonCheckedChange={setShowPanel}\n>\nPanel\n</DropdownMenuCheckboxItem>\n</DropdownMenuContent>\n</DropdownMenu>\n)\n}\nRadio Group\nPreviewCodeOpenCopy\"use client\"\nimport * as React from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport {\nDropdownMenu,\nDropdownMenuContent,\nDropdownMenuLabel,\nDropdownMenuRadioGroup,\nDropdownMenuRadioItem,\nDropdownMenuSeparator,\nDropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nexport function DropdownMenuRadioGroupDemo() {\nconst [position, setPosition] = React",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 570973,
      "relative_path": "documentation\\shadcn\\_docs_components_dropdown-menu.html",
      "source_type": "documentation"
    },
    "token_count": 492,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "3d33b1ef714ffbf298633cbf508e90a0",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_dropdown-menu.html",
    "source_type": "documentation",
    "title": "Dropdown Menu - shadcn/ui",
    "content": "ReactuseState<Checked>(false) return ( <DropdownMenu> <DropdownMenuTrigger asChild> <Button variant=\"outline\">Open</Button> </DropdownMenuTrigger> <DropdownMenuContent className=\"w-56\"> <DropdownMenuLabel>Appearance</DropdownMenuLabel> <DropdownMenuSeparator /> <DropdownMenuCheckboxItem checked={showStatusBar} onCheckedChange={setShowStatusBar} > Status Bar </DropdownMenuCheckboxItem> <DropdownMenuCheckboxItem checked={showActivityBar} onCheckedChange={setShowActivityBar} disabled > Activity Bar </DropdownMenuCheckboxItem> <DropdownMenuCheckboxItem checked={showPanel} onCheckedChange={setShowPanel} > Panel </DropdownMenuCheckboxItem> </DropdownMenuContent> </DropdownMenu> ) } Radio Group PreviewCodeOpenCopy\"use client\" import * as React from \"react\" import { Button } from \"@/components/ui/button\" import { DropdownMenu, DropdownMenuContent, DropdownMenuLabel, DropdownMenuRadioGroup, DropdownMenuRadioItem, DropdownMenuSeparator, DropdownMenuTrigger, } from \"@/components/ui/dropdown-menu\" export function DropdownMenuRadioGroupDemo() { const [position, setPosition] = ReactuseState(\"bottom\")\nreturn (\n<DropdownMenu>\n<DropdownMenuTrigger asChild>\n<Button variant=\"outline\">Open</Button>\n</DropdownMenuTrigger>\n<DropdownMenuContent className=\"w-56\">\n<DropdownMenuLabel>Panel Position</DropdownMenuLabel>\n<DropdownMenuSeparator />\n<DropdownMenuRadioGroup value={position} onValueChange={setPosition}>\n<DropdownMenuRadioItem value=\"top\">Top</DropdownMenuRadioItem>\n<DropdownMenuRadioItem value=\"bottom\">Bottom</DropdownMenuRadioItem>\n<DropdownMenuRadioItem value=\"right\">Right</DropdownMenuRadioItem>\n</DropdownMenuRadioGroup>\n</DropdownMenuContent>\n</DropdownMenu>\n)\n}\nDrawerReact Hook Form On This PageInstallationUsageExamplesCheckboxesRadio GroupDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 570973,
      "relative_path": "documentation\\shadcn\\_docs_components_dropdown-menu.html",
      "source_type": "documentation"
    },
    "token_count": 452,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "bc911132f47098f9ed0380c8ef86a2e1",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_form.html",
    "source_type": "documentation",
    "title": "React Hook Form - shadcn/ui",
    "content": "React Hook Form - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonReact Hook FormCopy PagePreviousNextBuilding forms with React Hook Form and Zod Docs Forms are tricky They are one of the most common things you'll build in a web application, but also one of the most complex Well-designed HTML forms are:\nWell-structured and semantically correct Easy to use and navigate (keyboard) Accessible with ARIA attributes and proper labels Has support for client and server side validation Well-styled and consistent with the rest of the application In this guide, we will take a look at building forms with react-hook-form and zod We're going to use a <FormField> component to compose accessible forms using Radix UI components Features\nThe <Form /> component is a wrapper around the react-hook-form library It provides a few things:\nComposable components for building forms A <FormField /> component for building controlled form fields Form validation using zod Handles accessibility and error messages Uses React useId() for generating unique IDs Applies the correct aria attributes to form fields based on states Built to work with all Radix UI components Bring your own schema library We use zod but you can use anything you want You have full control over the markup and styling Anatomy\nCopy<Form>\n<FormField\ncontrol={ }\nname=\" \"\nrender={() => (\n<FormItem>\n<FormLabel />\n<FormControl>\n{ /* Your form field */}\n</FormControl>\n<FormDescription />\n<FormMessage />\n</FormItem>\n)}\n/>\n</Form>\nExample\nCopyconst form = useForm()\n<FormField\ncontrol={form",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 556892,
      "relative_path": "documentation\\shadcn\\_docs_components_form.html",
      "source_type": "documentation"
    },
    "token_count": 477,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "22f48040101896f2fec85c81ee64a5fb",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_form.html",
    "source_type": "documentation",
    "title": "React Hook Form - shadcn/ui",
    "content": "aria attributes to form fields based on states Built to work with all Radix UI components Bring your own schema library We use zod but you can use anything you want You have full control over the markup and styling Anatomy Copy<Form> <FormField control={ } name=\" \" render={() => ( <FormItem> <FormLabel /> <FormControl> { /* Your form field */} </FormControl> <FormDescription /> <FormMessage /> </FormItem> )} /> </Form> Example Copyconst form = useForm() <FormField control={formcontrol}\nname=\"username\"\nrender={({ field }) => (\n<FormItem>\n<FormLabel>Username</FormLabel>\n<FormControl>\n<Input placeholder=\"shadcn\" { field} />\n</FormControl>\n<FormDescription>This is your public display name </FormDescription>\n<FormMessage />\n</FormItem>\n)}\n/>\nInstallation\nCLIManualCommandpnpmnpmyarnbunpnpm dlx shadcn@latest add formCopy\nUsage\nCreate a form schemaDefine the shape of your form using a Zod schema You can read more about using Zod in the Zod documentation components/example-form tsxCopy\"use client\"\nimport { z } from \"zod\"\nconst formSchema = z object({\nusername: z string() min(2) max(50),\n})Define a formUse the useForm hook from react-hook-form to create a form components/example-form tsxCopy\"use client\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport { z } from \"zod\"\nconst formSchema = z object({\nusername: z string() min(2, {\nmessage: \"Username must be at least 2 characters \",\n}),\n})\nexport function ProfileForm() {\n// 1 Define your form const form = useForm<z infer<typeof formSchema>>({\nresolver: zodResolver(formSchema),\ndefaultValues: {\nusername: \"\",\n},\n})\n// 2 Define a submit handler function onSubmit(values: z infer<typeof formSchema>) {\n// Do something with the form values // ✅ This will be type-safe and validated console log(values)\n}\n}Since FormField is using a controlled component, you need to provide a default value for the field See the React Hook Form docs to learn more about controlled components Build your formWe can now use the <Form /> components to build our form components/example-form",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 556892,
      "relative_path": "documentation\\shadcn\\_docs_components_form.html",
      "source_type": "documentation"
    },
    "token_count": 482,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "137560c9f799eaf9bbc81da136480dac",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_form.html",
    "source_type": "documentation",
    "title": "React Hook Form - shadcn/ui",
    "content": "}, }) // 2 Define a submit handler function onSubmit(values: z infer<typeof formSchema>) { // Do something with the form values // ✅ This will be type-safe and validated console log(values) } }Since FormField is using a controlled component, you need to provide a default value for the field See the React Hook Form docs to learn more about controlled components Build your formWe can now use the <Form /> components to build our form components/example-formtsxCopy\"use client\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport { z } from \"zod\"\nimport { Button } from \"@/components/ui/button\"\nimport {\nForm,\nFormControl,\nFormDescription,\nFormField,\nFormItem,\nFormLabel,\nFormMessage,\n} from \"@/components/ui/form\"\nimport { Input } from \"@/components/ui/input\"\nconst formSchema = z object({\nusername: z string() min(2, {\nmessage: \"Username must be at least 2 characters \",\n}),\n})\nexport function ProfileForm() {\n// return (\n<Form { form}>\n<form onSubmit={form handleSubmit(onSubmit)} className=\"space-y-8\">\n<FormField\ncontrol={form control}\nname=\"username\"\nrender={({ field }) => (\n<FormItem>\n<FormLabel>Username</FormLabel>\n<FormControl>\n<Input placeholder=\"shadcn\" { field} />\n</FormControl>\n<FormDescription>\nThis is your public display name </FormDescription>\n<FormMessage />\n</FormItem>\n)}\n/>\n<Button type=\"submit\">Submit</Button>\n</form>\n</Form>\n)\n}DoneThat's it You now have a fully accessible form that is type-safe with client-side validation PreviewCodeUsernameThis is your public display name SubmitCopy\"use client\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport { toast } from \"sonner\"\nimport { z } from \"zod\"\nimport { Button } from \"@/components/ui/button\"\nimport {\nForm,\nFormControl,\nFormDescription,\nFormField,\nFormItem,\nFormLabel,\nFormMessage,\n} from \"@/components/ui/form\"\nimport { Input } from \"@/components/ui/input\"\nconst FormSchema = z object({\nusername: z string() min(2, {\nmessage: \"Username must be at least 2 characters \",\n}),\n})\nexport function InputForm() {\nconst form = useForm<z",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 556892,
      "relative_path": "documentation\\shadcn\\_docs_components_form.html",
      "source_type": "documentation"
    },
    "token_count": 486,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "dce981146e054d5ed29d068df583d206",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_form.html",
    "source_type": "documentation",
    "title": "React Hook Form - shadcn/ui",
    "content": "{ zodResolver } from \"@hookform/resolvers/zod\" import { useForm } from \"react-hook-form\" import { toast } from \"sonner\" import { z } from \"zod\" import { Button } from \"@/components/ui/button\" import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage, } from \"@/components/ui/form\" import { Input } from \"@/components/ui/input\" const FormSchema = z object({ username: z string() min(2, { message: \"Username must be at least 2 characters \", }), }) export function InputForm() { const form = useForm<zinfer<typeof FormSchema>>({\nresolver: zodResolver(FormSchema),\ndefaultValues: {\nusername: \"\",\n},\n})\nfunction onSubmit(data: z infer<typeof FormSchema>) {\ntoast(\"You submitted the following values\", {\ndescription: (\n<pre className=\"mt-2 w-[320px] rounded-md bg-neutral-950 p-4\">\n<code className=\"text-white\">{JSON stringify(data, null, 2)}</code>\n</pre>\n),\n})\n}\nreturn (\n<Form { form}>\n<form onSubmit={form handleSubmit(onSubmit)} className=\"w-2/3 space-y-6\">\n<FormField\ncontrol={form control}\nname=\"username\"\nrender={({ field }) => (\n<FormItem>\n<FormLabel>Username</FormLabel>\n<FormControl>\n<Input placeholder=\"shadcn\" { field} />\n</FormControl>\n<FormDescription>\nThis is your public display name </FormDescription>\n<FormMessage />\n</FormItem>\n)}\n/>\n<Button type=\"submit\">Submit</Button>\n</form>\n</Form>\n)\n}\nExamples\nSee the following links for more examples on how to use the <Form /> component with other components:\nCheckbox\nDate Picker\nInput\nRadio Group\nSelect\nSwitch\nTextarea\nCombobox\nDropdown MenuHover Card On This PageFeaturesAnatomyExampleInstallationCommandUsageCreate a form schemaDefine a formBuild your formDoneExamplesDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 556892,
      "relative_path": "documentation\\shadcn\\_docs_components_form.html",
      "source_type": "documentation"
    },
    "token_count": 462,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "a8893bf33a84db089bade10950c24e74",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_label.html",
    "source_type": "documentation",
    "title": "Label - shadcn/ui",
    "content": "Label - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation...Search...⌘K92.8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents.jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext.jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext.jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry.jsonregistry-item.jsonLabelCopy PagePreviousNextRenders an accessible label associated with controls.Docs API Reference PreviewCodeAccept terms and conditionsCopyimport { Checkbox } from \"@/components/ui/checkbox\"\nimport { Label } from \"@/components/ui/label\"\nexport function LabelDemo() {\nreturn (\n<div>\n<div className=\"flex items-center space-x-2\">\n<Checkbox id=\"terms\" />\n<Label htmlFor=\"terms\">Accept terms and conditions</Label>\n</div>\n</div>\n)\n}\nInstallation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add labelCopy\nUsage\nCopyimport { Label } from \"@/components/ui/label\"\nCopy<Label htmlFor=\"email\">Your email address</Label> Input OTPMenubar On This PageInstallationUsageDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more.Vercel provides tools and infrastructure to deploy apps and features at scale.Deploy NowDeploy to VercelBuilt by shadcn at Vercel. The source code is available on GitHub.",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 345794,
      "relative_path": "documentation\\shadcn\\_docs_components_label.html",
      "source_type": "documentation"
    },
    "token_count": 400,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "72b2d4532b109aedac86a8cd4c612913",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_data-table.html",
    "source_type": "documentation",
    "title": "Data Table - shadcn/ui",
    "content": "Data Table - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonData TableCopy PagePreviousNextPowerful table and datagrids built using TanStack Table Docs PreviewCodeColumns StatusEmailAmountsuccessken99@example com$316 00Open menusuccessAbe45@example com$242 00Open menuprocessingMonserrat44@example com$837 00Open menusuccessSilas22@example com$874 00Open menufailedcarmella@example com$721 00Open menu0 of 5 row(s) selected PreviousNextCopy\"use client\"\nimport * as React from \"react\"\nimport {\nColumnDef,\nColumnFiltersState,\nflexRender,\ngetCoreRowModel,\ngetFilteredRowModel,\ngetPaginationRowModel,\ngetSortedRowModel,\nSortingState,\nuseReactTable,\nVisibilityState,\n} from \"@tanstack/react-table\"\nimport { ArrowUpDown, ChevronDown, MoreHorizontal } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport {\nDropdownMenu,\nDropdownMenuCheckboxItem,\nDropdownMenuContent,\nDropdownMenuItem,\nDropdownMenuLabel,\nDropdownMenuSeparator,\nDropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { Input } from \"@/components/ui/input\"\nimport {\nTable,\nTableBody,\nTableCell,\nTableHead,\nTableHeader,\nTableRow,\n} from \"@/components/ui/table\"\nconst data: Payment[] = [\n{\nid: \"m5gr84i9\",\namount: 316,\nstatus: \"success\",\nemail: \"ken99@example",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1293665,
      "relative_path": "documentation\\shadcn\\_docs_components_data-table.html",
      "source_type": "documentation"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 23
  },
  {
    "id": "5bbe04f0bf9bd539665e9637a3174bc9",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_data-table.html",
    "source_type": "documentation",
    "title": "Data Table - shadcn/ui",
    "content": "ColumnDef, ColumnFiltersState, flexRender, getCoreRowModel, getFilteredRowModel, getPaginationRowModel, getSortedRowModel, SortingState, useReactTable, VisibilityState, } from \"@tanstack/react-table\" import { ArrowUpDown, ChevronDown, MoreHorizontal } from \"lucide-react\" import { Button } from \"@/components/ui/button\" import { Checkbox } from \"@/components/ui/checkbox\" import { DropdownMenu, DropdownMenuCheckboxItem, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger, } from \"@/components/ui/dropdown-menu\" import { Input } from \"@/components/ui/input\" import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow, } from \"@/components/ui/table\" const data: Payment[] = [ { id: \"m5gr84i9\", amount: 316, status: \"success\", email: \"ken99@examplecom\",\n},\n{\nid: \"3u1reuv4\",\namount: 242,\nstatus: \"success\",\nemail: \"Abe45@example com\",\n},\n{\nid: \"derv1ws0\",\namount: 837,\nstatus: \"processing\",\nemail: \"Monserrat44@example com\",\n},\n{\nid: \"5kma53ae\",\namount: 874,\nstatus: \"success\",\nemail: \"Silas22@example com\",\n},\n{\nid: \"bhqecj4p\",\namount: 721,\nstatus: \"failed\",\nemail: \"carmella@example com\",\n},\n]\nexport type Payment = {\nid: string\namount: number\nstatus: \"pending\" | \"processing\" | \"success\" | \"failed\"\nemail: string\n}\nexport const columns: ColumnDef<Payment>[] = [\n{\nid: \"select\",\nheader: ({ table }) => (\n<Checkbox\nchecked={\ntable getIsAllPageRowsSelected() ||\n(table getIsSomePageRowsSelected() && \"indeterminate\")\n}\nonCheckedChange={(value) => table toggleAllPageRowsSelected( value)}\naria-label=\"Select all\"\n/>\n),\ncell: ({ row }) => (\n<Checkbox\nchecked={row getIsSelected()}\nonCheckedChange={(value) => row toggleSelected(",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1293665,
      "relative_path": "documentation\\shadcn\\_docs_components_data-table.html",
      "source_type": "documentation"
    },
    "token_count": 459,
    "chunk_index": 1,
    "total_chunks": 23
  },
  {
    "id": "b145ff7508256ca2293afa8e4c2c88a4",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_data-table.html",
    "source_type": "documentation",
    "title": "Data Table - shadcn/ui",
    "content": "amount: 721, status: \"failed\", email: \"carmella@example com\", }, ] export type Payment = { id: string amount: number status: \"pending\" | \"processing\" | \"success\" | \"failed\" email: string } export const columns: ColumnDef<Payment>[] = [ { id: \"select\", header: ({ table }) => ( <Checkbox checked={ table getIsAllPageRowsSelected() || (table getIsSomePageRowsSelected() && \"indeterminate\") } onCheckedChange={(value) => table toggleAllPageRowsSelected( value)} aria-label=\"Select all\" /> ), cell: ({ row }) => ( <Checkbox checked={row getIsSelected()} onCheckedChange={(value) => row toggleSelected(value)}\naria-label=\"Select row\"\n/>\n),\nenableSorting: false,\nenableHiding: false,\n},\n{\naccessorKey: \"status\",\nheader: \"Status\",\ncell: ({ row }) => (\n<div className=\"capitalize\">{row getValue(\"status\")}</div>\n),\n},\n{\naccessorKey: \"email\",\nheader: ({ column }) => {\nreturn (\n<Button\nvariant=\"ghost\"\nonClick={() => column toggleSorting(column getIsSorted() === \"asc\")}\n>\nEmail\n<ArrowUpDown />\n</Button>\n)\n},\ncell: ({ row }) => <div className=\"lowercase\">{row getValue(\"email\")}</div>,\n},\n{\naccessorKey: \"amount\",\nheader: () => <div className=\"text-right\">Amount</div>,\ncell: ({ row }) => {\nconst amount = parseFloat(row getValue(\"amount\"))\n// Format the amount as a dollar amount\nconst formatted = new Intl NumberFormat(\"en-US\", {\nstyle: \"currency\",\ncurrency: \"USD\",\n}) format(amount)\nreturn <div className=\"text-right font-medium\">{formatted}</div>\n},\n},\n{\nid: \"actions\",\nenableHiding: false,\ncell: ({ row }) => {\nconst payment = row original\nreturn (\n<DropdownMenu>\n<DropdownMenuTrigger asChild>\n<Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n<span className=\"sr-only\">Open menu</span>\n<MoreHorizontal />\n</Button>\n</DropdownMenuTrigger>\n<DropdownMenuContent align=\"end\">\n<DropdownMenuLabel>Actions</DropdownMenuLabel>\n<DropdownMenuItem\nonClick={() => navigator clipboard writeText(payment",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1293665,
      "relative_path": "documentation\\shadcn\\_docs_components_data-table.html",
      "source_type": "documentation"
    },
    "token_count": 483,
    "chunk_index": 2,
    "total_chunks": 23
  },
  {
    "id": "349e28ecca3c692365d6fc1bf5d9bc9d",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_data-table.html",
    "source_type": "documentation",
    "title": "Data Table - shadcn/ui",
    "content": "=> { const amount = parseFloat(row getValue(\"amount\")) // Format the amount as a dollar amount const formatted = new Intl NumberFormat(\"en-US\", { style: \"currency\", currency: \"USD\", }) format(amount) return <div className=\"text-right font-medium\">{formatted}</div> }, }, { id: \"actions\", enableHiding: false, cell: ({ row }) => { const payment = row original return ( <DropdownMenu> <DropdownMenuTrigger asChild> <Button variant=\"ghost\" className=\"h-8 w-8 p-0\"> <span className=\"sr-only\">Open menu</span> <MoreHorizontal /> </Button> </DropdownMenuTrigger> <DropdownMenuContent align=\"end\"> <DropdownMenuLabel>Actions</DropdownMenuLabel> <DropdownMenuItem onClick={() => navigator clipboard writeText(paymentid)}\n>\nCopy payment ID\n</DropdownMenuItem>\n<DropdownMenuSeparator />\n<DropdownMenuItem>View customer</DropdownMenuItem>\n<DropdownMenuItem>View payment details</DropdownMenuItem>\n</DropdownMenuContent>\n</DropdownMenu>\n)\n},\n},\n]\nexport function DataTableDemo() {\nconst [sorting, setSorting] = React useState<SortingState>([])\nconst [columnFilters, setColumnFilters] = React useState<ColumnFiltersState>(\n[]\n)\nconst [columnVisibility, setColumnVisibility] =\nReact useState<VisibilityState>({})\nconst [rowSelection, setRowSelection] = React useState({})\nconst table = useReactTable({\ndata,\ncolumns,\nonSortingChange: setSorting,\nonColumnFiltersChange: setColumnFilters,\ngetCoreRowModel: getCoreRowModel(),\ngetPaginationRowModel: getPaginationRowModel(),\ngetSortedRowModel: getSortedRowModel(),\ngetFilteredRowModel: getFilteredRowModel(),\nonColumnVisibilityChange: setColumnVisibility,\nonRowSelectionChange: setRowSelection,\nstate: {\nsorting,\ncolumnFilters,\ncolumnVisibility,\nrowSelection,\n},\n})\nreturn (\n<div className=\"w-full\">\n<div className=\"flex items-center py-4\">\n<Input\nplaceholder=\"Filter emails \"\nvalue={(table getColumn(\"email\") getFilterValue() as string) \"\"}\nonChange={(event) =>\ntable getColumn(\"email\") setFilterValue(event target",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1293665,
      "relative_path": "documentation\\shadcn\\_docs_components_data-table.html",
      "source_type": "documentation"
    },
    "token_count": 446,
    "chunk_index": 3,
    "total_chunks": 23
  },
  {
    "id": "21d6d8c3c6934bd0ede07fd0647e23ef",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_data-table.html",
    "source_type": "documentation",
    "title": "Data Table - shadcn/ui",
    "content": "React useState<SortingState>([]) const [columnFilters, setColumnFilters] = React useState<ColumnFiltersState>( [] ) const [columnVisibility, setColumnVisibility] = React useState<VisibilityState>({}) const [rowSelection, setRowSelection] = React useState({}) const table = useReactTable({ data, columns, onSortingChange: setSorting, onColumnFiltersChange: setColumnFilters, getCoreRowModel: getCoreRowModel(), getPaginationRowModel: getPaginationRowModel(), getSortedRowModel: getSortedRowModel(), getFilteredRowModel: getFilteredRowModel(), onColumnVisibilityChange: setColumnVisibility, onRowSelectionChange: setRowSelection, state: { sorting, columnFilters, columnVisibility, rowSelection, }, }) return ( <div className=\"w-full\"> <div className=\"flex items-center py-4\"> <Input placeholder=\"Filter emails \" value={(table getColumn(\"email\") getFilterValue() as string) \"\"} onChange={(event) => table getColumn(\"email\") setFilterValue(event targetvalue)\n}\nclassName=\"max-w-sm\"\n/>\n<DropdownMenu>\n<DropdownMenuTrigger asChild>\n<Button variant=\"outline\" className=\"ml-auto\">\nColumns <ChevronDown />\n</Button>\n</DropdownMenuTrigger>\n<DropdownMenuContent align=\"end\">\n{table getAllColumns() filter((column) => column getCanHide()) map((column) => {\nreturn (\n<DropdownMenuCheckboxItem\nkey={column id}\nclassName=\"capitalize\"\nchecked={column getIsVisible()}\nonCheckedChange={(value) =>\ncolumn toggleVisibility( value)\n}\n>\n{column id}\n</DropdownMenuCheckboxItem>\n)\n})}\n</DropdownMenuContent>\n</DropdownMenu>\n</div>\n<div className=\"overflow-hidden rounded-md border\">\n<Table>\n<TableHeader>\n{table getHeaderGroups() map((headerGroup) => (\n<TableRow key={headerGroup id}>\n{headerGroup headers map((header) => {\nreturn (\n<TableHead key={header id}>\n{header isPlaceholder null\n: flexRender(\nheader column columnDef header,\nheader getContext()\n)}\n</TableHead>\n)\n})}\n</TableRow>\n))}\n</TableHeader>\n<TableBody>\n{table getRowModel() rows length (\ntable getRowModel() rows map((row) => (\n<TableRow\nkey={row id}\ndata-state={row getIsSelected() && \"selected\"}\n>\n{row getVisibleCells()",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1293665,
      "relative_path": "documentation\\shadcn\\_docs_components_data-table.html",
      "source_type": "documentation"
    },
    "token_count": 496,
    "chunk_index": 4,
    "total_chunks": 23
  },
  {
    "id": "3b71f49e43dcfebc3ae801dbea0055df",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_data-table.html",
    "source_type": "documentation",
    "title": "Data Table - shadcn/ui",
    "content": "toggleVisibility( value) } > {column id} </DropdownMenuCheckboxItem> ) })} </DropdownMenuContent> </DropdownMenu> </div> <div className=\"overflow-hidden rounded-md border\"> <Table> <TableHeader> {table getHeaderGroups() map((headerGroup) => ( <TableRow key={headerGroup id}> {headerGroup headers map((header) => { return ( <TableHead key={header id}> {header isPlaceholder null : flexRender( header column columnDef header, header getContext() )} </TableHead> ) })} </TableRow> ))} </TableHeader> <TableBody> {table getRowModel() rows length ( table getRowModel() rows map((row) => ( <TableRow key={row id} data-state={row getIsSelected() && \"selected\"} > {row getVisibleCells()map((cell) => (\n<TableCell key={cell id}>\n{flexRender(\ncell column columnDef cell,\ncell getContext()\n)}\n</TableCell>\n))}\n</TableRow>\n))\n) : (\n<TableRow>\n<TableCell\ncolSpan={columns length}\nclassName=\"h-24 text-center\"\n>\nNo results </TableCell>\n</TableRow>\n)}\n</TableBody>\n</Table>\n</div>\n<div className=\"flex items-center justify-end space-x-2 py-4\">\n<div className=\"text-muted-foreground flex-1 text-sm\">\n{table getFilteredSelectedRowModel() rows length} of{\" \"}\n{table getFilteredRowModel() rows length} row(s) selected </div>\n<div className=\"space-x-2\">\n<Button\nvariant=\"outline\"\nsize=\"sm\"\nonClick={() => table previousPage()}\ndisabled={ table getCanPreviousPage()}\n>\nPrevious\n</Button>\n<Button\nvariant=\"outline\"\nsize=\"sm\"\nonClick={() => table nextPage()}\ndisabled={ table getCanNextPage()}\n>\nNext\n</Button>\n</div>\n</div>\n</div>\n)\n}\nIntroduction\nEvery data table or datagrid I've created has been unique They all behave differently, have specific sorting and filtering requirements, and work with different data sources It doesn't make sense to combine all of these variations into a single component If we do that, we'll lose the flexibility that headless UI provides So instead of a data-table component, I thought it would be more helpful to provide a guide on how to build your own",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1293665,
      "relative_path": "documentation\\shadcn\\_docs_components_data-table.html",
      "source_type": "documentation"
    },
    "token_count": 482,
    "chunk_index": 5,
    "total_chunks": 23
  },
  {
    "id": "d0e9b9f08628ee07becc4d956ab47fc5",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_data-table.html",
    "source_type": "documentation",
    "title": "Data Table - shadcn/ui",
    "content": "Introduction Every data table or datagrid I've created has been unique They all behave differently, have specific sorting and filtering requirements, and work with different data sources It doesn't make sense to combine all of these variations into a single component If we do that, we'll lose the flexibility that headless UI provides So instead of a data-table component, I thought it would be more helpful to provide a guide on how to build your ownWe'll start with the basic <Table /> component and build a complex data table from scratch Tip: If you find yourself using the same table in multiple places in your app, you can always extract it into a reusable component Table of Contents\nThis guide will show you how to use TanStack Table and the <Table /> component to build your own custom data table We'll cover the following topics:\nBasic Table\nRow Actions\nPagination\nSorting\nFiltering\nVisibility\nRow Selection\nReusable Components\nInstallation\nAdd the <Table /> component to your project:\npnpmnpmyarnbunpnpm dlx shadcn@latest add tableCopy\nAdd tanstack/react-table dependency:\npnpmnpmyarnbunpnpm add @tanstack/react-tableCopy\nPrerequisites\nWe are going to build a table to show recent payments Here's what our data looks like:\nCopytype Payment = {\nid: string\namount: number\nstatus: \"pending\" | \"processing\" | \"success\" | \"failed\"\nemail: string\n}\nexport const payments: Payment[] = [\n{\nid: \"728ed52f\",\namount: 100,\nstatus: \"pending\",\nemail: \"m@example com\",\n},\n{\nid: \"489e1d42\",\namount: 125,\nstatus: \"processing\",\nemail: \"example@gmail com\",\n},\n// ]\nProject Structure\nStart by creating the following file structure:\nCopyapp\n└── payments\n├── columns tsx\n├── data-table tsx\n└── page tsx\nI'm using a Next js example here but this works for any other React framework columns tsx (client component) will contain our column definitions data-table tsx (client component) will contain our <DataTable /> component page tsx (server component) is where we'll fetch data and render our table Basic Table\nLet's start by building a basic table Column DefinitionsFirst, we'll define our columns app/payments/columns",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1293665,
      "relative_path": "documentation\\shadcn\\_docs_components_data-table.html",
      "source_type": "documentation"
    },
    "token_count": 490,
    "chunk_index": 6,
    "total_chunks": 23
  },
  {
    "id": "2eeaf824b09cddb4fe4dba8e747a3149",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_data-table.html",
    "source_type": "documentation",
    "title": "Data Table - shadcn/ui",
    "content": "structure: Copyapp └── payments ├── columns tsx ├── data-table tsx └── page tsx I'm using a Next js example here but this works for any other React framework columns tsx (client component) will contain our column definitions data-table tsx (client component) will contain our <DataTable /> component page tsx (server component) is where we'll fetch data and render our table Basic Table Let's start by building a basic table Column DefinitionsFirst, we'll define our columns app/payments/columnstsxCopy\"use client\"\nimport { ColumnDef } from \"@tanstack/react-table\"\n// This type is used to define the shape of our data // You can use a Zod schema here if you want export type Payment = {\nid: string\namount: number\nstatus: \"pending\" | \"processing\" | \"success\" | \"failed\"\nemail: string\n}\nexport const columns: ColumnDef<Payment>[] = [\n{\naccessorKey: \"status\",\nheader: \"Status\",\n},\n{\naccessorKey: \"email\",\nheader: \"Email\",\n},\n{\naccessorKey: \"amount\",\nheader: \"Amount\",\n},\n]Note: Columns are where you define the core of what your table\nwill look like They define the data that will be displayed, how it will be\nformatted, sorted and filtered <DataTable /> componentNext, we'll create a <DataTable /> component to render our table app/payments/data-table tsxCopy\"use client\"\nimport {\nColumnDef,\nflexRender,\ngetCoreRowModel,\nuseReactTable,\n} from \"@tanstack/react-table\"\nimport {\nTable,\nTableBody,\nTableCell,\nTableHead,\nTableHeader,\nTableRow,\n} from \"@/components/ui/table\"\ninterface DataTableProps<TData, TValue> {\ncolumns: ColumnDef<TData, TValue>[]\ndata: TData[]\n}\nexport function DataTable<TData, TValue>({\ncolumns,\ndata,\n}: DataTableProps<TData, TValue>) {\nconst table = useReactTable({\ndata,\ncolumns,\ngetCoreRowModel: getCoreRowModel(),\n})\nreturn (\n<div className=\"overflow-hidden rounded-md border\">\n<Table>\n<TableHeader>\n{table getHeaderGroups() map((headerGroup) => (\n<TableRow key={headerGroup id}>\n{headerGroup headers map((header) => {\nreturn (\n<TableHead key={header id}>\n{header isPlaceholder null\n: flexRender(\nheader column columnDef header,\nheader",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1293665,
      "relative_path": "documentation\\shadcn\\_docs_components_data-table.html",
      "source_type": "documentation"
    },
    "token_count": 495,
    "chunk_index": 7,
    "total_chunks": 23
  },
  {
    "id": "76bfeaa22df5a7a484bec8ca4a128181",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_data-table.html",
    "source_type": "documentation",
    "title": "Data Table - shadcn/ui",
    "content": "import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow, } from \"@/components/ui/table\" interface DataTableProps<TData, TValue> { columns: ColumnDef<TData, TValue>[] data: TData[] } export function DataTable<TData, TValue>({ columns, data, }: DataTableProps<TData, TValue>) { const table = useReactTable({ data, columns, getCoreRowModel: getCoreRowModel(), }) return ( <div className=\"overflow-hidden rounded-md border\"> <Table> <TableHeader> {table getHeaderGroups() map((headerGroup) => ( <TableRow key={headerGroup id}> {headerGroup headers map((header) => { return ( <TableHead key={header id}> {header isPlaceholder null : flexRender( header column columnDef header, headergetContext()\n)}\n</TableHead>\n)\n})}\n</TableRow>\n))}\n</TableHeader>\n<TableBody>\n{table getRowModel() rows length (\ntable getRowModel() rows map((row) => (\n<TableRow\nkey={row id}\ndata-state={row getIsSelected() && \"selected\"}\n>\n{row getVisibleCells() map((cell) => (\n<TableCell key={cell id}>\n{flexRender(cell column columnDef cell, cell getContext())}\n</TableCell>\n))}\n</TableRow>\n))\n) : (\n<TableRow>\n<TableCell colSpan={columns length} className=\"h-24 text-center\">\nNo results </TableCell>\n</TableRow>\n)}\n</TableBody>\n</Table>\n</div>\n)\n}Tip: If you find yourself using <DataTable /> in multiple places, this is the component you could make reusable by extracting it to components/ui/data-table tsx <DataTable columns={columns} data={data} />Render the tableFinally, we'll render our table in our page component app/payments/page tsxCopyimport { columns, Payment } from \" /columns\"\nimport { DataTable } from \" /data-table\"\nasync function getData(): Promise<Payment[]> {\n// Fetch data from your API here return [\n{\nid: \"728ed52f\",\namount: 100,\nstatus: \"pending\",\nemail: \"m@example com\",\n},\n// ]\n}\nexport default async function DemoPage() {\nconst data = await getData()\nreturn (\n<div className=\"container mx-auto py-10\">\n<DataTable columns={columns} data={data} />\n</div>\n)\n}\nCell Formatting\nLet's format the amount cell to display the dollar amount",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1293665,
      "relative_path": "documentation\\shadcn\\_docs_components_data-table.html",
      "source_type": "documentation"
    },
    "token_count": 502,
    "chunk_index": 8,
    "total_chunks": 23
  },
  {
    "id": "990c734ceb47872ebb22a419f1c8d657",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_data-table.html",
    "source_type": "documentation",
    "title": "Data Table - shadcn/ui",
    "content": "Payment } from \" /columns\" import { DataTable } from \" /data-table\" async function getData(): Promise<Payment[]> { // Fetch data from your API here return [ { id: \"728ed52f\", amount: 100, status: \"pending\", email: \"m@example com\", }, // ] } export default async function DemoPage() { const data = await getData() return ( <div className=\"container mx-auto py-10\"> <DataTable columns={columns} data={data} /> </div> ) } Cell Formatting Let's format the amount cell to display the dollar amountWe'll also align the cell to the right Update columns definitionUpdate the header and cell definitions for amount as follows:app/payments/columns tsxCopyexport const columns: ColumnDef<Payment>[] = [\n{\naccessorKey: \"amount\",\nheader: () => <div className=\"text-right\">Amount</div>,\ncell: ({ row }) => {\nconst amount = parseFloat(row getValue(\"amount\"))\nconst formatted = new Intl NumberFormat(\"en-US\", {\nstyle: \"currency\",\ncurrency: \"USD\",\n}) format(amount)\nreturn <div className=\"text-right font-medium\">{formatted}</div>\n},\n},\n]You can use the same approach to format other cells and headers Row Actions\nLet's add row actions to our table We'll use a <Dropdown /> component for this Update columns definitionUpdate our columns definition to add a new actions column The actions cell returns a <Dropdown /> component app/payments/columns tsxCopy\"use client\"\nimport { ColumnDef } from \"@tanstack/react-table\"\nimport { MoreHorizontal } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport {\nDropdownMenu,\nDropdownMenuContent,\nDropdownMenuItem,\nDropdownMenuLabel,\nDropdownMenuSeparator,\nDropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nexport const columns: ColumnDef<Payment>[] = [\n// {\nid: \"actions\",\ncell: ({ row }) => {\nconst payment = row original\nreturn (\n<DropdownMenu>\n<DropdownMenuTrigger asChild>\n<Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n<span className=\"sr-only\">Open menu</span>\n<MoreHorizontal className=\"h-4 w-4\" />\n</Button>\n</DropdownMenuTrigger>\n<DropdownMenuContent align=\"end\">\n<DropdownMenuLabel>Actions</DropdownMenuLabel>\n<DropdownMenuItem\nonClick={() => navigator clipboard writeText(payment",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1293665,
      "relative_path": "documentation\\shadcn\\_docs_components_data-table.html",
      "source_type": "documentation"
    },
    "token_count": 502,
    "chunk_index": 9,
    "total_chunks": 23
  },
  {
    "id": "440f33cd7e29b0d14d412418db1dc76a",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_data-table.html",
    "source_type": "documentation",
    "title": "Data Table - shadcn/ui",
    "content": "ColumnDef } from \"@tanstack/react-table\" import { MoreHorizontal } from \"lucide-react\" import { Button } from \"@/components/ui/button\" import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger, } from \"@/components/ui/dropdown-menu\" export const columns: ColumnDef<Payment>[] = [ // { id: \"actions\", cell: ({ row }) => { const payment = row original return ( <DropdownMenu> <DropdownMenuTrigger asChild> <Button variant=\"ghost\" className=\"h-8 w-8 p-0\"> <span className=\"sr-only\">Open menu</span> <MoreHorizontal className=\"h-4 w-4\" /> </Button> </DropdownMenuTrigger> <DropdownMenuContent align=\"end\"> <DropdownMenuLabel>Actions</DropdownMenuLabel> <DropdownMenuItem onClick={() => navigator clipboard writeText(paymentid)}\n>\nCopy payment ID\n</DropdownMenuItem>\n<DropdownMenuSeparator />\n<DropdownMenuItem>View customer</DropdownMenuItem>\n<DropdownMenuItem>View payment details</DropdownMenuItem>\n</DropdownMenuContent>\n</DropdownMenu>\n)\n},\n},\n// ]You can access the row data using row original in the cell function Use this to handle actions for your row eg use the id to make a DELETE call to your API Pagination\nNext, we'll add pagination to our table Update <DataTable>app/payments/data-table tsxCopyimport {\nColumnDef,\nflexRender,\ngetCoreRowModel,\ngetPaginationRowModel,\nuseReactTable,\n} from \"@tanstack/react-table\"\nexport function DataTable<TData, TValue>({\ncolumns,\ndata,\n}: DataTableProps<TData, TValue>) {\nconst table = useReactTable({\ndata,\ncolumns,\ngetCoreRowModel: getCoreRowModel(),\ngetPaginationRowModel: getPaginationRowModel(),\n})\n// }This will automatically paginate your rows into pages of 10 See the pagination docs for more information on customizing page size and implementing manual pagination Add pagination controlsWe can add pagination controls to our table using the <Button /> component and the table previousPage(), table nextPage() API methods app/payments/data-table",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1293665,
      "relative_path": "documentation\\shadcn\\_docs_components_data-table.html",
      "source_type": "documentation"
    },
    "token_count": 441,
    "chunk_index": 10,
    "total_chunks": 23
  },
  {
    "id": "295e436dbfcffdbb1a3e6fd466a2c810",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_data-table.html",
    "source_type": "documentation",
    "title": "Data Table - shadcn/ui",
    "content": "getPaginationRowModel, useReactTable, } from \"@tanstack/react-table\" export function DataTable<TData, TValue>({ columns, data, }: DataTableProps<TData, TValue>) { const table = useReactTable({ data, columns, getCoreRowModel: getCoreRowModel(), getPaginationRowModel: getPaginationRowModel(), }) // }This will automatically paginate your rows into pages of 10 See the pagination docs for more information on customizing page size and implementing manual pagination Add pagination controlsWe can add pagination controls to our table using the <Button /> component and the table previousPage(), table nextPage() API methods app/payments/data-tabletsxCopyimport { Button } from \"@/components/ui/button\"\nexport function DataTable<TData, TValue>({\ncolumns,\ndata,\n}: DataTableProps<TData, TValue>) {\nconst table = useReactTable({\ndata,\ncolumns,\ngetCoreRowModel: getCoreRowModel(),\ngetPaginationRowModel: getPaginationRowModel(),\n})\nreturn (\n<div>\n<div className=\"overflow-hidden rounded-md border\">\n<Table>\n{ // }\n</Table>\n</div>\n<div className=\"flex items-center justify-end space-x-2 py-4\">\n<Button\nvariant=\"outline\"\nsize=\"sm\"\nonClick={() => table previousPage()}\ndisabled={ table getCanPreviousPage()}\n>\nPrevious\n</Button>\n<Button\nvariant=\"outline\"\nsize=\"sm\"\nonClick={() => table nextPage()}\ndisabled={ table getCanNextPage()}\n>\nNext\n</Button>\n</div>\n</div>\n)\n}See Reusable Components section for a more advanced pagination component Sorting\nLet's make the email column sortable Update <DataTable>app/payments/data-table tsxCopy\"use client\"\nimport * as React from \"react\"\nimport {\nColumnDef,\nSortingState,\nflexRender,\ngetCoreRowModel,\ngetPaginationRowModel,\ngetSortedRowModel,\nuseReactTable,\n} from \"@tanstack/react-table\"\nexport function DataTable<TData, TValue>({\ncolumns,\ndata,\n}: DataTableProps<TData, TValue>) {\nconst [sorting, setSorting] = React useState<SortingState>([])\nconst table = useReactTable({\ndata,\ncolumns,\ngetCoreRowModel: getCoreRowModel(),\ngetPaginationRowModel: getPaginationRowModel(),\nonSortingChange: setSorting,\ngetSortedRowModel: getSortedRowModel(),\nstate: {\nsorting,\n},\n})\nreturn (\n<div>\n<div className=\"overflow-hidden rounded-md border\">\n<Table>{",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1293665,
      "relative_path": "documentation\\shadcn\\_docs_components_data-table.html",
      "source_type": "documentation"
    },
    "token_count": 495,
    "chunk_index": 11,
    "total_chunks": 23
  },
  {
    "id": "b7ca1494c322884f667d55c7ae033cec",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_data-table.html",
    "source_type": "documentation",
    "title": "Data Table - shadcn/ui",
    "content": "more advanced pagination component Sorting Let's make the email column sortable Update <DataTable>app/payments/data-table tsxCopy\"use client\" import * as React from \"react\" import { ColumnDef, SortingState, flexRender, getCoreRowModel, getPaginationRowModel, getSortedRowModel, useReactTable, } from \"@tanstack/react-table\" export function DataTable<TData, TValue>({ columns, data, }: DataTableProps<TData, TValue>) { const [sorting, setSorting] = React useState<SortingState>([]) const table = useReactTable({ data, columns, getCoreRowModel: getCoreRowModel(), getPaginationRowModel: getPaginationRowModel(), onSortingChange: setSorting, getSortedRowModel: getSortedRowModel(), state: { sorting, }, }) return ( <div> <div className=\"overflow-hidden rounded-md border\"> <Table>{}</Table>\n</div>\n</div>\n)\n}Make header cell sortableWe can now update the email header cell to add sorting controls app/payments/columns tsxCopy\"use client\"\nimport { ColumnDef } from \"@tanstack/react-table\"\nimport { ArrowUpDown } from \"lucide-react\"\nexport const columns: ColumnDef<Payment>[] = [\n{\naccessorKey: \"email\",\nheader: ({ column }) => {\nreturn (\n<Button\nvariant=\"ghost\"\nonClick={() => column toggleSorting(column getIsSorted() === \"asc\")}\n>\nEmail\n<ArrowUpDown className=\"ml-2 h-4 w-4\" />\n</Button>\n)\n},\n},\n]This will automatically sort the table (asc and desc) when the user toggles on the header cell Filtering\nLet's add a search input to filter emails in our table Update <DataTable>app/payments/data-table tsxCopy\"use client\"\nimport * as React from \"react\"\nimport {\nColumnDef,\nColumnFiltersState,\nSortingState,\nflexRender,\ngetCoreRowModel,\ngetFilteredRowModel,\ngetPaginationRowModel,\ngetSortedRowModel,\nuseReactTable,\n} from \"@tanstack/react-table\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nexport function DataTable<TData, TValue>({\ncolumns,\ndata,\n}: DataTableProps<TData, TValue>) {\nconst [sorting, setSorting] = React useState<SortingState>([])\nconst [columnFilters, setColumnFilters] = React",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1293665,
      "relative_path": "documentation\\shadcn\\_docs_components_data-table.html",
      "source_type": "documentation"
    },
    "token_count": 490,
    "chunk_index": 12,
    "total_chunks": 23
  },
  {
    "id": "0097bf0d9a7b0b8dd1ff35190d8ca197",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_data-table.html",
    "source_type": "documentation",
    "title": "Data Table - shadcn/ui",
    "content": "the user toggles on the header cell Filtering Let's add a search input to filter emails in our table Update <DataTable>app/payments/data-table tsxCopy\"use client\" import * as React from \"react\" import { ColumnDef, ColumnFiltersState, SortingState, flexRender, getCoreRowModel, getFilteredRowModel, getPaginationRowModel, getSortedRowModel, useReactTable, } from \"@tanstack/react-table\" import { Button } from \"@/components/ui/button\" import { Input } from \"@/components/ui/input\" export function DataTable<TData, TValue>({ columns, data, }: DataTableProps<TData, TValue>) { const [sorting, setSorting] = React useState<SortingState>([]) const [columnFilters, setColumnFilters] = ReactuseState<ColumnFiltersState>(\n[]\n)\nconst table = useReactTable({\ndata,\ncolumns,\nonSortingChange: setSorting,\ngetCoreRowModel: getCoreRowModel(),\ngetPaginationRowModel: getPaginationRowModel(),\ngetSortedRowModel: getSortedRowModel(),\nonColumnFiltersChange: setColumnFilters,\ngetFilteredRowModel: getFilteredRowModel(),\nstate: {\nsorting,\ncolumnFilters,\n},\n})\nreturn (\n<div>\n<div className=\"flex items-center py-4\">\n<Input\nplaceholder=\"Filter emails \"\nvalue={(table getColumn(\"email\") getFilterValue() as string) \"\"}\nonChange={(event) =>\ntable getColumn(\"email\") setFilterValue(event target value)\n}\nclassName=\"max-w-sm\"\n/>\n</div>\n<div className=\"overflow-hidden rounded-md border\">\n<Table>{ }</Table>\n</div>\n</div>\n)\n}Filtering is now enabled for the email column You can add filters to other columns as well See the filtering docs for more information on customizing filters Visibility\nAdding column visibility is fairly simple using @tanstack/react-table visibility API Update <DataTable>app/payments/data-table",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1293665,
      "relative_path": "documentation\\shadcn\\_docs_components_data-table.html",
      "source_type": "documentation"
    },
    "token_count": 384,
    "chunk_index": 13,
    "total_chunks": 23
  },
  {
    "id": "e1f9d705241984b6b1468bbf1e232302",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_data-table.html",
    "source_type": "documentation",
    "title": "Data Table - shadcn/ui",
    "content": "( <div> <div className=\"flex items-center py-4\"> <Input placeholder=\"Filter emails \" value={(table getColumn(\"email\") getFilterValue() as string) \"\"} onChange={(event) => table getColumn(\"email\") setFilterValue(event target value) } className=\"max-w-sm\" /> </div> <div className=\"overflow-hidden rounded-md border\"> <Table>{ }</Table> </div> </div> ) }Filtering is now enabled for the email column You can add filters to other columns as well See the filtering docs for more information on customizing filters Visibility Adding column visibility is fairly simple using @tanstack/react-table visibility API Update <DataTable>app/payments/data-tabletsxCopy\"use client\"\nimport * as React from \"react\"\nimport {\nColumnDef,\nColumnFiltersState,\nSortingState,\nVisibilityState,\nflexRender,\ngetCoreRowModel,\ngetFilteredRowModel,\ngetPaginationRowModel,\ngetSortedRowModel,\nuseReactTable,\n} from \"@tanstack/react-table\"\nimport { Button } from \"@/components/ui/button\"\nimport {\nDropdownMenu,\nDropdownMenuCheckboxItem,\nDropdownMenuContent,\nDropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nexport function DataTable<TData, TValue>({\ncolumns,\ndata,\n}: DataTableProps<TData, TValue>) {\nconst [sorting, setSorting] = React useState<SortingState>([])\nconst [columnFilters, setColumnFilters] = React useState<ColumnFiltersState>(\n[]\n)\nconst [columnVisibility, setColumnVisibility] =\nReact useState<VisibilityState>({})\nconst table = useReactTable({\ndata,\ncolumns,\nonSortingChange: setSorting,\nonColumnFiltersChange: setColumnFilters,\ngetCoreRowModel: getCoreRowModel(),\ngetPaginationRowModel: getPaginationRowModel(),\ngetSortedRowModel: getSortedRowModel(),\ngetFilteredRowModel: getFilteredRowModel(),\nonColumnVisibilityChange: setColumnVisibility,\nstate: {\nsorting,\ncolumnFilters,\ncolumnVisibility,\n},\n})\nreturn (\n<div>\n<div className=\"flex items-center py-4\">\n<Input\nplaceholder=\"Filter emails \"\nvalue={table getColumn(\"email\") getFilterValue() as string}\nonChange={(event) =>\ntable getColumn(\"email\") setFilterValue(event target",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1293665,
      "relative_path": "documentation\\shadcn\\_docs_components_data-table.html",
      "source_type": "documentation"
    },
    "token_count": 454,
    "chunk_index": 14,
    "total_chunks": 23
  },
  {
    "id": "2541c40e4d9429e6afad0884286cafb9",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_data-table.html",
    "source_type": "documentation",
    "title": "Data Table - shadcn/ui",
    "content": "TValue>({ columns, data, }: DataTableProps<TData, TValue>) { const [sorting, setSorting] = React useState<SortingState>([]) const [columnFilters, setColumnFilters] = React useState<ColumnFiltersState>( [] ) const [columnVisibility, setColumnVisibility] = React useState<VisibilityState>({}) const table = useReactTable({ data, columns, onSortingChange: setSorting, onColumnFiltersChange: setColumnFilters, getCoreRowModel: getCoreRowModel(), getPaginationRowModel: getPaginationRowModel(), getSortedRowModel: getSortedRowModel(), getFilteredRowModel: getFilteredRowModel(), onColumnVisibilityChange: setColumnVisibility, state: { sorting, columnFilters, columnVisibility, }, }) return ( <div> <div className=\"flex items-center py-4\"> <Input placeholder=\"Filter emails \" value={table getColumn(\"email\") getFilterValue() as string} onChange={(event) => table getColumn(\"email\") setFilterValue(event targetvalue)\n}\nclassName=\"max-w-sm\"\n/>\n<DropdownMenu>\n<DropdownMenuTrigger asChild>\n<Button variant=\"outline\" className=\"ml-auto\">\nColumns\n</Button>\n</DropdownMenuTrigger>\n<DropdownMenuContent align=\"end\">\n{table getAllColumns() filter(\n(column) => column getCanHide()\n) map((column) => {\nreturn (\n<DropdownMenuCheckboxItem\nkey={column id}\nclassName=\"capitalize\"\nchecked={column getIsVisible()}\nonCheckedChange={(value) =>\ncolumn toggleVisibility( value)\n}\n>\n{column id}\n</DropdownMenuCheckboxItem>\n)\n})}\n</DropdownMenuContent>\n</DropdownMenu>\n</div>\n<div className=\"overflow-hidden rounded-md border\">\n<Table>{ }</Table>\n</div>\n</div>\n)\n}This adds a dropdown menu that you can use to toggle column visibility Row Selection\nNext, we're going to add row selection to our table Update column definitionsapp/payments/columns tsxCopy\"use client\"\nimport { ColumnDef } from \"@tanstack/react-table\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nexport const columns: ColumnDef<Payment>[] = [\n{\nid: \"select\",\nheader: ({ table }) => (\n<Checkbox\nchecked={\ntable getIsAllPageRowsSelected() ||\n(table getIsSomePageRowsSelected() && \"indeterminate\")\n}\nonCheckedChange={(value) => table",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1293665,
      "relative_path": "documentation\\shadcn\\_docs_components_data-table.html",
      "source_type": "documentation"
    },
    "token_count": 501,
    "chunk_index": 15,
    "total_chunks": 23
  },
  {
    "id": "a8eef6ffcc546d639ad76efb7ea7bf23",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_data-table.html",
    "source_type": "documentation",
    "title": "Data Table - shadcn/ui",
    "content": "}This adds a dropdown menu that you can use to toggle column visibility Row Selection Next, we're going to add row selection to our table Update column definitionsapp/payments/columns tsxCopy\"use client\" import { ColumnDef } from \"@tanstack/react-table\" import { Badge } from \"@/components/ui/badge\" import { Checkbox } from \"@/components/ui/checkbox\" export const columns: ColumnDef<Payment>[] = [ { id: \"select\", header: ({ table }) => ( <Checkbox checked={ table getIsAllPageRowsSelected() || (table getIsSomePageRowsSelected() && \"indeterminate\") } onCheckedChange={(value) => tabletoggleAllPageRowsSelected( value)}\naria-label=\"Select all\"\n/>\n),\ncell: ({ row }) => (\n<Checkbox\nchecked={row getIsSelected()}\nonCheckedChange={(value) => row toggleSelected( value)}\naria-label=\"Select row\"\n/>\n),\nenableSorting: false,\nenableHiding: false,\n},\n]Update <DataTable>app/payments/data-table tsxCopyexport function DataTable<TData, TValue>({\ncolumns,\ndata,\n}: DataTableProps<TData, TValue>) {\nconst [sorting, setSorting] = React useState<SortingState>([])\nconst [columnFilters, setColumnFilters] = React useState<ColumnFiltersState>(\n[]\n)\nconst [columnVisibility, setColumnVisibility] =\nReact useState<VisibilityState>({})\nconst [rowSelection, setRowSelection] = React useState({})\nconst table = useReactTable({\ndata,\ncolumns,\nonSortingChange: setSorting,\nonColumnFiltersChange: setColumnFilters,\ngetCoreRowModel: getCoreRowModel(),\ngetPaginationRowModel: getPaginationRowModel(),\ngetSortedRowModel: getSortedRowModel(),\ngetFilteredRowModel: getFilteredRowModel(),\nonColumnVisibilityChange: setColumnVisibility,\nonRowSelectionChange: setRowSelection,\nstate: {\nsorting,\ncolumnFilters,\ncolumnVisibility,\nrowSelection,\n},\n})\nreturn (\n<div>\n<div className=\"overflow-hidden rounded-md border\">\n<Table />\n</div>\n</div>\n)\n}This adds a checkbox to each row and a checkbox in the header to select all rows Show selected rowsYou can show the number of selected rows using the table getFilteredSelectedRowModel() API Copy<div className=\"text-muted-foreground flex-1 text-sm\">\n{table getFilteredSelectedRowModel() rows length} of{\" \"}\n{table getFilteredRowModel() rows",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1293665,
      "relative_path": "documentation\\shadcn\\_docs_components_data-table.html",
      "source_type": "documentation"
    },
    "token_count": 499,
    "chunk_index": 16,
    "total_chunks": 23
  },
  {
    "id": "cd31c3684f0dac68edfb3d0e18750384",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_data-table.html",
    "source_type": "documentation",
    "title": "Data Table - shadcn/ui",
    "content": "getCoreRowModel(), getPaginationRowModel: getPaginationRowModel(), getSortedRowModel: getSortedRowModel(), getFilteredRowModel: getFilteredRowModel(), onColumnVisibilityChange: setColumnVisibility, onRowSelectionChange: setRowSelection, state: { sorting, columnFilters, columnVisibility, rowSelection, }, }) return ( <div> <div className=\"overflow-hidden rounded-md border\"> <Table /> </div> </div> ) }This adds a checkbox to each row and a checkbox in the header to select all rows Show selected rowsYou can show the number of selected rows using the table getFilteredSelectedRowModel() API Copy<div className=\"text-muted-foreground flex-1 text-sm\"> {table getFilteredSelectedRowModel() rows length} of{\" \"} {table getFilteredRowModel() rowslength} row(s) selected </div>\nReusable Components\nHere are some components you can use to build your data tables This is from the Tasks demo Column header\nMake any column header sortable and hideable Expandcomponents/data-table-column-header tsxCopyimport { Column } from \"@tanstack/react-table\"\nimport { ArrowDown, ArrowUp, ChevronsUpDown, EyeOff } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/registry/new-york-v4/ui/button\"\nimport {\nDropdownMenu,\nDropdownMenuContent,\nDropdownMenuItem,\nDropdownMenuSeparator,\nDropdownMenuTrigger,\n} from \"@/registry/new-york-v4/ui/dropdown-menu\"\ninterface DataTableColumnHeaderProps<TData, TValue>\nextends React HTMLAttributes<HTMLDivElement> {\ncolumn: Column<TData, TValue>\ntitle: string\n}\nexport function DataTableColumnHeader<TData, TValue>({\ncolumn,\ntitle,\nclassName,\n}: DataTableColumnHeaderProps<TData, TValue>) {\nif ( column getCanSort()) {\nreturn <div className={cn(className)}>{title}</div>\n}\nreturn (\n<div className={cn(\"flex items-center gap-2\", className)}>\n<DropdownMenu>\n<DropdownMenuTrigger asChild>\n<Button\nvariant=\"ghost\"\nsize=\"sm\"\nclassName=\"data-[state=open]:bg-accent -ml-3 h-8\"\n>\n<span>{title}</span>\n{column getIsSorted() === \"desc\" (\n<ArrowDown />\n) : column getIsSorted() === \"asc\"",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1293665,
      "relative_path": "documentation\\shadcn\\_docs_components_data-table.html",
      "source_type": "documentation"
    },
    "token_count": 479,
    "chunk_index": 17,
    "total_chunks": 23
  },
  {
    "id": "8607c901fc76e9a5e23705a3ed03dd9c",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_data-table.html",
    "source_type": "documentation",
    "title": "Data Table - shadcn/ui",
    "content": "from \"@/registry/new-york-v4/ui/button\" import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger, } from \"@/registry/new-york-v4/ui/dropdown-menu\" interface DataTableColumnHeaderProps<TData, TValue> extends React HTMLAttributes<HTMLDivElement> { column: Column<TData, TValue> title: string } export function DataTableColumnHeader<TData, TValue>({ column, title, className, }: DataTableColumnHeaderProps<TData, TValue>) { if ( column getCanSort()) { return <div className={cn(className)}>{title}</div> } return ( <div className={cn(\"flex items-center gap-2\", className)}> <DropdownMenu> <DropdownMenuTrigger asChild> <Button variant=\"ghost\" size=\"sm\" className=\"data-[state=open]:bg-accent -ml-3 h-8\" > <span>{title}</span> {column getIsSorted() === \"desc\" ( <ArrowDown /> ) : column getIsSorted() === \"asc\"(\n<ArrowUp />\n) : (\n<ChevronsUpDown />\n)}\n</Button>\n</DropdownMenuTrigger>\n<DropdownMenuContent align=\"start\">\n<DropdownMenuItem onClick={() => column toggleSorting(false)}>\n<ArrowUp />\nAsc\n</DropdownMenuItem>\n<DropdownMenuItem onClick={() => column toggleSorting(true)}>\n<ArrowDown />\nDesc\n</DropdownMenuItem>\n<DropdownMenuSeparator />\n<DropdownMenuItem onClick={() => column toggleVisibility(false)}>\n<EyeOff />\nHide\n</DropdownMenuItem>\n</DropdownMenuContent>\n</DropdownMenu>\n</div>\n)\n}\nExpand\nCopyexport const columns = [\n{\naccessorKey: \"email\",\nheader: ({ column }) => (\n<DataTableColumnHeader column={column} title=\"Email\" />\n),\n},\n]\nPagination\nAdd pagination controls to your table including page size and selection count",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1293665,
      "relative_path": "documentation\\shadcn\\_docs_components_data-table.html",
      "source_type": "documentation"
    },
    "token_count": 379,
    "chunk_index": 18,
    "total_chunks": 23
  },
  {
    "id": "e925ec7206006acc4801e6ad1369baca",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_data-table.html",
    "source_type": "documentation",
    "title": "Data Table - shadcn/ui",
    "content": "<ChevronsUpDown /> )} </Button> </DropdownMenuTrigger> <DropdownMenuContent align=\"start\"> <DropdownMenuItem onClick={() => column toggleSorting(false)}> <ArrowUp /> Asc </DropdownMenuItem> <DropdownMenuItem onClick={() => column toggleSorting(true)}> <ArrowDown /> Desc </DropdownMenuItem> <DropdownMenuSeparator /> <DropdownMenuItem onClick={() => column toggleVisibility(false)}> <EyeOff /> Hide </DropdownMenuItem> </DropdownMenuContent> </DropdownMenu> </div> ) } Expand Copyexport const columns = [ { accessorKey: \"email\", header: ({ column }) => ( <DataTableColumnHeader column={column} title=\"Email\" /> ), }, ] Pagination Add pagination controls to your table including page size and selection countExpandCopyimport { Table } from \"@tanstack/react-table\"\nimport {\nChevronLeft,\nChevronRight,\nChevronsLeft,\nChevronsRight,\n} from \"lucide-react\"\nimport { Button } from \"@/registry/new-york-v4/ui/button\"\nimport {\nSelect,\nSelectContent,\nSelectItem,\nSelectTrigger,\nSelectValue,\n} from \"@/registry/new-york-v4/ui/select\"\ninterface DataTablePaginationProps<TData> {\ntable: Table<TData>\n}\nexport function DataTablePagination<TData>({\ntable,\n}: DataTablePaginationProps<TData>) {\nreturn (\n<div className=\"flex items-center justify-between px-2\">\n<div className=\"text-muted-foreground flex-1 text-sm\">\n{table getFilteredSelectedRowModel() rows length} of{\" \"}\n{table getFilteredRowModel() rows length} row(s) selected </div>\n<div className=\"flex items-center space-x-6 lg:space-x-8\">\n<div className=\"flex items-center space-x-2\">\n<p className=\"text-sm font-medium\">Rows per page</p>\n<Select\nvalue={`${table getState() pagination pageSize}`}\nonValueChange={(value) => {\ntable setPageSize(Number(value))\n}}\n>\n<SelectTrigger className=\"h-8 w-[70px]\">\n<SelectValue placeholder={table getState() pagination pageSize} />\n</SelectTrigger>\n<SelectContent side=\"top\">\n{[10, 20, 25, 30, 40, 50]",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1293665,
      "relative_path": "documentation\\shadcn\\_docs_components_data-table.html",
      "source_type": "documentation"
    },
    "token_count": 447,
    "chunk_index": 19,
    "total_chunks": 23
  },
  {
    "id": "54ab81009f486230af65c353534d2278",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_data-table.html",
    "source_type": "documentation",
    "title": "Data Table - shadcn/ui",
    "content": "} export function DataTablePagination<TData>({ table, }: DataTablePaginationProps<TData>) { return ( <div className=\"flex items-center justify-between px-2\"> <div className=\"text-muted-foreground flex-1 text-sm\"> {table getFilteredSelectedRowModel() rows length} of{\" \"} {table getFilteredRowModel() rows length} row(s) selected </div> <div className=\"flex items-center space-x-6 lg:space-x-8\"> <div className=\"flex items-center space-x-2\"> <p className=\"text-sm font-medium\">Rows per page</p> <Select value={`${table getState() pagination pageSize}`} onValueChange={(value) => { table setPageSize(Number(value)) }} > <SelectTrigger className=\"h-8 w-[70px]\"> <SelectValue placeholder={table getState() pagination pageSize} /> </SelectTrigger> <SelectContent side=\"top\"> {[10, 20, 25, 30, 40, 50]map((pageSize) => (\n<SelectItem key={pageSize} value={`${pageSize}`}>\n{pageSize}\n</SelectItem>\n))}\n</SelectContent>\n</Select>\n</div>\n<div className=\"flex w-[100px] items-center justify-center text-sm font-medium\">\nPage {table getState() pagination pageIndex + 1} of{\" \"}\n{table getPageCount()}\n</div>\n<div className=\"flex items-center space-x-2\">\n<Button\nvariant=\"outline\"\nsize=\"icon\"\nclassName=\"hidden size-8 lg:flex\"\nonClick={() => table setPageIndex(0)}\ndisabled={ table getCanPreviousPage()}\n>\n<span className=\"sr-only\">Go to first page</span>\n<ChevronsLeft />\n</Button>\n<Button\nvariant=\"outline\"\nsize=\"icon\"\nclassName=\"size-8\"\nonClick={() => table previousPage()}\ndisabled={ table getCanPreviousPage()}\n>\n<span className=\"sr-only\">Go to previous page</span>\n<ChevronLeft />\n</Button>\n<Button\nvariant=\"outline\"\nsize=\"icon\"\nclassName=\"size-8\"\nonClick={() => table nextPage()}\ndisabled={ table getCanNextPage()}\n>\n<span className=\"sr-only\">Go to next page</span>\n<ChevronRight />\n</Button>\n<Button\nvariant=\"outline\"\nsize=\"icon\"\nclassName=\"hidden size-8 lg:flex\"\nonClick={() => table setPageIndex(table getPageCount() - 1)}\ndisabled={ table",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1293665,
      "relative_path": "documentation\\shadcn\\_docs_components_data-table.html",
      "source_type": "documentation"
    },
    "token_count": 488,
    "chunk_index": 20,
    "total_chunks": 23
  },
  {
    "id": "f879e429643702c49243af729a3afbc6",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_data-table.html",
    "source_type": "documentation",
    "title": "Data Table - shadcn/ui",
    "content": "variant=\"outline\" size=\"icon\" className=\"hidden size-8 lg:flex\" onClick={() => table setPageIndex(0)} disabled={ table getCanPreviousPage()} > <span className=\"sr-only\">Go to first page</span> <ChevronsLeft /> </Button> <Button variant=\"outline\" size=\"icon\" className=\"size-8\" onClick={() => table previousPage()} disabled={ table getCanPreviousPage()} > <span className=\"sr-only\">Go to previous page</span> <ChevronLeft /> </Button> <Button variant=\"outline\" size=\"icon\" className=\"size-8\" onClick={() => table nextPage()} disabled={ table getCanNextPage()} > <span className=\"sr-only\">Go to next page</span> <ChevronRight /> </Button> <Button variant=\"outline\" size=\"icon\" className=\"hidden size-8 lg:flex\" onClick={() => table setPageIndex(table getPageCount() - 1)} disabled={ tablegetCanNextPage()}\n>\n<span className=\"sr-only\">Go to last page</span>\n<ChevronsRight />\n</Button>\n</div>\n</div>\n</div>\n)\n}\nExpand\nCopy<DataTablePagination table={table} />\nColumn toggle\nA component to toggle column visibility ExpandCopy\"use client\"\nimport { DropdownMenuTrigger } from \"@radix-ui/react-dropdown-menu\"\nimport { Table } from \"@tanstack/react-table\"\nimport { Settings2 } from \"lucide-react\"\nimport { Button } from \"@/registry/new-york-v4/ui/button\"\nimport {\nDropdownMenu,\nDropdownMenuCheckboxItem,\nDropdownMenuContent,\nDropdownMenuLabel,\nDropdownMenuSeparator,\n} from \"@/registry/new-york-v4/ui/dropdown-menu\"\nexport function DataTableViewOptions<TData>({\ntable,\n}: {\ntable: Table<TData>\n}) {\nreturn (\n<DropdownMenu>\n<DropdownMenuTrigger asChild>\n<Button\nvariant=\"outline\"\nsize=\"sm\"\nclassName=\"ml-auto hidden h-8 lg:flex\"\n>\n<Settings2 />\nView\n</Button>\n</DropdownMenuTrigger>\n<DropdownMenuContent align=\"end\" className=\"w-[150px]\">\n<DropdownMenuLabel>Toggle columns</DropdownMenuLabel>\n<DropdownMenuSeparator />\n{table getAllColumns() filter(\n(column) =>\ntypeof column accessorFn == \"undefined\" && column getCanHide()\n) map((column) => {\nreturn (\n<DropdownMenuCheckboxItem\nkey={column",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1293665,
      "relative_path": "documentation\\shadcn\\_docs_components_data-table.html",
      "source_type": "documentation"
    },
    "token_count": 497,
    "chunk_index": 21,
    "total_chunks": 23
  },
  {
    "id": "521cd4805d80446181c47431deb3faa6",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_data-table.html",
    "source_type": "documentation",
    "title": "Data Table - shadcn/ui",
    "content": "Settings2 } from \"lucide-react\" import { Button } from \"@/registry/new-york-v4/ui/button\" import { DropdownMenu, DropdownMenuCheckboxItem, DropdownMenuContent, DropdownMenuLabel, DropdownMenuSeparator, } from \"@/registry/new-york-v4/ui/dropdown-menu\" export function DataTableViewOptions<TData>({ table, }: { table: Table<TData> }) { return ( <DropdownMenu> <DropdownMenuTrigger asChild> <Button variant=\"outline\" size=\"sm\" className=\"ml-auto hidden h-8 lg:flex\" > <Settings2 /> View </Button> </DropdownMenuTrigger> <DropdownMenuContent align=\"end\" className=\"w-[150px]\"> <DropdownMenuLabel>Toggle columns</DropdownMenuLabel> <DropdownMenuSeparator /> {table getAllColumns() filter( (column) => typeof column accessorFn == \"undefined\" && column getCanHide() ) map((column) => { return ( <DropdownMenuCheckboxItem key={columnid}\nclassName=\"capitalize\"\nchecked={column getIsVisible()}\nonCheckedChange={(value) => column toggleVisibility( value)}\n>\n{column id}\n</DropdownMenuCheckboxItem>\n)\n})}\n</DropdownMenuContent>\n</DropdownMenu>\n)\n}\nExpand\nCopy<DataTableViewOptions table={table} /> Context MenuDate Picker On This PageIntroductionTable of ContentsInstallationPrerequisitesProject StructureBasic TableColumn Definitions<DataTable /> componentRender the tableCell FormattingUpdate columns definitionRow ActionsUpdate columns definitionPaginationUpdate <DataTable>Add pagination controlsSortingUpdate <DataTable>Make header cell sortableFilteringUpdate <DataTable>VisibilityUpdate <DataTable>Row SelectionUpdate column definitionsUpdate <DataTable>Show selected rowsReusable ComponentsColumn headerPaginationColumn toggleDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1293665,
      "relative_path": "documentation\\shadcn\\_docs_components_data-table.html",
      "source_type": "documentation"
    },
    "token_count": 407,
    "chunk_index": 22,
    "total_chunks": 23
  },
  {
    "id": "cece03761082eace4d293efd192ed22c",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_input.html",
    "source_type": "documentation",
    "title": "Input - shadcn/ui",
    "content": "Input - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonInputCopy PagePreviousNextDisplays a form input field or a component that looks like an input field",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 460663,
      "relative_path": "documentation\\shadcn\\_docs_components_input.html",
      "source_type": "documentation"
    },
    "token_count": 198,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "89b30dfee590abdbcbc0e4c42e09d783",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_input.html",
    "source_type": "documentation",
    "title": "Input - shadcn/ui",
    "content": "Input - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonInputCopy PagePreviousNextDisplays a form input field or a component that looks like an input fieldPreviewCodeCopyimport { Input } from \"@/components/ui/input\"\nexport function InputDemo() {\nreturn <Input type=\"email\" placeholder=\"Email\" />\n}\nInstallation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add inputCopy\nUsage\nCopyimport { Input } from \"@/components/ui/input\"\nCopy<Input />\nExamples\nDefault\nPreviewCodeCopyimport { Input } from \"@/components/ui/input\"\nexport function InputDemo() {\nreturn <Input type=\"email\" placeholder=\"Email\" />\n}\nFile\nPreviewCodePictureCopyimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nexport function InputFile() {\nreturn (\n<div className=\"grid w-full max-w-sm items-center gap-3\">\n<Label htmlFor=\"picture\">Picture</Label>\n<Input id=\"picture\" type=\"file\" />\n</div>\n)\n}\nDisabled\nPreviewCodeCopyimport { Input } from \"@/components/ui/input\"\nexport function InputDisabled() {\nreturn <Input disabled type=\"email\" placeholder=\"Email\" />\n}\nWith Label\nPreviewCodeEmailCopyimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nexport function InputWithLabel() {\nreturn (\n<div className=\"grid w-full max-w-sm items-center gap-3\">\n<Label htmlFor=\"email\">Email</Label>\n<Input type=\"email\" id=\"email\" placeholder=\"Email\" />\n</div>\n)\n}\nWith Button\nPreviewCodeSubscribeCopyimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nexport function InputWithButton() {\nreturn (\n<div className=\"flex w-full max-w-sm items-center gap-2\">\n<Input type=\"email\" placeholder=\"Email\" />\n<Button type=\"submit\" variant=\"outline\">\nSubscribe\n</Button>\n</div>\n)\n}\nForm\nPreviewCodeUsernameThis is your public display name",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 460663,
      "relative_path": "documentation\\shadcn\\_docs_components_input.html",
      "source_type": "documentation"
    },
    "token_count": 588,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "fb7ee3a05f61d5af24883a12ba217b32",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_input.html",
    "source_type": "documentation",
    "title": "Input - shadcn/ui",
    "content": "} from \"@/components/ui/input\" import { Label } from \"@/components/ui/label\" export function InputWithLabel() { return ( <div className=\"grid w-full max-w-sm items-center gap-3\"> <Label htmlFor=\"email\">Email</Label> <Input type=\"email\" id=\"email\" placeholder=\"Email\" /> </div> ) } With Button PreviewCodeSubscribeCopyimport { Button } from \"@/components/ui/button\" import { Input } from \"@/components/ui/input\" export function InputWithButton() { return ( <div className=\"flex w-full max-w-sm items-center gap-2\"> <Input type=\"email\" placeholder=\"Email\" /> <Button type=\"submit\" variant=\"outline\"> Subscribe </Button> </div> ) } Form PreviewCodeUsernameThis is your public display nameSubmitCopy\"use client\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport { toast } from \"sonner\"\nimport { z } from \"zod\"\nimport { Button } from \"@/components/ui/button\"\nimport {\nForm,\nFormControl,\nFormDescription,\nFormField,\nFormItem,\nFormLabel,\nFormMessage,\n} from \"@/components/ui/form\"\nimport { Input } from \"@/components/ui/input\"\nconst FormSchema = z object({\nusername: z string() min(2, {\nmessage: \"Username must be at least 2 characters \",\n}),\n})\nexport function InputForm() {\nconst form = useForm<z infer<typeof FormSchema>>({\nresolver: zodResolver(FormSchema),\ndefaultValues: {\nusername: \"\",\n},\n})\nfunction onSubmit(data: z infer<typeof FormSchema>) {\ntoast(\"You submitted the following values\", {\ndescription: (\n<pre className=\"mt-2 w-[320px] rounded-md bg-neutral-950 p-4\">\n<code className=\"text-white\">{JSON stringify(data, null, 2)}</code>\n</pre>\n),\n})\n}\nreturn (\n<Form { form}>\n<form onSubmit={form handleSubmit(onSubmit)} className=\"w-2/3 space-y-6\">\n<FormField\ncontrol={form control}\nname=\"username\"\nrender={({ field }) => (\n<FormItem>\n<FormLabel>Username</FormLabel>\n<FormControl>\n<Input placeholder=\"shadcn\" { field} />\n</FormControl>\n<FormDescription>\nThis is your public display name",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 460663,
      "relative_path": "documentation\\shadcn\\_docs_components_input.html",
      "source_type": "documentation"
    },
    "token_count": 473,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "2684d5695f7c41d9f0a089ed78158876",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_input.html",
    "source_type": "documentation",
    "title": "Input - shadcn/ui",
    "content": "= useForm<z infer<typeof FormSchema>>({ resolver: zodResolver(FormSchema), defaultValues: { username: \"\", }, }) function onSubmit(data: z infer<typeof FormSchema>) { toast(\"You submitted the following values\", { description: ( <pre className=\"mt-2 w-[320px] rounded-md bg-neutral-950 p-4\"> <code className=\"text-white\">{JSON stringify(data, null, 2)}</code> </pre> ), }) } return ( <Form { form}> <form onSubmit={form handleSubmit(onSubmit)} className=\"w-2/3 space-y-6\"> <FormField control={form control} name=\"username\" render={({ field }) => ( <FormItem> <FormLabel>Username</FormLabel> <FormControl> <Input placeholder=\"shadcn\" { field} /> </FormControl> <FormDescription> This is your public display name</FormDescription>\n<FormMessage />\n</FormItem>\n)}\n/>\n<Button type=\"submit\">Submit</Button>\n</form>\n</Form>\n)\n}\nHover CardInput OTP On This PageInstallationUsageExamplesDefaultFileDisabledWith LabelWith ButtonFormDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 460663,
      "relative_path": "documentation\\shadcn\\_docs_components_input.html",
      "source_type": "documentation"
    },
    "token_count": 289,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "da189bc5908a80bb96fcedad609c3560",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_input-otp.html",
    "source_type": "documentation",
    "title": "Input OTP - shadcn/ui",
    "content": "Input OTP - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonInput OTPCopy PagePreviousNextAccessible one-time password component with copy paste functionality Docs PreviewCodeCopyimport {\nInputOTP,\nInputOTPGroup,\nInputOTPSeparator,\nInputOTPSlot,\n} from \"@/components/ui/input-otp\"\nexport function InputOTPDemo() {\nreturn (\n<InputOTP maxLength={6}>\n<InputOTPGroup>\n<InputOTPSlot index={0} />\n<InputOTPSlot index={1} />\n<InputOTPSlot index={2} />\n</InputOTPGroup>\n<InputOTPSeparator />\n<InputOTPGroup>\n<InputOTPSlot index={3} />\n<InputOTPSlot index={4} />\n<InputOTPSlot index={5} />\n</InputOTPGroup>\n</InputOTP>\n)\n}\nAbout\nInput OTP is built on top of input-otp by @guilherme_rodz",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 650912,
      "relative_path": "documentation\\shadcn\\_docs_components_input-otp.html",
      "source_type": "documentation"
    },
    "token_count": 347,
    "chunk_index": 0,
    "total_chunks": 9
  },
  {
    "id": "d37c97a3c93e78b226f91a7a85572c53",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_input-otp.html",
    "source_type": "documentation",
    "title": "Input OTP - shadcn/ui",
    "content": "StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonInput OTPCopy PagePreviousNextAccessible one-time password component with copy paste functionality Docs PreviewCodeCopyimport { InputOTP, InputOTPGroup, InputOTPSeparator, InputOTPSlot, } from \"@/components/ui/input-otp\" export function InputOTPDemo() { return ( <InputOTP maxLength={6}> <InputOTPGroup> <InputOTPSlot index={0} /> <InputOTPSlot index={1} /> <InputOTPSlot index={2} /> </InputOTPGroup> <InputOTPSeparator /> <InputOTPGroup> <InputOTPSlot index={3} /> <InputOTPSlot index={4} /> <InputOTPSlot index={5} /> </InputOTPGroup> </InputOTP> ) } About Input OTP is built on top of input-otp by @guilherme_rodzInstallation\nCLIManualRun the following command:pnpmnpmyarnbunpnpm dlx shadcn@latest add input-otpCopy\nUsage\nCopyimport {\nInputOTP,\nInputOTPGroup,\nInputOTPSeparator,\nInputOTPSlot,\n} from \"@/components/ui/input-otp\"\nCopy<InputOTP maxLength={6}>\n<InputOTPGroup>\n<InputOTPSlot index={0} />\n<InputOTPSlot index={1} />\n<InputOTPSlot index={2} />\n</InputOTPGroup>\n<InputOTPSeparator />\n<InputOTPGroup>\n<InputOTPSlot index={3} />\n<InputOTPSlot index={4} />\n<InputOTPSlot index={5} />\n</InputOTPGroup>\n</InputOTP>\nExamples\nPattern\nUse the pattern prop to define a custom pattern for the OTP input",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 650912,
      "relative_path": "documentation\\shadcn\\_docs_components_input-otp.html",
      "source_type": "documentation"
    },
    "token_count": 376,
    "chunk_index": 1,
    "total_chunks": 9
  },
  {
    "id": "70e90fea9858c3798c875053ac449d8a",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_input-otp.html",
    "source_type": "documentation",
    "title": "Input OTP - shadcn/ui",
    "content": "/> </InputOTPGroup> </InputOTP> ) } About Input OTP is built on top of input-otp by @guilherme_rodzInstallation CLIManualRun the following command:pnpmnpmyarnbunpnpm dlx shadcn@latest add input-otpCopy Usage Copyimport { InputOTP, InputOTPGroup, InputOTPSeparator, InputOTPSlot, } from \"@/components/ui/input-otp\" Copy<InputOTP maxLength={6}> <InputOTPGroup> <InputOTPSlot index={0} /> <InputOTPSlot index={1} /> <InputOTPSlot index={2} /> </InputOTPGroup> <InputOTPSeparator /> <InputOTPGroup> <InputOTPSlot index={3} /> <InputOTPSlot index={4} /> <InputOTPSlot index={5} /> </InputOTPGroup> </InputOTP> Examples Pattern Use the pattern prop to define a custom pattern for the OTP inputPreviewCodeCopy\"use client\"\nimport { REGEXP_ONLY_DIGITS_AND_CHARS } from \"input-otp\"\nimport {\nInputOTP,\nInputOTPGroup,\nInputOTPSlot,\n} from \"@/components/ui/input-otp\"\nexport function InputOTPPattern() {\nreturn (\n<InputOTP maxLength={6} pattern={REGEXP_ONLY_DIGITS_AND_CHARS}>\n<InputOTPGroup>\n<InputOTPSlot index={0} />\n<InputOTPSlot index={1} />\n<InputOTPSlot index={2} />\n<InputOTPSlot index={3} />\n<InputOTPSlot index={4} />\n<InputOTPSlot index={5} />\n</InputOTPGroup>\n</InputOTP>\n)\n}\nCopyimport { REGEXP_ONLY_DIGITS_AND_CHARS } from \"input-otp\" <InputOTP\nmaxLength={6}\npattern={REGEXP_ONLY_DIGITS_AND_CHARS}\n>\n<InputOTPGroup>\n<InputOTPSlot index={0} />\n{/* */}\n</InputOTPGroup>\n</InputOTP>\nSeparator\nYou can use the <InputOTPSeparator /> component to add a separator between the input groups",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 650912,
      "relative_path": "documentation\\shadcn\\_docs_components_input-otp.html",
      "source_type": "documentation"
    },
    "token_count": 424,
    "chunk_index": 2,
    "total_chunks": 9
  },
  {
    "id": "a7f6c7e847eeb8ce2025a0eec18600b5",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_input-otp.html",
    "source_type": "documentation",
    "title": "Input OTP - shadcn/ui",
    "content": "from \"input-otp\" import { InputOTP, InputOTPGroup, InputOTPSlot, } from \"@/components/ui/input-otp\" export function InputOTPPattern() { return ( <InputOTP maxLength={6} pattern={REGEXP_ONLY_DIGITS_AND_CHARS}> <InputOTPGroup> <InputOTPSlot index={0} /> <InputOTPSlot index={1} /> <InputOTPSlot index={2} /> <InputOTPSlot index={3} /> <InputOTPSlot index={4} /> <InputOTPSlot index={5} /> </InputOTPGroup> </InputOTP> ) } Copyimport { REGEXP_ONLY_DIGITS_AND_CHARS } from \"input-otp\" <InputOTP maxLength={6} pattern={REGEXP_ONLY_DIGITS_AND_CHARS} > <InputOTPGroup> <InputOTPSlot index={0} /> {/* */} </InputOTPGroup> </InputOTP> Separator You can use the <InputOTPSeparator /> component to add a separator between the input groupsPreviewCodeCopyimport React from \"react\"\nimport {\nInputOTP,\nInputOTPGroup,\nInputOTPSeparator,\nInputOTPSlot,\n} from \"@/components/ui/input-otp\"\nexport function InputOTPWithSeparator() {\nreturn (\n<InputOTP maxLength={6}>\n<InputOTPGroup>\n<InputOTPSlot index={0} />\n<InputOTPSlot index={1} />\n</InputOTPGroup>\n<InputOTPSeparator />\n<InputOTPGroup>\n<InputOTPSlot index={2} />\n<InputOTPSlot index={3} />\n</InputOTPGroup>\n<InputOTPSeparator />\n<InputOTPGroup>\n<InputOTPSlot index={4} />\n<InputOTPSlot index={5} />\n</InputOTPGroup>\n</InputOTP>\n)\n}\nCopyimport {\nInputOTP,\nInputOTPGroup,\nInputOTPSeparator,\nInputOTPSlot,\n} from \"@/components/ui/input-otp\" <InputOTP maxLength={4}>\n<InputOTPGroup>\n<InputOTPSlot index={0} />\n<InputOTPSlot index={1} />\n</InputOTPGroup>\n<InputOTPSeparator />\n<InputOTPGroup>\n<InputOTPSlot index={2} />\n<InputOTPSlot index={3} />\n</InputOTPGroup>\n</InputOTP>\nControlled\nYou can use the value and onChange props to control the input value PreviewCodeEnter your one-time password",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 650912,
      "relative_path": "documentation\\shadcn\\_docs_components_input-otp.html",
      "source_type": "documentation"
    },
    "token_count": 486,
    "chunk_index": 3,
    "total_chunks": 9
  },
  {
    "id": "92a4c525110f653a7ab93ffdb1ee3779",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_input-otp.html",
    "source_type": "documentation",
    "title": "Input OTP - shadcn/ui",
    "content": "/> <InputOTPSlot index={1} /> </InputOTPGroup> <InputOTPSeparator /> <InputOTPGroup> <InputOTPSlot index={2} /> <InputOTPSlot index={3} /> </InputOTPGroup> <InputOTPSeparator /> <InputOTPGroup> <InputOTPSlot index={4} /> <InputOTPSlot index={5} /> </InputOTPGroup> </InputOTP> ) } Copyimport { InputOTP, InputOTPGroup, InputOTPSeparator, InputOTPSlot, } from \"@/components/ui/input-otp\" <InputOTP maxLength={4}> <InputOTPGroup> <InputOTPSlot index={0} /> <InputOTPSlot index={1} /> </InputOTPGroup> <InputOTPSeparator /> <InputOTPGroup> <InputOTPSlot index={2} /> <InputOTPSlot index={3} /> </InputOTPGroup> </InputOTP> Controlled You can use the value and onChange props to control the input value PreviewCodeEnter your one-time passwordCopy\"use client\"\nimport * as React from \"react\"\nimport {\nInputOTP,\nInputOTPGroup,\nInputOTPSlot,\n} from \"@/components/ui/input-otp\"\nexport function InputOTPControlled() {\nconst [value, setValue] = React useState(\"\")\nreturn (\n<div className=\"space-y-2\">\n<InputOTP\nmaxLength={6}\nvalue={value}\nonChange={(value) => setValue(value)}\n>\n<InputOTPGroup>\n<InputOTPSlot index={0} />\n<InputOTPSlot index={1} />\n<InputOTPSlot index={2} />\n<InputOTPSlot index={3} />\n<InputOTPSlot index={4} />\n<InputOTPSlot index={5} />\n</InputOTPGroup>\n</InputOTP>\n<div className=\"text-center text-sm\">\n{value === \"\" (\n<>Enter your one-time password </>\n) : (\n<>You entered: {value}</>\n)}\n</div>\n</div>\n)\n}\nForm\nPreviewCodeOne-Time PasswordPlease enter the one-time password sent to your phone",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 650912,
      "relative_path": "documentation\\shadcn\\_docs_components_input-otp.html",
      "source_type": "documentation"
    },
    "token_count": 428,
    "chunk_index": 4,
    "total_chunks": 9
  },
  {
    "id": "eee3f0566fbdb96ac8d343b477aa2a55",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_input-otp.html",
    "source_type": "documentation",
    "title": "Input OTP - shadcn/ui",
    "content": "export function InputOTPControlled() { const [value, setValue] = React useState(\"\") return ( <div className=\"space-y-2\"> <InputOTP maxLength={6} value={value} onChange={(value) => setValue(value)} > <InputOTPGroup> <InputOTPSlot index={0} /> <InputOTPSlot index={1} /> <InputOTPSlot index={2} /> <InputOTPSlot index={3} /> <InputOTPSlot index={4} /> <InputOTPSlot index={5} /> </InputOTPGroup> </InputOTP> <div className=\"text-center text-sm\"> {value === \"\" ( <>Enter your one-time password </> ) : ( <>You entered: {value}</> )} </div> </div> ) } Form PreviewCodeOne-Time PasswordPlease enter the one-time password sent to your phoneSubmitCopy\"use client\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport { toast } from \"sonner\"\nimport { z } from \"zod\"\nimport { Button } from \"@/components/ui/button\"\nimport {\nForm,\nFormControl,\nFormDescription,\nFormField,\nFormItem,\nFormLabel,\nFormMessage,\n} from \"@/components/ui/form\"\nimport {\nInputOTP,\nInputOTPGroup,\nInputOTPSlot,\n} from \"@/components/ui/input-otp\"\nconst FormSchema = z object({\npin: z string() min(6, {\nmessage: \"Your one-time password must be 6 characters \",\n}),\n})\nexport function InputOTPForm() {\nconst form = useForm<z infer<typeof FormSchema>>({\nresolver: zodResolver(FormSchema),\ndefaultValues: {\npin: \"\",\n},\n})\nfunction onSubmit(data: z infer<typeof FormSchema>) {\ntoast(\"You submitted the following values\", {\ndescription: (\n<pre className=\"mt-2 w-[320px] rounded-md bg-neutral-950 p-4\">\n<code className=\"text-white\">{JSON stringify(data, null, 2)}</code>\n</pre>\n),\n})\n}\nreturn (\n<Form { form}>\n<form onSubmit={form handleSubmit(onSubmit)} className=\"w-2/3 space-y-6\">\n<FormField\ncontrol={form control}\nname=\"pin\"\nrender={({ field }) => (\n<FormItem>\n<FormLabel>One-Time Password</FormLabel>\n<FormControl>\n<InputOTP maxLength={6} {",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 650912,
      "relative_path": "documentation\\shadcn\\_docs_components_input-otp.html",
      "source_type": "documentation"
    },
    "token_count": 492,
    "chunk_index": 5,
    "total_chunks": 9
  },
  {
    "id": "98931e5f776955c4a443a49287c48aba",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_input-otp.html",
    "source_type": "documentation",
    "title": "Input OTP - shadcn/ui",
    "content": "\", }), }) export function InputOTPForm() { const form = useForm<z infer<typeof FormSchema>>({ resolver: zodResolver(FormSchema), defaultValues: { pin: \"\", }, }) function onSubmit(data: z infer<typeof FormSchema>) { toast(\"You submitted the following values\", { description: ( <pre className=\"mt-2 w-[320px] rounded-md bg-neutral-950 p-4\"> <code className=\"text-white\">{JSON stringify(data, null, 2)}</code> </pre> ), }) } return ( <Form { form}> <form onSubmit={form handleSubmit(onSubmit)} className=\"w-2/3 space-y-6\"> <FormField control={form control} name=\"pin\" render={({ field }) => ( <FormItem> <FormLabel>One-Time Password</FormLabel> <FormControl> <InputOTP maxLength={6} {field}>\n<InputOTPGroup>\n<InputOTPSlot index={0} />\n<InputOTPSlot index={1} />\n<InputOTPSlot index={2} />\n<InputOTPSlot index={3} />\n<InputOTPSlot index={4} />\n<InputOTPSlot index={5} />\n</InputOTPGroup>\n</InputOTP>\n</FormControl>\n<FormDescription>\nPlease enter the one-time password sent to your phone </FormDescription>\n<FormMessage />\n</FormItem>\n)}\n/>\n<Button type=\"submit\">Submit</Button>\n</form>\n</Form>\n)\n}\nChangelog\n2024-03-19 Composition\nWe've made some updates and replaced the render props pattern with composition Here's how to update your code if you prefer the composition pattern Note: You are not required to update your code if you are using the\nrender prop It is still supported Update to the latest version of input-otp pnpmnpmyarnbunpnpm add input-otp@latestCopyUpdate input-otp tsxinput-otp tsxCopy- import { OTPInput, SlotProps } from \"input-otp\"\n+ import { OTPInput, OTPInputContext } from \"input-otp\"\nconst InputOTPSlot = React forwardRef<\nReact ElementRef<\"div\">,\n-   SlotProps & React ComponentPropsWithoutRef<\"div\">\n-  >(({ char, hasFakeCaret, isActive, className, props }, ref) => {\n+   React ComponentPropsWithoutRef<\"div\"> & { index: number }\n+  >(({ index, className,",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 650912,
      "relative_path": "documentation\\shadcn\\_docs_components_input-otp.html",
      "source_type": "documentation"
    },
    "token_count": 493,
    "chunk_index": 6,
    "total_chunks": 9
  },
  {
    "id": "2e2c4e6f82e9574fa1a5a7b94950325e",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_input-otp.html",
    "source_type": "documentation",
    "title": "Input OTP - shadcn/ui",
    "content": "your code if you are using the render prop It is still supported Update to the latest version of input-otp pnpmnpmyarnbunpnpm add input-otp@latestCopyUpdate input-otp tsxinput-otp tsxCopy- import { OTPInput, SlotProps } from \"input-otp\" + import { OTPInput, OTPInputContext } from \"input-otp\" const InputOTPSlot = React forwardRef< React ElementRef<\"div\">, - SlotProps & React ComponentPropsWithoutRef<\"div\"> - >(({ char, hasFakeCaret, isActive, className, props }, ref) => { + React ComponentPropsWithoutRef<\"div\"> & { index: number } + >(({ index, className,props }, ref) => {\n+   const inputOTPContext = React useContext(OTPInputContext)\n+   const { char, hasFakeCaret, isActive } = inputOTPContext slots[index]Then replace the render prop in your code Copy<InputOTP maxLength={6}>\n<InputOTPGroup>\n<InputOTPSlot index={0} />\n<InputOTPSlot index={1} />\n<InputOTPSlot index={2} />\n</InputOTPGroup>\n<InputOTPSeparator />\n<InputOTPGroup>\n<InputOTPSlot index={3} />\n<InputOTPSlot index={4} />\n<InputOTPSlot index={5} />\n</InputOTPGroup>\n</InputOTP>\n2024-03-19 Disabled\nTo add a disabled state to the input, update <InputOTP /> as follows:\ninput-otp tsxCopyconst InputOTP = React forwardRef<\nReact ElementRef<typeof OTPInput>,\nReact ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, props }, ref) => (\n<OTPInput\nref={ref}\ncontainerClassName={cn(\n\"flex items-center gap-2 has-[:disabled]:opacity-50\",\ncontainerClassName\n)}\nclassName={cn(\"disabled:cursor-not-allowed\", className)}\n{ props}\n/>\n))\nInputOTP displayName = \"InputOTP\" InputLabel On This PageAboutInstallationUsageExamplesPatternSeparatorControlledFormChangelog2024-03-19 Composition2024-03-19 DisabledDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 650912,
      "relative_path": "documentation\\shadcn\\_docs_components_input-otp.html",
      "source_type": "documentation"
    },
    "token_count": 497,
    "chunk_index": 7,
    "total_chunks": 9
  },
  {
    "id": "19fa1ee336b480b009c2034bf845f293",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_input-otp.html",
    "source_type": "documentation",
    "title": "Input OTP - shadcn/ui",
    "content": "input-otp tsxCopyconst InputOTP = React forwardRef< React ElementRef<typeof OTPInput>, React ComponentPropsWithoutRef<typeof OTPInput> >(({ className, containerClassName, props }, ref) => ( <OTPInput ref={ref} containerClassName={cn( \"flex items-center gap-2 has-[:disabled]:opacity-50\", containerClassName )} className={cn(\"disabled:cursor-not-allowed\", className)} { props} /> )) InputOTP displayName = \"InputOTP\" InputLabel On This PageAboutInstallationUsageExamplesPatternSeparatorControlledFormChangelog2024-03-19 Composition2024-03-19 DisabledDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at VercelThe source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 650912,
      "relative_path": "documentation\\shadcn\\_docs_components_input-otp.html",
      "source_type": "documentation"
    },
    "token_count": 191,
    "chunk_index": 8,
    "total_chunks": 9
  },
  {
    "id": "d81f2f799d589beb106873aece1521c4",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_menubar.html",
    "source_type": "documentation",
    "title": "Menubar - shadcn/ui",
    "content": "Menubar - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonMenubarCopy PagePreviousNextA visually persistent menu common in desktop applications that provides quick access to a consistent set of commands Docs API Reference PreviewCodeFileEditViewProfilesCopyimport {\nMenubar,\nMenubarCheckboxItem,\nMenubarContent,\nMenubarItem,\nMenubarMenu,\nMenubarRadioGroup,\nMenubarRadioItem,\nMenubarSeparator,\nMenubarShortcut,\nMenubarSub,\nMenubarSubContent,\nMenubarSubTrigger,\nMenubarTrigger,\n} from \"@/components/ui/menubar\"\nexport function MenubarDemo() {\nreturn (\n<Menubar>\n<MenubarMenu>\n<MenubarTrigger>File</MenubarTrigger>\n<MenubarContent>\n<MenubarItem>\nNew Tab <MenubarShortcut>⌘T</MenubarShortcut>\n</MenubarItem>\n<MenubarItem>\nNew Window <MenubarShortcut>⌘N</MenubarShortcut>\n</MenubarItem>\n<MenubarItem disabled>New Incognito Window</MenubarItem>\n<MenubarSeparator />\n<MenubarSub>\n<MenubarSubTrigger>Share</MenubarSubTrigger>\n<MenubarSubContent>\n<MenubarItem>Email link</MenubarItem>\n<MenubarItem>Messages</MenubarItem>\n<MenubarItem>Notes</MenubarItem>\n</MenubarSubContent>\n</MenubarSub>\n<MenubarSeparator />\n<MenubarItem>\nPrint",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 536617,
      "relative_path": "documentation\\shadcn\\_docs_components_menubar.html",
      "source_type": "documentation"
    },
    "token_count": 465,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "c70c34db8b3a9db282ded1e4fc937ce7",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_menubar.html",
    "source_type": "documentation",
    "title": "Menubar - shadcn/ui",
    "content": "persistent menu common in desktop applications that provides quick access to a consistent set of commands Docs API Reference PreviewCodeFileEditViewProfilesCopyimport { Menubar, MenubarCheckboxItem, MenubarContent, MenubarItem, MenubarMenu, MenubarRadioGroup, MenubarRadioItem, MenubarSeparator, MenubarShortcut, MenubarSub, MenubarSubContent, MenubarSubTrigger, MenubarTrigger, } from \"@/components/ui/menubar\" export function MenubarDemo() { return ( <Menubar> <MenubarMenu> <MenubarTrigger>File</MenubarTrigger> <MenubarContent> <MenubarItem> New Tab <MenubarShortcut>⌘T</MenubarShortcut> </MenubarItem> <MenubarItem> New Window <MenubarShortcut>⌘N</MenubarShortcut> </MenubarItem> <MenubarItem disabled>New Incognito Window</MenubarItem> <MenubarSeparator /> <MenubarSub> <MenubarSubTrigger>Share</MenubarSubTrigger> <MenubarSubContent> <MenubarItem>Email link</MenubarItem> <MenubarItem>Messages</MenubarItem> <MenubarItem>Notes</MenubarItem> </MenubarSubContent> </MenubarSub> <MenubarSeparator /> <MenubarItem> Print<MenubarShortcut>⌘P</MenubarShortcut>\n</MenubarItem>\n</MenubarContent>\n</MenubarMenu>\n<MenubarMenu>\n<MenubarTrigger>Edit</MenubarTrigger>\n<MenubarContent>\n<MenubarItem>\nUndo <MenubarShortcut>⌘Z</MenubarShortcut>\n</MenubarItem>\n<MenubarItem>\nRedo <MenubarShortcut>⇧⌘Z</MenubarShortcut>\n</MenubarItem>\n<MenubarSeparator />\n<MenubarSub>\n<MenubarSubTrigger>Find</MenubarSubTrigger>\n<MenubarSubContent>\n<MenubarItem>Search the web</MenubarItem>\n<MenubarSeparator />\n<MenubarItem>Find",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 536617,
      "relative_path": "documentation\\shadcn\\_docs_components_menubar.html",
      "source_type": "documentation"
    },
    "token_count": 433,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "dbdb6c0e5ccd4cd84a4dd936520d179e",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_menubar.html",
    "source_type": "documentation",
    "title": "Menubar - shadcn/ui",
    "content": "MenubarMenu, MenubarRadioGroup, MenubarRadioItem, MenubarSeparator, MenubarShortcut, MenubarSub, MenubarSubContent, MenubarSubTrigger, MenubarTrigger, } from \"@/components/ui/menubar\" export function MenubarDemo() { return ( <Menubar> <MenubarMenu> <MenubarTrigger>File</MenubarTrigger> <MenubarContent> <MenubarItem> New Tab <MenubarShortcut>⌘T</MenubarShortcut> </MenubarItem> <MenubarItem> New Window <MenubarShortcut>⌘N</MenubarShortcut> </MenubarItem> <MenubarItem disabled>New Incognito Window</MenubarItem> <MenubarSeparator /> <MenubarSub> <MenubarSubTrigger>Share</MenubarSubTrigger> <MenubarSubContent> <MenubarItem>Email link</MenubarItem> <MenubarItem>Messages</MenubarItem> <MenubarItem>Notes</MenubarItem> </MenubarSubContent> </MenubarSub> <MenubarSeparator /> <MenubarItem> Print<MenubarShortcut>⌘P</MenubarShortcut> </MenubarItem> </MenubarContent> </MenubarMenu> <MenubarMenu> <MenubarTrigger>Edit</MenubarTrigger> <MenubarContent> <MenubarItem> Undo <MenubarShortcut>⌘Z</MenubarShortcut> </MenubarItem> <MenubarItem> Redo <MenubarShortcut>⇧⌘Z</MenubarShortcut> </MenubarItem> <MenubarSeparator /> <MenubarSub> <MenubarSubTrigger>Find</MenubarSubTrigger> <MenubarSubContent> <MenubarItem>Search the web</MenubarItem> <MenubarSeparator /> <MenubarItem>Find</MenubarItem>\n<MenubarItem>Find Next</MenubarItem>\n<MenubarItem>Find Previous</MenubarItem>\n</MenubarSubContent>\n</MenubarSub>\n<MenubarSeparator />\n<MenubarItem>Cut</MenubarItem>\n<MenubarItem>Copy</MenubarItem>\n<MenubarItem>Paste</MenubarItem>\n</MenubarContent>\n</MenubarMenu>\n<MenubarMenu>\n<MenubarTrigger>View</MenubarTrigger>\n<MenubarContent>\n<MenubarCheckboxItem>Always Show Bookmarks Bar</MenubarCheckboxItem>\n<MenubarCheckboxItem checked>\nAlways Show Full URLs\n</MenubarCheckboxItem>\n<MenubarSeparator />\n<MenubarItem inset>\nReload <MenubarShortcut>⌘R</MenubarShortcut>\n</MenubarItem>\n<MenubarItem disabled inset>\nForce Reload <MenubarShortcut>⇧⌘R</MenubarShortcut>\n</MenubarItem>\n<MenubarSeparator />\n<MenubarItem inset>Toggle Fullscreen</MenubarItem>\n<MenubarSeparator />\n<MenubarItem inset>Hide Sidebar</MenubarItem>\n</MenubarContent>\n</MenubarMenu>\n<MenubarMenu>\n<MenubarTrigger>Profiles</MenubarTrigger>\n<MenubarContent>\n<MenubarRadioGroup value=\"benoit\">\n<MenubarRadioItem value=\"andy\">Andy</MenubarRadioItem>\n<MenubarRadioItem value=\"benoit\">Benoit</MenubarRadioItem>\n<MenubarRadioItem value=\"Luis\">Luis</MenubarRadioItem>\n</MenubarRadioGroup>\n<MenubarSeparator />\n<MenubarItem inset>Edit",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 536617,
      "relative_path": "documentation\\shadcn\\_docs_components_menubar.html",
      "source_type": "documentation"
    },
    "token_count": 743,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "26c62a159460e6f9e5f71af3af26fae3",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_menubar.html",
    "source_type": "documentation",
    "title": "Menubar - shadcn/ui",
    "content": "<MenubarSubContent> <MenubarItem>Search the web</MenubarItem> <MenubarSeparator /> <MenubarItem>Find</MenubarItem> <MenubarItem>Find Next</MenubarItem> <MenubarItem>Find Previous</MenubarItem> </MenubarSubContent> </MenubarSub> <MenubarSeparator /> <MenubarItem>Cut</MenubarItem> <MenubarItem>Copy</MenubarItem> <MenubarItem>Paste</MenubarItem> </MenubarContent> </MenubarMenu> <MenubarMenu> <MenubarTrigger>View</MenubarTrigger> <MenubarContent> <MenubarCheckboxItem>Always Show Bookmarks Bar</MenubarCheckboxItem> <MenubarCheckboxItem checked> Always Show Full URLs </MenubarCheckboxItem> <MenubarSeparator /> <MenubarItem inset> Reload <MenubarShortcut>⌘R</MenubarShortcut> </MenubarItem> <MenubarItem disabled inset> Force Reload <MenubarShortcut>⇧⌘R</MenubarShortcut> </MenubarItem> <MenubarSeparator /> <MenubarItem inset>Toggle Fullscreen</MenubarItem> <MenubarSeparator /> <MenubarItem inset>Hide Sidebar</MenubarItem> </MenubarContent> </MenubarMenu> <MenubarMenu> <MenubarTrigger>Profiles</MenubarTrigger> <MenubarContent> <MenubarRadioGroup value=\"benoit\"> <MenubarRadioItem value=\"andy\">Andy</MenubarRadioItem> <MenubarRadioItem value=\"benoit\">Benoit</MenubarRadioItem> <MenubarRadioItem value=\"Luis\">Luis</MenubarRadioItem> </MenubarRadioGroup> <MenubarSeparator /> <MenubarItem inset>Edit</MenubarItem>\n<MenubarSeparator />\n<MenubarItem inset>Add Profile",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 536617,
      "relative_path": "documentation\\shadcn\\_docs_components_menubar.html",
      "source_type": "documentation"
    },
    "token_count": 400,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "c3558dcb1f25b17701499aa1e1b87235",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_menubar.html",
    "source_type": "documentation",
    "title": "Menubar - shadcn/ui",
    "content": "/> <MenubarItem>Find</MenubarItem> <MenubarItem>Find Next</MenubarItem> <MenubarItem>Find Previous</MenubarItem> </MenubarSubContent> </MenubarSub> <MenubarSeparator /> <MenubarItem>Cut</MenubarItem> <MenubarItem>Copy</MenubarItem> <MenubarItem>Paste</MenubarItem> </MenubarContent> </MenubarMenu> <MenubarMenu> <MenubarTrigger>View</MenubarTrigger> <MenubarContent> <MenubarCheckboxItem>Always Show Bookmarks Bar</MenubarCheckboxItem> <MenubarCheckboxItem checked> Always Show Full URLs </MenubarCheckboxItem> <MenubarSeparator /> <MenubarItem inset> Reload <MenubarShortcut>⌘R</MenubarShortcut> </MenubarItem> <MenubarItem disabled inset> Force Reload <MenubarShortcut>⇧⌘R</MenubarShortcut> </MenubarItem> <MenubarSeparator /> <MenubarItem inset>Toggle Fullscreen</MenubarItem> <MenubarSeparator /> <MenubarItem inset>Hide Sidebar</MenubarItem> </MenubarContent> </MenubarMenu> <MenubarMenu> <MenubarTrigger>Profiles</MenubarTrigger> <MenubarContent> <MenubarRadioGroup value=\"benoit\"> <MenubarRadioItem value=\"andy\">Andy</MenubarRadioItem> <MenubarRadioItem value=\"benoit\">Benoit</MenubarRadioItem> <MenubarRadioItem value=\"Luis\">Luis</MenubarRadioItem> </MenubarRadioGroup> <MenubarSeparator /> <MenubarItem inset>Edit</MenubarItem> <MenubarSeparator /> <MenubarItem inset>Add Profile</MenubarItem>\n</MenubarContent>\n</MenubarMenu>\n</Menubar>\n)\n}\nInstallation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add menubarCopy\nUsage\nCopyimport {\nMenubar,\nMenubarContent,\nMenubarItem,\nMenubarMenu,\nMenubarSeparator,\nMenubarShortcut,\nMenubarTrigger,\n} from \"@/components/ui/menubar\"\nCopy<Menubar>\n<MenubarMenu>\n<MenubarTrigger>File</MenubarTrigger>\n<MenubarContent>\n<MenubarItem>\nNew Tab <MenubarShortcut>⌘T</MenubarShortcut>\n</MenubarItem>\n<MenubarItem>New Window</MenubarItem>\n<MenubarSeparator />\n<MenubarItem>Share</MenubarItem>\n<MenubarSeparator />\n<MenubarItem>Print</MenubarItem>\n</MenubarContent>\n</MenubarMenu>\n</Menubar> LabelNavigation Menu On This PageInstallationUsageDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 536617,
      "relative_path": "documentation\\shadcn\\_docs_components_menubar.html",
      "source_type": "documentation"
    },
    "token_count": 605,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "30235c801e89ea0950b45e2ea12eb1dd",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_menubar.html",
    "source_type": "documentation",
    "title": "Menubar - shadcn/ui",
    "content": "<MenubarRadioItem value=\"andy\">Andy</MenubarRadioItem> <MenubarRadioItem value=\"benoit\">Benoit</MenubarRadioItem> <MenubarRadioItem value=\"Luis\">Luis</MenubarRadioItem> </MenubarRadioGroup> <MenubarSeparator /> <MenubarItem inset>Edit</MenubarItem> <MenubarSeparator /> <MenubarItem inset>Add Profile</MenubarItem> </MenubarContent> </MenubarMenu> </Menubar> ) } Installation CLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add menubarCopy Usage Copyimport { Menubar, MenubarContent, MenubarItem, MenubarMenu, MenubarSeparator, MenubarShortcut, MenubarTrigger, } from \"@/components/ui/menubar\" Copy<Menubar> <MenubarMenu> <MenubarTrigger>File</MenubarTrigger> <MenubarContent> <MenubarItem> New Tab <MenubarShortcut>⌘T</MenubarShortcut> </MenubarItem> <MenubarItem>New Window</MenubarItem> <MenubarSeparator /> <MenubarItem>Share</MenubarItem> <MenubarSeparator /> <MenubarItem>Print</MenubarItem> </MenubarContent> </MenubarMenu> </Menubar> LabelNavigation Menu On This PageInstallationUsageDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and moreVercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 536617,
      "relative_path": "documentation\\shadcn\\_docs_components_menubar.html",
      "source_type": "documentation"
    },
    "token_count": 349,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "d9d288090232cab6072d8ac0ee84d80c",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_progress.html",
    "source_type": "documentation",
    "title": "Progress - shadcn/ui",
    "content": "Progress - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation...Search...⌘K92.8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents.jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext.jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext.jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry.jsonregistry-item.jsonProgressCopy PagePreviousNextDisplays an indicator showing the completion progress of a task, typically displayed as a progress bar.Docs API Reference PreviewCodeCopy\"use client\"\nimport * as React from \"react\"\nimport { Progress } from \"@/components/ui/progress\"\nexport function ProgressDemo() {\nconst [progress, setProgress] = React.useState(13)\nReact.useEffect(() => {\nconst timer = setTimeout(() => setProgress(66), 500)\nreturn () => clearTimeout(timer)\n}, [])\nreturn <Progress value={progress} className=\"w-[60%]\" />\n}\nInstallation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add progressCopy\nUsage\nCopyimport { Progress } from \"@/components/ui/progress\"\nCopy<Progress value={33} /> PopoverRadio Group On This PageInstallationUsageDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more.Vercel provides tools and infrastructure to deploy apps and features at scale.Deploy NowDeploy to VercelBuilt by shadcn at Vercel. The source code is available on GitHub.",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 349494,
      "relative_path": "documentation\\shadcn\\_docs_components_progress.html",
      "source_type": "documentation"
    },
    "token_count": 414,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3fd43eac830e93e8be0a447f607df30e",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_pagination.html",
    "source_type": "documentation",
    "title": "Pagination - shadcn/ui",
    "content": "Pagination - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonPaginationCopy PagePreviousNextPagination with page navigation, next and previous links PreviewCodePrevious123More pagesNextCopyimport {\nPagination,\nPaginationContent,\nPaginationEllipsis,\nPaginationItem,\nPaginationLink,\nPaginationNext,\nPaginationPrevious,\n} from \"@/components/ui/pagination\"\nexport function PaginationDemo() {\nreturn (\n<Pagination>\n<PaginationContent>\n<PaginationItem>\n<PaginationPrevious href=\"#\" />\n</PaginationItem>\n<PaginationItem>\n<PaginationLink href=\"#\">1</PaginationLink>\n</PaginationItem>\n<PaginationItem>\n<PaginationLink href=\"#\" isActive>\n2\n</PaginationLink>\n</PaginationItem>\n<PaginationItem>\n<PaginationLink href=\"#\">3</PaginationLink>\n</PaginationItem>\n<PaginationItem>\n<PaginationEllipsis />\n</PaginationItem>\n<PaginationItem>\n<PaginationNext href=\"#\" />\n</PaginationItem>\n</PaginationContent>\n</Pagination>\n)\n}\nInstallation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add paginationCopy\nUsage\nCopyimport {\nPagination,\nPaginationContent,\nPaginationEllipsis,\nPaginationItem,\nPaginationLink,\nPaginationNext,\nPaginationPrevious,\n} from \"@/components/ui/pagination\"\nCopy<Pagination>\n<PaginationContent>\n<PaginationItem>\n<PaginationPrevious href=\"#\" />\n</PaginationItem>\n<PaginationItem>\n<PaginationLink href=\"#\">1</PaginationLink>\n</PaginationItem>\n<PaginationItem>\n<PaginationEllipsis />\n</PaginationItem>\n<PaginationItem>\n<PaginationNext href=\"#\" />\n</PaginationItem>\n</PaginationContent>\n</Pagination>\nNext",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 424355,
      "relative_path": "documentation\\shadcn\\_docs_components_pagination.html",
      "source_type": "documentation"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "80b4df50ae318d14900153b236e25600",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_pagination.html",
    "source_type": "documentation",
    "title": "Pagination - shadcn/ui",
    "content": "<PaginationContent> <PaginationItem> <PaginationPrevious href=\"#\" /> </PaginationItem> <PaginationItem> <PaginationLink href=\"#\">1</PaginationLink> </PaginationItem> <PaginationItem> <PaginationLink href=\"#\" isActive> 2 </PaginationLink> </PaginationItem> <PaginationItem> <PaginationLink href=\"#\">3</PaginationLink> </PaginationItem> <PaginationItem> <PaginationEllipsis /> </PaginationItem> <PaginationItem> <PaginationNext href=\"#\" /> </PaginationItem> </PaginationContent> </Pagination> ) } Installation CLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add paginationCopy Usage Copyimport { Pagination, PaginationContent, PaginationEllipsis, PaginationItem, PaginationLink, PaginationNext, PaginationPrevious, } from \"@/components/ui/pagination\" Copy<Pagination> <PaginationContent> <PaginationItem> <PaginationPrevious href=\"#\" /> </PaginationItem> <PaginationItem> <PaginationLink href=\"#\">1</PaginationLink> </PaginationItem> <PaginationItem> <PaginationEllipsis /> </PaginationItem> <PaginationItem> <PaginationNext href=\"#\" /> </PaginationItem> </PaginationContent> </Pagination> Nextjs\nBy default the <PaginationLink /> component will render an <a /> tag To use the Next js <Link /> component, make the following updates to pagination tsx Copy+ import Link from \"next/link\"\n- type PaginationLinkProps = & React ComponentProps<\"a\">\n+ type PaginationLinkProps = & React ComponentProps<typeof Link>\nconst PaginationLink = ({ props }: ) => (\n<PaginationItem>\n-   <a>\n+   <Link>\n// -   </a>\n+   </Link>\n</PaginationItem>\n)\nNote: We are making updates to the cli to automatically do this for you Navigation MenuPopover On This PageInstallationUsageNext jsDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 424355,
      "relative_path": "documentation\\shadcn\\_docs_components_pagination.html",
      "source_type": "documentation"
    },
    "token_count": 437,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "69403f82df03501be3190dc6aec33f37",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_navigation-menu.html",
    "source_type": "documentation",
    "title": "Navigation Menu - shadcn/ui",
    "content": "Navigation Menu - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonNavigation MenuCopy PagePreviousNextA collection of links for navigating websites Docs API Reference PreviewCodeHome Components DocsList Simple With Icon Copy\"use client\"\nimport * as React from \"react\"\nimport Link from \"next/link\"\nimport { CircleCheckIcon, CircleHelpIcon, CircleIcon } from \"lucide-react\"\nimport {\nNavigationMenu,\nNavigationMenuContent,\nNavigationMenuItem,\nNavigationMenuLink,\nNavigationMenuList,\nNavigationMenuTrigger,\nnavigationMenuTriggerStyle,\n} from \"@/components/ui/navigation-menu\"\nconst components: { title: string; href: string; description: string }[] = [\n{\ntitle: \"Alert Dialog\",\nhref: \"/docs/primitives/alert-dialog\",\ndescription:\n\"A modal dialog that interrupts the user with important content and expects a response \",\n},\n{\ntitle: \"Hover Card\",\nhref: \"/docs/primitives/hover-card\",\ndescription:\n\"For sighted users to preview content available behind a link \",\n},\n{\ntitle: \"Progress\",\nhref: \"/docs/primitives/progress\",\ndescription:\n\"Displays an indicator showing the completion progress of a task, typically displayed as a progress bar \",\n},\n{\ntitle: \"Scroll-area\",\nhref: \"/docs/primitives/scroll-area\",\ndescription: \"Visually or semantically separates content \",\n},\n{\ntitle: \"Tabs\",\nhref: \"/docs/primitives/tabs\",\ndescription:\n\"A set of layered sections of content—known as tab panels—that are displayed one at a time",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 560938,
      "relative_path": "documentation\\shadcn\\_docs_components_navigation-menu.html",
      "source_type": "documentation"
    },
    "token_count": 468,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "90a8d790c3cd9abcbe491fbded935c30",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_navigation-menu.html",
    "source_type": "documentation",
    "title": "Navigation Menu - shadcn/ui",
    "content": "\"Hover Card\", href: \"/docs/primitives/hover-card\", description: \"For sighted users to preview content available behind a link \", }, { title: \"Progress\", href: \"/docs/primitives/progress\", description: \"Displays an indicator showing the completion progress of a task, typically displayed as a progress bar \", }, { title: \"Scroll-area\", href: \"/docs/primitives/scroll-area\", description: \"Visually or semantically separates content \", }, { title: \"Tabs\", href: \"/docs/primitives/tabs\", description: \"A set of layered sections of content—known as tab panels—that are displayed one at a time\",\n},\n{\ntitle: \"Tooltip\",\nhref: \"/docs/primitives/tooltip\",\ndescription:\n\"A popup that displays information related to an element when the element receives keyboard focus or the mouse hovers over it \",\n},\n]\nexport function NavigationMenuDemo() {\nreturn (\n<NavigationMenu viewport={false}>\n<NavigationMenuList>\n<NavigationMenuItem>\n<NavigationMenuTrigger>Home</NavigationMenuTrigger>\n<NavigationMenuContent>\n<ul className=\"grid gap-2 md:w-[400px] lg:w-[500px] lg:grid-cols-[ 75fr_1fr]\">\n<li className=\"row-span-3\">\n<NavigationMenuLink asChild>\n<a\nclassName=\"from-muted/50 to-muted flex h-full w-full flex-col justify-end rounded-md bg-linear-to-b p-6 no-underline outline-hidden select-none focus:shadow-md\"\nhref=\"/\"\n>\n<div className=\"mt-4 mb-2 text-lg font-medium\">\nshadcn/ui\n</div>\n<p className=\"text-muted-foreground text-sm leading-tight\">\nBeautifully designed components built with Tailwind CSS </p>\n</a>\n</NavigationMenuLink>\n</li>\n<ListItem href=\"/docs\" title=\"Introduction\">\nRe-usable components built using Radix UI and Tailwind CSS </ListItem>\n<ListItem href=\"/docs/installation\" title=\"Installation\">\nHow to install dependencies and structure your app </ListItem>\n<ListItem href=\"/docs/primitives/typography\" title=\"Typography\">\nStyles for headings, paragraphs, lists",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 560938,
      "relative_path": "documentation\\shadcn\\_docs_components_navigation-menu.html",
      "source_type": "documentation"
    },
    "token_count": 438,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "ee0fd2a76444b0113fc5c68790e5585c",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_navigation-menu.html",
    "source_type": "documentation",
    "title": "Navigation Menu - shadcn/ui",
    "content": "<li className=\"row-span-3\"> <NavigationMenuLink asChild> <a className=\"from-muted/50 to-muted flex h-full w-full flex-col justify-end rounded-md bg-linear-to-b p-6 no-underline outline-hidden select-none focus:shadow-md\" href=\"/\" > <div className=\"mt-4 mb-2 text-lg font-medium\"> shadcn/ui </div> <p className=\"text-muted-foreground text-sm leading-tight\"> Beautifully designed components built with Tailwind CSS </p> </a> </NavigationMenuLink> </li> <ListItem href=\"/docs\" title=\"Introduction\"> Re-usable components built using Radix UI and Tailwind CSS </ListItem> <ListItem href=\"/docs/installation\" title=\"Installation\"> How to install dependencies and structure your app </ListItem> <ListItem href=\"/docs/primitives/typography\" title=\"Typography\"> Styles for headings, paragraphs, listsetc\n</ListItem>\n</ul>\n</NavigationMenuContent>\n</NavigationMenuItem>\n<NavigationMenuItem>\n<NavigationMenuTrigger>Components</NavigationMenuTrigger>\n<NavigationMenuContent>\n<ul className=\"grid w-[400px] gap-2 md:w-[500px] md:grid-cols-2 lg:w-[600px]\">\n{components map((component) => (\n<ListItem\nkey={component title}\ntitle={component title}\nhref={component href}\n>\n{component description}\n</ListItem>\n))}\n</ul>\n</NavigationMenuContent>\n</NavigationMenuItem>\n<NavigationMenuItem>\n<NavigationMenuLink asChild className={navigationMenuTriggerStyle()}>\n<Link href=\"/docs\">Docs</Link>\n</NavigationMenuLink>\n</NavigationMenuItem>\n<NavigationMenuItem>\n<NavigationMenuTrigger>List</NavigationMenuTrigger>\n<NavigationMenuContent>\n<ul className=\"grid w-[300px] gap-4\">\n<li>\n<NavigationMenuLink asChild>\n<Link href=\"#\">\n<div className=\"font-medium\">Components</div>\n<div className=\"text-muted-foreground\">\nBrowse all components in the library </div>\n</Link>\n</NavigationMenuLink>\n<NavigationMenuLink asChild>\n<Link href=\"#\">\n<div className=\"font-medium\">Documentation</div>\n<div className=\"text-muted-foreground\">\nLearn how to use the library </div>\n</Link>\n</NavigationMenuLink>\n<NavigationMenuLink asChild>\n<Link href=\"#\">\n<div className=\"font-medium\">Blog</div>\n<div className=\"text-muted-foreground\">\nRead our latest blog posts",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 560938,
      "relative_path": "documentation\\shadcn\\_docs_components_navigation-menu.html",
      "source_type": "documentation"
    },
    "token_count": 496,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "0fae0ed226a33948edcaa4b8d761059b",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_navigation-menu.html",
    "source_type": "documentation",
    "title": "Navigation Menu - shadcn/ui",
    "content": "title} title={component title} href={component href} > {component description} </ListItem> ))} </ul> </NavigationMenuContent> </NavigationMenuItem> <NavigationMenuItem> <NavigationMenuLink asChild className={navigationMenuTriggerStyle()}> <Link href=\"/docs\">Docs</Link> </NavigationMenuLink> </NavigationMenuItem> <NavigationMenuItem> <NavigationMenuTrigger>List</NavigationMenuTrigger> <NavigationMenuContent> <ul className=\"grid w-[300px] gap-4\"> <li> <NavigationMenuLink asChild> <Link href=\"#\"> <div className=\"font-medium\">Components</div> <div className=\"text-muted-foreground\"> Browse all components in the library </div> </Link> </NavigationMenuLink> <NavigationMenuLink asChild> <Link href=\"#\"> <div className=\"font-medium\">Documentation</div> <div className=\"text-muted-foreground\"> Learn how to use the library </div> </Link> </NavigationMenuLink> <NavigationMenuLink asChild> <Link href=\"#\"> <div className=\"font-medium\">Blog</div> <div className=\"text-muted-foreground\"> Read our latest blog posts</div>\n</Link>\n</NavigationMenuLink>\n</li>\n</ul>\n</NavigationMenuContent>\n</NavigationMenuItem>\n<NavigationMenuItem>\n<NavigationMenuTrigger>Simple</NavigationMenuTrigger>\n<NavigationMenuContent>\n<ul className=\"grid w-[200px] gap-4\">\n<li>\n<NavigationMenuLink asChild>\n<Link href=\"#\">Components</Link>\n</NavigationMenuLink>\n<NavigationMenuLink asChild>\n<Link href=\"#\">Documentation</Link>\n</NavigationMenuLink>\n<NavigationMenuLink asChild>\n<Link href=\"#\">Blocks</Link>\n</NavigationMenuLink>\n</li>\n</ul>\n</NavigationMenuContent>\n</NavigationMenuItem>\n<NavigationMenuItem>\n<NavigationMenuTrigger>With Icon</NavigationMenuTrigger>\n<NavigationMenuContent>\n<ul className=\"grid w-[200px] gap-4\">\n<li>\n<NavigationMenuLink asChild>\n<Link href=\"#\" className=\"flex-row items-center gap-2\">\n<CircleHelpIcon />\nBacklog\n</Link>\n</NavigationMenuLink>\n<NavigationMenuLink asChild>\n<Link href=\"#\" className=\"flex-row items-center gap-2\">\n<CircleIcon />\nTo Do\n</Link>\n</NavigationMenuLink>\n<NavigationMenuLink asChild>\n<Link href=\"#\" className=\"flex-row items-center gap-2\">\n<CircleCheckIcon />\nDone\n</Link>\n</NavigationMenuLink>\n</li>\n</ul>\n</NavigationMenuContent>\n</NavigationMenuItem>\n</NavigationMenuList>\n</NavigationMenu>\n)\n}\nfunction ListItem({\ntitle,\nchildren,\nhref,",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 560938,
      "relative_path": "documentation\\shadcn\\_docs_components_navigation-menu.html",
      "source_type": "documentation"
    },
    "token_count": 549,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "54fa9a43163c180d29f14dc76c5ac092",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_navigation-menu.html",
    "source_type": "documentation",
    "title": "Navigation Menu - shadcn/ui",
    "content": "<Link href=\"#\">Components</Link> </NavigationMenuLink> <NavigationMenuLink asChild> <Link href=\"#\">Documentation</Link> </NavigationMenuLink> <NavigationMenuLink asChild> <Link href=\"#\">Blocks</Link> </NavigationMenuLink> </li> </ul> </NavigationMenuContent> </NavigationMenuItem> <NavigationMenuItem> <NavigationMenuTrigger>With Icon</NavigationMenuTrigger> <NavigationMenuContent> <ul className=\"grid w-[200px] gap-4\"> <li> <NavigationMenuLink asChild> <Link href=\"#\" className=\"flex-row items-center gap-2\"> <CircleHelpIcon /> Backlog </Link> </NavigationMenuLink> <NavigationMenuLink asChild> <Link href=\"#\" className=\"flex-row items-center gap-2\"> <CircleIcon /> To Do </Link> </NavigationMenuLink> <NavigationMenuLink asChild> <Link href=\"#\" className=\"flex-row items-center gap-2\"> <CircleCheckIcon /> Done </Link> </NavigationMenuLink> </li> </ul> </NavigationMenuContent> </NavigationMenuItem> </NavigationMenuList> </NavigationMenu> ) } function ListItem({ title, children, href,props\n}: React ComponentPropsWithoutRef<\"li\"> & { href: string }) {\nreturn (\n<li { props}>\n<NavigationMenuLink asChild>\n<Link href={href}>\n<div className=\"text-sm leading-none font-medium\">{title}</div>\n<p className=\"text-muted-foreground line-clamp-2 text-sm leading-snug\">\n{children}\n</p>\n</Link>\n</NavigationMenuLink>\n</li>\n)\n}\nInstallation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add navigation-menuCopy\nUsage\nCopyimport {\nNavigationMenu,\nNavigationMenuContent,\nNavigationMenuIndicator,\nNavigationMenuItem,\nNavigationMenuLink,\nNavigationMenuList,\nNavigationMenuTrigger,\nNavigationMenuViewport,\n} from \"@/components/ui/navigation-menu\"\nCopy<NavigationMenu>\n<NavigationMenuList>\n<NavigationMenuItem>\n<NavigationMenuTrigger>Item One</NavigationMenuTrigger>\n<NavigationMenuContent>\n<NavigationMenuLink>Link</NavigationMenuLink>\n</NavigationMenuContent>\n</NavigationMenuItem>\n</NavigationMenuList>\n</NavigationMenu>\nLink\nYou can use the asChild prop to make another component look like a navigation menu trigger Here's an example of a link that looks like a navigation menu trigger components/example-navigation-menu",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 560938,
      "relative_path": "documentation\\shadcn\\_docs_components_navigation-menu.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "97d5fdb83bb6f4ac66c44e17f28b5f1b",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_navigation-menu.html",
    "source_type": "documentation",
    "title": "Navigation Menu - shadcn/ui",
    "content": "leading-none font-medium\">{title}</div> <p className=\"text-muted-foreground line-clamp-2 text-sm leading-snug\"> {children} </p> </Link> </NavigationMenuLink> </li> ) } Installation CLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add navigation-menuCopy Usage Copyimport { NavigationMenu, NavigationMenuContent, NavigationMenuIndicator, NavigationMenuItem, NavigationMenuLink, NavigationMenuList, NavigationMenuTrigger, NavigationMenuViewport, } from \"@/components/ui/navigation-menu\" Copy<NavigationMenu> <NavigationMenuList> <NavigationMenuItem> <NavigationMenuTrigger>Item One</NavigationMenuTrigger> <NavigationMenuContent> <NavigationMenuLink>Link</NavigationMenuLink> </NavigationMenuContent> </NavigationMenuItem> </NavigationMenuList> </NavigationMenu> Link You can use the asChild prop to make another component look like a navigation menu trigger Here's an example of a link that looks like a navigation menu trigger components/example-navigation-menutsxCopyimport { Link } from \"next/link\"\nexport function NavigationMenuDemo() {\nreturn (\n<NavigationMenuItem>\n<NavigationMenuLink asChild>\n<Link href=\"/docs\">Documentation</Link>\n</NavigationMenuLink>\n</NavigationMenuItem>\n)\n} MenubarPagination On This PageInstallationUsageLinkDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 560938,
      "relative_path": "documentation\\shadcn\\_docs_components_navigation-menu.html",
      "source_type": "documentation"
    },
    "token_count": 330,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "a3b0906dacb39ca63f7aef309d72f13a",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_popover.html",
    "source_type": "documentation",
    "title": "Popover - shadcn/ui",
    "content": "Popover - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonPopoverCopy PagePreviousNextDisplays rich content in a portal, triggered by a button Docs API Reference PreviewCodeOpen popoverCopyimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport {\nPopover,\nPopoverContent,\nPopoverTrigger,\n} from \"@/components/ui/popover\"\nexport function PopoverDemo() {\nreturn (\n<Popover>\n<PopoverTrigger asChild>\n<Button variant=\"outline\">Open popover</Button>\n</PopoverTrigger>\n<PopoverContent className=\"w-80\">\n<div className=\"grid gap-4\">\n<div className=\"space-y-2\">\n<h4 className=\"leading-none font-medium\">Dimensions</h4>\n<p className=\"text-muted-foreground text-sm\">\nSet the dimensions for the layer </p>\n</div>\n<div className=\"grid gap-2\">\n<div className=\"grid grid-cols-3 items-center gap-4\">\n<Label htmlFor=\"width\">Width</Label>\n<Input\nid=\"width\"\ndefaultValue=\"100%\"\nclassName=\"col-span-2 h-8\"\n/>\n</div>\n<div className=\"grid grid-cols-3 items-center gap-4\">\n<Label htmlFor=\"maxWidth\">Max",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 403291,
      "relative_path": "documentation\\shadcn\\_docs_components_popover.html",
      "source_type": "documentation"
    },
    "token_count": 423,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "93f3e40063f4eb9b3383bfceccfcd1ff",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_popover.html",
    "source_type": "documentation",
    "title": "Popover - shadcn/ui",
    "content": "Input } from \"@/components/ui/input\" import { Label } from \"@/components/ui/label\" import { Popover, PopoverContent, PopoverTrigger, } from \"@/components/ui/popover\" export function PopoverDemo() { return ( <Popover> <PopoverTrigger asChild> <Button variant=\"outline\">Open popover</Button> </PopoverTrigger> <PopoverContent className=\"w-80\"> <div className=\"grid gap-4\"> <div className=\"space-y-2\"> <h4 className=\"leading-none font-medium\">Dimensions</h4> <p className=\"text-muted-foreground text-sm\"> Set the dimensions for the layer </p> </div> <div className=\"grid gap-2\"> <div className=\"grid grid-cols-3 items-center gap-4\"> <Label htmlFor=\"width\">Width</Label> <Input id=\"width\" defaultValue=\"100%\" className=\"col-span-2 h-8\" /> </div> <div className=\"grid grid-cols-3 items-center gap-4\"> <Label htmlFor=\"maxWidth\">Maxwidth</Label>\n<Input\nid=\"maxWidth\"\ndefaultValue=\"300px\"\nclassName=\"col-span-2 h-8\"\n/>\n</div>\n<div className=\"grid grid-cols-3 items-center gap-4\">\n<Label htmlFor=\"height\">Height</Label>\n<Input\nid=\"height\"\ndefaultValue=\"25px\"\nclassName=\"col-span-2 h-8\"\n/>\n</div>\n<div className=\"grid grid-cols-3 items-center gap-4\">\n<Label htmlFor=\"maxHeight\">Max height</Label>\n<Input\nid=\"maxHeight\"\ndefaultValue=\"none\"\nclassName=\"col-span-2 h-8\"\n/>\n</div>\n</div>\n</div>\n</PopoverContent>\n</Popover>\n)\n}\nInstallation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add popoverCopy\nUsage\nCopyimport {\nPopover,\nPopoverContent,\nPopoverTrigger,\n} from \"@/components/ui/popover\"\nCopy<Popover>\n<PopoverTrigger>Open</PopoverTrigger>\n<PopoverContent>Place content for the popover here </PopoverContent>\n</Popover> PaginationProgress On This PageInstallationUsageDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 403291,
      "relative_path": "documentation\\shadcn\\_docs_components_popover.html",
      "source_type": "documentation"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "fc639df020355406bd0888a93c5294a4",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_popover.html",
    "source_type": "documentation",
    "title": "Popover - shadcn/ui",
    "content": "<Label htmlFor=\"maxHeight\">Max height</Label> <Input id=\"maxHeight\" defaultValue=\"none\" className=\"col-span-2 h-8\" /> </div> </div> </div> </PopoverContent> </Popover> ) } Installation CLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add popoverCopy Usage Copyimport { Popover, PopoverContent, PopoverTrigger, } from \"@/components/ui/popover\" Copy<Popover> <PopoverTrigger>Open</PopoverTrigger> <PopoverContent>Place content for the popover here </PopoverContent> </Popover> PaginationProgress On This PageInstallationUsageDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at VercelThe source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 403291,
      "relative_path": "documentation\\shadcn\\_docs_components_popover.html",
      "source_type": "documentation"
    },
    "token_count": 195,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "3dea717e7c67d966c4a0360d0138b6f5",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_radio-group.html",
    "source_type": "documentation",
    "title": "Radio Group - shadcn/ui",
    "content": "Radio Group - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonRadio GroupCopy PagePreviousNextA set of checkable buttons—known as radio buttons—where no more than one of the buttons can be checked at a time",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 458349,
      "relative_path": "documentation\\shadcn\\_docs_components_radio-group.html",
      "source_type": "documentation"
    },
    "token_count": 212,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "cc0f8c9d946f71f8eb58efec4d7675db",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_radio-group.html",
    "source_type": "documentation",
    "title": "Radio Group - shadcn/ui",
    "content": "Radio Group - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonRadio GroupCopy PagePreviousNextA set of checkable buttons—known as radio buttons—where no more than one of the buttons can be checked at a timeDocs API Reference PreviewCodeDefaultComfortableCompactCopyimport { Label } from \"@/components/ui/label\"\nimport {\nRadioGroup,\nRadioGroupItem,\n} from \"@/components/ui/radio-group\"\nexport function RadioGroupDemo() {\nreturn (\n<RadioGroup defaultValue=\"comfortable\">\n<div className=\"flex items-center gap-3\">\n<RadioGroupItem value=\"default\" id=\"r1\" />\n<Label htmlFor=\"r1\">Default</Label>\n</div>\n<div className=\"flex items-center gap-3\">\n<RadioGroupItem value=\"comfortable\" id=\"r2\" />\n<Label htmlFor=\"r2\">Comfortable</Label>\n</div>\n<div className=\"flex items-center gap-3\">\n<RadioGroupItem value=\"compact\" id=\"r3\" />\n<Label htmlFor=\"r3\">Compact</Label>\n</div>\n</RadioGroup>\n)\n}\nInstallation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add radio-groupCopy\nUsage\nCopyimport { Label } from \"@/components/ui/label\"\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\"\nCopy<RadioGroup defaultValue=\"option-one\">\n<div className=\"flex items-center space-x-2\">\n<RadioGroupItem value=\"option-one\" id=\"option-one\" />\n<Label htmlFor=\"option-one\">Option One</Label>\n</div>\n<div className=\"flex items-center space-x-2\">\n<RadioGroupItem value=\"option-two\" id=\"option-two\" />\n<Label htmlFor=\"option-two\">Option Two</Label>\n</div>\n</RadioGroup>\nExamples\nForm\nPreviewCodeNotify me about",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 458349,
      "relative_path": "documentation\\shadcn\\_docs_components_radio-group.html",
      "source_type": "documentation"
    },
    "token_count": 550,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "b141b121378edae5a805ea1b600a9b98",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_radio-group.html",
    "source_type": "documentation",
    "title": "Radio Group - shadcn/ui",
    "content": "className=\"flex items-center gap-3\"> <RadioGroupItem value=\"comfortable\" id=\"r2\" /> <Label htmlFor=\"r2\">Comfortable</Label> </div> <div className=\"flex items-center gap-3\"> <RadioGroupItem value=\"compact\" id=\"r3\" /> <Label htmlFor=\"r3\">Compact</Label> </div> </RadioGroup> ) } Installation CLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add radio-groupCopy Usage Copyimport { Label } from \"@/components/ui/label\" import { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\" Copy<RadioGroup defaultValue=\"option-one\"> <div className=\"flex items-center space-x-2\"> <RadioGroupItem value=\"option-one\" id=\"option-one\" /> <Label htmlFor=\"option-one\">Option One</Label> </div> <div className=\"flex items-center space-x-2\"> <RadioGroupItem value=\"option-two\" id=\"option-two\" /> <Label htmlFor=\"option-two\">Option Two</Label> </div> </RadioGroup> Examples Form PreviewCodeNotify me aboutAll new messagesDirect messages and mentionsNothingSubmitCopy\"use client\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport { toast } from \"sonner\"\nimport { z } from \"zod\"\nimport { Button } from \"@/components/ui/button\"\nimport {\nForm,\nFormControl,\nFormField,\nFormItem,\nFormLabel,\nFormMessage,\n} from \"@/components/ui/form\"\nimport {\nRadioGroup,\nRadioGroupItem,\n} from \"@/components/ui/radio-group\"\nconst FormSchema = z object({\ntype: z enum([\"all\", \"mentions\", \"none\"], {\nrequired_error: \"You need to select a notification type \",\n}),\n})\nexport function RadioGroupForm() {\nconst form = useForm<z infer<typeof FormSchema>>({\nresolver: zodResolver(FormSchema),\n})\nfunction onSubmit(data: z infer<typeof FormSchema>) {\ntoast(\"You submitted the following values\", {\ndescription: (\n<pre className=\"mt-2 w-[320px] rounded-md bg-neutral-950 p-4\">\n<code className=\"text-white\">{JSON stringify(data, null, 2)}</code>\n</pre>\n),\n})\n}\nreturn (\n<Form { form}>\n<form onSubmit={form",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 458349,
      "relative_path": "documentation\\shadcn\\_docs_components_radio-group.html",
      "source_type": "documentation"
    },
    "token_count": 489,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "c6b827915266dc8c27062b33028deca7",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_radio-group.html",
    "source_type": "documentation",
    "title": "Radio Group - shadcn/ui",
    "content": "RadioGroup, RadioGroupItem, } from \"@/components/ui/radio-group\" const FormSchema = z object({ type: z enum([\"all\", \"mentions\", \"none\"], { required_error: \"You need to select a notification type \", }), }) export function RadioGroupForm() { const form = useForm<z infer<typeof FormSchema>>({ resolver: zodResolver(FormSchema), }) function onSubmit(data: z infer<typeof FormSchema>) { toast(\"You submitted the following values\", { description: ( <pre className=\"mt-2 w-[320px] rounded-md bg-neutral-950 p-4\"> <code className=\"text-white\">{JSON stringify(data, null, 2)}</code> </pre> ), }) } return ( <Form { form}> <form onSubmit={formhandleSubmit(onSubmit)} className=\"w-2/3 space-y-6\">\n<FormField\ncontrol={form control}\nname=\"type\"\nrender={({ field }) => (\n<FormItem className=\"space-y-3\">\n<FormLabel>Notify me about </FormLabel>\n<FormControl>\n<RadioGroup\nonValueChange={field onChange}\ndefaultValue={field value}\nclassName=\"flex flex-col\"\n>\n<FormItem className=\"flex items-center gap-3\">\n<FormControl>\n<RadioGroupItem value=\"all\" />\n</FormControl>\n<FormLabel className=\"font-normal\">\nAll new messages\n</FormLabel>\n</FormItem>\n<FormItem className=\"flex items-center gap-3\">\n<FormControl>\n<RadioGroupItem value=\"mentions\" />\n</FormControl>\n<FormLabel className=\"font-normal\">\nDirect messages and mentions\n</FormLabel>\n</FormItem>\n<FormItem className=\"flex items-center gap-3\">\n<FormControl>\n<RadioGroupItem value=\"none\" />\n</FormControl>\n<FormLabel className=\"font-normal\">Nothing</FormLabel>\n</FormItem>\n</RadioGroup>\n</FormControl>\n<FormMessage />\n</FormItem>\n)}\n/>\n<Button type=\"submit\">Submit</Button>\n</form>\n</Form>\n)\n}\nProgressResizable On This PageInstallationUsageExamplesFormDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 458349,
      "relative_path": "documentation\\shadcn\\_docs_components_radio-group.html",
      "source_type": "documentation"
    },
    "token_count": 471,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "0ce309a0d28f8deb644fb30973d6c87d",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_separator.html",
    "source_type": "documentation",
    "title": "Separator - shadcn/ui",
    "content": "Separator - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation...Search...⌘K92.8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents.jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext.jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext.jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry.jsonregistry-item.jsonSeparatorCopy PagePreviousNextVisually or semantically separates content.Docs API Reference PreviewCodeRadix PrimitivesAn open-source UI component library.BlogDocsSourceCopyimport { Separator } from \"@/components/ui/separator\"\nexport function SeparatorDemo() {\nreturn (\n<div>\n<div className=\"space-y-1\">\n<h4 className=\"text-sm leading-none font-medium\">Radix Primitives</h4>\n<p className=\"text-muted-foreground text-sm\">\nAn open-source UI component library.\n</p>\n</div>\n<Separator className=\"my-4\" />\n<div className=\"flex h-5 items-center space-x-4 text-sm\">\n<div>Blog</div>\n<Separator orientation=\"vertical\" />\n<div>Docs</div>\n<Separator orientation=\"vertical\" />\n<div>Source</div>\n</div>\n</div>\n)\n}\nInstallation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add separatorCopy\nUsage\nCopyimport { Separator } from \"@/components/ui/separator\"\nCopy<Separator /> SelectSheet On This PageInstallationUsageDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more.Vercel provides tools and infrastructure to deploy apps and features at scale.Deploy NowDeploy to VercelBuilt by shadcn at Vercel. The source code is available on GitHub.",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 351176,
      "relative_path": "documentation\\shadcn\\_docs_components_separator.html",
      "source_type": "documentation"
    },
    "token_count": 463,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4afd1affa5e3b9b2d4f756457b97dc35",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_scroll-area.html",
    "source_type": "documentation",
    "title": "Scroll-area - shadcn/ui",
    "content": "Scroll-area - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonScroll-areaCopy PagePreviousNextAugments native scroll functionality for custom, cross-browser styling Docs API Reference PreviewCodeTagsv1 2 0-beta 50v1 2 0-beta 49v1 2 0-beta 48v1 2 0-beta 47v1 2 0-beta 46v1 2 0-beta 45v1 2 0-beta 44v1 2 0-beta 43v1 2 0-beta 42v1 2 0-beta 41v1 2 0-beta 40v1 2 0-beta 39v1 2 0-beta 38v1 2 0-beta 37v1 2 0-beta 36v1 2 0-beta 35v1 2 0-beta 34v1 2 0-beta 33v1 2 0-beta 32v1 2 0-beta 31v1 2 0-beta 30v1 2 0-beta 29v1 2 0-beta 28v1 2 0-beta 27v1 2 0-beta 26v1 2 0-beta 25v1 2 0-beta 24v1 2 0-beta 23v1 2 0-beta 22v1 2 0-beta 21v1 2 0-beta 20v1 2 0-beta 19v1 2 0-beta 18v1 2 0-beta 17v1 2 0-beta 16v1 2 0-beta 15v1 2 0-beta 14v1 2 0-beta 13v1 2 0-beta 12v1 2 0-beta 11v1 2 0-beta 10v1 2 0-beta 9v1 2 0-beta 8v1 2 0-beta 7v1 2 0-beta 6v1 2 0-beta 5v1 2 0-beta 4v1 2 0-beta 3v1 2 0-beta 2v1 2",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 443789,
      "relative_path": "documentation\\shadcn\\_docs_components_scroll-area.html",
      "source_type": "documentation"
    },
    "token_count": 648,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "a67f05f7b4fdd94a0644ef3e68f05dff",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_scroll-area.html",
    "source_type": "documentation",
    "title": "Scroll-area - shadcn/ui",
    "content": "2 0-beta 26v1 2 0-beta 25v1 2 0-beta 24v1 2 0-beta 23v1 2 0-beta 22v1 2 0-beta 21v1 2 0-beta 20v1 2 0-beta 19v1 2 0-beta 18v1 2 0-beta 17v1 2 0-beta 16v1 2 0-beta 15v1 2 0-beta 14v1 2 0-beta 13v1 2 0-beta 12v1 2 0-beta 11v1 2 0-beta 10v1 2 0-beta 9v1 2 0-beta 8v1 2 0-beta 7v1 2 0-beta 6v1 2 0-beta 5v1 2 0-beta 4v1 2 0-beta 3v1 2 0-beta 2v1 20-beta 1Copyimport * as React from \"react\"\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\nimport { Separator } from \"@/components/ui/separator\"\nconst tags = Array from({ length: 50 }) map(\n(_, i, a) => `v1 2 0-beta ${a length - i}`\n)\nexport function ScrollAreaDemo() {\nreturn (\n<ScrollArea className=\"h-72 w-48 rounded-md border\">\n<div className=\"p-4\">\n<h4 className=\"mb-4 text-sm leading-none font-medium\">Tags</h4>\n{tags map((tag) => (\n<React Fragment key={tag}>\n<div className=\"text-sm\">{tag}</div>\n<Separator className=\"my-2\" />\n</React Fragment>\n))}\n</div>\n</ScrollArea>\n)\n}\nInstallation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add scroll-areaCopy\nUsage\nCopyimport { ScrollArea } from \"@/components/ui/scroll-area\"\nCopy<ScrollArea className=\"h-[200px] w-[350px] rounded-md border p-4\">\nJokester began sneaking into the castle in the middle of the night and leaving\njokes all over the place: under the king's pillow, in his soup, even in the\nroyal toilet",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 443789,
      "relative_path": "documentation\\shadcn\\_docs_components_scroll-area.html",
      "source_type": "documentation"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "db7377f77f717060734343a6048abdb5",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_scroll-area.html",
    "source_type": "documentation",
    "title": "Scroll-area - shadcn/ui",
    "content": "<div className=\"p-4\"> <h4 className=\"mb-4 text-sm leading-none font-medium\">Tags</h4> {tags map((tag) => ( <React Fragment key={tag}> <div className=\"text-sm\">{tag}</div> <Separator className=\"my-2\" /> </React Fragment> ))} </div> </ScrollArea> ) } Installation CLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add scroll-areaCopy Usage Copyimport { ScrollArea } from \"@/components/ui/scroll-area\" Copy<ScrollArea className=\"h-[200px] w-[350px] rounded-md border p-4\"> Jokester began sneaking into the castle in the middle of the night and leaving jokes all over the place: under the king's pillow, in his soup, even in the royal toiletThe king was furious, but he couldn't seem to stop Jokester And\nthen, one day, the people of the kingdom discovered that the jokes left by\nJokester were so funny that they couldn't help but laugh And once they\nstarted laughing, they couldn't stop </ScrollArea>\nExamples\nHorizontal Scrolling\nPreviewCodePhoto by Ornella BinniPhoto by Tom ByromPhoto by Vladimir MalyavkoCopyimport * as React from \"react\"\nimport Image from \"next/image\"\nimport { ScrollArea, ScrollBar } from \"@/components/ui/scroll-area\"\nexport interface Artwork {\nartist: string\nart: string\n}\nexport const works: Artwork[] = [\n{\nartist: \"Ornella Binni\",\nart: \"https://images unsplash com/photo-1465869185982-5a1a7522cbcb auto=format&fit=crop&w=300&q=80\",\n},\n{\nartist: \"Tom Byrom\",\nart: \"https://images unsplash com/photo-1548516173-3cabfa4607e9 auto=format&fit=crop&w=300&q=80\",\n},\n{\nartist: \"Vladimir Malyavko\",\nart: \"https://images unsplash com/photo-1494337480532-3725c85fd2ab",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 443789,
      "relative_path": "documentation\\shadcn\\_docs_components_scroll-area.html",
      "source_type": "documentation"
    },
    "token_count": 451,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "7daa8f2c515fb67db4e4aee6cccf9c61",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_scroll-area.html",
    "source_type": "documentation",
    "title": "Scroll-area - shadcn/ui",
    "content": "they couldn't stop </ScrollArea> Examples Horizontal Scrolling PreviewCodePhoto by Ornella BinniPhoto by Tom ByromPhoto by Vladimir MalyavkoCopyimport * as React from \"react\" import Image from \"next/image\" import { ScrollArea, ScrollBar } from \"@/components/ui/scroll-area\" export interface Artwork { artist: string art: string } export const works: Artwork[] = [ { artist: \"Ornella Binni\", art: \"https://images unsplash com/photo-1465869185982-5a1a7522cbcb auto=format&fit=crop&w=300&q=80\", }, { artist: \"Tom Byrom\", art: \"https://images unsplash com/photo-1548516173-3cabfa4607e9 auto=format&fit=crop&w=300&q=80\", }, { artist: \"Vladimir Malyavko\", art: \"https://images unsplash com/photo-1494337480532-3725c85fd2abauto=format&fit=crop&w=300&q=80\",\n},\n]\nexport function ScrollAreaHorizontalDemo() {\nreturn (\n<ScrollArea className=\"w-96 rounded-md border whitespace-nowrap\">\n<div className=\"flex w-max space-x-4 p-4\">\n{works map((artwork) => (\n<figure key={artwork artist} className=\"shrink-0\">\n<div className=\"overflow-hidden rounded-md\">\n<Image\nsrc={artwork art}\nalt={`Photo by ${artwork artist}`}\nclassName=\"aspect-[3/4] h-fit w-fit object-cover\"\nwidth={300}\nheight={400}\n/>\n</div>\n<figcaption className=\"text-muted-foreground pt-2 text-xs\">\nPhoto by{\" \"}\n<span className=\"text-foreground font-semibold\">\n{artwork artist}\n</span>\n</figcaption>\n</figure>\n))}\n</div>\n<ScrollBar orientation=\"horizontal\" />\n</ScrollArea>\n)\n}\nResizableSelect On This PageInstallationUsageExamplesHorizontal ScrollingDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 443789,
      "relative_path": "documentation\\shadcn\\_docs_components_scroll-area.html",
      "source_type": "documentation"
    },
    "token_count": 477,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "5075665283786008cda81bb6ce09d469",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_resizable.html",
    "source_type": "documentation",
    "title": "Resizable - shadcn/ui",
    "content": "Resizable - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonResizableCopy PagePreviousNextAccessible resizable panel groups and layouts with keyboard support Docs API Reference PreviewCodeOneTwoThreeCopyimport {\nResizableHandle,\nResizablePanel,\nResizablePanelGroup,\n} from \"@/components/ui/resizable\"\nexport function ResizableDemo() {\nreturn (\n<ResizablePanelGroup\ndirection=\"horizontal\"\nclassName=\"max-w-md rounded-lg border md:min-w-[450px]\"\n>\n<ResizablePanel defaultSize={50}>\n<div className=\"flex h-[200px] items-center justify-center p-6\">\n<span className=\"font-semibold\">One</span>\n</div>\n</ResizablePanel>\n<ResizableHandle />\n<ResizablePanel defaultSize={50}>\n<ResizablePanelGroup direction=\"vertical\">\n<ResizablePanel defaultSize={25}>\n<div className=\"flex h-full items-center justify-center p-6\">\n<span className=\"font-semibold\">Two</span>\n</div>\n</ResizablePanel>\n<ResizableHandle />\n<ResizablePanel defaultSize={75}>\n<div className=\"flex h-full items-center justify-center p-6\">\n<span className=\"font-semibold\">Three</span>\n</div>\n</ResizablePanel>\n</ResizablePanelGroup>\n</ResizablePanel>\n</ResizablePanelGroup>\n)\n}\nAbout\nThe Resizable component is built on top of react-resizable-panels by bvaughn",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 470031,
      "relative_path": "documentation\\shadcn\\_docs_components_resizable.html",
      "source_type": "documentation"
    },
    "token_count": 437,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "36e158aca9628dc3ba5437372321c7a0",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_resizable.html",
    "source_type": "documentation",
    "title": "Resizable - shadcn/ui",
    "content": "from \"@/components/ui/resizable\" export function ResizableDemo() { return ( <ResizablePanelGroup direction=\"horizontal\" className=\"max-w-md rounded-lg border md:min-w-[450px]\" > <ResizablePanel defaultSize={50}> <div className=\"flex h-[200px] items-center justify-center p-6\"> <span className=\"font-semibold\">One</span> </div> </ResizablePanel> <ResizableHandle /> <ResizablePanel defaultSize={50}> <ResizablePanelGroup direction=\"vertical\"> <ResizablePanel defaultSize={25}> <div className=\"flex h-full items-center justify-center p-6\"> <span className=\"font-semibold\">Two</span> </div> </ResizablePanel> <ResizableHandle /> <ResizablePanel defaultSize={75}> <div className=\"flex h-full items-center justify-center p-6\"> <span className=\"font-semibold\">Three</span> </div> </ResizablePanel> </ResizablePanelGroup> </ResizablePanel> </ResizablePanelGroup> ) } About The Resizable component is built on top of react-resizable-panels by bvaughnInstallation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add resizableCopy\nUsage\nCopyimport {\nResizableHandle,\nResizablePanel,\nResizablePanelGroup,\n} from \"@/components/ui/resizable\"\nCopy<ResizablePanelGroup direction=\"horizontal\">\n<ResizablePanel>One</ResizablePanel>\n<ResizableHandle />\n<ResizablePanel>Two</ResizablePanel>\n</ResizablePanelGroup>\nExamples\nVertical\nUse the direction prop to set the direction of the resizable panels",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 470031,
      "relative_path": "documentation\\shadcn\\_docs_components_resizable.html",
      "source_type": "documentation"
    },
    "token_count": 325,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "3f29c4b302bc4da1250eddf9a4421451",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_resizable.html",
    "source_type": "documentation",
    "title": "Resizable - shadcn/ui",
    "content": "<div className=\"flex h-full items-center justify-center p-6\"> <span className=\"font-semibold\">Two</span> </div> </ResizablePanel> <ResizableHandle /> <ResizablePanel defaultSize={75}> <div className=\"flex h-full items-center justify-center p-6\"> <span className=\"font-semibold\">Three</span> </div> </ResizablePanel> </ResizablePanelGroup> </ResizablePanel> </ResizablePanelGroup> ) } About The Resizable component is built on top of react-resizable-panels by bvaughnInstallation CLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add resizableCopy Usage Copyimport { ResizableHandle, ResizablePanel, ResizablePanelGroup, } from \"@/components/ui/resizable\" Copy<ResizablePanelGroup direction=\"horizontal\"> <ResizablePanel>One</ResizablePanel> <ResizableHandle /> <ResizablePanel>Two</ResizablePanel> </ResizablePanelGroup> Examples Vertical Use the direction prop to set the direction of the resizable panelsPreviewCodeHeaderContentCopyimport {\nResizableHandle,\nResizablePanel,\nResizablePanelGroup,\n} from \"@/components/ui/resizable\"\nexport function ResizableDemo() {\nreturn (\n<ResizablePanelGroup\ndirection=\"vertical\"\nclassName=\"min-h-[200px] max-w-md rounded-lg border md:min-w-[450px]\"\n>\n<ResizablePanel defaultSize={25}>\n<div className=\"flex h-full items-center justify-center p-6\">\n<span className=\"font-semibold\">Header</span>\n</div>\n</ResizablePanel>\n<ResizableHandle />\n<ResizablePanel defaultSize={75}>\n<div className=\"flex h-full items-center justify-center p-6\">\n<span className=\"font-semibold\">Content</span>\n</div>\n</ResizablePanel>\n</ResizablePanelGroup>\n)\n}\nCopyimport {\nResizableHandle,\nResizablePanel,\nResizablePanelGroup,\n} from \"@/components/ui/resizable\"\nexport default function Example() {\nreturn (\n<ResizablePanelGroup direction=\"vertical\">\n<ResizablePanel>One</ResizablePanel>\n<ResizableHandle />\n<ResizablePanel>Two</ResizablePanel>\n</ResizablePanelGroup>\n)\n}\nHandle\nYou can set or hide the handle by using the withHandle prop on the ResizableHandle component",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 470031,
      "relative_path": "documentation\\shadcn\\_docs_components_resizable.html",
      "source_type": "documentation"
    },
    "token_count": 451,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "7356a6ad68b9a90934bb34ccd7c68daa",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_resizable.html",
    "source_type": "documentation",
    "title": "Resizable - shadcn/ui",
    "content": "className=\"min-h-[200px] max-w-md rounded-lg border md:min-w-[450px]\" > <ResizablePanel defaultSize={25}> <div className=\"flex h-full items-center justify-center p-6\"> <span className=\"font-semibold\">Header</span> </div> </ResizablePanel> <ResizableHandle /> <ResizablePanel defaultSize={75}> <div className=\"flex h-full items-center justify-center p-6\"> <span className=\"font-semibold\">Content</span> </div> </ResizablePanel> </ResizablePanelGroup> ) } Copyimport { ResizableHandle, ResizablePanel, ResizablePanelGroup, } from \"@/components/ui/resizable\" export default function Example() { return ( <ResizablePanelGroup direction=\"vertical\"> <ResizablePanel>One</ResizablePanel> <ResizableHandle /> <ResizablePanel>Two</ResizablePanel> </ResizablePanelGroup> ) } Handle You can set or hide the handle by using the withHandle prop on the ResizableHandle componentPreviewCodeSidebarContentCopyimport {\nResizableHandle,\nResizablePanel,\nResizablePanelGroup,\n} from \"@/components/ui/resizable\"\nexport function ResizableHandleDemo() {\nreturn (\n<ResizablePanelGroup\ndirection=\"horizontal\"\nclassName=\"min-h-[200px] max-w-md rounded-lg border md:min-w-[450px]\"\n>\n<ResizablePanel defaultSize={25}>\n<div className=\"flex h-full items-center justify-center p-6\">\n<span className=\"font-semibold\">Sidebar</span>\n</div>\n</ResizablePanel>\n<ResizableHandle withHandle />\n<ResizablePanel defaultSize={75}>\n<div className=\"flex h-full items-center justify-center p-6\">\n<span className=\"font-semibold\">Content</span>\n</div>\n</ResizablePanel>\n</ResizablePanelGroup>\n)\n}\nCopyimport {\nResizableHandle,\nResizablePanel,\nResizablePanelGroup,\n} from \"@/components/ui/resizable\"\nexport default function Example() {\nreturn (\n<ResizablePanelGroup direction=\"horizontal\">\n<ResizablePanel>One</ResizablePanel>\n<ResizableHandle withHandle />\n<ResizablePanel>Two</ResizablePanel>\n</ResizablePanelGroup>\n)\n} Radio GroupScroll-area On This PageAboutInstallationUsageExamplesVerticalHandleDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 470031,
      "relative_path": "documentation\\shadcn\\_docs_components_resizable.html",
      "source_type": "documentation"
    },
    "token_count": 496,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "2168bc339a5fb6e27b6d9887d4faede1",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_resizable.html",
    "source_type": "documentation",
    "title": "Resizable - shadcn/ui",
    "content": "<ResizablePanel defaultSize={75}> <div className=\"flex h-full items-center justify-center p-6\"> <span className=\"font-semibold\">Content</span> </div> </ResizablePanel> </ResizablePanelGroup> ) } Copyimport { ResizableHandle, ResizablePanel, ResizablePanelGroup, } from \"@/components/ui/resizable\" export default function Example() { return ( <ResizablePanelGroup direction=\"horizontal\"> <ResizablePanel>One</ResizablePanel> <ResizableHandle withHandle /> <ResizablePanel>Two</ResizablePanel> </ResizablePanelGroup> ) } Radio GroupScroll-area On This PageAboutInstallationUsageExamplesVerticalHandleDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at VercelThe source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 470031,
      "relative_path": "documentation\\shadcn\\_docs_components_resizable.html",
      "source_type": "documentation"
    },
    "token_count": 193,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "59a341b58dd38a08871504aad6965e7b",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_select.html",
    "source_type": "documentation",
    "title": "Select - shadcn/ui",
    "content": "Select - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonSelectCopy PagePreviousNextDisplays a list of options for the user to pick from—triggered by a button",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 578815,
      "relative_path": "documentation\\shadcn\\_docs_components_select.html",
      "source_type": "documentation"
    },
    "token_count": 201,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "b9dcce37e47b5c0aa6ae8b360b44fa04",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_select.html",
    "source_type": "documentation",
    "title": "Select - shadcn/ui",
    "content": "Select - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonSelectCopy PagePreviousNextDisplays a list of options for the user to pick from—triggered by a buttonDocs API Reference PreviewCodeSelect a fruitCopyimport * as React from \"react\"\nimport {\nSelect,\nSelectContent,\nSelectGroup,\nSelectItem,\nSelectLabel,\nSelectTrigger,\nSelectValue,\n} from \"@/components/ui/select\"\nexport function SelectDemo() {\nreturn (\n<Select>\n<SelectTrigger className=\"w-[180px]\">\n<SelectValue placeholder=\"Select a fruit\" />\n</SelectTrigger>\n<SelectContent>\n<SelectGroup>\n<SelectLabel>Fruits</SelectLabel>\n<SelectItem value=\"apple\">Apple</SelectItem>\n<SelectItem value=\"banana\">Banana</SelectItem>\n<SelectItem value=\"blueberry\">Blueberry</SelectItem>\n<SelectItem value=\"grapes\">Grapes</SelectItem>\n<SelectItem value=\"pineapple\">Pineapple</SelectItem>\n</SelectGroup>\n</SelectContent>\n</Select>\n)\n}\nInstallation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add selectCopy\nUsage\nCopyimport {\nSelect,\nSelectContent,\nSelectItem,\nSelectTrigger,\nSelectValue,\n} from \"@/components/ui/select\"\nCopy<Select>\n<SelectTrigger className=\"w-[180px]\">\n<SelectValue placeholder=\"Theme\" />\n</SelectTrigger>\n<SelectContent>\n<SelectItem value=\"light\">Light</SelectItem>\n<SelectItem value=\"dark\">Dark</SelectItem>\n<SelectItem value=\"system\">System</SelectItem>\n</SelectContent>\n</Select>\nExamples\nScrollable\nPreviewCodeSelect a timezoneCopyimport * as React from \"react\"\nimport {\nSelect,\nSelectContent,\nSelectGroup,\nSelectItem,\nSelectLabel,\nSelectTrigger,\nSelectValue,\n} from \"@/components/ui/select\"\nexport function SelectScrollable() {\nreturn (\n<Select>\n<SelectTrigger className=\"w-[280px]\">\n<SelectValue placeholder=\"Select a timezone\" />\n</SelectTrigger>\n<SelectContent>\n<SelectGroup>\n<SelectLabel>North America</SelectLabel>\n<SelectItem value=\"est\">Eastern Standard Time (EST)</SelectItem>\n<SelectItem value=\"cst\">Central Standard Time (CST)</SelectItem>\n<SelectItem value=\"mst\">Mountain Standard Time (MST)</SelectItem>\n<SelectItem value=\"pst\">Pacific Standard Time (PST)</SelectItem>\n<SelectItem value=\"akst\">Alaska Standard Time (AKST)</SelectItem>\n<SelectItem value=\"hst\">Hawaii Standard Time (HST)</SelectItem>\n</SelectGroup>\n<SelectGroup>\n<SelectLabel>Europe & Africa</SelectLabel>\n<SelectItem value=\"gmt\">Greenwich Mean Time (GMT)</SelectItem>\n<SelectItem value=\"cet\">Central European Time (CET)</SelectItem>\n<SelectItem value=\"eet\">Eastern European Time (EET)</SelectItem>\n<SelectItem value=\"west\">\nWestern European Summer Time (WEST)\n</SelectItem>\n<SelectItem value=\"cat\">Central Africa Time (CAT)</SelectItem>\n<SelectItem value=\"eat\">East Africa Time (EAT)</SelectItem>\n</SelectGroup>\n<SelectGroup>\n<SelectLabel>Asia</SelectLabel>\n<SelectItem value=\"msk\">Moscow Time (MSK)</SelectItem>\n<SelectItem value=\"ist\">India Standard Time (IST)</SelectItem>\n<SelectItem value=\"cst_china\">China Standard Time (CST)</SelectItem>\n<SelectItem value=\"jst\">Japan Standard Time (JST)</SelectItem>\n<SelectItem value=\"kst\">Korea Standard Time (KST)</SelectItem>\n<SelectItem value=\"ist_indonesia\">\nIndonesia Central Standard Time (WITA)\n</SelectItem>\n</SelectGroup>\n<SelectGroup>\n<SelectLabel>Australia & Pacific</SelectLabel>\n<SelectItem value=\"awst\">\nAustralian Western Standard Time (AWST)\n</SelectItem>\n<SelectItem value=\"acst\">\nAustralian Central Standard Time (ACST)\n</SelectItem>\n<SelectItem value=\"aest\">\nAustralian Eastern Standard Time (AEST)\n</SelectItem>\n<SelectItem value=\"nzst\">New Zealand Standard Time (NZST)</SelectItem>\n<SelectItem value=\"fjt\">Fiji Time (FJT)</SelectItem>\n</SelectGroup>\n<SelectGroup>\n<SelectLabel>South America</SelectLabel>\n<SelectItem value=\"art\">Argentina Time (ART)</SelectItem>\n<SelectItem value=\"bot\">Bolivia Time (BOT)</SelectItem>\n<SelectItem value=\"brt\">Brasilia Time (BRT)</SelectItem>\n<SelectItem value=\"clt\">Chile Standard Time (CLT)</SelectItem>\n</SelectGroup>\n</SelectContent>\n</Select>\n)\n}\nForm\nPreviewCodeEmailSelect a verified email to displayYou can manage email addresses in your email settings",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 578815,
      "relative_path": "documentation\\shadcn\\_docs_components_select.html",
      "source_type": "documentation"
    },
    "token_count": 1147,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "e012c79b27afd483a3a35289ca96f230",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_select.html",
    "source_type": "documentation",
    "title": "Select - shadcn/ui",
    "content": "Pacific</SelectLabel> <SelectItem value=\"awst\"> Australian Western Standard Time (AWST) </SelectItem> <SelectItem value=\"acst\"> Australian Central Standard Time (ACST) </SelectItem> <SelectItem value=\"aest\"> Australian Eastern Standard Time (AEST) </SelectItem> <SelectItem value=\"nzst\">New Zealand Standard Time (NZST)</SelectItem> <SelectItem value=\"fjt\">Fiji Time (FJT)</SelectItem> </SelectGroup> <SelectGroup> <SelectLabel>South America</SelectLabel> <SelectItem value=\"art\">Argentina Time (ART)</SelectItem> <SelectItem value=\"bot\">Bolivia Time (BOT)</SelectItem> <SelectItem value=\"brt\">Brasilia Time (BRT)</SelectItem> <SelectItem value=\"clt\">Chile Standard Time (CLT)</SelectItem> </SelectGroup> </SelectContent> </Select> ) } Form PreviewCodeEmailSelect a verified email to displayYou can manage email addresses in your email settingsSubmitCopy\"use client\"\nimport Link from \"next/link\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport { toast } from \"sonner\"\nimport { z } from \"zod\"\nimport { Button } from \"@/components/ui/button\"\nimport {\nForm,\nFormControl,\nFormDescription,\nFormField,\nFormItem,\nFormLabel,\nFormMessage,\n} from \"@/components/ui/form\"\nimport {\nSelect,\nSelectContent,\nSelectItem,\nSelectTrigger,\nSelectValue,\n} from \"@/components/ui/select\"\nconst FormSchema = z object({\nemail: z string({\nrequired_error: \"Please select an email to display \",\n}) email(),\n})\nexport function SelectForm() {\nconst form = useForm<z infer<typeof FormSchema>>({\nresolver: zodResolver(FormSchema),\n})\nfunction onSubmit(data: z infer<typeof FormSchema>) {\ntoast(\"You submitted the following values\", {\ndescription: (\n<pre className=\"mt-2 w-[320px] rounded-md bg-neutral-950 p-4\">\n<code className=\"text-white\">{JSON stringify(data, null, 2)}</code>\n</pre>\n),\n})\n}\nreturn (\n<Form { form}>\n<form onSubmit={form handleSubmit(onSubmit)} className=\"w-2/3 space-y-6\">\n<FormField\ncontrol={form",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 578815,
      "relative_path": "documentation\\shadcn\\_docs_components_select.html",
      "source_type": "documentation"
    },
    "token_count": 490,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "cb16ed82e4b815beb4d47c0861fee0b1",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_select.html",
    "source_type": "documentation",
    "title": "Select - shadcn/ui",
    "content": "} from \"@/components/ui/select\" const FormSchema = z object({ email: z string({ required_error: \"Please select an email to display \", }) email(), }) export function SelectForm() { const form = useForm<z infer<typeof FormSchema>>({ resolver: zodResolver(FormSchema), }) function onSubmit(data: z infer<typeof FormSchema>) { toast(\"You submitted the following values\", { description: ( <pre className=\"mt-2 w-[320px] rounded-md bg-neutral-950 p-4\"> <code className=\"text-white\">{JSON stringify(data, null, 2)}</code> </pre> ), }) } return ( <Form { form}> <form onSubmit={form handleSubmit(onSubmit)} className=\"w-2/3 space-y-6\"> <FormField control={formcontrol}\nname=\"email\"\nrender={({ field }) => (\n<FormItem>\n<FormLabel>Email</FormLabel>\n<Select onValueChange={field onChange} defaultValue={field value}>\n<FormControl>\n<SelectTrigger>\n<SelectValue placeholder=\"Select a verified email to display\" />\n</SelectTrigger>\n</FormControl>\n<SelectContent>\n<SelectItem value=\"m@example com\">m@example com</SelectItem>\n<SelectItem value=\"m@google com\">m@google com</SelectItem>\n<SelectItem value=\"m@support com\">m@support com</SelectItem>\n</SelectContent>\n</Select>\n<FormDescription>\nYou can manage email addresses in your{\" \"}\n<Link href=\"/examples/forms\">email settings</Link> </FormDescription>\n<FormMessage />\n</FormItem>\n)}\n/>\n<Button type=\"submit\">Submit</Button>\n</form>\n</Form>\n)\n}\nScroll-areaSeparator On This PageInstallationUsageExamplesScrollableFormDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 578815,
      "relative_path": "documentation\\shadcn\\_docs_components_select.html",
      "source_type": "documentation"
    },
    "token_count": 407,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "952dc7dee2a2cc6bf2b7c9b26b3c8211",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_slider.html",
    "source_type": "documentation",
    "title": "Slider - shadcn/ui",
    "content": "Slider - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation...Search...⌘K92.8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents.jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext.jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext.jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry.jsonregistry-item.jsonSliderCopy PagePreviousNextAn input where the user selects a value from within a given range.Docs API Reference PreviewCodeCopyimport { cn } from \"@/lib/utils\"\nimport { Slider } from \"@/components/ui/slider\"\ntype SliderProps = React.ComponentProps<typeof Slider>\nexport function SliderDemo({ className, ...props }: SliderProps) {\nreturn (\n<Slider\ndefaultValue={[50]}\nmax={100}\nstep={1}\nclassName={cn(\"w-[60%]\", className)}\n{...props}\n/>\n)\n}\nInstallation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add sliderCopy\nUsage\nCopyimport { Slider } from \"@/components/ui/slider\"\nCopy<Slider defaultValue={[33]} max={100} step={1} /> SkeletonSonner On This PageInstallationUsageDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more.Vercel provides tools and infrastructure to deploy apps and features at scale.Deploy NowDeploy to VercelBuilt by shadcn at Vercel. The source code is available on GitHub.",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 362322,
      "relative_path": "documentation\\shadcn\\_docs_components_slider.html",
      "source_type": "documentation"
    },
    "token_count": 409,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "bde1b691c3887ce9bd28a68dd8874d89",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_sheet.html",
    "source_type": "documentation",
    "title": "Sheet - shadcn/ui",
    "content": "Sheet - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonSheetCopy PagePreviousNextExtends the Dialog component to display content that complements the main content of the screen Docs API Reference PreviewCodeOpenCopyimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport {\nSheet,\nSheetClose,\nSheetContent,\nSheetDescription,\nSheetFooter,\nSheetHeader,\nSheetTitle,\nSheetTrigger,\n} from \"@/components/ui/sheet\"\nexport function SheetDemo() {\nreturn (\n<Sheet>\n<SheetTrigger asChild>\n<Button variant=\"outline\">Open</Button>\n</SheetTrigger>\n<SheetContent>\n<SheetHeader>\n<SheetTitle>Edit profile</SheetTitle>\n<SheetDescription>\nMake changes to your profile here Click save when you&apos;re done",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 458623,
      "relative_path": "documentation\\shadcn\\_docs_components_sheet.html",
      "source_type": "documentation"
    },
    "token_count": 337,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "424fb20bf1c7e80370c9a6e2afd4817c",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_sheet.html",
    "source_type": "documentation",
    "title": "Sheet - shadcn/ui",
    "content": "the Dialog component to display content that complements the main content of the screen Docs API Reference PreviewCodeOpenCopyimport { Button } from \"@/components/ui/button\" import { Input } from \"@/components/ui/input\" import { Label } from \"@/components/ui/label\" import { Sheet, SheetClose, SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetTitle, SheetTrigger, } from \"@/components/ui/sheet\" export function SheetDemo() { return ( <Sheet> <SheetTrigger asChild> <Button variant=\"outline\">Open</Button> </SheetTrigger> <SheetContent> <SheetHeader> <SheetTitle>Edit profile</SheetTitle> <SheetDescription> Make changes to your profile here Click save when you&apos;re done</SheetDescription>\n</SheetHeader>\n<div className=\"grid flex-1 auto-rows-min gap-6 px-4\">\n<div className=\"grid gap-3\">\n<Label htmlFor=\"sheet-demo-name\">Name</Label>\n<Input id=\"sheet-demo-name\" defaultValue=\"Pedro Duarte\" />\n</div>\n<div className=\"grid gap-3\">\n<Label htmlFor=\"sheet-demo-username\">Username</Label>\n<Input id=\"sheet-demo-username\" defaultValue=\"@peduarte\" />\n</div>\n</div>\n<SheetFooter>\n<Button type=\"submit\">Save changes</Button>\n<SheetClose asChild>\n<Button variant=\"outline\">Close</Button>\n</SheetClose>\n</SheetFooter>\n</SheetContent>\n</Sheet>\n)\n}\nInstallation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add sheetCopy\nUsage\nCopyimport {\nSheet,\nSheetContent,\nSheetDescription,\nSheetHeader,\nSheetTitle,\nSheetTrigger,\n} from \"@/components/ui/sheet\"\nCopy<Sheet>\n<SheetTrigger>Open</SheetTrigger>\n<SheetContent>\n<SheetHeader>\n<SheetTitle>Are you absolutely sure </SheetTitle>\n<SheetDescription>\nThis action cannot be undone This will permanently delete your account\nand remove your data from our servers </SheetDescription>\n</SheetHeader>\n</SheetContent>\n</Sheet>\nExamples\nSide\nUse the side property to <SheetContent /> to indicate the edge of the screen where the component will appear The values can be top, right, bottom or left",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 458623,
      "relative_path": "documentation\\shadcn\\_docs_components_sheet.html",
      "source_type": "documentation"
    },
    "token_count": 465,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "6d09be9bd62f72a7f3548d5d82c4f754",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_sheet.html",
    "source_type": "documentation",
    "title": "Sheet - shadcn/ui",
    "content": "add sheetCopy Usage Copyimport { Sheet, SheetContent, SheetDescription, SheetHeader, SheetTitle, SheetTrigger, } from \"@/components/ui/sheet\" Copy<Sheet> <SheetTrigger>Open</SheetTrigger> <SheetContent> <SheetHeader> <SheetTitle>Are you absolutely sure </SheetTitle> <SheetDescription> This action cannot be undone This will permanently delete your account and remove your data from our servers </SheetDescription> </SheetHeader> </SheetContent> </Sheet> Examples Side Use the side property to <SheetContent /> to indicate the edge of the screen where the component will appear The values can be top, right, bottom or leftSize\nYou can adjust the size of the sheet using CSS classes:\nCopy<Sheet>\n<SheetTrigger>Open</SheetTrigger>\n<SheetContent className=\"w-[400px] sm:w-[540px]\">\n<SheetHeader>\n<SheetTitle>Are you absolutely sure </SheetTitle>\n<SheetDescription>\nThis action cannot be undone This will permanently delete your account\nand remove your data from our servers </SheetDescription>\n</SheetHeader>\n</SheetContent>\n</Sheet> SeparatorSidebar On This PageInstallationUsageExamplesSideSizeDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 458623,
      "relative_path": "documentation\\shadcn\\_docs_components_sheet.html",
      "source_type": "documentation"
    },
    "token_count": 305,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "fb8a2be90c51042dc159bdee220b9f08",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_skeleton.html",
    "source_type": "documentation",
    "title": "Skeleton - shadcn/ui",
    "content": "Skeleton - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonSkeletonCopy PagePreviousNextUse to show a placeholder while content is loading PreviewCodeCopyimport { Skeleton } from \"@/components/ui/skeleton\"\nexport function SkeletonDemo() {\nreturn (\n<div className=\"flex items-center space-x-4\">\n<Skeleton className=\"h-12 w-12 rounded-full\" />\n<div className=\"space-y-2\">\n<Skeleton className=\"h-4 w-[250px]\" />\n<Skeleton className=\"h-4 w-[200px]\" />\n</div>\n</div>\n)\n}\nInstallation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add skeletonCopy\nUsage\nCopyimport { Skeleton } from \"@/components/ui/skeleton\"\nCopy<Skeleton className=\"h-[20px] w-[100px] rounded-full\" />\nExamples\nCard\nPreviewCodeCopyimport { Skeleton } from \"@/components/ui/skeleton\"\nexport function SkeletonCard() {\nreturn (\n<div className=\"flex flex-col space-y-3\">\n<Skeleton className=\"h-[125px] w-[250px] rounded-xl\" />\n<div className=\"space-y-2\">\n<Skeleton className=\"h-4 w-[250px]\" />\n<Skeleton className=\"h-4 w-[200px]\" />\n</div>\n</div>\n)\n}\nSidebarSlider On This PageInstallationUsageExamplesCardDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 350924,
      "relative_path": "documentation\\shadcn\\_docs_components_skeleton.html",
      "source_type": "documentation"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "8ee2bf8152a3e2246053b9c21ba51035",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_skeleton.html",
    "source_type": "documentation",
    "title": "Skeleton - shadcn/ui",
    "content": "className=\"h-[20px] w-[100px] rounded-full\" /> Examples Card PreviewCodeCopyimport { Skeleton } from \"@/components/ui/skeleton\" export function SkeletonCard() { return ( <div className=\"flex flex-col space-y-3\"> <Skeleton className=\"h-[125px] w-[250px] rounded-xl\" /> <div className=\"space-y-2\"> <Skeleton className=\"h-4 w-[250px]\" /> <Skeleton className=\"h-4 w-[200px]\" /> </div> </div> ) } SidebarSlider On This PageInstallationUsageExamplesCardDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at VercelThe source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 350924,
      "relative_path": "documentation\\shadcn\\_docs_components_skeleton.html",
      "source_type": "documentation"
    },
    "token_count": 183,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "e8b325ec5b8e500f0f0b5e3ba09cf17f",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_sonner.html",
    "source_type": "documentation",
    "title": "Sonner - shadcn/ui",
    "content": "Sonner - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation...Search...⌘K92.8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents.jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext.jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext.jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry.jsonregistry-item.jsonSonnerCopy PagePreviousNextAn opinionated toast component for React.Docs PreviewCodeShow ToastCopy\"use client\"\nimport { toast } from \"sonner\"\nimport { Button } from \"@/components/ui/button\"\nexport function SonnerDemo() {\nreturn (\n<Button\nvariant=\"outline\"\nonClick={() =>\ntoast(\"Event has been created\", {\ndescription: \"Sunday, December 03, 2023 at 9:00 AM\",\naction: {\nlabel: \"Undo\",\nonClick: () => console.log(\"Undo\"),\n},\n})\n}\n>\nShow Toast\n</Button>\n)\n}\nAbout\nSonner is built and maintained by emilkowalski_.\nInstallation\nCLIManualRun the following command:pnpmnpmyarnbunpnpm dlx shadcn@latest add sonnerCopyAdd the Toaster componentapp/layout.tsxCopyimport { Toaster } from \"@/components/ui/sonner\"\nexport default function RootLayout({ children }) {\nreturn (\n<html lang=\"en\">\n<head />\n<body>\n<main>{children}</main>\n<Toaster />\n</body>\n</html>\n)\n}\nUsage\nCopyimport { toast } from \"sonner\"\nCopytoast(\"Event has been created.\") SliderSwitch On This PageAboutInstallationUsageDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more.Vercel provides tools and infrastructure to deploy apps and features at scale.Deploy NowDeploy to VercelBuilt by shadcn at Vercel. The source code is available on GitHub.",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 372224,
      "relative_path": "documentation\\shadcn\\_docs_components_sonner.html",
      "source_type": "documentation"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d83225ebdf347bf9d46812afc7b228bb",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_switch.html",
    "source_type": "documentation",
    "title": "Switch - shadcn/ui",
    "content": "Switch - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonSwitchCopy PagePreviousNextA control that allows the user to toggle between checked and not checked Docs API Reference PreviewCodeAirplane ModeCopyimport { Label } from \"@/components/ui/label\"\nimport { Switch } from \"@/components/ui/switch\"\nexport function SwitchDemo() {\nreturn (\n<div className=\"flex items-center space-x-2\">\n<Switch id=\"airplane-mode\" />\n<Label htmlFor=\"airplane-mode\">Airplane Mode</Label>\n</div>\n)\n}\nInstallation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add switchCopy\nUsage\nCopyimport { Switch } from \"@/components/ui/switch\"\nCopy<Switch />\nExamples\nForm\nPreviewCodeEmail NotificationsMarketing emailsReceive emails about new products, features, and more Security emailsReceive emails about your account security SubmitCopy\"use client\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport { toast } from \"sonner\"\nimport { z } from \"zod\"\nimport { Button } from \"@/components/ui/button\"\nimport {\nForm,\nFormControl,\nFormDescription,\nFormField,\nFormItem,\nFormLabel,\n} from \"@/components/ui/form\"\nimport { Switch } from \"@/components/ui/switch\"\nconst FormSchema = z object({\nmarketing_emails: z boolean() default(false) optional(),\nsecurity_emails: z boolean(),\n})\nexport function SwitchForm() {\nconst form = useForm<z",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 422102,
      "relative_path": "documentation\\shadcn\\_docs_components_switch.html",
      "source_type": "documentation"
    },
    "token_count": 474,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "d47652a79657650b5df5ef2b50d3f72d",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_switch.html",
    "source_type": "documentation",
    "title": "Switch - shadcn/ui",
    "content": "emails about your account security SubmitCopy\"use client\" import { zodResolver } from \"@hookform/resolvers/zod\" import { useForm } from \"react-hook-form\" import { toast } from \"sonner\" import { z } from \"zod\" import { Button } from \"@/components/ui/button\" import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, } from \"@/components/ui/form\" import { Switch } from \"@/components/ui/switch\" const FormSchema = z object({ marketing_emails: z boolean() default(false) optional(), security_emails: z boolean(), }) export function SwitchForm() { const form = useForm<zinfer<typeof FormSchema>>({\nresolver: zodResolver(FormSchema),\ndefaultValues: {\nsecurity_emails: true,\n},\n})\nfunction onSubmit(data: z infer<typeof FormSchema>) {\ntoast(\"You submitted the following values\", {\ndescription: (\n<pre className=\"mt-2 w-[320px] rounded-md bg-neutral-950 p-4\">\n<code className=\"text-white\">{JSON stringify(data, null, 2)}</code>\n</pre>\n),\n})\n}\nreturn (\n<Form { form}>\n<form onSubmit={form handleSubmit(onSubmit)} className=\"w-full space-y-6\">\n<div>\n<h3 className=\"mb-4 text-lg font-medium\">Email Notifications</h3>\n<div className=\"space-y-4\">\n<FormField\ncontrol={form control}\nname=\"marketing_emails\"\nrender={({ field }) => (\n<FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm\">\n<div className=\"space-y-0 5\">\n<FormLabel>Marketing emails</FormLabel>\n<FormDescription>\nReceive emails about new products, features, and more </FormDescription>\n</div>\n<FormControl>\n<Switch\nchecked={field value}\nonCheckedChange={field onChange}\n/>\n</FormControl>\n</FormItem>\n)}\n/>\n<FormField\ncontrol={form control}\nname=\"security_emails\"\nrender={({ field }) => (\n<FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm\">\n<div className=\"space-y-0 5\">\n<FormLabel>Security emails</FormLabel>\n<FormDescription>\nReceive emails about your account security </FormDescription>\n</div>\n<FormControl>\n<Switch\nchecked={field value}\nonCheckedChange={field",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 422102,
      "relative_path": "documentation\\shadcn\\_docs_components_switch.html",
      "source_type": "documentation"
    },
    "token_count": 475,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "9d8f4689f221e862731a64b7800d997e",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_switch.html",
    "source_type": "documentation",
    "title": "Switch - shadcn/ui",
    "content": "}) => ( <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm\"> <div className=\"space-y-0 5\"> <FormLabel>Marketing emails</FormLabel> <FormDescription> Receive emails about new products, features, and more </FormDescription> </div> <FormControl> <Switch checked={field value} onCheckedChange={field onChange} /> </FormControl> </FormItem> )} /> <FormField control={form control} name=\"security_emails\" render={({ field }) => ( <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm\"> <div className=\"space-y-0 5\"> <FormLabel>Security emails</FormLabel> <FormDescription> Receive emails about your account security </FormDescription> </div> <FormControl> <Switch checked={field value} onCheckedChange={fieldonChange}\ndisabled\naria-readonly\n/>\n</FormControl>\n</FormItem>\n)}\n/>\n</div>\n</div>\n<Button type=\"submit\">Submit</Button>\n</form>\n</Form>\n)\n}\nSonnerTable On This PageInstallationUsageExamplesFormDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 422102,
      "relative_path": "documentation\\shadcn\\_docs_components_switch.html",
      "source_type": "documentation"
    },
    "token_count": 294,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "74a0a9d8121e99a112a8ba7c7d53e670",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_table.html",
    "source_type": "documentation",
    "title": "Table - shadcn/ui",
    "content": "Table - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonTableCopy PagePreviousNextA responsive table component PreviewCodeA list of your recent invoices InvoiceStatusMethodAmountINV001PaidCredit Card$250 00INV002PendingPayPal$150 00INV003UnpaidBank Transfer$350 00INV004PaidCredit Card$450 00INV005PaidPayPal$550 00INV006PendingBank Transfer$200 00INV007UnpaidCredit Card$300 00Total$2,500 00Copyimport {\nTable,\nTableBody,\nTableCaption,\nTableCell,\nTableFooter,\nTableHead,\nTableHeader,\nTableRow,\n} from \"@/components/ui/table\"\nconst invoices = [\n{\ninvoice: \"INV001\",\npaymentStatus: \"Paid\",\ntotalAmount: \"$250 00\",\npaymentMethod: \"Credit Card\",\n},\n{\ninvoice: \"INV002\",\npaymentStatus: \"Pending\",\ntotalAmount: \"$150 00\",\npaymentMethod: \"PayPal\",\n},\n{\ninvoice: \"INV003\",\npaymentStatus: \"Unpaid\",\ntotalAmount: \"$350 00\",\npaymentMethod: \"Bank Transfer\",\n},\n{\ninvoice: \"INV004\",\npaymentStatus: \"Paid\",\ntotalAmount: \"$450 00\",\npaymentMethod: \"Credit Card\",\n},\n{\ninvoice: \"INV005\",\npaymentStatus: \"Paid\",\ntotalAmount: \"$550 00\",\npaymentMethod: \"PayPal\",\n},\n{\ninvoice: \"INV006\",\npaymentStatus: \"Pending\",\ntotalAmount: \"$200 00\",\npaymentMethod: \"Bank Transfer\",\n},\n{\ninvoice: \"INV007\",\npaymentStatus: \"Unpaid\",\ntotalAmount: \"$300",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 457386,
      "relative_path": "documentation\\shadcn\\_docs_components_table.html",
      "source_type": "documentation"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "d24f7d5d584a8bc104a761b499954bf5",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_table.html",
    "source_type": "documentation",
    "title": "Table - shadcn/ui",
    "content": "invoice: \"INV001\", paymentStatus: \"Paid\", totalAmount: \"$250 00\", paymentMethod: \"Credit Card\", }, { invoice: \"INV002\", paymentStatus: \"Pending\", totalAmount: \"$150 00\", paymentMethod: \"PayPal\", }, { invoice: \"INV003\", paymentStatus: \"Unpaid\", totalAmount: \"$350 00\", paymentMethod: \"Bank Transfer\", }, { invoice: \"INV004\", paymentStatus: \"Paid\", totalAmount: \"$450 00\", paymentMethod: \"Credit Card\", }, { invoice: \"INV005\", paymentStatus: \"Paid\", totalAmount: \"$550 00\", paymentMethod: \"PayPal\", }, { invoice: \"INV006\", paymentStatus: \"Pending\", totalAmount: \"$200 00\", paymentMethod: \"Bank Transfer\", }, { invoice: \"INV007\", paymentStatus: \"Unpaid\", totalAmount: \"$30000\",\npaymentMethod: \"Credit Card\",\n},\n]\nexport function TableDemo() {\nreturn (\n<Table>\n<TableCaption>A list of your recent invoices </TableCaption>\n<TableHeader>\n<TableRow>\n<TableHead className=\"w-[100px]\">Invoice</TableHead>\n<TableHead>Status</TableHead>\n<TableHead>Method</TableHead>\n<TableHead className=\"text-right\">Amount</TableHead>\n</TableRow>\n</TableHeader>\n<TableBody>\n{invoices map((invoice) => (\n<TableRow key={invoice invoice}>\n<TableCell className=\"font-medium\">{invoice invoice}</TableCell>\n<TableCell>{invoice paymentStatus}</TableCell>\n<TableCell>{invoice paymentMethod}</TableCell>\n<TableCell className=\"text-right\">{invoice totalAmount}</TableCell>\n</TableRow>\n))}\n</TableBody>\n<TableFooter>\n<TableRow>\n<TableCell colSpan={3}>Total</TableCell>\n<TableCell className=\"text-right\">$2,500 00</TableCell>\n</TableRow>\n</TableFooter>\n</Table>\n)\n}\nInstallation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add tableCopy\nUsage\nCopyimport {\nTable,\nTableBody,\nTableCaption,\nTableCell,\nTableHead,\nTableHeader,\nTableRow,\n} from \"@/components/ui/table\"\nCopy<Table>\n<TableCaption>A list of your recent invoices",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 457386,
      "relative_path": "documentation\\shadcn\\_docs_components_table.html",
      "source_type": "documentation"
    },
    "token_count": 470,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "2d2cb9bbaf3a03411aebcb9571f215e3",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_table.html",
    "source_type": "documentation",
    "title": "Table - shadcn/ui",
    "content": "<TableCaption>A list of your recent invoices </TableCaption> <TableHeader> <TableRow> <TableHead className=\"w-[100px]\">Invoice</TableHead> <TableHead>Status</TableHead> <TableHead>Method</TableHead> <TableHead className=\"text-right\">Amount</TableHead> </TableRow> </TableHeader> <TableBody> {invoices map((invoice) => ( <TableRow key={invoice invoice}> <TableCell className=\"font-medium\">{invoice invoice}</TableCell> <TableCell>{invoice paymentStatus}</TableCell> <TableCell>{invoice paymentMethod}</TableCell> <TableCell className=\"text-right\">{invoice totalAmount}</TableCell> </TableRow> ))} </TableBody> <TableFooter> <TableRow> <TableCell colSpan={3}>Total</TableCell> <TableCell className=\"text-right\">$2,500 00</TableCell> </TableRow> </TableFooter> </Table> ) } Installation CLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add tableCopy Usage Copyimport { Table, TableBody, TableCaption, TableCell, TableHead, TableHeader, TableRow, } from \"@/components/ui/table\" Copy<Table> <TableCaption>A list of your recent invoices</TableCaption>\n<TableHeader>\n<TableRow>\n<TableHead className=\"w-[100px]\">Invoice</TableHead>\n<TableHead>Status</TableHead>\n<TableHead>Method</TableHead>\n<TableHead className=\"text-right\">Amount</TableHead>\n</TableRow>\n</TableHeader>\n<TableBody>\n<TableRow>\n<TableCell className=\"font-medium\">INV001</TableCell>\n<TableCell>Paid</TableCell>\n<TableCell>Credit Card</TableCell>\n<TableCell className=\"text-right\">$250 00</TableCell>\n</TableRow>\n</TableBody>\n</Table>\nData Table\nYou can use the <Table /> component to build more complex data tables Combine it with @tanstack/react-table to create tables with sorting, filtering and pagination See the Data Table documentation for more information You can also see an example of a data table in the Tasks demo SwitchTabs On This PageInstallationUsageData TableDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 457386,
      "relative_path": "documentation\\shadcn\\_docs_components_table.html",
      "source_type": "documentation"
    },
    "token_count": 500,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "05a5ecec2d72968f75e9d6127309d19e",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_tabs.html",
    "source_type": "documentation",
    "title": "Tabs - shadcn/ui",
    "content": "Tabs - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonTabsCopy PagePreviousNextA set of layered sections of content—known as tab panels—that are displayed one at a time Docs API Reference PreviewCodeAccountPasswordAccountMake changes to your account here Click save when you're done NameUsernameSave changesCopyimport { AppWindowIcon, CodeIcon } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport {\nCard,\nCardContent,\nCardDescription,\nCardFooter,\nCardHeader,\nCardTitle,\n} from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport {\nTabs,\nTabsContent,\nTabsList,\nTabsTrigger,\n} from \"@/components/ui/tabs\"\nexport function TabsDemo() {\nreturn (\n<div className=\"flex w-full max-w-sm flex-col gap-6\">\n<Tabs defaultValue=\"account\">\n<TabsList>\n<TabsTrigger value=\"account\">Account</TabsTrigger>\n<TabsTrigger value=\"password\">Password</TabsTrigger>\n</TabsList>\n<TabsContent value=\"account\">\n<Card>\n<CardHeader>\n<CardTitle>Account</CardTitle>\n<CardDescription>\nMake changes to your account here Click save when you&apos;re\ndone",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 432839,
      "relative_path": "documentation\\shadcn\\_docs_components_tabs.html",
      "source_type": "documentation"
    },
    "token_count": 420,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "85a9bd7fde44a06d9363292021068f8e",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_tabs.html",
    "source_type": "documentation",
    "title": "Tabs - shadcn/ui",
    "content": "\"lucide-react\" import { Button } from \"@/components/ui/button\" import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle, } from \"@/components/ui/card\" import { Input } from \"@/components/ui/input\" import { Label } from \"@/components/ui/label\" import { Tabs, TabsContent, TabsList, TabsTrigger, } from \"@/components/ui/tabs\" export function TabsDemo() { return ( <div className=\"flex w-full max-w-sm flex-col gap-6\"> <Tabs defaultValue=\"account\"> <TabsList> <TabsTrigger value=\"account\">Account</TabsTrigger> <TabsTrigger value=\"password\">Password</TabsTrigger> </TabsList> <TabsContent value=\"account\"> <Card> <CardHeader> <CardTitle>Account</CardTitle> <CardDescription> Make changes to your account here Click save when you&apos;re done</CardDescription>\n</CardHeader>\n<CardContent className=\"grid gap-6\">\n<div className=\"grid gap-3\">\n<Label htmlFor=\"tabs-demo-name\">Name</Label>\n<Input id=\"tabs-demo-name\" defaultValue=\"Pedro Duarte\" />\n</div>\n<div className=\"grid gap-3\">\n<Label htmlFor=\"tabs-demo-username\">Username</Label>\n<Input id=\"tabs-demo-username\" defaultValue=\"@peduarte\" />\n</div>\n</CardContent>\n<CardFooter>\n<Button>Save changes</Button>\n</CardFooter>\n</Card>\n</TabsContent>\n<TabsContent value=\"password\">\n<Card>\n<CardHeader>\n<CardTitle>Password</CardTitle>\n<CardDescription>\nChange your password here After saving, you&apos;ll be logged\nout",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 432839,
      "relative_path": "documentation\\shadcn\\_docs_components_tabs.html",
      "source_type": "documentation"
    },
    "token_count": 342,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "2aa7a03f2b405788bb90678d3d1f074b",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_tabs.html",
    "source_type": "documentation",
    "title": "Tabs - shadcn/ui",
    "content": "max-w-sm flex-col gap-6\"> <Tabs defaultValue=\"account\"> <TabsList> <TabsTrigger value=\"account\">Account</TabsTrigger> <TabsTrigger value=\"password\">Password</TabsTrigger> </TabsList> <TabsContent value=\"account\"> <Card> <CardHeader> <CardTitle>Account</CardTitle> <CardDescription> Make changes to your account here Click save when you&apos;re done</CardDescription> </CardHeader> <CardContent className=\"grid gap-6\"> <div className=\"grid gap-3\"> <Label htmlFor=\"tabs-demo-name\">Name</Label> <Input id=\"tabs-demo-name\" defaultValue=\"Pedro Duarte\" /> </div> <div className=\"grid gap-3\"> <Label htmlFor=\"tabs-demo-username\">Username</Label> <Input id=\"tabs-demo-username\" defaultValue=\"@peduarte\" /> </div> </CardContent> <CardFooter> <Button>Save changes</Button> </CardFooter> </Card> </TabsContent> <TabsContent value=\"password\"> <Card> <CardHeader> <CardTitle>Password</CardTitle> <CardDescription> Change your password here After saving, you&apos;ll be logged out</CardDescription>\n</CardHeader>\n<CardContent className=\"grid gap-6\">\n<div className=\"grid gap-3\">\n<Label htmlFor=\"tabs-demo-current\">Current password</Label>\n<Input id=\"tabs-demo-current\" type=\"password\" />\n</div>\n<div className=\"grid gap-3\">\n<Label htmlFor=\"tabs-demo-new\">New password</Label>\n<Input id=\"tabs-demo-new\" type=\"password\" />\n</div>\n</CardContent>\n<CardFooter>\n<Button>Save password</Button>\n</CardFooter>\n</Card>\n</TabsContent>\n</Tabs>\n</div>\n)\n}\nInstallation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add tabsCopy\nUsage\nCopyimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nCopy<Tabs defaultValue=\"account\" className=\"w-[400px]\">\n<TabsList>\n<TabsTrigger value=\"account\">Account</TabsTrigger>\n<TabsTrigger value=\"password\">Password</TabsTrigger>\n</TabsList>\n<TabsContent value=\"account\">Make changes to your account here </TabsContent>\n<TabsContent value=\"password\">Change your password here",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 432839,
      "relative_path": "documentation\\shadcn\\_docs_components_tabs.html",
      "source_type": "documentation"
    },
    "token_count": 495,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "16fa9cd19bb176074453574ca671f9f4",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_tabs.html",
    "source_type": "documentation",
    "title": "Tabs - shadcn/ui",
    "content": "out</CardDescription> </CardHeader> <CardContent className=\"grid gap-6\"> <div className=\"grid gap-3\"> <Label htmlFor=\"tabs-demo-current\">Current password</Label> <Input id=\"tabs-demo-current\" type=\"password\" /> </div> <div className=\"grid gap-3\"> <Label htmlFor=\"tabs-demo-new\">New password</Label> <Input id=\"tabs-demo-new\" type=\"password\" /> </div> </CardContent> <CardFooter> <Button>Save password</Button> </CardFooter> </Card> </TabsContent> </Tabs> </div> ) } Installation CLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add tabsCopy Usage Copyimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\" Copy<Tabs defaultValue=\"account\" className=\"w-[400px]\"> <TabsList> <TabsTrigger value=\"account\">Account</TabsTrigger> <TabsTrigger value=\"password\">Password</TabsTrigger> </TabsList> <TabsContent value=\"account\">Make changes to your account here </TabsContent> <TabsContent value=\"password\">Change your password here</TabsContent>\n</Tabs> TableTextarea On This PageInstallationUsageDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 432839,
      "relative_path": "documentation\\shadcn\\_docs_components_tabs.html",
      "source_type": "documentation"
    },
    "token_count": 322,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "1a4362e889a6139caba347277a373f17",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_toast.html",
    "source_type": "documentation",
    "title": "Toast - shadcn/ui",
    "content": "Toast - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation...Search...⌘K92.8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents.jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext.jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext.jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry.jsonregistry-item.jsonToastCopy PagePreviousNextA succinct message that is displayed temporarily.Docs API Reference The toast component has been deprecated.See the sonner documentation for more information.\nIf you're looking for the old toast component, see the old docs for more information. TextareaToggle Deploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more.Vercel provides tools and infrastructure to deploy apps and features at scale.Deploy NowDeploy to VercelBuilt by shadcn at Vercel. The source code is available on GitHub.",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 278137,
      "relative_path": "documentation\\shadcn\\_docs_components_toast.html",
      "source_type": "documentation"
    },
    "token_count": 298,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "68c007c6f62678e0305d814715e2a070",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_textarea.html",
    "source_type": "documentation",
    "title": "Textarea - shadcn/ui",
    "content": "Textarea - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonTextareaCopy PagePreviousNextDisplays a form textarea or a component that looks like a textarea PreviewCodeCopyimport { Textarea } from \"@/components/ui/textarea\"\nexport function TextareaDemo() {\nreturn <Textarea placeholder=\"Type your message here \" />\n}\nInstallation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add textareaCopy\nUsage\nCopyimport { Textarea } from \"@/components/ui/textarea\"\nCopy<Textarea />\nExamples\nDefault\nPreviewCodeCopyimport { Textarea } from \"@/components/ui/textarea\"\nexport function TextareaDemo() {\nreturn <Textarea placeholder=\"Type your message here \" />\n}\nDisabled\nPreviewCodeCopyimport { Textarea } from \"@/components/ui/textarea\"\nexport function TextareaDisabled() {\nreturn <Textarea placeholder=\"Type your message here \" disabled />\n}\nWith Label\nPreviewCodeYour messageCopyimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nexport function TextareaWithLabel() {\nreturn (\n<div className=\"grid w-full gap-3\">\n<Label htmlFor=\"message\">Your message</Label>\n<Textarea placeholder=\"Type your message here \" id=\"message\" />\n</div>\n)\n}\nWith Text\nPreviewCodeYour MessageYour message will be copied to the support team",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 458538,
      "relative_path": "documentation\\shadcn\\_docs_components_textarea.html",
      "source_type": "documentation"
    },
    "token_count": 445,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "f5c6dd883691c1c16da1b29d7d155350",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_textarea.html",
    "source_type": "documentation",
    "title": "Textarea - shadcn/ui",
    "content": "here \" /> } Disabled PreviewCodeCopyimport { Textarea } from \"@/components/ui/textarea\" export function TextareaDisabled() { return <Textarea placeholder=\"Type your message here \" disabled /> } With Label PreviewCodeYour messageCopyimport { Label } from \"@/components/ui/label\" import { Textarea } from \"@/components/ui/textarea\" export function TextareaWithLabel() { return ( <div className=\"grid w-full gap-3\"> <Label htmlFor=\"message\">Your message</Label> <Textarea placeholder=\"Type your message here \" id=\"message\" /> </div> ) } With Text PreviewCodeYour MessageYour message will be copied to the support teamCopyimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nexport function TextareaWithText() {\nreturn (\n<div className=\"grid w-full gap-3\">\n<Label htmlFor=\"message-2\">Your Message</Label>\n<Textarea placeholder=\"Type your message here \" id=\"message-2\" />\n<p className=\"text-muted-foreground text-sm\">\nYour message will be copied to the support team </p>\n</div>\n)\n}\nWith Button\nPreviewCodeSend messageCopyimport { Button } from \"@/components/ui/button\"\nimport { Textarea } from \"@/components/ui/textarea\"\nexport function TextareaWithButton() {\nreturn (\n<div className=\"grid w-full gap-2\">\n<Textarea placeholder=\"Type your message here \" />\n<Button>Send message</Button>\n</div>\n)\n}\nForm\nPreviewCodeBioYou can @mention other users and organizations SubmitCopy\"use client\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport { toast } from \"sonner\"\nimport { z } from \"zod\"\nimport { Button } from \"@/components/ui/button\"\nimport {\nForm,\nFormControl,\nFormDescription,\nFormField,\nFormItem,\nFormLabel,\nFormMessage,\n} from \"@/components/ui/form\"\nimport { Textarea } from \"@/components/ui/textarea\"\nconst FormSchema = z object({\nbio: z string() min(10, {\nmessage: \"Bio must be at least 10 characters \",\n}) max(160, {\nmessage: \"Bio must not be longer than 30 characters \",\n}),\n})\nexport function TextareaForm() {\nconst form = useForm<z infer<typeof FormSchema>>({\nresolver: zodResolver(FormSchema),\n})\nfunction onSubmit(data: z",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 458538,
      "relative_path": "documentation\\shadcn\\_docs_components_textarea.html",
      "source_type": "documentation"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "4c902042614acadadf8e56a5676c6249",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_textarea.html",
    "source_type": "documentation",
    "title": "Textarea - shadcn/ui",
    "content": "from \"zod\" import { Button } from \"@/components/ui/button\" import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage, } from \"@/components/ui/form\" import { Textarea } from \"@/components/ui/textarea\" const FormSchema = z object({ bio: z string() min(10, { message: \"Bio must be at least 10 characters \", }) max(160, { message: \"Bio must not be longer than 30 characters \", }), }) export function TextareaForm() { const form = useForm<z infer<typeof FormSchema>>({ resolver: zodResolver(FormSchema), }) function onSubmit(data: zinfer<typeof FormSchema>) {\ntoast(\"You submitted the following values\", {\ndescription: (\n<pre className=\"mt-2 w-[320px] rounded-md bg-neutral-950 p-4\">\n<code className=\"text-white\">{JSON stringify(data, null, 2)}</code>\n</pre>\n),\n})\n}\nreturn (\n<Form { form}>\n<form onSubmit={form handleSubmit(onSubmit)} className=\"w-2/3 space-y-6\">\n<FormField\ncontrol={form control}\nname=\"bio\"\nrender={({ field }) => (\n<FormItem>\n<FormLabel>Bio</FormLabel>\n<FormControl>\n<Textarea\nplaceholder=\"Tell us a little bit about yourself\"\nclassName=\"resize-none\"\n{ field}\n/>\n</FormControl>\n<FormDescription>\nYou can <span>@mention</span> other users and organizations </FormDescription>\n<FormMessage />\n</FormItem>\n)}\n/>\n<Button type=\"submit\">Submit</Button>\n</form>\n</Form>\n)\n}\nTabsToast On This PageInstallationUsageExamplesDefaultDisabledWith LabelWith TextWith ButtonFormDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 458538,
      "relative_path": "documentation\\shadcn\\_docs_components_textarea.html",
      "source_type": "documentation"
    },
    "token_count": 407,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "6f6ddeb11f0e3e6fc0ad4905a76cfb84",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_tooltip.html",
    "source_type": "documentation",
    "title": "Tooltip - shadcn/ui",
    "content": "Tooltip - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation...Search...⌘K92.8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents.jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext.jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext.jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry.jsonregistry-item.jsonTooltipCopy PagePreviousNextA popup that displays information related to an element when the element receives keyboard focus or the mouse hovers over it.Docs API Reference PreviewCodeHoverCopyimport { Button } from \"@/components/ui/button\"\nimport {\nTooltip,\nTooltipContent,\nTooltipTrigger,\n} from \"@/components/ui/tooltip\"\nexport function TooltipDemo() {\nreturn (\n<Tooltip>\n<TooltipTrigger asChild>\n<Button variant=\"outline\">Hover</Button>\n</TooltipTrigger>\n<TooltipContent>\n<p>Add to library</p>\n</TooltipContent>\n</Tooltip>\n)\n}\nInstallation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add tooltipCopy\nUsage\nCopyimport {\nTooltip,\nTooltipContent,\nTooltipTrigger,\n} from \"@/components/ui/tooltip\"\nCopy<Tooltip>\n<TooltipTrigger>Hover</TooltipTrigger>\n<TooltipContent>\n<p>Add to library</p>\n</TooltipContent>\n</Tooltip> Toggle GroupTypography On This PageInstallationUsageDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more.Vercel provides tools and infrastructure to deploy apps and features at scale.Deploy NowDeploy to VercelBuilt by shadcn at Vercel. The source code is available on GitHub.",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 369971,
      "relative_path": "documentation\\shadcn\\_docs_components_tooltip.html",
      "source_type": "documentation"
    },
    "token_count": 442,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "012c7deb62dceeffe482e3a7e2a6ae30",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_toggle-group.html",
    "source_type": "documentation",
    "title": "Toggle Group - shadcn/ui",
    "content": "Toggle Group - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonToggle GroupCopy PagePreviousNextA set of two-state buttons that can be toggled on or off",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 552964,
      "relative_path": "documentation\\shadcn\\_docs_components_toggle-group.html",
      "source_type": "documentation"
    },
    "token_count": 200,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "a3b1f4fa7d0c59d81238f7631a131936",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_toggle-group.html",
    "source_type": "documentation",
    "title": "Toggle Group - shadcn/ui",
    "content": "Toggle Group - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonToggle GroupCopy PagePreviousNextA set of two-state buttons that can be toggled on or offDocs API Reference PreviewCodeCopyimport { Bold, Italic, Underline } from \"lucide-react\"\nimport {\nToggleGroup,\nToggleGroupItem,\n} from \"@/components/ui/toggle-group\"\nexport function ToggleGroupDemo() {\nreturn (\n<ToggleGroup variant=\"outline\" type=\"multiple\">\n<ToggleGroupItem value=\"bold\" aria-label=\"Toggle bold\">\n<Bold className=\"h-4 w-4\" />\n</ToggleGroupItem>\n<ToggleGroupItem value=\"italic\" aria-label=\"Toggle italic\">\n<Italic className=\"h-4 w-4\" />\n</ToggleGroupItem>\n<ToggleGroupItem value=\"strikethrough\" aria-label=\"Toggle strikethrough\">\n<Underline className=\"h-4 w-4\" />\n</ToggleGroupItem>\n</ToggleGroup>\n)\n}\nInstallation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add toggle-groupCopy\nUsage\nCopyimport { ToggleGroup, ToggleGroupItem } from \"@/components/ui/toggle-group\"\nCopy<ToggleGroup type=\"single\">\n<ToggleGroupItem value=\"a\">A</ToggleGroupItem>\n<ToggleGroupItem value=\"b\">B</ToggleGroupItem>\n<ToggleGroupItem value=\"c\">C</ToggleGroupItem>\n</ToggleGroup>\nExamples\nDefault\nPreviewCodeCopyimport { Bold, Italic, Underline } from \"lucide-react\"\nimport {\nToggleGroup,\nToggleGroupItem,\n} from \"@/components/ui/toggle-group\"\nexport function ToggleGroupDemo() {\nreturn (\n<ToggleGroup variant=\"outline\" type=\"multiple\">\n<ToggleGroupItem value=\"bold\" aria-label=\"Toggle bold\">\n<Bold className=\"h-4 w-4\" />\n</ToggleGroupItem>\n<ToggleGroupItem value=\"italic\" aria-label=\"Toggle italic\">\n<Italic className=\"h-4 w-4\" />\n</ToggleGroupItem>\n<ToggleGroupItem value=\"strikethrough\" aria-label=\"Toggle strikethrough\">\n<Underline className=\"h-4 w-4\" />\n</ToggleGroupItem>\n</ToggleGroup>\n)\n}\nOutline\nPreviewCodeCopyimport { Bold, Italic, Underline } from \"lucide-react\"\nimport {\nToggleGroup,\nToggleGroupItem,\n} from \"@/components/ui/toggle-group\"\nexport function ToggleGroupDemo() {\nreturn (\n<ToggleGroup type=\"multiple\" variant=\"outline\">\n<ToggleGroupItem value=\"bold\" aria-label=\"Toggle bold\">\n<Bold className=\"h-4 w-4\" />\n</ToggleGroupItem>\n<ToggleGroupItem value=\"italic\" aria-label=\"Toggle italic\">\n<Italic className=\"h-4 w-4\" />\n</ToggleGroupItem>\n<ToggleGroupItem value=\"strikethrough\" aria-label=\"Toggle strikethrough\">\n<Underline className=\"h-4 w-4\" />\n</ToggleGroupItem>\n</ToggleGroup>\n)\n}\nSingle\nPreviewCodeCopyimport { Bold, Italic, Underline } from \"lucide-react\"\nimport {\nToggleGroup,\nToggleGroupItem,\n} from \"@/components/ui/toggle-group\"\nexport function ToggleGroupDemo() {\nreturn (\n<ToggleGroup type=\"single\">\n<ToggleGroupItem value=\"bold\" aria-label=\"Toggle bold\">\n<Bold className=\"h-4 w-4\" />\n</ToggleGroupItem>\n<ToggleGroupItem value=\"italic\" aria-label=\"Toggle italic\">\n<Italic className=\"h-4 w-4\" />\n</ToggleGroupItem>\n<ToggleGroupItem value=\"strikethrough\" aria-label=\"Toggle strikethrough\">\n<Underline className=\"h-4 w-4\" />\n</ToggleGroupItem>\n</ToggleGroup>\n)\n}\nSmall\nPreviewCodeCopyimport { Bold, Italic, Underline } from \"lucide-react\"\nimport {\nToggleGroup,\nToggleGroupItem,\n} from \"@/components/ui/toggle-group\"\nexport function ToggleGroupDemo() {\nreturn (\n<ToggleGroup type=\"single\" size=\"sm\">\n<ToggleGroupItem value=\"bold\" aria-label=\"Toggle bold\">\n<Bold className=\"h-4 w-4\" />\n</ToggleGroupItem>\n<ToggleGroupItem value=\"italic\" aria-label=\"Toggle italic\">\n<Italic className=\"h-4 w-4\" />\n</ToggleGroupItem>\n<ToggleGroupItem value=\"strikethrough\" aria-label=\"Toggle strikethrough\">\n<Underline className=\"h-4 w-4\" />\n</ToggleGroupItem>\n</ToggleGroup>\n)\n}\nLarge\nPreviewCodeCopyimport { Bold, Italic, Underline } from \"lucide-react\"\nimport {\nToggleGroup,\nToggleGroupItem,\n} from \"@/components/ui/toggle-group\"\nexport function ToggleGroupDemo() {\nreturn (\n<ToggleGroup type=\"multiple\" size=\"lg\">\n<ToggleGroupItem value=\"bold\" aria-label=\"Toggle bold\">\n<Bold className=\"h-4 w-4\" />\n</ToggleGroupItem>\n<ToggleGroupItem value=\"italic\" aria-label=\"Toggle italic\">\n<Italic className=\"h-4 w-4\" />\n</ToggleGroupItem>\n<ToggleGroupItem value=\"strikethrough\" aria-label=\"Toggle strikethrough\">\n<Underline className=\"h-4 w-4\" />\n</ToggleGroupItem>\n</ToggleGroup>\n)\n}\nDisabled\nPreviewCodeCopyimport { Bold, Italic, Underline } from \"lucide-react\"\nimport {\nToggleGroup,\nToggleGroupItem,\n} from \"@/components/ui/toggle-group\"\nexport function ToggleGroupDemo() {\nreturn (\n<ToggleGroup type=\"multiple\" disabled>\n<ToggleGroupItem value=\"bold\" aria-label=\"Toggle bold\">\n<Bold className=\"h-4 w-4\" />\n</ToggleGroupItem>\n<ToggleGroupItem value=\"italic\" aria-label=\"Toggle italic\">\n<Italic className=\"h-4 w-4\" />\n</ToggleGroupItem>\n<ToggleGroupItem value=\"strikethrough\" aria-label=\"Toggle strikethrough\">\n<Underline className=\"h-4 w-4\" />\n</ToggleGroupItem>\n</ToggleGroup>\n)\n}\nToggleTooltip On This PageInstallationUsageExamplesDefaultOutlineSingleSmallLargeDisabledDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 552964,
      "relative_path": "documentation\\shadcn\\_docs_components_toggle-group.html",
      "source_type": "documentation"
    },
    "token_count": 1496,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "87082cb2fdc63b76875171dee3b68a14",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_toggle-group.html",
    "source_type": "documentation",
    "title": "Toggle Group - shadcn/ui",
    "content": "w-4\" /> </ToggleGroupItem> </ToggleGroup> ) } Disabled PreviewCodeCopyimport { Bold, Italic, Underline } from \"lucide-react\" import { ToggleGroup, ToggleGroupItem, } from \"@/components/ui/toggle-group\" export function ToggleGroupDemo() { return ( <ToggleGroup type=\"multiple\" disabled> <ToggleGroupItem value=\"bold\" aria-label=\"Toggle bold\"> <Bold className=\"h-4 w-4\" /> </ToggleGroupItem> <ToggleGroupItem value=\"italic\" aria-label=\"Toggle italic\"> <Italic className=\"h-4 w-4\" /> </ToggleGroupItem> <ToggleGroupItem value=\"strikethrough\" aria-label=\"Toggle strikethrough\"> <Underline className=\"h-4 w-4\" /> </ToggleGroupItem> </ToggleGroup> ) } ToggleTooltip On This PageInstallationUsageExamplesDefaultOutlineSingleSmallLargeDisabledDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and moreVercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 552964,
      "relative_path": "documentation\\shadcn\\_docs_components_toggle-group.html",
      "source_type": "documentation"
    },
    "token_count": 254,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "06f16db6c41240edfa3ed49ca57a03c4",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_toggle.html",
    "source_type": "documentation",
    "title": "Toggle - shadcn/ui",
    "content": "Toggle - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonToggleCopy PagePreviousNextA two-state button that can be either on or off",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 435193,
      "relative_path": "documentation\\shadcn\\_docs_components_toggle.html",
      "source_type": "documentation"
    },
    "token_count": 195,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "3d376dd1f94c0985822183ef05f19d4d",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_toggle.html",
    "source_type": "documentation",
    "title": "Toggle - shadcn/ui",
    "content": "Toggle - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonToggleCopy PagePreviousNextA two-state button that can be either on or offDocs API Reference PreviewCodeCopyimport { Bold } from \"lucide-react\"\nimport { Toggle } from \"@/components/ui/toggle\"\nexport function ToggleDemo() {\nreturn (\n<Toggle aria-label=\"Toggle italic\">\n<Bold className=\"h-4 w-4\" />\n</Toggle>\n)\n}\nInstallation\nCLIManualpnpmnpmyarnbunpnpm dlx shadcn@latest add toggleCopy\nUsage\nCopyimport { Toggle } from \"@/components/ui/toggle\"\nCopy<Toggle>Toggle</Toggle>\nExamples\nDefault\nPreviewCodeCopyimport { Bold } from \"lucide-react\"\nimport { Toggle } from \"@/components/ui/toggle\"\nexport function ToggleDemo() {\nreturn (\n<Toggle aria-label=\"Toggle italic\">\n<Bold className=\"h-4 w-4\" />\n</Toggle>\n)\n}\nOutline\nPreviewCodeCopyimport { Italic } from \"lucide-react\"\nimport { Toggle } from \"@/components/ui/toggle\"\nexport function ToggleOutline() {\nreturn (\n<Toggle variant=\"outline\" aria-label=\"Toggle italic\">\n<Italic />\n</Toggle>\n)\n}\nWith Text\nPreviewCodeItalicCopyimport { Italic } from \"lucide-react\"\nimport { Toggle } from \"@/components/ui/toggle\"\nexport function ToggleWithText() {\nreturn (\n<Toggle aria-label=\"Toggle italic\">\n<Italic />\nItalic\n</Toggle>\n)\n}\nSmall\nPreviewCodeCopyimport { Italic } from \"lucide-react\"\nimport { Toggle } from \"@/components/ui/toggle\"\nexport function ToggleSm() {\nreturn (\n<Toggle size=\"sm\" aria-label=\"Toggle italic\">\n<Italic />\n</Toggle>\n)\n}\nLarge\nPreviewCodeCopyimport { Italic } from \"lucide-react\"\nimport { Toggle } from \"@/components/ui/toggle\"\nexport function ToggleLg() {\nreturn (\n<Toggle size=\"lg\" aria-label=\"Toggle italic\">\n<Italic />\n</Toggle>\n)\n}\nDisabled\nPreviewCodeCopyimport { Underline } from \"lucide-react\"\nimport { Toggle } from \"@/components/ui/toggle\"\nexport function ToggleDisabled() {\nreturn (\n<Toggle aria-label=\"Toggle italic\" disabled>\n<Underline className=\"h-4 w-4\" />\n</Toggle>\n)\n}\nToastToggle Group On This PageInstallationUsageExamplesDefaultOutlineWith TextSmallLargeDisabledDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 435193,
      "relative_path": "documentation\\shadcn\\_docs_components_toggle.html",
      "source_type": "documentation"
    },
    "token_count": 694,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "6d26539da4aec6c65c2dac4dd99cebef",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_toggle.html",
    "source_type": "documentation",
    "title": "Toggle - shadcn/ui",
    "content": "} Large PreviewCodeCopyimport { Italic } from \"lucide-react\" import { Toggle } from \"@/components/ui/toggle\" export function ToggleLg() { return ( <Toggle size=\"lg\" aria-label=\"Toggle italic\"> <Italic /> </Toggle> ) } Disabled PreviewCodeCopyimport { Underline } from \"lucide-react\" import { Toggle } from \"@/components/ui/toggle\" export function ToggleDisabled() { return ( <Toggle aria-label=\"Toggle italic\" disabled> <Underline className=\"h-4 w-4\" /> </Toggle> ) } ToastToggle Group On This PageInstallationUsageExamplesDefaultOutlineWith TextSmallLargeDisabledDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and moreVercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 435193,
      "relative_path": "documentation\\shadcn\\_docs_components_toggle.html",
      "source_type": "documentation"
    },
    "token_count": 197,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "e66a96b740c64132b840a9ece4ab9699",
    "source_file": "corpus\\documentation\\shadcn\\_docs_dark-mode.html",
    "source_type": "documentation",
    "title": "Dark Mode - shadcn/ui",
    "content": "Dark Mode - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation...Search...⌘K92.8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents.jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext.jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext.jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry.jsonregistry-item.jsonDark ModeCopy PagePreviousNextAdding dark mode to your site.Next.jsNext.jsViteViteAstroRemixRemix ThemingCLI Deploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more.Vercel provides tools and infrastructure to deploy apps and features at scale.Deploy NowDeploy to VercelBuilt by shadcn at Vercel. The source code is available on GitHub.",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 287183,
      "relative_path": "documentation\\shadcn\\_docs_dark-mode.html",
      "source_type": "documentation"
    },
    "token_count": 275,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6263b1fee4d9134e76a91725bda4561e",
    "source_file": "corpus\\documentation\\shadcn\\_docs_dark-mode_next.html",
    "source_type": "documentation",
    "title": "Next.js - shadcn/ui",
    "content": "Next js - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonNext jsCopy PagePreviousNextAdding dark mode to your next app Install next-themesStart by installing next-themes:pnpmnpmyarnbunpnpm add next-themesCopyCreate a theme providercomponents/theme-provider tsxCopy\"use client\"\nimport * as React from \"react\"\nimport { ThemeProvider as NextThemesProvider } from \"next-themes\"\nexport function ThemeProvider({\nchildren, props\n}: React ComponentProps<typeof NextThemesProvider>) {\nreturn <NextThemesProvider { props}>{children}</NextThemesProvider>\n}Wrap your root layoutAdd the ThemeProvider to your root layout and add the suppressHydrationWarning prop to the html tag app/layout tsxCopyimport { ThemeProvider } from \"@/components/theme-provider\"\nexport default function RootLayout({ children }: RootLayoutProps) {\nreturn (\n<>\n<html lang=\"en\" suppressHydrationWarning>\n<head />\n<body>\n<ThemeProvider\nattribute=\"class\"\ndefaultTheme=\"system\"\nenableSystem\ndisableTransitionOnChange\n>\n{children}\n</ThemeProvider>\n</body>\n</html>\n</>\n)\n}Add a mode togglePlace a mode toggle on your site to toggle between light and dark mode",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 365721,
      "relative_path": "documentation\\shadcn\\_docs_dark-mode_next.html",
      "source_type": "documentation"
    },
    "token_count": 412,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "d1d2a80b0fb10490f2c8b446374548e2",
    "source_file": "corpus\\documentation\\shadcn\\_docs_dark-mode_next.html",
    "source_type": "documentation",
    "title": "Next.js - shadcn/ui",
    "content": "return <NextThemesProvider { props}>{children}</NextThemesProvider> }Wrap your root layoutAdd the ThemeProvider to your root layout and add the suppressHydrationWarning prop to the html tag app/layout tsxCopyimport { ThemeProvider } from \"@/components/theme-provider\" export default function RootLayout({ children }: RootLayoutProps) { return ( <> <html lang=\"en\" suppressHydrationWarning> <head /> <body> <ThemeProvider attribute=\"class\" defaultTheme=\"system\" enableSystem disableTransitionOnChange > {children} </ThemeProvider> </body> </html> </> ) }Add a mode togglePlace a mode toggle on your site to toggle between light and dark modePreviewCodeToggle themeCopy\"use client\"\nimport * as React from \"react\"\nimport { Moon, Sun } from \"lucide-react\"\nimport { useTheme } from \"next-themes\"\nimport { Button } from \"@/components/ui/button\"\nimport {\nDropdownMenu,\nDropdownMenuContent,\nDropdownMenuItem,\nDropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nexport function ModeToggle() {\nconst { setTheme } = useTheme()\nreturn (\n<DropdownMenu>\n<DropdownMenuTrigger asChild>\n<Button variant=\"outline\" size=\"icon\">\n<Sun className=\"h-[1 2rem] w-[1 2rem] scale-100 rotate-0 transition-all dark:scale-0 dark:-rotate-90\" />\n<Moon className=\"absolute h-[1 2rem] w-[1 2rem] scale-0 rotate-90 transition-all dark:scale-100 dark:rotate-0\" />\n<span className=\"sr-only\">Toggle theme</span>\n</Button>\n</DropdownMenuTrigger>\n<DropdownMenuContent align=\"end\">\n<DropdownMenuItem onClick={() => setTheme(\"light\")}>\nLight\n</DropdownMenuItem>\n<DropdownMenuItem onClick={() => setTheme(\"dark\")}>\nDark\n</DropdownMenuItem>\n<DropdownMenuItem onClick={() => setTheme(\"system\")}>\nSystem\n</DropdownMenuItem>\n</DropdownMenuContent>\n</DropdownMenu>\n)\n}\nDark ModeVite On This PageInstall next-themesCreate a theme providerWrap your root layoutAdd a mode toggleDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 365721,
      "relative_path": "documentation\\shadcn\\_docs_dark-mode_next.html",
      "source_type": "documentation"
    },
    "token_count": 504,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "8949d3873bd989886bb3f579c73a6973",
    "source_file": "corpus\\documentation\\shadcn\\_docs_dark-mode_astro.html",
    "source_type": "documentation",
    "title": "Astro - shadcn/ui",
    "content": "Astro - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonAstroCopy PagePreviousNextAdding dark mode to your astro app Create an inline theme script\nsrc/pages/index astroCopy---\nimport ' /styles/globals css'\n---\n<script is:inline>\nconst getThemePreference = () => {\nif (typeof localStorage == 'undefined' && localStorage getItem('theme')) {\nreturn localStorage getItem('theme');\n}\nreturn window matchMedia('(prefers-color-scheme: dark)') matches 'dark' : 'light';\n};\nconst isDark = getThemePreference() === 'dark';\ndocument documentElement classList[isDark 'add' : 'remove']('dark');\nif (typeof localStorage == 'undefined') {\nconst observer = new MutationObserver(() => {\nconst isDark = document documentElement classList contains('dark');\nlocalStorage setItem('theme', isDark 'dark' : 'light');\n});\nobserver observe(document documentElement, { attributes: true, attributeFilter: ['class'] });\n}\n</script>\n<html lang=\"en\">\n<body>\n<h1>Astro</h1>\n</body>\n</html>\nAdd a mode toggle\nsrc/components/ModeToggle tsxCopyimport * as React from \"react\"\nimport { Moon, Sun } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport {\nDropdownMenu,\nDropdownMenuContent,\nDropdownMenuItem,\nDropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nexport function ModeToggle() {\nconst [theme, setThemeState] = React useState<\n\"theme-light\" | \"dark\" | \"system\"\n>(\"theme-light\")\nReact useEffect(() => {\nconst isDarkMode = document",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 377629,
      "relative_path": "documentation\\shadcn\\_docs_dark-mode_astro.html",
      "source_type": "documentation"
    },
    "token_count": 505,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "286059daecb15364dfea247261500276",
    "source_file": "corpus\\documentation\\shadcn\\_docs_dark-mode_astro.html",
    "source_type": "documentation",
    "title": "Astro - shadcn/ui",
    "content": "'light'); }); observer observe(document documentElement, { attributes: true, attributeFilter: ['class'] }); } </script> <html lang=\"en\"> <body> <h1>Astro</h1> </body> </html> Add a mode toggle src/components/ModeToggle tsxCopyimport * as React from \"react\" import { Moon, Sun } from \"lucide-react\" import { Button } from \"@/components/ui/button\" import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger, } from \"@/components/ui/dropdown-menu\" export function ModeToggle() { const [theme, setThemeState] = React useState< \"theme-light\" | \"dark\" | \"system\" >(\"theme-light\") React useEffect(() => { const isDarkMode = documentdocumentElement classList contains(\"dark\")\nsetThemeState(isDarkMode \"dark\" : \"theme-light\")\n}, [])\nReact useEffect(() => {\nconst isDark =\ntheme === \"dark\" ||\n(theme === \"system\" &&\nwindow matchMedia(\"(prefers-color-scheme: dark)\") matches)\ndocument documentElement classList[isDark \"add\" : \"remove\"](\"dark\")\n}, [theme])\nreturn (\n<DropdownMenu>\n<DropdownMenuTrigger asChild>\n<Button variant=\"outline\" size=\"icon\">\n<Sun className=\"h-[1 2rem] w-[1 2rem] scale-100 rotate-0 transition-all dark:scale-0 dark:-rotate-90\" />\n<Moon className=\"absolute h-[1 2rem] w-[1 2rem] scale-0 rotate-90 transition-all dark:scale-100 dark:rotate-0\" />\n<span className=\"sr-only\">Toggle theme</span>\n</Button>\n</DropdownMenuTrigger>\n<DropdownMenuContent align=\"end\">\n<DropdownMenuItem onClick={() => setThemeState(\"theme-light\")}>\nLight\n</DropdownMenuItem>\n<DropdownMenuItem onClick={() => setThemeState(\"dark\")}>\nDark\n</DropdownMenuItem>\n<DropdownMenuItem onClick={() => setThemeState(\"system\")}>\nSystem\n</DropdownMenuItem>\n</DropdownMenuContent>\n</DropdownMenu>\n)\n}\nDisplay the mode toggle\nPlace a mode toggle on your site to toggle between light and dark mode src/pages/index astroCopy---\nimport ' /styles/globals css'\nimport { ModeToggle } from '@/components/ModeToggle';\n---\n<",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 377629,
      "relative_path": "documentation\\shadcn\\_docs_dark-mode_astro.html",
      "source_type": "documentation"
    },
    "token_count": 487,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "87e7abeb33b1eb168872daa5eead1c2d",
    "source_file": "corpus\\documentation\\shadcn\\_docs_dark-mode_astro.html",
    "source_type": "documentation",
    "title": "Astro - shadcn/ui",
    "content": "dark:scale-0 dark:-rotate-90\" /> <Moon className=\"absolute h-[1 2rem] w-[1 2rem] scale-0 rotate-90 transition-all dark:scale-100 dark:rotate-0\" /> <span className=\"sr-only\">Toggle theme</span> </Button> </DropdownMenuTrigger> <DropdownMenuContent align=\"end\"> <DropdownMenuItem onClick={() => setThemeState(\"theme-light\")}> Light </DropdownMenuItem> <DropdownMenuItem onClick={() => setThemeState(\"dark\")}> Dark </DropdownMenuItem> <DropdownMenuItem onClick={() => setThemeState(\"system\")}> System </DropdownMenuItem> </DropdownMenuContent> </DropdownMenu> ) } Display the mode toggle Place a mode toggle on your site to toggle between light and dark mode src/pages/index astroCopy--- import ' /styles/globals css' import { ModeToggle } from '@/components/ModeToggle'; --- <-- Inline script -->\n<html lang=\"en\">\n<body>\n<h1>Astro</h1>\n<ModeToggle client:load />\n</body>\n</html> ViteRemix On This PageCreate an inline theme scriptAdd a mode toggleDisplay the mode toggleDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 377629,
      "relative_path": "documentation\\shadcn\\_docs_dark-mode_astro.html",
      "source_type": "documentation"
    },
    "token_count": 303,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "bce860967053426874c1ea3ce2432046",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_typography.html",
    "source_type": "documentation",
    "title": "Typography - shadcn/ui",
    "content": "Typography - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonTypographyCopy PagePreviousNextStyles for headings, paragraphs, lists etcWe do not ship any typography styles by default This page is an example of how you can use utility classes to style your text Taxing Laughter: The Joke Tax ChroniclesOnce upon a time, in a far-off land, there was a very lazy king who spent all day lounging on his throne One day, his advisors came to him with a problem: the kingdom was running out of money The King's PlanThe king thought long and hard, and finally came up with a brilliant plan: he would tax the jokes in the kingdom \"After all,\" he said, \"everyone enjoys a good joke, so it's only fair that they should pay for the privilege \"The Joke TaxThe king's subjects were not amused They grumbled and complained, but the king was firm:1st level of puns: 5 gold coins2nd level of jokes: 10 gold coins3rd level of one-liners : 20 gold coinsAs a result, people stopped telling jokes, and the kingdom fell into a gloom But there was one person who refused to let the king's foolishness get him down: a court jester named Jokester Jokester's RevoltJokester began sneaking into the castle in the middle of the night and leaving jokes all over the place: under the king's pillow, in his soup, even in the royal toilet The king was furious, but he couldn't seem to stop Jokester",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 545705,
      "relative_path": "documentation\\shadcn\\_docs_components_typography.html",
      "source_type": "documentation"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 10
  },
  {
    "id": "128f27f096947743c64ef314e40801b7",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_typography.html",
    "source_type": "documentation",
    "title": "Typography - shadcn/ui",
    "content": "a result, people stopped telling jokes, and the kingdom fell into a gloom But there was one person who refused to let the king's foolishness get him down: a court jester named Jokester Jokester's RevoltJokester began sneaking into the castle in the middle of the night and leaving jokes all over the place: under the king's pillow, in his soup, even in the royal toilet The king was furious, but he couldn't seem to stop JokesterAnd then, one day, the people of the kingdom discovered that the jokes left by Jokester were so funny that they couldn't help but laugh And once they started laughing, they couldn't stop The People's RebellionThe people of the kingdom, feeling uplifted by the laughter, started to tell jokes and puns again, and soon the entire kingdom was in on the joke King's TreasuryPeople's happinessEmptyOverflowingModestSatisfiedFullEcstaticThe king, seeing how much happier his subjects were, realized the error of his ways and repealed the joke tax Jokester was declared a hero, and the kingdom lived happily ever after The moral of the story is: never underestimate the power of a good laugh and always be careful of bad ideas Copyexport function TypographyDemo() {\nreturn (\n<div>\n<h1 className=\"scroll-m-20 text-4xl font-extrabold tracking-tight text-balance\">\nTaxing Laughter: The Joke Tax Chronicles\n</h1>\n<p className=\"text-muted-foreground text-xl leading-7 [&:not(:first-child)]:mt-6\">\nOnce upon a time, in a far-off land, there was a very lazy king who\nspent all day lounging on his throne One day, his advisors came to him\nwith a problem: the kingdom was running out of money </p>\n<h2 className=\"mt-10 scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight transition-colors first:mt-0\">\nThe King&apos;s Plan\n</h2>\n<p className=\"leading-7 [&:not(:first-child)]:mt-6\">\nThe king thought long and hard, and finally came up with{\" \"}\n<a\nhref=\"#\"\nclassName=\"text-primary font-medium underline underline-offset-4\"\n>\na brilliant plan\n</a>\n: he would tax the jokes in the kingdom",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 545705,
      "relative_path": "documentation\\shadcn\\_docs_components_typography.html",
      "source_type": "documentation"
    },
    "token_count": 486,
    "chunk_index": 1,
    "total_chunks": 10
  },
  {
    "id": "f24a2494ac3ccf49d7694005794ca463",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_typography.html",
    "source_type": "documentation",
    "title": "Typography - shadcn/ui",
    "content": "king who spent all day lounging on his throne One day, his advisors came to him with a problem: the kingdom was running out of money </p> <h2 className=\"mt-10 scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight transition-colors first:mt-0\"> The King&apos;s Plan </h2> <p className=\"leading-7 [&:not(:first-child)]:mt-6\"> The king thought long and hard, and finally came up with{\" \"} <a href=\"#\" className=\"text-primary font-medium underline underline-offset-4\" > a brilliant plan </a> : he would tax the jokes in the kingdom</p>\n<blockquote className=\"mt-6 border-l-2 pl-6 italic\">\n&quot;After all,&quot; he said, &quot;everyone enjoys a good joke, so\nit&apos;s only fair that they should pay for the privilege &quot;\n</blockquote>\n<h3 className=\"mt-8 scroll-m-20 text-2xl font-semibold tracking-tight\">\nThe Joke Tax\n</h3>\n<p className=\"leading-7 [&:not(:first-child)]:mt-6\">\nThe king&apos;s subjects were not amused They grumbled and complained,\nbut the king was firm:\n</p>\n<ul className=\"my-6 ml-6 list-disc [&>li]:mt-2\">\n<li>1st level of puns: 5 gold coins</li>\n<li>2nd level of jokes: 10 gold coins</li>\n<li>3rd level of one-liners : 20 gold coins</li>\n</ul>\n<p className=\"leading-7 [&:not(:first-child)]:mt-6\">\nAs a result, people stopped telling jokes, and the kingdom fell into a\ngloom But there was one person who refused to let the king&apos;s\nfoolishness get him down: a court jester named Jokester",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 545705,
      "relative_path": "documentation\\shadcn\\_docs_components_typography.html",
      "source_type": "documentation"
    },
    "token_count": 406,
    "chunk_index": 2,
    "total_chunks": 10
  },
  {
    "id": "03c0e399f96dc5b3e0fb223c9ccc6221",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_typography.html",
    "source_type": "documentation",
    "title": "Typography - shadcn/ui",
    "content": "amused They grumbled and complained, but the king was firm: </p> <ul className=\"my-6 ml-6 list-disc [&>li]:mt-2\"> <li>1st level of puns: 5 gold coins</li> <li>2nd level of jokes: 10 gold coins</li> <li>3rd level of one-liners : 20 gold coins</li> </ul> <p className=\"leading-7 [&:not(:first-child)]:mt-6\"> As a result, people stopped telling jokes, and the kingdom fell into a gloom But there was one person who refused to let the king&apos;s foolishness get him down: a court jester named Jokester</p>\n<h3 className=\"mt-8 scroll-m-20 text-2xl font-semibold tracking-tight\">\nJokester&apos;s Revolt\n</h3>\n<p className=\"leading-7 [&:not(:first-child)]:mt-6\">\nJokester began sneaking into the castle in the middle of the night and\nleaving jokes all over the place: under the king&apos;s pillow, in his\nsoup, even in the royal toilet The king was furious, but he\ncouldn&apos;t seem to stop Jokester </p>\n<p className=\"leading-7 [&:not(:first-child)]:mt-6\">\nAnd then, one day, the people of the kingdom discovered that the jokes\nleft by Jokester were so funny that they couldn&apos;t help but laugh And once they started laughing, they couldn&apos;t stop </p>\n<h3 className=\"mt-8 scroll-m-20 text-2xl font-semibold tracking-tight\">\nThe People&apos;s Rebellion\n</h3>\n<p className=\"leading-7 [&:not(:first-child)]:mt-6\">\nThe people of the kingdom, feeling uplifted by the laughter, started to\ntell jokes and puns again, and soon the entire kingdom was in on the\njoke",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 545705,
      "relative_path": "documentation\\shadcn\\_docs_components_typography.html",
      "source_type": "documentation"
    },
    "token_count": 418,
    "chunk_index": 3,
    "total_chunks": 10
  },
  {
    "id": "4c5d71576fd45af0e47536447573f133",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_typography.html",
    "source_type": "documentation",
    "title": "Typography - shadcn/ui",
    "content": "className=\"leading-7 [&:not(:first-child)]:mt-6\"> And then, one day, the people of the kingdom discovered that the jokes left by Jokester were so funny that they couldn&apos;t help but laugh And once they started laughing, they couldn&apos;t stop </p> <h3 className=\"mt-8 scroll-m-20 text-2xl font-semibold tracking-tight\"> The People&apos;s Rebellion </h3> <p className=\"leading-7 [&:not(:first-child)]:mt-6\"> The people of the kingdom, feeling uplifted by the laughter, started to tell jokes and puns again, and soon the entire kingdom was in on the joke</p>\n<div className=\"my-6 w-full overflow-y-auto\">\n<table className=\"w-full\">\n<thead>\n<tr className=\"even:bg-muted m-0 border-t p-0\">\n<th className=\"border px-4 py-2 text-left font-bold [&[align=center]]:text-center [&[align=right]]:text-right\">\nKing&apos;s Treasury\n</th>\n<th className=\"border px-4 py-2 text-left font-bold [&[align=center]]:text-center [&[align=right]]:text-right\">\nPeople&apos;s happiness\n</th>\n</tr>\n</thead>\n<tbody>\n<tr className=\"even:bg-muted m-0 border-t p-0\">\n<td className=\"border px-4 py-2 text-left [&[align=center]]:text-center [&[align=right]]:text-right\">\nEmpty\n</td>\n<td className=\"border px-4 py-2 text-left [&[align=center]]:text-center [&[align=right]]:text-right\">\nOverflowing\n</td>\n</tr>\n<tr className=\"even:bg-muted m-0 border-t p-0\">\n<td className=\"border px-4 py-2 text-left [&[align=center]]:text-center [&[align=right]]:text-right\">\nModest\n</td>\n<td className=\"border px-4 py-2 text-left [&[align=center]]:text-center [&[align=right]]:text-right\">\nSatisfied\n</td>\n</tr>\n<tr className=\"even:bg-muted m-0 border-t p-0\">\n<td className=\"border px-4 py-2 text-left [&[align=center]]:text-center [&[align=right]]:text-right\">\nFull\n</td>\n<td className=\"border px-4 py-2 text-left [&[align=center]]:text-center [&[align=right]]:text-right\">\nEcstatic\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p className=\"leading-7 [&:not(:first-child)]:mt-6\">\nThe king, seeing how much happier his subjects were, realized the error\nof his ways and repealed the joke tax",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 545705,
      "relative_path": "documentation\\shadcn\\_docs_components_typography.html",
      "source_type": "documentation"
    },
    "token_count": 588,
    "chunk_index": 4,
    "total_chunks": 10
  },
  {
    "id": "61a681dd262ca96655c2c59f91194fdf",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_typography.html",
    "source_type": "documentation",
    "title": "Typography - shadcn/ui",
    "content": "</td> </tr> <tr className=\"even:bg-muted m-0 border-t p-0\"> <td className=\"border px-4 py-2 text-left [&[align=center]]:text-center [&[align=right]]:text-right\"> Modest </td> <td className=\"border px-4 py-2 text-left [&[align=center]]:text-center [&[align=right]]:text-right\"> Satisfied </td> </tr> <tr className=\"even:bg-muted m-0 border-t p-0\"> <td className=\"border px-4 py-2 text-left [&[align=center]]:text-center [&[align=right]]:text-right\"> Full </td> <td className=\"border px-4 py-2 text-left [&[align=center]]:text-center [&[align=right]]:text-right\"> Ecstatic </td> </tr> </tbody> </table> </div> <p className=\"leading-7 [&:not(:first-child)]:mt-6\"> The king, seeing how much happier his subjects were, realized the error of his ways and repealed the joke taxJokester was declared a hero, and\nthe kingdom lived happily ever after </p>\n<p className=\"leading-7 [&:not(:first-child)]:mt-6\">\nThe moral of the story is: never underestimate the power of a good laugh\nand always be careful of bad ideas",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 545705,
      "relative_path": "documentation\\shadcn\\_docs_components_typography.html",
      "source_type": "documentation"
    },
    "token_count": 297,
    "chunk_index": 5,
    "total_chunks": 10
  },
  {
    "id": "7faa71c3d8ef86414219a95b0fdd639b",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_typography.html",
    "source_type": "documentation",
    "title": "Typography - shadcn/ui",
    "content": "[&[align=center]]:text-center [&[align=right]]:text-right\"> Full </td> <td className=\"border px-4 py-2 text-left [&[align=center]]:text-center [&[align=right]]:text-right\"> Ecstatic </td> </tr> </tbody> </table> </div> <p className=\"leading-7 [&:not(:first-child)]:mt-6\"> The king, seeing how much happier his subjects were, realized the error of his ways and repealed the joke taxJokester was declared a hero, and the kingdom lived happily ever after </p> <p className=\"leading-7 [&:not(:first-child)]:mt-6\"> The moral of the story is: never underestimate the power of a good laugh and always be careful of bad ideas</p>\n</div>\n)\n}\nh1\nPreviewCodeTaxing Laughter: The Joke Tax ChroniclesCopyexport function TypographyH1() {\nreturn (\n<h1 className=\"scroll-m-20 text-center text-4xl font-extrabold tracking-tight text-balance\">\nTaxing Laughter: The Joke Tax Chronicles\n</h1>\n)\n}\nh2\nPreviewCodeThe People of the KingdomCopyexport function TypographyH2() {\nreturn (\n<h2 className=\"scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight first:mt-0\">\nThe People of the Kingdom\n</h2>\n)\n}\nh3\nPreviewCodeThe Joke TaxCopyexport function TypographyH3() {\nreturn (\n<h3 className=\"scroll-m-20 text-2xl font-semibold tracking-tight\">\nThe Joke Tax\n</h3>\n)\n}\nh4\nPreviewCodePeople stopped telling jokesCopyexport function TypographyH4() {\nreturn (\n<h4 className=\"scroll-m-20 text-xl font-semibold tracking-tight\">\nPeople stopped telling jokes\n</h4>\n)\n}\np\nPreviewCodeThe king, seeing how much happier his subjects were, realized the error of his ways and repealed the joke tax Copyexport function TypographyP() {\nreturn (\n<p className=\"leading-7 [&:not(:first-child)]:mt-6\">\nThe king, seeing how much happier his subjects were, realized the error of\nhis ways and repealed the joke tax",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 545705,
      "relative_path": "documentation\\shadcn\\_docs_components_typography.html",
      "source_type": "documentation"
    },
    "token_count": 477,
    "chunk_index": 6,
    "total_chunks": 10
  },
  {
    "id": "229765b3682fc923c2ac2338d74bee4c",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_typography.html",
    "source_type": "documentation",
    "title": "Typography - shadcn/ui",
    "content": "Tax </h3> ) } h4 PreviewCodePeople stopped telling jokesCopyexport function TypographyH4() { return ( <h4 className=\"scroll-m-20 text-xl font-semibold tracking-tight\"> People stopped telling jokes </h4> ) } p PreviewCodeThe king, seeing how much happier his subjects were, realized the error of his ways and repealed the joke tax Copyexport function TypographyP() { return ( <p className=\"leading-7 [&:not(:first-child)]:mt-6\"> The king, seeing how much happier his subjects were, realized the error of his ways and repealed the joke tax</p>\n)\n}\nblockquote\nPreviewCode\"After all,\" he said, \"everyone enjoys a good joke, so it's only fair that they should pay for the privilege \"Copyexport function TypographyBlockquote() {\nreturn (\n<blockquote className=\"mt-6 border-l-2 pl-6 italic\">\n&quot;After all,&quot; he said, &quot;everyone enjoys a good joke, so\nit&apos;s only fair that they should pay for the privilege",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 545705,
      "relative_path": "documentation\\shadcn\\_docs_components_typography.html",
      "source_type": "documentation"
    },
    "token_count": 221,
    "chunk_index": 7,
    "total_chunks": 10
  },
  {
    "id": "b7a5552866af2e31d88f09dd9c6ff56b",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_typography.html",
    "source_type": "documentation",
    "title": "Typography - shadcn/ui",
    "content": "className=\"leading-7 [&:not(:first-child)]:mt-6\"> The king, seeing how much happier his subjects were, realized the error of his ways and repealed the joke tax</p> ) } blockquote PreviewCode\"After all,\" he said, \"everyone enjoys a good joke, so it's only fair that they should pay for the privilege \"Copyexport function TypographyBlockquote() { return ( <blockquote className=\"mt-6 border-l-2 pl-6 italic\"> &quot;After all,&quot; he said, &quot;everyone enjoys a good joke, so it&apos;s only fair that they should pay for the privilege&quot;\n</blockquote>\n)\n}\ntable\nPreviewCodeKing's TreasuryPeople's happinessEmptyOverflowingModestSatisfiedFullEcstaticCopyexport function TypographyTable() {\nreturn (\n<div className=\"my-6 w-full overflow-y-auto\">\n<table className=\"w-full\">\n<thead>\n<tr className=\"even:bg-muted m-0 border-t p-0\">\n<th className=\"border px-4 py-2 text-left font-bold [&[align=center]]:text-center [&[align=right]]:text-right\">\nKing's Treasury\n</th>\n<th className=\"border px-4 py-2 text-left font-bold [&[align=center]]:text-center [&[align=right]]:text-right\">\nPeople's happiness\n</th>\n</tr>\n</thead>\n<tbody>\n<tr className=\"even:bg-muted m-0 border-t p-0\">\n<td className=\"border px-4 py-2 text-left [&[align=center]]:text-center [&[align=right]]:text-right\">\nEmpty\n</td>\n<td className=\"border px-4 py-2 text-left [&[align=center]]:text-center [&[align=right]]:text-right\">\nOverflowing\n</td>\n</tr>\n<tr className=\"even:bg-muted m-0 border-t p-0\">\n<td className=\"border px-4 py-2 text-left [&[align=center]]:text-center [&[align=right]]:text-right\">\nModest\n</td>\n<td className=\"border px-4 py-2 text-left [&[align=center]]:text-center [&[align=right]]:text-right\">\nSatisfied\n</td>\n</tr>\n<tr className=\"even:bg-muted m-0 border-t p-0\">\n<td className=\"border px-4 py-2 text-left [&[align=center]]:text-center [&[align=right]]:text-right\">\nFull\n</td>\n<td className=\"border px-4 py-2 text-left [&[align=center]]:text-center [&[align=right]]:text-right\">\nEcstatic\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n)\n}\nlist\nPreviewCode1st level of puns: 5 gold coins2nd level of jokes: 10 gold coins3rd level of one-liners : 20 gold coinsCopyexport function TypographyList() {\nreturn (\n<ul className=\"my-6 ml-6 list-disc [&>li]:mt-2\">\n<li>1st level of puns: 5 gold coins</li>\n<li>2nd level of jokes: 10 gold coins</li>\n<li>3rd level of one-liners : 20 gold coins</li>\n</ul>\n)\n}\nInline code\nPreviewCode@radix-ui/react-alert-dialogCopyexport function TypographyInlineCode() {\nreturn (\n<code className=\"bg-muted relative rounded px-[0",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 545705,
      "relative_path": "documentation\\shadcn\\_docs_components_typography.html",
      "source_type": "documentation"
    },
    "token_count": 720,
    "chunk_index": 8,
    "total_chunks": 10
  },
  {
    "id": "f7ea20e6b23b8403924d3296a6662256",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_typography.html",
    "source_type": "documentation",
    "title": "Typography - shadcn/ui",
    "content": "</td> </tr> </tbody> </table> </div> ) } list PreviewCode1st level of puns: 5 gold coins2nd level of jokes: 10 gold coins3rd level of one-liners : 20 gold coinsCopyexport function TypographyList() { return ( <ul className=\"my-6 ml-6 list-disc [&>li]:mt-2\"> <li>1st level of puns: 5 gold coins</li> <li>2nd level of jokes: 10 gold coins</li> <li>3rd level of one-liners : 20 gold coins</li> </ul> ) } Inline code PreviewCode@radix-ui/react-alert-dialogCopyexport function TypographyInlineCode() { return ( <code className=\"bg-muted relative rounded px-[03rem] py-[0 2rem] font-mono text-sm font-semibold\">\n@radix-ui/react-alert-dialog\n</code>\n)\n}\nLead\nPreviewCodeA modal dialog that interrupts the user with important content and expects a response Copyexport function TypographyLead() {\nreturn (\n<p className=\"text-muted-foreground text-xl\">\nA modal dialog that interrupts the user with important content and expects\na response </p>\n)\n}\nLarge\nPreviewCodeAre you absolutely sure Copyexport function TypographyLarge() {\nreturn <div className=\"text-lg font-semibold\">Are you absolutely sure </div>\n}\nSmall\nPreviewCodeEmail addressCopyexport function TypographySmall() {\nreturn (\n<small className=\"text-sm leading-none font-medium\">Email address</small>\n)\n}\nMuted\nPreviewCodeEnter your email address Copyexport function TypographyMuted() {\nreturn (\n<p className=\"text-muted-foreground text-sm\">Enter your email address </p>\n)\n}\nTooltipInstallation On This Pageh1h2h3h4pblockquotetablelistInline codeLeadLargeSmallMutedDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 545705,
      "relative_path": "documentation\\shadcn\\_docs_components_typography.html",
      "source_type": "documentation"
    },
    "token_count": 446,
    "chunk_index": 9,
    "total_chunks": 10
  },
  {
    "id": "a3117fd02bd6061116e3e265351d1e08",
    "source_file": "corpus\\documentation\\shadcn\\_docs_figma.html",
    "source_type": "documentation",
    "title": "Figma - shadcn/ui",
    "content": "Figma - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation...Search...⌘K92.8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents.jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext.jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext.jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry.jsonregistry-item.jsonFigmaCopy PagePreviousNextEvery component recreated in Figma. With customizable props, typography and icons.Note: The Figma files are contributed by the community. If you have any\nquestions or feedback, please reach out to the Figma file maintainers.\nPaid\nshadcn/ui kit by  Matt Wierzbicki - A premium, always up-to-date UI kit for Figma - shadcn/ui compatible and optimized for smooth design-to-dev handoff.\nFree\nshadcn/ui design system by Pietro Schirano - A design companion for shadcn/ui. Each component was painstakingly crafted to perfectly match the code implementation.\nObra shadcn/ui by Obra Studio - Carefully crafted kit designed in the philosophy of shadcn, tracks v4, MIT licensed\nBlocksChangelog On This PagePaidFreeDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more.Vercel provides tools and infrastructure to deploy apps and features at scale.Deploy NowDeploy to VercelBuilt by shadcn at Vercel. The source code is available on GitHub.",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 280030,
      "relative_path": "documentation\\shadcn\\_docs_figma.html",
      "source_type": "documentation"
    },
    "token_count": 418,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7343d2e3ed76f1c72adcf782e7a8b161",
    "source_file": "corpus\\documentation\\shadcn\\_docs_installation.html",
    "source_type": "documentation",
    "title": "Installation - shadcn/ui",
    "content": "Installation - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation...Search...⌘K92.8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents.jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext.jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext.jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry.jsonregistry-item.jsonInstallationCopy PagePreviousNextHow to install dependencies and structure your app.Pick Your Framework\nStart by selecting your framework of choice. Then follow the instructions to install the dependencies and structure your app. shadcn/ui is built to work with all React frameworks.\nNext.jsNext.jsViteViteLaravelReact RouterAstroAstroTanStack StartTanStack RouterReactManual Introductioncomponents.json On This PagePick Your FrameworkDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more.Vercel provides tools and infrastructure to deploy apps and features at scale.Deploy NowDeploy to VercelBuilt by shadcn at Vercel. The source code is available on GitHub.",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 337526,
      "relative_path": "documentation\\shadcn\\_docs_installation.html",
      "source_type": "documentation"
    },
    "token_count": 330,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "483e75c407297829c9bd4a1d46e8ca46",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_sidebar.html",
    "source_type": "documentation",
    "title": "Sidebar - shadcn/ui",
    "content": "Sidebar - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonSidebarCopy PagePreviousNextA composable, themeable and customizable sidebar component A sidebar that collapses to icons Sidebars are one of the most complex components to build They are central\nto any application and often contain a lot of moving parts I don't like building sidebars So I built 30+ of them All kinds of\nconfigurations Then I extracted the core components into sidebar tsx We now have a solid foundation to build on top of Composable Themeable Customizable Browse the Blocks Library Installation\nCLIManualRun the following command to install sidebar tsxpnpmnpmyarnbunpnpm dlx shadcn@latest add sidebarCopyAdd the following colors to your CSS fileThe command above should install the colors for you If not, copy and paste the following in your CSS file We'll go over the colors later in the theming section app/globals cssCopy@layer base {\n:root {\n--sidebar: oklch(0 985 0 0);\n--sidebar-foreground: oklch(0 145 0 0);\n--sidebar-primary: oklch(0 205 0 0);\n--sidebar-primary-foreground: oklch(0 985 0 0);\n--sidebar-accent: oklch(0 97 0 0);\n--sidebar-accent-foreground: oklch(0 205 0 0);\n--sidebar-border: oklch(0 922 0 0);\n--sidebar-ring: oklch(0 708 0 0);\n} dark {\n--sidebar: oklch(0",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1502398,
      "relative_path": "documentation\\shadcn\\_docs_components_sidebar.html",
      "source_type": "documentation"
    },
    "token_count": 508,
    "chunk_index": 0,
    "total_chunks": 17
  },
  {
    "id": "db0000350aac637e797bd5aa3c07c5bd",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_sidebar.html",
    "source_type": "documentation",
    "title": "Sidebar - shadcn/ui",
    "content": "the colors for you If not, copy and paste the following in your CSS file We'll go over the colors later in the theming section app/globals cssCopy@layer base { :root { --sidebar: oklch(0 985 0 0); --sidebar-foreground: oklch(0 145 0 0); --sidebar-primary: oklch(0 205 0 0); --sidebar-primary-foreground: oklch(0 985 0 0); --sidebar-accent: oklch(0 97 0 0); --sidebar-accent-foreground: oklch(0 205 0 0); --sidebar-border: oklch(0 922 0 0); --sidebar-ring: oklch(0 708 0 0); } dark { --sidebar: oklch(0205 0 0);\n--sidebar-foreground: oklch(0 985 0 0);\n--sidebar-primary: oklch(0 488 0 243 264 376);\n--sidebar-primary-foreground: oklch(0 985 0 0);\n--sidebar-accent: oklch(0 269 0 0);\n--sidebar-accent-foreground: oklch(0 985 0 0);\n--sidebar-border: oklch(1 0 0 / 10%);\n--sidebar-ring: oklch(0 439 0 0);\n}\n}\nStructure\nA Sidebar component is composed of the following parts:\nSidebarProvider - Handles collapsible state Sidebar - The sidebar container SidebarHeader and SidebarFooter - Sticky at the top and bottom of the sidebar SidebarContent - Scrollable content SidebarGroup - Section within the SidebarContent SidebarTrigger - Trigger for the Sidebar Usage\napp/layout tsxCopyimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\"\nimport { AppSidebar } from \"@/components/app-sidebar\"\nexport default function Layout({ children }: { children: React ReactNode }) {\nreturn (\n<SidebarProvider>\n<AppSidebar />\n<main>\n<SidebarTrigger />\n{children}\n</main>\n</SidebarProvider>\n)\n}\ncomponents/app-sidebar",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1502398,
      "relative_path": "documentation\\shadcn\\_docs_components_sidebar.html",
      "source_type": "documentation"
    },
    "token_count": 454,
    "chunk_index": 1,
    "total_chunks": 17
  },
  {
    "id": "dda4a2fbdba3790a6864585ea57c8758",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_sidebar.html",
    "source_type": "documentation",
    "title": "Sidebar - shadcn/ui",
    "content": "state Sidebar - The sidebar container SidebarHeader and SidebarFooter - Sticky at the top and bottom of the sidebar SidebarContent - Scrollable content SidebarGroup - Section within the SidebarContent SidebarTrigger - Trigger for the Sidebar Usage app/layout tsxCopyimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\" import { AppSidebar } from \"@/components/app-sidebar\" export default function Layout({ children }: { children: React ReactNode }) { return ( <SidebarProvider> <AppSidebar /> <main> <SidebarTrigger /> {children} </main> </SidebarProvider> ) } components/app-sidebartsxCopyimport {\nSidebar,\nSidebarContent,\nSidebarFooter,\nSidebarGroup,\nSidebarHeader,\n} from \"@/components/ui/sidebar\"\nexport function AppSidebar() {\nreturn (\n<Sidebar>\n<SidebarHeader />\n<SidebarContent>\n<SidebarGroup />\n<SidebarGroup />\n</SidebarContent>\n<SidebarFooter />\n</Sidebar>\n)\n}\nYour First Sidebar\nLet's start with the most basic sidebar A collapsible sidebar with a menu Add a SidebarProvider and SidebarTrigger at the root of your application app/layout tsxCopyimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\"\nimport { AppSidebar } from \"@/components/app-sidebar\"\nexport default function Layout({ children }: { children: React ReactNode }) {\nreturn (\n<SidebarProvider>\n<AppSidebar />\n<main>\n<SidebarTrigger />\n{children}\n</main>\n</SidebarProvider>\n)\n}Create a new sidebar component at components/app-sidebar tsx components/app-sidebar tsxCopyimport { Sidebar, SidebarContent } from \"@/components/ui/sidebar\"\nexport function AppSidebar() {\nreturn (\n<Sidebar>\n<SidebarContent />\n</Sidebar>\n)\n}Now, let's add a SidebarMenu to the sidebar We'll use the SidebarMenu component in a SidebarGroup components/app-sidebar tsxCopyimport { Calendar, Home, Inbox, Search, Settings } from \"lucide-react\"\nimport {\nSidebar,\nSidebarContent,\nSidebarGroup,\nSidebarGroupContent,\nSidebarGroupLabel,\nSidebarMenu,\nSidebarMenuButton,\nSidebarMenuItem,\n} from \"@/components/ui/sidebar\"\n// Menu items",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1502398,
      "relative_path": "documentation\\shadcn\\_docs_components_sidebar.html",
      "source_type": "documentation"
    },
    "token_count": 426,
    "chunk_index": 2,
    "total_chunks": 17
  },
  {
    "id": "8533b2df55ec85aa92c03cc90b4b8095",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_sidebar.html",
    "source_type": "documentation",
    "title": "Sidebar - shadcn/ui",
    "content": "<SidebarTrigger /> {children} </main> </SidebarProvider> ) }Create a new sidebar component at components/app-sidebar tsx components/app-sidebar tsxCopyimport { Sidebar, SidebarContent } from \"@/components/ui/sidebar\" export function AppSidebar() { return ( <Sidebar> <SidebarContent /> </Sidebar> ) }Now, let's add a SidebarMenu to the sidebar We'll use the SidebarMenu component in a SidebarGroup components/app-sidebar tsxCopyimport { Calendar, Home, Inbox, Search, Settings } from \"lucide-react\" import { Sidebar, SidebarContent, SidebarGroup, SidebarGroupContent, SidebarGroupLabel, SidebarMenu, SidebarMenuButton, SidebarMenuItem, } from \"@/components/ui/sidebar\" // Menu itemsconst items = [\n{\ntitle: \"Home\",\nurl: \"#\",\nicon: Home,\n},\n{\ntitle: \"Inbox\",\nurl: \"#\",\nicon: Inbox,\n},\n{\ntitle: \"Calendar\",\nurl: \"#\",\nicon: Calendar,\n},\n{\ntitle: \"Search\",\nurl: \"#\",\nicon: Search,\n},\n{\ntitle: \"Settings\",\nurl: \"#\",\nicon: Settings,\n},\n]\nexport function AppSidebar() {\nreturn (\n<Sidebar>\n<SidebarContent>\n<SidebarGroup>\n<SidebarGroupLabel>Application</SidebarGroupLabel>\n<SidebarGroupContent>\n<SidebarMenu>\n{items map((item) => (\n<SidebarMenuItem key={item title}>\n<SidebarMenuButton asChild>\n<a href={item url}>\n<item icon />\n<span>{item title}</span>\n</a>\n</SidebarMenuButton>\n</SidebarMenuItem>\n))}\n</SidebarMenu>\n</SidebarGroupContent>\n</SidebarGroup>\n</SidebarContent>\n</Sidebar>\n)\n}You've created your first sidebar You should see something like this:Your first sidebar Components\nThe components in sidebar tsx are built to be composable i e you build your sidebar by putting the provided components together They also compose well with other shadcn/ui components such as DropdownMenu, Collapsible or Dialog etc If you need to change the code in sidebar tsx, you are encouraged to do so The code is yours Use sidebar tsx as a starting point and build your own In the next sections, we'll go over each component and how to use them SidebarProvider\nThe SidebarProvider component is used to provide the sidebar context to the Sidebar component You should always wrap your application in a SidebarProvider component Props\nNameTypeDescriptiondefaultOpenbooleanDefault open state of the sidebar",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1502398,
      "relative_path": "documentation\\shadcn\\_docs_components_sidebar.html",
      "source_type": "documentation"
    },
    "token_count": 502,
    "chunk_index": 3,
    "total_chunks": 17
  },
  {
    "id": "0aed7cd3e74240dba0845ce5b918efb4",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_sidebar.html",
    "source_type": "documentation",
    "title": "Sidebar - shadcn/ui",
    "content": "you need to change the code in sidebar tsx, you are encouraged to do so The code is yours Use sidebar tsx as a starting point and build your own In the next sections, we'll go over each component and how to use them SidebarProvider The SidebarProvider component is used to provide the sidebar context to the Sidebar component You should always wrap your application in a SidebarProvider component Props NameTypeDescriptiondefaultOpenbooleanDefault open state of the sidebaropenbooleanOpen state of the sidebar (controlled) onOpenChange(open: boolean) => voidSets open state of the sidebar (controlled) Width\nIf you have a single sidebar in your application, you can use the SIDEBAR_WIDTH and SIDEBAR_WIDTH_MOBILE variables in sidebar tsx to set the width of the sidebar components/ui/sidebar tsxCopyconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nFor multiple sidebars in your application, you can use the style prop to set the width of the sidebar To set the width of the sidebar, you can use the --sidebar-width and --sidebar-width-mobile CSS variables in the style prop components/ui/sidebar tsxCopy<SidebarProvider\nstyle={{\n\"--sidebar-width\": \"20rem\",\n\"--sidebar-width-mobile\": \"20rem\",\n}}\n>\n<Sidebar />\n</SidebarProvider>\nThis will handle the width of the sidebar but also the layout spacing Keyboard Shortcut\nThe SIDEBAR_KEYBOARD_SHORTCUT variable is used to set the keyboard shortcut used to open and close the sidebar To trigger the sidebar, you use the cmd+b keyboard shortcut on Mac and ctrl+b on Windows You can change the keyboard shortcut by updating the SIDEBAR_KEYBOARD_SHORTCUT variable components/ui/sidebar tsxCopyconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\nPersisted State\nThe SidebarProvider supports persisting the sidebar state across page reloads and server-side rendering It uses cookies to store the current state of the sidebar When the sidebar state changes, a default cookie named sidebar_state is set with the current open/closed state This cookie is then read on subsequent page loads to restore the sidebar state To persist sidebar state in Next js, set up your SidebarProvider in app/layout tsx like this:\napp/layout tsxCopyimport { cookies } from \"next/headers\"\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\"\nimport { AppSidebar } from \"@/components/app-sidebar\"\nexport async function Layout({ children }: { children: React",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1502398,
      "relative_path": "documentation\\shadcn\\_docs_components_sidebar.html",
      "source_type": "documentation"
    },
    "token_count": 500,
    "chunk_index": 4,
    "total_chunks": 17
  },
  {
    "id": "873c40d53c6ac2e6e249d5fdb0528e73",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_sidebar.html",
    "source_type": "documentation",
    "title": "Sidebar - shadcn/ui",
    "content": "When the sidebar state changes, a default cookie named sidebar_state is set with the current open/closed state This cookie is then read on subsequent page loads to restore the sidebar state To persist sidebar state in Next js, set up your SidebarProvider in app/layout tsx like this: app/layout tsxCopyimport { cookies } from \"next/headers\" import { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\" import { AppSidebar } from \"@/components/app-sidebar\" export async function Layout({ children }: { children: ReactReactNode }) {\nconst cookieStore = await cookies()\nconst defaultOpen = cookieStore get(\"sidebar_state\") value === \"true\"\nreturn (\n<SidebarProvider defaultOpen={defaultOpen}>\n<AppSidebar />\n<main>\n<SidebarTrigger />\n{children}\n</main>\n</SidebarProvider>\n)\n}\nYou can change the name of the cookie by updating the SIDEBAR_COOKIE_NAME variable in sidebar tsx components/ui/sidebar tsxCopyconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nSidebar\nThe main Sidebar component used to render a collapsible sidebar Copyimport { Sidebar } from \"@/components/ui/sidebar\"\nexport function AppSidebar() {\nreturn <Sidebar />\n}\nProps\nPropertyTypeDescriptionsideleft or rightThe side of the sidebar variantsidebar, floating, or insetThe variant of the sidebar collapsibleoffcanvas, icon, or noneCollapsible state of the sidebar side\nUse the side prop to change the side of the sidebar Available options are left and right Copyimport { Sidebar } from \"@/components/ui/sidebar\"\nexport function AppSidebar() {\nreturn <Sidebar side=\"left | right\" />\n}\nvariant\nUse the variant prop to change the variant of the sidebar Available options are sidebar, floating and inset Copyimport { Sidebar } from \"@/components/ui/sidebar\"\nexport function AppSidebar() {\nreturn <Sidebar variant=\"sidebar | floating | inset\" />\n}\nNote: If you use the inset variant, remember to wrap your main content\nin a SidebarInset component Copy<SidebarProvider>\n<Sidebar variant=\"inset\" />\n<SidebarInset>\n<main>{children}</main>\n</SidebarInset>\n</SidebarProvider>\ncollapsible\nUse the collapsible prop to make the sidebar collapsible Available options are offcanvas, icon and none Copyimport { Sidebar } from \"@/components/ui/sidebar\"\nexport function AppSidebar() {\nreturn <Sidebar collapsible=\"offcanvas | icon | none\" />\n}\nPropDescriptionoffcanvasA collapsible sidebar that slides in from the left or right",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1502398,
      "relative_path": "documentation\\shadcn\\_docs_components_sidebar.html",
      "source_type": "documentation"
    },
    "token_count": 501,
    "chunk_index": 5,
    "total_chunks": 17
  },
  {
    "id": "034f1ff0ba6c7b105bb5742409638f4b",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_sidebar.html",
    "source_type": "documentation",
    "title": "Sidebar - shadcn/ui",
    "content": "| inset\" /> } Note: If you use the inset variant, remember to wrap your main content in a SidebarInset component Copy<SidebarProvider> <Sidebar variant=\"inset\" /> <SidebarInset> <main>{children}</main> </SidebarInset> </SidebarProvider> collapsible Use the collapsible prop to make the sidebar collapsible Available options are offcanvas, icon and none Copyimport { Sidebar } from \"@/components/ui/sidebar\" export function AppSidebar() { return <Sidebar collapsible=\"offcanvas | icon | none\" /> } PropDescriptionoffcanvasA collapsible sidebar that slides in from the left or righticonA sidebar that collapses to icons noneA non-collapsible sidebar useSidebar\nThe useSidebar hook is used to control the sidebar Copyimport { useSidebar } from \"@/components/ui/sidebar\"\nexport function AppSidebar() {\nconst {\nstate,\nopen,\nsetOpen,\nopenMobile,\nsetOpenMobile,\nisMobile,\ntoggleSidebar,\n} = useSidebar()\n}\nPropertyTypeDescriptionstateexpanded or collapsedThe current state of the sidebar openbooleanWhether the sidebar is open setOpen(open: boolean) => voidSets the open state of the sidebar openMobilebooleanWhether the sidebar is open on mobile setOpenMobile(open: boolean) => voidSets the open state of the sidebar on mobile isMobilebooleanWhether the sidebar is on mobile toggleSidebar() => voidToggles the sidebar Desktop and mobile SidebarHeader\nUse the SidebarHeader component to add a sticky header to the sidebar The following example adds a <DropdownMenu> to the SidebarHeader A sidebar header with a dropdown menu components/app-sidebar tsxCopy<Sidebar>\n<SidebarHeader>\n<SidebarMenu>\n<SidebarMenuItem>\n<DropdownMenu>\n<DropdownMenuTrigger asChild>\n<SidebarMenuButton>\nSelect Workspace\n<ChevronDown className=\"ml-auto\" />\n</SidebarMenuButton>\n</DropdownMenuTrigger>\n<DropdownMenuContent className=\"w-[--radix-popper-anchor-width]\">\n<DropdownMenuItem>\n<span>Acme Inc</span>\n</DropdownMenuItem>\n<DropdownMenuItem>\n<span>Acme Corp </span>\n</DropdownMenuItem>\n</DropdownMenuContent>\n</DropdownMenu>\n</SidebarMenuItem>\n</SidebarMenu>\n</SidebarHeader>\n</Sidebar>\nSidebarFooter\nUse the SidebarFooter component to add a sticky footer to the sidebar The following example adds a <DropdownMenu> to the SidebarFooter A sidebar footer with a dropdown menu components/app-sidebar",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1502398,
      "relative_path": "documentation\\shadcn\\_docs_components_sidebar.html",
      "source_type": "documentation"
    },
    "token_count": 490,
    "chunk_index": 6,
    "total_chunks": 17
  },
  {
    "id": "ef56472c31f288f218d9c7a90313f1b8",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_sidebar.html",
    "source_type": "documentation",
    "title": "Sidebar - shadcn/ui",
    "content": "adds a <DropdownMenu> to the SidebarHeader A sidebar header with a dropdown menu components/app-sidebar tsxCopy<Sidebar> <SidebarHeader> <SidebarMenu> <SidebarMenuItem> <DropdownMenu> <DropdownMenuTrigger asChild> <SidebarMenuButton> Select Workspace <ChevronDown className=\"ml-auto\" /> </SidebarMenuButton> </DropdownMenuTrigger> <DropdownMenuContent className=\"w-[--radix-popper-anchor-width]\"> <DropdownMenuItem> <span>Acme Inc</span> </DropdownMenuItem> <DropdownMenuItem> <span>Acme Corp </span> </DropdownMenuItem> </DropdownMenuContent> </DropdownMenu> </SidebarMenuItem> </SidebarMenu> </SidebarHeader> </Sidebar> SidebarFooter Use the SidebarFooter component to add a sticky footer to the sidebar The following example adds a <DropdownMenu> to the SidebarFooter A sidebar footer with a dropdown menu components/app-sidebartsxCopyexport function AppSidebar() {\nreturn (\n<SidebarProvider>\n<Sidebar>\n<SidebarHeader />\n<SidebarContent />\n<SidebarFooter>\n<SidebarMenu>\n<SidebarMenuItem>\n<DropdownMenu>\n<DropdownMenuTrigger asChild>\n<SidebarMenuButton>\n<User2 /> Username\n<ChevronUp className=\"ml-auto\" />\n</SidebarMenuButton>\n</DropdownMenuTrigger>\n<DropdownMenuContent\nside=\"top\"\nclassName=\"w-[--radix-popper-anchor-width]\"\n>\n<DropdownMenuItem>\n<span>Account</span>\n</DropdownMenuItem>\n<DropdownMenuItem>\n<span>Billing</span>\n</DropdownMenuItem>\n<DropdownMenuItem>\n<span>Sign out</span>\n</DropdownMenuItem>\n</DropdownMenuContent>\n</DropdownMenu>\n</SidebarMenuItem>\n</SidebarMenu>\n</SidebarFooter>\n</Sidebar>\n</SidebarProvider>\n)\n}\nSidebarContent\nThe SidebarContent component is used to wrap the content of the sidebar This is where you add your SidebarGroup components It is scrollable Copyimport { Sidebar, SidebarContent } from \"@/components/ui/sidebar\"\nexport function AppSidebar() {\nreturn (\n<Sidebar>\n<SidebarContent>\n<SidebarGroup />\n<SidebarGroup />\n</SidebarContent>\n</Sidebar>\n)\n}\nSidebarGroup\nUse the SidebarGroup component to create a section within the sidebar A SidebarGroup has a SidebarGroupLabel, a SidebarGroupContent and an optional SidebarGroupAction A sidebar group",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1502398,
      "relative_path": "documentation\\shadcn\\_docs_components_sidebar.html",
      "source_type": "documentation"
    },
    "token_count": 476,
    "chunk_index": 7,
    "total_chunks": 17
  },
  {
    "id": "f939c34d738c9e5f80ca535699b60aaf",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_sidebar.html",
    "source_type": "documentation",
    "title": "Sidebar - shadcn/ui",
    "content": "</SidebarProvider> ) } SidebarContent The SidebarContent component is used to wrap the content of the sidebar This is where you add your SidebarGroup components It is scrollable Copyimport { Sidebar, SidebarContent } from \"@/components/ui/sidebar\" export function AppSidebar() { return ( <Sidebar> <SidebarContent> <SidebarGroup /> <SidebarGroup /> </SidebarContent> </Sidebar> ) } SidebarGroup Use the SidebarGroup component to create a section within the sidebar A SidebarGroup has a SidebarGroupLabel, a SidebarGroupContent and an optional SidebarGroupAction A sidebar groupCopyimport { Sidebar, SidebarContent, SidebarGroup } from \"@/components/ui/sidebar\"\nexport function AppSidebar() {\nreturn (\n<Sidebar>\n<SidebarContent>\n<SidebarGroup>\n<SidebarGroupLabel>Application</SidebarGroupLabel>\n<SidebarGroupAction>\n<Plus /> <span className=\"sr-only\">Add Project</span>\n</SidebarGroupAction>\n<SidebarGroupContent></SidebarGroupContent>\n</SidebarGroup>\n</SidebarContent>\n</Sidebar>\n)\n}\nCollapsible SidebarGroup\nTo make a SidebarGroup collapsible, wrap it in a Collapsible A collapsible sidebar group Copyexport function AppSidebar() {\nreturn (\n<Collapsible defaultOpen className=\"group/collapsible\">\n<SidebarGroup>\n<SidebarGroupLabel asChild>\n<CollapsibleTrigger>\nHelp\n<ChevronDown className=\"ml-auto transition-transform group-data-[state=open]/collapsible:rotate-180\" />\n</CollapsibleTrigger>\n</SidebarGroupLabel>\n<CollapsibleContent>\n<SidebarGroupContent />\n</CollapsibleContent>\n</SidebarGroup>\n</Collapsible>\n)\n}\nNote: We wrap the CollapsibleTrigger in a SidebarGroupLabel to render\na button SidebarGroupAction\nUse the SidebarGroupAction component to add an action button to the SidebarGroup A sidebar group with an action button Copyexport function AppSidebar() {\nreturn (\n<SidebarGroup>\n<SidebarGroupLabel asChild>Projects</SidebarGroupLabel>\n<SidebarGroupAction title=\"Add Project\">\n<Plus /> <span className=\"sr-only\">Add Project</span>\n</SidebarGroupAction>\n<SidebarGroupContent />\n</SidebarGroup>\n)\n}\nSidebarMenu\nThe SidebarMenu component is used for building a menu within a SidebarGroup A SidebarMenu component is composed of SidebarMenuItem, SidebarMenuButton, <SidebarMenuAction /> and <SidebarMenuSub /> components Here's an example of a SidebarMenu component rendering a list of projects",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1502398,
      "relative_path": "documentation\\shadcn\\_docs_components_sidebar.html",
      "source_type": "documentation"
    },
    "token_count": 499,
    "chunk_index": 8,
    "total_chunks": 17
  },
  {
    "id": "a9d48f983d849e656a7c0244f7391f6b",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_sidebar.html",
    "source_type": "documentation",
    "title": "Sidebar - shadcn/ui",
    "content": "add an action button to the SidebarGroup A sidebar group with an action button Copyexport function AppSidebar() { return ( <SidebarGroup> <SidebarGroupLabel asChild>Projects</SidebarGroupLabel> <SidebarGroupAction title=\"Add Project\"> <Plus /> <span className=\"sr-only\">Add Project</span> </SidebarGroupAction> <SidebarGroupContent /> </SidebarGroup> ) } SidebarMenu The SidebarMenu component is used for building a menu within a SidebarGroup A SidebarMenu component is composed of SidebarMenuItem, SidebarMenuButton, <SidebarMenuAction /> and <SidebarMenuSub /> components Here's an example of a SidebarMenu component rendering a list of projectsA sidebar menu with a list of projects Copy<Sidebar>\n<SidebarContent>\n<SidebarGroup>\n<SidebarGroupLabel>Projects</SidebarGroupLabel>\n<SidebarGroupContent>\n<SidebarMenu>\n{projects map((project) => (\n<SidebarMenuItem key={project name}>\n<SidebarMenuButton asChild>\n<a href={project url}>\n<project icon />\n<span>{project name}</span>\n</a>\n</SidebarMenuButton>\n</SidebarMenuItem>\n))}\n</SidebarMenu>\n</SidebarGroupContent>\n</SidebarGroup>\n</SidebarContent>\n</Sidebar>\nSidebarMenuButton\nThe SidebarMenuButton component is used to render a menu button within a SidebarMenuItem Link or Anchor\nBy default, the SidebarMenuButton renders a button but you can use the asChild prop to render a different component such as a Link or an a tag Copy<SidebarMenuButton asChild>\n<a href=\"#\">Home</a>\n</SidebarMenuButton>\nIcon and Label\nYou can render an icon and a truncated label inside the button Remember to wrap the label in a <span> Copy<SidebarMenuButton asChild>\n<a href=\"#\">\n<Home />\n<span>Home</span>\n</a>\n</SidebarMenuButton>\nisActive\nUse the isActive prop to mark a menu item as active Copy<SidebarMenuButton asChild isActive>\n<a href=\"#\">Home</a>\n</SidebarMenuButton>\nSidebarMenuAction\nThe SidebarMenuAction component is used to render a menu action within a SidebarMenuItem This button works independently of the SidebarMenuButton i e you can have the <SidebarMenuButton /> as a clickable link and the <SidebarMenuAction /> as a button",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1502398,
      "relative_path": "documentation\\shadcn\\_docs_components_sidebar.html",
      "source_type": "documentation"
    },
    "token_count": 467,
    "chunk_index": 9,
    "total_chunks": 17
  },
  {
    "id": "c263edb1ce6797408dea7a8b46b9b64d",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_sidebar.html",
    "source_type": "documentation",
    "title": "Sidebar - shadcn/ui",
    "content": "button Remember to wrap the label in a <span> Copy<SidebarMenuButton asChild> <a href=\"#\"> <Home /> <span>Home</span> </a> </SidebarMenuButton> isActive Use the isActive prop to mark a menu item as active Copy<SidebarMenuButton asChild isActive> <a href=\"#\">Home</a> </SidebarMenuButton> SidebarMenuAction The SidebarMenuAction component is used to render a menu action within a SidebarMenuItem This button works independently of the SidebarMenuButton i e you can have the <SidebarMenuButton /> as a clickable link and the <SidebarMenuAction /> as a buttonCopy<SidebarMenuItem>\n<SidebarMenuButton asChild>\n<a href=\"#\">\n<Home />\n<span>Home</span>\n</a>\n</SidebarMenuButton>\n<SidebarMenuAction>\n<Plus /> <span className=\"sr-only\">Add Project</span>\n</SidebarMenuAction>\n</SidebarMenuItem>\nDropdownMenu\nHere's an example of a SidebarMenuAction component rendering a DropdownMenu A sidebar menu action with a dropdown menu Copy<SidebarMenuItem>\n<SidebarMenuButton asChild>\n<a href=\"#\">\n<Home />\n<span>Home</span>\n</a>\n</SidebarMenuButton>\n<DropdownMenu>\n<DropdownMenuTrigger asChild>\n<SidebarMenuAction>\n<MoreHorizontal />\n</SidebarMenuAction>\n</DropdownMenuTrigger>\n<DropdownMenuContent side=\"right\" align=\"start\">\n<DropdownMenuItem>\n<span>Edit Project</span>\n</DropdownMenuItem>\n<DropdownMenuItem>\n<span>Delete Project</span>\n</DropdownMenuItem>\n</DropdownMenuContent>\n</DropdownMenu>\n</SidebarMenuItem>\nSidebarMenuSub\nThe SidebarMenuSub component is used to render a submenu within a SidebarMenu Use <SidebarMenuSubItem /> and <SidebarMenuSubButton /> to render a submenu item A sidebar menu with a submenu Copy<SidebarMenuItem>\n<SidebarMenuButton />\n<SidebarMenuSub>\n<SidebarMenuSubItem>\n<SidebarMenuSubButton />\n</SidebarMenuSubItem>\n<SidebarMenuSubItem>\n<SidebarMenuSubButton />\n</SidebarMenuSubItem>\n</SidebarMenuSub>\n</SidebarMenuItem>\nCollapsible SidebarMenu\nTo make a SidebarMenu component collapsible, wrap it and the SidebarMenuSub components in a Collapsible A collapsible sidebar menu",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1502398,
      "relative_path": "documentation\\shadcn\\_docs_components_sidebar.html",
      "source_type": "documentation"
    },
    "token_count": 464,
    "chunk_index": 10,
    "total_chunks": 17
  },
  {
    "id": "733c2ff332e90d0099c45fed9d4cd4ad",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_sidebar.html",
    "source_type": "documentation",
    "title": "Sidebar - shadcn/ui",
    "content": "<DropdownMenuItem> <span>Edit Project</span> </DropdownMenuItem> <DropdownMenuItem> <span>Delete Project</span> </DropdownMenuItem> </DropdownMenuContent> </DropdownMenu> </SidebarMenuItem> SidebarMenuSub The SidebarMenuSub component is used to render a submenu within a SidebarMenu Use <SidebarMenuSubItem /> and <SidebarMenuSubButton /> to render a submenu item A sidebar menu with a submenu Copy<SidebarMenuItem> <SidebarMenuButton /> <SidebarMenuSub> <SidebarMenuSubItem> <SidebarMenuSubButton /> </SidebarMenuSubItem> <SidebarMenuSubItem> <SidebarMenuSubButton /> </SidebarMenuSubItem> </SidebarMenuSub> </SidebarMenuItem> Collapsible SidebarMenu To make a SidebarMenu component collapsible, wrap it and the SidebarMenuSub components in a Collapsible A collapsible sidebar menuCopy<SidebarMenu>\n<Collapsible defaultOpen className=\"group/collapsible\">\n<SidebarMenuItem>\n<CollapsibleTrigger asChild>\n<SidebarMenuButton />\n</CollapsibleTrigger>\n<CollapsibleContent>\n<SidebarMenuSub>\n<SidebarMenuSubItem />\n</SidebarMenuSub>\n</CollapsibleContent>\n</SidebarMenuItem>\n</Collapsible>\n</SidebarMenu>\nSidebarMenuBadge\nThe SidebarMenuBadge component is used to render a badge within a SidebarMenuItem A sidebar menu with a badge Copy<SidebarMenuItem>\n<SidebarMenuButton />\n<SidebarMenuBadge>24</SidebarMenuBadge>\n</SidebarMenuItem>\nSidebarMenuSkeleton\nThe SidebarMenuSkeleton component is used to render a skeleton for a SidebarMenu You can use this to show a loading state when using React Server Components, SWR or react-query Copyfunction NavProjectsSkeleton() {\nreturn (\n<SidebarMenu>\n{Array from({ length: 5 }) map((_, index) => (\n<SidebarMenuItem key={index}>\n<SidebarMenuSkeleton />\n</SidebarMenuItem>\n))}\n</SidebarMenu>\n)\n}\nSidebarSeparator\nThe SidebarSeparator component is used to render a separator within a Sidebar Copy<Sidebar>\n<SidebarHeader />\n<SidebarSeparator />\n<SidebarContent>\n<SidebarGroup />\n<SidebarSeparator />\n<SidebarGroup />\n</SidebarContent>\n</Sidebar>\nSidebarTrigger\nUse the SidebarTrigger component to render a button that toggles the sidebar The SidebarTrigger component must be used within a SidebarProvider",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1502398,
      "relative_path": "documentation\\shadcn\\_docs_components_sidebar.html",
      "source_type": "documentation"
    },
    "token_count": 472,
    "chunk_index": 11,
    "total_chunks": 17
  },
  {
    "id": "0888eebbdbcce2a147d2a53c1ae6496a",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_sidebar.html",
    "source_type": "documentation",
    "title": "Sidebar - shadcn/ui",
    "content": "SWR or react-query Copyfunction NavProjectsSkeleton() { return ( <SidebarMenu> {Array from({ length: 5 }) map((_, index) => ( <SidebarMenuItem key={index}> <SidebarMenuSkeleton /> </SidebarMenuItem> ))} </SidebarMenu> ) } SidebarSeparator The SidebarSeparator component is used to render a separator within a Sidebar Copy<Sidebar> <SidebarHeader /> <SidebarSeparator /> <SidebarContent> <SidebarGroup /> <SidebarSeparator /> <SidebarGroup /> </SidebarContent> </Sidebar> SidebarTrigger Use the SidebarTrigger component to render a button that toggles the sidebar The SidebarTrigger component must be used within a SidebarProviderCopy<SidebarProvider>\n<Sidebar />\n<main>\n<SidebarTrigger />\n</main>\n</SidebarProvider>\nCustom Trigger\nTo create a custom trigger, you can use the useSidebar hook Copyimport { useSidebar } from \"@/components/ui/sidebar\"\nexport function CustomTrigger() {\nconst { toggleSidebar } = useSidebar()\nreturn <button onClick={toggleSidebar}>Toggle Sidebar</button>\n}\nSidebarRail\nThe SidebarRail component is used to render a rail within a Sidebar This rail can be used to toggle the sidebar Copy<Sidebar>\n<SidebarHeader />\n<SidebarContent>\n<SidebarGroup />\n</SidebarContent>\n<SidebarFooter />\n<SidebarRail />\n</Sidebar>\nData Fetching\nReact Server Components\nHere's an example of a SidebarMenu component rendering a list of projects using React Server Components A sidebar menu using React Server Components Skeleton to show loading state Copyfunction NavProjectsSkeleton() {\nreturn (\n<SidebarMenu>\n{Array from({ length: 5 }) map((_, index) => (\n<SidebarMenuItem key={index}>\n<SidebarMenuSkeleton showIcon />\n</SidebarMenuItem>\n))}\n</SidebarMenu>\n)\n}\nServer component fetching data Copyasync function NavProjects() {\nconst projects = await fetchProjects()\nreturn (\n<SidebarMenu>\n{projects map((project) => (\n<SidebarMenuItem key={project name}>\n<SidebarMenuButton asChild>\n<a href={project url}>\n<project icon />\n<span>{project name}</span>\n</a>\n</SidebarMenuButton>\n</SidebarMenuItem>\n))}\n</SidebarMenu>\n)\n}\nUsage with React Suspense Copyfunction AppSidebar() {\nreturn (\n<Sidebar>\n<SidebarContent>\n<SidebarGroup>\n<SidebarGroupLabel>Projects</SidebarGroupLabel>\n<SidebarGroupContent>\n<React",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1502398,
      "relative_path": "documentation\\shadcn\\_docs_components_sidebar.html",
      "source_type": "documentation"
    },
    "token_count": 486,
    "chunk_index": 12,
    "total_chunks": 17
  },
  {
    "id": "06ebbea09fd1e5e73458e0e35fd66696",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_sidebar.html",
    "source_type": "documentation",
    "title": "Sidebar - shadcn/ui",
    "content": "( <SidebarMenu> {Array from({ length: 5 }) map((_, index) => ( <SidebarMenuItem key={index}> <SidebarMenuSkeleton showIcon /> </SidebarMenuItem> ))} </SidebarMenu> ) } Server component fetching data Copyasync function NavProjects() { const projects = await fetchProjects() return ( <SidebarMenu> {projects map((project) => ( <SidebarMenuItem key={project name}> <SidebarMenuButton asChild> <a href={project url}> <project icon /> <span>{project name}</span> </a> </SidebarMenuButton> </SidebarMenuItem> ))} </SidebarMenu> ) } Usage with React Suspense Copyfunction AppSidebar() { return ( <Sidebar> <SidebarContent> <SidebarGroup> <SidebarGroupLabel>Projects</SidebarGroupLabel> <SidebarGroupContent> <ReactSuspense fallback={<NavProjectsSkeleton />}>\n<NavProjects />\n</React Suspense>\n</SidebarGroupContent>\n</SidebarGroup>\n</SidebarContent>\n</Sidebar>\n)\n}\nSWR and React Query\nYou can use the same approach with SWR or react-query SWRCopyfunction NavProjects() {\nconst { data, isLoading } = useSWR(\"/api/projects\", fetcher)\nif (isLoading) {\nreturn (\n<SidebarMenu>\n{Array from({ length: 5 }) map((_, index) => (\n<SidebarMenuItem key={index}>\n<SidebarMenuSkeleton showIcon />\n</SidebarMenuItem>\n))}\n</SidebarMenu>\n)\n}\nif ( data) {\nreturn }\nreturn (\n<SidebarMenu>\n{data map((project) => (\n<SidebarMenuItem key={project name}>\n<SidebarMenuButton asChild>\n<a href={project url}>\n<project icon />\n<span>{project name}</span>\n</a>\n</SidebarMenuButton>\n</SidebarMenuItem>\n))}\n</SidebarMenu>\n)\n}\nReact QueryCopyfunction NavProjects() {\nconst { data, isLoading } = useQuery()\nif (isLoading) {\nreturn (\n<SidebarMenu>\n{Array from({ length: 5 }) map((_, index) => (\n<SidebarMenuItem key={index}>\n<SidebarMenuSkeleton showIcon />\n</SidebarMenuItem>\n))}\n</SidebarMenu>\n)\n}\nif ( data) {\nreturn }\nreturn (\n<SidebarMenu>\n{data map((project) => (\n<SidebarMenuItem key={project name}>\n<SidebarMenuButton asChild>\n<a href={project url}>\n<project icon />\n<span>{project",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1502398,
      "relative_path": "documentation\\shadcn\\_docs_components_sidebar.html",
      "source_type": "documentation"
    },
    "token_count": 497,
    "chunk_index": 13,
    "total_chunks": 17
  },
  {
    "id": "c624ab5e71ab7bec7899ff12b63c561e",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_sidebar.html",
    "source_type": "documentation",
    "title": "Sidebar - shadcn/ui",
    "content": "<a href={project url}> <project icon /> <span>{project name}</span> </a> </SidebarMenuButton> </SidebarMenuItem> ))} </SidebarMenu> ) } React QueryCopyfunction NavProjects() { const { data, isLoading } = useQuery() if (isLoading) { return ( <SidebarMenu> {Array from({ length: 5 }) map((_, index) => ( <SidebarMenuItem key={index}> <SidebarMenuSkeleton showIcon /> </SidebarMenuItem> ))} </SidebarMenu> ) } if ( data) { return } return ( <SidebarMenu> {data map((project) => ( <SidebarMenuItem key={project name}> <SidebarMenuButton asChild> <a href={project url}> <project icon /> <span>{projectname}</span>\n</a>\n</SidebarMenuButton>\n</SidebarMenuItem>\n))}\n</SidebarMenu>\n)\n}\nControlled Sidebar\nUse the open and onOpenChange props to control the sidebar A controlled sidebar Copyexport function AppSidebar() {\nconst [open, setOpen] = React useState(false)\nreturn (\n<SidebarProvider open={open} onOpenChange={setOpen}>\n<Sidebar />\n</SidebarProvider>\n)\n}\nTheming\nWe use the following CSS variables to theme the sidebar Copy@layer base {\n:root {\n--sidebar-background: 0 0% 98%;\n--sidebar-foreground: 240 5 3% 26 1%;\n--sidebar-primary: 240 5 9% 10%;\n--sidebar-primary-foreground: 0 0% 98%;\n--sidebar-accent: 240 4 8% 95 9%;\n--sidebar-accent-foreground: 240 5 9% 10%;\n--sidebar-border: 220 13% 91%;\n--sidebar-ring: 217 2 91 2% 59 8%;\n} dark {\n--sidebar-background: 240 5 9% 10%;\n--sidebar-foreground: 240 4 8% 95 9%;\n--sidebar-primary: 0 0% 98%;\n--sidebar-primary-foreground: 240 5 9% 10%;\n--sidebar-accent: 240 3 7% 15 9%;\n--sidebar-accent-foreground: 240 4 8% 95 9%;\n--sidebar-border: 240 3 7% 15 9%;\n--sidebar-ring: 217 2 91 2% 59",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1502398,
      "relative_path": "documentation\\shadcn\\_docs_components_sidebar.html",
      "source_type": "documentation"
    },
    "token_count": 516,
    "chunk_index": 14,
    "total_chunks": 17
  },
  {
    "id": "54462c8336bd82cf51c3ba58e9b6ff71",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_sidebar.html",
    "source_type": "documentation",
    "title": "Sidebar - shadcn/ui",
    "content": "5 9% 10%; --sidebar-primary-foreground: 0 0% 98%; --sidebar-accent: 240 4 8% 95 9%; --sidebar-accent-foreground: 240 5 9% 10%; --sidebar-border: 220 13% 91%; --sidebar-ring: 217 2 91 2% 59 8%; } dark { --sidebar-background: 240 5 9% 10%; --sidebar-foreground: 240 4 8% 95 9%; --sidebar-primary: 0 0% 98%; --sidebar-primary-foreground: 240 5 9% 10%; --sidebar-accent: 240 3 7% 15 9%; --sidebar-accent-foreground: 240 4 8% 95 9%; --sidebar-border: 240 3 7% 15 9%; --sidebar-ring: 217 2 91 2% 598%;\n}\n}\nWe intentionally use different variables for the sidebar and the rest of the application to make it easy to have a sidebar that is styled differently from the rest of the application Think a sidebar with a darker shade from the main application Styling\nHere are some tips for styling the sidebar based on different states Styling an element based on the sidebar collapsible state The following will hide the SidebarGroup when the sidebar is in icon mode Copy<Sidebar collapsible=\"icon\">\n<SidebarContent>\n<SidebarGroup className=\"group-data-[collapsible=icon]:hidden\" />\n</SidebarContent>\n</Sidebar>\nStyling a menu action based on the menu button active state The following will force the menu action to be visible when the menu button is active Copy<SidebarMenuItem>\n<SidebarMenuButton />\n<SidebarMenuAction className=\"peer-data-[active=true]/menu-button:opacity-100\" />\n</SidebarMenuItem>\nYou can find more tips on using states for styling in this Twitter thread Changelog\n2024-10-30 Cookie handling in setOpen\n#5593 - Improved setOpen callback logic in <SidebarProvider> Update the setOpen callback in <SidebarProvider> as follows:\nCopyconst setOpen = React useCallback(\n(value: boolean | ((value: boolean) => boolean)) => {\nconst openState = typeof value === \"function\"",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1502398,
      "relative_path": "documentation\\shadcn\\_docs_components_sidebar.html",
      "source_type": "documentation"
    },
    "token_count": 481,
    "chunk_index": 15,
    "total_chunks": 17
  },
  {
    "id": "ad907c7276fe88b19c4cac498465839b",
    "source_file": "corpus\\documentation\\shadcn\\_docs_components_sidebar.html",
    "source_type": "documentation",
    "title": "Sidebar - shadcn/ui",
    "content": "the menu action to be visible when the menu button is active Copy<SidebarMenuItem> <SidebarMenuButton /> <SidebarMenuAction className=\"peer-data-[active=true]/menu-button:opacity-100\" /> </SidebarMenuItem> You can find more tips on using states for styling in this Twitter thread Changelog 2024-10-30 Cookie handling in setOpen #5593 - Improved setOpen callback logic in <SidebarProvider> Update the setOpen callback in <SidebarProvider> as follows: Copyconst setOpen = React useCallback( (value: boolean | ((value: boolean) => boolean)) => { const openState = typeof value === \"function\"value(open) : value\nif (setOpenProp) {\nsetOpenProp(openState)\n} else {\n_setOpen(openState)\n}\n// This sets the cookie to keep the sidebar state document cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n},\n[setOpenProp, open]\n)\n2024-10-21 Fixed text-sidebar-foreground\n#5491 - Moved text-sidebar-foreground from <SidebarProvider> to <Sidebar> component 2024-10-20 Typo in useSidebar hook Fixed typo in useSidebar hook sidebar tsxCopy-  throw new Error(\"useSidebar must be used within a Sidebar \")\n+  throw new Error(\"useSidebar must be used within a SidebarProvider \") SheetSkeleton On This PageInstallationStructureUsageYour First SidebarComponentsSidebarProviderPropsWidthKeyboard ShortcutPersisted StateSidebarPropssidevariantcollapsibleuseSidebarSidebarHeaderSidebarFooterSidebarContentSidebarGroupCollapsible SidebarGroupSidebarGroupActionSidebarMenuSidebarMenuButtonLink or AnchorIcon and LabelisActiveSidebarMenuActionDropdownMenuSidebarMenuSubCollapsible SidebarMenuSidebarMenuBadgeSidebarMenuSkeletonSidebarSeparatorSidebarTriggerCustom TriggerSidebarRailData FetchingReact Server ComponentsSWR and React QueryControlled SidebarThemingStylingChangelog2024-10-30 Cookie handling in setOpen2024-10-21 Fixed text-sidebar-foreground2024-10-20 Typo in useSidebar hook Deploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1502398,
      "relative_path": "documentation\\shadcn\\_docs_components_sidebar.html",
      "source_type": "documentation"
    },
    "token_count": 486,
    "chunk_index": 16,
    "total_chunks": 17
  },
  {
    "id": "785a4d27b0247c2b6dfb685bd542dc70",
    "source_file": "corpus\\documentation\\shadcn\\_docs_dark-mode_remix.html",
    "source_type": "documentation",
    "title": "Remix - shadcn/ui",
    "content": "Remix - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonRemixCopy PagePreviousNextAdding dark mode to your remix app Modify your tailwind css fileAdd :root[class~=\"dark\"] to your tailwind css file This will allow you to use the dark class on your html element to apply dark mode styles app/tailwind cssCopy dark,\n:root[class~=\"dark\"] { ;\n}Install remix-themesStart by installing remix-themes:pnpmnpmyarnbunpnpm add remix-themesCopyCreate a session storage and theme session resolverapp/sessions server tsxCopyimport { createThemeSessionResolver } from \"remix-themes\"\n// You can default to 'development' if process env NODE_ENV is not set\nconst isProduction = process env NODE_ENV === \"production\"\nconst sessionStorage = createCookieSessionStorage({\ncookie: {\nname: \"theme\",\npath: \"/\",\nhttpOnly: true,\nsameSite: \"lax\",\nsecrets: [\"s3cr3t\"],\n// Set domain and secure only if in production (isProduction { domain: \"your-production-domain com\", secure: true }\n: {}),\n},\n})\nexport const themeSessionResolver = createThemeSessionResolver(sessionStorage)Set up Remix ThemesAdd the ThemeProvider to your root layout app/root tsxCopyimport clsx from \"clsx\"\nimport { PreventFlashOnWrongTheme, ThemeProvider, useTheme } from \"remix-themes\"\nimport { themeSessionResolver } from \" /sessions",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 414428,
      "relative_path": "documentation\\shadcn\\_docs_dark-mode_remix.html",
      "source_type": "documentation"
    },
    "token_count": 472,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "9d40b8fd8046d10c9130adf062e5a665",
    "source_file": "corpus\\documentation\\shadcn\\_docs_dark-mode_remix.html",
    "source_type": "documentation",
    "title": "Remix - shadcn/ui",
    "content": "process env NODE_ENV === \"production\" const sessionStorage = createCookieSessionStorage({ cookie: { name: \"theme\", path: \"/\", httpOnly: true, sameSite: \"lax\", secrets: [\"s3cr3t\"], // Set domain and secure only if in production (isProduction { domain: \"your-production-domain com\", secure: true } : {}), }, }) export const themeSessionResolver = createThemeSessionResolver(sessionStorage)Set up Remix ThemesAdd the ThemeProvider to your root layout app/root tsxCopyimport clsx from \"clsx\" import { PreventFlashOnWrongTheme, ThemeProvider, useTheme } from \"remix-themes\" import { themeSessionResolver } from \" /sessionsserver\"\n// Return the theme from the session storage using the loader\nexport async function loader({ request }: LoaderFunctionArgs) {\nconst { getTheme } = await themeSessionResolver(request)\nreturn {\ntheme: getTheme(),\n}\n}\n// Wrap your app with ThemeProvider // `specifiedTheme` is the stored theme in the session storage // `themeAction` is the action name that's used to change the theme in the session storage export default function AppWithProviders() {\nconst data = useLoaderData<typeof loader>()\nreturn (\n<ThemeProvider specifiedTheme={data theme} themeAction=\"/action/set-theme\">\n<App />\n</ThemeProvider>\n)\n}\nexport function App() {\nconst data = useLoaderData<typeof loader>()\nconst [theme] = useTheme()\nreturn (\n<html lang=\"en\" className={clsx(theme)}>\n<head>\n<meta charSet=\"utf-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n<Meta />\n<PreventFlashOnWrongTheme ssrTheme={Boolean(data theme)} />\n<Links />\n</head>\n<body>\n<Outlet />\n<ScrollRestoration />\n<Scripts />\n<LiveReload />\n</body>\n</html>\n)\n}Add an action routeCreate a file in /routes/action set-theme ts Ensure that you pass the filename to the ThemeProvider component This route it's used to store the preferred theme in the session storage when the user changes it app/routes/action set-theme tsCopyimport { createThemeAction } from \"remix-themes\"\nimport { themeSessionResolver } from \" /sessions server\"\nexport const action = createThemeAction(themeSessionResolver)Add a mode togglePlace a mode toggle on your site to toggle between light and dark mode components/mode-toggle",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 414428,
      "relative_path": "documentation\\shadcn\\_docs_dark-mode_remix.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "601a1230d5cbbb2c1c9b40473306f1d7",
    "source_file": "corpus\\documentation\\shadcn\\_docs_dark-mode_remix.html",
    "source_type": "documentation",
    "title": "Remix - shadcn/ui",
    "content": "}Add an action routeCreate a file in /routes/action set-theme ts Ensure that you pass the filename to the ThemeProvider component This route it's used to store the preferred theme in the session storage when the user changes it app/routes/action set-theme tsCopyimport { createThemeAction } from \"remix-themes\" import { themeSessionResolver } from \" /sessions server\" export const action = createThemeAction(themeSessionResolver)Add a mode togglePlace a mode toggle on your site to toggle between light and dark mode components/mode-toggletsxCopyimport { Moon, Sun } from \"lucide-react\"\nimport { Theme, useTheme } from \"remix-themes\"\nimport { Button } from \" /ui/button\"\nimport {\nDropdownMenu,\nDropdownMenuContent,\nDropdownMenuItem,\nDropdownMenuTrigger,\n} from \" /ui/dropdown-menu\"\nexport function ModeToggle() {\nconst [, setTheme] = useTheme()\nreturn (\n<DropdownMenu>\n<DropdownMenuTrigger asChild>\n<Button variant=\"ghost\" size=\"icon\">\n<Sun className=\"h-[1 2rem] w-[1 2rem] scale-100 rotate-0 transition-all dark:scale-0 dark:-rotate-90\" />\n<Moon className=\"absolute h-[1 2rem] w-[1 2rem] scale-0 rotate-90 transition-all dark:scale-100 dark:rotate-0\" />\n<span className=\"sr-only\">Toggle theme</span>\n</Button>\n</DropdownMenuTrigger>\n<DropdownMenuContent align=\"end\">\n<DropdownMenuItem onClick={() => setTheme(Theme LIGHT)}>\nLight\n</DropdownMenuItem>\n<DropdownMenuItem onClick={() => setTheme(Theme DARK)}>\nDark\n</DropdownMenuItem>\n</DropdownMenuContent>\n</DropdownMenu>\n)\n} AstroRegistry On This PageModify your tailwind css fileInstall remix-themesCreate a session storage and theme session resolverSet up Remix ThemesAdd an action routeAdd a mode toggleDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 414428,
      "relative_path": "documentation\\shadcn\\_docs_dark-mode_remix.html",
      "source_type": "documentation"
    },
    "token_count": 460,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "1e019cbce7241e69bf68ba269edfde03",
    "source_file": "corpus\\documentation\\shadcn\\_docs_installation_laravel.html",
    "source_type": "documentation",
    "title": "Laravel - shadcn/ui",
    "content": "Laravel - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation...Search...⌘K92.8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents.jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext.jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext.jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry.jsonregistry-item.jsonLaravelCopy PagePreviousNextInstall and configure shadcn/ui for LaravelCreate projectStart by creating a new Laravel project with Inertia and React using the laravel installer laravel new my-app:Copylaravel new my-app --reactAdd ComponentsYou can now start adding components to your project.pnpmnpmyarnbunpnpm dlx shadcn@latest add switchCopyThe command above will add the Switch component to resources/js/components/ui/switch.tsx. You can then import it like this:resources/js/pages/index.tsxCopyimport { Switch } from \"@/components/ui/switch\"\nconst MyPage = () => {\nreturn (\n<div>\n<Switch />\n</div>\n)\n}\nexport default MyPage ViteReact Router On This PageCreate projectAdd ComponentsDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more.Vercel provides tools and infrastructure to deploy apps and features at scale.Deploy NowDeploy to VercelBuilt by shadcn at Vercel. The source code is available on GitHub.",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 304447,
      "relative_path": "documentation\\shadcn\\_docs_installation_laravel.html",
      "source_type": "documentation"
    },
    "token_count": 402,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0c2c7a5e32795bde04f872d93fce3f16",
    "source_file": "corpus\\documentation\\shadcn\\_docs_installation_astro.html",
    "source_type": "documentation",
    "title": "Astro - shadcn/ui",
    "content": "Astro - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonAstroCopy PagePreviousNextInstall and configure shadcn/ui for AstroCreate projectStart by creating a new Astro project:pnpmnpmyarnbunpnpm dlx create-astro@latest astro-app  --template with-tailwindcss --install --add react --gitCopyEdit tsconfig json fileAdd the following code to the tsconfig json file to resolve paths:tsconfig jsonCopy{\n\"compilerOptions\": {\n// \"baseUrl\": \" \",\n\"paths\": {\n\"@/*\": [\n\" /src/*\"\n]\n}\n// }\n}Run the CLIRun the shadcn init command to setup your project:pnpmnpmyarnbunpnpm dlx shadcn@latest initCopyAdd ComponentsYou can now start adding components to your project pnpmnpmyarnbunpnpm dlx shadcn@latest add buttonCopyThe command above will add the Button component to your project You can then import it like this:src/pages/index astroCopy---\nimport { Button } from \"@/components/ui/button\"\n---\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\" />\n<meta name=\"viewport\" content=\"width=device-width\" />\n<link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon svg\" />\n<meta name=\"generator\" content={Astro generator} />\n<title>Astro + TailwindCSS</title>\n</head>\n<body>\n<div className=\"grid place-items-center h-screen content-center\">\n<Button>Button</Button>\n</div>\n</body>\n</html> RemixTanStack Start On This PageCreate projectEdit tsconfig",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 342394,
      "relative_path": "documentation\\shadcn\\_docs_installation_astro.html",
      "source_type": "documentation"
    },
    "token_count": 502,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "7cfe5f2f02899c0d5c578b99281ccc70",
    "source_file": "corpus\\documentation\\shadcn\\_docs_installation_astro.html",
    "source_type": "documentation",
    "title": "Astro - shadcn/ui",
    "content": "components to your project pnpmnpmyarnbunpnpm dlx shadcn@latest add buttonCopyThe command above will add the Button component to your project You can then import it like this:src/pages/index astroCopy--- import { Button } from \"@/components/ui/button\" --- <html lang=\"en\"> <head> <meta charset=\"utf-8\" /> <meta name=\"viewport\" content=\"width=device-width\" /> <link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon svg\" /> <meta name=\"generator\" content={Astro generator} /> <title>Astro + TailwindCSS</title> </head> <body> <div className=\"grid place-items-center h-screen content-center\"> <Button>Button</Button> </div> </body> </html> RemixTanStack Start On This PageCreate projectEdit tsconfigjson fileRun the CLIAdd ComponentsDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 342394,
      "relative_path": "documentation\\shadcn\\_docs_installation_astro.html",
      "source_type": "documentation"
    },
    "token_count": 247,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "0e11792f96da3a26f503133ebf671d5f",
    "source_file": "corpus\\documentation\\shadcn\\_docs_dark-mode_vite.html",
    "source_type": "documentation",
    "title": "Vite - shadcn/ui",
    "content": "Vite - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonViteCopy PagePreviousNextAdding dark mode to your vite app Create a theme provider\ncomponents/theme-provider tsxCopyimport { createContext, useContext, useEffect, useState } from \"react\"\ntype Theme = \"dark\" | \"light\" | \"system\"\ntype ThemeProviderProps = {\nchildren: React ReactNode\ndefaultTheme : Theme\nstorageKey : string\n}\ntype ThemeProviderState = {\ntheme: Theme\nsetTheme: (theme: Theme) => void\n}\nconst initialState: ThemeProviderState = {\ntheme: \"system\",\nsetTheme: () => null,\n}\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState)\nexport function ThemeProvider({\nchildren,\ndefaultTheme = \"system\",\nstorageKey = \"vite-ui-theme\", props\n}: ThemeProviderProps) {\nconst [theme, setTheme] = useState<Theme>(\n() => (localStorage getItem(storageKey) as Theme) || defaultTheme\n)\nuseEffect(() => {\nconst root = window document documentElement\nroot classList remove(\"light\", \"dark\")\nif (theme === \"system\") {\nconst systemTheme = window matchMedia(\"(prefers-color-scheme: dark)\") matches \"dark\"\n: \"light\"\nroot classList add(systemTheme)\nreturn\n}\nroot classList add(theme)\n}, [theme])\nconst value = {\ntheme,\nsetTheme: (theme: Theme) => {\nlocalStorage setItem(storageKey, theme)\nsetTheme(theme)\n},\n}\nreturn (\n<ThemeProviderContext Provider { props} value={value}>\n{children}\n</ThemeProviderContext",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 389235,
      "relative_path": "documentation\\shadcn\\_docs_dark-mode_vite.html",
      "source_type": "documentation"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "af9759ca21a417eb26db09ac2e9cc61b",
    "source_file": "corpus\\documentation\\shadcn\\_docs_dark-mode_vite.html",
    "source_type": "documentation",
    "title": "Vite - shadcn/ui",
    "content": "[theme, setTheme] = useState<Theme>( () => (localStorage getItem(storageKey) as Theme) || defaultTheme ) useEffect(() => { const root = window document documentElement root classList remove(\"light\", \"dark\") if (theme === \"system\") { const systemTheme = window matchMedia(\"(prefers-color-scheme: dark)\") matches \"dark\" : \"light\" root classList add(systemTheme) return } root classList add(theme) }, [theme]) const value = { theme, setTheme: (theme: Theme) => { localStorage setItem(storageKey, theme) setTheme(theme) }, } return ( <ThemeProviderContext Provider { props} value={value}> {children} </ThemeProviderContextProvider>\n)\n}\nexport const useTheme = () => {\nconst context = useContext(ThemeProviderContext)\nif (context === undefined)\nthrow new Error(\"useTheme must be used within a ThemeProvider\")\nreturn context\n}\nWrap your root layout\nAdd the ThemeProvider to your root layout App tsxCopyimport { ThemeProvider } from \"@/components/theme-provider\"\nfunction App() {\nreturn (\n<ThemeProvider defaultTheme=\"dark\" storageKey=\"vite-ui-theme\">\n{children}\n</ThemeProvider>\n)\n}\nexport default App\nAdd a mode toggle\nPlace a mode toggle on your site to toggle between light and dark mode components/mode-toggle tsxCopyimport { Moon, Sun } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport {\nDropdownMenu,\nDropdownMenuContent,\nDropdownMenuItem,\nDropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { useTheme } from \"@/components/theme-provider\"\nexport function ModeToggle() {\nconst { setTheme } = useTheme()\nreturn (\n<DropdownMenu>\n<DropdownMenuTrigger asChild>\n<Button variant=\"outline\" size=\"icon\">\n<Sun className=\"h-[1 2rem] w-[1 2rem] scale-100 rotate-0 transition-all dark:scale-0 dark:-rotate-90\" />\n<Moon className=\"absolute h-[1 2rem] w-[1",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 389235,
      "relative_path": "documentation\\shadcn\\_docs_dark-mode_vite.html",
      "source_type": "documentation"
    },
    "token_count": 427,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "179cffb881cda9655402809132026132",
    "source_file": "corpus\\documentation\\shadcn\\_docs_dark-mode_vite.html",
    "source_type": "documentation",
    "title": "Vite - shadcn/ui",
    "content": "a mode toggle on your site to toggle between light and dark mode components/mode-toggle tsxCopyimport { Moon, Sun } from \"lucide-react\" import { Button } from \"@/components/ui/button\" import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger, } from \"@/components/ui/dropdown-menu\" import { useTheme } from \"@/components/theme-provider\" export function ModeToggle() { const { setTheme } = useTheme() return ( <DropdownMenu> <DropdownMenuTrigger asChild> <Button variant=\"outline\" size=\"icon\"> <Sun className=\"h-[1 2rem] w-[1 2rem] scale-100 rotate-0 transition-all dark:scale-0 dark:-rotate-90\" /> <Moon className=\"absolute h-[1 2rem] w-[12rem] scale-0 rotate-90 transition-all dark:scale-100 dark:rotate-0\" />\n<span className=\"sr-only\">Toggle theme</span>\n</Button>\n</DropdownMenuTrigger>\n<DropdownMenuContent align=\"end\">\n<DropdownMenuItem onClick={() => setTheme(\"light\")}>\nLight\n</DropdownMenuItem>\n<DropdownMenuItem onClick={() => setTheme(\"dark\")}>\nDark\n</DropdownMenuItem>\n<DropdownMenuItem onClick={() => setTheme(\"system\")}>\nSystem\n</DropdownMenuItem>\n</DropdownMenuContent>\n</DropdownMenu>\n)\n} Next jsAstro On This PageCreate a theme providerWrap your root layoutAdd a mode toggleDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 389235,
      "relative_path": "documentation\\shadcn\\_docs_dark-mode_vite.html",
      "source_type": "documentation"
    },
    "token_count": 364,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "b3f4132f69d77e8ffd2b859239e29309",
    "source_file": "corpus\\documentation\\shadcn\\_docs_installation_next.html",
    "source_type": "documentation",
    "title": "Next.js - shadcn/ui",
    "content": "Next.js - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation...Search...⌘K92.8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents.jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext.jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext.jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry.jsonregistry-item.jsonNext.jsCopy PagePreviousNextInstall and configure shadcn/ui for Next.js.Create projectRun the init command to create a new Next.js project or to setup an existing one:pnpmnpmyarnbunpnpm dlx shadcn@latest initCopyChoose between a Next.js project or a Monorepo.Add ComponentsYou can now start adding components to your project.pnpmnpmyarnbunpnpm dlx shadcn@latest add buttonCopyThe command above will add the Button component to your project. You can then import it like this:app/page.tsxCopyimport { Button } from \"@/components/ui/button\"\nexport default function Home() {\nreturn (\n<div>\n<Button>Click me</Button>\n</div>\n)\n} InstallationVite On This PageCreate projectAdd ComponentsDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more.Vercel provides tools and infrastructure to deploy apps and features at scale.Deploy NowDeploy to VercelBuilt by shadcn at Vercel. The source code is available on GitHub.",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 309013,
      "relative_path": "documentation\\shadcn\\_docs_installation_next.html",
      "source_type": "documentation"
    },
    "token_count": 408,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "72bd1d00d0a3249af38e8aad1ce0dde3",
    "source_file": "corpus\\documentation\\shadcn\\_docs_installation_react-router.html",
    "source_type": "documentation",
    "title": "React Router - shadcn/ui",
    "content": "React Router - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation...Search...⌘K92.8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents.jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext.jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext.jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry.jsonregistry-item.jsonReact RouterCopy PagePreviousNextInstall and configure shadcn/ui for React Router.Create projectpnpmnpmyarnbunpnpm dlx create-react-router@latest my-appCopyRun the CLIRun the shadcn init command to setup your project:pnpmnpmyarnbunpnpm dlx shadcn@latest initCopyAdd ComponentsYou can now start adding components to your project.pnpmnpmyarnbunpnpm dlx shadcn@latest add buttonCopyThe command above will add the Button component to your project. You can then import it like this:app/routes/home.tsxCopyimport { Button } from \"~/components/ui/button\"\nimport type { Route } from \"./+types/home\"\nexport function meta({}: Route.MetaArgs) {\nreturn [\n{ title: \"New React Router App\" },\n{ name: \"description\", content: \"Welcome to React Router!\" },\n]\n}\nexport default function Home() {\nreturn (\n<div className=\"flex min-h-svh flex-col items-center justify-center\">\n<Button>Click me</Button>\n</div>\n)\n} LaravelRemix On This PageCreate projectRun the CLIAdd ComponentsDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more.Vercel provides tools and infrastructure to deploy apps and features at scale.Deploy NowDeploy to VercelBuilt by shadcn at Vercel. The source code is available on GitHub.",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 325111,
      "relative_path": "documentation\\shadcn\\_docs_installation_react-router.html",
      "source_type": "documentation"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "27ea18aab0f8a53d5b8aa35de487bd49",
    "source_file": "corpus\\documentation\\shadcn\\_docs_installation_tanstack-router.html",
    "source_type": "documentation",
    "title": "TanStack Router - shadcn/ui",
    "content": "TanStack Router - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation...Search...⌘K92.8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents.jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext.jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext.jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry.jsonregistry-item.jsonTanStack RouterCopy PagePreviousNextInstall and configure shadcn/ui for TanStack Router.Create projectStart by creating a new TanStack Router project:pnpmnpmyarnbunpnpm dlx create-tsrouter-app@latest my-app --template file-router --tailwind --add-ons shadcnCopyAdd ComponentsYou can now start adding components to your project.pnpmnpmyarnbunpnpm dlx shadcn@canary add buttonCopyThe command above will add the Button component to your project. You can then import it like this:src/routes/index.tsxCopyimport { createFileRoute } from \"@tanstack/react-router\"\nimport { Button } from \"@/components/ui/button\"\nexport const Route = createFileRoute(\"/\")({\ncomponent: App,\n})\nfunction App() {\nreturn (\n<div>\n<Button>Click me</Button>\n</div>\n)\n} TanStack StartManual Installation On This PageCreate projectAdd ComponentsDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more.Vercel provides tools and infrastructure to deploy apps and features at scale.Deploy NowDeploy to VercelBuilt by shadcn at Vercel. The source code is available on GitHub.",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 312136,
      "relative_path": "documentation\\shadcn\\_docs_installation_tanstack-router.html",
      "source_type": "documentation"
    },
    "token_count": 436,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "25c3f7a6f1f430e974a5ae6d57983c8a",
    "source_file": "corpus\\documentation\\shadcn\\_docs_installation_remix.html",
    "source_type": "documentation",
    "title": "Remix - shadcn/ui",
    "content": "Remix - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonRemixCopy PagePreviousNextInstall and configure shadcn/ui for Remix Note: This guide is for Remix For React Router, see the React Router guide Create projectStart by creating a new Remix project using create-remix:pnpmnpmyarnbunpnpm dlx create-remix@latest my-appCopyRun the CLIRun the shadcn init command to setup your project:pnpmnpmyarnbunpnpm dlx shadcn@latest initCopyConfigure components jsonYou will be asked a few questions to configure components json:CopyWhich color would you like to use as base color › NeutralApp structureNote: This app structure is only a suggestion You can place the files wherever you want Place the UI components in the app/components/ui folder Your own components can be placed in the app/components folder The app/lib folder contains all the utility functions We have a utils ts where we define the cn helper The app/tailwind css file contains the global CSS Install Tailwind CSSpnpmnpmyarnbunpnpm add -D tailwindcss@latest autoprefixer@latestCopyThen we create a postcss config js file:postcss config jsCopyexport default {\nplugins: {\ntailwindcss: {},\nautoprefixer: {},\n},\n}And finally we add the following to our remix config js file:remix config jsCopy/** @type {import('@remix-run/dev') AppConfig} */\nexport default { tailwind: true,\npostcss: true, };Add tailwind css to your appIn your app/root",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 374592,
      "relative_path": "documentation\\shadcn\\_docs_installation_remix.html",
      "source_type": "documentation"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "0a3d23cf012fbabe9759c79b59df4668",
    "source_file": "corpus\\documentation\\shadcn\\_docs_installation_remix.html",
    "source_type": "documentation",
    "title": "Remix - shadcn/ui",
    "content": "have a utils ts where we define the cn helper The app/tailwind css file contains the global CSS Install Tailwind CSSpnpmnpmyarnbunpnpm add -D tailwindcss@latest autoprefixer@latestCopyThen we create a postcss config js file:postcss config jsCopyexport default { plugins: { tailwindcss: {}, autoprefixer: {}, }, }And finally we add the following to our remix config js file:remix config jsCopy/** @type {import('@remix-run/dev') AppConfig} */ export default { tailwind: true, postcss: true, };Add tailwind css to your appIn your app/roottsx file, import the tailwind css file:app/root tsxCopyimport styles from \" /tailwind css url\"\nexport const links: LinksFunction = () => [\n{ rel: \"stylesheet\", href: styles }, (cssBundleHref [{ rel: \"stylesheet\", href: cssBundleHref }] : []),\n]That's itYou can now start adding components to your project pnpmnpmyarnbunpnpm dlx shadcn@latest add buttonCopyThe command above will add the Button component to your project You can then import it like this:app/routes/index tsxCopyimport { Button } from \"~/components/ui/button\"\nexport default function Home() {\nreturn (\n<div>\n<Button>Click me</Button>\n</div>\n)\n} React RouterAstro On This PageCreate projectRun the CLIConfigure components jsonApp structureInstall Tailwind CSSAdd tailwind css to your appThat's itDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 374592,
      "relative_path": "documentation\\shadcn\\_docs_installation_remix.html",
      "source_type": "documentation"
    },
    "token_count": 382,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "2091e17214c772633f6fcab0b4fabdd7",
    "source_file": "corpus\\documentation\\shadcn\\_docs_installation_tanstack.html",
    "source_type": "documentation",
    "title": "TanStack Start - shadcn/ui",
    "content": "TanStack Start - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonTanStack StartCopy PagePreviousNextInstall and configure shadcn/ui for TanStack Start Create projectStart by creating a new TanStack Start project by following the Build a Project from Scratch guide on the TanStack Start website Do not add Tailwind yet We'll install Tailwind v4 in the next step Add TailwindInstall tailwindcss and its dependencies pnpmnpmyarnbunpnpm add tailwindcss @tailwindcss/postcss postcssCopyCreate postcss config tsCreate a postcss config ts file at the root of your project postcss config tsCopyexport default {\nplugins: {\n\"@tailwindcss/postcss\": {},\n},\n}Create app/styles/app cssCreate an app css file in the app/styles directory and import tailwindcssapp/styles/app cssCopy@import \"tailwindcss\" source(\" /\");Import app cssapp/routes/__root tsxCopyimport type { ReactNode } from \"react\"\nimport { createRootRoute, Outlet } from \"@tanstack/react-router\"\nimport { Meta, Scripts } from \"@tanstack/start\"\nimport appCss from \"@/styles/app css url\"\nexport const Route = createRootRoute({\nhead: () => ({\nmeta: [\n{\ncharSet: \"utf-8\",\n},\n{\nname: \"viewport\",\ncontent: \"width=device-width, initial-scale=1\",\n},\n{\ntitle: \"TanStack Start Starter\",\n},\n],\nlinks: [\n{\nrel: \"stylesheet\",\nhref: appCss,\n},\n],\n}),\ncomponent: RootComponent,\n})Edit tsconfig json fileAdd the following code to the tsconfig",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 382500,
      "relative_path": "documentation\\shadcn\\_docs_installation_tanstack.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "d3e900e919f41989851b9f03e590b881",
    "source_file": "corpus\\documentation\\shadcn\\_docs_installation_tanstack.html",
    "source_type": "documentation",
    "title": "TanStack Start - shadcn/ui",
    "content": "{ ReactNode } from \"react\" import { createRootRoute, Outlet } from \"@tanstack/react-router\" import { Meta, Scripts } from \"@tanstack/start\" import appCss from \"@/styles/app css url\" export const Route = createRootRoute({ head: () => ({ meta: [ { charSet: \"utf-8\", }, { name: \"viewport\", content: \"width=device-width, initial-scale=1\", }, { title: \"TanStack Start Starter\", }, ], links: [ { rel: \"stylesheet\", href: appCss, }, ], }), component: RootComponent, })Edit tsconfig json fileAdd the following code to the tsconfigjson file to resolve paths tsconfig jsonCopy{\n\"compilerOptions\": {\n\"jsx\": \"react-jsx\",\n\"moduleResolution\": \"Bundler\",\n\"module\": \"ESNext\",\n\"target\": \"ES2022\",\n\"skipLibCheck\": true,\n\"strictNullChecks\": true,\n\"baseUrl\": \" \",\n\"paths\": {\n\"@/*\": [\" /app/*\"]\n}\n}\n}Run the CLIRun the shadcn init command to setup your project:pnpmnpmyarnbunpnpm dlx shadcn@canary initCopyThis will create a components json file in the root of your project and configure CSS variables inside app/styles/app css That's itYou can now start adding components to your project pnpmnpmyarnbunpnpm dlx shadcn@canary add buttonCopyThe command above will add the Button component to your project You can then import it like this:app/routes/index tsxCopyimport { Button } from \"@/components/ui/button\"\nfunction Home() {\nconst router = useRouter()\nconst state = Route useLoaderData()\nreturn (\n<div>\n<Button>Click me</Button>\n</div>\n)\n} AstroTanStack Router On This PageCreate projectAdd TailwindCreate postcss config tsCreate app/styles/app cssImport app cssEdit tsconfig json fileRun the CLIThat's itDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 382500,
      "relative_path": "documentation\\shadcn\\_docs_installation_tanstack.html",
      "source_type": "documentation"
    },
    "token_count": 472,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "63d6dc5d4003b5b81e417b7394a8ac50",
    "source_file": "corpus\\documentation\\shadcn\\_docs_javascript.html",
    "source_type": "documentation",
    "title": "JavaScript - shadcn/ui",
    "content": "JavaScript - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation...Search...⌘K92.8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents.jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext.jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext.jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry.jsonregistry-item.jsonJavaScriptCopy PagePreviousNextHow to use shadcn/ui with JavaScriptThis project and the components are written in TypeScript. We recommend using TypeScript for your project as well.\nHowever we provide a JavaScript version of the components as well. The JavaScript version is available via the cli.\nTo opt-out of TypeScript, you can use the tsx flag in your components.json file.\ncomponents.jsonCopy{\n\"style\": \"default\",\n\"tailwind\": {\n\"config\": \"tailwind.config.js\",\n\"css\": \"src/app/globals.css\",\n\"baseColor\": \"zinc\",\n\"cssVariables\": true\n},\n\"rsc\": false,\n\"tsx\": false,\n\"aliases\": {\n\"utils\": \"~/lib/utils\",\n\"components\": \"~/components\"\n}\n}\nTo configure import aliases, you can use the following jsconfig.json:\njsconfig.jsonCopy{\n\"compilerOptions\": {\n\"paths\": {\n\"@/*\": [\"./*\"]\n}\n}\n} Open in v0Blocks Deploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more.Vercel provides tools and infrastructure to deploy apps and features at scale.Deploy NowDeploy to VercelBuilt by shadcn at Vercel. The source code is available on GitHub.",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 305165,
      "relative_path": "documentation\\shadcn\\_docs_javascript.html",
      "source_type": "documentation"
    },
    "token_count": 441,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "52f065252a981b00488a0897a9d7540f",
    "source_file": "corpus\\documentation\\shadcn\\_docs_legacy.html",
    "source_type": "documentation",
    "title": "Legacy Docs - shadcn/ui",
    "content": "Legacy Docs - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation...Search...⌘K92.8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents.jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext.jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext.jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry.jsonregistry-item.jsonLegacy DocsCopy PagePreviousNextView the legacy docs for shadcn/ui and Tailwind v3.You're looking at the docs for shadcn/ui + Tailwind v4. If you're looking for the docs for shadcn/ui + Tailwind v3, you can find them here.\nView the legacy docs ChangelogComponents Deploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more.Vercel provides tools and infrastructure to deploy apps and features at scale.Deploy NowDeploy to VercelBuilt by shadcn at Vercel. The source code is available on GitHub.",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 273317,
      "relative_path": "documentation\\shadcn\\_docs_legacy.html",
      "source_type": "documentation"
    },
    "token_count": 314,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "616e0853ac93396d97e5cbf114bc193f",
    "source_file": "corpus\\documentation\\shadcn\\_docs_installation_vite.html",
    "source_type": "documentation",
    "title": "Vite - shadcn/ui",
    "content": "Vite - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonViteCopy PagePreviousNextInstall and configure shadcn/ui for Vite Create projectStart by creating a new React project using vite Select the React + TypeScript template:pnpmnpmyarnbunpnpm create vite@latestCopyAdd Tailwind CSSpnpmnpmyarnbunpnpm add tailwindcss @tailwindcss/viteCopyReplace everything in src/index css with the following:src/index cssCopy@import \"tailwindcss\";Edit tsconfig json fileThe current version of Vite splits TypeScript configuration into three files, two of which need to be edited Add the baseUrl and paths properties to the compilerOptions section of the tsconfig json and\ntsconfig app json files:tsconfig jsonCopy{\n\"files\": [],\n\"references\": [\n{\n\"path\": \" /tsconfig app json\"\n},\n{\n\"path\": \" /tsconfig node json\"\n}\n],\n\"compilerOptions\": {\n\"baseUrl\": \" \",\n\"paths\": {\n\"@/*\": [\" /src/*\"]\n}\n}\n}Edit tsconfig app json fileAdd the following code to the tsconfig app json file to resolve paths, for your IDE:tsconfig app jsonCopy{\n\"compilerOptions\": {\n// \"baseUrl\": \" \",\n\"paths\": {\n\"@/*\": [\n\" /src/*\"\n]\n}\n// }\n}Update vite config tsAdd the following code to the vite config ts so your app can resolve paths without error:pnpmnpmyarnbunpnpm add -D @types/nodeCopyvite config",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 394859,
      "relative_path": "documentation\\shadcn\\_docs_installation_vite.html",
      "source_type": "documentation"
    },
    "token_count": 484,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "286f71e3c7bd236261bc63616f2e459a",
    "source_file": "corpus\\documentation\\shadcn\\_docs_installation_vite.html",
    "source_type": "documentation",
    "title": "Vite - shadcn/ui",
    "content": "} ], \"compilerOptions\": { \"baseUrl\": \" \", \"paths\": { \"@/*\": [\" /src/*\"] } } }Edit tsconfig app json fileAdd the following code to the tsconfig app json file to resolve paths, for your IDE:tsconfig app jsonCopy{ \"compilerOptions\": { // \"baseUrl\": \" \", \"paths\": { \"@/*\": [ \" /src/*\" ] } // } }Update vite config tsAdd the following code to the vite config ts so your app can resolve paths without error:pnpmnpmyarnbunpnpm add -D @types/nodeCopyvite configtsCopyimport path from \"path\"\nimport tailwindcss from \"@tailwindcss/vite\"\nimport react from \"@vitejs/plugin-react\"\nimport { defineConfig } from \"vite\"\n// https://vite dev/config/\nexport default defineConfig({\nplugins: [react(), tailwindcss()],\nresolve: {\nalias: {\n\"@\": path resolve(__dirname, \" /src\"),\n},\n},\n})Run the CLIRun the shadcn init command to setup your project:pnpmnpmyarnbunpnpm dlx shadcn@latest initCopyYou will be asked a few questions to configure components json CopyWhich color would you like to use as base color › NeutralAdd ComponentsYou can now start adding components to your project pnpmnpmyarnbunpnpm dlx shadcn@latest add buttonCopyThe command above will add the Button component to your project You can then import it like this:src/App tsxCopyimport { Button } from \"@/components/ui/button\"\nfunction App() {\nreturn (\n<div className=\"flex min-h-svh flex-col items-center justify-center\">\n<Button>Click me</Button>\n</div>\n)\n}\nexport default App Next jsLaravel On This PageCreate projectAdd Tailwind CSSEdit tsconfig json fileEdit tsconfig app json fileUpdate vite config tsRun the CLIAdd ComponentsDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 394859,
      "relative_path": "documentation\\shadcn\\_docs_installation_vite.html",
      "source_type": "documentation"
    },
    "token_count": 463,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "0a4f8485d594a522a41b7a94a37ac8d5",
    "source_file": "corpus\\documentation\\shadcn\\_docs_registry.html",
    "source_type": "documentation",
    "title": "Registry - shadcn/ui",
    "content": "Registry - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation...Search...⌘K92.8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents.jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext.jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext.jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry.jsonregistry-item.jsonRegistryCopy PagePreviousNextRun your own code registry.You can use the shadcn CLI to run your own code registry. Running your own registry allows you to distribute your custom components, hooks, pages, config, rules and other files to any project.\nNote: The registry works with any project type and any framework, and is\nnot limited to React.\nA distribution system for code\nRequirements\nYou are free to design and host your custom registry as you see fit. The only requirement is that your registry items must be valid JSON files that conform to the registry-item schema specification.\nIf you'd like to see an example of a registry, we have a template project for you to use as a starting point. RemixGetting Started On This PageRequirementsDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more.Vercel provides tools and infrastructure to deploy apps and features at scale.Deploy NowDeploy to VercelBuilt by shadcn at Vercel. The source code is available on GitHub.",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 282299,
      "relative_path": "documentation\\shadcn\\_docs_registry.html",
      "source_type": "documentation"
    },
    "token_count": 395,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3946d640f473d3b064223f52d264a628",
    "source_file": "corpus\\documentation\\shadcn\\_docs_installation_manual.html",
    "source_type": "documentation",
    "title": "Manual Installation - shadcn/ui",
    "content": "Manual Installation - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonManual InstallationCopy PagePreviousNextAdd dependencies to your project manually Add Tailwind CSSComponents are styled using Tailwind CSS You need to install Tailwind CSS in your project Follow the Tailwind CSS installation instructions to get started Add dependenciesAdd the following dependencies to your project:pnpmnpmyarnbunpnpm add class-variance-authority clsx tailwind-merge lucide-react tw-animate-cssCopyConfigure path aliasesConfigure the path aliases in your tsconfig json file tsconfig jsonCopy{\n\"compilerOptions\": {\n\"baseUrl\": \" \",\n\"paths\": {\n\"@/*\": [\" /*\"]\n}\n}\n}The @ alias is a preference You can use other aliases if you want Configure stylesAdd the following to your styles/globals css file You can learn more about using CSS variables for theming in the theming section Expandsrc/styles/globals cssCopy@import \"tailwindcss\";\n@import \"tw-animate-css\";\n@custom-variant dark (&:is( dark *));\n:root {\n--background: oklch(1 0 0);\n--foreground: oklch(0 145 0 0);\n--card: oklch(1 0 0);\n--card-foreground: oklch(0 145 0 0);\n--popover: oklch(1 0 0);\n--popover-foreground: oklch(0 145 0 0);\n--primary: oklch(0 205 0 0);\n--primary-foreground: oklch(0",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 486645,
      "relative_path": "documentation\\shadcn\\_docs_installation_manual.html",
      "source_type": "documentation"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 8
  },
  {
    "id": "819b973e1d33db5a27447691d3b6c312",
    "source_file": "corpus\\documentation\\shadcn\\_docs_installation_manual.html",
    "source_type": "documentation",
    "title": "Manual Installation - shadcn/ui",
    "content": "can use other aliases if you want Configure stylesAdd the following to your styles/globals css file You can learn more about using CSS variables for theming in the theming section Expandsrc/styles/globals cssCopy@import \"tailwindcss\"; @import \"tw-animate-css\"; @custom-variant dark (&:is( dark *)); :root { --background: oklch(1 0 0); --foreground: oklch(0 145 0 0); --card: oklch(1 0 0); --card-foreground: oklch(0 145 0 0); --popover: oklch(1 0 0); --popover-foreground: oklch(0 145 0 0); --primary: oklch(0 205 0 0); --primary-foreground: oklch(0985 0 0);\n--secondary: oklch(0 97 0 0);\n--secondary-foreground: oklch(0 205 0 0);\n--muted: oklch(0 97 0 0);\n--muted-foreground: oklch(0 556 0 0);\n--accent: oklch(0 97 0 0);\n--accent-foreground: oklch(0 205 0 0);\n--destructive: oklch(0 577 0 245 27 325);\n--destructive-foreground: oklch(0 577 0 245 27 325);\n--border: oklch(0 922 0 0);\n--input: oklch(0 922 0 0);\n--ring: oklch(0 708 0 0);\n--chart-1: oklch(0 646 0 222 41 116);\n--chart-2: oklch(0 6 0 118 184 704);\n--chart-3: oklch(0 398 0 07 227 392);\n--chart-4: oklch(0 828 0 189 84 429);\n--chart-5: oklch(0 769 0 188 70 08);\n--radius: 0 625rem;\n--sidebar: oklch(0 985 0 0);\n--sidebar-foreground: oklch(0 145 0 0);\n--sidebar-primary: oklch(0",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 486645,
      "relative_path": "documentation\\shadcn\\_docs_installation_manual.html",
      "source_type": "documentation"
    },
    "token_count": 531,
    "chunk_index": 1,
    "total_chunks": 8
  },
  {
    "id": "4556e9ef319b03ceb3061f64f0bea69a",
    "source_file": "corpus\\documentation\\shadcn\\_docs_installation_manual.html",
    "source_type": "documentation",
    "title": "Manual Installation - shadcn/ui",
    "content": "0 245 27 325); --destructive-foreground: oklch(0 577 0 245 27 325); --border: oklch(0 922 0 0); --input: oklch(0 922 0 0); --ring: oklch(0 708 0 0); --chart-1: oklch(0 646 0 222 41 116); --chart-2: oklch(0 6 0 118 184 704); --chart-3: oklch(0 398 0 07 227 392); --chart-4: oklch(0 828 0 189 84 429); --chart-5: oklch(0 769 0 188 70 08); --radius: 0 625rem; --sidebar: oklch(0 985 0 0); --sidebar-foreground: oklch(0 145 0 0); --sidebar-primary: oklch(0205 0 0);\n--sidebar-primary-foreground: oklch(0 985 0 0);\n--sidebar-accent: oklch(0 97 0 0);\n--sidebar-accent-foreground: oklch(0 205 0 0);\n--sidebar-border: oklch(0 922 0 0);\n--sidebar-ring: oklch(0 708 0 0);\n} dark {\n--background: oklch(0 145 0 0);\n--foreground: oklch(0 985 0 0);\n--card: oklch(0 145 0 0);\n--card-foreground: oklch(0 985 0 0);\n--popover: oklch(0 145 0 0);\n--popover-foreground: oklch(0 985 0 0);\n--primary: oklch(0 985 0 0);\n--primary-foreground: oklch(0 205 0 0);\n--secondary: oklch(0 269 0 0);\n--secondary-foreground: oklch(0 985 0 0);\n--muted: oklch(0 269 0 0);\n--muted-foreground: oklch(0",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 486645,
      "relative_path": "documentation\\shadcn\\_docs_installation_manual.html",
      "source_type": "documentation"
    },
    "token_count": 510,
    "chunk_index": 2,
    "total_chunks": 8
  },
  {
    "id": "a0eeb5181974b605c2f8327ba46d81a8",
    "source_file": "corpus\\documentation\\shadcn\\_docs_installation_manual.html",
    "source_type": "documentation",
    "title": "Manual Installation - shadcn/ui",
    "content": "0); --sidebar-accent-foreground: oklch(0 205 0 0); --sidebar-border: oklch(0 922 0 0); --sidebar-ring: oklch(0 708 0 0); } dark { --background: oklch(0 145 0 0); --foreground: oklch(0 985 0 0); --card: oklch(0 145 0 0); --card-foreground: oklch(0 985 0 0); --popover: oklch(0 145 0 0); --popover-foreground: oklch(0 985 0 0); --primary: oklch(0 985 0 0); --primary-foreground: oklch(0 205 0 0); --secondary: oklch(0 269 0 0); --secondary-foreground: oklch(0 985 0 0); --muted: oklch(0 269 0 0); --muted-foreground: oklch(0708 0 0);\n--accent: oklch(0 269 0 0);\n--accent-foreground: oklch(0 985 0 0);\n--destructive: oklch(0 396 0 141 25 723);\n--destructive-foreground: oklch(0 637 0 237 25 331);\n--border: oklch(0 269 0 0);\n--input: oklch(0 269 0 0);\n--ring: oklch(0 439 0 0);\n--chart-1: oklch(0 488 0 243 264 376);\n--chart-2: oklch(0 696 0 17 162 48);\n--chart-3: oklch(0 769 0 188 70 08);\n--chart-4: oklch(0 627 0 265 303 9);\n--chart-5: oklch(0 645 0 246 16 439);\n--sidebar: oklch(0 205 0 0);\n--sidebar-foreground: oklch(0 985 0 0);\n--sidebar-primary: oklch(0 488 0 243 264",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 486645,
      "relative_path": "documentation\\shadcn\\_docs_installation_manual.html",
      "source_type": "documentation"
    },
    "token_count": 520,
    "chunk_index": 3,
    "total_chunks": 8
  },
  {
    "id": "335708932879bb02aa4c9224983da053",
    "source_file": "corpus\\documentation\\shadcn\\_docs_installation_manual.html",
    "source_type": "documentation",
    "title": "Manual Installation - shadcn/ui",
    "content": "141 25 723); --destructive-foreground: oklch(0 637 0 237 25 331); --border: oklch(0 269 0 0); --input: oklch(0 269 0 0); --ring: oklch(0 439 0 0); --chart-1: oklch(0 488 0 243 264 376); --chart-2: oklch(0 696 0 17 162 48); --chart-3: oklch(0 769 0 188 70 08); --chart-4: oklch(0 627 0 265 303 9); --chart-5: oklch(0 645 0 246 16 439); --sidebar: oklch(0 205 0 0); --sidebar-foreground: oklch(0 985 0 0); --sidebar-primary: oklch(0 488 0 243 264376);\n--sidebar-primary-foreground: oklch(0 985 0 0);\n--sidebar-accent: oklch(0 269 0 0);\n--sidebar-accent-foreground: oklch(0 985 0 0);\n--sidebar-border: oklch(0 269 0 0);\n--sidebar-ring: oklch(0",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 486645,
      "relative_path": "documentation\\shadcn\\_docs_installation_manual.html",
      "source_type": "documentation"
    },
    "token_count": 308,
    "chunk_index": 4,
    "total_chunks": 8
  },
  {
    "id": "0d2dbba64568d302018fea72a8299a87",
    "source_file": "corpus\\documentation\\shadcn\\_docs_installation_manual.html",
    "source_type": "documentation",
    "title": "Manual Installation - shadcn/ui",
    "content": "439 0 0); --chart-1: oklch(0 488 0 243 264 376); --chart-2: oklch(0 696 0 17 162 48); --chart-3: oklch(0 769 0 188 70 08); --chart-4: oklch(0 627 0 265 303 9); --chart-5: oklch(0 645 0 246 16 439); --sidebar: oklch(0 205 0 0); --sidebar-foreground: oklch(0 985 0 0); --sidebar-primary: oklch(0 488 0 243 264376); --sidebar-primary-foreground: oklch(0 985 0 0); --sidebar-accent: oklch(0 269 0 0); --sidebar-accent-foreground: oklch(0 985 0 0); --sidebar-border: oklch(0 269 0 0); --sidebar-ring: oklch(0439 0 0);\n}\n@theme inline {\n--color-background: var(--background);\n--color-foreground: var(--foreground);\n--color-card: var(--card);\n--color-card-foreground: var(--card-foreground);\n--color-popover: var(--popover);\n--color-popover-foreground: var(--popover-foreground);\n--color-primary: var(--primary);\n--color-primary-foreground: var(--primary-foreground);\n--color-secondary: var(--secondary);\n--color-secondary-foreground: var(--secondary-foreground);\n--color-muted: var(--muted);\n--color-muted-foreground: var(--muted-foreground);\n--color-accent: var(--accent);\n--color-accent-foreground: var(--accent-foreground);\n--color-destructive: var(--destructive);\n--color-destructive-foreground: var(--destructive-foreground);\n--color-border: var(--border);\n--color-input: var(--input);\n--color-ring: var(--ring);\n--color-chart-1: var(--chart-1);\n--color-chart-2: var(--chart-2);\n--color-chart-3: var(--chart-3);\n--color-chart-4: var(--chart-4);\n--color-chart-5: var(--chart-5);\n--radius-sm: calc(var(--radius) - 4px);\n--radius-md: calc(var(--radius) - 2px);\n--radius-lg: var(--radius);\n--radius-xl: calc(var(--radius) + 4px);\n--color-sidebar: var(--sidebar);\n--color-sidebar-foreground: var(--sidebar-foreground);\n--color-sidebar-primary: var(--sidebar-primary);\n--color-sidebar-primary-foreground: var(--sidebar-primary-foreground);\n--color-sidebar-accent: var(--sidebar-accent);\n--color-sidebar-accent-foreground: var(--sidebar-accent-foreground);\n--color-sidebar-border: var(--sidebar-border);\n--color-sidebar-ring: var(--sidebar-ring);\n}\n@layer base {\n* {\n@apply border-border outline-ring/50;\n}\nbody {\n@apply bg-background text-foreground;\n}\n}ExpandAdd a cn helperlib/utils",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 486645,
      "relative_path": "documentation\\shadcn\\_docs_installation_manual.html",
      "source_type": "documentation"
    },
    "token_count": 681,
    "chunk_index": 5,
    "total_chunks": 8
  },
  {
    "id": "ca2ed93d04818589aae4bed473262b95",
    "source_file": "corpus\\documentation\\shadcn\\_docs_installation_manual.html",
    "source_type": "documentation",
    "title": "Manual Installation - shadcn/ui",
    "content": "--color-muted-foreground: var(--muted-foreground); --color-accent: var(--accent); --color-accent-foreground: var(--accent-foreground); --color-destructive: var(--destructive); --color-destructive-foreground: var(--destructive-foreground); --color-border: var(--border); --color-input: var(--input); --color-ring: var(--ring); --color-chart-1: var(--chart-1); --color-chart-2: var(--chart-2); --color-chart-3: var(--chart-3); --color-chart-4: var(--chart-4); --color-chart-5: var(--chart-5); --radius-sm: calc(var(--radius) - 4px); --radius-md: calc(var(--radius) - 2px); --radius-lg: var(--radius); --radius-xl: calc(var(--radius) + 4px); --color-sidebar: var(--sidebar); --color-sidebar-foreground: var(--sidebar-foreground); --color-sidebar-primary: var(--sidebar-primary); --color-sidebar-primary-foreground: var(--sidebar-primary-foreground); --color-sidebar-accent: var(--sidebar-accent); --color-sidebar-accent-foreground: var(--sidebar-accent-foreground); --color-sidebar-border: var(--sidebar-border); --color-sidebar-ring: var(--sidebar-ring); } @layer base { * { @apply border-border outline-ring/50; } body { @apply bg-background text-foreground; } }ExpandAdd a cn helperlib/utilstsCopyimport { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\nexport function cn( inputs: ClassValue[]) {\nreturn twMerge(clsx(inputs))\n}Create a components json fileCreate a components json file in the root of your project components jsonCopy{\n\"$schema\": \"https://ui shadcn com/schema json\",\n\"style\": \"new-york\",\n\"rsc\": false,\n\"tsx\": true,\n\"tailwind\": {\n\"config\": \"\",\n\"css\": \"src/styles/globals",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 486645,
      "relative_path": "documentation\\shadcn\\_docs_installation_manual.html",
      "source_type": "documentation"
    },
    "token_count": 437,
    "chunk_index": 6,
    "total_chunks": 8
  },
  {
    "id": "9b5a18a43ce9af0a7f6c5de3c2f14d9c",
    "source_file": "corpus\\documentation\\shadcn\\_docs_installation_manual.html",
    "source_type": "documentation",
    "title": "Manual Installation - shadcn/ui",
    "content": "var(--sidebar-ring); } @layer base { * { @apply border-border outline-ring/50; } body { @apply bg-background text-foreground; } }ExpandAdd a cn helperlib/utilstsCopyimport { clsx, type ClassValue } from \"clsx\" import { twMerge } from \"tailwind-merge\" export function cn( inputs: ClassValue[]) { return twMerge(clsx(inputs)) }Create a components json fileCreate a components json file in the root of your project components jsonCopy{ \"$schema\": \"https://ui shadcn com/schema json\", \"style\": \"new-york\", \"rsc\": false, \"tsx\": true, \"tailwind\": { \"config\": \"\", \"css\": \"src/styles/globalscss\",\n\"baseColor\": \"neutral\",\n\"cssVariables\": true,\n\"prefix\": \"\"\n},\n\"aliases\": {\n\"components\": \"@/components\",\n\"utils\": \"@/lib/utils\",\n\"ui\": \"@/components/ui\",\n\"lib\": \"@/lib\",\n\"hooks\": \"@/hooks\"\n},\n\"iconLibrary\": \"lucide\"\n}That's itYou can now start adding components to your project TanStack RouterDark Mode On This PageAdd Tailwind CSSAdd dependenciesConfigure path aliasesConfigure stylesAdd a cn helperCreate a components json fileThat's itDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 486645,
      "relative_path": "documentation\\shadcn\\_docs_installation_manual.html",
      "source_type": "documentation"
    },
    "token_count": 328,
    "chunk_index": 7,
    "total_chunks": 8
  },
  {
    "id": "837d640a18e625330c6ddbec5a780e7e",
    "source_file": "corpus\\documentation\\shadcn\\_docs_registry_faq.html",
    "source_type": "documentation",
    "title": "FAQ - shadcn/ui",
    "content": "FAQ - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonFAQCopy PagePreviousNextFrequently asked questions about running a registry Frequently asked questions\nWhat does a complex component look like Here's an example of a complex component that installs a page, two components, a hook, a format-date utils and a config file Copy{\n\"$schema\": \"https://ui shadcn com/schema/registry-item json\",\n\"name\": \"hello-world\",\n\"title\": \"Hello World\",\n\"type\": \"registry:block\",\n\"description\": \"A complex hello world component\",\n\"files\": [\n{\n\"path\": \"registry/new-york/hello-world/page tsx\",\n\"type\": \"registry:page\",\n\"target\": \"app/hello/page tsx\"\n},\n{\n\"path\": \"registry/new-york/hello-world/components/hello-world tsx\",\n\"type\": \"registry:component\"\n},\n{\n\"path\": \"registry/new-york/hello-world/components/formatted-message tsx\",\n\"type\": \"registry:component\"\n},\n{\n\"path\": \"registry/new-york/hello-world/hooks/use-hello ts\",\n\"type\": \"registry:hook\"\n},\n{\n\"path\": \"registry/new-york/hello-world/lib/format-date ts\",\n\"type\": \"registry:utils\"\n},\n{\n\"path\": \"registry/new-york/hello-world/hello config ts\",\n\"type\": \"registry:file\",\n\"target\": \"~/hello config ts\"\n}\n]\n}\nHow do I add a new Tailwind color To add a new color you need to add it to cssVars under light and dark keys Copy{\n\"$schema\": \"https://ui shadcn com/schema/registry-item",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 338121,
      "relative_path": "documentation\\shadcn\\_docs_registry_faq.html",
      "source_type": "documentation"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "a57408c7038bec19539e10f409f15b3f",
    "source_file": "corpus\\documentation\\shadcn\\_docs_registry_faq.html",
    "source_type": "documentation",
    "title": "FAQ - shadcn/ui",
    "content": "\"target\": \"app/hello/page tsx\" }, { \"path\": \"registry/new-york/hello-world/components/hello-world tsx\", \"type\": \"registry:component\" }, { \"path\": \"registry/new-york/hello-world/components/formatted-message tsx\", \"type\": \"registry:component\" }, { \"path\": \"registry/new-york/hello-world/hooks/use-hello ts\", \"type\": \"registry:hook\" }, { \"path\": \"registry/new-york/hello-world/lib/format-date ts\", \"type\": \"registry:utils\" }, { \"path\": \"registry/new-york/hello-world/hello config ts\", \"type\": \"registry:file\", \"target\": \"~/hello config ts\" } ] } How do I add a new Tailwind color To add a new color you need to add it to cssVars under light and dark keys Copy{ \"$schema\": \"https://ui shadcn com/schema/registry-itemjson\",\n\"name\": \"hello-world\",\n\"title\": \"Hello World\",\n\"type\": \"registry:block\",\n\"description\": \"A complex hello world component\",\n\"files\": [\n// ],\n\"cssVars\": {\n\"light\": {\n\"brand-background\": \"20 14 3% 4 1%\",\n\"brand-accent\": \"20 14 3% 4 1%\"\n},\n\"dark\": {\n\"brand-background\": \"20 14 3% 4 1%\",\n\"brand-accent\": \"20 14 3% 4 1%\"\n}\n}\n}\nThe CLI will update the project CSS file Once updated, the new colors will be available to be used as utility classes: bg-brand and text-brand-accent How do I add or override a Tailwind theme variable To add or override a theme variable you add it to cssVars theme under the key you want to add or override Copy{\n\"$schema\": \"https://ui shadcn com/schema/registry-item json\",\n\"name\": \"hello-world\",\n\"title\": \"Hello World\",\n\"type\": \"registry:block\",\n\"description\": \"A complex hello world component\",\n\"files\": [\n// ],\n\"cssVars\": {\n\"theme\": {\n\"text-base\": \"3rem\",\n\"ease-in-out\": \"cubic-bezier(0 4, 0, 0",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 338121,
      "relative_path": "documentation\\shadcn\\_docs_registry_faq.html",
      "source_type": "documentation"
    },
    "token_count": 472,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "a95d6bce87ea50e527171cf39b29028b",
    "source_file": "corpus\\documentation\\shadcn\\_docs_registry_faq.html",
    "source_type": "documentation",
    "title": "FAQ - shadcn/ui",
    "content": "available to be used as utility classes: bg-brand and text-brand-accent How do I add or override a Tailwind theme variable To add or override a theme variable you add it to cssVars theme under the key you want to add or override Copy{ \"$schema\": \"https://ui shadcn com/schema/registry-item json\", \"name\": \"hello-world\", \"title\": \"Hello World\", \"type\": \"registry:block\", \"description\": \"A complex hello world component\", \"files\": [ // ], \"cssVars\": { \"theme\": { \"text-base\": \"3rem\", \"ease-in-out\": \"cubic-bezier(0 4, 0, 02, 1)\",\n\"font-heading\": \"Poppins, sans-serif\"\n}\n}\n} Getting StartedOpen in v0 On This PageFrequently asked questionsWhat does a complex component look like How do I add a new Tailwind color How do I add or override a Tailwind theme variable Deploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 338121,
      "relative_path": "documentation\\shadcn\\_docs_registry_faq.html",
      "source_type": "documentation"
    },
    "token_count": 261,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "93c289965a2876328901584241335abf",
    "source_file": "corpus\\documentation\\shadcn\\_docs_monorepo.html",
    "source_type": "documentation",
    "title": "Monorepo - shadcn/ui",
    "content": "Monorepo - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonMonorepoCopy PagePreviousNextUsing shadcn/ui components and CLI in a monorepo Until now, using shadcn/ui in a monorepo was a bit of a pain You could add\ncomponents using the CLI, but you had to manage where the components\nwere installed and manually fix import paths With the new monorepo support in the CLI, we've made it a lot easier to use\nshadcn/ui in a monorepo The CLI now understands the monorepo structure and will install the components,\ndependencies and registry dependencies to the correct paths and handle imports\nfor you Getting started\nCreate a new monorepo projectTo create a new monorepo project, run the init command You will be prompted\nto select the type of project you are creating pnpmnpmyarnbunpnpm dlx shadcn@canary initCopySelect the Next js (Monorepo) option Copy Would you like to start a new project Next js\n❯   Next js (Monorepo)This will create a new monorepo project with two workspaces: web and ui,\nand Turborepo as the build system Everything is set up for you, so you can start adding components to your project Note: The monorepo uses React 19 and Tailwind CSS v4 Add components to your projectTo add components to your project, run the add command in the path of your app",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 387517,
      "relative_path": "documentation\\shadcn\\_docs_monorepo.html",
      "source_type": "documentation"
    },
    "token_count": 473,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "13d451189104de8369d98f92169fb07b",
    "source_file": "corpus\\documentation\\shadcn\\_docs_monorepo.html",
    "source_type": "documentation",
    "title": "Monorepo - shadcn/ui",
    "content": "you like to start a new project Next js ❯ Next js (Monorepo)This will create a new monorepo project with two workspaces: web and ui, and Turborepo as the build system Everything is set up for you, so you can start adding components to your project Note: The monorepo uses React 19 and Tailwind CSS v4 Add components to your projectTo add components to your project, run the add command in the path of your appCopycd apps/webpnpmnpmyarnbunpnpm dlx shadcn@canary add [COMPONENT]CopyThe CLI will figure out what type of component you are adding and install the\ncorrect files to the correct path For example, if you run npx shadcn@canary add button, the CLI will install the button component under packages/ui and update the import path for components in apps/web If you run npx shadcn@canary add login-01, the CLI will install the button, label, input and card components under packages/ui and the login-form component under apps/web/components Importing componentsYou can import components from the @workspace/ui package as follows:Copyimport { Button } from \"@workspace/ui/components/button\"You can also import hooks and utilities from the @workspace/ui package Copyimport { useTheme } from \"@workspace/ui/hooks/use-theme\"\nimport { cn } from \"@workspace/ui/lib/utils\"\nFile Structure\nWhen you create a new monorepo project, the CLI will create the following file structure:\nCopyapps\n└── web         # Your app goes here ├── app\n│   └── page tsx\n├── components\n│   └── login-form tsx\n├── components json\n└── package json\npackages\n└── ui          # Your components and dependencies are installed here ├── src\n│   ├── components\n│   │   └── button tsx\n│   ├── hooks\n│   ├── lib\n│   │   └── utils ts\n│   └── styles\n│       └── globals css\n├── components json\n└── package json\npackage json\nturbo json\nRequirements\nEvery workspace must have a components json file A package json file tells npm how to install the dependencies A components json file tells the CLI how and where to install components The components json file must properly define aliases for the workspace",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 387517,
      "relative_path": "documentation\\shadcn\\_docs_monorepo.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "98b2d48f5747a04e5c7e864115f8689f",
    "source_file": "corpus\\documentation\\shadcn\\_docs_monorepo.html",
    "source_type": "documentation",
    "title": "Monorepo - shadcn/ui",
    "content": "│ └── button tsx │ ├── hooks │ ├── lib │ │ └── utils ts │ └── styles │ └── globals css ├── components json └── package json package json turbo json Requirements Every workspace must have a components json file A package json file tells npm how to install the dependencies A components json file tells the CLI how and where to install components The components json file must properly define aliases for the workspaceThis tells the CLI how to import components, hooks, utilities, etc apps/web/components jsonCopy{\n\"$schema\": \"https://ui shadcn com/schema json\",\n\"style\": \"new-york\",\n\"rsc\": true,\n\"tsx\": true,\n\"tailwind\": {\n\"config\": \"\",\n\"css\": \" / /packages/ui/src/styles/globals css\",\n\"baseColor\": \"zinc\",\n\"cssVariables\": true\n},\n\"iconLibrary\": \"lucide\",\n\"aliases\": {\n\"components\": \"@/components\",\n\"hooks\": \"@/hooks\",\n\"lib\": \"@/lib\",\n\"utils\": \"@workspace/ui/lib/utils\",\n\"ui\": \"@workspace/ui/components\"\n}\n}\npackages/ui/components jsonCopy{\n\"$schema\": \"https://ui shadcn com/schema json\",\n\"style\": \"new-york\",\n\"rsc\": true,\n\"tsx\": true,\n\"tailwind\": {\n\"config\": \"\",\n\"css\": \"src/styles/globals css\",\n\"baseColor\": \"zinc\",\n\"cssVariables\": true\n},\n\"iconLibrary\": \"lucide\",\n\"aliases\": {\n\"components\": \"@workspace/ui/components\",\n\"utils\": \"@workspace/ui/lib/utils\",\n\"hooks\": \"@workspace/ui/hooks\",\n\"lib\": \"@workspace/ui/lib\",\n\"ui\": \"@workspace/ui/components\"\n}\n}\nEnsure you have the same style, iconLibrary and baseColor in both components json files For Tailwind CSS v4, leave the tailwind config empty in the components json file By following these requirements, the CLI will be able to install ui components, blocks, libs and hooks to the correct paths and handle imports for you CLIOpen in v0 On This PageGetting startedCreate a new monorepo projectAdd components to your projectImporting componentsFile StructureRequirementsDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 387517,
      "relative_path": "documentation\\shadcn\\_docs_monorepo.html",
      "source_type": "documentation"
    },
    "token_count": 488,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "af7bee54199f8412a1da238057c1e497",
    "source_file": "corpus\\documentation\\shadcn\\_docs_monorepo.html",
    "source_type": "documentation",
    "title": "Monorepo - shadcn/ui",
    "content": "leave the tailwind config empty in the components json file By following these requirements, the CLI will be able to install ui components, blocks, libs and hooks to the correct paths and handle imports for you CLIOpen in v0 On This PageGetting startedCreate a new monorepo projectAdd components to your projectImporting componentsFile StructureRequirementsDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scaleDeploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 387517,
      "relative_path": "documentation\\shadcn\\_docs_monorepo.html",
      "source_type": "documentation"
    },
    "token_count": 130,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "7ddcd5b1d8f3c6d17314b76368db9877",
    "source_file": "corpus\\documentation\\shadcn\\_docs_registry_getting-started.html",
    "source_type": "documentation",
    "title": "Getting Started - shadcn/ui",
    "content": "Getting Started - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonGetting StartedCopy PagePreviousNextLearn how to get setup and run your own component registry This guide will walk you through the process of setting up your own component registry It assumes you already have a project with components and would like to turn it into a registry If you're starting a new registry project, you can use the registry template as a starting point We have already configured it for you registry json\nThe registry json file is only required if you're using the shadcn CLI to build your registry If you're using a different build system, you can skip this step as long as your build system produces valid JSON files that conform to the registry-item schema specification Add a registry json fileCreate a registry json file in the root of your project Your project can be a Next js, Remix, Vite, or any other project that supports React registry jsonCopy{\n\"$schema\": \"https://ui shadcn com/schema/registry json\",\n\"name\": \"acme\",\n\"homepage\": \"https://acme com\",\n\"items\": [\n// ]\n}This registry json file must conform to the registry schema specification Add a registry item\nCreate your componentAdd your first component Here's an example of a simple <HelloWorld /> component:registry/new-york/hello-world/hello-world tsxCopyimport { Button } from \"@/components/ui/button\"\nexport function HelloWorld() {\nreturn <Button>Hello World</Button>\n}Note: This example places the component in the registry/new-york\ndirectory You can place it anywhere in your project as long as you set the\ncorrect path in the registry",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 418078,
      "relative_path": "documentation\\shadcn\\_docs_registry_getting-started.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "c0622da921bffcf4b0c1c5d89fda7f7e",
    "source_file": "corpus\\documentation\\shadcn\\_docs_registry_getting-started.html",
    "source_type": "documentation",
    "title": "Getting Started - shadcn/ui",
    "content": "\"items\": [ // ] }This registry json file must conform to the registry schema specification Add a registry item Create your componentAdd your first component Here's an example of a simple <HelloWorld /> component:registry/new-york/hello-world/hello-world tsxCopyimport { Button } from \"@/components/ui/button\" export function HelloWorld() { return <Button>Hello World</Button> }Note: This example places the component in the registry/new-york directory You can place it anywhere in your project as long as you set the correct path in the registryjson file and you follow the registry/[NAME]\ndirectory structure Copyregistry\n└── new-york\n└── hello-world\n└── hello-world tsxAdd your component to the registryTo add your component to the registry, you need to add your component definition to registry json registry jsonCopy{\n\"$schema\": \"https://ui shadcn com/schema/registry json\",\n\"name\": \"acme\",\n\"homepage\": \"https://acme com\",\n\"items\": [\n{\n\"name\": \"hello-world\",\n\"type\": \"registry:block\",\n\"title\": \"Hello World\",\n\"description\": \"A simple hello world component \",\n\"files\": [\n{\n\"path\": \"registry/new-york/hello-world/hello-world tsx\",\n\"type\": \"registry:component\"\n}\n]\n}\n]\n}You define your registry item by adding a name, type, title, description and files For every file you add, you must specify the path and type of the file The path is the relative path to the file from the root of your project The type is the type of the file You can read more about the registry item schema and file types in the registry item schema docs Build your registry\nInstall the shadcn CLINote: the build command is currently only available in the shadcn@canary version of the CLI pnpmnpmyarnbunpnpm add shadcn@canaryCopyAdd a build scriptAdd a registry:build script to your package json file package jsonCopy{\n\"scripts\": {\n\"registry:build\": \"shadcn build\"\n}\n}Run the build scriptRun the build script to generate the registry JSON files pnpmnpmyarnbunpnpm registry:buildCopyNote: By default, the build script will generate the registry JSON files\nin public/r e g public/r/hello-world json You can change the output directory by passing the --output option",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 418078,
      "relative_path": "documentation\\shadcn\\_docs_registry_getting-started.html",
      "source_type": "documentation"
    },
    "token_count": 496,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "088752346be87d3966dbc99da8beb58c",
    "source_file": "corpus\\documentation\\shadcn\\_docs_registry_getting-started.html",
    "source_type": "documentation",
    "title": "Getting Started - shadcn/ui",
    "content": "is currently only available in the shadcn@canary version of the CLI pnpmnpmyarnbunpnpm add shadcn@canaryCopyAdd a build scriptAdd a registry:build script to your package json file package jsonCopy{ \"scripts\": { \"registry:build\": \"shadcn build\" } }Run the build scriptRun the build script to generate the registry JSON files pnpmnpmyarnbunpnpm registry:buildCopyNote: By default, the build script will generate the registry JSON files in public/r e g public/r/hello-world json You can change the output directory by passing the --output optionSee the shadcn build command for more information Serve your registry\nIf you're running your registry on Next js, you can now serve your registry by running the next server The command might differ for other frameworks pnpmnpmyarnbunpnpm devCopy\nYour files will now be served at http://localhost:3000/r/[NAME] json eg http://localhost:3000/r/hello-world json Publish your registry\nTo make your registry available to other developers, you can publish it by deploying your project to a public URL Adding Auth\nThe shadcn CLI does not offer a built-in way to add auth to your registry We recommend handling authorization on your registry server A common simple approach is to use a token query parameter to authenticate requests to your registry e g http://localhost:3000/r/hello-world json token=[SECURE_TOKEN_HERE] Use the secure token to authenticate requests and return a 401 Unauthorized response if the token is invalid Both the shadcn CLI and Open in v0 will handle the 401 response and display a message to the user Note: Make sure to encrypt and expire tokens Guidelines\nHere are some guidelines to follow when building components for a registry Place your registry item in the registry/[STYLE]/[NAME] directory I'm using new-york as an example It can be anything you want as long as it's nested under the registry directory The following properties are required for the block definition: name, description, type and files Make sure to list all registry dependencies in registryDependencies A registry dependency is the name of the component in the registry eg input, button, card, etc or a URL to a registry item eg http://localhost:3000/r/editor json Make sure to list all dependencies in dependencies A dependency is the name of the package in the registry eg",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 418078,
      "relative_path": "documentation\\shadcn\\_docs_registry_getting-started.html",
      "source_type": "documentation"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "5e8e557207d55bf9c00e054b7fb9249e",
    "source_file": "corpus\\documentation\\shadcn\\_docs_registry_getting-started.html",
    "source_type": "documentation",
    "title": "Getting Started - shadcn/ui",
    "content": "it's nested under the registry directory The following properties are required for the block definition: name, description, type and files Make sure to list all registry dependencies in registryDependencies A registry dependency is the name of the component in the registry eg input, button, card, etc or a URL to a registry item eg http://localhost:3000/r/editor json Make sure to list all dependencies in dependencies A dependency is the name of the package in the registry egzod, sonner, etc To set a version, you can use the name@version format eg zod@^3 20 0 Imports should always use the @/registry path eg import { HelloWorld } from \"@/registry/new-york/hello-world/hello-world\"\nIdeally, place your files within a registry item in components, hooks, lib directories Install using the CLI\nTo install a registry item using the shadcn CLI, use the add command followed by the URL of the registry item pnpmnpmyarnbunpnpm dlx shadcn@latest add http://localhost:3000/r/hello-world jsonCopy RegistryFAQ On This Pageregistry jsonAdd a registry json fileAdd a registry itemCreate your componentAdd your component to the registryBuild your registryInstall the shadcn CLIAdd a build scriptRun the build scriptServe your registryPublish your registryAdding AuthGuidelinesInstall using the CLIDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 418078,
      "relative_path": "documentation\\shadcn\\_docs_registry_getting-started.html",
      "source_type": "documentation"
    },
    "token_count": 343,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "f5e3ddfb20e88257a84a11515556de49",
    "source_file": "corpus\\documentation\\shadcn\\_docs_registry_open-in-v0.html",
    "source_type": "documentation",
    "title": "Open in v0 - shadcn/ui",
    "content": "Open in v0 - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonOpen in v0Copy PagePreviousNextIntegrate your registry with Open in v0 If your registry is hosted and publicly accessible via a URL, you can open a registry item in v0 by using the https://v0 dev/chat/api/open url=[URL] endpoint eg https://v0 dev/chat/api/open url=https://ui shadcn com/r/styles/new-york/login-01 json\nNote: The Open in v0 button does not support cssVars and tailwind\nproperties Button\nSee Build your Open in v0 button for more information on how to build your own Open in v0 button Here's a simple example of how to add a Open in v0 button to your site Copyimport { Button } from \"@/components/ui/button\"\nexport function OpenInV0Button({ url }: { url: string }) {\nreturn (\n<Button\naria-label=\"Open in v0\"\nclassName=\"h-8 gap-1 rounded-[6px] bg-black px-3 text-xs text-white hover:bg-black hover:text-white dark:bg-white dark:text-black\"\nasChild\n>\n<a\nhref={`https://v0 dev/chat/api/open url=${url}`}\ntarget=\"_blank\"\nrel=\"noreferrer\"\n>\nOpen in{\" \"}\n<svg\nviewBox=\"0 0 40 20\"\nfill=\"none\"\nxmlns=\"http://www w3 org/2000/svg\"\nclassName=\"h-5 w-5 text-current\"\n>\n<path\nd=\"M23 3919 0H32 9188C36 7819 0 39 9136 3",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 315722,
      "relative_path": "documentation\\shadcn\\_docs_registry_open-in-v0.html",
      "source_type": "documentation"
    },
    "token_count": 504,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "52cd5161ad33b5cbed885b6965298516",
    "source_file": "corpus\\documentation\\shadcn\\_docs_registry_open-in-v0.html",
    "source_type": "documentation",
    "title": "Open in v0 - shadcn/ui",
    "content": "a Open in v0 button to your site Copyimport { Button } from \"@/components/ui/button\" export function OpenInV0Button({ url }: { url: string }) { return ( <Button aria-label=\"Open in v0\" className=\"h-8 gap-1 rounded-[6px] bg-black px-3 text-xs text-white hover:bg-black hover:text-white dark:bg-white dark:text-black\" asChild > <a href={`https://v0 dev/chat/api/open url=${url}`} target=\"_blank\" rel=\"noreferrer\" > Open in{\" \"} <svg viewBox=\"0 0 40 20\" fill=\"none\" xmlns=\"http://www w3 org/2000/svg\" className=\"h-5 w-5 text-current\" > <path d=\"M23 3919 0H32 9188C36 7819 0 39 9136 313165 39 9136 6 99475V16 0805H36 0006V6 99475C36 0006 6 90167 35 9969 6 80925 35 9898 6 71766L26 4628 16 079C26 4949 16 08 26 5272 16 0805 26 5595 16 0805H36 0006V19 7762H26 5595C22 6964 19 7762 19 4788 16 6139 19 4788 12 7508V3 68923H23 3919V12 7508C23 3919 12 9253 23 4054 13 0977 23 4316 13 2668L33 1682 3 6995C33 0861 3 6927 33 003 3 68923 32 9188 3 68923H23 3919V0Z\"\nfill=\"currentColor\"\n></path>\n<path\nd=\"M13 7688 19 0956L0 3 68759H5 53933L13 6231 12 7337V3 68759H17 7535V17 5746C17 7535 19 6705 15 1654 20 6584 13 7688 19 0956Z\"\nfill=\"currentColor\"\n></path>\n</svg>\n</a>\n</Button>\n)\n}\nCopy<OpenInV0Button url=\"https://example com/r/hello-world",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 315722,
      "relative_path": "documentation\\shadcn\\_docs_registry_open-in-v0.html",
      "source_type": "documentation"
    },
    "token_count": 544,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "d696fb7d6a6c6ed9723877dd9cf3369b",
    "source_file": "corpus\\documentation\\shadcn\\_docs_registry_open-in-v0.html",
    "source_type": "documentation",
    "title": "Open in v0 - shadcn/ui",
    "content": "19 7762 19 4788 16 6139 19 4788 12 7508V3 68923H23 3919V12 7508C23 3919 12 9253 23 4054 13 0977 23 4316 13 2668L33 1682 3 6995C33 0861 3 6927 33 003 3 68923 32 9188 3 68923H23 3919V0Z\" fill=\"currentColor\" ></path> <path d=\"M13 7688 19 0956L0 3 68759H5 53933L13 6231 12 7337V3 68759H17 7535V17 5746C17 7535 19 6705 15 1654 20 6584 13 7688 19 0956Z\" fill=\"currentColor\" ></path> </svg> </a> </Button> ) } Copy<OpenInV0Button url=\"https://example com/r/hello-worldjson\" />\nAuthentication\nSee the Adding Auth section for more information on how to authenticate requests to your registry and Open in v0 FAQExamples On This PageButtonAuthenticationDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 315722,
      "relative_path": "documentation\\shadcn\\_docs_registry_open-in-v0.html",
      "source_type": "documentation"
    },
    "token_count": 336,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "f37b9c996c424342039ea85f0486701e",
    "source_file": "corpus\\documentation\\shadcn\\_docs_registry_registry-json.html",
    "source_type": "documentation",
    "title": "registry.json - shadcn/ui",
    "content": "registry json - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonregistry jsonCopy PagePreviousNextSchema for running your own component registry The registry json schema is used to define your custom component registry registry jsonCopy{\n\"$schema\": \"https://ui shadcn com/schema/registry json\",\n\"name\": \"shadcn\",\n\"homepage\": \"https://ui shadcn com\",\n\"items\": [\n{\n\"name\": \"hello-world\",\n\"type\": \"registry:block\",\n\"title\": \"Hello World\",\n\"description\": \"A simple hello world component \",\n\"files\": [\n{\n\"path\": \"registry/new-york/hello-world/hello-world tsx\",\n\"type\": \"registry:component\"\n}\n]\n}\n]\n}\nDefinitions\nYou can see the JSON Schema for registry json here $schema\nThe $schema property is used to specify the schema for the registry json file registry jsonCopy{\n\"$schema\": \"https://ui shadcn com/schema/registry json\"\n}\nname\nThe name property is used to specify the name of your registry This is used for data attributes and other metadata registry jsonCopy{\n\"name\": \"acme\"\n}\nhomepage\nThe homepage of your registry This is used for data attributes and other metadata registry jsonCopy{\n\"homepage\": \"https://acme com\"\n}\nitems\nThe items in your registry Each item must implement the registry-item schema specification registry jsonCopy{\n\"items\": [\n{\n\"name\": \"hello-world\",\n\"type\": \"registry:block\",\n\"title\": \"Hello World\",\n\"description\": \"A simple hello world component \",\n\"files\": [\n{\n\"path\": \"registry/new-york/hello-world/hello-world",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 350194,
      "relative_path": "documentation\\shadcn\\_docs_registry_registry-json.html",
      "source_type": "documentation"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "1f8d73474ab27e94947e164a3b00b065",
    "source_file": "corpus\\documentation\\shadcn\\_docs_registry_registry-json.html",
    "source_type": "documentation",
    "title": "registry.json - shadcn/ui",
    "content": "of your registry This is used for data attributes and other metadata registry jsonCopy{ \"name\": \"acme\" } homepage The homepage of your registry This is used for data attributes and other metadata registry jsonCopy{ \"homepage\": \"https://acme com\" } items The items in your registry Each item must implement the registry-item schema specification registry jsonCopy{ \"items\": [ { \"name\": \"hello-world\", \"type\": \"registry:block\", \"title\": \"Hello World\", \"description\": \"A simple hello world component \", \"files\": [ { \"path\": \"registry/new-york/hello-world/hello-worldtsx\",\n\"type\": \"registry:component\"\n}\n]\n}\n]\n}\nSee the registry-item schema documentation for more information Examplesregistry-item json On This PageDefinitions$schemanamehomepageitemsDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 350194,
      "relative_path": "documentation\\shadcn\\_docs_registry_registry-json.html",
      "source_type": "documentation"
    },
    "token_count": 225,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "443641f139dc54a4d4af6b7f70db4009",
    "source_file": "corpus\\documentation\\shadcn\\_docs_v0.html",
    "source_type": "documentation",
    "title": "Open in v0 - shadcn/ui",
    "content": "Open in v0 - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation...Search...⌘K92.8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents.jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext.jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext.jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry.jsonregistry-item.jsonOpen in v0Copy PagePreviousNextOpen components in v0 for customization.Every component on ui.shadcn.com is editable on v0 by Vercel. This allows you to easily customize the components in natural language and paste into your app.\nOpen in v0\nTo use v0, sign-up for a free Vercel account here. In addition to v0, this gives you free access to Vercel's frontend cloud platform by the creators of Next.js, where you can deploy and host your project for free.\nLearn more about getting started with Vercel here.\nLearn more about getting started with v0 here. MonorepoJavaScript Deploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more.Vercel provides tools and infrastructure to deploy apps and features at scale.Deploy NowDeploy to VercelBuilt by shadcn at Vercel. The source code is available on GitHub.",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 278183,
      "relative_path": "documentation\\shadcn\\_docs_v0.html",
      "source_type": "documentation"
    },
    "token_count": 383,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6190daa2faa0973f96e56b8a0129d3c4",
    "source_file": "corpus\\documentation\\shadcn\\_docs_registry_examples.html",
    "source_type": "documentation",
    "title": "Examples - shadcn/ui",
    "content": "Examples - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonExamplesCopy PagePreviousNextExamples of registry items: styles, components, css vars, etc registry:style\nCustom style that extends shadcn/ui\nThe following registry item is a custom style that extends shadcn/ui On npx shadcn init, it will:\nInstall @tabler/icons-react as a dependency Add the login-01 block and calendar component to the project Add the editor from a remote registry Set the font-sans variable to Inter, sans-serif Install a brand color in light and dark mode example-style jsonCopy{\n\"$schema\": \"https://ui shadcn com/schema/registry-item json\",\n\"name\": \"example-style\",\n\"type\": \"registry:style\",\n\"dependencies\": [\"@tabler/icons-react\"],\n\"registryDependencies\": [\n\"login-01\",\n\"calendar\",\n\"https://example com/r/editor json\"\n],\n\"cssVars\": {\n\"theme\": {\n\"font-sans\": \"Inter, sans-serif\"\n},\n\"light\": {\n\"brand\": \"20 14 3% 4 1%\"\n},\n\"dark\": {\n\"brand\": \"20 14 3% 4 1%\"\n}\n}\n}\nCustom style from scratch\nThe following registry item is a custom style that doesn't extend shadcn/ui See the extends: none field It can be used to create a new style from scratch i e custom components, css vars, dependencies, etc On npx shadcn add, the following will:\nInstall tailwind-merge and clsx as dependencies Add the utils registry item from the shadcn/ui registry",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 673094,
      "relative_path": "documentation\\shadcn\\_docs_registry_examples.html",
      "source_type": "documentation"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 9
  },
  {
    "id": "9fda60eed32566d07a9298752859a1e7",
    "source_file": "corpus\\documentation\\shadcn\\_docs_registry_examples.html",
    "source_type": "documentation",
    "title": "Examples - shadcn/ui",
    "content": "4 1%\" }, \"dark\": { \"brand\": \"20 14 3% 4 1%\" } } } Custom style from scratch The following registry item is a custom style that doesn't extend shadcn/ui See the extends: none field It can be used to create a new style from scratch i e custom components, css vars, dependencies, etc On npx shadcn add, the following will: Install tailwind-merge and clsx as dependencies Add the utils registry item from the shadcn/ui registryAdd the button, input, label, and select components from a remote registry Install new css vars: main, bg, border, text, ring example-style jsonCopy{\n\"$schema\": \"https://ui shadcn com/schema/registry-item json\",\n\"extends\": \"none\",\n\"name\": \"new-style\",\n\"type\": \"registry:style\",\n\"dependencies\": [\"tailwind-merge\", \"clsx\"],\n\"registryDependencies\": [\n\"utils\",\n\"https://example com/r/button json\",\n\"https://example com/r/input json\",\n\"https://example com/r/label json\",\n\"https://example com/r/select json\"\n],\n\"cssVars\": {\n\"theme\": {\n\"font-sans\": \"Inter, sans-serif\",\n}\n\"light\": {\n\"main\": \"#88aaee\",\n\"bg\": \"#dfe5f2\",\n\"border\": \"#000\",\n\"text\": \"#000\",\n\"ring\": \"#000\",\n},\n\"dark\": {\n\"main\": \"#88aaee\",\n\"bg\": \"#272933\",\n\"border\": \"#000\",\n\"text\": \"#e6e6e6\",\n\"ring\": \"#fff\",\n}\n}\n}\nregistry:theme\nCustom theme\nexample-theme jsonCopy{\n\"$schema\": \"https://ui shadcn com/schema/registry-item json\",\n\"name\": \"custom-theme\",\n\"type\": \"registry:theme\",\n\"cssVars\": {\n\"light\": {\n\"background\": \"oklch(1 0 0)\",\n\"foreground\": \"oklch(0 141 0 005 285 823)\",\n\"primary\": \"oklch(0 546 0 245 262 881)\",\n\"primary-foreground\": \"oklch(0 97 0 014 254 604)\",\n\"ring\": \"oklch(0 746 0 16 232 661)\",\n\"sidebar-primary\": \"oklch(0 546 0 245 262",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 673094,
      "relative_path": "documentation\\shadcn\\_docs_registry_examples.html",
      "source_type": "documentation"
    },
    "token_count": 504,
    "chunk_index": 1,
    "total_chunks": 9
  },
  {
    "id": "5987550028ac84f3e02a27512586503f",
    "source_file": "corpus\\documentation\\shadcn\\_docs_registry_examples.html",
    "source_type": "documentation",
    "title": "Examples - shadcn/ui",
    "content": "\"text\": \"#000\", \"ring\": \"#000\", }, \"dark\": { \"main\": \"#88aaee\", \"bg\": \"#272933\", \"border\": \"#000\", \"text\": \"#e6e6e6\", \"ring\": \"#fff\", } } } registry:theme Custom theme example-theme jsonCopy{ \"$schema\": \"https://ui shadcn com/schema/registry-item json\", \"name\": \"custom-theme\", \"type\": \"registry:theme\", \"cssVars\": { \"light\": { \"background\": \"oklch(1 0 0)\", \"foreground\": \"oklch(0 141 0 005 285 823)\", \"primary\": \"oklch(0 546 0 245 262 881)\", \"primary-foreground\": \"oklch(0 97 0 014 254 604)\", \"ring\": \"oklch(0 746 0 16 232 661)\", \"sidebar-primary\": \"oklch(0 546 0 245 262881)\",\n\"sidebar-primary-foreground\": \"oklch(0 97 0 014 254 604)\",\n\"sidebar-ring\": \"oklch(0 746 0 16 232 661)\"\n},\n\"dark\": {\n\"background\": \"oklch(1 0 0)\",\n\"foreground\": \"oklch(0 141 0 005 285 823)\",\n\"primary\": \"oklch(0 707 0 165 254 624)\",\n\"primary-foreground\": \"oklch(0 97 0 014 254 604)\",\n\"ring\": \"oklch(0 707 0 165 254 624)\",\n\"sidebar-primary\": \"oklch(0 707 0 165 254 624)\",\n\"sidebar-primary-foreground\": \"oklch(0 97 0 014 254 604)\",\n\"sidebar-ring\": \"oklch(0 707 0 165 254 624)\"\n}\n}\n}\nCustom colors\nThe following style will init using shadcn/ui defaults and then add a custom brand color example-style jsonCopy{\n\"$schema\": \"https://ui shadcn com/schema/registry-item json\",\n\"name\": \"custom-style\",\n\"type\": \"registry:style\",\n\"cssVars\": {\n\"light\": {\n\"brand\": \"oklch(0 99 0",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 673094,
      "relative_path": "documentation\\shadcn\\_docs_registry_examples.html",
      "source_type": "documentation"
    },
    "token_count": 515,
    "chunk_index": 2,
    "total_chunks": 9
  },
  {
    "id": "ed5f41b244cc7206f24040ccd5b4b133",
    "source_file": "corpus\\documentation\\shadcn\\_docs_registry_examples.html",
    "source_type": "documentation",
    "title": "Examples - shadcn/ui",
    "content": "254 624)\", \"primary-foreground\": \"oklch(0 97 0 014 254 604)\", \"ring\": \"oklch(0 707 0 165 254 624)\", \"sidebar-primary\": \"oklch(0 707 0 165 254 624)\", \"sidebar-primary-foreground\": \"oklch(0 97 0 014 254 604)\", \"sidebar-ring\": \"oklch(0 707 0 165 254 624)\" } } } Custom colors The following style will init using shadcn/ui defaults and then add a custom brand color example-style jsonCopy{ \"$schema\": \"https://ui shadcn com/schema/registry-item json\", \"name\": \"custom-style\", \"type\": \"registry:style\", \"cssVars\": { \"light\": { \"brand\": \"oklch(0 99 000 0)\"\n},\n\"dark\": {\n\"brand\": \"oklch(0 14 0 00 286)\"\n}\n}\n}\nregistry:block\nCustom block\nThis blocks installs the login-01 block from the shadcn/ui registry login-01 jsonCopy{\n\"$schema\": \"https://ui shadcn com/schema/registry-item json\",\n\"name\": \"login-01\",\n\"type\": \"registry:block\",\n\"description\": \"A simple login form \",\n\"registryDependencies\": [\"button\", \"card\", \"input\", \"label\"],\n\"files\": [\n{\n\"path\": \"blocks/login-01/page tsx\",\n\"content\": \"import { LoginForm } \",\n\"type\": \"registry:page\",\n\"target\": \"app/login/page tsx\"\n},\n{\n\"path\": \"blocks/login-01/components/login-form tsx\",\n\"content\": \" \",\n\"type\": \"registry:component\"\n}\n]\n}\nInstall a block and override primitives\nYou can install a block fromt the shadcn/ui registry and override the primitives using your custom ones On npx shadcn add, the following will:\nAdd the login-01 block from the shadcn/ui registry Override the button, input, and label primitives with the ones from the remote registry example-style jsonCopy{\n\"$schema\": \"https://ui shadcn com/schema/registry-item json\",\n\"name\": \"custom-login\",\n\"type\": \"registry:block\",\n\"registryDependencies\": [\n\"login-01\",\n\"https://example com/r/button json\",\n\"https://example com/r/input",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 673094,
      "relative_path": "documentation\\shadcn\\_docs_registry_examples.html",
      "source_type": "documentation"
    },
    "token_count": 502,
    "chunk_index": 3,
    "total_chunks": 9
  },
  {
    "id": "b98972671d3c18213f781c231f07a755",
    "source_file": "corpus\\documentation\\shadcn\\_docs_registry_examples.html",
    "source_type": "documentation",
    "title": "Examples - shadcn/ui",
    "content": "\"type\": \"registry:component\" } ] } Install a block and override primitives You can install a block fromt the shadcn/ui registry and override the primitives using your custom ones On npx shadcn add, the following will: Add the login-01 block from the shadcn/ui registry Override the button, input, and label primitives with the ones from the remote registry example-style jsonCopy{ \"$schema\": \"https://ui shadcn com/schema/registry-item json\", \"name\": \"custom-login\", \"type\": \"registry:block\", \"registryDependencies\": [ \"login-01\", \"https://example com/r/button json\", \"https://example com/r/inputjson\",\n\"https://example com/r/label json\"\n]\n}\nCSS Variables\nCustom Theme Variables\nAdd custom theme variables to the theme object example-theme jsonCopy{\n\"$schema\": \"https://ui shadcn com/schema/registry-item json\",\n\"name\": \"custom-theme\",\n\"type\": \"registry:theme\",\n\"cssVars\": {\n\"theme\": {\n\"font-heading\": \"Inter, sans-serif\",\n\"shadow-card\": \"0 0 0 1px rgba(0, 0, 0, 0 1)\"\n}\n}\n}\nOverride Tailwind CSS variables\nexample-theme jsonCopy{\n\"$schema\": \"https://ui shadcn com/schema/registry-item json\",\n\"name\": \"custom-theme\",\n\"type\": \"registry:theme\",\n\"cssVars\": {\n\"theme\": {\n\"spacing\": \"0 2rem\",\n\"breakpoint-sm\": \"640px\",\n\"breakpoint-md\": \"768px\",\n\"breakpoint-lg\": \"1024px\",\n\"breakpoint-xl\": \"1280px\",\n\"breakpoint-2xl\": \"1536px\"\n}\n}\n}\nAdd custom CSS\nBase styles\nexample-base jsonCopy{\n\"$schema\": \"https://ui shadcn com/schema/registry-item json\",\n\"name\": \"custom-style\",\n\"type\": \"registry:style\",\n\"css\": {\n\"@layer base\": {\n\"h1\": {\n\"font-size\": \"var(--text-2xl)\"\n},\n\"h2\": {\n\"font-size\": \"var(--text-xl)\"\n}\n}\n}\n}\nComponents\nexample-card jsonCopy{\n\"$schema\": \"https://ui shadcn com/schema/registry-item",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 673094,
      "relative_path": "documentation\\shadcn\\_docs_registry_examples.html",
      "source_type": "documentation"
    },
    "token_count": 473,
    "chunk_index": 4,
    "total_chunks": 9
  },
  {
    "id": "e13fe1de5ad0cc39d4fe1333e196972c",
    "source_file": "corpus\\documentation\\shadcn\\_docs_registry_examples.html",
    "source_type": "documentation",
    "title": "Examples - shadcn/ui",
    "content": "Override Tailwind CSS variables example-theme jsonCopy{ \"$schema\": \"https://ui shadcn com/schema/registry-item json\", \"name\": \"custom-theme\", \"type\": \"registry:theme\", \"cssVars\": { \"theme\": { \"spacing\": \"0 2rem\", \"breakpoint-sm\": \"640px\", \"breakpoint-md\": \"768px\", \"breakpoint-lg\": \"1024px\", \"breakpoint-xl\": \"1280px\", \"breakpoint-2xl\": \"1536px\" } } } Add custom CSS Base styles example-base jsonCopy{ \"$schema\": \"https://ui shadcn com/schema/registry-item json\", \"name\": \"custom-style\", \"type\": \"registry:style\", \"css\": { \"@layer base\": { \"h1\": { \"font-size\": \"var(--text-2xl)\" }, \"h2\": { \"font-size\": \"var(--text-xl)\" } } } } Components example-card jsonCopy{ \"$schema\": \"https://ui shadcn com/schema/registry-itemjson\",\n\"name\": \"custom-card\",\n\"type\": \"registry:component\",\n\"css\": {\n\"@layer components\": {\n\"card\": {\n\"background-color\": \"var(--color-white)\",\n\"border-radius\": \"var(--rounded-lg)\",\n\"padding\": \"var(--spacing-6)\",\n\"box-shadow\": \"var(--shadow-xl)\"\n}\n}\n}\n}\nAdd custom utilities\nSimple utility\nexample-component jsonCopy{\n\"$schema\": \"https://ui shadcn com/schema/registry-item json\",\n\"name\": \"custom-component\",\n\"type\": \"registry:component\",\n\"css\": {\n\"@utility content-auto\": {\n\"content-visibility\": \"auto\"\n}\n}\n}\nComplex utility\nexample-utility jsonCopy{\n\"$schema\": \"https://ui shadcn com/schema/registry-item json\",\n\"name\": \"custom-component\",\n\"type\": \"registry:component\",\n\"css\": {\n\"@utility scrollbar-hidden\": {\n\"scrollbar-hidden\": {\n\"&::-webkit-scrollbar\": {\n\"display\": \"none\"\n}\n}\n}\n}\n}\nFunctional utilities\nexample-functional jsonCopy{\n\"$schema\": \"https://ui shadcn com/schema/registry-item json\",\n\"name\": \"custom-component\",\n\"type\": \"registry:component\",\n\"css\": {\n\"@utility tab-*\": {\n\"tab-size\": \"var(--tab-size-*)\"\n}\n}\n}\nAdd custom plugins\nexample-plugin",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 673094,
      "relative_path": "documentation\\shadcn\\_docs_registry_examples.html",
      "source_type": "documentation"
    },
    "token_count": 497,
    "chunk_index": 5,
    "total_chunks": 9
  },
  {
    "id": "bddae85d63ebcba22a439030a7f6d224",
    "source_file": "corpus\\documentation\\shadcn\\_docs_registry_examples.html",
    "source_type": "documentation",
    "title": "Examples - shadcn/ui",
    "content": "jsonCopy{ \"$schema\": \"https://ui shadcn com/schema/registry-item json\", \"name\": \"custom-component\", \"type\": \"registry:component\", \"css\": { \"@utility content-auto\": { \"content-visibility\": \"auto\" } } } Complex utility example-utility jsonCopy{ \"$schema\": \"https://ui shadcn com/schema/registry-item json\", \"name\": \"custom-component\", \"type\": \"registry:component\", \"css\": { \"@utility scrollbar-hidden\": { \"scrollbar-hidden\": { \"&::-webkit-scrollbar\": { \"display\": \"none\" } } } } } Functional utilities example-functional jsonCopy{ \"$schema\": \"https://ui shadcn com/schema/registry-item json\", \"name\": \"custom-component\", \"type\": \"registry:component\", \"css\": { \"@utility tab-*\": { \"tab-size\": \"var(--tab-size-*)\" } } } Add custom plugins example-pluginjsonCopy{\n\"$schema\": \"https://ui shadcn com/schema/registry-item json\",\n\"name\": \"custom-plugin\",\n\"type\": \"registry:component\",\n\"css\": {\n\"@plugin @tailwindcss/typography\": {},\n\"@plugin foo\": {}\n}\n}\nAdd custom animations\nNote: you need to define both @keyframes in css and theme in cssVars to use animations example-component jsonCopy{\n\"$schema\": \"https://ui shadcn com/schema/registry-item json\",\n\"name\": \"custom-component\",\n\"type\": \"registry:component\",\n\"cssVars\": {\n\"theme\": {\n\"--animate-wiggle\": \"wiggle 1s ease-in-out infinite\"\n}\n},\n\"css\": {\n\"@keyframes wiggle\": {\n\"0%, 100%\": {\n\"transform\": \"rotate(-3deg)\"\n},\n\"50%\": {\n\"transform\": \"rotate(3deg)\"\n}\n}\n}\n}\nAdd environment variables\nYou can add environment variables using the envVars field example-item jsonCopy{»\n\"$schema\": \"https://ui shadcn com/schema/registry-item json\",\n\"name\": \"custom-item\",\n\"type\": \"registry:item\",\n\"envVars\": {\n\"NEXT_PUBLIC_APP_URL\": \"http://localhost:4000\",\n\"DATABASE_URL\": \"postgresql://postgres:postgres@localhost:5432/postgres\",\n\"OPENAI_API_KEY\": \"\"\n}\n}\nEnvironment variables are added to the env local or env file Existing variables are not overwritten",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 673094,
      "relative_path": "documentation\\shadcn\\_docs_registry_examples.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 6,
    "total_chunks": 9
  },
  {
    "id": "500e3c89f5c3dcae5fe0399b10d5776e",
    "source_file": "corpus\\documentation\\shadcn\\_docs_registry_examples.html",
    "source_type": "documentation",
    "title": "Examples - shadcn/ui",
    "content": "{ \"--animate-wiggle\": \"wiggle 1s ease-in-out infinite\" } }, \"css\": { \"@keyframes wiggle\": { \"0%, 100%\": { \"transform\": \"rotate(-3deg)\" }, \"50%\": { \"transform\": \"rotate(3deg)\" } } } } Add environment variables You can add environment variables using the envVars field example-item jsonCopy{» \"$schema\": \"https://ui shadcn com/schema/registry-item json\", \"name\": \"custom-item\", \"type\": \"registry:item\", \"envVars\": { \"NEXT_PUBLIC_APP_URL\": \"http://localhost:4000\", \"DATABASE_URL\": \"postgresql://postgres:postgres@localhost:5432/postgres\", \"OPENAI_API_KEY\": \"\" } } Environment variables are added to the env local or env file Existing variables are not overwrittenIMPORTANT: Use envVars to add development or example variables Do NOT use it to add production variables Universal Items\nAs of 2 9 0, you can create universal items that can be installed without framework detection or components json To make an item universal i e framework agnostic, all the files in the item must have an explicit target Here's an example of a registry item that installs custom Cursor rules for python: cursor/rules/custom-python mdcCopy{\n\"$schema\": \"https://ui shadcn com/schema/registry-item json\",\n\"name\": \"python-rules\",\n\"type\": \"registry:item\",\n\"files\": [\n{\n\"path\": \"/path/to/your/registry/default/custom-python mdc\",\n\"type\": \"registry:file\",\n\"target\": \"~/ cursor/rules/custom-python mdc\",\n\"content\": \" \"\n}\n]\n}\nHere's another example for installation custom ESLint config: eslintrc jsonCopy{\n\"$schema\": \"https://ui shadcn com/schema/registry-item json\",\n\"name\": \"my-eslint-config\",\n\"type\": \"registry:item\",\n\"files\": [\n{\n\"path\": \"/path/to/your/registry/default/custom-eslint json\",\n\"type\": \"registry:file\",\n\"target\": \"~/ eslintrc json\",\n\"content\": \" \"\n}\n]\n}\nYou can also have a universal item that installs multiple files:\nmy-custom-starter-template jsonCopy{\n\"$schema\": \"https://ui shadcn com/schema/registry-item",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 673094,
      "relative_path": "documentation\\shadcn\\_docs_registry_examples.html",
      "source_type": "documentation"
    },
    "token_count": 474,
    "chunk_index": 7,
    "total_chunks": 9
  },
  {
    "id": "e63597b025a7bc68cf2f473a87457152",
    "source_file": "corpus\\documentation\\shadcn\\_docs_registry_examples.html",
    "source_type": "documentation",
    "title": "Examples - shadcn/ui",
    "content": "\"name\": \"python-rules\", \"type\": \"registry:item\", \"files\": [ { \"path\": \"/path/to/your/registry/default/custom-python mdc\", \"type\": \"registry:file\", \"target\": \"~/ cursor/rules/custom-python mdc\", \"content\": \" \" } ] } Here's another example for installation custom ESLint config: eslintrc jsonCopy{ \"$schema\": \"https://ui shadcn com/schema/registry-item json\", \"name\": \"my-eslint-config\", \"type\": \"registry:item\", \"files\": [ { \"path\": \"/path/to/your/registry/default/custom-eslint json\", \"type\": \"registry:file\", \"target\": \"~/ eslintrc json\", \"content\": \" \" } ] } You can also have a universal item that installs multiple files: my-custom-starter-template jsonCopy{ \"$schema\": \"https://ui shadcn com/schema/registry-itemjson\",\n\"name\": \"my-custom-start-template\",\n\"type\": \"registry:item\",\ndependencies: [\"better-auth\"]\n\"files\": [\n{\n\"path\": \"/path/to/file-01 json\",\n\"type\": \"registry:file\",\n\"target\": \"~/file-01 json\",\n\"content\": \" \"\n},\n{\n\"path\": \"/path/to/file-02 vue\",\n\"type\": \"registry:file\",\n\"target\": \"~/pages/file-02 vue\",\n\"content\": \" \"\n}\n]\n} Open in v0registry json On This Pageregistry:styleCustom style that extends shadcn/uiCustom style from scratchregistry:themeCustom themeCustom colorsregistry:blockCustom blockInstall a block and override primitivesCSS VariablesCustom Theme VariablesOverride Tailwind CSS variablesAdd custom CSSBase stylesComponentsAdd custom utilitiesSimple utilityComplex utilityFunctional utilitiesAdd custom pluginsAdd custom animationsAdd environment variablesUniversal ItemsDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 673094,
      "relative_path": "documentation\\shadcn\\_docs_registry_examples.html",
      "source_type": "documentation"
    },
    "token_count": 427,
    "chunk_index": 8,
    "total_chunks": 9
  },
  {
    "id": "d55591abef338b05df9049781228a1f7",
    "source_file": "corpus\\documentation\\storybook\\_docs.html",
    "source_type": "documentation",
    "title": "Get started with Storybook | Storybook docs",
    "content": "Get started with Storybook | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Get StartedDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQGet started with StorybookWelcome to Storybook's documentation ✦ Learn how to get started with Storybook in your project Then, explore Storybook's main concepts and discover additional resources to help you grow and maintain your Storybook What is Storybook Storybook is a frontend workshop for building UI components and pages in isolation It helps you develop and share hard-to-reach states and edge cases without needing to run your whole app Thousands of teams use it for UI development, testing, and documentation It's open source and free Install Storybook\nStorybook is a standalone tool that runs alongside your app It's a zero-config environment that works with any modern frontend framework You can install Storybook into an existing project or create a new one from scratch npmnpm create storybook@latest\nNext jsReactwith ViteReactwith WebpackReact Native Webwith Vite (in browser)React Nativeon devicePreactwith ViteVuewith ViteAngularSvelteKitSveltewith ViteWeb Componentswith Vite\nWant to know more about installing Storybook Check out the installation guide Main concepts\nStorybook is a powerful tool that can help you with many aspects of your UI development workflow",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 516560,
      "relative_path": "documentation\\storybook\\_docs.html",
      "source_type": "documentation"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "82e05a58b8acffc785526d9feaedfda6",
    "source_file": "corpus\\documentation\\storybook\\_docs.html",
    "source_type": "documentation",
    "title": "Get started with Storybook | Storybook docs",
    "content": "It's a zero-config environment that works with any modern frontend framework You can install Storybook into an existing project or create a new one from scratch npmnpm create storybook@latest Next jsReactwith ViteReactwith WebpackReact Native Webwith Vite (in browser)React Nativeon devicePreactwith ViteVuewith ViteAngularSvelteKitSveltewith ViteWeb Componentswith Vite Want to know more about installing Storybook Check out the installation guide Main concepts Storybook is a powerful tool that can help you with many aspects of your UI development workflowHere are some of the main concepts to get you started StoriesA story captures the rendered state of a UI component Each component can have multiple stories, where each story describes a different component state DocsStorybook can analyze your components to automatically create documentation alongside your stories This automatic documentation makes it easier for you to create UI library usage guidelines, design system sites, and more TestingStories are a pragmatic starting point for your UI testing strategy You already write stories as a natural part of UI development, so testing those stories is a low-effort way to prevent UI bugs over time SharingPublishing your Storybook allows you to share your work with others You can also embed your stories in places like Notion or Figma Additional resources\nOnce you've learned the basics, explore these other ways to get the most out of Storybook Essential addonsAddon catalogRecipesBuildersHow to contributeMigrate to 9 0FAQNeed some help Join a discussion on GitHubLatest product updatesSee changelogWas this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 516560,
      "relative_path": "documentation\\storybook\\_docs.html",
      "source_type": "documentation"
    },
    "token_count": 380,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "ec573c9e9ebccaff110fcb473e88c5cb",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons.html",
    "source_type": "documentation",
    "title": "Introduction to addons | Storybook docs",
    "content": "Introduction to addons | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs AddonsDocs » AddonsDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQIntroduction to addonsAddons extend Storybook with features and integrations that are not built into the core Most Storybook features are implemented as addons For instance: documentation, accessibility testing, interactive controls, among others The addon API makes it easy for you to configure and customize Storybook in new ways There are countless addons made by the community that unlocks time-saving workflows Browse our addon catalog to install an existing addon or as inspiration for your own addon Storybook basics\nBefore writing your first addon, let’s take a look at the basics of Storybook’s architecture While Storybook presents a unified user interface, under the hood it’s divided down the middle into Manager and Preview The Manager is the UI responsible for rendering the:\n🔍 Search\n🧭 Navigation\n🔗 Toolbars\n📦 Addons\nThe Preview area is an iframe where your stories are rendered Because both elements run in their own separate iframes, they use a communication channel to keep in sync For example, when you select a story in the Manager an event is dispatched across the channel notifying the Preview to render the story",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 485227,
      "relative_path": "documentation\\storybook\\_docs_addons.html",
      "source_type": "documentation"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "b247cbbe2e629f1e77a9e0ef2b40cd2b",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons.html",
    "source_type": "documentation",
    "title": "Introduction to addons | Storybook docs",
    "content": "the middle into Manager and Preview The Manager is the UI responsible for rendering the: 🔍 Search 🧭 Navigation 🔗 Toolbars 📦 Addons The Preview area is an iframe where your stories are rendered Because both elements run in their own separate iframes, they use a communication channel to keep in sync For example, when you select a story in the Manager an event is dispatched across the channel notifying the Preview to render the storyAnatomy of an addon\nStorybook addons allow you to extend what's already possible with Storybook, everything from the user interface to the API Each one is classified into two broader categories UI-based addons\nUI-based addons focus on customizing Storybook's user interface to extend your development workflow Examples of UI-based addons include: Controls, Docs and Accessibility Learn how to write an addon »\nPreset addons\nPreset addons help you integrate Storybook with other technologies and libraries An examples of a preset addons is preset-create-react-app Learn how to write a preset addon »Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 485227,
      "relative_path": "documentation\\storybook\\_docs_addons.html",
      "source_type": "documentation"
    },
    "token_count": 272,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "e60b3a46b5441ee3fb48ab047b6663b4",
    "source_file": "corpus\\documentation\\shadcn\\_docs_registry_registry-item-json.html",
    "source_type": "documentation",
    "title": "registry-item.json - shadcn/ui",
    "content": "registry-item json - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonregistry-item jsonCopy PagePreviousSpecification for registry items The registry-item json schema is used to define your custom registry items registry-item jsonCopy{\n\"$schema\": \"https://ui shadcn com/schema/registry-item json\",\n\"name\": \"hello-world\",\n\"type\": \"registry:block\",\n\"title\": \"Hello World\",\n\"description\": \"A simple hello world component \",\n\"files\": [\n{\n\"path\": \"registry/new-york/hello-world/hello-world tsx\",\n\"type\": \"registry:component\"\n},\n{\n\"path\": \"registry/new-york/hello-world/use-hello-world ts\",\n\"type\": \"registry:hook\"\n}\n],\n\"cssVars\": {\n\"theme\": {\n\"font-heading\": \"Poppins, sans-serif\"\n},\n\"light\": {\n\"brand\": \"20 14 3% 4 1%\"\n},\n\"dark\": {\n\"brand\": \"20 14 3% 4 1%\"\n}\n}\n}\nSee more examples\nDefinitions\nYou can see the JSON Schema for registry-item json here $schema\nThe $schema property is used to specify the schema for the registry-item json file registry-item jsonCopy{\n\"$schema\": \"https://ui shadcn com/schema/registry-item json\"\n}\nname\nThe name of the item This is used to identify the item in the registry It should be unique for your registry registry-item jsonCopy{\n\"name\": \"hello-world\"\n}\ntitle\nA human-readable title for your registry item Keep it short and descriptive registry-item jsonCopy{\n\"title\": \"Hello World\"\n}\ndescription\nA description of your registry item",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 557574,
      "relative_path": "documentation\\shadcn\\_docs_registry_registry-item-json.html",
      "source_type": "documentation"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "64717223d9b8bfa03cbabc0f2878ffaf",
    "source_file": "corpus\\documentation\\shadcn\\_docs_registry_registry-item-json.html",
    "source_type": "documentation",
    "title": "registry-item.json - shadcn/ui",
    "content": "The $schema property is used to specify the schema for the registry-item json file registry-item jsonCopy{ \"$schema\": \"https://ui shadcn com/schema/registry-item json\" } name The name of the item This is used to identify the item in the registry It should be unique for your registry registry-item jsonCopy{ \"name\": \"hello-world\" } title A human-readable title for your registry item Keep it short and descriptive registry-item jsonCopy{ \"title\": \"Hello World\" } description A description of your registry itemThis can be longer and more detailed than the title registry-item jsonCopy{\n\"description\": \"A simple hello world component \"\n}\ntype\nThe type property is used to specify the type of your registry item This is used to determine the type and target path of the item when resolved for a project registry-item jsonCopy{\n\"type\": \"registry:block\"\n}\nThe following types are supported:\nTypeDescriptionregistry:blockUse for complex components with multiple files registry:componentUse for simple components registry:libUse for lib and utils registry:hookUse for hooks registry:uiUse for UI components and single-file primitivesregistry:pageUse for page or file-based routes registry:fileUse for miscellaneous files registry:styleUse for registry styles eg new-yorkregistry:themeUse for themes registry:itemUse for universal registry items author\nThe author property is used to specify the author of the registry item It can be unique to the registry item or the same as the author of the registry registry-item jsonCopy{\n\"author\": \"John Doe <john@doe com>\"\n}\ndependencies\nThe dependencies property is used to specify the dependencies of your registry item This is for npm packages Use @version to specify the version of your registry item registry-item jsonCopy{\n\"dependencies\": [\n\"@radix-ui/react-accordion\",\n\"zod\",\n\"lucide-react\",\n\"name@1 0 2\"\n]\n}\nregistryDependencies\nUsed for registry dependencies Can be names or URLs Use the name of the item to reference shadcn/ui components and urls to reference other registries For shadcn/ui registry items such as button, input, select, etc use the name eg ['button', 'input', 'select'] For custom registry items use the URL of the registry item eg ['https://example com/r/hello-world json'] registry-item jsonCopy{\n\"registryDependencies\": [\n\"button\",\n\"input\",\n\"select\",\n\"https://example com/r/editor",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 557574,
      "relative_path": "documentation\\shadcn\\_docs_registry_registry-item-json.html",
      "source_type": "documentation"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "3149abd903c20f9096d1ce67152411b1",
    "source_file": "corpus\\documentation\\shadcn\\_docs_registry_registry-item-json.html",
    "source_type": "documentation",
    "title": "registry-item.json - shadcn/ui",
    "content": "[ \"@radix-ui/react-accordion\", \"zod\", \"lucide-react\", \"name@1 0 2\" ] } registryDependencies Used for registry dependencies Can be names or URLs Use the name of the item to reference shadcn/ui components and urls to reference other registries For shadcn/ui registry items such as button, input, select, etc use the name eg ['button', 'input', 'select'] For custom registry items use the URL of the registry item eg ['https://example com/r/hello-world json'] registry-item jsonCopy{ \"registryDependencies\": [ \"button\", \"input\", \"select\", \"https://example com/r/editorjson\"\n]\n}\nNote: The CLI will automatically resolve remote registry dependencies files\nThe files property is used to specify the files of your registry item Each file has a path, type and target (optional) property The target property is required for registry:page and registry:file types registry-item jsonCopy{\n\"files\": [\n{\n\"path\": \"registry/new-york/hello-world/page tsx\",\n\"type\": \"registry:page\",\n\"target\": \"app/hello/page tsx\"\n},\n{\n\"path\": \"registry/new-york/hello-world/hello-world tsx\",\n\"type\": \"registry:component\"\n},\n{\n\"path\": \"registry/new-york/hello-world/use-hello-world ts\",\n\"type\": \"registry:hook\"\n},\n{\n\"path\": \"registry/new-york/hello-world/ env\",\n\"type\": \"registry:file\",\n\"target\": \"~/ env\"\n}\n]\n}\npath\nThe path property is used to specify the path to the file in your registry This path is used by the build script to parse, transform and build the registry JSON payload type\nThe type property is used to specify the type of the file See the type section for more information target\nThe target property is used to indicate where the file should be placed in a project This is optional and only required for registry:page and registry:file types By default, the shadcn cli will read a project's components json file to determine the target path For some files, such as routes or config you can specify the target path manually Use ~ to refer to the root of the project e g ~/foo config js tailwind\nDEPRECATED: Use cssVars theme instead for Tailwind v4 projects The tailwind property is used for tailwind configuration such as theme, plugins and content You can use the tailwind",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 557574,
      "relative_path": "documentation\\shadcn\\_docs_registry_registry-item-json.html",
      "source_type": "documentation"
    },
    "token_count": 500,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "eae07916ee8a70c53258728a783cb197",
    "source_file": "corpus\\documentation\\shadcn\\_docs_registry_registry-item-json.html",
    "source_type": "documentation",
    "title": "registry-item.json - shadcn/ui",
    "content": "By default, the shadcn cli will read a project's components json file to determine the target path For some files, such as routes or config you can specify the target path manually Use ~ to refer to the root of the project e g ~/foo config js tailwind DEPRECATED: Use cssVars theme instead for Tailwind v4 projects The tailwind property is used for tailwind configuration such as theme, plugins and content You can use the tailwindconfig property to add colors, animations and plugins to your registry item registry-item jsonCopy{\n\"tailwind\": {\n\"config\": {\n\"theme\": {\n\"extend\": {\n\"colors\": {\n\"brand\": \"hsl(var(--brand))\"\n},\n\"keyframes\": {\n\"wiggle\": {\n\"0%, 100%\": { \"transform\": \"rotate(-3deg)\" },\n\"50%\": { \"transform\": \"rotate(3deg)\" }\n}\n},\n\"animation\": {\n\"wiggle\": \"wiggle 1s ease-in-out infinite\"\n}\n}\n}\n}\n}\n}\ncssVars\nUse to define CSS variables for your registry item registry-item jsonCopy{\n\"cssVars\": {\n\"theme\": {\n\"font-heading\": \"Poppins, sans-serif\"\n},\n\"light\": {\n\"brand\": \"20 14 3% 4 1%\",\n\"radius\": \"0 5rem\"\n},\n\"dark\": {\n\"brand\": \"20 14 3% 4 1%\"\n}\n}\n}\ncss\nUse css to add new rules to the project's CSS file eg @layer base, @layer components, @utility, @keyframes, @plugin, etc registry-item jsonCopy{\n\"css\": {\n\"@plugin @tailwindcss/typography\": {},\n\"@plugin foo\": {},\n\"@layer base\": {\n\"body\": {\n\"font-size\": \"var(--text-base)\",\n\"line-height\": \"1 5\"\n}\n},\n\"@layer components\": {\n\"button\": {\n\"background-color\": \"var(--color-primary)\",\n\"color\": \"var(--color-white)\"\n}\n},\n\"@utility text-magic\": {\n\"font-size\": \"var(--text-base)\",\n\"line-height\": \"1 5\"\n},\n\"@keyframes wiggle\": {\n\"0%, 100%\": {\n\"transform\": \"rotate(-3deg)\"\n},\n\"50%\": {\n\"transform\": \"rotate(3deg)\"\n}\n}\n}\n}\nenvVars\nUse envVars to add environment variables to your registry item registry-item",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 557574,
      "relative_path": "documentation\\shadcn\\_docs_registry_registry-item-json.html",
      "source_type": "documentation"
    },
    "token_count": 506,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "4c4ff107d40d6d91b00536df397ecd41",
    "source_file": "corpus\\documentation\\shadcn\\_docs_registry_registry-item-json.html",
    "source_type": "documentation",
    "title": "registry-item.json - shadcn/ui",
    "content": "components, @utility, @keyframes, @plugin, etc registry-item jsonCopy{ \"css\": { \"@plugin @tailwindcss/typography\": {}, \"@plugin foo\": {}, \"@layer base\": { \"body\": { \"font-size\": \"var(--text-base)\", \"line-height\": \"1 5\" } }, \"@layer components\": { \"button\": { \"background-color\": \"var(--color-primary)\", \"color\": \"var(--color-white)\" } }, \"@utility text-magic\": { \"font-size\": \"var(--text-base)\", \"line-height\": \"1 5\" }, \"@keyframes wiggle\": { \"0%, 100%\": { \"transform\": \"rotate(-3deg)\" }, \"50%\": { \"transform\": \"rotate(3deg)\" } } } } envVars Use envVars to add environment variables to your registry item registry-itemjsonCopy{\n\"envVars\": {\n\"NEXT_PUBLIC_APP_URL\": \"http://localhost:4000\",\n\"DATABASE_URL\": \"postgresql://postgres:postgres@localhost:5432/postgres\",\n\"OPENAI_API_KEY\": \"\"\n}\n}\nEnvironment variables are added to the env local or env file Existing variables are not overwritten IMPORTANT: Use envVars to add development or example variables Do NOT use it to add production variables docs\nUse docs to show custom documentation or message when installing your registry item via the CLI registry-item jsonCopy{\n\"docs\": \"To get an OPENAI_API_KEY, sign up for an account at https://platform openai com \"\n}\ncategories\nUse categories to organize your registry item registry-item jsonCopy{\n\"categories\": [\"sidebar\", \"dashboard\"]\n}\nmeta\nUse meta to add additional metadata to your registry item You can add any key/value pair that you want to be available to the registry item registry-item jsonCopy{\n\"meta\": { \"foo\": \"bar\" }\n} registry jsonOn This PageDefinitions$schemanametitledescriptiontypeauthordependenciesregistryDependenciesfilespathtypetargettailwindcssVarscssenvVarsdocscategoriesmetaDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 557574,
      "relative_path": "documentation\\shadcn\\_docs_registry_registry-item-json.html",
      "source_type": "documentation"
    },
    "token_count": 483,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "ca30db31e9e02529a3504d6cc9b647ad",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_addon-knowledge-base.html",
    "source_type": "documentation",
    "title": "Addon knowledge base | Storybook docs",
    "content": "Addon knowledge base | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Addons » Knowledge baseDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQAddon knowledge baseReactVueAngularWeb ComponentsMoreOnce you understand the basics of writing addons, there are a variety of common enhancements to make your addon better This page details additional information about addon creation Use it as a quick reference guide when creating your own addons Disable the addon panel\nIt’s possible to disable the addon panel for a particular story To make that possible, you need to pass the paramKey element when you register the panel:\n/my-addon/manager jsaddons register(ADDON_ID, () => {\naddons add(PANEL_ID, {\ntype: types PANEL,\ntitle: 'My Addon',\nrender: () => <div>Addon tab content</div>,\nparamKey: 'myAddon', // this element\n});\n});\nThen when adding a story, you can pass a disabled parameter Button stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { Button } from ' /Button';\nconst meta = {\n/* 👇 The title prop is optional * See https://storybook js",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 610824,
      "relative_path": "documentation\\storybook\\_docs_addons_addon-knowledge-base.html",
      "source_type": "documentation"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "e78f57793a0346bd618132cfd06e78a2",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_addon-knowledge-base.html",
    "source_type": "documentation",
    "title": "Addon knowledge base | Storybook docs",
    "content": "type: types PANEL, title: 'My Addon', render: () => <div>Addon tab content</div>, paramKey: 'myAddon', // this element }); }); Then when adding a story, you can pass a disabled parameter Button stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework'; import { Button } from ' /Button'; const meta = { /* 👇 The title prop is optional * See https://storybook jsorg/docs/configure/#configure-story-loading\n* to learn how to generate automatic titles\n*/\ntitle: 'Button',\ncomponent: Button,\nparameters: {\nmyAddon: { disable: true }, // Disables the addon\n},\n} satisfies Meta<typeof Button>;\nexport default meta;\nStyle your addon\nStorybook uses Emotion for styling Alongside with a theme that you can customize We recommend using Emotion to style your addon’s UI components That allows you to use the active Storybook theme to deliver a seamless developer experience If you don’t want to use Emotion, you can use inline styles or another css-in-js lib You can receive the theme as a prop by using Emotion's withTheme HOC Read more about theming Storybook components\nAddon authors can develop their UIs using any React library But we recommend using Storybook’s UI components in storybook/internal/components to build addons faster When you use Storybook components, you get:\nBattle-tested off-the-shelf components\nStorybook native look and feel\nBuilt-in support for Storybook theming\nUse the components listed below with your next addon ComponentSourceStoryAction BarSee component implementationSee component storyAddon PanelSee component implementationN/ABadgeSee component implementationSee component storyButtonSee component implementationSee component storyFormSee component implementationSee component storyLoaderSee component implementationSee component storyPlaceHolderSee component implementationSee component storyScroll AreaSee component implementationSee component storySpaceSee component implementationSee component storySyntax HighlighterSee component implementationSee component storyTabsSee component implementationSee component storyToolBarSee component implementationN/AToolTipSee component implementationSee component storyZoomSee component implementationSee component story\nComplementing the components, also included is a set of UI primitives Use the content listed below as a reference for styling your addon",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 610824,
      "relative_path": "documentation\\storybook\\_docs_addons_addon-knowledge-base.html",
      "source_type": "documentation"
    },
    "token_count": 479,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "c3d1a3dd1569daeefb80f6962e0893b8",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_addon-knowledge-base.html",
    "source_type": "documentation",
    "title": "Addon knowledge base | Storybook docs",
    "content": "component storyAddon PanelSee component implementationN/ABadgeSee component implementationSee component storyButtonSee component implementationSee component storyFormSee component implementationSee component storyLoaderSee component implementationSee component storyPlaceHolderSee component implementationSee component storyScroll AreaSee component implementationSee component storySpaceSee component implementationSee component storySyntax HighlighterSee component implementationSee component storyTabsSee component implementationSee component storyToolBarSee component implementationN/AToolTipSee component implementationSee component storyZoomSee component implementationSee component story Complementing the components, also included is a set of UI primitives Use the content listed below as a reference for styling your addonComponentSourceStoryColor Palette (see note below)See implementationSee storyIconSee implementationSee storyTypographySee implementationSee story\nℹ️The color palette implemented by @storybook/addon-docs/blocks is a high-level abstraction of the storybook/theming module Build system\nWhen you're developing your addon as a package, you can’t use npm link to add it to your project List your addon as a local dependency into your package json:\npackage json {\n\"dependencies\": {\n\"@storybook/addon-controls\": \"file:///home/username/myrepo\"\n}\n}\nℹ️Run either yarn or npm install to install the addon Hot module replacement\nWhile developing your addon, you can configure HMR (hot module replacement) to reflect the changes made Standalone Storybook addons\nIf you're developing a standalone addon, add a new script to package json with the following:\npackage json {\n\"scripts\": {\n\"start\": \"npm run build -- --watch\"\n}\n}\nLocal Storybook addons\nIf you're developing a local Storybook addon built on top of an existing Storybook installation, HMR (hot module replacement) is available out of the box Composing addons in presets\nIf you're working on a preset that loads third-party addons, which you don't have control over, and you need access to certain features (e g , decorators) or provide additional configurations In that case, you'll need to update your preset to the following to allow you to load and configure the other addons:\nmy-preset/index jsfunction managerEntries(entry = []) {\nreturn [ entry, require resolve('my-other-addon/register')];\n}\nconst config = (entry = [], options) => {\nreturn [ entry, require resolve('my-other-addon/addDecorator')];\n};\nexport default {\nmanagerEntries,\nconfig,\n};\nIf you have control over the addons you want to customize",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 610824,
      "relative_path": "documentation\\storybook\\_docs_addons_addon-knowledge-base.html",
      "source_type": "documentation"
    },
    "token_count": 499,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "39bd67bebe108c452435c4bdd811dfc4",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_addon-knowledge-base.html",
    "source_type": "documentation",
    "title": "Addon knowledge base | Storybook docs",
    "content": "certain features (e g , decorators) or provide additional configurations In that case, you'll need to update your preset to the following to allow you to load and configure the other addons: my-preset/index jsfunction managerEntries(entry = []) { return [ entry, require resolve('my-other-addon/register')]; } const config = (entry = [], options) => { return [ entry, require resolve('my-other-addon/addDecorator')]; }; export default { managerEntries, config, }; If you have control over the addons you want to customizeIn that case, you can update your preset and implement a custom function to load any additional presets and provide the necessary configuration Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 610824,
      "relative_path": "documentation\\storybook\\_docs_addons_addon-knowledge-base.html",
      "source_type": "documentation"
    },
    "token_count": 204,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "5b8b0aa364a4f9aa363c82a7405f07b9",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_addon-migration-guide.html",
    "source_type": "documentation",
    "title": "Addon migration guide for Storybook 9.0 | Storybook docs",
    "content": "Addon migration guide for Storybook 9 0 | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Addons » Migrate addons to 9 0DocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQAddon migration guide for Storybook 9 0ReactVueAngularWeb ComponentsMoreWe sincerely appreciate the dedication and effort addon creators put into keeping the Storybook ecosystem vibrant and up-to-date As Storybook evolves to version 9 0, bringing new features and improvements, this guide is here to assist you in migrating your addons from 8 x to 9 0 If you need to migrate your addon from an earlier version of Storybook, please first refer to the Addon migration guide for Storybook 8 0 ℹ️As we gather feedback from the community, we'll update this page We also have a general Storybook migration guide if you're looking for that Replacing dependencies\nMany previously-published packages have moved to be part of Storybook's core If your addon depends on any of these packages, you should remove them from your package json and update your addon to import from the new location If your addon does not already depend on the storybook package, you should add it to your package json as a dependency package json {\n\"devDependencies\": {\n\"storybook\": \"next\" // or \"latest\", or \"^9 0",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 571990,
      "relative_path": "documentation\\storybook\\_docs_addons_addon-migration-guide.html",
      "source_type": "documentation"
    },
    "token_count": 506,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "3e883e6f0c4b6be60c86a024a613fd42",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_addon-migration-guide.html",
    "source_type": "documentation",
    "title": "Addon migration guide for Storybook 9.0 | Storybook docs",
    "content": "that Replacing dependencies Many previously-published packages have moved to be part of Storybook's core If your addon depends on any of these packages, you should remove them from your package json and update your addon to import from the new location If your addon does not already depend on the storybook package, you should add it to your package json as a dependency package json { \"devDependencies\": { \"storybook\": \"next\" // or \"latest\", or \"^9 00\"\n}\n}\nDependency Management\nWith Storybook 9 0, most Storybook packages have been consolidated into the main storybook package This means you no longer need to reference individual Storybook packages as dependencies Instead, define storybook as a peer dependency in your addon's package json:\npackage json {\n\"name\": \"your-storybook-addon\",\n\"peerDependencies\": {\n\"storybook\": \"^9 0 0\"\n},\n\"devDependencies\": {\n\"storybook\": \">=9 0 0-0 <10 0 0-0\" // For local development\n}\n}\nThis approach ensures that:\nYour addon uses the same version of Storybook APIs as the host project\nYou avoid duplicate Storybook packages in the final bundle\nYour addon's package size is minimized\nIf your addon supports multiple major versions of Storybook, you can specify a wider version range in your peer dependencies:\npackage json {\n\"name\": \"your-storybook-addon\",\n\"peerDependencies\": {\n\"storybook\": \"^8 0 0 || ^9 0 0\"\n},\n\"devDependencies\": {\n\"storybook\": \">=9 0 0-0 <10 0 0-0\" // For local development\n}\n}\nHowever, we recommend releasing a new major version of your addon alongside new major versions of Storybook This practice:\nMakes it easier to maintain your code\nAllows you to take advantage of new features and improvements\nProvides a clearer upgrade path for your users\nKey changes for addons\nHere are the essential changes in version 9 0 that impact addon development Package Consolidation\nSeveral packages have been consolidated into the main storybook package",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 571990,
      "relative_path": "documentation\\storybook\\_docs_addons_addon-migration-guide.html",
      "source_type": "documentation"
    },
    "token_count": 426,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "338fa3439e007fef22f50a9b782cff55",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_addon-migration-guide.html",
    "source_type": "documentation",
    "title": "Addon migration guide for Storybook 9.0 | Storybook docs",
    "content": "development } } However, we recommend releasing a new major version of your addon alongside new major versions of Storybook This practice: Makes it easier to maintain your code Allows you to take advantage of new features and improvements Provides a clearer upgrade path for your users Key changes for addons Here are the essential changes in version 9 0 that impact addon development Package Consolidation Several packages have been consolidated into the main storybook packageUpdate your imports to use the new paths:\nOld PackageNew Path@storybook/manager-apistorybook/manager-api@storybook/preview-apistorybook/preview-api@storybook/themingstorybook/theming@storybook/teststorybook/test@storybook/addon-actionsstorybook/actions@storybook/addon-backgroundsN/A@storybook/addon-controlsN/A@storybook/addon-highlightstorybook/highlight@storybook/addon-interactionsN/A@storybook/addon-measureN/A@storybook/addon-outlineN/A@storybook/addon-toolbarsN/A@storybook/addon-viewportstorybook/viewport\nAdditionally, several internal packages have been moved under the /internal sub-path These paths are not part of our public API, so they may change without following semver While you can use them for a quick upgrade, we strongly encourage finding replacements as they could break in future minor versions:\nOld PackageNew Path@storybook/channelsstorybook/internal/channels@storybook/client-loggerstorybook/internal/client-logger@storybook/core-eventsstorybook/internal/core-events@storybook/typesstorybook/internal/types@storybook/componentsstorybook/internal/components\nPlease visit the full list of consolidated packages in our Migration md file Icon System Updates\nThe icon system has been updated to use @storybook/icons Several icon-related exports have been removed:\n- import { Icons, IconButtonSkeleton } from '@storybook/components';\n+ import { ZoomIcon } from '@storybook/icons';\nManager Builder Changes\nThe manager builder no longer aliases util, assert, and process If your addon depends on these packages, you'll need to:\nImplement the alias at compile time in your addon\nUpdate your bundling configuration to ensure correct dependencies are used\nNode js 18 support dropped\nPlease upgrade your addon to Node js 20, as support for Node js 18 has ended TypeScript Requirements\nStorybook now requires TypeScript 4 9 or later Ensure your addon is compatible with this version",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 571990,
      "relative_path": "documentation\\storybook\\_docs_addons_addon-migration-guide.html",
      "source_type": "documentation"
    },
    "token_count": 457,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "696ea23ad5f4df8bb2661fa1e7daf474",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_addon-migration-guide.html",
    "source_type": "documentation",
    "title": "Addon migration guide for Storybook 9.0 | Storybook docs",
    "content": "builder no longer aliases util, assert, and process If your addon depends on these packages, you'll need to: Implement the alias at compile time in your addon Update your bundling configuration to ensure correct dependencies are used Node js 18 support dropped Please upgrade your addon to Node js 20, as support for Node js 18 has ended TypeScript Requirements Storybook now requires TypeScript 4 9 or later Ensure your addon is compatible with this versionSidebar Component Changes\nThe 'extra' prop has been removed from the Sidebar's Heading component\nExperimental sidebar features have been removed:\nexperimental_SIDEBAR_BOTTOM\nexperimental_SIDEBAR_TOP\nType System Updates\nThe following types have been removed:\nAddon_SidebarBottomType\nAddon_SidebarTopType\nDeprecatedState\n9 0 0 Full migration guide\nFor a full list of changes, please visit the Migration md file\nMigration Example\nFor a complete example of an addon updated to support Storybook 9 0, refer to the Addon Kit migration PR Once merged, it will demonstrate all the necessary changes for modern addon development Releasing\nTo support Storybook 9 0, we encourage you to release a new major version of your addon For experimental features or testing, use the next tag This allows you to gather feedback before releasing a stable version Support\nIf you're having issues with your addon after following this guide, please open a new discussion in our GitHub repository Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 571990,
      "relative_path": "documentation\\storybook\\_docs_addons_addon-migration-guide.html",
      "source_type": "documentation"
    },
    "token_count": 357,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "8437b931c44ecb427908ca1c7b342533",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_addon-types.html",
    "source_type": "documentation",
    "title": "Types of addons | Storybook docs",
    "content": "Types of addons | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Addons » Types of addonsDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQTypes of addonsReactVueAngularWeb ComponentsMoreEach Storybook addon is classified into two general categories, UI-based or Presets Each type of addons feature is documented here Use this as a reference when creating your addon UI-based addons\nUI-based addons allow you to customize Storybook's UI with the following elements Panels\nPanel addons allow you to add your own UI in Storybook's addon panel This is the most common type of addon in the ecosystem For example, the official @storybook/addon-a11y uses this pattern Use this boilerplate code to add a new Panel to Storybook's UI:\naddon-panel/manager jsimport React from 'react';\nimport { AddonPanel } from 'storybook/internal/components';\nimport { useGlobals, addons, types } from 'storybook/manager-api';\naddons register('my/panel', () => {\naddons add('my-panel-addon/panel', {\ntitle: 'Example Storybook panel',\n//👇 Sets the type of UI element in Storybook\ntype: types",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 570974,
      "relative_path": "documentation\\storybook\\_docs_addons_addon-types.html",
      "source_type": "documentation"
    },
    "token_count": 467,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "5a3435ad6492d888fc7bdf43d9738bef",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_addon-types.html",
    "source_type": "documentation",
    "title": "Types of addons | Storybook docs",
    "content": "Storybook's addon panel This is the most common type of addon in the ecosystem For example, the official @storybook/addon-a11y uses this pattern Use this boilerplate code to add a new Panel to Storybook's UI: addon-panel/manager jsimport React from 'react'; import { AddonPanel } from 'storybook/internal/components'; import { useGlobals, addons, types } from 'storybook/manager-api'; addons register('my/panel', () => { addons add('my-panel-addon/panel', { title: 'Example Storybook panel', //👇 Sets the type of UI element in Storybook type: typesPANEL,\nrender: ({ active }) => (\n<AddonPanel active={active}>\n<h2>I'm a panel addon in Storybook</h2>\n</AddonPanel>\n),\n});\n});\nToolbars\nToolbar addons allow you to add your own custom tools in Storybook's Toolbar For example, the official @storybook/addon-themes uses this pattern Use this boilerplate code to add a new button to Storybook's Toolbar:\naddon-toolbar/manager jsimport React from 'react';\nimport { addons, types } from 'storybook/manager-api';\nimport { IconButton } from 'storybook/internal/components';\nimport { OutlineIcon } from '@storybook/icons';\naddons register('my-addon', () => {\naddons add('my-addon/toolbar', {\ntitle: 'Example Storybook toolbar',\n//👇 Sets the type of UI element in Storybook\ntype: types TOOL,\n//👇 Shows the Toolbar UI element if the story canvas is being viewed\nmatch: ({ tabId, viewMode }) => tabId && viewMode === 'story',\nrender: ({ active }) => (\n<IconButton active={active} title=\"Show a Storybook toolbar\">\n<OutlineIcon />\n</IconButton>\n),\n});\n});\nℹ️The match property allows you to conditionally render your toolbar addon, based on the current view The icon element used in the example loads the icons from the storybook/internal/components module See here for the list of available icons that you can use Tabs\nTab addons allow you to create your own custom tabs in Storybook Use this boilerplate code to add a new Tab to Storybook's UI:\naddon-tab/manager jsimport React from 'react';\nimport { addons, types } from 'storybook/manager-api';\naddons register('my-addon', () => {\naddons add('my-addon/tab', {\ntype: types",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 570974,
      "relative_path": "documentation\\storybook\\_docs_addons_addon-types.html",
      "source_type": "documentation"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "54785c5d66342fa390ddd898bea36f91",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_addon-types.html",
    "source_type": "documentation",
    "title": "Types of addons | Storybook docs",
    "content": "the current view The icon element used in the example loads the icons from the storybook/internal/components module See here for the list of available icons that you can use Tabs Tab addons allow you to create your own custom tabs in Storybook Use this boilerplate code to add a new Tab to Storybook's UI: addon-tab/manager jsimport React from 'react'; import { addons, types } from 'storybook/manager-api'; addons register('my-addon', () => { addons add('my-addon/tab', { type: typesTAB,\ntitle: 'Example Storybook tab',\nrender: () => (\n<div>\n<h2>I'm a tabbed addon in Storybook</h2>\n</div>\n),\n});\n});\nℹ️Learn how to write your own addon that includes these UI elements here Preset addons\nStorybook preset addons are grouped collections of babel, webpack, and addons configurations to integrate Storybook and other technologies For example the official preset-create-react-app Use this boilerplate code while writing your own preset addon storybook/my-preset jsexport default {\nmanagerWebpack: async (config, options) => {\n// Update config here\nreturn config;\n},\nwebpackFinal: async (config, options) => {\nreturn config;\n},\nbabel: async (config, options) => {\nreturn config;\n},\n};\nLearn more about the Storybook addon ecosystem\nTypes of addons for other types of addons\nWriting addons for the basics of addon development\nPresets for preset development\nIntegration catalog for requirements and available recipes\nAPI reference to learn about the available APIs\nWas this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 570974,
      "relative_path": "documentation\\storybook\\_docs_addons_addon-types.html",
      "source_type": "documentation"
    },
    "token_count": 385,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "74770952a3064b0adaba623b863a760f",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_configure-addons.html",
    "source_type": "documentation",
    "title": "Configure and communicate with an addon | Storybook docs",
    "content": "Configure and communicate with an addon | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Addons » Configure addonsDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQConfigure and communicate with an addonReactVueAngularWeb ComponentsMoreThe addon API is designed for customization It offers addon authors different ways to configure and communicate with their users' Storybook Let's look at what these are and their suggested use cases Preset\nPresets offload the burden of configuration from the user to the addon Preset options are global and are accessible from NodeJS They're ideal for pre-configuring Webpack loaders, Babel plugins, and other library or framework-specific configurations For example, many libraries require that the app be wrapped by a Provider which provides data to components down the tree Presets can describe behavior like adding wrappers automatically, without users having to do any manual configuration If a user installs an addon that has Presets, the addon can instruct Storybook to wrap all stories in Provider This allows folks to start using your library with Storybook, with just 1 line of config For more on presets, see: Write a preset addon\nThe mechanism for wrapping each story is referred to as a Storybook decorator They allow you to augment stories with extra rendering functionality or by providing data",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 494908,
      "relative_path": "documentation\\storybook\\_docs_addons_configure-addons.html",
      "source_type": "documentation"
    },
    "token_count": 484,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "11bc73be39fd6a89e64eafbb69e17441",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_configure-addons.html",
    "source_type": "documentation",
    "title": "Configure and communicate with an addon | Storybook docs",
    "content": "do any manual configuration If a user installs an addon that has Presets, the addon can instruct Storybook to wrap all stories in Provider This allows folks to start using your library with Storybook, with just 1 line of config For more on presets, see: Write a preset addon The mechanism for wrapping each story is referred to as a Storybook decorator They allow you to augment stories with extra rendering functionality or by providing dataParameters\nParameters are available in the browser and are great for configuring addon behavior globally, at the component level, or at the story level For example, the Pseudo States addon uses parameters to enable the various pseudo-states Users can provide global defaults and then override them at the story level Use the useParameter hook to access the parameter values within your addon export const Hover = {\nrender: () => <Button>Label</Button>,\nparameters: { pseudo: { hover: true } },\n};\nChannels\nChannels enable two-way communication between the manager and the preview pane, using a NodeJS EventEmitter compatible API Your addons can plug into specific channels and respond to these events For example, Actions captures user events and displays their data in a panel Use the useChannel hook to access the channel data within your addon For a complete example, check out storybookjs/addon-kit/withRoundTrip tsWas this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 494908,
      "relative_path": "documentation\\storybook\\_docs_addons_configure-addons.html",
      "source_type": "documentation"
    },
    "token_count": 331,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "ae843b9fcb2e5c33b926e9b38a164bbe",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_install-addons.html",
    "source_type": "documentation",
    "title": "Install addons | Storybook docs",
    "content": "Install addons | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Addons » InstallDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQInstall addonsReactVueAngularWeb ComponentsMoreStorybook has hundreds of reusable addons packaged as NPM modules Let's walk through how to extend Storybook by installing and registering addons Automatic installation\nStorybook includes a storybook add command to automate the setup of addons Several community-led addons can be added using this command, except for preset addons We encourage you to read the addon's documentation to learn more about its installation process Run the storybook add command using your chosen package manager, and the CLI will update your Storybook configuration to include the addon and install any necessary dependencies npmnpx storybook@latest add @storybook/addon-a11y\n⚠️If you're attempting to install multiple addons at once, it will only install the first addon that was specified This is a known limitation of the current implementation and will be addressed in a future release Manual installation\nStorybook addons are always added through the addons configuration array in storybook/main js|ts The following example shows how to manually add the Accessibility addon to Storybook Run the following command with your package manager of choice to install the addon npmnpm install @storybook/addon-a11y --save-dev\nNext, update storybook/main",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 523436,
      "relative_path": "documentation\\storybook\\_docs_addons_install-addons.html",
      "source_type": "documentation"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "c4be23bb331b77e2aaf1ddfccbbe6273",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_install-addons.html",
    "source_type": "documentation",
    "title": "Install addons | Storybook docs",
    "content": "it will only install the first addon that was specified This is a known limitation of the current implementation and will be addressed in a future release Manual installation Storybook addons are always added through the addons configuration array in storybook/main js|ts The following example shows how to manually add the Accessibility addon to Storybook Run the following command with your package manager of choice to install the addon npmnpm install @storybook/addon-a11y --save-dev Next, update storybook/mainjs|ts to the following: storybook/main tsTypescript// Replace your-framework with the framework you are using (e g , react-vite, vue3-vite, angular, etc )\nimport type { StorybookConfig } from '@storybook/your-framework';\nconst config: StorybookConfig = {\nframework: '@storybook/your-framework',\nstories: [' /src/**/* mdx', ' /src/**/* stories @(js|jsx|mjs|ts|tsx)'],\naddons: [\n// Other Storybook addons\n'@storybook/addon-a11y', //👈 The a11y addon goes here\n],\n};\nexport default config;\nWhen you run Storybook, the accessibility testing addon will be enabled Removing addons\nTo remove an addon from Storybook, you can choose to manually uninstall it and remove it from the configuration file (i e , storybook/main js|ts) or opt-in to do it automatically via the CLI with the remove command For example, to remove the Accessibility addon from Storybook with the CLI, run the following command:\nnpmnpx storybook@latest remove @storybook/addon-a11y\nWas this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 523436,
      "relative_path": "documentation\\storybook\\_docs_addons_install-addons.html",
      "source_type": "documentation"
    },
    "token_count": 397,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "cc5d5a62c03cef0c4f8a02ec0ca8c3d9",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_integration-catalog.html",
    "source_type": "documentation",
    "title": "Add to the integration catalog | Storybook docs",
    "content": "Add to the integration catalog | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Addons » Add to catalogDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQAdd to the integration catalogReactVueAngularWeb ComponentsMoreStorybook has two types of integrations, addons and recipes, which are listed in the integration catalog Addons\nStorybook addons are distributed via npm The catalog is populated by querying npm's registry for Storybook-specific metadata in package json Add your addon to the catalog by publishing a npm package that follows these requirements:\npackage json with module information and addon metadata\nREADME md file with installation and configuration instructions\n/dist directory containing transpiled ES5 code\npreset js file written as an ES5 module at the root level\n💡Get a refresher on how to write a Storybook addon Addon metadata\nWe rely on metadata to organize your addon in the catalog You must add the storybook-addons as the first keyword, followed by your addon's category Additional keywords will be used in search and as tags",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 534336,
      "relative_path": "documentation\\storybook\\_docs_addons_integration-catalog.html",
      "source_type": "documentation"
    },
    "token_count": 438,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "715d29e7bcd926d1487191f69c18315b",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_integration-catalog.html",
    "source_type": "documentation",
    "title": "Add to the integration catalog | Storybook docs",
    "content": "and addon metadata README md file with installation and configuration instructions /dist directory containing transpiled ES5 code preset js file written as an ES5 module at the root level 💡Get a refresher on how to write a Storybook addon Addon metadata We rely on metadata to organize your addon in the catalog You must add the storybook-addons as the first keyword, followed by your addon's category Additional keywords will be used in search and as tagsPropertyDescriptionExamplenameAddon package namestorybook-addon-exampledescriptionAddon descriptionOutline all elements with CSS to help with layout placement and alignmentauthorName of the authorwinkerVSbeckskeywordsList of keywords to describe the addon[\"storybook-addons\",\"style\",\"debug\"]repositoryAddon repository{\"type\": \"git\",\"url\": \"https://github com/someone/my-addon\" }\nCustomize your addon's appearance by adding the storybook property with the following fields PropertyDescriptionExampledisplayNameDisplay nameExampleiconLink to custom icon for the addon (SVG are not supported)https://yoursite com/addon-icon pngunsupportedFrameworksList of unsupported frameworks[\"vue\"]supportedFrameworksList of supported frameworks[\"react\", \"angular\"]\nUse the list below as a reference when filling in the values for both the supportedFrameworks and unsupportedFrameworks fields react\nvue\nangular\nweb-components\nember\nhtml\nsvelte\npreact\nreact-native\n💡Make sure to copy each item exactly as listed so that we can properly index your addon in our catalog package json {\n\"name\": \"storybook-addon-example\",\n\"version\": \"1 0 0\",\n\"description\": \"Outline all elements with CSS to help with layout placement and alignment\",\n\"repository\": {\n\"type\": \"git\",\n\"url\": \"https://github com/chromaui/storybook-addon-example\"\n},\n\"author\": \"winkerVSbecks\",\n\"keywords\": [\"storybook-addons\", \"style\", \"debug\", \"layout\", \"css\"],\n\"storybook\": {\n\"displayName\": \"Outline\",\n\"unsupportedFrameworks\": [\"vue\"],\n\"supportedFrameworks\": [\"react\", \"angular\"],\n\"icon\": \"https://yoursite com/addon-icon png\"\n}\n}\nThe package json above appears like below in the catalog See an example of a production package json here How long does it take for my addon to show up in the catalog Once you publish the addon, it will appear in the catalog There may be a delay between the time you publish your addon and when it's listed in the catalog",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 534336,
      "relative_path": "documentation\\storybook\\_docs_addons_integration-catalog.html",
      "source_type": "documentation"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "aab536eb6485ae59f771452f4e82d8f2",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_integration-catalog.html",
    "source_type": "documentation",
    "title": "Add to the integration catalog | Storybook docs",
    "content": "\"displayName\": \"Outline\", \"unsupportedFrameworks\": [\"vue\"], \"supportedFrameworks\": [\"react\", \"angular\"], \"icon\": \"https://yoursite com/addon-icon png\" } } The package json above appears like below in the catalog See an example of a production package json here How long does it take for my addon to show up in the catalog Once you publish the addon, it will appear in the catalog There may be a delay between the time you publish your addon and when it's listed in the catalogIf your addon doesn't show up within 24 hours, open an issue Recipes\nRecipes are a set of instructions to integrate third-party libraries into Storybook in cases where an addon does not exist or the integration requires some manual effort Who owns them Recipes are written and maintained by the Storybook team We create recipes based on community popularity, tool maturity, and stability of the integration Our goal is to ensure that recipes continue to work over time Not finding the recipe that you want If it's popular in the community, our docs team will write one In the mean time, try searching for a solution — it's likely that someone has the same requirements as you do You can also help us out by writing recipes on your own site which speeds up the research process Request a recipe\nIf you'd like to request a recipe, open a new discussion in our GitHub repo We'll review your request, and if it's popular, we'll add it to our backlog and prioritize it Learn more about the Storybook addon ecosystem\nTypes of addons for other types of addons\nWriting addons for the basics of addon development\nPresets for preset development\nIntegration catalog for requirements and available recipes\nAPI reference to learn about the available APIs\nWas this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 534336,
      "relative_path": "documentation\\storybook\\_docs_addons_integration-catalog.html",
      "source_type": "documentation"
    },
    "token_count": 418,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "e039b8890f9d6b220549c123ff791d5b",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_addons-api.html",
    "source_type": "documentation",
    "title": "Addon API | Storybook docs",
    "content": "Addon API | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Addons » Addon APIDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQAddon APIReactVueAngularWeb ComponentsMoreStorybook's API allows developers to interact programmatically with Storybook With the API, developers can build and deploy custom addons and other tools that enhance Storybook's functionality Core Addon API\nOur API is exposed via two distinct packages, each one with a different purpose:\nstorybook/manager-api used to interact with the Storybook manager UI or access the Storybook API storybook/preview-api used to control and configure the addon's behavior my-addon/src/manager js|tsimport { addons } from 'storybook/preview-api';\nimport { useStorybookApi } from 'storybook/manager-api';\naddons add()\nThe add method allows you to register the type of UI component associated with the addon (e g , panels, toolbars, tabs) For a minimum viable Storybook addon, you should provide the following arguments:\ntype: The type of UI component to register title: The title to feature in the Addon Panel render: The function that renders the addon's UI component my-addon/src/manager",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1081894,
      "relative_path": "documentation\\storybook\\_docs_addons_addons-api.html",
      "source_type": "documentation"
    },
    "token_count": 473,
    "chunk_index": 0,
    "total_chunks": 12
  },
  {
    "id": "c329674cdba1f0fc18408295b497fc88",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_addons-api.html",
    "source_type": "documentation",
    "title": "Addon API | Storybook docs",
    "content": "my-addon/src/manager js|tsimport { addons } from 'storybook/preview-api'; import { useStorybookApi } from 'storybook/manager-api'; addons add() The add method allows you to register the type of UI component associated with the addon (e g , panels, toolbars, tabs) For a minimum viable Storybook addon, you should provide the following arguments: type: The type of UI component to register title: The title to feature in the Addon Panel render: The function that renders the addon's UI component my-addon/src/managerjs|tsimport React from 'react';\nimport { addons, types } from 'storybook/manager-api';\nimport { AddonPanel } from 'storybook/internal/components';\nconst ADDON_ID = 'myaddon';\nconst PANEL_ID = `${ADDON_ID}/panel`;\naddons register(ADDON_ID, (api) => {\naddons add(PANEL_ID, {\ntype: types PANEL,\ntitle: 'My Addon',\nrender: ({ active }) => (\n<AddonPanel active={active}>\n<div> Storybook addon panel </div>\n</AddonPanel>\n),\n});\n});\nℹ️The render function is called with active The active value will be true when the panel is focused on the UI addons register()\nServes as the entry point for all addons It allows you to register an addon and access the Storybook API For example:\nmy-addon/src/manager js|tsimport { addons } from 'storybook/preview-api';\n// Register the addon with a unique name addons register('my-organisation/my-addon', (api) => {});\nNow you'll get an instance to our StorybookAPI See the api docs for Storybook API regarding using that addons getChannel()\nGet an instance to the channel to communicate with the manager and the preview You can find this in both the addon register code and your addon’s wrapper component (where used inside a story) It has a NodeJS EventEmitter compatible API So, you can use it to emit events and listen to events my-addon/src/manager",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1081894,
      "relative_path": "documentation\\storybook\\_docs_addons_addons-api.html",
      "source_type": "documentation"
    },
    "token_count": 411,
    "chunk_index": 1,
    "total_chunks": 12
  },
  {
    "id": "37ff533ac5bc1e509626f71d2d9ee02b",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_addons-api.html",
    "source_type": "documentation",
    "title": "Addon API | Storybook docs",
    "content": "=> {}); Now you'll get an instance to our StorybookAPI See the api docs for Storybook API regarding using that addons getChannel() Get an instance to the channel to communicate with the manager and the preview You can find this in both the addon register code and your addon’s wrapper component (where used inside a story) It has a NodeJS EventEmitter compatible API So, you can use it to emit events and listen to events my-addon/src/managerjs|tsimport React, { useCallback } from 'react';\nimport { OutlineIcon } from '@storybook/icons';\nimport { useGlobals } from 'storybook/manager-api';\nimport { addons } from 'storybook/preview-api';\nimport { IconButton } from 'storybook/internal/components';\nimport { FORCE_RE_RENDER } from 'storybook/internal/core-events';\nconst ExampleToolbar = () => {\nconst [globals, updateGlobals] = useGlobals();\nconst isActive = globals['my-param-key'] || false;\n// Function that will update the global value and trigger a UI refresh const refreshAndUpdateGlobal = () => {\nupdateGlobals({\n['my-param-key']: isActive,\n}),\n// Invokes Storybook's addon API method (with the FORCE_RE_RENDER) event to trigger a UI refresh\naddons getChannel() emit(FORCE_RE_RENDER);\n};\nconst toggleToolbarAddon = useCallback(() => refreshAndUpdateGlobal(), [isActive]);\nreturn (\n<IconButton\nkey=\"Example\"\nactive={isActive}\ntitle=\"Show the toolbar addon\"\nonClick={toggleToolbarAddon}\n>\n<OutlineIcon />\n</IconButton>\n);\n};\nmakeDecorator\nUse the makeDecorator API to create decorators in the style of the official addons Like so:\nmy-addon/src/decorator js|tsimport { makeDecorator } from 'storybook/preview-api';\nexport const withAddonDecorator = makeDecorator({\nname: 'withSomething',\nparameterName: 'CustomParameter',\nskipIfNoParametersOrOptions: true,\nwrapper: (getStory, context, { parameters }) => {\n/*\n* Write your custom logic here based on the parameters passed in Storybook's stories * Although not advised, you can also alter the story output based on the parameters */\nreturn getStory(context);\n},\n});\nℹ️If the story's parameters include { exampleParameter: { disable: true } } (where exampleParameter is the parameterName of your addon), your decorator will not be called The makeDecorator API requires the following arguments:\nname: Unique name to identify the custom addon decorator",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1081894,
      "relative_path": "documentation\\storybook\\_docs_addons_addons-api.html",
      "source_type": "documentation"
    },
    "token_count": 492,
    "chunk_index": 2,
    "total_chunks": 12
  },
  {
    "id": "4125df26a98531042b8c92c596a0bca2",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_addons-api.html",
    "source_type": "documentation",
    "title": "Addon API | Storybook docs",
    "content": "* Write your custom logic here based on the parameters passed in Storybook's stories * Although not advised, you can also alter the story output based on the parameters */ return getStory(context); }, }); ℹ️If the story's parameters include { exampleParameter: { disable: true } } (where exampleParameter is the parameterName of your addon), your decorator will not be called The makeDecorator API requires the following arguments: name: Unique name to identify the custom addon decoratorparameterName: Sets a unique parameter to be consumed by the addon skipIfNoParametersOrOptions: (Optional) Doesn't run the decorator if the user hasn't options either via decorators or parameters wrapper: your decorator function Takes the getStory, context, and both the options and parameters (as defined in skipIfNoParametersOrOptions above) Storybook API\nStorybook's API allows you to access different functionalities of Storybook UI api selectStory()\nThe selectStory API method allows you to select a single story It accepts the following two parameters; story kind name and an optional story name For example:\nButton stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { Button } from ' /Button';\nconst meta = {\n/* 👇 The title prop is optional * See https://storybook js org/docs/configure/#configure-story-loading\n* to learn how to generate automatic titles\n*/\ntitle: 'Button',\ncomponent: Button,\n//👇 Creates specific parameters for the story\nparameters: {\nmyAddon: {\ndata: 'This data is passed to the addon',\n},\n},\n} satisfies Meta<typeof Button>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n/*\n*👇 Render functions are a framework specific feature to allow you control on how the component renders * See https://storybook js org/docs/api/csf\n* to learn how to use render functions */\nexport const Basic: Story = {\nrender: () => <Button>Hello</Button>,\n};\nThis is how you can select the above story:\nmy-addon/src/manager js|tsaddons register('my-organisation/my-addon', (api) => {\napi selectStory('Button', 'Default');\n});\napi selectInCurrentKind()\nSimilar to the selectStory API method, but it only accepts the story as the only parameter my-addon/src/manager",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1081894,
      "relative_path": "documentation\\storybook\\_docs_addons_addons-api.html",
      "source_type": "documentation"
    },
    "token_count": 500,
    "chunk_index": 3,
    "total_chunks": 12
  },
  {
    "id": "85e3318df6dfcc376acc11893f7a18e2",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_addons-api.html",
    "source_type": "documentation",
    "title": "Addon API | Storybook docs",
    "content": "a framework specific feature to allow you control on how the component renders * See https://storybook js org/docs/api/csf * to learn how to use render functions */ export const Basic: Story = { render: () => <Button>Hello</Button>, }; This is how you can select the above story: my-addon/src/manager js|tsaddons register('my-organisation/my-addon', (api) => { api selectStory('Button', 'Default'); }); api selectInCurrentKind() Similar to the selectStory API method, but it only accepts the story as the only parameter my-addon/src/managerjs|tsaddons register('my-organisation/my-addon', (api) => {\napi selectInCurrentKind('Default');\n});\napi setQueryParams()\nThis method allows you to set query string parameters You can use that as temporary storage for addons Here's how you define query params:\nmy-addon/src/manager js|tsaddons register('my-organisation/my-addon', (api) => {\napi setQueryParams({\nexampleParameter: 'Sets the example parameter value',\nanotherParameter: 'Sets the another parameter value',\n});\n});\nAdditionally, if you need to remove a query parameter, set it as null instead of removing them from the addon For example:\nmy-addon/src/manager js|tsaddons register('my-organisation/my-addon', (api) => {\napi setQueryParams({\nexampleParameter: null,\n});\n});\napi getQueryParam()\nAllows retrieval of a query parameter enabled via the setQueryParams API method For example:\nmy-addon/src/manager js|tsaddons register('my-organisation/my-addon', (api) => {\napi getQueryParam('exampleParameter');\n});\napi getUrlState(overrideParams)\nThis method allows you to get the application URL state, including any overridden or custom parameter values For example:\nmy-addon/src/manager js|tsaddons register('my-organisation/my-addon', (api) => {\nconst href = api getUrlState({\nselectedKind: 'kind',\nselectedStory: 'story',\n}) url;\n});\napi on(eventName, fn)\nThis method allows you to register a handler function called whenever the user navigates between stories my-addon/src/manager js|tsaddons register('my-organisation/my-addon', (api) => {\n// Logs the event data to the browser console whenever the event is emitted api on('custom-addon-event', (eventData) => console log(eventData));\n});\naddons",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1081894,
      "relative_path": "documentation\\storybook\\_docs_addons_addons-api.html",
      "source_type": "documentation"
    },
    "token_count": 489,
    "chunk_index": 4,
    "total_chunks": 12
  },
  {
    "id": "4154d137ca57189bb692f21796575e4d",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_addons-api.html",
    "source_type": "documentation",
    "title": "Addon API | Storybook docs",
    "content": "URL state, including any overridden or custom parameter values For example: my-addon/src/manager js|tsaddons register('my-organisation/my-addon', (api) => { const href = api getUrlState({ selectedKind: 'kind', selectedStory: 'story', }) url; }); api on(eventName, fn) This method allows you to register a handler function called whenever the user navigates between stories my-addon/src/manager js|tsaddons register('my-organisation/my-addon', (api) => { // Logs the event data to the browser console whenever the event is emitted api on('custom-addon-event', (eventData) => console log(eventData)); }); addonssetConfig(config)\nThis method allows you to override the default Storybook UI configuration (e g , set up a theme or hide UI elements): storybook/manager tsTypescriptimport { addons, type State } from 'storybook/manager-api';\naddons setConfig({\nnavSize: 300,\nbottomPanelHeight: 300,\nrightPanelWidth: 300,\npanelPosition: 'bottom',\nenableShortcuts: true,\nshowToolbar: true,\ntheme: undefined,\nselectedPanel: undefined,\ninitialActive: 'sidebar',\nlayoutCustomisations: {\nshowSidebar(state: State, defaultValue: boolean) {\nreturn state storyId === 'landing' false : defaultValue;\n},\nshowToolbar(state: State, defaultValue: boolean) {\nreturn state viewMode === 'docs'",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1081894,
      "relative_path": "documentation\\storybook\\_docs_addons_addons-api.html",
      "source_type": "documentation"
    },
    "token_count": 290,
    "chunk_index": 5,
    "total_chunks": 12
  },
  {
    "id": "af1e1442e94a00a014820323c08dd208",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_addons-api.html",
    "source_type": "documentation",
    "title": "Addon API | Storybook docs",
    "content": "method allows you to override the default Storybook UI configuration (e g , set up a theme or hide UI elements): storybook/manager tsTypescriptimport { addons, type State } from 'storybook/manager-api'; addons setConfig({ navSize: 300, bottomPanelHeight: 300, rightPanelWidth: 300, panelPosition: 'bottom', enableShortcuts: true, showToolbar: true, theme: undefined, selectedPanel: undefined, initialActive: 'sidebar', layoutCustomisations: { showSidebar(state: State, defaultValue: boolean) { return state storyId === 'landing' false : defaultValue; }, showToolbar(state: State, defaultValue: boolean) { return state viewMode === 'docs'false : defaultValue;\n},\n},\nsidebar: {\nshowRoots: false,\ncollapsedRoots: ['other'],\n},\ntoolbar: {\ntitle: { hidden: false },\nzoom: { hidden: false },\neject: { hidden: false },\ncopy: { hidden: false },\nfullscreen: { hidden: false },\n},\n});\nThe following table details how to use the API values:\nNameTypeDescriptionExample ValuenavSizeNumber (pixels)The size of the sidebar that shows a list of stories300bottomPanelHeightNumber (pixels)The size of the addon panel when in the bottom position200rightPanelWidthNumber (pixels)The size of the addon panel when in the right position200panelPositionStringWhere to show the addon panel'bottom' or 'right'enableShortcutsBooleanEnable/disable shortcutstrueshowToolbarBooleanShow/hide toolbartruethemeObjectStorybook Theme, see next sectionundefinedselectedPanelStringId to select an addon panelstorybook/actions/panelinitialActiveStringSelect the default active tab on Mobilesidebar or canvas or addonssidebarObjectSidebar options, see below{ showRoots: false }toolbarObjectModify the tools in the toolbar using the addon id{ fullscreen: { hidden: false } }\nThe following options are configurable under the sidebar namespace:\nNameTypeDescriptionExample ValueshowRootsBooleanDisplay the top-level nodes as a \"root\" in the sidebarfalsecollapsedRootsArraySet of root node IDs to visually collapse by default['misc', 'other']renderLabelFunctionCreate a custom label for tree nodes; must return a ReactNode(item, api) => <abbr title=\" \">{item",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1081894,
      "relative_path": "documentation\\storybook\\_docs_addons_addons-api.html",
      "source_type": "documentation"
    },
    "token_count": 475,
    "chunk_index": 6,
    "total_chunks": 12
  },
  {
    "id": "5da2d11330b01ea1ac6514ef46ee4cac",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_addons-api.html",
    "source_type": "documentation",
    "title": "Addon API | Storybook docs",
    "content": "the default active tab on Mobilesidebar or canvas or addonssidebarObjectSidebar options, see below{ showRoots: false }toolbarObjectModify the tools in the toolbar using the addon id{ fullscreen: { hidden: false } } The following options are configurable under the sidebar namespace: NameTypeDescriptionExample ValueshowRootsBooleanDisplay the top-level nodes as a \"root\" in the sidebarfalsecollapsedRootsArraySet of root node IDs to visually collapse by default['misc', 'other']renderLabelFunctionCreate a custom label for tree nodes; must return a ReactNode(item, api) => <abbr title=\" \">{itemname}</abbr>\nThe following options are configurable under the toolbar namespace:\nNameTypeDescriptionExample Value[id]StringToggle visibility for a specific toolbar item (e g title, zoom){ hidden: false }\nStorybook hooks\nTo help streamline addon development and reduce boilerplate code, the API exposes a set of hooks to access Storybook's internals These hooks are an extension of the storybook/manager-api module useStorybookState\nIt allows access to Storybook's internal state Similar to the useglobals hook, we recommend optimizing your addon to rely on React memo, or the following hooks; useMemo, useCallback to prevent a high volume of re-render cycles my-addon/src/manager js|tsimport React from 'react';\nimport { AddonPanel } from 'storybook/internal/components';\nimport { useStorybookState } from 'storybook/manager-api';\nexport const Panel = () => {\nconst state = useStorybookState();\nreturn (\n<AddonPanel { props}>\n{state viewMode == 'docs' (\n<h2>Do something with the documentation</h2>\n) : (\n<h2>Show the panel when viewing the story</h2>\n)}\n</AddonPanel>\n);\n};\nuseStorybookApi\nThe useStorybookApi hook is a convenient helper to allow you full access to the Storybook API methods my-addon/manager js|tsimport React, { useEffect, useCallback } from 'react';\nimport { useStorybookApi } from 'storybook/manager-api';\nimport { IconButton } from 'storybook/internal/components';\nimport { ChevronDownIcon } from '@storybook/icons';\nexport const Panel = () => {\nconst api = useStorybookApi();\nconst toggleMyTool = useCallback(() => {\n// Custom logic to toggle the addon here\n}, []);\nuseEffect(() => {\napi",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1081894,
      "relative_path": "documentation\\storybook\\_docs_addons_addons-api.html",
      "source_type": "documentation"
    },
    "token_count": 486,
    "chunk_index": 7,
    "total_chunks": 12
  },
  {
    "id": "3fa5601b16da376cc203b626b0c8eac1",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_addons-api.html",
    "source_type": "documentation",
    "title": "Addon API | Storybook docs",
    "content": "useStorybookApi The useStorybookApi hook is a convenient helper to allow you full access to the Storybook API methods my-addon/manager js|tsimport React, { useEffect, useCallback } from 'react'; import { useStorybookApi } from 'storybook/manager-api'; import { IconButton } from 'storybook/internal/components'; import { ChevronDownIcon } from '@storybook/icons'; export const Panel = () => { const api = useStorybookApi(); const toggleMyTool = useCallback(() => { // Custom logic to toggle the addon here }, []); useEffect(() => { apisetAddonShortcut('custom-toolbar-addon', {\nlabel: 'Enable toolbar addon',\ndefaultShortcut: ['G'],\nactionName: 'Toggle',\nshowInMenu: false,\naction: toggleAddon,\n});\n}, [api]);\nreturn (\n<IconButton key=\"custom-toolbar\" active=\"true\" title=\"Show a toolbar addon\">\n<ChevronDownIcon />\n</IconButton>\n);\n};\nuseChannel\nAllows setting subscriptions to events and getting the emitter to emit custom events to the channel The messages can be listened to on both the iframe and the manager my-addon/manager js|tsimport React from 'react';\nimport { useChannel } from 'storybook/manager-api';\nimport { AddonPanel, Button } from 'storybook/internal/components';\nimport { STORY_CHANGED } from 'storybook/internal/core-events';\nexport const Panel = () => {\n// Creates a Storybook API channel and subscribes to the STORY_CHANGED event\nconst emit = useChannel({\nSTORY_CHANGED: ( args) => console log( args),\n});\nreturn (\n<AddonPanel key=\"custom-panel\" active=\"true\">\n<Button onClick={() => emit('my-event-type', { sampleData: 'example' })}>\nEmit a Storybook API event with custom data\n</Button>\n</AddonPanel>\n);\n};\nuseAddonState\nThe useAddonState is a useful hook for addons that require data persistence, either due to Storybook's UI lifecycle or for more complex addons involving multiple types (e g , toolbars, panels) my-addon/manager",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1081894,
      "relative_path": "documentation\\storybook\\_docs_addons_addons-api.html",
      "source_type": "documentation"
    },
    "token_count": 421,
    "chunk_index": 8,
    "total_chunks": 12
  },
  {
    "id": "ddbb0d93e7c521936facb3798f584d47",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_addons-api.html",
    "source_type": "documentation",
    "title": "Addon API | Storybook docs",
    "content": "and subscribes to the STORY_CHANGED event const emit = useChannel({ STORY_CHANGED: ( args) => console log( args), }); return ( <AddonPanel key=\"custom-panel\" active=\"true\"> <Button onClick={() => emit('my-event-type', { sampleData: 'example' })}> Emit a Storybook API event with custom data </Button> </AddonPanel> ); }; useAddonState The useAddonState is a useful hook for addons that require data persistence, either due to Storybook's UI lifecycle or for more complex addons involving multiple types (e g , toolbars, panels) my-addon/managerjs|tsimport React from 'react';\nimport { useAddonState } from 'storybook/manager-api';\nimport { AddonPanel, IconButton } from 'storybook/internal/components';\nimport { LightningIcon } from '@storybook/icons';\nexport const Panel = () => {\nconst [state, setState] = useAddonState('addon-unique-identifier', 'initial state');\nreturn (\n<AddonPanel key=\"custom-panel\" active=\"true\">\n<Button onClick={() => setState('Example')}>\nClick to update Storybook's internal state\n</Button>\n</AddonPanel>\n);\n};\nexport const Tool = () => {\nconst [state, setState] = useAddonState('addon-unique-identifier', 'initial state');\nreturn (\n<IconButton\nkey=\"custom-toolbar\"\nactive=\"true\"\ntitle=\"Enable my addon\"\nonClick={() => setState('Example')}\n>\n<LightningIcon />\n</IconButton>\n);\n};\nuseParameter\nThe useParameter retrieves the current story's parameters If the parameter's value is not defined, it will automatically default to the second value defined my-addon/manager js|tsimport React from 'react';\nimport { AddonPanel } from 'storybook/internal/components';\nimport { useParameter } from 'storybook/manager-api';\nexport const Panel = () => {\n// Connects to Storybook's API and retrieves the value of the custom parameter for the current story\nconst value = useParameter('custom-parameter', 'initial value');\nreturn (\n<AddonPanel key=\"custom-panel\" active=\"true\">\n{value === 'initial value' (\n<h2>The story doesn't contain custom parameters Defaulting to the initial value </h2>\n) : (\n<h2>You've set {value} as the parameter </h2>\n)}\n</AddonPanel>\n);\n};\nuseGlobals\nExtremely useful hook for addons that rely on Storybook Globals",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1081894,
      "relative_path": "documentation\\storybook\\_docs_addons_addons-api.html",
      "source_type": "documentation"
    },
    "token_count": 495,
    "chunk_index": 9,
    "total_chunks": 12
  },
  {
    "id": "ff2eafe46f41e307ae16f1745377de96",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_addons-api.html",
    "source_type": "documentation",
    "title": "Addon API | Storybook docs",
    "content": "const Panel = () => { // Connects to Storybook's API and retrieves the value of the custom parameter for the current story const value = useParameter('custom-parameter', 'initial value'); return ( <AddonPanel key=\"custom-panel\" active=\"true\"> {value === 'initial value' ( <h2>The story doesn't contain custom parameters Defaulting to the initial value </h2> ) : ( <h2>You've set {value} as the parameter </h2> )} </AddonPanel> ); }; useGlobals Extremely useful hook for addons that rely on Storybook GlobalsIt allows you to obtain and update global values We also recommend optimizing your addon to rely on React memo, or the following hooks; useMemo, useCallback to prevent a high volume of re-render cycles my-addon/manager js|tsimport React from 'react';\nimport { AddonPanel, Button } from 'storybook/internal/components';\nimport { useGlobals } from 'storybook/manager-api';\nexport const Panel = () => {\nconst [globals, updateGlobals] = useGlobals();\nconst isActive = globals['my-param-key'] || false; // 👈 Sets visibility based on the global value return (\n<AddonPanel key=\"custom-panel\" active={isActive}>\n<Button onClick={() => updateGlobals({ ['my-param-key']: isActive })}>\n{isActive 'Hide the addon panel' : 'Show the panel'}\n</Button>\n</AddonPanel>\n);\n};\nuseArgs\nHook that allows you to retrieve or update a story's args my-addon/src/manager js|tsimport { useArgs } from 'storybook/manager-api';\nconst [args, updateArgs, resetArgs] = useArgs();\n// To update one or more args:\nupdateArgs({ key: 'value' });\n// To reset one (or more) args:\nresetArgs((argNames: ['key']));\n// To reset all args\nresetArgs();\nLearn more about the Storybook addon ecosystem\nTypes of addons for other types of addons\nWriting addons for the basics of addon development\nPresets for preset development\nIntegration catalog for requirements and available recipes\nAPI reference to learn about the available APIs\nWas this page useful",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1081894,
      "relative_path": "documentation\\storybook\\_docs_addons_addons-api.html",
      "source_type": "documentation"
    },
    "token_count": 438,
    "chunk_index": 10,
    "total_chunks": 12
  },
  {
    "id": "e460c577cce2e97efbb3cb0576c38a8a",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_addons-api.html",
    "source_type": "documentation",
    "title": "Addon API | Storybook docs",
    "content": "updateArgs, resetArgs] = useArgs(); // To update one or more args: updateArgs({ key: 'value' }); // To reset one (or more) args: resetArgs((argNames: ['key'])); // To reset all args resetArgs(); Learn more about the Storybook addon ecosystem Types of addons for other types of addons Writing addons for the basics of addon development Presets for preset development Integration catalog for requirements and available recipes API reference to learn about the available APIs Was this page useful👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1081894,
      "relative_path": "documentation\\storybook\\_docs_addons_addons-api.html",
      "source_type": "documentation"
    },
    "token_count": 169,
    "chunk_index": 11,
    "total_chunks": 12
  },
  {
    "id": "0731cdbdf0dec2552d6ae9eb50bd13db",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_writing-presets.html",
    "source_type": "documentation",
    "title": "Write a preset addon | Storybook docs",
    "content": "Write a preset addon | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Addons » Write a presetDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQWrite a preset addonReactVueAngularWeb ComponentsMoreStorybook presets are pre-configured settings or configurations that enable developers quickly set up and customize their environment with a specific set of features, functionalities, or integrations How presets work\nPreset addons allow developers to compose various configuration options and plugins via APIs to integrate with Storybook and customize its behavior and functionality Typically, presets are separated into two files, each with its specific role Local presets\nThis type of preset allows you to encapsulate and organize configurations specific to the addon, including builder support, Babel, or third-party integrations For example:\nexample-addon/src/preset tsTypescriptimport { webpackFinal as webpack } from ' /webpack/webpackFinal';\nimport { viteFinal as vite } from ' /vite/viteFinal';\nimport { babelDefault as babel } from ' /babel/babelDefault';\nexport const webpackFinal = webpack as any;\nexport const viteFinal = vite as any;\nexport const babelDefault = babel as any;\nRoot-level presets\nThis type of preset is user-facing and responsible for registering the addon without any additional configuration from the user by bundling Storybook-related features (e g",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 734221,
      "relative_path": "documentation\\storybook\\_docs_addons_writing-presets.html",
      "source_type": "documentation"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "134283512c5b20245b6f0bc7132d24d6",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_writing-presets.html",
    "source_type": "documentation",
    "title": "Write a preset addon | Storybook docs",
    "content": "example-addon/src/preset tsTypescriptimport { webpackFinal as webpack } from ' /webpack/webpackFinal'; import { viteFinal as vite } from ' /vite/viteFinal'; import { babelDefault as babel } from ' /babel/babelDefault'; export const webpackFinal = webpack as any; export const viteFinal = vite as any; export const babelDefault = babel as any; Root-level presets This type of preset is user-facing and responsible for registering the addon without any additional configuration from the user by bundling Storybook-related features (e g, parameters) via the previewAnnotations and UI related features (e g , addons) via the managerEntries API For example:\nexample-addon/preset jsexport const previewAnnotations = [require resolve(' /dist/preview')];\nexport const managerEntries = [require resolve(' /dist/manager')];\nexport * from ' /dist/preset';\nPresets API\nWhen writing a preset, you can access a select set of APIs to interact with the Storybook environment, including the supported builders (e g , Webpack, Vite), the Storybook configuration, and UI Below are the available APIs you can use when writing a preset addon Babel\nTo customize Storybook's Babel configuration and add support for additional features, you can use the babelDefault API It will apply the provided configuration ahead of any other user presets, which can be further customized by the end user via the babel configuration option For example:\nexample-addon/src/babel/babelDefault tsTypescriptimport { TransformOptions } from '@babel/core';\nexport function babelDefault(config: TransformOptions) {\nreturn { config,\nplugins: [ config plugins,\n[require resolve('@babel/plugin-transform-react-jsx'), {}, 'preset'],\n],\n};\n}\nℹ️The Babel configuration is only applied to frameworks that use Babel internally If you enable it for a framework that uses a different compiler, like SWC or esbuild, it will be ignored Builders\nBy default, Storybook provides support for the leading industry builders, including Webpack and Vite If you need additional features for any of these builders, you can use APIs to extend the builder configuration based on your specific needs Vite\nIf you are creating a preset and want to include Vite support, the viteFinal API can be used to modify the default configuration and enable additional features For example:\nexample-addon/src/vite/viteFinal",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 734221,
      "relative_path": "documentation\\storybook\\_docs_addons_writing-presets.html",
      "source_type": "documentation"
    },
    "token_count": 488,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "aeaf503678fce7e3e7c20d2be16d9a61",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_writing-presets.html",
    "source_type": "documentation",
    "title": "Write a preset addon | Storybook docs",
    "content": "or esbuild, it will be ignored Builders By default, Storybook provides support for the leading industry builders, including Webpack and Vite If you need additional features for any of these builders, you can use APIs to extend the builder configuration based on your specific needs Vite If you are creating a preset and want to include Vite support, the viteFinal API can be used to modify the default configuration and enable additional features For example: example-addon/src/vite/viteFinaltsTypescriptexport function ViteFinal(config: any, options: any = {}) {\nconfig plugins push(\nnew MyCustomPlugin({\nsomeOption: true,\n}),\n);\nreturn config;\n}\nWebpack\nTo customize the Webpack configuration in Storybook to add support for additional file types, apply specific loaders, configure plugins, or make any other necessary modifications, you can use the webpackFinal API Once invoked, it will extend the default Webpack configuration with the provided configuration An example of this would be:\nexample-addon/src/webpack/webpackFinal tsTypescriptimport type { Configuration as WebpackConfig } from 'webpack';\nexport function webpackFinal(config: WebpackConfig, options: any = {}) {\nconst rules = [ (config module rules || []),\n{\ntest: /\\ custom-file$/,\nloader: require resolve(`custom-loader`),\n},\n];\nconfig module rules = rules;\nreturn config;\n}\nManagerEntries\nIf you're writing a preset that loads third-party addons, which you may not have control over, but require access to specific features or additional configuration, you can use the managerEntries API For example:\nexample-addon/preset jsexport const managerEntries = (entry = []) => {\nreturn [ entry, require resolve('path-to-third-party-addon')];\n};\nPreviewAnnotations\nIf you need additional settings to render stories for a preset, like decorators or parameters, you can use the previewAnnotations API For example, to apply a decorator to all stories, create a preview file that includes the decorator and make it available to the preset as follows:\nexample-addon/src/preview tsTypescriptimport type { Renderer, ProjectAnnotations } from 'storybook/internal/types';\nimport { PARAM_KEY } from ' /constants';\nimport { CustomDecorator } from '",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 734221,
      "relative_path": "documentation\\storybook\\_docs_addons_writing-presets.html",
      "source_type": "documentation"
    },
    "token_count": 443,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "4e15eeb356746370a0dfb552df2f4510",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_writing-presets.html",
    "source_type": "documentation",
    "title": "Write a preset addon | Storybook docs",
    "content": "return [ entry, require resolve('path-to-third-party-addon')]; }; PreviewAnnotations If you need additional settings to render stories for a preset, like decorators or parameters, you can use the previewAnnotations API For example, to apply a decorator to all stories, create a preview file that includes the decorator and make it available to the preset as follows: example-addon/src/preview tsTypescriptimport type { Renderer, ProjectAnnotations } from 'storybook/internal/types'; import { PARAM_KEY } from ' /constants'; import { CustomDecorator } from '/decorators';\nconst preview: ProjectAnnotations<Renderer> = {\ndecorators: [CustomDecorator],\nglobals: {\n[PARAM_KEY]: false,\n},\n};\nexport default preview;\nAdvanced configuration\nThe presets API is designed to be flexible and allow you to customize Storybook to your specific needs, including using presets for more advanced use cases without publishing them In such cases, you can rely on a private preset These private presets contain configuration options meant for development purposes and not for end-users The storybook/main js|ts file is an example of such a private preset that empowers you to modify the behavior and functionality of Storybook storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, angular, etc import type { StorybookConfig } from '@storybook/your-framework';\nconst config: StorybookConfig = {\nviteFinal: async (config, options) => {\n// Update config here\nreturn config;\n},\nwebpackFinal: async (config, options) => {\n// Change webpack config\nreturn config;\n},\nbabel: async (config, options) => {\nreturn config;\n},\n};\nexport default config;\nAddons\nFor addon consumers, the managerEntries API can be too technical, making it difficult to use To make it easier to add addons to Storybook, the preset API provides the addons API, which accepts an array of addon names and will automatically load them for you For example: storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { StorybookConfig } from '@storybook/your-framework';\nconst config: StorybookConfig = {\naddons: [\n// Other Storybook addons\n'@storybook/addon-a11y',\n],\n};\nexport default config;\nThe array of values supports references to additional presets and addons that should be included in the manager",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 734221,
      "relative_path": "documentation\\storybook\\_docs_addons_writing-presets.html",
      "source_type": "documentation"
    },
    "token_count": 499,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "8d22a82f28a2196266d3d785d4908ced",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_writing-presets.html",
    "source_type": "documentation",
    "title": "Write a preset addon | Storybook docs",
    "content": "addons API, which accepts an array of addon names and will automatically load them for you For example: storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { StorybookConfig } from '@storybook/your-framework'; const config: StorybookConfig = { addons: [ // Other Storybook addons '@storybook/addon-a11y', ], }; export default config; The array of values supports references to additional presets and addons that should be included in the managerStorybook will automatically detect whether the provided value is a preset or an addon and load it accordingly Entries\nEntries are the place to register entry points for the preview This feature can be utilized to create a configure-storybook preset that automatically loads all * stories js files into Storybook, eliminating the need for users to copy-paste the same configuration repeatedly UI configuration\nThe Storybook preset API also provides access to the UI configuration, including the head and body HTML elements of the preview, configured by the previewHead and previewBody APIs Both allow you to set up Storybook in a way that is similar to using the preview-head html and preview-body html files These methods accept a string and return a modified version, injecting the provided content into the HTML element bodyhead storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { StorybookConfig } from '@storybook/your-framework';\nconst config: StorybookConfig = {\npreviewBody: (body) => `\n${body}\n${\nprocess env ANALYTICS_ID '<script src=\"https://cdn example com/analytics js\"></script>' : ''\n}\n`,\n};\nexport default config;\nAdditionally, if you need to customize the manager (i e , where Storybook’s search, navigation, toolbars, and addons render), you can use the managerHead to modify the UI, similar to how you would do it with the manager-head html file For example: storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { StorybookConfig } from '@storybook/your-framework';\nconst config: StorybookConfig = {\nmanagerHead: (head) => `\n${head}\n<link rel=\"icon\" type=\"image/png\" href=\"/logo192",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 734221,
      "relative_path": "documentation\\storybook\\_docs_addons_writing-presets.html",
      "source_type": "documentation"
    },
    "token_count": 496,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "92cb52c99931c364f921a932918599c1",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_writing-presets.html",
    "source_type": "documentation",
    "title": "Write a preset addon | Storybook docs",
    "content": "need to customize the manager (i e , where Storybook’s search, navigation, toolbars, and addons render), you can use the managerHead to modify the UI, similar to how you would do it with the manager-head html file For example: storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { StorybookConfig } from '@storybook/your-framework'; const config: StorybookConfig = { managerHead: (head) => ` ${head} <link rel=\"icon\" type=\"image/png\" href=\"/logo192png\" sizes=\"192x192\" />\n`,\n};\nexport default config;\nHowever, if you need, you can also customize the template used by Storybook to render the UI To do so, you can use the previewMainTemplate API and provide a reference for a custom template created as a ejs file For an example of how to do this, see the template used by the Webpack 5 builder Troubleshooting\nStorybook doesn't load files in my preset\nAs Storybook relies on esbuild instead of Webpack to build the UI, presets that depend on the managerWebpack API to configure the manager or load additional files other than CSS or images will no longer work We recommend removing it from your preset and adjusting your configuration to convert any additional files to JavaScript Learn more about the Storybook addon ecosystem\nTypes of addons for other types of addons\nWriting addons for the basics of addon development\nPresets for preset development\nIntegration catalog for requirements and available recipes\nAPI reference to learn about the available APIs\nWas this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 734221,
      "relative_path": "documentation\\storybook\\_docs_addons_writing-presets.html",
      "source_type": "documentation"
    },
    "token_count": 405,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "ce2baae10d16a239755749b7610fcad2",
    "source_file": "corpus\\documentation\\storybook\\_docs_api.html",
    "source_type": "documentation",
    "title": "API references | Storybook docs",
    "content": "API references | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs APIDocs » APIDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQAPI references\nAn overview of all available API references for Storybook Configuration\nNameDescriptionmain js|tsStorybook's primary configuration file, which specifies your Storybook project's behavior,\nincluding the location of your stories, the addons you use, feature flags and other\nproject-specific settings preview js|jsx|ts|tsxThis configuration file controls the way stories are rendered You can also use it to run\ncode that applies to all stories manager js|tsThis configuration file controls the behavior of Storybook's UI, the manager CLIStorybook is a CLI tool You can start Storybook in development mode or build a static\nversion of your Storybook Stories\nNameDescriptionCSFComponent Story Format (CSF) is the API for writing stories It's an\nopen standard based on ES6 modules that\nis portable beyond Storybook ArgTypesArgTypes specify the behavior of args By specifying\nthe type of an arg, you constrain the values that it can accept and provide information\nabout args that are not explicitly set ParametersParameters are static metadata used to configure your stories addons in Storybook They are specified at the story, meta (component), project (global) levels",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 485091,
      "relative_path": "documentation\\storybook\\_docs_api.html",
      "source_type": "documentation"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "e500792c5092ef8bdcefb22424feb6d5",
    "source_file": "corpus\\documentation\\storybook\\_docs_api.html",
    "source_type": "documentation",
    "title": "API references | Storybook docs",
    "content": "Story Format (CSF) is the API for writing stories It's an open standard based on ES6 modules that is portable beyond Storybook ArgTypesArgTypes specify the behavior of args By specifying the type of an arg, you constrain the values that it can accept and provide information about args that are not explicitly set ParametersParameters are static metadata used to configure your stories addons in Storybook They are specified at the story, meta (component), project (global) levelsDocs\nNameDescriptionDoc blocksStorybook offers several doc blocks to help document your components and other aspects of\nyour project Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 485091,
      "relative_path": "documentation\\storybook\\_docs_api.html",
      "source_type": "documentation"
    },
    "token_count": 187,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "5f8407f880de93a60a7dbc6cf3649a7b",
    "source_file": "corpus\\documentation\\shadcn\\_docs_theming.html",
    "source_type": "documentation",
    "title": "Theming - shadcn/ui",
    "content": "Theming - shadcn/uiToggle MenuMenushadcn/uiDocsComponentsBlocksChartsThemesColorsSearch documentation Search ⌘K92 8kToggle layoutToggle themeGet StartedIntroductionInstallationcomponents jsonThemingDark ModeCLIMonorepoOpen in v0JavaScriptBlocksFigmaChangelogLegacy DocsComponentsAccordionAlertAlert DialogAspect RatioAvatarBadgeBreadcrumbButtonCalendarCardCarouselChartCheckboxCollapsibleComboboxCommandContext MenuData TableDate PickerDialogDrawerDropdown MenuReact Hook FormHover CardInputInput OTPLabelMenubarNavigation MenuPaginationPopoverProgressRadio GroupResizableScroll-areaSelectSeparatorSheetSidebarSkeletonSliderSonnerSwitchTableTabsTextareaToastToggleToggle GroupTooltipTypographyInstallationNext jsViteLaravelReact RouterRemixAstroTanStack StartTanStack RouterManual InstallationDark modeDark ModeNext jsViteAstroRemixRegistryRegistryGetting StartedFAQOpen in v0Examplesregistry jsonregistry-item jsonThemingCopy PagePreviousNextUsing CSS Variables and color utilities for theming You can choose between using CSS variables (recommended) or utility classes for theming CSS Variables\nCopy<div className=\"bg-background text-foreground\" />\nTo use CSS variables for theming set tailwind cssVariables to true in your components json file components jsonCopy{\n\"style\": \"default\",\n\"rsc\": true,\n\"tailwind\": {\n\"config\": \"\",\n\"css\": \"app/globals css\",\n\"baseColor\": \"neutral\",\n\"cssVariables\": true\n},\n\"aliases\": {\n\"components\": \"@/components\",\n\"utils\": \"@/lib/utils\",\n\"ui\": \"@/components/ui\",\n\"lib\": \"@/lib\",\n\"hooks\": \"@/hooks\"\n},\n\"iconLibrary\": \"lucide\"\n}\nUtility classes\nCopy<div className=\"bg-zinc-950 dark:bg-white\" />\nTo use utility classes for theming set tailwind cssVariables to false in your components json file components jsonCopy{\n\"style\": \"default\",\n\"rsc\": true,\n\"tailwind\": {\n\"config\": \"\",\n\"css\": \"app/globals css\",\n\"baseColor\": \"neutral\",\n\"cssVariables\": false\n},\n\"aliases\": {\n\"components\": \"@/components\",\n\"utils\": \"@/lib/utils\",\n\"ui\": \"@/components/ui\",\n\"lib\": \"@/lib\",\n\"hooks\": \"@/hooks\"\n},\n\"iconLibrary\": \"lucide\"\n}\nConvention\nWe use a simple background and foreground convention for colors",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1073281,
      "relative_path": "documentation\\shadcn\\_docs_theming.html",
      "source_type": "documentation"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 26
  },
  {
    "id": "8763e1799bbdefd867be28a1eb8de259",
    "source_file": "corpus\\documentation\\shadcn\\_docs_theming.html",
    "source_type": "documentation",
    "title": "Theming - shadcn/ui",
    "content": "\"@/components/ui\", \"lib\": \"@/lib\", \"hooks\": \"@/hooks\" }, \"iconLibrary\": \"lucide\" } Utility classes Copy<div className=\"bg-zinc-950 dark:bg-white\" /> To use utility classes for theming set tailwind cssVariables to false in your components json file components jsonCopy{ \"style\": \"default\", \"rsc\": true, \"tailwind\": { \"config\": \"\", \"css\": \"app/globals css\", \"baseColor\": \"neutral\", \"cssVariables\": false }, \"aliases\": { \"components\": \"@/components\", \"utils\": \"@/lib/utils\", \"ui\": \"@/components/ui\", \"lib\": \"@/lib\", \"hooks\": \"@/hooks\" }, \"iconLibrary\": \"lucide\" } Convention We use a simple background and foreground convention for colorsThe background variable is used for the background color of the component and the foreground variable is used for the text color The background suffix is omitted when the variable is used for the background color of the component Given the following CSS variables:\nCopy--primary: oklch(0 205 0 0);\n--primary-foreground: oklch(0 985 0 0);\nThe background color of the following component will be var(--primary) and the foreground color will be var(--primary-foreground) Copy<div className=\"bg-primary text-primary-foreground\">Hello</div>\nList of variables\nHere's the list of variables available for customization:\napp/globals cssCopy:root {\n--radius: 0 625rem;\n--background: oklch(1 0 0);\n--foreground: oklch(0 145 0 0);\n--card: oklch(1 0 0);\n--card-foreground: oklch(0 145 0 0);\n--popover: oklch(1 0 0);\n--popover-foreground: oklch(0 145 0 0);\n--primary: oklch(0 205 0 0);\n--primary-foreground: oklch(0 985 0 0);\n--secondary: oklch(0 97 0 0);\n--secondary-foreground: oklch(0 205 0 0);\n--muted: oklch(0 97 0 0);\n--muted-foreground: oklch(0 556 0 0);\n--accent: oklch(0",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1073281,
      "relative_path": "documentation\\shadcn\\_docs_theming.html",
      "source_type": "documentation"
    },
    "token_count": 511,
    "chunk_index": 1,
    "total_chunks": 26
  },
  {
    "id": "ec5d2ece13c83f19da9ff847ab11e135",
    "source_file": "corpus\\documentation\\shadcn\\_docs_theming.html",
    "source_type": "documentation",
    "title": "Theming - shadcn/ui",
    "content": "List of variables Here's the list of variables available for customization: app/globals cssCopy:root { --radius: 0 625rem; --background: oklch(1 0 0); --foreground: oklch(0 145 0 0); --card: oklch(1 0 0); --card-foreground: oklch(0 145 0 0); --popover: oklch(1 0 0); --popover-foreground: oklch(0 145 0 0); --primary: oklch(0 205 0 0); --primary-foreground: oklch(0 985 0 0); --secondary: oklch(0 97 0 0); --secondary-foreground: oklch(0 205 0 0); --muted: oklch(0 97 0 0); --muted-foreground: oklch(0 556 0 0); --accent: oklch(097 0 0);\n--accent-foreground: oklch(0 205 0 0);\n--destructive: oklch(0 577 0 245 27 325);\n--border: oklch(0 922 0 0);\n--input: oklch(0 922 0 0);\n--ring: oklch(0 708 0 0);\n--chart-1: oklch(0 646 0 222 41 116);\n--chart-2: oklch(0 6 0 118 184 704);\n--chart-3: oklch(0 398 0 07 227 392);\n--chart-4: oklch(0 828 0 189 84 429);\n--chart-5: oklch(0 769 0 188 70 08);\n--sidebar: oklch(0 985 0 0);\n--sidebar-foreground: oklch(0 145 0 0);\n--sidebar-primary: oklch(0 205 0 0);\n--sidebar-primary-foreground: oklch(0 985 0 0);\n--sidebar-accent: oklch(0 97 0 0);\n--sidebar-accent-foreground: oklch(0 205 0 0);\n--sidebar-border: oklch(0",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1073281,
      "relative_path": "documentation\\shadcn\\_docs_theming.html",
      "source_type": "documentation"
    },
    "token_count": 527,
    "chunk_index": 2,
    "total_chunks": 26
  },
  {
    "id": "86942b79ed9d0de3023afd8cdf3c2715",
    "source_file": "corpus\\documentation\\shadcn\\_docs_theming.html",
    "source_type": "documentation",
    "title": "Theming - shadcn/ui",
    "content": "oklch(0 922 0 0); --ring: oklch(0 708 0 0); --chart-1: oklch(0 646 0 222 41 116); --chart-2: oklch(0 6 0 118 184 704); --chart-3: oklch(0 398 0 07 227 392); --chart-4: oklch(0 828 0 189 84 429); --chart-5: oklch(0 769 0 188 70 08); --sidebar: oklch(0 985 0 0); --sidebar-foreground: oklch(0 145 0 0); --sidebar-primary: oklch(0 205 0 0); --sidebar-primary-foreground: oklch(0 985 0 0); --sidebar-accent: oklch(0 97 0 0); --sidebar-accent-foreground: oklch(0 205 0 0); --sidebar-border: oklch(0922 0 0);\n--sidebar-ring: oklch(0 708 0 0);\n} dark {\n--background: oklch(0 145 0 0);\n--foreground: oklch(0 985 0 0);\n--card: oklch(0 205 0 0);\n--card-foreground: oklch(0 985 0 0);\n--popover: oklch(0 269 0 0);\n--popover-foreground: oklch(0 985 0 0);\n--primary: oklch(0 922 0 0);\n--primary-foreground: oklch(0 205 0 0);\n--secondary: oklch(0 269 0 0);\n--secondary-foreground: oklch(0 985 0 0);\n--muted: oklch(0 269 0 0);\n--muted-foreground: oklch(0 708 0 0);\n--accent: oklch(0 371 0 0);\n--accent-foreground: oklch(0 985 0 0);\n--destructive: oklch(0 704 0 191 22",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1073281,
      "relative_path": "documentation\\shadcn\\_docs_theming.html",
      "source_type": "documentation"
    },
    "token_count": 509,
    "chunk_index": 3,
    "total_chunks": 26
  },
  {
    "id": "5f70e083cc72eb9d4269ea0cc8a1a1b1",
    "source_file": "corpus\\documentation\\shadcn\\_docs_theming.html",
    "source_type": "documentation",
    "title": "Theming - shadcn/ui",
    "content": "--background: oklch(0 145 0 0); --foreground: oklch(0 985 0 0); --card: oklch(0 205 0 0); --card-foreground: oklch(0 985 0 0); --popover: oklch(0 269 0 0); --popover-foreground: oklch(0 985 0 0); --primary: oklch(0 922 0 0); --primary-foreground: oklch(0 205 0 0); --secondary: oklch(0 269 0 0); --secondary-foreground: oklch(0 985 0 0); --muted: oklch(0 269 0 0); --muted-foreground: oklch(0 708 0 0); --accent: oklch(0 371 0 0); --accent-foreground: oklch(0 985 0 0); --destructive: oklch(0 704 0 191 22216);\n--border: oklch(1 0 0 / 10%);\n--input: oklch(1 0 0 / 15%);\n--ring: oklch(0 556 0 0);\n--chart-1: oklch(0 488 0 243 264 376);\n--chart-2: oklch(0 696 0 17 162 48);\n--chart-3: oklch(0 769 0 188 70 08);\n--chart-4: oklch(0 627 0 265 303 9);\n--chart-5: oklch(0 645 0 246 16 439);\n--sidebar: oklch(0 205 0 0);\n--sidebar-foreground: oklch(0 985 0 0);\n--sidebar-primary: oklch(0 488 0 243 264 376);\n--sidebar-primary-foreground: oklch(0 985 0 0);\n--sidebar-accent: oklch(0 269 0 0);\n--sidebar-accent-foreground: oklch(0",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1073281,
      "relative_path": "documentation\\shadcn\\_docs_theming.html",
      "source_type": "documentation"
    },
    "token_count": 494,
    "chunk_index": 4,
    "total_chunks": 26
  },
  {
    "id": "698e5e66b29e4dd5a64b3f969d5c64c1",
    "source_file": "corpus\\documentation\\shadcn\\_docs_theming.html",
    "source_type": "documentation",
    "title": "Theming - shadcn/ui",
    "content": "10%); --input: oklch(1 0 0 / 15%); --ring: oklch(0 556 0 0); --chart-1: oklch(0 488 0 243 264 376); --chart-2: oklch(0 696 0 17 162 48); --chart-3: oklch(0 769 0 188 70 08); --chart-4: oklch(0 627 0 265 303 9); --chart-5: oklch(0 645 0 246 16 439); --sidebar: oklch(0 205 0 0); --sidebar-foreground: oklch(0 985 0 0); --sidebar-primary: oklch(0 488 0 243 264 376); --sidebar-primary-foreground: oklch(0 985 0 0); --sidebar-accent: oklch(0 269 0 0); --sidebar-accent-foreground: oklch(0985 0 0);\n--sidebar-border: oklch(1 0 0 / 10%);\n--sidebar-ring: oklch(0 439 0 0);\n}\nAdding new colors\nTo add new colors, you need to add them to your CSS file and to your tailwind config js file app/globals cssCopy:root {\n--warning: oklch(0 84 0 16 84);\n--warning-foreground: oklch(0 28 0 07 46);\n} dark {\n--warning: oklch(0 41 0 11 46);\n--warning-foreground: oklch(0 99 0 02 95);\n}\n@theme inline {\n--color-warning: var(--warning);\n--color-warning-foreground: var(--warning-foreground);\n}\nYou can now use the warning utility class in your components Copy<div className=\"bg-warning text-warning-foreground\" />\nOther color formats\nSee the Tailwind CSS documentation for more information on using colors in Tailwind CSS Base Colors\nFor reference, here's a list of the base colors that are available Neutral\nExpandapp/globals cssCopy:root {\n--radius: 0",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1073281,
      "relative_path": "documentation\\shadcn\\_docs_theming.html",
      "source_type": "documentation"
    },
    "token_count": 490,
    "chunk_index": 5,
    "total_chunks": 26
  },
  {
    "id": "63624cacc90b3edee777b431ffa66cff",
    "source_file": "corpus\\documentation\\shadcn\\_docs_theming.html",
    "source_type": "documentation",
    "title": "Theming - shadcn/ui",
    "content": "} dark { --warning: oklch(0 41 0 11 46); --warning-foreground: oklch(0 99 0 02 95); } @theme inline { --color-warning: var(--warning); --color-warning-foreground: var(--warning-foreground); } You can now use the warning utility class in your components Copy<div className=\"bg-warning text-warning-foreground\" /> Other color formats See the Tailwind CSS documentation for more information on using colors in Tailwind CSS Base Colors For reference, here's a list of the base colors that are available Neutral Expandapp/globals cssCopy:root { --radius: 0625rem;\n--background: oklch(1 0 0);\n--foreground: oklch(0 145 0 0);\n--card: oklch(1 0 0);\n--card-foreground: oklch(0 145 0 0);\n--popover: oklch(1 0 0);\n--popover-foreground: oklch(0 145 0 0);\n--primary: oklch(0 205 0 0);\n--primary-foreground: oklch(0 985 0 0);\n--secondary: oklch(0 97 0 0);\n--secondary-foreground: oklch(0 205 0 0);\n--muted: oklch(0 97 0 0);\n--muted-foreground: oklch(0 556 0 0);\n--accent: oklch(0 97 0 0);\n--accent-foreground: oklch(0 205 0 0);\n--destructive: oklch(0 577 0 245 27 325);\n--border: oklch(0 922 0 0);\n--input: oklch(0 922 0 0);\n--ring: oklch(0 708 0 0);\n--chart-1: oklch(0 646 0 222 41 116);\n--chart-2: oklch(0 6 0 118 184 704);\n--chart-3: oklch(0 398 0 07 227 392);\n--chart-4: oklch(0 828 0 189 84 429);\n--chart-5: oklch(0 769 0 188 70",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1073281,
      "relative_path": "documentation\\shadcn\\_docs_theming.html",
      "source_type": "documentation"
    },
    "token_count": 526,
    "chunk_index": 6,
    "total_chunks": 26
  },
  {
    "id": "bd5de81c46f7138d28b606d931e16f6d",
    "source_file": "corpus\\documentation\\shadcn\\_docs_theming.html",
    "source_type": "documentation",
    "title": "Theming - shadcn/ui",
    "content": "--muted: oklch(0 97 0 0); --muted-foreground: oklch(0 556 0 0); --accent: oklch(0 97 0 0); --accent-foreground: oklch(0 205 0 0); --destructive: oklch(0 577 0 245 27 325); --border: oklch(0 922 0 0); --input: oklch(0 922 0 0); --ring: oklch(0 708 0 0); --chart-1: oklch(0 646 0 222 41 116); --chart-2: oklch(0 6 0 118 184 704); --chart-3: oklch(0 398 0 07 227 392); --chart-4: oklch(0 828 0 189 84 429); --chart-5: oklch(0 769 0 188 7008);\n--sidebar: oklch(0 985 0 0);\n--sidebar-foreground: oklch(0 145 0 0);\n--sidebar-primary: oklch(0 205 0 0);\n--sidebar-primary-foreground: oklch(0 985 0 0);\n--sidebar-accent: oklch(0 97 0 0);\n--sidebar-accent-foreground: oklch(0 205 0 0);\n--sidebar-border: oklch(0 922 0 0);\n--sidebar-ring: oklch(0 708 0 0);\n} dark {\n--background: oklch(0 145 0 0);\n--foreground: oklch(0 985 0 0);\n--card: oklch(0 205 0 0);\n--card-foreground: oklch(0 985 0 0);\n--popover: oklch(0 205 0 0);\n--popover-foreground: oklch(0 985 0 0);\n--primary: oklch(0 922 0 0);\n--primary-foreground: oklch(0 205 0 0);\n--secondary: oklch(0",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1073281,
      "relative_path": "documentation\\shadcn\\_docs_theming.html",
      "source_type": "documentation"
    },
    "token_count": 506,
    "chunk_index": 7,
    "total_chunks": 26
  },
  {
    "id": "948384017d09b321786fd15d745cdddd",
    "source_file": "corpus\\documentation\\shadcn\\_docs_theming.html",
    "source_type": "documentation",
    "title": "Theming - shadcn/ui",
    "content": "0); --sidebar-primary: oklch(0 205 0 0); --sidebar-primary-foreground: oklch(0 985 0 0); --sidebar-accent: oklch(0 97 0 0); --sidebar-accent-foreground: oklch(0 205 0 0); --sidebar-border: oklch(0 922 0 0); --sidebar-ring: oklch(0 708 0 0); } dark { --background: oklch(0 145 0 0); --foreground: oklch(0 985 0 0); --card: oklch(0 205 0 0); --card-foreground: oklch(0 985 0 0); --popover: oklch(0 205 0 0); --popover-foreground: oklch(0 985 0 0); --primary: oklch(0 922 0 0); --primary-foreground: oklch(0 205 0 0); --secondary: oklch(0269 0 0);\n--secondary-foreground: oklch(0 985 0 0);\n--muted: oklch(0 269 0 0);\n--muted-foreground: oklch(0 708 0 0);\n--accent: oklch(0 269 0 0);\n--accent-foreground: oklch(0 985 0 0);\n--destructive: oklch(0 704 0 191 22 216);\n--border: oklch(1 0 0 / 10%);\n--input: oklch(1 0 0 / 15%);\n--ring: oklch(0 556 0 0);\n--chart-1: oklch(0 488 0 243 264 376);\n--chart-2: oklch(0 696 0 17 162 48);\n--chart-3: oklch(0 769 0 188 70 08);\n--chart-4: oklch(0 627 0 265 303 9);\n--chart-5: oklch(0 645 0 246 16 439);\n--sidebar: oklch(0",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1073281,
      "relative_path": "documentation\\shadcn\\_docs_theming.html",
      "source_type": "documentation"
    },
    "token_count": 510,
    "chunk_index": 8,
    "total_chunks": 26
  },
  {
    "id": "843f42e6f3330a0d01944f5171a3d285",
    "source_file": "corpus\\documentation\\shadcn\\_docs_theming.html",
    "source_type": "documentation",
    "title": "Theming - shadcn/ui",
    "content": "--muted-foreground: oklch(0 708 0 0); --accent: oklch(0 269 0 0); --accent-foreground: oklch(0 985 0 0); --destructive: oklch(0 704 0 191 22 216); --border: oklch(1 0 0 / 10%); --input: oklch(1 0 0 / 15%); --ring: oklch(0 556 0 0); --chart-1: oklch(0 488 0 243 264 376); --chart-2: oklch(0 696 0 17 162 48); --chart-3: oklch(0 769 0 188 70 08); --chart-4: oklch(0 627 0 265 303 9); --chart-5: oklch(0 645 0 246 16 439); --sidebar: oklch(0205 0 0);\n--sidebar-foreground: oklch(0 985 0 0);\n--sidebar-primary: oklch(0 488 0 243 264 376);\n--sidebar-primary-foreground: oklch(0 985 0 0);\n--sidebar-accent: oklch(0 269 0 0);\n--sidebar-accent-foreground: oklch(0 985 0 0);\n--sidebar-border: oklch(1 0 0 / 10%);\n--sidebar-ring: oklch(0 556 0 0);\n}Expand\nStone\nExpandapp/globals cssCopy:root {\n--radius: 0 625rem;\n--background: oklch(1 0 0);\n--foreground: oklch(0 147 0 004 49 25);\n--card: oklch(1 0 0);\n--card-foreground: oklch(0 147 0 004 49 25);\n--popover: oklch(1 0 0);\n--popover-foreground: oklch(0 147 0 004 49 25);\n--primary: oklch(0 216 0 006 56 043);\n--primary-foreground: oklch(0 985 0 001 106",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1073281,
      "relative_path": "documentation\\shadcn\\_docs_theming.html",
      "source_type": "documentation"
    },
    "token_count": 522,
    "chunk_index": 9,
    "total_chunks": 26
  },
  {
    "id": "57619982513b8ebc2d28ad5429b8a482",
    "source_file": "corpus\\documentation\\shadcn\\_docs_theming.html",
    "source_type": "documentation",
    "title": "Theming - shadcn/ui",
    "content": "0); --sidebar-accent: oklch(0 269 0 0); --sidebar-accent-foreground: oklch(0 985 0 0); --sidebar-border: oklch(1 0 0 / 10%); --sidebar-ring: oklch(0 556 0 0); }Expand Stone Expandapp/globals cssCopy:root { --radius: 0 625rem; --background: oklch(1 0 0); --foreground: oklch(0 147 0 004 49 25); --card: oklch(1 0 0); --card-foreground: oklch(0 147 0 004 49 25); --popover: oklch(1 0 0); --popover-foreground: oklch(0 147 0 004 49 25); --primary: oklch(0 216 0 006 56 043); --primary-foreground: oklch(0 985 0 001 106423);\n--secondary: oklch(0 97 0 001 106 424);\n--secondary-foreground: oklch(0 216 0 006 56 043);\n--muted: oklch(0 97 0 001 106 424);\n--muted-foreground: oklch(0 553 0 013 58 071);\n--accent: oklch(0 97 0 001 106 424);\n--accent-foreground: oklch(0 216 0 006 56 043);\n--destructive: oklch(0 577 0 245 27 325);\n--border: oklch(0 923 0 003 48 717);\n--input: oklch(0 923 0 003 48 717);\n--ring: oklch(0 709 0 01 56 259);\n--chart-1: oklch(0 646 0 222 41 116);\n--chart-2: oklch(0 6 0 118 184 704);\n--chart-3: oklch(0 398 0 07 227 392);\n--chart-4: oklch(0 828 0 189 84 429);\n--chart-5: oklch(0 769 0 188 70 08);\n--sidebar: oklch(0",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1073281,
      "relative_path": "documentation\\shadcn\\_docs_theming.html",
      "source_type": "documentation"
    },
    "token_count": 544,
    "chunk_index": 10,
    "total_chunks": 26
  },
  {
    "id": "e0f7227175a0d6e9e907740868c39763",
    "source_file": "corpus\\documentation\\shadcn\\_docs_theming.html",
    "source_type": "documentation",
    "title": "Theming - shadcn/ui",
    "content": "0 001 106 424); --accent-foreground: oklch(0 216 0 006 56 043); --destructive: oklch(0 577 0 245 27 325); --border: oklch(0 923 0 003 48 717); --input: oklch(0 923 0 003 48 717); --ring: oklch(0 709 0 01 56 259); --chart-1: oklch(0 646 0 222 41 116); --chart-2: oklch(0 6 0 118 184 704); --chart-3: oklch(0 398 0 07 227 392); --chart-4: oklch(0 828 0 189 84 429); --chart-5: oklch(0 769 0 188 70 08); --sidebar: oklch(0985 0 001 106 423);\n--sidebar-foreground: oklch(0 147 0 004 49 25);\n--sidebar-primary: oklch(0 216 0 006 56 043);\n--sidebar-primary-foreground: oklch(0 985 0 001 106 423);\n--sidebar-accent: oklch(0 97 0 001 106 424);\n--sidebar-accent-foreground: oklch(0 216 0 006 56 043);\n--sidebar-border: oklch(0 923 0 003 48 717);\n--sidebar-ring: oklch(0 709 0 01 56 259);\n} dark {\n--background: oklch(0 147 0 004 49 25);\n--foreground: oklch(0 985 0 001 106 423);\n--card: oklch(0 216 0 006 56 043);\n--card-foreground: oklch(0 985 0 001 106 423);\n--popover: oklch(0 216 0 006 56 043);\n--popover-foreground: oklch(0 985 0 001 106 423);\n--primary: oklch(0 923 0 003 48 717);\n--primary-foreground: oklch(0 216 0 006 56 043);\n--secondary: oklch(0",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1073281,
      "relative_path": "documentation\\shadcn\\_docs_theming.html",
      "source_type": "documentation"
    },
    "token_count": 545,
    "chunk_index": 11,
    "total_chunks": 26
  },
  {
    "id": "f11f9e77ffe106271e5a2fd38e5498b3",
    "source_file": "corpus\\documentation\\shadcn\\_docs_theming.html",
    "source_type": "documentation",
    "title": "Theming - shadcn/ui",
    "content": "043); --sidebar-border: oklch(0 923 0 003 48 717); --sidebar-ring: oklch(0 709 0 01 56 259); } dark { --background: oklch(0 147 0 004 49 25); --foreground: oklch(0 985 0 001 106 423); --card: oklch(0 216 0 006 56 043); --card-foreground: oklch(0 985 0 001 106 423); --popover: oklch(0 216 0 006 56 043); --popover-foreground: oklch(0 985 0 001 106 423); --primary: oklch(0 923 0 003 48 717); --primary-foreground: oklch(0 216 0 006 56 043); --secondary: oklch(0268 0 007 34 298);\n--secondary-foreground: oklch(0 985 0 001 106 423);\n--muted: oklch(0 268 0 007 34 298);\n--muted-foreground: oklch(0 709 0 01 56 259);\n--accent: oklch(0 268 0 007 34 298);\n--accent-foreground: oklch(0 985 0 001 106 423);\n--destructive: oklch(0 704 0 191 22 216);\n--border: oklch(1 0 0 / 10%);\n--input: oklch(1 0 0 / 15%);\n--ring: oklch(0 553 0 013 58 071);\n--chart-1: oklch(0 488 0 243 264 376);\n--chart-2: oklch(0 696 0 17 162 48);\n--chart-3: oklch(0 769 0 188 70 08);\n--chart-4: oklch(0 627 0 265 303 9);\n--chart-5: oklch(0 645 0 246 16 439);\n--sidebar: oklch(0 216 0 006 56 043);\n--sidebar-foreground: oklch(0 985 0 001 106",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1073281,
      "relative_path": "documentation\\shadcn\\_docs_theming.html",
      "source_type": "documentation"
    },
    "token_count": 537,
    "chunk_index": 12,
    "total_chunks": 26
  },
  {
    "id": "b5af09028b99900cf821cebc9d1f0c7d",
    "source_file": "corpus\\documentation\\shadcn\\_docs_theming.html",
    "source_type": "documentation",
    "title": "Theming - shadcn/ui",
    "content": "106 423); --destructive: oklch(0 704 0 191 22 216); --border: oklch(1 0 0 / 10%); --input: oklch(1 0 0 / 15%); --ring: oklch(0 553 0 013 58 071); --chart-1: oklch(0 488 0 243 264 376); --chart-2: oklch(0 696 0 17 162 48); --chart-3: oklch(0 769 0 188 70 08); --chart-4: oklch(0 627 0 265 303 9); --chart-5: oklch(0 645 0 246 16 439); --sidebar: oklch(0 216 0 006 56 043); --sidebar-foreground: oklch(0 985 0 001 106423);\n--sidebar-primary: oklch(0 488 0 243 264 376);\n--sidebar-primary-foreground: oklch(0 985 0 001 106 423);\n--sidebar-accent: oklch(0 268 0 007 34 298);\n--sidebar-accent-foreground: oklch(0 985 0 001 106 423);\n--sidebar-border: oklch(1 0 0 / 10%);\n--sidebar-ring: oklch(0 553 0 013 58 071);\n}Expand\nZinc\nExpandapp/globals cssCopy:root {\n--radius: 0 625rem;\n--background: oklch(1 0 0);\n--foreground: oklch(0 141 0 005 285 823);\n--card: oklch(1 0 0);\n--card-foreground: oklch(0 141 0 005 285 823);\n--popover: oklch(1 0 0);\n--popover-foreground: oklch(0 141 0 005 285 823);\n--primary: oklch(0 21 0 006 285 885);\n--primary-foreground: oklch(0 985 0 0);\n--secondary: oklch(0 967 0 001 286",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1073281,
      "relative_path": "documentation\\shadcn\\_docs_theming.html",
      "source_type": "documentation"
    },
    "token_count": 520,
    "chunk_index": 13,
    "total_chunks": 26
  },
  {
    "id": "56f8d3be7621a8897724e59b0b174101",
    "source_file": "corpus\\documentation\\shadcn\\_docs_theming.html",
    "source_type": "documentation",
    "title": "Theming - shadcn/ui",
    "content": "0 001 106 423); --sidebar-border: oklch(1 0 0 / 10%); --sidebar-ring: oklch(0 553 0 013 58 071); }Expand Zinc Expandapp/globals cssCopy:root { --radius: 0 625rem; --background: oklch(1 0 0); --foreground: oklch(0 141 0 005 285 823); --card: oklch(1 0 0); --card-foreground: oklch(0 141 0 005 285 823); --popover: oklch(1 0 0); --popover-foreground: oklch(0 141 0 005 285 823); --primary: oklch(0 21 0 006 285 885); --primary-foreground: oklch(0 985 0 0); --secondary: oklch(0 967 0 001 286375);\n--secondary-foreground: oklch(0 21 0 006 285 885);\n--muted: oklch(0 967 0 001 286 375);\n--muted-foreground: oklch(0 552 0 016 285 938);\n--accent: oklch(0 967 0 001 286 375);\n--accent-foreground: oklch(0 21 0 006 285 885);\n--destructive: oklch(0 577 0 245 27 325);\n--border: oklch(0 92 0 004 286 32);\n--input: oklch(0 92 0 004 286 32);\n--ring: oklch(0 705 0 015 286 067);\n--chart-1: oklch(0 646 0 222 41 116);\n--chart-2: oklch(0 6 0 118 184 704);\n--chart-3: oklch(0 398 0 07 227 392);\n--chart-4: oklch(0 828 0 189 84 429);\n--chart-5: oklch(0 769 0 188 70 08);\n--sidebar: oklch(0 985 0 0);\n--sidebar-foreground: oklch(0 141 0 005 285",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1073281,
      "relative_path": "documentation\\shadcn\\_docs_theming.html",
      "source_type": "documentation"
    },
    "token_count": 539,
    "chunk_index": 14,
    "total_chunks": 26
  },
  {
    "id": "989a19e4d674712f8f97d787ce560ab0",
    "source_file": "corpus\\documentation\\shadcn\\_docs_theming.html",
    "source_type": "documentation",
    "title": "Theming - shadcn/ui",
    "content": "285 885); --destructive: oklch(0 577 0 245 27 325); --border: oklch(0 92 0 004 286 32); --input: oklch(0 92 0 004 286 32); --ring: oklch(0 705 0 015 286 067); --chart-1: oklch(0 646 0 222 41 116); --chart-2: oklch(0 6 0 118 184 704); --chart-3: oklch(0 398 0 07 227 392); --chart-4: oklch(0 828 0 189 84 429); --chart-5: oklch(0 769 0 188 70 08); --sidebar: oklch(0 985 0 0); --sidebar-foreground: oklch(0 141 0 005 285823);\n--sidebar-primary: oklch(0 21 0 006 285 885);\n--sidebar-primary-foreground: oklch(0 985 0 0);\n--sidebar-accent: oklch(0 967 0 001 286 375);\n--sidebar-accent-foreground: oklch(0 21 0 006 285 885);\n--sidebar-border: oklch(0 92 0 004 286 32);\n--sidebar-ring: oklch(0 705 0 015 286 067);\n} dark {\n--background: oklch(0 141 0 005 285 823);\n--foreground: oklch(0 985 0 0);\n--card: oklch(0 21 0 006 285 885);\n--card-foreground: oklch(0 985 0 0);\n--popover: oklch(0 21 0 006 285 885);\n--popover-foreground: oklch(0 985 0 0);\n--primary: oklch(0 92 0 004 286 32);\n--primary-foreground: oklch(0 21 0 006 285 885);\n--secondary: oklch(0 274 0 006 286 033);\n--secondary-foreground: oklch(0 985 0 0);\n--muted: oklch(0",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1073281,
      "relative_path": "documentation\\shadcn\\_docs_theming.html",
      "source_type": "documentation"
    },
    "token_count": 537,
    "chunk_index": 15,
    "total_chunks": 26
  },
  {
    "id": "2c7d4cdd46dba85fba2ba151d2860c5f",
    "source_file": "corpus\\documentation\\shadcn\\_docs_theming.html",
    "source_type": "documentation",
    "title": "Theming - shadcn/ui",
    "content": "286 32); --sidebar-ring: oklch(0 705 0 015 286 067); } dark { --background: oklch(0 141 0 005 285 823); --foreground: oklch(0 985 0 0); --card: oklch(0 21 0 006 285 885); --card-foreground: oklch(0 985 0 0); --popover: oklch(0 21 0 006 285 885); --popover-foreground: oklch(0 985 0 0); --primary: oklch(0 92 0 004 286 32); --primary-foreground: oklch(0 21 0 006 285 885); --secondary: oklch(0 274 0 006 286 033); --secondary-foreground: oklch(0 985 0 0); --muted: oklch(0274 0 006 286 033);\n--muted-foreground: oklch(0 705 0 015 286 067);\n--accent: oklch(0 274 0 006 286 033);\n--accent-foreground: oklch(0 985 0 0);\n--destructive: oklch(0 704 0 191 22 216);\n--border: oklch(1 0 0 / 10%);\n--input: oklch(1 0 0 / 15%);\n--ring: oklch(0 552 0 016 285 938);\n--chart-1: oklch(0 488 0 243 264 376);\n--chart-2: oklch(0 696 0 17 162 48);\n--chart-3: oklch(0 769 0 188 70 08);\n--chart-4: oklch(0 627 0 265 303 9);\n--chart-5: oklch(0 645 0 246 16 439);\n--sidebar: oklch(0 21 0 006 285 885);\n--sidebar-foreground: oklch(0 985 0 0);\n--sidebar-primary: oklch(0 488 0 243 264 376);\n--sidebar-primary-foreground: oklch(0",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1073281,
      "relative_path": "documentation\\shadcn\\_docs_theming.html",
      "source_type": "documentation"
    },
    "token_count": 529,
    "chunk_index": 16,
    "total_chunks": 26
  },
  {
    "id": "6dfb4a7b5694013f60f95ba5165989b0",
    "source_file": "corpus\\documentation\\shadcn\\_docs_theming.html",
    "source_type": "documentation",
    "title": "Theming - shadcn/ui",
    "content": "216); --border: oklch(1 0 0 / 10%); --input: oklch(1 0 0 / 15%); --ring: oklch(0 552 0 016 285 938); --chart-1: oklch(0 488 0 243 264 376); --chart-2: oklch(0 696 0 17 162 48); --chart-3: oklch(0 769 0 188 70 08); --chart-4: oklch(0 627 0 265 303 9); --chart-5: oklch(0 645 0 246 16 439); --sidebar: oklch(0 21 0 006 285 885); --sidebar-foreground: oklch(0 985 0 0); --sidebar-primary: oklch(0 488 0 243 264 376); --sidebar-primary-foreground: oklch(0985 0 0);\n--sidebar-accent: oklch(0 274 0 006 286 033);\n--sidebar-accent-foreground: oklch(0 985 0 0);\n--sidebar-border: oklch(1 0 0 / 10%);\n--sidebar-ring: oklch(0 552 0 016 285 938);\n}Expand\nGray\nExpandapp/globals cssCopy:root {\n--radius: 0 625rem;\n--background: oklch(1 0 0);\n--foreground: oklch(0 13 0 028 261 692);\n--card: oklch(1 0 0);\n--card-foreground: oklch(0 13 0 028 261 692);\n--popover: oklch(1 0 0);\n--popover-foreground: oklch(0 13 0 028 261 692);\n--primary: oklch(0 21 0 034 264 665);\n--primary-foreground: oklch(0 985 0 002 247 839);\n--secondary: oklch(0 967 0 003 264 542);\n--secondary-foreground: oklch(0 21 0 034 264 665);\n--muted: oklch(0 967 0 003 264",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1073281,
      "relative_path": "documentation\\shadcn\\_docs_theming.html",
      "source_type": "documentation"
    },
    "token_count": 530,
    "chunk_index": 17,
    "total_chunks": 26
  },
  {
    "id": "c383f685693a139fef8c6538bc673222",
    "source_file": "corpus\\documentation\\shadcn\\_docs_theming.html",
    "source_type": "documentation",
    "title": "Theming - shadcn/ui",
    "content": "938); }Expand Gray Expandapp/globals cssCopy:root { --radius: 0 625rem; --background: oklch(1 0 0); --foreground: oklch(0 13 0 028 261 692); --card: oklch(1 0 0); --card-foreground: oklch(0 13 0 028 261 692); --popover: oklch(1 0 0); --popover-foreground: oklch(0 13 0 028 261 692); --primary: oklch(0 21 0 034 264 665); --primary-foreground: oklch(0 985 0 002 247 839); --secondary: oklch(0 967 0 003 264 542); --secondary-foreground: oklch(0 21 0 034 264 665); --muted: oklch(0 967 0 003 264542);\n--muted-foreground: oklch(0 551 0 027 264 364);\n--accent: oklch(0 967 0 003 264 542);\n--accent-foreground: oklch(0 21 0 034 264 665);\n--destructive: oklch(0 577 0 245 27 325);\n--border: oklch(0 928 0 006 264 531);\n--input: oklch(0 928 0 006 264 531);\n--ring: oklch(0 707 0 022 261 325);\n--chart-1: oklch(0 646 0 222 41 116);\n--chart-2: oklch(0 6 0 118 184 704);\n--chart-3: oklch(0 398 0 07 227 392);\n--chart-4: oklch(0 828 0 189 84 429);\n--chart-5: oklch(0 769 0 188 70 08);\n--sidebar: oklch(0 985 0 002 247 839);\n--sidebar-foreground: oklch(0 13 0 028 261 692);\n--sidebar-primary: oklch(0 21 0 034 264 665);\n--sidebar-primary-foreground: oklch(0 985 0 002 247",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1073281,
      "relative_path": "documentation\\shadcn\\_docs_theming.html",
      "source_type": "documentation"
    },
    "token_count": 545,
    "chunk_index": 18,
    "total_chunks": 26
  },
  {
    "id": "494d5cc61cbb0c7cbc8959dbe63e4c84",
    "source_file": "corpus\\documentation\\shadcn\\_docs_theming.html",
    "source_type": "documentation",
    "title": "Theming - shadcn/ui",
    "content": "--input: oklch(0 928 0 006 264 531); --ring: oklch(0 707 0 022 261 325); --chart-1: oklch(0 646 0 222 41 116); --chart-2: oklch(0 6 0 118 184 704); --chart-3: oklch(0 398 0 07 227 392); --chart-4: oklch(0 828 0 189 84 429); --chart-5: oklch(0 769 0 188 70 08); --sidebar: oklch(0 985 0 002 247 839); --sidebar-foreground: oklch(0 13 0 028 261 692); --sidebar-primary: oklch(0 21 0 034 264 665); --sidebar-primary-foreground: oklch(0 985 0 002 247839);\n--sidebar-accent: oklch(0 967 0 003 264 542);\n--sidebar-accent-foreground: oklch(0 21 0 034 264 665);\n--sidebar-border: oklch(0 928 0 006 264 531);\n--sidebar-ring: oklch(0 707 0 022 261 325);\n} dark {\n--background: oklch(0 13 0 028 261 692);\n--foreground: oklch(0 985 0 002 247 839);\n--card: oklch(0 21 0 034 264 665);\n--card-foreground: oklch(0 985 0 002 247 839);\n--popover: oklch(0 21 0 034 264 665);\n--popover-foreground: oklch(0 985 0 002 247 839);\n--primary: oklch(0 928 0 006 264 531);\n--primary-foreground: oklch(0 21 0 034 264 665);\n--secondary: oklch(0 278 0 033 256 848);\n--secondary-foreground: oklch(0 985 0 002 247 839);\n--muted: oklch(0 278 0 033 256 848);\n--muted-foreground: oklch(0 707 0",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1073281,
      "relative_path": "documentation\\shadcn\\_docs_theming.html",
      "source_type": "documentation"
    },
    "token_count": 544,
    "chunk_index": 19,
    "total_chunks": 26
  },
  {
    "id": "f18c909ea08f5a3e28336c7e01015ad3",
    "source_file": "corpus\\documentation\\shadcn\\_docs_theming.html",
    "source_type": "documentation",
    "title": "Theming - shadcn/ui",
    "content": "261 692); --foreground: oklch(0 985 0 002 247 839); --card: oklch(0 21 0 034 264 665); --card-foreground: oklch(0 985 0 002 247 839); --popover: oklch(0 21 0 034 264 665); --popover-foreground: oklch(0 985 0 002 247 839); --primary: oklch(0 928 0 006 264 531); --primary-foreground: oklch(0 21 0 034 264 665); --secondary: oklch(0 278 0 033 256 848); --secondary-foreground: oklch(0 985 0 002 247 839); --muted: oklch(0 278 0 033 256 848); --muted-foreground: oklch(0 707 0022 261 325);\n--accent: oklch(0 278 0 033 256 848);\n--accent-foreground: oklch(0 985 0 002 247 839);\n--destructive: oklch(0 704 0 191 22 216);\n--border: oklch(1 0 0 / 10%);\n--input: oklch(1 0 0 / 15%);\n--ring: oklch(0 551 0 027 264 364);\n--chart-1: oklch(0 488 0 243 264 376);\n--chart-2: oklch(0 696 0 17 162 48);\n--chart-3: oklch(0 769 0 188 70 08);\n--chart-4: oklch(0 627 0 265 303 9);\n--chart-5: oklch(0 645 0 246 16 439);\n--sidebar: oklch(0 21 0 034 264 665);\n--sidebar-foreground: oklch(0 985 0 002 247 839);\n--sidebar-primary: oklch(0 488 0 243 264 376);\n--sidebar-primary-foreground: oklch(0 985 0 002 247 839);\n--sidebar-accent: oklch(0 278 0 033 256",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1073281,
      "relative_path": "documentation\\shadcn\\_docs_theming.html",
      "source_type": "documentation"
    },
    "token_count": 540,
    "chunk_index": 20,
    "total_chunks": 26
  },
  {
    "id": "9c33de0ba14ff8964563476f1783ff17",
    "source_file": "corpus\\documentation\\shadcn\\_docs_theming.html",
    "source_type": "documentation",
    "title": "Theming - shadcn/ui",
    "content": "--ring: oklch(0 551 0 027 264 364); --chart-1: oklch(0 488 0 243 264 376); --chart-2: oklch(0 696 0 17 162 48); --chart-3: oklch(0 769 0 188 70 08); --chart-4: oklch(0 627 0 265 303 9); --chart-5: oklch(0 645 0 246 16 439); --sidebar: oklch(0 21 0 034 264 665); --sidebar-foreground: oklch(0 985 0 002 247 839); --sidebar-primary: oklch(0 488 0 243 264 376); --sidebar-primary-foreground: oklch(0 985 0 002 247 839); --sidebar-accent: oklch(0 278 0 033 256848);\n--sidebar-accent-foreground: oklch(0 985 0 002 247 839);\n--sidebar-border: oklch(1 0 0 / 10%);\n--sidebar-ring: oklch(0 551 0 027 264 364);\n}Expand\nSlate\nExpandapp/globals cssCopy:root {\n--radius: 0 625rem;\n--background: oklch(1 0 0);\n--foreground: oklch(0 129 0 042 264 695);\n--card: oklch(1 0 0);\n--card-foreground: oklch(0 129 0 042 264 695);\n--popover: oklch(1 0 0);\n--popover-foreground: oklch(0 129 0 042 264 695);\n--primary: oklch(0 208 0 042 265 755);\n--primary-foreground: oklch(0 984 0 003 247 858);\n--secondary: oklch(0 968 0 007 247 896);\n--secondary-foreground: oklch(0 208 0 042 265 755);\n--muted: oklch(0 968 0 007 247 896);\n--muted-foreground: oklch(0 554 0 046 257",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1073281,
      "relative_path": "documentation\\shadcn\\_docs_theming.html",
      "source_type": "documentation"
    },
    "token_count": 529,
    "chunk_index": 21,
    "total_chunks": 26
  },
  {
    "id": "faadf429ae75c5573fb0a09cd319a4e4",
    "source_file": "corpus\\documentation\\shadcn\\_docs_theming.html",
    "source_type": "documentation",
    "title": "Theming - shadcn/ui",
    "content": "0 625rem; --background: oklch(1 0 0); --foreground: oklch(0 129 0 042 264 695); --card: oklch(1 0 0); --card-foreground: oklch(0 129 0 042 264 695); --popover: oklch(1 0 0); --popover-foreground: oklch(0 129 0 042 264 695); --primary: oklch(0 208 0 042 265 755); --primary-foreground: oklch(0 984 0 003 247 858); --secondary: oklch(0 968 0 007 247 896); --secondary-foreground: oklch(0 208 0 042 265 755); --muted: oklch(0 968 0 007 247 896); --muted-foreground: oklch(0 554 0 046 257417);\n--accent: oklch(0 968 0 007 247 896);\n--accent-foreground: oklch(0 208 0 042 265 755);\n--destructive: oklch(0 577 0 245 27 325);\n--border: oklch(0 929 0 013 255 508);\n--input: oklch(0 929 0 013 255 508);\n--ring: oklch(0 704 0 04 256 788);\n--chart-1: oklch(0 646 0 222 41 116);\n--chart-2: oklch(0 6 0 118 184 704);\n--chart-3: oklch(0 398 0 07 227 392);\n--chart-4: oklch(0 828 0 189 84 429);\n--chart-5: oklch(0 769 0 188 70 08);\n--sidebar: oklch(0 984 0 003 247 858);\n--sidebar-foreground: oklch(0 129 0 042 264 695);\n--sidebar-primary: oklch(0 208 0 042 265 755);\n--sidebar-primary-foreground: oklch(0 984 0 003 247 858);\n--sidebar-accent: oklch(0 968 0",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1073281,
      "relative_path": "documentation\\shadcn\\_docs_theming.html",
      "source_type": "documentation"
    },
    "token_count": 544,
    "chunk_index": 22,
    "total_chunks": 26
  },
  {
    "id": "0b1d45e474a07bc98a75f4d33c28cd5a",
    "source_file": "corpus\\documentation\\shadcn\\_docs_theming.html",
    "source_type": "documentation",
    "title": "Theming - shadcn/ui",
    "content": "255 508); --ring: oklch(0 704 0 04 256 788); --chart-1: oklch(0 646 0 222 41 116); --chart-2: oklch(0 6 0 118 184 704); --chart-3: oklch(0 398 0 07 227 392); --chart-4: oklch(0 828 0 189 84 429); --chart-5: oklch(0 769 0 188 70 08); --sidebar: oklch(0 984 0 003 247 858); --sidebar-foreground: oklch(0 129 0 042 264 695); --sidebar-primary: oklch(0 208 0 042 265 755); --sidebar-primary-foreground: oklch(0 984 0 003 247 858); --sidebar-accent: oklch(0 968 0007 247 896);\n--sidebar-accent-foreground: oklch(0 208 0 042 265 755);\n--sidebar-border: oklch(0 929 0 013 255 508);\n--sidebar-ring: oklch(0 704 0 04 256 788);\n} dark {\n--background: oklch(0 129 0 042 264 695);\n--foreground: oklch(0 984 0 003 247 858);\n--card: oklch(0 208 0 042 265 755);\n--card-foreground: oklch(0 984 0 003 247 858);\n--popover: oklch(0 208 0 042 265 755);\n--popover-foreground: oklch(0 984 0 003 247 858);\n--primary: oklch(0 929 0 013 255 508);\n--primary-foreground: oklch(0 208 0 042 265 755);\n--secondary: oklch(0 279 0 041 260 031);\n--secondary-foreground: oklch(0 984 0 003 247 858);\n--muted: oklch(0 279 0 041 260 031);\n--muted-foreground: oklch(0 704 0 04 256 788);\n--accent: oklch(0",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1073281,
      "relative_path": "documentation\\shadcn\\_docs_theming.html",
      "source_type": "documentation"
    },
    "token_count": 544,
    "chunk_index": 23,
    "total_chunks": 26
  },
  {
    "id": "13517f09a131dcd20209f7493815d684",
    "source_file": "corpus\\documentation\\shadcn\\_docs_theming.html",
    "source_type": "documentation",
    "title": "Theming - shadcn/ui",
    "content": "0 003 247 858); --card: oklch(0 208 0 042 265 755); --card-foreground: oklch(0 984 0 003 247 858); --popover: oklch(0 208 0 042 265 755); --popover-foreground: oklch(0 984 0 003 247 858); --primary: oklch(0 929 0 013 255 508); --primary-foreground: oklch(0 208 0 042 265 755); --secondary: oklch(0 279 0 041 260 031); --secondary-foreground: oklch(0 984 0 003 247 858); --muted: oklch(0 279 0 041 260 031); --muted-foreground: oklch(0 704 0 04 256 788); --accent: oklch(0279 0 041 260 031);\n--accent-foreground: oklch(0 984 0 003 247 858);\n--destructive: oklch(0 704 0 191 22 216);\n--border: oklch(1 0 0 / 10%);\n--input: oklch(1 0 0 / 15%);\n--ring: oklch(0 551 0 027 264 364);\n--chart-1: oklch(0 488 0 243 264 376);\n--chart-2: oklch(0 696 0 17 162 48);\n--chart-3: oklch(0 769 0 188 70 08);\n--chart-4: oklch(0 627 0 265 303 9);\n--chart-5: oklch(0 645 0 246 16 439);\n--sidebar: oklch(0 208 0 042 265 755);\n--sidebar-foreground: oklch(0 984 0 003 247 858);\n--sidebar-primary: oklch(0 488 0 243 264 376);\n--sidebar-primary-foreground: oklch(0 984 0 003 247 858);\n--sidebar-accent: oklch(0 279 0 041 260 031);\n--sidebar-accent-foreground: oklch(0",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1073281,
      "relative_path": "documentation\\shadcn\\_docs_theming.html",
      "source_type": "documentation"
    },
    "token_count": 540,
    "chunk_index": 24,
    "total_chunks": 26
  },
  {
    "id": "1d5a162cea86578e2c6a6dc338684df9",
    "source_file": "corpus\\documentation\\shadcn\\_docs_theming.html",
    "source_type": "documentation",
    "title": "Theming - shadcn/ui",
    "content": "0 027 264 364); --chart-1: oklch(0 488 0 243 264 376); --chart-2: oklch(0 696 0 17 162 48); --chart-3: oklch(0 769 0 188 70 08); --chart-4: oklch(0 627 0 265 303 9); --chart-5: oklch(0 645 0 246 16 439); --sidebar: oklch(0 208 0 042 265 755); --sidebar-foreground: oklch(0 984 0 003 247 858); --sidebar-primary: oklch(0 488 0 243 264 376); --sidebar-primary-foreground: oklch(0 984 0 003 247 858); --sidebar-accent: oklch(0 279 0 041 260 031); --sidebar-accent-foreground: oklch(0984 0 003 247 858);\n--sidebar-border: oklch(1 0 0 / 10%);\n--sidebar-ring: oklch(0 551 0 027 264 364);\n}Expand components jsonDark Mode On This PageCSS VariablesUtility classesConventionList of variablesAdding new colorsOther color formatsBase ColorsNeutralStoneZincGraySlateDeploy your shadcn/ui app on VercelTrusted by OpenAI, Sonos, Adobe, and more Vercel provides tools and infrastructure to deploy apps and features at scale Deploy NowDeploy to VercelBuilt by shadcn at Vercel The source code is available on GitHub",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1073281,
      "relative_path": "documentation\\shadcn\\_docs_theming.html",
      "source_type": "documentation"
    },
    "token_count": 368,
    "chunk_index": 25,
    "total_chunks": 26
  },
  {
    "id": "cabf0e25f263a3480e7b53d778e42fb3",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_writing-addons.html",
    "source_type": "documentation",
    "title": "Write an addon | Storybook docs",
    "content": "Write an addon | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Addons » WriteDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQWrite an addonReactVueAngularWeb ComponentsMoreStorybook addons are a powerful way to extend Storybook's functionality and customize the development experience They can be used to add new features, customize the UI, or integrate with third-party tools What are we going to build This reference guide is to help you develop a mental model for how Storybook addons work by building a simple addon based on the popular Outline addon (which is the historical basis for the built-in outline feature) Throughout this guide, you'll learn how addons are structured, Storybook's APIs, how to test your addon locally, and how to publish it Addon anatomy\nThere are two main categories of addons, each with its role:\nUI-based: These addons are responsible for customizing the interface, enabling shortcuts for common tasks, or displaying additional information in the UI Presets: These are pre-configured settings or configurations that enable developers to quickly set up and customize their environment with a specific set of features, functionality, or technology UI-based addons\nThe addon built in this guide is a UI-based addon, specifically a toolbar addon, enabling users to draw outlines around each element in the story through a shortcut or click of a button",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1017238,
      "relative_path": "documentation\\storybook\\_docs_addons_writing-addons.html",
      "source_type": "documentation"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 16
  },
  {
    "id": "24135b3833bce3159fb2662d93b2a5f9",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_writing-addons.html",
    "source_type": "documentation",
    "title": "Write an addon | Storybook docs",
    "content": "the interface, enabling shortcuts for common tasks, or displaying additional information in the UI Presets: These are pre-configured settings or configurations that enable developers to quickly set up and customize their environment with a specific set of features, functionality, or technology UI-based addons The addon built in this guide is a UI-based addon, specifically a toolbar addon, enabling users to draw outlines around each element in the story through a shortcut or click of a buttonUI addons can create other types of UI elements, each with its function: panels and tabs, providing users with various ways to interact with the UI ToolbarPanelTab src/Tool tsximport React, { memo, useCallback, useEffect } from 'react';\nimport { useGlobals, useStorybookApi } from 'storybook/manager-api';\nimport { IconButton } from 'storybook/internal/components';\nimport { LightningIcon } from '@storybook/icons';\nimport { ADDON_ID, PARAM_KEY, TOOL_ID } from ' /constants';\nexport const Tool = memo(function MyAddonSelector() {\nconst [globals, updateGlobals] = useGlobals();\nconst api = useStorybookApi();\nconst isActive = [true, 'true'] includes(globals[PARAM_KEY]);\nconst toggleMyTool = useCallback(() => {\nupdateGlobals({\n[PARAM_KEY]: isActive,\n});\n}, [isActive]);\nuseEffect(() => {\napi setAddonShortcut(ADDON_ID, {\nlabel: 'Toggle Measure [O]',\ndefaultShortcut: ['O'],\nactionName: 'outline',\nshowInMenu: false,\naction: toggleMyTool,\n});\n}, [toggleMyTool, api]);\nreturn (\n<IconButton key={TOOL_ID} active={isActive} title=\"Enable my addon\" onClick={toggleMyTool}>\n<LightningIcon />\n</IconButton>\n);\n});\nSetup\nTo create your first addon, you're going to use the Addon Kit, a ready-to-use template featuring all the required building blocks, dependencies and configurations to help you get started building your addon In the Addon Kit repository, click the Use this template button to create a new repository based on the Addon Kit's code Clone the repository you just created and install its dependencies When the installation process finishes, you will be prompted with questions to configure your addon Answer them, and when you're ready to start building your addon, run the following command to start Storybook in development mode and develop your addon in watch mode:\nnpmnpm run start\nℹ️The Addon Kit uses Typescript by default",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1017238,
      "relative_path": "documentation\\storybook\\_docs_addons_writing-addons.html",
      "source_type": "documentation"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 16
  },
  {
    "id": "57e0cfd9a628a26d19af8bc7277216fc",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_writing-addons.html",
    "source_type": "documentation",
    "title": "Write an addon | Storybook docs",
    "content": "template button to create a new repository based on the Addon Kit's code Clone the repository you just created and install its dependencies When the installation process finishes, you will be prompted with questions to configure your addon Answer them, and when you're ready to start building your addon, run the following command to start Storybook in development mode and develop your addon in watch mode: npmnpm run start ℹ️The Addon Kit uses Typescript by defaultIf you want to use JavaScript instead, you can run the eject-ts command to convert the project to JavaScript Understanding the build system\nAddons built in the Storybook ecosystem rely on tsup, a fast, zero-config bundler powered by esbuild to transpile your addon's code into modern JavaScript that can run in the browser Out of the box, the Addon Kit comes with a pre-configured tsup configuration file that you can use to customize the build process of your addon When the build scripts run, it will look for the configuration file and pre-bundle the addon's code based on the configuration provided Addons can interact with Storybook in various ways They can define presets to modify the configuration, add behavior to the manager UI, or add behavior to the preview iframe These different use cases require different bundle outputs because they target different runtimes and environments Presets are executed in a Node environment Storybook's manager and preview environments provide certain packages in the global scope, so addons don't need to bundle them or include them as dependencies in their package json file The tsup configuration handles these complexities by default, but you can customize it according to their requirements For a detailed explanation of the bundling techniques used, please refer to the README of the addon-kit, and check out the default tsup configuration here Register the addon\nBy default, code for the UI-based addons is located in one of the following files, depending on the type of addon built: src/Tool tsx, src/Panel tsx, or src/Tab tsx Since we're building a toolbar addon, we can safely remove the Panel and Tab files and update the remaining file to the following:\nsrc/Tool tsximport React, { memo, useCallback, useEffect } from 'react';\nimport { useGlobals, useStorybookApi } from 'storybook/manager-api';\nimport { IconButton } from 'storybook/internal/components';\nimport { LightningIcon } from '@storybook/icons';\nimport { ADDON_ID, PARAM_KEY, TOOL_ID } from '",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1017238,
      "relative_path": "documentation\\storybook\\_docs_addons_writing-addons.html",
      "source_type": "documentation"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 16
  },
  {
    "id": "77203830ea85018a6c1e56a368ea258a",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_writing-addons.html",
    "source_type": "documentation",
    "title": "Write an addon | Storybook docs",
    "content": "following files, depending on the type of addon built: src/Tool tsx, src/Panel tsx, or src/Tab tsx Since we're building a toolbar addon, we can safely remove the Panel and Tab files and update the remaining file to the following: src/Tool tsximport React, { memo, useCallback, useEffect } from 'react'; import { useGlobals, useStorybookApi } from 'storybook/manager-api'; import { IconButton } from 'storybook/internal/components'; import { LightningIcon } from '@storybook/icons'; import { ADDON_ID, PARAM_KEY, TOOL_ID } from '/constants';\nexport const Tool = memo(function MyAddonSelector() {\nconst [globals, updateGlobals] = useGlobals();\nconst api = useStorybookApi();\nconst isActive = [true, 'true'] includes(globals[PARAM_KEY]);\nconst toggleMyTool = useCallback(() => {\nupdateGlobals({\n[PARAM_KEY]: isActive,\n});\n}, [isActive]);\nuseEffect(() => {\napi setAddonShortcut(ADDON_ID, {\nlabel: 'Toggle Addon [8]',\ndefaultShortcut: ['8'],\nactionName: 'myaddon',\nshowInMenu: false,\naction: toggleMyTool,\n});\n}, [toggleMyTool, api]);\nreturn (\n<IconButton key={TOOL_ID} active={isActive} title=\"Enable my addon\" onClick={toggleMyTool}>\n<LightningIcon />\n</IconButton>\n);\n});\nGoing through the code blocks in sequence:\nsrc/Tool tsx import { useGlobals, useStorybookApi } from 'storybook/manager-api';\nimport { IconButton } from 'storybook/internal/components';\nimport { LightningIcon } from '@storybook/icons';\nThe useGlobals and useStorybookApi hooks from the manager-api package are used to access the Storybook's APIs, allowing users to interact with the addon, such as enabling or disabling it The IconButton or Button component from the storybook/internal/components module can be used to render the buttons in the toolbar The @storybook/icons package provides a large set of appropriately sized and styled icons to choose from src/Tool tsx export const Tool = memo(function MyAddonSelector() {\nconst [globals, updateGlobals] = useGlobals();\nconst api = useStorybookApi();\nconst isActive = [true, 'true'] includes(globals[PARAM_KEY]);\nconst toggleMyTool = useCallback(() => {\nupdateGlobals({\n[PARAM_KEY]: isActive,\n});\n}, [isActive]);\nuseEffect(() => {\napi",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1017238,
      "relative_path": "documentation\\storybook\\_docs_addons_writing-addons.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 3,
    "total_chunks": 16
  },
  {
    "id": "0900861cc4b2dccc4f9fac0d998b9464",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_writing-addons.html",
    "source_type": "documentation",
    "title": "Write an addon | Storybook docs",
    "content": "it The IconButton or Button component from the storybook/internal/components module can be used to render the buttons in the toolbar The @storybook/icons package provides a large set of appropriately sized and styled icons to choose from src/Tool tsx export const Tool = memo(function MyAddonSelector() { const [globals, updateGlobals] = useGlobals(); const api = useStorybookApi(); const isActive = [true, 'true'] includes(globals[PARAM_KEY]); const toggleMyTool = useCallback(() => { updateGlobals({ [PARAM_KEY]: isActive, }); }, [isActive]); useEffect(() => { apisetAddonShortcut(ADDON_ID, {\nlabel: 'Toggle Addon [8]',\ndefaultShortcut: ['8'],\nactionName: 'myaddon',\nshowInMenu: false,\naction: toggleMyTool,\n});\n}, [toggleMyTool, api]);\nreturn (\n<IconButton key={TOOL_ID} active={isActive} title=\"Enable my addon\" onClick={toggleMyTool}>\n<LightningIcon />\n</IconButton>\n);\n});\nThe Tool component is the entry point of the addon It renders the UI elements in the toolbar, registers a keyboard shortcut, and handles the logic to enable and disable the addon Moving onto the manager, here we register the addon with Storybook using a unique name and identifier Since we've removed the Panel and Tab files, we'll need to adjust the file to only reference the addon we're building src/manager tsimport { addons, types } from 'storybook/manager-api';\nimport { ADDON_ID, TOOL_ID } from ' /constants';\nimport { Tool } from ' /Tool';\n// Register the addon\naddons register(ADDON_ID, () => {\n// Register the tool\naddons add(TOOL_ID, {\ntype: types TOOL,\ntitle: 'My addon',\nmatch: ({ tabId, viewMode }) => tabId && viewMode === 'story',\nrender: Tool,\n});\n});\nConditionally render the addon\nNotice the match property It allows you to control the view mode (story or docs) and tab (the story canvas or custom tabs) where the toolbar addon is visible For example:\n({ tabId }) => tabId === 'my-addon/tab' will show your addon when viewing the tab with the ID my-addon/tab ({ viewMode }) => viewMode === 'story' will show your addon when viewing a story in the canvas",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1017238,
      "relative_path": "documentation\\storybook\\_docs_addons_writing-addons.html",
      "source_type": "documentation"
    },
    "token_count": 481,
    "chunk_index": 4,
    "total_chunks": 16
  },
  {
    "id": "80e1b781936619a87944a735f9e7aaf8",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_writing-addons.html",
    "source_type": "documentation",
    "title": "Write an addon | Storybook docs",
    "content": "render: Tool, }); }); Conditionally render the addon Notice the match property It allows you to control the view mode (story or docs) and tab (the story canvas or custom tabs) where the toolbar addon is visible For example: ({ tabId }) => tabId === 'my-addon/tab' will show your addon when viewing the tab with the ID my-addon/tab ({ viewMode }) => viewMode === 'story' will show your addon when viewing a story in the canvas({ viewMode }) => viewMode === 'docs' will show your addon when viewing the documentation for a component ({ tabId, viewMode }) => tabId && viewMode === 'story' will show your addon when viewing a story in the canvas and not in a custom tab (i e when tabId === undefined) Run the start script to build and start Storybook and verify that the addon is registered correctly and showing in the UI Style the addon\nIn Storybook, applying styles for addons is considered a side-effect Therefore, we'll need to make some changes to our addon to allow it to use the styles when it is active and remove them when it's disabled We're going to rely on two of Storybook's features to handle this: decorators and globals To handle the CSS logic, we must include some helper functions to inject and remove the stylesheets from the DOM Start by creating the helper file with the following content:\nsrc/helpers tsimport { global } from '@storybook/global';\nexport const clearStyles = (selector: string | string[]) => {\nconst selectors = Array isArray(selector) selector : [selector];\nselectors forEach(clearStyle);\n};\nconst clearStyle = (input: string | string[]) => {\nconst selector = typeof input === 'string' input : input join('');\nconst element = global document getElementById(selector);\nif (element && element parentElement) {\nelement parentElement removeChild(element);\n}\n};\nexport const addOutlineStyles = (selector: string, css: string) => {\nconst existingStyle = global document getElementById(selector);\nif (existingStyle) {\nif (existingStyle innerHTML == css) {\nexistingStyle innerHTML = css;\n}\n} else {\nconst style = global document createElement('style');\nstyle setAttribute('id', selector);\nstyle innerHTML = css;\nglobal document head appendChild(style);\n}\n};\nNext, create the file with the styles we want to inject with the following content:\nsrc/OutlineCSS",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1017238,
      "relative_path": "documentation\\storybook\\_docs_addons_writing-addons.html",
      "source_type": "documentation"
    },
    "token_count": 489,
    "chunk_index": 5,
    "total_chunks": 16
  },
  {
    "id": "0b58dcfe211183f742ed1fc0a97e4740",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_writing-addons.html",
    "source_type": "documentation",
    "title": "Write an addon | Storybook docs",
    "content": "element parentElement) { element parentElement removeChild(element); } }; export const addOutlineStyles = (selector: string, css: string) => { const existingStyle = global document getElementById(selector); if (existingStyle) { if (existingStyle innerHTML == css) { existingStyle innerHTML = css; } } else { const style = global document createElement('style'); style setAttribute('id', selector); style innerHTML = css; global document head appendChild(style); } }; Next, create the file with the styles we want to inject with the following content: src/OutlineCSStsimport { dedent } from 'ts-dedent';\nexport default function outlineCSS(selector: string) {\nreturn dedent/* css */ `\n${selector} body {\noutline: 1px solid #2980b9 important;\n}\n${selector} article {\noutline: 1px solid #3498db important;\n}\n${selector} nav {\noutline: 1px solid #0088c3 important;\n}\n${selector} aside {\noutline: 1px solid #33a0ce important;\n}\n${selector} section {\noutline: 1px solid #66b8da important;\n}\n${selector} header {\noutline: 1px solid #99cfe7 important;\n}\n${selector} footer {\noutline: 1px solid #cce7f3 important;\n}\n${selector} h1 {\noutline: 1px solid #162544 important;\n}\n${selector} h2 {\noutline: 1px solid #314e6e important;\n}\n${selector} h3 {\noutline: 1px solid #3e5e85 important;\n}\n${selector} h4 {\noutline: 1px solid #449baf important;\n}\n${selector} h5 {\noutline: 1px solid #c7d1cb important;\n}\n${selector} h6 {\noutline: 1px solid #4371d0 important;\n}\n${selector} main {\noutline: 1px solid #2f4f90 important;\n}\n${selector} address {\noutline: 1px solid #1a2c51 important;\n}\n${selector} div {\noutline: 1px solid #036cdb important;\n}\n${selector} p {\noutline: 1px solid #ac050b important;\n}\n${selector} hr {\noutline: 1px solid #ff063f",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1017238,
      "relative_path": "documentation\\storybook\\_docs_addons_writing-addons.html",
      "source_type": "documentation"
    },
    "token_count": 493,
    "chunk_index": 6,
    "total_chunks": 16
  },
  {
    "id": "c731101dad68b073afd47f6dc97acbff",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_writing-addons.html",
    "source_type": "documentation",
    "title": "Write an addon | Storybook docs",
    "content": "outline: 1px solid #3e5e85 important; } ${selector} h4 { outline: 1px solid #449baf important; } ${selector} h5 { outline: 1px solid #c7d1cb important; } ${selector} h6 { outline: 1px solid #4371d0 important; } ${selector} main { outline: 1px solid #2f4f90 important; } ${selector} address { outline: 1px solid #1a2c51 important; } ${selector} div { outline: 1px solid #036cdb important; } ${selector} p { outline: 1px solid #ac050b important; } ${selector} hr { outline: 1px solid #ff063fimportant;\n}\n${selector} pre {\noutline: 1px solid #850440 important;\n}\n${selector} blockquote {\noutline: 1px solid #f1b8e7 important;\n}\n${selector} ol {\noutline: 1px solid #ff050c important;\n}\n${selector} ul {\noutline: 1px solid #d90416 important;\n}\n${selector} li {\noutline: 1px solid #d90416 important;\n}\n${selector} dl {\noutline: 1px solid #fd3427 important;\n}\n${selector} dt {\noutline: 1px solid #ff0043 important;\n}\n${selector} dd {\noutline: 1px solid #e80174 important;\n}\n${selector} figure {\noutline: 1px solid #ff00bb important;\n}\n${selector} figcaption {\noutline: 1px solid #bf0032 important;\n}\n${selector} table {\noutline: 1px solid #00cc99 important;\n}\n${selector} caption {\noutline: 1px solid #37ffc4 important;\n}\n${selector} thead {\noutline: 1px solid #98daca important;\n}\n${selector} tbody {\noutline: 1px solid #64a7a0 important;\n}\n${selector} tfoot {\noutline: 1px solid #22746b important;\n}\n${selector} tr {\noutline: 1px solid #86c0b2 important;\n}\n${selector} th {\noutline: 1px solid #a1e7d6",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1017238,
      "relative_path": "documentation\\storybook\\_docs_addons_writing-addons.html",
      "source_type": "documentation"
    },
    "token_count": 484,
    "chunk_index": 7,
    "total_chunks": 16
  },
  {
    "id": "cad34df769e394c148b363c6dccdd220",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_writing-addons.html",
    "source_type": "documentation",
    "title": "Write an addon | Storybook docs",
    "content": "outline: 1px solid #ff00bb important; } ${selector} figcaption { outline: 1px solid #bf0032 important; } ${selector} table { outline: 1px solid #00cc99 important; } ${selector} caption { outline: 1px solid #37ffc4 important; } ${selector} thead { outline: 1px solid #98daca important; } ${selector} tbody { outline: 1px solid #64a7a0 important; } ${selector} tfoot { outline: 1px solid #22746b important; } ${selector} tr { outline: 1px solid #86c0b2 important; } ${selector} th { outline: 1px solid #a1e7d6important;\n}\n${selector} td {\noutline: 1px solid #3f5a54 important;\n}\n${selector} col {\noutline: 1px solid #6c9a8f important;\n}\n${selector} colgroup {\noutline: 1px solid #6c9a9d important;\n}\n${selector} button {\noutline: 1px solid #da8301 important;\n}\n${selector} datalist {\noutline: 1px solid #c06000 important;\n}\n${selector} fieldset {\noutline: 1px solid #d95100 important;\n}\n${selector} form {\noutline: 1px solid #d23600 important;\n}\n${selector} input {\noutline: 1px solid #fca600 important;\n}\n${selector} keygen {\noutline: 1px solid #b31e00 important;\n}\n${selector} label {\noutline: 1px solid #ee8900 important;\n}\n${selector} legend {\noutline: 1px solid #de6d00 important;\n}\n${selector} meter {\noutline: 1px solid #e8630c important;\n}\n${selector} optgroup {\noutline: 1px solid #b33600 important;\n}\n${selector} option {\noutline: 1px solid #ff8a00 important;\n}\n${selector} output {\noutline: 1px solid #ff9619 important;\n}\n${selector} progress {\noutline: 1px solid #e57c00 important;\n}\n${selector} select {\noutline: 1px solid #e26e0f",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1017238,
      "relative_path": "documentation\\storybook\\_docs_addons_writing-addons.html",
      "source_type": "documentation"
    },
    "token_count": 490,
    "chunk_index": 8,
    "total_chunks": 16
  },
  {
    "id": "f476d0e3b92682602551e3cabd87c496",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_writing-addons.html",
    "source_type": "documentation",
    "title": "Write an addon | Storybook docs",
    "content": "outline: 1px solid #b31e00 important; } ${selector} label { outline: 1px solid #ee8900 important; } ${selector} legend { outline: 1px solid #de6d00 important; } ${selector} meter { outline: 1px solid #e8630c important; } ${selector} optgroup { outline: 1px solid #b33600 important; } ${selector} option { outline: 1px solid #ff8a00 important; } ${selector} output { outline: 1px solid #ff9619 important; } ${selector} progress { outline: 1px solid #e57c00 important; } ${selector} select { outline: 1px solid #e26e0fimportant;\n}\n${selector} textarea {\noutline: 1px solid #cc5400 important;\n}\n${selector} details {\noutline: 1px solid #33848f important;\n}\n${selector} summary {\noutline: 1px solid #60a1a6 important;\n}\n${selector} command {\noutline: 1px solid #438da1 important;\n}\n${selector} menu {\noutline: 1px solid #449da6 important;\n}\n${selector} del {\noutline: 1px solid #bf0000 important;\n}\n${selector} ins {\noutline: 1px solid #400000 important;\n}\n${selector} img {\noutline: 1px solid #22746b important;\n}\n${selector} iframe {\noutline: 1px solid #64a7a0 important;\n}\n${selector} embed {\noutline: 1px solid #98daca important;\n}\n${selector} object {\noutline: 1px solid #00cc99 important;\n}\n${selector} param {\noutline: 1px solid #37ffc4 important;\n}\n${selector} video {\noutline: 1px solid #6ee866 important;\n}\n${selector} audio {\noutline: 1px solid #027353 important;\n}\n${selector} source {\noutline: 1px solid #012426 important;\n}\n${selector} canvas {\noutline: 1px solid #a2f570 important;\n}\n${selector} track {\noutline: 1px solid #59a600 important;\n}\n${selector} map {\noutline: 1px solid #7be500",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1017238,
      "relative_path": "documentation\\storybook\\_docs_addons_writing-addons.html",
      "source_type": "documentation"
    },
    "token_count": 488,
    "chunk_index": 9,
    "total_chunks": 16
  },
  {
    "id": "e5bdd740674894f3cd0111a00d4e7cbd",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_writing-addons.html",
    "source_type": "documentation",
    "title": "Write an addon | Storybook docs",
    "content": "outline: 1px solid #98daca important; } ${selector} object { outline: 1px solid #00cc99 important; } ${selector} param { outline: 1px solid #37ffc4 important; } ${selector} video { outline: 1px solid #6ee866 important; } ${selector} audio { outline: 1px solid #027353 important; } ${selector} source { outline: 1px solid #012426 important; } ${selector} canvas { outline: 1px solid #a2f570 important; } ${selector} track { outline: 1px solid #59a600 important; } ${selector} map { outline: 1px solid #7be500important;\n}\n${selector} area {\noutline: 1px solid #305900 important;\n}\n${selector} a {\noutline: 1px solid #ff62ab important;\n}\n${selector} em {\noutline: 1px solid #800b41 important;\n}\n${selector} strong {\noutline: 1px solid #ff1583 important;\n}\n${selector} i {\noutline: 1px solid #803156 important;\n}\n${selector} b {\noutline: 1px solid #cc1169 important;\n}\n${selector} u {\noutline: 1px solid #ff0430 important;\n}\n${selector} s {\noutline: 1px solid #f805e3 important;\n}\n${selector} small {\noutline: 1px solid #d107b2 important;\n}\n${selector} abbr {\noutline: 1px solid #4a0263 important;\n}\n${selector} q {\noutline: 1px solid #240018 important;\n}\n${selector} cite {\noutline: 1px solid #64003c important;\n}\n${selector} dfn {\noutline: 1px solid #b4005a important;\n}\n${selector} sub {\noutline: 1px solid #dba0c8 important;\n}\n${selector} sup {\noutline: 1px solid #cc0256 important;\n}\n${selector} time {\noutline: 1px solid #d6606d important;\n}\n${selector} code {\noutline: 1px solid #e04251 important;\n}\n${selector} kbd {\noutline: 1px solid #5e001f",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1017238,
      "relative_path": "documentation\\storybook\\_docs_addons_writing-addons.html",
      "source_type": "documentation"
    },
    "token_count": 484,
    "chunk_index": 10,
    "total_chunks": 16
  },
  {
    "id": "8bc775e0fab1412bae8c8a28c75fba51",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_writing-addons.html",
    "source_type": "documentation",
    "title": "Write an addon | Storybook docs",
    "content": "outline: 1px solid #4a0263 important; } ${selector} q { outline: 1px solid #240018 important; } ${selector} cite { outline: 1px solid #64003c important; } ${selector} dfn { outline: 1px solid #b4005a important; } ${selector} sub { outline: 1px solid #dba0c8 important; } ${selector} sup { outline: 1px solid #cc0256 important; } ${selector} time { outline: 1px solid #d6606d important; } ${selector} code { outline: 1px solid #e04251 important; } ${selector} kbd { outline: 1px solid #5e001fimportant;\n}\n${selector} samp {\noutline: 1px solid #9c0033 important;\n}\n${selector} var {\noutline: 1px solid #d90047 important;\n}\n${selector} mark {\noutline: 1px solid #ff0053 important;\n}\n${selector} bdi {\noutline: 1px solid #bf3668 important;\n}\n${selector} bdo {\noutline: 1px solid #6f1400 important;\n}\n${selector} ruby {\noutline: 1px solid #ff7b93 important;\n}\n${selector} rt {\noutline: 1px solid #ff2f54 important;\n}\n${selector} rp {\noutline: 1px solid #803e49 important;\n}\n${selector} span {\noutline: 1px solid #cc2643 important;\n}\n${selector} br {\noutline: 1px solid #db687d important;\n}\n${selector} wbr {\noutline: 1px solid #db175b important;\n}`;\n}\nSince the addon can be active in both the story and documentation modes, the DOM node for Storybook's preview iframe is different in these two modes In fact, Storybook renders multiple story previews on one page when in documentation mode Therefore, we'll need to choose the correct selector for the DOM node where the styles will be injected and ensure the CSS is scoped to that particular selector That mechanism is provided as an example within the src/withGlobals ts file, which we'll use to connect the styling and helper functions to the addon logic Update the file to the following:\nsrc/withGlobals",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1017238,
      "relative_path": "documentation\\storybook\\_docs_addons_writing-addons.html",
      "source_type": "documentation"
    },
    "token_count": 486,
    "chunk_index": 11,
    "total_chunks": 16
  },
  {
    "id": "7a4df919b0920ba33206f188a669a748",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_writing-addons.html",
    "source_type": "documentation",
    "title": "Write an addon | Storybook docs",
    "content": "modes In fact, Storybook renders multiple story previews on one page when in documentation mode Therefore, we'll need to choose the correct selector for the DOM node where the styles will be injected and ensure the CSS is scoped to that particular selector That mechanism is provided as an example within the src/withGlobals ts file, which we'll use to connect the styling and helper functions to the addon logic Update the file to the following: src/withGlobalstsimport type {\nRenderer,\nPartialStoryFn as StoryFunction,\nStoryContext,\n} from 'storybook/internal/types';\nimport { useEffect, useMemo, useGlobals } from 'storybook/preview-api';\nimport { PARAM_KEY } from ' /constants';\nimport { clearStyles, addOutlineStyles } from ' /helpers';\nimport outlineCSS from ' /outlineCSS';\nexport const withGlobals = (StoryFn: StoryFunction<Renderer>, context: StoryContext<Renderer>) => {\nconst [globals] = useGlobals();\nconst isActive = [true, 'true'] includes(globals[PARAM_KEY]);\n// Is the addon being used in the docs panel\nconst isInDocs = context viewMode === 'docs';\nconst outlineStyles = useMemo(() => {\nconst selector = isInDocs `#anchor--${context id} docs-story` : ' sb-show-main';\nreturn outlineCSS(selector);\n}, [context id]);\nuseEffect(() => {\nconst selectorId = isInDocs `my-addon-docs-${context id}` : `my-addon`;\nif ( isActive) {\nclearStyles(selectorId);\nreturn;\n}\naddOutlineStyles(selectorId, outlineStyles);\nreturn () => {\nclearStyles(selectorId);\n};\n}, [isActive, outlineStyles, context id]);\nreturn StoryFn();\n};\nPackaging and publishing\nStorybook addons, similar to most packages in the JavaScript ecosystem, are distributed as NPM packages However, they have specific criteria that need to be met to be published to NPM and crawled by the integration catalog:\nHave a dist folder with the transpiled code A package json file declaring:\nModule-related information\nIntegration catalog metadata\nModule Metadata\nThe first category of metadata is related to the addon itself This includes the entry for the module, which files to include when the addon is published And the required configuration to integrate the addon with Storybook, allowing it to be used by its consumers package json {\n\"exports\": {\n\" \": {\n\"types\": \" /dist/index d ts\",\n\"node\": \" /dist/index js\",\n\"require\": \" /dist/index js\",\n\"import\": \"",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1017238,
      "relative_path": "documentation\\storybook\\_docs_addons_writing-addons.html",
      "source_type": "documentation"
    },
    "token_count": 505,
    "chunk_index": 12,
    "total_chunks": 16
  },
  {
    "id": "dcd422fa766e0e8297f675d3d43ae518",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_writing-addons.html",
    "source_type": "documentation",
    "title": "Write an addon | Storybook docs",
    "content": "declaring: Module-related information Integration catalog metadata Module Metadata The first category of metadata is related to the addon itself This includes the entry for the module, which files to include when the addon is published And the required configuration to integrate the addon with Storybook, allowing it to be used by its consumers package json { \"exports\": { \" \": { \"types\": \" /dist/index d ts\", \"node\": \" /dist/index js\", \"require\": \" /dist/index js\", \"import\": \"/dist/index mjs\"\n},\n\" /manager\": \" /dist/manager mjs\",\n\" /preview\": \" /dist/preview mjs\",\n\" /package json\": \" /package json\"\n},\n\"main\": \"dist/index js\",\n\"module\": \"dist/index mjs\",\n\"types\": \"dist/index d ts\",\n\"files\": [\"dist/**/*\", \"README md\", \"* js\", \"* d ts\"],\n\"devDependencies\": {\n\"@storybook/addon-docs\": \"^9 0 0\",\n\"storybook\": \"^9 0 0\"\n},\n\"bundler\": {\n\"exportEntries\": [\"src/index ts\"],\n\"managerEntries\": [\"src/manager ts\"],\n\"previewEntries\": [\"src/preview ts\"]\n}\n}\nIntegration Catalog Metadata\nThe second metadata category is related to the integration catalog Most of this information is already pre-configured by the Addon Kit However, items like the display name, icon, and frameworks must be configured via the storybook property to be displayed in the catalog package json {\n\"name\": \"my-storybook-addon\",\n\"version\": \"1 0 0\",\n\"description\": \"My first storybook addon\",\n\"author\": \"Your Name\",\n\"storybook\": {\n\"displayName\": \"My Storybook Addon\",\n\"unsupportedFrameworks\": [\"react-native\"],\n\"icon\": \"https://yoursite com/link-to-your-icon png\"\n},\n\"keywords\": [\"storybook-addons\", \"appearance\", \"style\", \"css\", \"layout\", \"debug\"]\n}\nℹ️The storybook configuration element includes additional properties that help customize the addon's searchability and indexing For more information, see the Integration catalog documentation One essential item to note is the keywords property as it maps to the catalog's tag system Adding the storybook-addons ensures that the addon is discoverable in the catalog when searching for addons The remaining keywords help with the searchability and categorization of the addon",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1017238,
      "relative_path": "documentation\\storybook\\_docs_addons_writing-addons.html",
      "source_type": "documentation"
    },
    "token_count": 486,
    "chunk_index": 13,
    "total_chunks": 16
  },
  {
    "id": "9c30163d8fdbee5f870c650c188fcaf0",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_writing-addons.html",
    "source_type": "documentation",
    "title": "Write an addon | Storybook docs",
    "content": "\"keywords\": [\"storybook-addons\", \"appearance\", \"style\", \"css\", \"layout\", \"debug\"] } ℹ️The storybook configuration element includes additional properties that help customize the addon's searchability and indexing For more information, see the Integration catalog documentation One essential item to note is the keywords property as it maps to the catalog's tag system Adding the storybook-addons ensures that the addon is discoverable in the catalog when searching for addons The remaining keywords help with the searchability and categorization of the addonPublishing to NPM\nOnce you're ready to publish your addon to NPM, the Addon Kit comes pre-configured with the Auto package for release management It generates a changelog and uploads the package to NPM and GitHub automatically Therefore, you need to configure access to both Authenticate using npm adduser\nGenerate a access token with both read and publish permissions Create a personal access token with repo and workflow scoped permissions Create a env file in the root of your project and add the following:\nGH_TOKEN=value_you_just_got_from_github\nNPM_TOKEN=value_you_just_got_from_npm\nNext, run the following command to create labels on GitHub You'll use these labels to categorize changes to the package npx auto create-labels\nFinally, run the following command to create a release for your addon This will build and package the addon code, bump the version, push the release into GitHub and npm, and generate a changelog npmnpm run release\nCI automation\nBy default, the Addon Kit comes pre-configured with a GitHub Actions workflow, enabling you to automate the release management process This ensures that the package is always up to date with the latest changes and that the changelog is updated accordingly However, you'll need additional configuration to use your NPM and GitHub tokens to publish the package successfully In your repository, click the Settings tab, then the Secrets and variables dropdown, followed by the Actions item You should see the following screen:\nThen, click the New repository secret, name it NPM_TOKEN, and paste the token you generated earlier Whenever you merge a pull request to the default branch, the workflow will run and publish a new release, automatically incrementing the version number and updating the changelog",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1017238,
      "relative_path": "documentation\\storybook\\_docs_addons_writing-addons.html",
      "source_type": "documentation"
    },
    "token_count": 454,
    "chunk_index": 14,
    "total_chunks": 16
  },
  {
    "id": "d76597d285156c9da61f050773d2741f",
    "source_file": "corpus\\documentation\\storybook\\_docs_addons_writing-addons.html",
    "source_type": "documentation",
    "title": "Write an addon | Storybook docs",
    "content": "and GitHub tokens to publish the package successfully In your repository, click the Settings tab, then the Secrets and variables dropdown, followed by the Actions item You should see the following screen: Then, click the New repository secret, name it NPM_TOKEN, and paste the token you generated earlier Whenever you merge a pull request to the default branch, the workflow will run and publish a new release, automatically incrementing the version number and updating the changelogLearn more about the Storybook addon ecosystem\nTypes of addons for other types of addons\nWriting addons for the basics of addon development\nPresets for preset development\nIntegration catalog for requirements and available recipes\nAPI reference to learn about the available APIs\nWas this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1017238,
      "relative_path": "documentation\\storybook\\_docs_addons_writing-addons.html",
      "source_type": "documentation"
    },
    "token_count": 209,
    "chunk_index": 15,
    "total_chunks": 16
  },
  {
    "id": "4329c3b137547016fa64f3084b5b02fc",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_main-config_main-config.html",
    "source_type": "documentation",
    "title": "Main configuration | Storybook docs",
    "content": "Main configuration | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » API » main js|ts configuration » OverviewDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQMain configurationReactVueAngularWeb ComponentsMoreThe main configuration defines a Storybook project's behavior, including the location of stories, addons to use, feature flags, and other project-specific settings main js or main ts\nThis configuration is defined in storybook/main js|ts, which is located relative to the root of your project A typical Storybook configuration file looks like this: storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { StorybookConfig } from '@storybook/your-framework';\nconst config: StorybookConfig = {\n// Required\nframework: '@storybook/your-framework',\nstories: [' /src/**/* mdx', ' /src/**/* stories @(js|jsx|mjs|ts|tsx)'],\n// Optional\naddons: ['@storybook/addon-docs'],\ndocs: {\nautodocs: 'tag',\n},\nstaticDirs: ['",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 507810,
      "relative_path": "documentation\\storybook\\_docs_api_main-config_main-config.html",
      "source_type": "documentation"
    },
    "token_count": 460,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "5d999fef57dcc9ff2f1a23f57e576e28",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_main-config_main-config.html",
    "source_type": "documentation",
    "title": "Main configuration | Storybook docs",
    "content": "This configuration is defined in storybook/main js|ts, which is located relative to the root of your project A typical Storybook configuration file looks like this: storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { StorybookConfig } from '@storybook/your-framework'; const config: StorybookConfig = { // Required framework: '@storybook/your-framework', stories: [' /src/**/* mdx', ' /src/**/* stories @(js|jsx|mjs|ts|tsx)'], // Optional addons: ['@storybook/addon-docs'], docs: { autodocs: 'tag', }, staticDirs: ['/public'],\n};\nexport default config;\nconfig\nAn object to configure Storybook containing the following properties:\nframework (Required)\nstories (Required)\naddons\nbabel\nbabelDefault\nbuild\ncore\ndocs\nenv\nfeatures\nindexers (⚠️ Experimental)\nlogLevel\nmanagerHead\npreviewAnnotations\npreviewBody\npreviewHead\nrefs\nstaticDirs\nswc\ntypescript\nviteFinal\nwebpackFinal\nWas this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 507810,
      "relative_path": "documentation\\storybook\\_docs_api_main-config_main-config.html",
      "source_type": "documentation"
    },
    "token_count": 307,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "cf567ccdbb92fd7a29a8fe567dab7c3d",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_csf.html",
    "source_type": "documentation",
    "title": "Component Story Format (CSF) | Storybook docs",
    "content": "Component Story Format (CSF) | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » API » Component Story Format (CSF)DocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQComponent Story Format (CSF)ReactVueAngularWeb ComponentsMoreCSF 3CSF Factories (Experimental)Component Story Format (CSF) is the recommended way to write stories It's an open standard based on ES6 modules that is portable beyond Storybook 💡If you have stories written in the older storiesOf() syntax, it was removed in Storybook 8 0 and is no longer maintained We recommend migrating your stories to CSF See the migration guide for more information In CSF, stories and component metadata are defined as ES Modules Every component story file consists of a required default export and one or more named exports Default export\nThe default export defines metadata about your component, including the component itself, its title (where it will show up in the navigation UI story hierarchy), decorators, and parameters The component field is required and used by addons for automatic prop table generation and display of other component metadata The title field is optional and should be unique (i e , not re-used across files) MyComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1920671,
      "relative_path": "documentation\\storybook\\_docs_api_csf.html",
      "source_type": "documentation"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 10
  },
  {
    "id": "63c06f8d3e739595728431302d2b94f1",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_csf.html",
    "source_type": "documentation",
    "title": "Component Story Format (CSF) | Storybook docs",
    "content": "default export defines metadata about your component, including the component itself, its title (where it will show up in the navigation UI story hierarchy), decorators, and parameters The component field is required and used by addons for automatic prop table generation and display of other component metadata The title field is optional and should be unique (i e , not re-used across files) MyComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e greact-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { MyComponent } from ' /MyComponent';\nconst meta = {\n/* 👇 The title prop is optional * See https://storybook js org/docs/configure/#configure-story-loading\n* to learn how to generate automatic titles\n*/\ntitle: 'Path/To/MyComponent',\ncomponent: MyComponent,\ndecorators: [\n/* */\n],\nparameters: {\n/* */\n},\n} satisfies Meta<typeof MyComponent>;\nexport default meta;\nFor more examples, see writing stories Named story exports\nWith CSF, every named export in the file represents a story object by default MyComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { MyComponent } from ' /MyComponent';\nconst meta = {\ncomponent: MyComponent,\n} satisfies Meta<typeof MyComponent>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const Basic: Story = {};\nexport const WithProp: Story = {\nrender: () => <MyComponent prop=\"value\" />,\n};\nThe exported identifiers will be converted to \"start case\" using Lodash's startCase function For example:\nIdentifierTransformationnameNamesomeNameSome NamesomeNAMESome NAMEsome_custom_NAMESome Custom NAMEsomeName1234Some Name 1 2 3 4\nWe recommend that all export names to start with a capital letter Story objects can be annotated with a few different fields to define story-level decorators and parameters, and also to define the name of the story Storybook's name configuration element is helpful in specific circumstances Common use cases are names with special characters or Javascript restricted words If not specified, Storybook defaults to the named export MyComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1920671,
      "relative_path": "documentation\\storybook\\_docs_api_csf.html",
      "source_type": "documentation"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 10
  },
  {
    "id": "85b08ce59b5e7be3d6f423de077c2e4b",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_csf.html",
    "source_type": "documentation",
    "title": "Component Story Format (CSF) | Storybook docs",
    "content": "export names to start with a capital letter Story objects can be annotated with a few different fields to define story-level decorators and parameters, and also to define the name of the story Storybook's name configuration element is helpful in specific circumstances Common use cases are names with special characters or Javascript restricted words If not specified, Storybook defaults to the named export MyComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e greact-vite, nextjs, vue3-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { MyComponent } from ' /MyComponent';\nconst meta = {\ncomponent: MyComponent,\n} satisfies Meta<typeof MyComponent>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const Simple: Story = {\nname: 'So simple ',\n// };\nArgs story inputs\nStarting in SB 6 0, stories accept named inputs called Args Args are dynamic data that are provided (and possibly updated by) Storybook and its addons Consider Storybook’s \"Button\" example of a text button that logs its click events:\nButton stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { action } from 'storybook/actions';\nimport { Button } from ' /Button';\nconst meta = {\ncomponent: Button,\n} satisfies Meta<typeof Button>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const Basic: Story = {\nrender: () => <Button label=\"Hello\" onClick={action('clicked')} />,\n};\nNow consider the same example, re-written with args:\nButton stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { action } from 'storybook/actions';\nimport { Button } from ' /Button';\nconst meta = {\ncomponent: Button,\n} satisfies Meta<typeof Button>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const Text = {\nargs: {\nlabel: 'Hello',\nonClick: action('clicked'),\n},\nrender: ({ label, onClick }) => <Button label={label} onClick={onClick} />,\n};\nOr even more simply:\nButton stories",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1920671,
      "relative_path": "documentation\\storybook\\_docs_api_csf.html",
      "source_type": "documentation"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 10
  },
  {
    "id": "5556194bf9d24d42b6dbe105cfa754cc",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_csf.html",
    "source_type": "documentation",
    "title": "Component Story Format (CSF) | Storybook docs",
    "content": "are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework'; import { action } from 'storybook/actions'; import { Button } from ' /Button'; const meta = { component: Button, } satisfies Meta<typeof Button>; export default meta; type Story = StoryObj<typeof meta>; export const Text = { args: { label: 'Hello', onClick: action('clicked'), }, render: ({ label, onClick }) => <Button label={label} onClick={onClick} />, }; Or even more simply: Button storiests|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { Button } from ' /Button';\nconst meta = {\ncomponent: Button,\n} satisfies Meta<typeof Button>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const Text: Story = {\nargs: {},\n};\nNot only are these versions shorter and more accessible to write than their no-args counterparts, but they are also more portable since the code doesn't depend on the actions feature specifically For more information on setting up Docs and Actions, see their respective documentation Play function\nStorybook's play functions are small snippets of code executed when the story renders in the UI They are convenient helper methods to help you test use cases that otherwise weren't possible or required user intervention A good use case for the play function is a form component With previous Storybook versions, you'd write your set of stories and had to interact with the component to validate it With Storybook's play functions, you could write the following story:\nLoginForm stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { expect } from 'storybook/test';\nimport { LoginForm } from ' /LoginForm';\nconst meta = {\ncomponent: LoginForm,\n} satisfies Meta<typeof LoginForm>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const EmptyForm: Story = {};\nexport const FilledForm: Story = {\nplay: async ({ canvas, userEvent }) => {\n// 👇 Simulate interactions with the component\nawait userEvent type(canvas getByTestId('email'), 'email@provider",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1920671,
      "relative_path": "documentation\\storybook\\_docs_api_csf.html",
      "source_type": "documentation"
    },
    "token_count": 500,
    "chunk_index": 3,
    "total_chunks": 10
  },
  {
    "id": "86e1224c82118795b565484ef1d8ea0b",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_csf.html",
    "source_type": "documentation",
    "title": "Component Story Format (CSF) | Storybook docs",
    "content": "g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework'; import { expect } from 'storybook/test'; import { LoginForm } from ' /LoginForm'; const meta = { component: LoginForm, } satisfies Meta<typeof LoginForm>; export default meta; type Story = StoryObj<typeof meta>; export const EmptyForm: Story = {}; export const FilledForm: Story = { play: async ({ canvas, userEvent }) => { // 👇 Simulate interactions with the component await userEvent type(canvas getByTestId('email'), 'email@providercom');\nawait userEvent type(canvas getByTestId('password'), 'a-random-password');\n// See https://storybook js org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\nawait userEvent click(canvas getByRole('button'));\n// 👇 Assert DOM structure\nawait expect(\ncanvas getByText(\n'Everything is perfect Your account is ready and we should probably get you started '\n)\n) toBeInTheDocument();\n},\n};\nWhen the story renders in the UI, Storybook executes each step defined in the play function and runs the assertions without the need for user interaction Custom render functionsStarting in Storybook 6 4, you can write your stories as JavaScript objects, reducing the boilerplate code you need to generate to test your components, thus improving functionality and usability Render functions are helpful methods to give you additional control over how the story renders For example, if you were writing a story as an object and you wanted to specify how your component should render, you could write the following: MyComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { Layout } from ' /Layout';\nimport { MyComponent } from ' /MyComponent';\nconst meta = {\ncomponent: MyComponent,\n} satisfies Meta<typeof MyComponent>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n// This story uses a render function to fully control how the component renders",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1920671,
      "relative_path": "documentation\\storybook\\_docs_api_csf.html",
      "source_type": "documentation"
    },
    "token_count": 442,
    "chunk_index": 4,
    "total_chunks": 10
  },
  {
    "id": "1b1b9af3c69508518883a376d222d80c",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_csf.html",
    "source_type": "documentation",
    "title": "Component Story Format (CSF) | Storybook docs",
    "content": "you could write the following: MyComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework'; import { Layout } from ' /Layout'; import { MyComponent } from ' /MyComponent'; const meta = { component: MyComponent, } satisfies Meta<typeof MyComponent>; export default meta; type Story = StoryObj<typeof meta>; // This story uses a render function to fully control how the component rendersexport const Example: Story = {\nrender: () => (\n<Layout>\n<header>\n<h1>Example</h1>\n</header>\n<article>\n<MyComponent />\n</article>\n</Layout>\n),\n};When Storybook loads this story, it will detect the existence of a render function and adjust the component rendering accordingly based on what's defined Storybook export vs name handling\nStorybook handles named exports and the name option slightly differently When should you use one vs the other Storybook will always use the named export to determine the story ID and URL If you specify the name option, it will be used as the story display name in the UI Otherwise, it defaults to the named export, processed through Storybook's storyNameFromExport and lodash startCase functions MyComponent-test jsit('should format CSF exports with sensible defaults', () => {\nconst testCases = {\nname: 'Name',\nsomeName: 'Some Name',\nsomeNAME: 'Some NAME',\nsome_custom_NAME: 'Some Custom NAME',\nsomeName1234: 'Some Name 1234',\nsomeName1_2_3_4: 'Some Name 1 2 3 4',\n};\nObject entries(testCases) forEach(([key, val]) => {\nexpect(storyNameFromExport(key)) toBe(val);\n});\n});\nWhen you want to change the name of your story, rename the CSF export It will change the name of the story and also change the story's ID and URL It would be best if you used the name configuration element in the following cases:\nYou want the name to show up in the Storybook UI in a way that's not possible with a named export, e g , reserved keywords like \"default\", special characters like emoji, spacing/capitalization other than what's provided by storyNameFromExport You want to preserve the Story ID independently from changing how it's displayed",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1920671,
      "relative_path": "documentation\\storybook\\_docs_api_csf.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 5,
    "total_chunks": 10
  },
  {
    "id": "d3fe9b41855975a9226c2f879eb52f2b",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_csf.html",
    "source_type": "documentation",
    "title": "Component Story Format (CSF) | Storybook docs",
    "content": "story and also change the story's ID and URL It would be best if you used the name configuration element in the following cases: You want the name to show up in the Storybook UI in a way that's not possible with a named export, e g , reserved keywords like \"default\", special characters like emoji, spacing/capitalization other than what's provided by storyNameFromExport You want to preserve the Story ID independently from changing how it's displayedHaving stable Story IDs is helpful for integration with third-party tools Non-story exports\nIn some cases, you may want to export a mixture of stories and non-stories (e g , mocked data) You can use the optional configuration fields includeStories and excludeStories in the default export to make this possible You can define them as an array of strings or regular expressions Consider the following story file:\nMyComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { MyComponent } from ' /MyComponent';\nimport someData from ' /data json';\nconst meta = {\ncomponent: MyComponent,\nincludeStories: ['SimpleStory', 'ComplexStory'], // 👈 Storybook loads these stories\nexcludeStories: / *Data$/, // 👈 Storybook ignores anything that contains Data\n} satisfies Meta<typeof MyComponent>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const simpleData = { foo: 1, bar: 'baz' };\nexport const complexData = { foo: 1, foobar: { bar: 'baz', baz: someData } };\nexport const SimpleStory: Story = {\nargs: {\ndata: simpleData,\n},\n};\nexport const ComplexStory: Story = {\nargs: {\ndata: complexData,\n},\n};\nWhen this file renders in Storybook, it treats ComplexStory and SimpleStory as stories and ignores the data named exports For this particular example, you could achieve the same result in different ways, depending on what's convenient:\nincludeStories: /^[A-Z]/\nincludeStories: / *Story$/\nincludeStories: ['SimpleStory', 'ComplexStory']\nexcludeStories: /^[a-z]/\nexcludeStories: /",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1920671,
      "relative_path": "documentation\\storybook\\_docs_api_csf.html",
      "source_type": "documentation"
    },
    "token_count": 468,
    "chunk_index": 6,
    "total_chunks": 10
  },
  {
    "id": "ccbc2c526d709738fc290b8ebf2e7210",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_csf.html",
    "source_type": "documentation",
    "title": "Component Story Format (CSF) | Storybook docs",
    "content": "baz: someData } }; export const SimpleStory: Story = { args: { data: simpleData, }, }; export const ComplexStory: Story = { args: { data: complexData, }, }; When this file renders in Storybook, it treats ComplexStory and SimpleStory as stories and ignores the data named exports For this particular example, you could achieve the same result in different ways, depending on what's convenient: includeStories: /^[A-Z]/ includeStories: / *Story$/ includeStories: ['SimpleStory', 'ComplexStory'] excludeStories: /^[a-z]/ excludeStories: /*Data$/\nexcludeStories: ['simpleData', 'complexData']\nThe first option is the recommended solution if you follow the best practice of starting story exports with an uppercase letter (i e , use UpperCamelCase) Upgrading from CSF 2 to CSF 3\nℹ️Storybook provides a codemod to help you upgrade from CSF 2 to CSF 3 You can run it with the following command: npmnpx storybook migrate csf-2-to-3 --glob=\"**/* stories tsx\" --parser=tsx\nIn CSF 2, the named exports are always functions that instantiate a component, and those functions can be annotated with configuration options For example:\nCSF 2 - Button stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { ComponentStory, ComponentMeta } from '@storybook/your-framework';\nimport { Button } from ' /Button';\nexport default {\ntitle: 'Button',\ncomponent: Button,\n} as ComponentMeta<typeof Button>;\nexport const Primary: ComponentStory<typeof Button> = (args) => <Button { args} />;\nPrimary args = { primary: true };\nThis declares a Primary story for a Button that renders itself by spreading { primary: true } into the component The default title metadata says where to place the story in a navigation hierarchy Here's the CSF 3 equivalent:\nCSF 3 - Button stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { Button } from '",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1920671,
      "relative_path": "documentation\\storybook\\_docs_api_csf.html",
      "source_type": "documentation"
    },
    "token_count": 482,
    "chunk_index": 7,
    "total_chunks": 10
  },
  {
    "id": "81ad8cc908c0edb33dd528b312827857",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_csf.html",
    "source_type": "documentation",
    "title": "Component Story Format (CSF) | Storybook docs",
    "content": "primary: true }; This declares a Primary story for a Button that renders itself by spreading { primary: true } into the component The default title metadata says where to place the story in a navigation hierarchy Here's the CSF 3 equivalent: CSF 3 - Button stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework'; import { Button } from '/Button';\nconst meta = {\ncomponent: Button,\n} satisfies Meta<typeof Button>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const Primary: Story = { args: { primary: true } };\nLet's go through the changes individually to understand what's going on Spreadable story objects\nIn CSF 3, the named exports are objects, not functions This allows us to reuse stories more efficiently with the JS spread operator Consider the following addition to the intro example, which creates a PrimaryOnDark story that renders against a dark background:\nHere's the CSF 2 implementation:\nCSF 2 - Button stories js|jsx|ts|tsxexport const PrimaryOnDark = Primary bind({});\nPrimaryOnDark args = Primary args;\nPrimaryOnDark parameters = { background: { default: 'dark' } };\nPrimary bind({}) copies the story function, but it doesn't copy the annotations hanging off the function, so we must add PrimaryOnDark args = Primary args to inherit the args In CSF 3, we can spread the Primary object to carry over all its annotations:\nCSF 3 - Button stories ts|tsxTypescriptexport const PrimaryOnDark: Story = { Primary,\nparameters: { background: { default: 'dark' } },\n};\nLearn more about named story exports Default render functions\nIn CSF 3, you specify how a story renders through a render function We can rewrite a CSF 2 example to CSF 3 through the following steps Let's start with a simple CSF 2 story function:\nCSF 2 - Button stories ts|tsxTypescript// Other imports and story implementation\nexport const Default: ComponentStory<typeof Button> = (args) => <Button { args} />;\nNow, let's rewrite it as a story object in CSF 3 with an explicit render function that tells the story how to render itself",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1920671,
      "relative_path": "documentation\\storybook\\_docs_api_csf.html",
      "source_type": "documentation"
    },
    "token_count": 490,
    "chunk_index": 8,
    "total_chunks": 10
  },
  {
    "id": "c546e419d3fb4daa6ac7430c7f22ace9",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_csf.html",
    "source_type": "documentation",
    "title": "Component Story Format (CSF) | Storybook docs",
    "content": "story renders through a render function We can rewrite a CSF 2 example to CSF 3 through the following steps Let's start with a simple CSF 2 story function: CSF 2 - Button stories ts|tsxTypescript// Other imports and story implementation export const Default: ComponentStory<typeof Button> = (args) => <Button { args} />; Now, let's rewrite it as a story object in CSF 3 with an explicit render function that tells the story how to render itselfLike CSF 2, this gives us full control of how we render a component or even a collection of components CSF 3 - Button stories ts|tsxTypescript// Other imports and story implementation\nexport const Default: Story = {\nrender: (args) => <Button { args} />,\n};\nLearn more about render functions But in CSF 2, a lot of story functions are identical: take the component specified in the default export and spread args into it What's interesting about these stories is not the function, but the args passed into the function CSF 3 provides default render functions for each renderer If all you're doing is spreading args into your component—which is the most common case—you don't need to specify any render function at all:\nCSF 3 - Button stories js|jsx|ts|tsxexport const Default = {};\nFor more information, see the section on custom render functions Generate titles automatically\nFinally, CSF 3 can automatically generate titles CSF 2 - Button stories js|jsx|ts|tsxexport default {\ntitle: 'components/Button',\ncomponent: Button,\n};\nCSF 3 - Button stories js|jsx|ts|tsxexport default { component: Button };\nYou can still specify a title like in CSF 2, but if you don't specify one, it can be inferred from the story's path on disk For more information, see the section on configuring story loading Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1920671,
      "relative_path": "documentation\\storybook\\_docs_api_csf.html",
      "source_type": "documentation"
    },
    "token_count": 463,
    "chunk_index": 9,
    "total_chunks": 10
  },
  {
    "id": "8c8597608396edd255f6efdddc5bb13a",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_arg-types.html",
    "source_type": "documentation",
    "title": "ArgTypes | Storybook docs",
    "content": "ArgTypes | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » API » ArgTypesDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQArgTypesReactVueAngularWeb ComponentsMoreArgTypes specify the behavior of args By specifying the type of an arg, you constrain the values that it can accept and provide information about args that are not explicitly set (i e , description) You can also use argTypes to “annotate” args with information used by addons that make use of those args For instance, to instruct the controls panel to render a color picker, you could specify the 'color' control type The most concrete realization of argTypes is the ArgTypes doc block (Controls is similar) Each row in the table corresponds to a single argType and the current value of that arg Automatic argType inference\nIf you are using the Storybook docs addon, then Storybook will infer a set of argTypes for each story based on the component specified in the default export of the CSF file To do so, Storybook uses various static analysis tools depending on your framework FrameworkStatic analysis toolReactreact-docgen (default) or react-docgen-typescriptVuevue-docgen-apiAngularcompodocWebComponentscustom-element jsonEmberYUI doc\nThe data structure of argTypes is designed to match the output of the these tools",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1601739,
      "relative_path": "documentation\\storybook\\_docs_api_arg-types.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 12
  },
  {
    "id": "857549d2ece082ce16a11872b8260768",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_arg-types.html",
    "source_type": "documentation",
    "title": "ArgTypes | Storybook docs",
    "content": "current value of that arg Automatic argType inference If you are using the Storybook docs addon, then Storybook will infer a set of argTypes for each story based on the component specified in the default export of the CSF file To do so, Storybook uses various static analysis tools depending on your framework FrameworkStatic analysis toolReactreact-docgen (default) or react-docgen-typescriptVuevue-docgen-apiAngularcompodocWebComponentscustom-element jsonEmberYUI doc The data structure of argTypes is designed to match the output of the these toolsProperties specified manually will override what is inferred Manually specifying argTypes\nFor most Storybook projects, argTypes are automatically inferred from your components Any argTypes specified manually will override the inferred values ArgTypes are most often specified at the meta (component) level, in the default export of the CSF file:\nButton stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { Button } from ' /Button';\nconst meta = {\ncomponent: Button,\nargTypes: {\n// 👇 All Button stories expect a label arg\nlabel: {\ncontrol: 'text',\ndescription: 'Overwritten description',\n},\n},\n} satisfies Meta<typeof Button>;\nexport default meta;\nThey can apply to all stories when specified at the project (global) level, in the preview js|ts configuration file: storybook/preview tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Preview } from '@storybook/your-framework';\nconst preview = {\nargTypes: {\n// 👇 All stories expect a label arg\nlabel: {\ncontrol: 'text',\ndescription: 'Overwritten description',\n},\n},\n} satisfies Preview;\nexport default preview;\nOr they can apply only to a specific story:\nButton stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { Button } from '",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1601739,
      "relative_path": "documentation\\storybook\\_docs_api_arg-types.html",
      "source_type": "documentation"
    },
    "token_count": 456,
    "chunk_index": 1,
    "total_chunks": 12
  },
  {
    "id": "af5e7f1dc94bf081bc74544357aec1e8",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_arg-types.html",
    "source_type": "documentation",
    "title": "ArgTypes | Storybook docs",
    "content": "import type { Preview } from '@storybook/your-framework'; const preview = { argTypes: { // 👇 All stories expect a label arg label: { control: 'text', description: 'Overwritten description', }, }, } satisfies Preview; export default preview; Or they can apply only to a specific story: Button stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework'; import { Button } from '/Button';\nconst meta = {\ncomponent: Button,\n} satisfies Meta<typeof Button>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const Basic: Story = {\nargTypes: {\n// 👇 This story expects a label arg\nlabel: {\ncontrol: 'text',\ndescription: 'Overwritten description',\n},\n},\n} satisfies Story;\nargTypes\nType:\n{\n[key: string]: {\ncontrol : ControlType | { type: ControlType; /* See below for more */ } | false;\ndescription : string;\nif : Conditional;\nmapping : { [key: string]: { [option: string]: any } };\nname : string;\noptions : string[];\ntable : {\ncategory : string;\ndefaultValue : { summary: string; detail : string };\ndisable : boolean;\nsubcategory : string;\ntype : { summary : string; detail : string };\n},\ntype : SBType | SBScalarType['name'];\n}\n}\nYou configure argTypes using an object with keys matching the name of args The value of each key is an object with the following properties:\ncontrol\nType:\n| ControlType\n| {\ntype: ControlType,\naccept : string;\nlabels : { [option: string]: string };\nmax : number;\nmin : number;\npresetColors : string[];\nstep : number;\n}\n| false\nDefault:\n'select', if options are specified\nElse, inferred from type\nElse, 'object'\nSpecify the behavior of the controls panel for the arg If you specify a string, it's used as the type of the control If you specify an object, you can provide additional configuration Specifying false will prevent the control from rendering Example stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { Example } from '",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1601739,
      "relative_path": "documentation\\storybook\\_docs_api_arg-types.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 2,
    "total_chunks": 12
  },
  {
    "id": "37838adc2d153bb0fee014d63276cb53",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_arg-types.html",
    "source_type": "documentation",
    "title": "ArgTypes | Storybook docs",
    "content": "inferred from type Else, 'object' Specify the behavior of the controls panel for the arg If you specify a string, it's used as the type of the control If you specify an object, you can provide additional configuration Specifying false will prevent the control from rendering Example stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework'; import { Example } from '/Example';\nconst meta = {\ncomponent: Example,\nargTypes: {\nvalue: {\ncontrol: {\ntype: 'number',\nmin: 0,\nmax: 100,\nstep: 10,\n},\n},\n},\n} satisfies Meta<typeof Example>;\nexport default meta;\ncontrol type\nType: ControlType | null\nDefault: Inferred; 'select', if options are specified; falling back to 'object'\nSpecifies the type of control used to change the arg value with the controls panel Here are the available types, ControlType, grouped by the type of data they handle:\nData typeControlTypeDescriptionarray'object'Provides a JSON-based editor to handle the values of the array Also allows editing in raw mode { control: 'object' }boolean'boolean'Provides a toggle for switching between possible states { control: 'boolean' }enum'check'Provides a set of stacked checkboxes for selecting multiple options { control: 'check', options: ['email', 'phone', 'mail'] }'inline-check'Provides a set of inlined checkboxes for selecting multiple options { control: 'inline-check', options: ['email', 'phone', 'mail'] }'radio'Provides a set of stacked radio buttons based on the available options { control: 'radio', options: ['email', 'phone', 'mail'] }'inline-radio'Provides a set of inlined radio buttons based on the available options { control: 'inline-radio', options: ['email', 'phone', 'mail'] }'select'Provides a select to choose a single value from the options { control: 'select', options: [20, 30, 40, 50] }'multi-select'Provides a select to choose multiple values from the options { control: 'multi-select', options: ['USA', 'Canada', 'Mexico'] }number'number'Provides a numeric input to include the range of all possible values",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1601739,
      "relative_path": "documentation\\storybook\\_docs_api_arg-types.html",
      "source_type": "documentation"
    },
    "token_count": 493,
    "chunk_index": 3,
    "total_chunks": 12
  },
  {
    "id": "e28ad1c5c52d1fcdccf8e995d594cdf8",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_arg-types.html",
    "source_type": "documentation",
    "title": "ArgTypes | Storybook docs",
    "content": "available options { control: 'radio', options: ['email', 'phone', 'mail'] }'inline-radio'Provides a set of inlined radio buttons based on the available options { control: 'inline-radio', options: ['email', 'phone', 'mail'] }'select'Provides a select to choose a single value from the options { control: 'select', options: [20, 30, 40, 50] }'multi-select'Provides a select to choose multiple values from the options { control: 'multi-select', options: ['USA', 'Canada', 'Mexico'] }number'number'Provides a numeric input to include the range of all possible values{ control: { type: 'number', min:1, max:30, step: 2 } }'range'Provides a range slider to include all possible values { control: { type: 'range', min: 1, max: 30, step: 3 } }object'file'Provides a file input that returns an array of URLs Can be further customized to accept specific file types { control: { type: 'file', accept: ' png' } }'object'Provides a JSON-based editor to handle the object's values Also allows editing in raw mode { control: 'object' }string'color'Provides a color picker to choose color values Can be additionally configured to include a set of color presets { control: { type: 'color', presetColors: ['red', 'green']} }'date'Provides a datepicker to choose a date { control: 'date' }'text'Provides a freeform text input { control: 'text' }\n💡The date control will convert the date into a UNIX timestamp when the value changes It's a known limitation that will be fixed in a future release If you need to represent the actual date, you'll need to update the story's implementation and convert the value into a date object control accept\nType: string\nWhen type is 'file', you can specify the file types that are accepted The value should be a string of comma-separated MIME types control labels\nType: { [option: string]: string }\nMap options to labels labels doesn't have to be exhaustive If an option is not in the object's keys, it's used verbatim control max\nType: number\nWhen type is 'number' or 'range', sets the maximum allowed value control",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1601739,
      "relative_path": "documentation\\storybook\\_docs_api_arg-types.html",
      "source_type": "documentation"
    },
    "token_count": 494,
    "chunk_index": 4,
    "total_chunks": 12
  },
  {
    "id": "c7e50386a92bc2df683125ad8e66bb47",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_arg-types.html",
    "source_type": "documentation",
    "title": "ArgTypes | Storybook docs",
    "content": "a date object control accept Type: string When type is 'file', you can specify the file types that are accepted The value should be a string of comma-separated MIME types control labels Type: { [option: string]: string } Map options to labels labels doesn't have to be exhaustive If an option is not in the object's keys, it's used verbatim control max Type: number When type is 'number' or 'range', sets the maximum allowed value controlmin\nType: number\nWhen type is 'number' or 'range', sets the minimum allowed value control presetColors\nType: string[]\nWhen type is 'color', defines the set of colors that are available in addition to the general color picker The values in the array should be valid CSS color values control step\nType: number\nWhen type is 'number' or 'range', sets the granularity allowed when incrementing/decrementing the value description\nType: string\nDefault: Inferred\nDescribe the arg (If you intend to describe the type of the arg, you should use table type, instead )\nExample stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { Example } from ' /Example';\nconst meta = {\ncomponent: Example,\nargTypes: {\nvalue: {\ndescription: 'The value of the slider',\n},\n},\n} satisfies Meta<typeof Example>;\nexport default meta;\nif\nType:\n{\n[predicateType: 'arg' | 'global']: string;\neq : any;\nexists : boolean;\nneq : any;\ntruthy : boolean;\n}\nConditionally render an argType based on the value of another arg or global Example stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { Example } from '",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1601739,
      "relative_path": "documentation\\storybook\\_docs_api_arg-types.html",
      "source_type": "documentation"
    },
    "token_count": 411,
    "chunk_index": 5,
    "total_chunks": 12
  },
  {
    "id": "aeb8cf3cd0b5523740e2a83ff3c8911b",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_arg-types.html",
    "source_type": "documentation",
    "title": "ArgTypes | Storybook docs",
    "content": "of the slider', }, }, } satisfies Meta<typeof Example>; export default meta; if Type: { [predicateType: 'arg' | 'global']: string; eq : any; exists : boolean; neq : any; truthy : boolean; } Conditionally render an argType based on the value of another arg or global Example stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework'; import { Example } from '/Example';\nconst meta = {\ncomponent: Example,\nargTypes: {\nparent: { control: 'select', options: ['one', 'two', 'three'] },\n// 👇 Only shown when `parent` arg exists\nparentExists: { if: { arg: 'parent', exists: true } },\n// 👇 Only shown when `parent` arg does not exist\nparentDoesNotExist: { if: { arg: 'parent', exists: false } },\n// 👇 Only shown when `parent` arg value is truthy\nparentIsTruthy: { if: { arg: 'parent' } },\nparentIsTruthyVerbose: { if: { arg: 'parent', truthy: true } },\n// 👇 Only shown when `parent` arg value is not truthy\nparentIsNotTruthy: { if: { arg: 'parent', truthy: false } },\n// 👇 Only shown when `parent` arg value is 'three'\nparentIsEqToValue: { if: { arg: 'parent', eq: 'three' } },\n// 👇 Only shown when `parent` arg value is not 'three'\nparentIsNotEqToValue: { if: { arg: 'parent', neq: 'three' } },\n// Each of the above can also be conditional on the value of a globalType, e g :\n// 👇 Only shown when `theme` global exists\nparentExists: { if: { global: 'theme', exists: true } },\n},\n} satisfies Meta<typeof Example>;\nexport default meta;\nmapping\nType: { [key: string]: { [option: string]: any } }\nMap options to values When dealing with non-primitive values, you'll notice that you'll run into some limitations",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1601739,
      "relative_path": "documentation\\storybook\\_docs_api_arg-types.html",
      "source_type": "documentation"
    },
    "token_count": 477,
    "chunk_index": 6,
    "total_chunks": 12
  },
  {
    "id": "9ecc5cbd9439ccbb49f3519cf95406bd",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_arg-types.html",
    "source_type": "documentation",
    "title": "ArgTypes | Storybook docs",
    "content": "neq: 'three' } }, // Each of the above can also be conditional on the value of a globalType, e g : // 👇 Only shown when `theme` global exists parentExists: { if: { global: 'theme', exists: true } }, }, } satisfies Meta<typeof Example>; export default meta; mapping Type: { [key: string]: { [option: string]: any } } Map options to values When dealing with non-primitive values, you'll notice that you'll run into some limitationsThe most obvious issue is that not every value can be represented as part of the args param in the URL, losing the ability to share and deeplink to such a state Beyond that, complex values such as JSX cannot be synchronized between the manager (e g , Controls panel) and the preview (your story) mapping doesn't have to be exhaustive If the currently selected option is not listed, it's used verbatim Can be used with control labels Example stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { Example } from ' /Example';\nconst meta = {\ncomponent: Example,\nargTypes: {\nlabel: {\ncontrol: { type: 'select' },\noptions: ['Normal', 'Bold', 'Italic'],\nmapping: {\nBold: <b>Bold</b>,\nItalic: <i>Italic</i>,\n},\n},\n},\n} satisfies Meta<typeof Example>;\nexport default meta;\nname\nType: string\nThe argTypes object uses the name of the arg as the key By default, that key is used when displaying the argType in Storybook You can override the displayed name by specifying a name property Example stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { Example } from ' /Example';\nconst meta = {\ncomponent: Example,\nargTypes: {\nactualArgName: {\nname: 'Friendly name',\n},\n},\n} satisfies Meta<typeof Example>;\nexport default meta;\n⚠️Be careful renaming args in this way Users of the component you're documenting will not be able to use the documented name as a property of your component and the actual name will not displayed",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1601739,
      "relative_path": "documentation\\storybook\\_docs_api_arg-types.html",
      "source_type": "documentation"
    },
    "token_count": 494,
    "chunk_index": 7,
    "total_chunks": 12
  },
  {
    "id": "bc3733919100690f3c4c426e7cc1ea2a",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_arg-types.html",
    "source_type": "documentation",
    "title": "ArgTypes | Storybook docs",
    "content": "g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework'; import { Example } from ' /Example'; const meta = { component: Example, argTypes: { actualArgName: { name: 'Friendly name', }, }, } satisfies Meta<typeof Example>; export default meta; ⚠️Be careful renaming args in this way Users of the component you're documenting will not be able to use the documented name as a property of your component and the actual name will not displayedFor this reason, the name property is best used when defining an argType that is only used for documentation purposes and not an actual property of the component For example, when providing argTypes for each property of an object options\nType: string[]\nDefault: Inferred\nIf the arg accepts a finite set of values, you can specify them with options If those values are complex, like JSX elements, you can use mapping to map them to string values You can use control labels to provide custom labels for the options Example stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { Example } from ' /Example';\nconst meta = {\ncomponent: Example,\nargTypes: {\nicon: {\noptions: ['arrow-up', 'arrow-down', 'loading'],\n},\n},\n} satisfies Meta<typeof Example>;\nexport default meta;\ntable\nType:\n{\ncategory : string;\ndefaultValue : {\ndetail : string;\nsummary: string;\n};\ndisable : boolean;\nsubcategory : string;\ntype : {\ndetail : string;\nsummary: string;\n};\n}\nDefault: Inferred\nSpecify how the arg is documented in the ArgTypes doc block, Controls doc block, and Controls panel Example stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { Example } from ' /Example';\nconst meta = {\ncomponent: Example,\nargTypes: {\nvalue: {\ntable: {\ndefaultValue: { summary: 0 },\ntype: { summary: 'number' },\n},\n},\n},\n} satisfies Meta<typeof Example>;\nexport default meta;\ntable",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1601739,
      "relative_path": "documentation\\storybook\\_docs_api_arg-types.html",
      "source_type": "documentation"
    },
    "token_count": 476,
    "chunk_index": 8,
    "total_chunks": 12
  },
  {
    "id": "9459866b4ee3d7430b28df47a7c8efcf",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_arg-types.html",
    "source_type": "documentation",
    "title": "ArgTypes | Storybook docs",
    "content": "documented in the ArgTypes doc block, Controls doc block, and Controls panel Example stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework'; import { Example } from ' /Example'; const meta = { component: Example, argTypes: { value: { table: { defaultValue: { summary: 0 }, type: { summary: 'number' }, }, }, }, } satisfies Meta<typeof Example>; export default meta; tablecategory\nType: string\nDefault: Inferred, in some frameworks\nDisplay the argType under a category heading, with the label specified by category table defaultValue\nType: { detail : string; summary: string }\nDefault: Inferred\nThe documented default value of the argType summary is typically used for the value itself, while detail is used for additional information table disable\nType: boolean\nSet to true to remove the argType's row from the table table readonly\nType: boolean\nSet to true to indicate that the argType is read-only table subcategory\nType: string\nDisplay the argType under a subcategory heading (which displays under the [category] heading), with the label specified by subcategory table type\nType: { detail : string; summary: string }\nDefault: Inferred from type\nThe documented type of the argType summary is typically used for the type itself, while detail is used for additional information If you need to specify the actual, semantic type, you should use type, instead type\nType: 'boolean' | 'function' | 'number' | 'string' | 'symbol' | SBType\nThe full type of SBType is:\nSBType interface SBBaseType {\nrequired : boolean;\nraw",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1601739,
      "relative_path": "documentation\\storybook\\_docs_api_arg-types.html",
      "source_type": "documentation"
    },
    "token_count": 373,
    "chunk_index": 9,
    "total_chunks": 12
  },
  {
    "id": "eb52beac9833d2a381ff808417f14621",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_arg-types.html",
    "source_type": "documentation",
    "title": "ArgTypes | Storybook docs",
    "content": "table type Type: { detail : string; summary: string } Default: Inferred from type The documented type of the argType summary is typically used for the type itself, while detail is used for additional information If you need to specify the actual, semantic type, you should use type, instead type Type: 'boolean' | 'function' | 'number' | 'string' | 'symbol' | SBType The full type of SBType is: SBType interface SBBaseType { required : boolean; raw: string;\n}\ntype SBScalarType = SBBaseType & {\nname: 'boolean' | 'string' | 'number' | 'function' | 'symbol';\n};\ntype SBArrayType = SBBaseType & {\nname: 'array';\nvalue: SBType;\n};\ntype SBObjectType = SBBaseType & {\nname: 'object';\nvalue: Record<string, SBType>;\n};\ntype SBEnumType = SBBaseType & {\nname: 'enum';\nvalue: (string | number)[];\n};\ntype SBIntersectionType = SBBaseType & {\nname: 'intersection';\nvalue: SBType[];\n};\ntype SBUnionType = SBBaseType & {\nname: 'union';\nvalue: SBType[];\n};\ntype SBOtherType = SBBaseType & {\nname: 'other';\nvalue: string;\n};\ntype SBType =\n| SBScalarType\n| SBEnumType\n| SBArrayType\n| SBObjectType\n| SBIntersectionType\n| SBUnionType\n| SBOtherType;\nDefault: Inferred\nSpecifies the semantic type of the argType When an argType is inferred, the information from the various tools is summarized in this property, which is then used to infer other properties, like control and table type If you only need to specify the documented type, you should use table type, instead Example stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { Example } from ' /Example';\nconst meta = {\ncomponent: Example,\nargTypes: {\nvalue: { type: 'number' },\n},\n} satisfies Meta<typeof Example>;\nexport default meta;\ndefaultValue\n(⛔️ Deprecated)\nType: any\nDefine the default value of the argType Deprecated in favor of defining the arg value directly Example stories",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1601739,
      "relative_path": "documentation\\storybook\\_docs_api_arg-types.html",
      "source_type": "documentation"
    },
    "token_count": 489,
    "chunk_index": 10,
    "total_chunks": 12
  },
  {
    "id": "d9b8e51745f6eb6efb93047fc1f47ed7",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_arg-types.html",
    "source_type": "documentation",
    "title": "ArgTypes | Storybook docs",
    "content": "instead Example stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework'; import { Example } from ' /Example'; const meta = { component: Example, argTypes: { value: { type: 'number' }, }, } satisfies Meta<typeof Example>; export default meta; defaultValue (⛔️ Deprecated) Type: any Define the default value of the argType Deprecated in favor of defining the arg value directly Example storiests|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { Example } from ' /Example';\nconst meta = {\ncomponent: Example,\nargTypes: {\nvalue: {\n// ❌ Deprecated\ndefaultValue: 0,\n},\n},\n// ✅ Do this instead\nargs: {\nvalue: 0,\n},\n} satisfies Meta<typeof Example>;\nexport default meta;\nWas this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1601739,
      "relative_path": "documentation\\storybook\\_docs_api_arg-types.html",
      "source_type": "documentation"
    },
    "token_count": 293,
    "chunk_index": 11,
    "total_chunks": 12
  },
  {
    "id": "d1f4ce9487b889ce5d17da5c8a428300",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_cli-options.html",
    "source_type": "documentation",
    "title": "CLI options | Storybook docs",
    "content": "CLI options | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » API » CLI optionsDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQCLI optionsThe Storybook command line interface (CLI) is the main tool you use to build and develop Storybook ℹ️Storybook collects completely anonymous data to help us improve user experience Participation is\noptional, and you may opt-out if you'd not like to\nshare any information CLI commands\nAll of the following documentation is available in the CLI by running storybook --help 💡Passing options to these commands works slightly differently if you're using npm instead of Yarn You must prefix all of your options with -- For example, npm run storybook build -- -o /path/to/build --quiet dev\nCompiles and serves a development build of your Storybook that reflects your source code changes in the browser in real-time It should be run from the root of your project storybook dev [options]\nOptions include:\nOptionDescription--helpOutput usage information storybook dev --help-V, --versionOutput the version number storybook dev -V-p, --port [number]Port to run Storybook storybook dev -p 9009--exact-port [number]Attempts to run Storybook on the exact port number specified If the port is already in use, Storybook will exit with an error message",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 769280,
      "relative_path": "documentation\\storybook\\_docs_api_cli-options.html",
      "source_type": "documentation"
    },
    "token_count": 505,
    "chunk_index": 0,
    "total_chunks": 12
  },
  {
    "id": "7068d91c1120649e096867012b2269bb",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_cli-options.html",
    "source_type": "documentation",
    "title": "CLI options | Storybook docs",
    "content": "build of your Storybook that reflects your source code changes in the browser in real-time It should be run from the root of your project storybook dev [options] Options include: OptionDescription--helpOutput usage information storybook dev --help-V, --versionOutput the version number storybook dev -V-p, --port [number]Port to run Storybook storybook dev -p 9009--exact-port [number]Attempts to run Storybook on the exact port number specified If the port is already in use, Storybook will exit with an error messagestorybook dev --exact-port 9009-h, --host [string]Host to run Storybook storybook dev -h my-host com-c, --config-dir [dir-name]Storybook configuration directory storybook dev -c storybook--loglevel [level]Controls level of logging during build Available options: silly, verbose, info (default), warn, error, silentstorybook dev --loglevel warn--httpsServe Storybook over HTTPS Note: You must provide your own certificate information storybook dev --https--ssl-caProvide an SSL certificate authority (Optional with --https, required if using a self-signed certificate)storybook dev --ssl-ca my-certificate--ssl-certProvide an SSL certificate (Required with --https)storybook dev --ssl-cert my-ssl-certificate--ssl-keyProvide an SSL key (Required with --https)storybook dev --ssl-key my-ssl-key--smoke-testExit after successful start storybook dev --smoke-test--ciCI mode (skip interactive prompts, don't open browser) storybook dev --ci--no-openDo not open Storybook automatically in the browser storybook dev --no-open--quietSuppress verbose build output storybook dev --quiet--debugOutputs more logs in the CLI to assist debugging storybook dev --debug--debug-webpackDisplay final webpack configurations for debugging purposes storybook dev --debug-webpack--stats-json [dir-name]Write stats JSON to disk Requires Webpackstorybook dev --stats-json /tmp/stats--no-version-updatesSkips Storybook's update check storybook dev --no-version-updates--docsStarts Storybook in documentation mode Learn more about it in here storybook dev --docs--initial-path [path]Configures the URL Storybook should open when it opens the browser for the first time storybook dev --initial-path=/docs/getting-started--docs--preview-url [path]Overrides the default Storybook preview with a custom built preview URL",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 769280,
      "relative_path": "documentation\\storybook\\_docs_api_cli-options.html",
      "source_type": "documentation"
    },
    "token_count": 505,
    "chunk_index": 1,
    "total_chunks": 12
  },
  {
    "id": "747c8ba124a338f720215731a0cf52ce",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_cli-options.html",
    "source_type": "documentation",
    "title": "CLI options | Storybook docs",
    "content": "in the CLI to assist debugging storybook dev --debug--debug-webpackDisplay final webpack configurations for debugging purposes storybook dev --debug-webpack--stats-json [dir-name]Write stats JSON to disk Requires Webpackstorybook dev --stats-json /tmp/stats--no-version-updatesSkips Storybook's update check storybook dev --no-version-updates--docsStarts Storybook in documentation mode Learn more about it in here storybook dev --docs--initial-path [path]Configures the URL Storybook should open when it opens the browser for the first time storybook dev --initial-path=/docs/getting-started--docs--preview-url [path]Overrides the default Storybook preview with a custom built preview URLstorybook dev --preview-url=http://localhost:1337/external-iframe html--force-build-previewForcefully builds Storybook's preview iframe Useful if you're experiencing issues, or combined with --preview-url to ensure the preview is up-to-date storybook dev --force-build-preview--disable-telemetryDisables Storybook's telemetry Learn more about it here storybook dev --disable-telemetry--enable-crash-reportsEnables sending crash reports to Storybook's telemetry Learn more about it here storybook dev --enable-crash-reports--preview-onlySkips Storybook's manager from building and opens the app in \"preview only\" mode, which is designed to be used in unsupported browsers storybook dev --preview-only\n⚠️With the release of Storybook 8, the -s CLI flag was removed We recommend using the static\ndirectory\ninstead if you need to serve static files build\nCompiles your Storybook instance so it can be deployed It should be run from the root of your project storybook build [options]\nOptions include:\nOptionDescription-h, --helpOutput usage information storybook build --help-V, --versionOutput the version number storybook build -V-o, --output-dir [dir-name]Directory where to store built files storybook build -o /my-deployed-storybook-c, --config-dir [dir-name]Storybook configuration directory storybook build -c storybook--loglevel [level]Controls level of logging during build Available options: silly, verbose, info (default), warn, error, silent storybook build --loglevel warn--quietSuppress verbose build output storybook build --quiet--debugOutputs more logs in the CLI to assist debugging storybook build --debug--debug-webpackDisplay final webpack configurations for debugging purposes",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 769280,
      "relative_path": "documentation\\storybook\\_docs_api_cli-options.html",
      "source_type": "documentation"
    },
    "token_count": 505,
    "chunk_index": 2,
    "total_chunks": 12
  },
  {
    "id": "ded330dc1b541e0c1877811d08d2a656",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_cli-options.html",
    "source_type": "documentation",
    "title": "CLI options | Storybook docs",
    "content": "include: OptionDescription-h, --helpOutput usage information storybook build --help-V, --versionOutput the version number storybook build -V-o, --output-dir [dir-name]Directory where to store built files storybook build -o /my-deployed-storybook-c, --config-dir [dir-name]Storybook configuration directory storybook build -c storybook--loglevel [level]Controls level of logging during build Available options: silly, verbose, info (default), warn, error, silent storybook build --loglevel warn--quietSuppress verbose build output storybook build --quiet--debugOutputs more logs in the CLI to assist debugging storybook build --debug--debug-webpackDisplay final webpack configurations for debugging purposesstorybook build --debug-webpack--stats-json [dir-name]Write stats JSON to disk Requires Webpackstorybook build --stats-json /tmp/stats--docsBuilds Storybook in documentation mode Learn more about it in here storybook build --docs--testOptimize Storybook's production build for performance and tests by removing unnecessary features with the test option Learn more here storybook build --test--preview-url [path]Overrides the default Storybook preview with a custom built preview URL storybook build --preview-url=http://localhost:1337/external-iframe html--force-build-previewForcefully builds Storybook's preview iframe Useful if you're experiencing issues, or combined with --preview-url to ensure the preview is up-to-date storybook build --force-build-preview--disable-telemetryDisables Storybook's telemetry Learn more about it here storybook build --disable-telemetry--enable-crash-reportsEnables sending crash reports to Storybook's telemetry Learn more about it here storybook build --enable-crash-reports--preview-onlySkips Storybook's manager from building and produces a \"preview only\" app, which is designed to be used in unsupported browsers storybook build --preview-only\ninit\nℹ️We recommend create-storybook for new projects The init command will\nremain available for backwards compatibility Installs and initializes the specified version (e g , @latest, @8, @next) of Storybook into your project If no version is specified, the latest version is installed Read more in the installation guide storybook[@version] init [options]\nFor example, storybook@8 4 init will install Storybook 8 4 into your project Options include:\nOptionDescription-h, --helpOutput usage information",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 769280,
      "relative_path": "documentation\\storybook\\_docs_api_cli-options.html",
      "source_type": "documentation"
    },
    "token_count": 496,
    "chunk_index": 3,
    "total_chunks": 12
  },
  {
    "id": "95817b70d4acdd513e2dc521c2ed642d",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_cli-options.html",
    "source_type": "documentation",
    "title": "CLI options | Storybook docs",
    "content": "unsupported browsers storybook build --preview-only init ℹ️We recommend create-storybook for new projects The init command will remain available for backwards compatibility Installs and initializes the specified version (e g , @latest, @8, @next) of Storybook into your project If no version is specified, the latest version is installed Read more in the installation guide storybook[@version] init [options] For example, storybook@8 4 init will install Storybook 8 4 into your project Options include: OptionDescription-h, --helpOutput usage informationstorybook init --help-b, --builderDefines the builder to use for your Storybook instance storybook init --builder webpack5-f, --forceForcefully installs Storybook into your project, prompting you to overwrite existing files storybook init --force-s, --skip-installSkips the dependency installation step Used only when you need to configure Storybook manually storybook init --skip-install-t, --typeDefines the framework to use for your Storybook instance storybook init --type solid-y, --yesSkips interactive prompts and automatically installs Storybook per specified version, including all features storybook init --yes--features [ values]Use these features when installing, skipping the prompt Supported values are docs and test, space separated storybook init --features docs test--package-managerSets the package manager to use when installing Storybook Available package managers include npm, yarn, and pnpm storybook init --package-manager pnpm--use-pnpEnables Plug'n'Play support for Yarn This option is only available when using Yarn as your package manager storybook init --use-pnp-p, --parserSets the jscodeshift parser Available parsers include babel, babylon, flow, ts, and tsx storybook init --parser tsx--debugOutputs more logs in the CLI to assist debugging storybook init --debug--disable-telemetryDisables Storybook's telemetry Learn more about it here storybook init --disable-telemetry--enable-crash-reportsEnables sending crash reports to Storybook's telemetry Learn more about it here storybook init --enable-crash-reports--no-devComplete the initialization of Storybook without running the Storybook dev server storybook init --no-dev\nadd\nInstalls a Storybook addon and configures your project for it Read more in the addon installation guide storybook add [addon] [options]\nOptions include:\nOptionDescription-h, --helpOutput usage information storybook add --help-c, --config-dirStorybook configuration directory",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 769280,
      "relative_path": "documentation\\storybook\\_docs_api_cli-options.html",
      "source_type": "documentation"
    },
    "token_count": 512,
    "chunk_index": 4,
    "total_chunks": 12
  },
  {
    "id": "00a885787292eed105cf0576540310a3",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_cli-options.html",
    "source_type": "documentation",
    "title": "CLI options | Storybook docs",
    "content": "assist debugging storybook init --debug--disable-telemetryDisables Storybook's telemetry Learn more about it here storybook init --disable-telemetry--enable-crash-reportsEnables sending crash reports to Storybook's telemetry Learn more about it here storybook init --enable-crash-reports--no-devComplete the initialization of Storybook without running the Storybook dev server storybook init --no-dev add Installs a Storybook addon and configures your project for it Read more in the addon installation guide storybook add [addon] [options] Options include: OptionDescription-h, --helpOutput usage information storybook add --help-c, --config-dirStorybook configuration directorystorybook migrate --config-dir storybook--package-managerSets the package manager to use when installing the addon Available package managers include npm, yarn, and pnpm storybook add [addon] --package-manager pnpm-s, --skip-postinstallSkips post-install configuration Used only when you need to configure the addon yourself storybook add [addon] --skip-postinstall--debugOutputs more logs in the CLI to assist debugging storybook add --debug\nremove\nDeletes a Storybook addon from your project Read more in the addon installation guide storybook remove [addon] [options]\nOptions include:\nOptionDescription-h, --helpOutput usage information storybook remove --help--package-managerSets the package manager to use when removing the addon Available package managers include npm, yarn, and pnpm storybook remove [addon]--package-manager pnpm--debugOutputs more logs in the CLI to assist debugging storybook remove --debug--disable-telemetryDisables Storybook's telemetry Learn more about it here storybook remove --disable-telemetry--enable-crash-reportsEnables sending crash reports to Storybook's telemetry Learn more about it here storybook remove --enable-crash-reports\nupgrade\nUpgrades your Storybook instance to the specified version (e g , @latest, @8, @next) Read more in the upgrade guide storybook[@version] upgrade [options]\nFor example, storybook@latest upgrade --dry-run will perform a dry run (no actual changes) of upgrading your project to the latest version of Storybook Options include:\nOptionDescription-h, --helpOutput usage information storybook upgrade --help-c, --config-dir <dir-name >Directory or directories to find Storybook configurationsstorybook upgrade --config-dir storybook-n, --dry-runChecks for version upgrades without installing them",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 769280,
      "relative_path": "documentation\\storybook\\_docs_api_cli-options.html",
      "source_type": "documentation"
    },
    "token_count": 501,
    "chunk_index": 5,
    "total_chunks": 12
  },
  {
    "id": "ec80a61776b02e0dc90811d54dbdef3f",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_cli-options.html",
    "source_type": "documentation",
    "title": "CLI options | Storybook docs",
    "content": "--enable-crash-reports upgrade Upgrades your Storybook instance to the specified version (e g , @latest, @8, @next) Read more in the upgrade guide storybook[@version] upgrade [options] For example, storybook@latest upgrade --dry-run will perform a dry run (no actual changes) of upgrading your project to the latest version of Storybook Options include: OptionDescription-h, --helpOutput usage information storybook upgrade --help-c, --config-dir <dir-name >Directory or directories to find Storybook configurationsstorybook upgrade --config-dir storybook-n, --dry-runChecks for version upgrades without installing themstorybook upgrade --dry-run-s, --skip-checkSkips the migration check step during the upgrade process storybook upgrade --skip-check-y, --yesSkips interactive prompts and automatically upgrades Storybook to the latest version storybook upgrade --yes-f,--forceForce the upgrade, skipping autoblockers check storybook upgrade --force--package-managerSets the package manager to use when upgrading Storybook Available package managers include npm, yarn, and pnpm storybook upgrade --package-manager pnpm--debugOutputs more logs in the CLI to assist debugging storybook upgrade --debug--disable-telemetryDisables Storybook's telemetry Learn more about it here storybook upgrade --disable-telemetry--enable-crash-reportsEnables sending crash reports to Storybook's telemetry Learn more about it here storybook upgrade --enable-crash-reports--write-logsWrite all debug logs to a file at the end of the run storybook upgrade --write-logs--loglevel <level>Define log level: debug, error, info, silent, trace, or warn (default: info) storybook upgrade --loglevel debug\nmigrate\nRuns the provided codemod to ensure your Storybook project is compatible with the specified version Read more in the migration guide storybook[@version] migrate [codemod] [options]\nℹ️The command requires the codemod name (e g , csf-2-to-3) as an argument to apply the necessary\nchanges to your project You can find the list of available codemods by running storybook migrate   --list For example, storybook@latest migrate csf-2-to-3 --dry-run, checks your project to verify if the codemod can be applied without making any changes, providing you with a report of which files would be affected Options include:\nOptionDescription-h, --helpOutput usage information",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 769280,
      "relative_path": "documentation\\storybook\\_docs_api_cli-options.html",
      "source_type": "documentation"
    },
    "token_count": 509,
    "chunk_index": 6,
    "total_chunks": 12
  },
  {
    "id": "6312f80085b5e69bff341b2ec5ae4388",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_cli-options.html",
    "source_type": "documentation",
    "title": "CLI options | Storybook docs",
    "content": "storybook[@version] migrate [codemod] [options] ℹ️The command requires the codemod name (e g , csf-2-to-3) as an argument to apply the necessary changes to your project You can find the list of available codemods by running storybook migrate --list For example, storybook@latest migrate csf-2-to-3 --dry-run, checks your project to verify if the codemod can be applied without making any changes, providing you with a report of which files would be affected Options include: OptionDescription-h, --helpOutput usage informationstorybook migrate --help-c, --config-dirStorybook configuration directory storybook migrate --config-dir storybook-n, --dry-runVerify the migration exists and show the files to which it will be applied storybook migrate --dry-run-l, --listShows a list of available codemods storybook migrate --list-g, --globGlob for files upon which to apply the codemods storybook migrate --glob src/**/* stories tsx-p, --parserSets the jscodeshift parser Available parsers include babel, babylon, flow, ts, and tsx storybook migrate --parser tsx-r, --rename [from-to]Renames the files affected by the codemod to include the provided suffix storybook migrate --rename \" js: ts\"--debugOutputs more logs in the CLI to assist debugging storybook migrate --debug\nautomigrate\nPerform standard configuration checks to determine if your Storybook project can be automatically migrated to the specified version Read more in the migration guide storybook[@version] automigrate [fixId] [options]\nFor example, storybook@latest automigrate --dry-run scans your project for potential migrations that can be applied automatically without making any changes Options include:\nOptionDescription-h, --helpOutput usage information storybook automigrate --help-c, --config-dirStorybook configuration directory storybook automigrate --config-dir storybook-n, --dry-runChecks for available migrations without applying them storybook automigrate --dry-run-s, --skip-installSkip installing dependencies whenever applicable storybook automigrate --skip-install-y, --yesApplies available migrations automatically without prompting for confirmation storybook automigrate --yes-l, --listShows a list of available automigrations storybook automigrate --list--package-managerSets the package manager to use when running the auto migration Available package managers include npm, yarn, and pnpm",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 769280,
      "relative_path": "documentation\\storybook\\_docs_api_cli-options.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 7,
    "total_chunks": 12
  },
  {
    "id": "c9241eaa3bc10f1f0ba0ccb2e7838dad",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_cli-options.html",
    "source_type": "documentation",
    "title": "CLI options | Storybook docs",
    "content": "without making any changes Options include: OptionDescription-h, --helpOutput usage information storybook automigrate --help-c, --config-dirStorybook configuration directory storybook automigrate --config-dir storybook-n, --dry-runChecks for available migrations without applying them storybook automigrate --dry-run-s, --skip-installSkip installing dependencies whenever applicable storybook automigrate --skip-install-y, --yesApplies available migrations automatically without prompting for confirmation storybook automigrate --yes-l, --listShows a list of available automigrations storybook automigrate --list--package-managerSets the package manager to use when running the auto migration Available package managers include npm, yarn, and pnpmstorybook automigrate --package-manager pnpm--rendererSpecifies Storybook's renderer to use when running the automigration Useful for monorepo environments where multiple Storybook instances can exist in the same project storybook automigrate --renderer vue--debugOutputs more logs in the CLI to assist debugging storybook automigrate --debug--disable-telemetryDisables Storybook's telemetry Learn more about it here storybook automigrate --disable-telemetry--enable-crash-reportsEnables sending crash reports to Storybook's telemetry Learn more about it here storybook automigrate --enable-crash-reports\ndoctor\nPerforms a health check on your Storybook project for common issues (e g , duplicate dependencies, incompatible addons or mismatched versions) and provides suggestions on how to fix them Applicable when upgrading Storybook versions storybook doctor [options]\nOptions include:\nOptionDescription-h, --helpOutput usage information storybook doctor --help-c, --config-dirStorybook configuration directory storybook doctor --config-dir storybook--package-managerSets the package manager to use when running the health check Available package managers include npm, yarn, and pnpm storybook doctor --package-manager pnpm--debugOutputs more logs in the CLI to assist debugging storybook doctor --debug\ninfo\nReports useful debugging information about your environment Helpful in providing information when opening an issue or a discussion storybook info\nExample output:\nStorybook Environment Info:\nSystem:\nOS: macOS 14 2\nCPU: (8) arm64 Apple M3\nShell: 5 9 - /bin/zsh\nBinaries:\nNode: 18 19 0 - ~/ nvm/versions/node/v18 19 0/bin/node\nnpm: 10 2 3 - ~/ nvm/versions/node/v18 19 0/bin/npm <----- active\nBrowsers:\nChrome: 120 0 6099",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 769280,
      "relative_path": "documentation\\storybook\\_docs_api_cli-options.html",
      "source_type": "documentation"
    },
    "token_count": 520,
    "chunk_index": 8,
    "total_chunks": 12
  },
  {
    "id": "612a8419b73de6813013d2f30750ab59",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_cli-options.html",
    "source_type": "documentation",
    "title": "CLI options | Storybook docs",
    "content": "in the CLI to assist debugging storybook doctor --debug info Reports useful debugging information about your environment Helpful in providing information when opening an issue or a discussion storybook info Example output: Storybook Environment Info: System: OS: macOS 14 2 CPU: (8) arm64 Apple M3 Shell: 5 9 - /bin/zsh Binaries: Node: 18 19 0 - ~/ nvm/versions/node/v18 19 0/bin/node npm: 10 2 3 - ~/ nvm/versions/node/v18 19 0/bin/npm <----- active Browsers: Chrome: 120 0 6099199\nnpmPackages:\n@storybook/addon-onboarding: ^1 0 10 => 1 0 10\n@storybook/react: ^7 6 6 => 7 6 6\n@storybook/react-vite: ^7 6 6 => 7 6 6\nstorybook: ^7 6 6 => 7 6 6\nnpmGlobalPackages:\nchromatic: ^10 2 0 => 10 2 0\nindex\nBuild an index json that lists all stories and docs entries in your Storybook storybook index [options]\nOptions include:\nOptionDescription-o, --output-file <file-name>JSON file to output index-c, --config-dir <dir-name>Storybook configuration directory--quietSuppress verbose build output--loglevel <level>Control level of logging during build--disable-telemetryDisables Storybook's telemetry--debugOutputs more logs in the CLI to assist debugging --enable-crash-reportsEnables sending crash reports to Storybook's telemetry\nsandbox\nGenerates a local sandbox project using the specified version (e g , @latest, @8, @next) for testing Storybook features based on the list of supported frameworks Useful for reproducing bugs when opening an issue or a discussion storybook[@version] sandbox [framework-filter] [options]\nFor example, storybook@next sandbox will generated sandboxes using the newest pre-release version of Storybook The framework-filter argument is optional and can filter the list of available frameworks For example, storybook@next sandbox react will only offer to generate React-based sandboxes Options include:\nOptionDescription-h, --helpOutput usage information storybook sandbox --help-o, --output [dir-name]Configures the location of the sandbox project storybook sandbox --output /my-sandbox-project--no-initGenerates a sandbox project without initializing Storybook",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 769280,
      "relative_path": "documentation\\storybook\\_docs_api_cli-options.html",
      "source_type": "documentation"
    },
    "token_count": 517,
    "chunk_index": 9,
    "total_chunks": 12
  },
  {
    "id": "d706964b19375fd100a313ceca32c6b8",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_cli-options.html",
    "source_type": "documentation",
    "title": "CLI options | Storybook docs",
    "content": "opening an issue or a discussion storybook[@version] sandbox [framework-filter] [options] For example, storybook@next sandbox will generated sandboxes using the newest pre-release version of Storybook The framework-filter argument is optional and can filter the list of available frameworks For example, storybook@next sandbox react will only offer to generate React-based sandboxes Options include: OptionDescription-h, --helpOutput usage information storybook sandbox --help-o, --output [dir-name]Configures the location of the sandbox project storybook sandbox --output /my-sandbox-project--no-initGenerates a sandbox project without initializing Storybookstorybook sandbox --no-init--debugOutputs more logs in the CLI to assist debugging storybook sandbox --debug--disable-telemetryDisables Storybook's telemetry Learn more about it here storybook sandbox --disable-telemetry--enable-crash-reportsEnables sending crash reports to Storybook's telemetry Learn more about it here storybook sandbox --enable-crash-reports\nℹ️If you're looking for a hosted version of the available sandboxes, see\nstorybook new create-storybook\nTo streamline the process of creating a new Storybook project, a separate CLI called create-storybook is provided Package managers such as npm, pnpm, and Yarn will execute this command when running create storybook You can specify a version (e g , @latest, @8, @next) or it will default to the latest version Read more in the installation guide create storybook[@version] [options]\nFor example, create storybook@8 6 will install Storybook 8 6 into your project Options include:\nOptionDescription-h, --helpOutput usage information create storybook --help-b, --builderDefines the builder to use for your Storybook instance create storybook --builder webpack5-f, --forceForcefully installs Storybook into your project, prompting you to overwrite existing files create storybook --force-s, --skip-installSkips the dependency installation step Used only when you need to configure Storybook manually create storybook --skip-install-t, --typeDefines the framework to use for your Storybook instance create storybook --type solid-y, --yesSkips interactive prompts and automatically installs Storybook per specified version, including all features create storybook --yes--features [ values]Use these features when installing, skipping the prompt Supported values are docs and test, space separated",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 769280,
      "relative_path": "documentation\\storybook\\_docs_api_cli-options.html",
      "source_type": "documentation"
    },
    "token_count": 487,
    "chunk_index": 10,
    "total_chunks": 12
  },
  {
    "id": "439959845897c397e411cdd7c8f2f9e6",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_cli-options.html",
    "source_type": "documentation",
    "title": "CLI options | Storybook docs",
    "content": "Storybook into your project, prompting you to overwrite existing files create storybook --force-s, --skip-installSkips the dependency installation step Used only when you need to configure Storybook manually create storybook --skip-install-t, --typeDefines the framework to use for your Storybook instance create storybook --type solid-y, --yesSkips interactive prompts and automatically installs Storybook per specified version, including all features create storybook --yes--features [ values]Use these features when installing, skipping the prompt Supported values are docs and test, space separatedcreate storybook --features docs test--package-managerSets the package manager to use when installing Storybook Available package managers include npm, yarn, and pnpm create storybook --package-manager pnpm--use-pnpEnables Plug'n'Play support for Yarn This option is only available when using Yarn as your package manager create storybook --use-pnp-p, --parserSets the jscodeshift parser Available parsers include babel, babylon, flow, ts, and tsx create storybook --parser tsx--debugOutputs more logs in the CLI to assist debugging create storybook --debug--disable-telemetryDisables Storybook's telemetry Learn more about it here create storybook --disable-telemetry--enable-crash-reportsEnables sending crash reports to Storybook's telemetry Learn more about it here create storybook --enable-crash-reports--no-devComplete the initialization of Storybook without running the Storybook dev server create storybook --no-devWas this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 769280,
      "relative_path": "documentation\\storybook\\_docs_api_cli-options.html",
      "source_type": "documentation"
    },
    "token_count": 378,
    "chunk_index": 11,
    "total_chunks": 12
  },
  {
    "id": "e5b13332867daea31b8190f135fe9328",
    "source_file": "corpus\\documentation\\storybook\\_docs_builders.html",
    "source_type": "documentation",
    "title": "Builders | Storybook docs",
    "content": "Builders | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs BuildersDocs » BuildersDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQBuildersStorybook, at its core, is powered by builders such as Webpack and Vite These builders spin up a development environment, compile your code—Javascript, CSS, and MDX—into an executable bundle and update the browser in real-time CLI basics\nBefore diving into setting up Storybook's builders, let's look at how the CLI configures them When you initialize Storybook (via npx storybook@latest init), the CLI automatically detects which builder to use based on your application For example, if you're working with Vite, it will install the Vite builder If you're working with Webpack, it installs the Webpack 5 builder by default Additionally, you can also provide a flag to Storybook's CLI and specify the builder you want to use:\nnpx storybook@latest init --builder <webpack5 | vite>\nManual setup\nStorybook uses the Webpack 5 builder by default if you don't specify one If you want to use a different builder in your application, these docs detail how you can set up Storybook's supported builders Vite builder for bundling your stories with Vite with near-instant HMR",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 480312,
      "relative_path": "documentation\\storybook\\_docs_builders.html",
      "source_type": "documentation"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "9764c05873660c86893fa4e2f385d544",
    "source_file": "corpus\\documentation\\storybook\\_docs_builders.html",
    "source_type": "documentation",
    "title": "Builders | Storybook docs",
    "content": "builder by default Additionally, you can also provide a flag to Storybook's CLI and specify the builder you want to use: npx storybook@latest init --builder <webpack5 | vite> Manual setup Storybook uses the Webpack 5 builder by default if you don't specify one If you want to use a different builder in your application, these docs detail how you can set up Storybook's supported builders Vite builder for bundling your stories with Vite with near-instant HMRWebpack for bundling your stories with Webpack with improved performance\nRspack / Rsbuild for bundling your stories with blazing fast Rspack and Rsbuild Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 480312,
      "relative_path": "documentation\\storybook\\_docs_builders.html",
      "source_type": "documentation"
    },
    "token_count": 204,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "7c85ecdda805ce2bbe9c14c1415f4c62",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_parameters.html",
    "source_type": "documentation",
    "title": "Parameters | Storybook docs",
    "content": "Parameters | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » API » ParametersDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQParametersReactVueAngularWeb ComponentsMoreParameters are static metadata used to configure your stories and addons in Storybook They are specified at the story, meta (component), project (global) levels Story parameters\nParameters specified at the story level apply to that story only They are defined in the parameters property of the story (named export):\nButton stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { Button } from ' /Button';\nconst meta = {\ncomponent: Button,\n} satisfies Meta<typeof Button>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const Primary: Story = {\n// 👇 Story-level parameters\nparameters: {\nbackgrounds: {\noptions: {\nred: { name: 'Red', value: '#f00' },\ngreen: { name: 'Green', value: '#0f0' },\nblue: { name: 'Blue', value: '#00f' },\n},\n},\n},\n};\nℹ️Parameters specified at the story level will override those specified at the project level and meta (component) level",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 817072,
      "relative_path": "documentation\\storybook\\_docs_api_parameters.html",
      "source_type": "documentation"
    },
    "token_count": 503,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "6d498ca739f892d293415cd7b8686ca8",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_parameters.html",
    "source_type": "documentation",
    "title": "Parameters | Storybook docs",
    "content": "meta = { component: Button, } satisfies Meta<typeof Button>; export default meta; type Story = StoryObj<typeof meta>; export const Primary: Story = { // 👇 Story-level parameters parameters: { backgrounds: { options: { red: { name: 'Red', value: '#f00' }, green: { name: 'Green', value: '#0f0' }, blue: { name: 'Blue', value: '#00f' }, }, }, }, }; ℹ️Parameters specified at the story level will override those specified at the project level and meta (component) levelMeta parameters\nParameter's specified in a CSF file's meta configuration apply to all stories in that file They are defined in the parameters property of the meta (default export):\nButton stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { Button } from ' /Button';\nconst meta = {\ncomponent: Button,\n//👇 Creates specific parameters at the component level\nparameters: {\nbackgrounds: {\noptions: {},\n},\n},\n} satisfies Meta<typeof Button>;\nexport default meta;\nℹ️Parameters specified at the meta (component) level will override those specified at the project level Project parameters\nParameters specified at the project (global) level apply to all stories in your Storybook They are defined in the parameters property of the default export in your storybook/preview js|ts file: storybook/preview tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Preview } from '@storybook/your-framework';\nconst preview: Preview = {\nparameters: {\nbackgrounds: {\noptions: {\nlight: { name: 'Light', value: '#fff' },\ndark: { name: 'Dark', value: '#333' },\n},\n},\n},\n};\nexport default preview;\nAvailable parameters\nStorybook only accepts a few parameters directly layout\nType: 'centered' | 'fullscreen' | 'padded'\nDefault: 'padded'\nSpecifies how the canvas should lay out the story centered: Center the story within the canvas\npadded: (default) Add padding to the story\nfullscreen: Show the story as-is, without padding\noptions\nType:\n{\nstorySort",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 817072,
      "relative_path": "documentation\\storybook\\_docs_api_parameters.html",
      "source_type": "documentation"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "3ded49d9ecf29c769569016d59e6ab22",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_parameters.html",
    "source_type": "documentation",
    "title": "Parameters | Storybook docs",
    "content": "{ options: { light: { name: 'Light', value: '#fff' }, dark: { name: 'Dark', value: '#333' }, }, }, }, }; export default preview; Available parameters Storybook only accepts a few parameters directly layout Type: 'centered' | 'fullscreen' | 'padded' Default: 'padded' Specifies how the canvas should lay out the story centered: Center the story within the canvas padded: (default) Add padding to the story fullscreen: Show the story as-is, without padding options Type: { storySort: StorySortConfig | StorySortFn;\n}\n⚠️The options parameter can only be applied at the project level options storySort\nType: StorySortConfig | StorySortFn\ntype StorySortConfig = {\nincludeNames : boolean;\nlocales : string;\nmethod : 'alphabetical' | 'alphabetical-by-kind' | 'custom';\norder : string[];\n};\ntype Story = {\nid: string;\nimportPath: string;\nname: string;\ntitle: string;\n};\ntype StorySortFn = (a: Story, b: Story) => number;\nSpecifies the order in which stories are displayed in the Storybook UI When specifying a configuration object, the following options are available:\nincludeNames: Whether to include the story name in the sorting algorithm Defaults to false locales: The locale to use when sorting stories Defaults to your system locale method: The sorting method to use Defaults to alphabetical alphabetical: Sort stories alphabetically by name alphabetical-by-kind: Sort stories alphabetically by kind, then by name custom: Use a custom sorting function order: Stories in the specified order will be displayed first, in the order specified All other stories will be displayed after, in alphabetical order The order array can accept a nested array to sort 2nd-level story kinds, e g ['Intro', 'Pages', ['Home', 'Login', 'Admin'], 'Components'] When specifying a custom sorting function, the function behaves like a typical JavaScript sorting function It accepts two stories to compare and returns a number For example:\n(a, b) => (a id === b id 0 : a id localeCompare(b id, undefined, { numeric: true }));\nSee the guide for usage examples test\nType:\n{\nclearMocks : boolean;\nmockReset : boolean;\nrestoreMocks : boolean;\ndangerouslyIgnoreUnhandledErrors : boolean;\n}\nclearMocks\nType: boolean\nDefault: false\nSimilar to Vitest, it will call",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 817072,
      "relative_path": "documentation\\storybook\\_docs_api_parameters.html",
      "source_type": "documentation"
    },
    "token_count": 499,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "1cb9e6a580788a7175e91e739b5e7f9a",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_parameters.html",
    "source_type": "documentation",
    "title": "Parameters | Storybook docs",
    "content": "custom sorting function, the function behaves like a typical JavaScript sorting function It accepts two stories to compare and returns a number For example: (a, b) => (a id === b id 0 : a id localeCompare(b id, undefined, { numeric: true })); See the guide for usage examples test Type: { clearMocks : boolean; mockReset : boolean; restoreMocks : boolean; dangerouslyIgnoreUnhandledErrors : boolean; } clearMocks Type: boolean Default: false Similar to Vitest, it will callmockClear() on all spies created with fn() from storybook/test when a story unmounts This will clear mock history, but not reset its implementation to the default one mockReset\nType: boolean\nDefault: false\nSimilar to Vitest, it will call mockReset() on all spies created with fn() from storybook/test when a story unmounts This will clear mock history and reset its implementation to an empty function (will return undefined) restoreMocks\nType: boolean\nDefault: true\nSimilar to Vitest, it will call restoreMocks() on all spies created with fn() from storybook/test when a story unmounts This will clear mock history and reset its implementation to the original one dangerouslyIgnoreUnhandledErrors\nType: boolean\nDefault: false\nUnhandled errors might cause false positive assertions Setting this to true will prevent the play function from failing and showing a warning when unhandled errors are thrown during execution Essentials\nAll other parameters are contributed by features The essential feature's parameters are documented on their individual pages:\nActions\nBackgrounds\nControls\nHighlight\nMeasure & Outline\nViewport\nParameter inheritance\nNo matter where they're specified, parameters are ultimately applied to a single story Parameters specified at the project (global) level are applied to every story in that project Those specified at the meta (component) level are applied to every story associated with that meta And parameters specified for a story only apply to that story When specifying parameters, they are merged together in order of increasing specificity:\nProject (global) parameters\nMeta (component) parameters\nStory parameters\nℹ️Parameters are merged, so objects are deep-merged, but arrays and other properties are overwritten In other words, the following specifications of parameters: storybook/preview",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 817072,
      "relative_path": "documentation\\storybook\\_docs_api_parameters.html",
      "source_type": "documentation"
    },
    "token_count": 456,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "16dd7ae926b92f0bf2f1ef7d48150417",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_parameters.html",
    "source_type": "documentation",
    "title": "Parameters | Storybook docs",
    "content": "to every story in that project Those specified at the meta (component) level are applied to every story associated with that meta And parameters specified for a story only apply to that story When specifying parameters, they are merged together in order of increasing specificity: Project (global) parameters Meta (component) parameters Story parameters ℹ️Parameters are merged, so objects are deep-merged, but arrays and other properties are overwritten In other words, the following specifications of parameters: storybook/previewjs|ts const preview = {\n// 👇 Project-level parameters\nparameters: {\nlayout: 'centered',\ndemo: {\ndemoProperty: 'a',\ndemoArray: [1, 2],\n},\n},\n// };\nexport default preview;\nDialog stories js|ts const meta = {\ncomponent: Dialog,\n// 👇 Meta-level parameters\nparameters: {\nlayout: 'fullscreen',\ndemo: {\ndemoProperty: 'b',\nanotherDemoProperty: 'b',\n},\n},\n};\nexport default meta;\n// (no additional parameters specified)\nexport const Basic = {};\nexport const LargeScreen = {\n// 👇 Story-level parameters\nparameters: {\nlayout: 'padded',\ndemo: {\ndemoArray: [3, 4],\n},\n},\n};\nWill result in the following parameter values applied to each story:\n// Applied story parameters\n// For the Basic story:\n{\nlayout: 'fullscreen',\ndemo: {\ndemoProperty: 'b',\nanotherDemoProperty: 'b',\ndemoArray: [1, 2],\n},\n}\n// For the LargeScreen story:\n{\nlayout: 'padded',\ndemo: {\ndemoProperty: 'b',\nanotherDemoProperty: 'b',\ndemoArray: [3, 4],\n},\n}Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 817072,
      "relative_path": "documentation\\storybook\\_docs_api_parameters.html",
      "source_type": "documentation"
    },
    "token_count": 412,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "45163bbfac15cfe670631b6ecadbd09c",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_new-frameworks.html",
    "source_type": "documentation",
    "title": "Frameworks | Storybook docs",
    "content": "Frameworks | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » API » FrameworksDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQFrameworksReactVueAngularWeb ComponentsMoreStorybook is architected to support diverse web frameworks, including React, Vue, Angular, Web Components, Svelte, and over a dozen others This guide helps you get started on adding new framework support for Storybook Scaffolding a new framework\nThe first thing to do is to scaffold your framework support in its own repo We recommend adopting the same project structure as the Storybook monorepo That structure contains the framework package (app/<framework>) and an example app (examples/<framework>-kitchen-sink) as well as other associated documentation and configuration as needed It may seem like a little more hierarchy than what’s necessary But because the structure mirrors the way Storybook’s monorepo is structured, you can reuse Storybook’s tooling It also makes it easier to move the framework into the Storybook monorepo later if that is desirable We recommend using @storybook/html as a starter framework since it’s the simplest and contains no framework-specific peculiarities There is a boilerplate to get you started here Framework architecture\nSupporting a new framework in Storybook typically consists of two main aspects:\nConfiguring the server",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 621447,
      "relative_path": "documentation\\storybook\\_docs_api_new-frameworks.html",
      "source_type": "documentation"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "2bee22d422d8d176746f843f53f393b3",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_new-frameworks.html",
    "source_type": "documentation",
    "title": "Frameworks | Storybook docs",
    "content": "because the structure mirrors the way Storybook’s monorepo is structured, you can reuse Storybook’s tooling It also makes it easier to move the framework into the Storybook monorepo later if that is desirable We recommend using @storybook/html as a starter framework since it’s the simplest and contains no framework-specific peculiarities There is a boilerplate to get you started here Framework architecture Supporting a new framework in Storybook typically consists of two main aspects: Configuring the serverIn Storybook, the server is the node process that runs when you run storybook dev or storybook build Configuring the server typically means configuring babel and webpack in framework-specific ways Configuring the client The client is the code that runs in the browser, and configuring it, means providing a framework-specific story rendering function Configuring the server\nStorybook has the concept of presets, which are typically babel/webpack configurations for file loading If your framework has its own file format (e g , “ vue”), you might need to transform them into JavaScript files at load time If you assume every user of your framework needs this, you should add it to the framework So far, every framework added to Storybook has done it because Storybook’s core configuration is extremely minimal Package structure\nIt's helpful to understand Storybook's package structure before adding a framework preset Each framework typically exposes two executables in its package json:\npackage json {\n\"bin\": {\n\"storybook\": \" /bin/index js\",\n\"build-storybook\": \" /bin/build js\"\n}\n}\nThese scripts pass an options object to storybook/internal/server, a library that abstracts all of Storybook’s framework-independent code For example, here’s the boilerplate to start the dev server with storybook dev:\nyour-framework/src/server/index tsimport { buildDev } from '@storybook/core/server';\nimport options from ' /options';\nbuildDev(options);\nThus the essence of adding framework presets is just filling in that options object Server options\nAs described above, the server options object does the heavy lifting of configuring the server Let’s look at the @storybook/vue’s options definition:\nvue/src/server/options tsimport { sync } from 'read-pkg-up';\nexport default {\npackageJson: sync({ cwd: __dirname }) packageJson,\nframework: 'vue',\nframeworkPresets: [require resolve(' /framework-preset-vue js')],\n};\nThe value of the framework option (i e",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 621447,
      "relative_path": "documentation\\storybook\\_docs_api_new-frameworks.html",
      "source_type": "documentation"
    },
    "token_count": 486,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "d13e82128dda3881b366fabcbb27c2ca",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_new-frameworks.html",
    "source_type": "documentation",
    "title": "Frameworks | Storybook docs",
    "content": "import options from ' /options'; buildDev(options); Thus the essence of adding framework presets is just filling in that options object Server options As described above, the server options object does the heavy lifting of configuring the server Let’s look at the @storybook/vue’s options definition: vue/src/server/options tsimport { sync } from 'read-pkg-up'; export default { packageJson: sync({ cwd: __dirname }) packageJson, framework: 'vue', frameworkPresets: [require resolve(' /framework-preset-vue js')], }; The value of the framework option (i e, ‘vue’) is something that gets passed to addons and allows them to do specific tasks related to your framework The essence of this file is the framework presets, and these are standard Storybook presets -- you can look at framework packages in the Storybook monorepo (e g React, Vue, Web Components) to see examples of framework-specific customizations While developing your custom framework, not maintained by Storybook, you can specify the path to the location file with the frameworkPath key:\nmy-framework/src/server/options tsimport { sync } from 'read-pkg-up';\nexport default {\npackageJson: sync({ cwd: __dirname }) packageJson,\nframework: 'my-framework',\nframeworkPath: '@my-framework/storybook',\nframeworkPresets: [require resolve(' /framework-preset-my-framework js')],\n};\nYou can add a relative path to frameworkPath Don't forget that they resolve from the Storybook configuration directory (i e , storybook) by default Make sure the frameworkPath ends up at the dist/client/index js file within your framework app Configuring the client\nTo configure the client, you must provide a framework-specific render function Before diving into the details, it’s essential to understand how user-written stories relate to what renders on the screen Renderable objects\nStorybook stories are ES6 objects that return a “renderable object ”\nConsider the following React story:\nButton stories js|jsximport { Button } from ' /Button';\nexport default {\ncomponent: Button,\n};\nexport const Sample = {\nrender: () => <Button label=\"hello button\" />,\n};\nIn this case, the renderable object is the React element, <Button /> In most other frameworks, the renderable object is actually a plain JavaScript object Consider the following hypothetical example:\nButton stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 621447,
      "relative_path": "documentation\\storybook\\_docs_api_new-frameworks.html",
      "source_type": "documentation"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "9d48e499b156ffb01aee06ce66e79784",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_new-frameworks.html",
    "source_type": "documentation",
    "title": "Frameworks | Storybook docs",
    "content": "Consider the following React story: Button stories js|jsximport { Button } from ' /Button'; export default { component: Button, }; export const Sample = { render: () => <Button label=\"hello button\" />, }; In this case, the renderable object is the React element, <Button /> In most other frameworks, the renderable object is actually a plain JavaScript object Consider the following hypothetical example: Button stories ts|tsxTypescript// Replace your-framework with the framework you are using, e greact-vite, nextjs, vue3-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { Button } from ' /Button';\nconst meta = {\ncomponent: Button,\n} satisfies Meta<typeof Button>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const Sample: Story = {\nrender: () => ({\ntemplate: '<button :label=label />',\ndata: {\nlabel: 'hello button',\n},\n}),\n};\nThe design of this “renderable object” is framework-specific and should ideally match the idioms of that framework Render function\nThe framework's render function is the entity responsible for converting the renderable object into DOM nodes It is typically of the form:\nyour-framework/src/client/preview/render tsconst rootElement = document getElementById('root');\nexport default function renderMain({ storyFn }: RenderMainArgs) {\nconst storyObj = storyFn();\nconst html = fn(storyObj);\nrootElement innerHTML = html;\n}\nPackage structure\nOn the client side, the key file is src/client/preview js:\nyour-framework/src/client/preview/index tsimport { start } from 'storybook/preview-api';\nimport ' /globals';\nimport render from ' /render';\nconst api = start(render);\n// the boilerplate code\nThe globals file typically sets up a single global variable that client-side code (such as addon-provided decorators) can refer to if needed to understand which framework it's running in:\nvue/src/client/preview/globals tsimport { global } from '@storybook/global';\nconst { window: globalWindow } = global;\nglobalWindow STORYBOOK_ENV = 'vue';\nThe start function abstracts all of Storybook’s framework-independent client-side (browser) code, and it takes the render function we defined above For examples of render functions, see React, Vue, Angular, and Web Components in the Storybook monorepo Was this page useful",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 621447,
      "relative_path": "documentation\\storybook\\_docs_api_new-frameworks.html",
      "source_type": "documentation"
    },
    "token_count": 492,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "8ab76d0d5be4861346520374afa594d0",
    "source_file": "corpus\\documentation\\storybook\\_docs_api_new-frameworks.html",
    "source_type": "documentation",
    "title": "Frameworks | Storybook docs",
    "content": "client-side code (such as addon-provided decorators) can refer to if needed to understand which framework it's running in: vue/src/client/preview/globals tsimport { global } from '@storybook/global'; const { window: globalWindow } = global; globalWindow STORYBOOK_ENV = 'vue'; The start function abstracts all of Storybook’s framework-independent client-side (browser) code, and it takes the render function we defined above For examples of render functions, see React, Vue, Angular, and Web Components in the Storybook monorepo Was this page useful👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 621447,
      "relative_path": "documentation\\storybook\\_docs_api_new-frameworks.html",
      "source_type": "documentation"
    },
    "token_count": 183,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "8e3cf0e2ca7c477883cf4451c7e211e0",
    "source_file": "corpus\\documentation\\storybook\\_docs_builders_builder-api.html",
    "source_type": "documentation",
    "title": "Builder API | Storybook docs",
    "content": "Builder API | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Builders » APIDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQBuilder APIReactVueAngularWeb ComponentsMoreStorybook is architected to support multiple builders, including Webpack, Vite, and ESBuild The builder API is the set of interfaces you can use to add a new builder to Storybook How do builders work In Storybook, a builder is responsible for compiling your components and stories into JS bundles that run in the browser A builder also provides a development server for interactive development and a production mode for optimized bundles To opt into a builder, the user must add it as a dependency and then edit their configuration file ( storybook/main js) to enable it For example, with the Vite builder:\nnpmnpm install @storybook/builder-vite --save-dev storybook/main js|tsexport default {\nstories: [' /src/**/* mdx', ' /stories/**/* stories @(js|jsx|mjs|ts|tsx)'],\naddons: ['@storybook/addon-docs'],\ncore: {\nbuilder: '@storybook/builder-vite', // 👈 The builder enabled here",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 747293,
      "relative_path": "documentation\\storybook\\_docs_builders_builder-api.html",
      "source_type": "documentation"
    },
    "token_count": 468,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "a5d821c16178f3ab0f3e0086f5ca74f7",
    "source_file": "corpus\\documentation\\storybook\\_docs_builders_builder-api.html",
    "source_type": "documentation",
    "title": "Builder API | Storybook docs",
    "content": "A builder also provides a development server for interactive development and a production mode for optimized bundles To opt into a builder, the user must add it as a dependency and then edit their configuration file ( storybook/main js) to enable it For example, with the Vite builder: npmnpm install @storybook/builder-vite --save-dev storybook/main js|tsexport default { stories: [' /src/**/* mdx', ' /stories/**/* stories @(js|jsx|mjs|ts|tsx)'], addons: ['@storybook/addon-docs'], core: { builder: '@storybook/builder-vite', // 👈 The builder enabled here},\n};\nBuilder API\nIn Storybook, every builder must implement the following API, exposing the following configuration options and entry points:\nexport interface Builder<Config, Stats> {\nstart: (args: {\noptions: Options;\nstartTime: ReturnType<typeof process hrtime>;\nrouter: Router;\nserver: Server;\n}) => Promise<void | {\nstats : Stats;\ntotalTime: ReturnType<typeof process hrtime>;\nbail: (e : Error) => Promise<void>;\n}>;\nbuild: (arg: {\noptions: Options;\nstartTime: ReturnType<typeof process hrtime>;\n}) => Promise<void | Stats>;\nbail: (e : Error) => Promise<void>;\ngetConfig: (options: Options) => Promise<Config>;\ncorePresets : string[];\noverridePresets : string[];\n}\nIn development mode, the start API call is responsible for initializing the development server to monitor the file system for changes (for example, components and stories) then execute a hot module reload in the browser It also provides a bail function to allow the running process to end gracefully, either via user input or error In production, the build API call is responsible for generating a static Storybook build, storing it by default in the storybook-static directory if no additional configuration is provided The generated output should contain everything the user needs to view its Storybook by opening either the index html or iframe html in a browser with no other processes running Implementation\nUnder the hood, a builder is responsible for serving/building the preview iframe, which has its own set of requirements To fully support Storybook, including the essential features that ship with Storybook, it must consider the following Import stories\nThe stories configuration field enables story loading in Storybook It defines an array of file globs containing the physical location of the component's stories",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 747293,
      "relative_path": "documentation\\storybook\\_docs_builders_builder-api.html",
      "source_type": "documentation"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "92c3c7a757032ea4ee732e6448da71d9",
    "source_file": "corpus\\documentation\\storybook\\_docs_builders_builder-api.html",
    "source_type": "documentation",
    "title": "Builder API | Storybook docs",
    "content": "index html or iframe html in a browser with no other processes running Implementation Under the hood, a builder is responsible for serving/building the preview iframe, which has its own set of requirements To fully support Storybook, including the essential features that ship with Storybook, it must consider the following Import stories The stories configuration field enables story loading in Storybook It defines an array of file globs containing the physical location of the component's storiesThe builder must be able to load those files and monitor them for changes and update the UI accordingly Provide configuration options\nBy default, Storybook's configuration is handled in a dedicated file (storybook/main js|ts), giving the user the option to customize it to suit its needs The builder should also provide its own configuration support through additional fields or some other builder-appropriate mechanism For example:\nvite-server tsimport { stringifyProcessEnvs } from ' /envs';\nimport { getOptimizeDeps } from ' /optimizeDeps';\nimport { commonConfig } from ' /vite-config';\nimport type { EnvsRaw, ExtendedOptions } from ' /types';\nexport async function createViteServer(options: ExtendedOptions, devServer: Server) {\nconst { port, presets } = options;\n// Defines the baseline config const baseConfig = await commonConfig(options, 'development');\nconst defaultConfig = { baseConfig,\nserver: {\nmiddlewareMode: true,\nhmr: {\nport,\nserver: devServer,\n},\nfs: {\nstrict: true,\n},\n},\noptimizeDeps: await getOptimizeDeps(baseConfig, options),\n};\nconst finalConfig = await presets apply('viteFinal', defaultConfig, options);\nconst envsRaw = await presets apply<Promise<EnvsRaw>>('env');\n// Remainder implementation\n}\nHandle preview js exports\nThe preview js configuration file allows users to control how the story renders in the UI This is provided via the decorators named export When Storybook starts, it converts these named exports into internal API calls via virtual module entry, for example, addDecorator() The builder must also provide a similar implementation For example:\nimport { virtualPreviewFile, virtualStoriesFile } from ' /virtual-file-names';\nimport { transformAbsPath } from ' /utils/transform-abs-path';\nimport type { ExtendedOptions } from '",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 747293,
      "relative_path": "documentation\\storybook\\_docs_builders_builder-api.html",
      "source_type": "documentation"
    },
    "token_count": 466,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "6059332cb95ef3f7ba4fa5162f5bf0d7",
    "source_file": "corpus\\documentation\\storybook\\_docs_builders_builder-api.html",
    "source_type": "documentation",
    "title": "Builder API | Storybook docs",
    "content": "exports The preview js configuration file allows users to control how the story renders in the UI This is provided via the decorators named export When Storybook starts, it converts these named exports into internal API calls via virtual module entry, for example, addDecorator() The builder must also provide a similar implementation For example: import { virtualPreviewFile, virtualStoriesFile } from ' /virtual-file-names'; import { transformAbsPath } from ' /utils/transform-abs-path'; import type { ExtendedOptions } from '/types';\nexport async function generateIframeScriptCode(options: ExtendedOptions) {\nconst { presets, frameworkPath, framework } = options;\nconst frameworkImportPath = frameworkPath || `@storybook/${framework}`;\nconst presetEntries = await presets apply('config', [], options);\nconst configEntries = [ presetEntries] filter(Boolean);\nconst absoluteFilesToImport = (files: string[], name: string) =>\nfiles map((el, i) => `import ${name `* as ${name}_${i} from ` : ''}'${transformAbsPath(el)}'`) join('\\n');\nconst importArray = (name: string, length: number) =>\nnew Array(length) fill(0) map((_, i) => `${name}_${i}`);\nconst code = `\n// Ensure that the client API is initialized by the framework before any other iframe code\n// is loaded That way our client-apis can assume the existence of the API+store\nimport { configure } from '${frameworkImportPath}';\nimport {\naddDecorator,\naddParameters,\naddArgTypesEnhancer,\naddArgsEnhancer,\nsetGlobalRender\n} from 'storybook/preview-api';\nimport { logger } from 'storybook/internal/client-logger';\n${absoluteFilesToImport(configEntries, 'config')}\nimport * as preview from '${virtualPreviewFile}';\nimport { configStories } from '${virtualStoriesFile}';\nconst configs = [${importArray('config', configEntries length) concat('preview default') join(',')}] filter(Boolean)\nconfigs forEach(config => {\nObject keys(config) forEach((key) => {\nconst value = config[key];\nswitch (key) {\ncase 'args':\ncase 'argTypes': {\nreturn logger warn('Invalid args/argTypes in config, ignoring ', JSON stringify(value));\n}\ncase 'decorators': {\nreturn value forEach((decorator) => addDecorator(decorator, false));\n}\ncase 'parameters': {\nreturn addParameters({",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 747293,
      "relative_path": "documentation\\storybook\\_docs_builders_builder-api.html",
      "source_type": "documentation"
    },
    "token_count": 489,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "f856583e30c3f05249bdf8859c1d878b",
    "source_file": "corpus\\documentation\\storybook\\_docs_builders_builder-api.html",
    "source_type": "documentation",
    "title": "Builder API | Storybook docs",
    "content": "{ logger } from 'storybook/internal/client-logger'; ${absoluteFilesToImport(configEntries, 'config')} import * as preview from '${virtualPreviewFile}'; import { configStories } from '${virtualStoriesFile}'; const configs = [${importArray('config', configEntries length) concat('preview default') join(',')}] filter(Boolean) configs forEach(config => { Object keys(config) forEach((key) => { const value = config[key]; switch (key) { case 'args': case 'argTypes': { return logger warn('Invalid args/argTypes in config, ignoring ', JSON stringify(value)); } case 'decorators': { return value forEach((decorator) => addDecorator(decorator, false)); } case 'parameters': { return addParameters({value }, false);\n}\ncase 'render': {\nreturn setGlobalRender(value)\n}\ncase 'globals':\ncase 'globalTypes': {\nconst v = {};\nv[key] = value;\nreturn addParameters(v, false);\n}\ncase 'decorateStory':\ncase 'renderToCanvas': {\nreturn null;\n}\ndefault: {\n// eslint-disable-next-line prefer-template\nreturn console log(key + ' was not supported :( ');\n}\n}\n});\n})\nconfigStories(configure);\n` trim();\nreturn code;\n}\nMDX support\nStorybook's Docs includes the ability to author stories/documentation in MDX using a Webpack loader The builder must also know how to interpret MDX and invoke Storybook's special extensions For example:\nmdx-plugin tsimport mdx from 'vite-plugin-mdx';\nimport { createCompiler } from 'storybook/internal/csf-tools/mdx';\nexport function mdxPlugin() {\nreturn mdx((filename) => {\nconst compilers = [];\nif (filename endsWith('stories mdx') || filename endsWith('story mdx')) {\ncompilers push(createCompiler({}));\n}\nreturn {\ncompilers,\n};\n});\n}\nGenerate source code snippets\nStorybook annotates components and stories with additional metadata related to their inputs to automatically generate interactive controls and documentation Currently, this is provided via Webpack loaders/plugins The builder must re-implement this to support those features Generate a static build\nOne of Storybook's core features it's the ability to generate a static build that can be published to a web hosting service The builder must also be able to provide a similar mechanism For example:\nbuild tsimport { build as viteBuild } from 'vite';\nimport { stringifyProcessEnvs } from '",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 747293,
      "relative_path": "documentation\\storybook\\_docs_builders_builder-api.html",
      "source_type": "documentation"
    },
    "token_count": 497,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "aa8d731a45b400df953126fbb0a6ed49",
    "source_file": "corpus\\documentation\\storybook\\_docs_builders_builder-api.html",
    "source_type": "documentation",
    "title": "Builder API | Storybook docs",
    "content": "automatically generate interactive controls and documentation Currently, this is provided via Webpack loaders/plugins The builder must re-implement this to support those features Generate a static build One of Storybook's core features it's the ability to generate a static build that can be published to a web hosting service The builder must also be able to provide a similar mechanism For example: build tsimport { build as viteBuild } from 'vite'; import { stringifyProcessEnvs } from '/envs';\nimport { commonConfig } from ' /vite-config';\nimport type { EnvsRaw, ExtendedOptions } from ' /types';\nexport async function build(options: ExtendedOptions) {\nconst { presets } = options;\nconst baseConfig = await commonConfig(options, 'build');\nconst config = { baseConfig,\nbuild: {\noutDir: options outputDir,\nemptyOutDir: false,\nsourcemap: true,\n},\n};\nconst finalConfig = await presets apply('viteFinal', config, options);\nconst envsRaw = await presets apply<Promise<EnvsRaw>>('env');\n// Stringify env variables after getting `envPrefix` from the final config\nconst envs = stringifyProcessEnvs(envsRaw, finalConfig envPrefix);\n// Update `define`\nfinalConfig define = { finalConfig define, envs,\n};\nawait viteBuild(finalConfig);\n}\nDevelopment server integration\nBy default, when Storybook starts in development mode, it relies on its internal development server The builder needs to be able to integrate with it For example:\nserver tsimport { createServer } from 'vite';\nexport async function createViteServer(options: ExtendedOptions, devServer: Server) {\nconst { port } = options;\n// Remainder server configuration\n// Creates the server return createServer({\n// The server configuration goes here\nserver: {\nmiddlewareMode: true,\nhmr: {\nport,\nserver: devServer,\n},\n},\n});\n}\nShutdown the development server\nThe builder must provide a way to stop the development server once the process terminates; this can be via user input or error For example:\nindex tsimport { createViteServer } from ' /vite-server';\nlet server: ViteDevServer;\nexport async function bail(): Promise<void> {\nreturn server",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 747293,
      "relative_path": "documentation\\storybook\\_docs_builders_builder-api.html",
      "source_type": "documentation"
    },
    "token_count": 460,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "52be9876ea392ed6598fc560230e0705",
    "source_file": "corpus\\documentation\\storybook\\_docs_builders_builder-api.html",
    "source_type": "documentation",
    "title": "Builder API | Storybook docs",
    "content": "Remainder server configuration // Creates the server return createServer({ // The server configuration goes here server: { middlewareMode: true, hmr: { port, server: devServer, }, }, }); } Shutdown the development server The builder must provide a way to stop the development server once the process terminates; this can be via user input or error For example: index tsimport { createViteServer } from ' /vite-server'; let server: ViteDevServer; export async function bail(): Promise<void> { return serverclose();\n}\nexport const start: ViteBuilder['start'] = async ({ options, server: devServer }) => {\n// Remainder implementation goes here\nserver = await createViteServer(options as ExtendedOptions, devServer);\nreturn {\nbail,\ntotalTime: process hrtime(startTime),\n};\n};\nHMR support\nWhile running in development mode, the builder's development server must be able to reload the page once a change happens, either in a story, component, or helper function More information\nThis area is under rapid development, and the associated documentation is still in progress and subject to change If you are interested in creating a builder, you can learn more about implementing a builder in Storybook by checking the source code for Vite, Webpack, or Modern Web's dev-server-storybook When you're ready, open an RFC to discuss your proposal with the Storybook community and maintainers Learn more about builders\nVite builder for bundling with Vite\nWebpack builder for bundling with Webpack\nBuilder API for building a Storybook builder\nWas this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 747293,
      "relative_path": "documentation\\storybook\\_docs_builders_builder-api.html",
      "source_type": "documentation"
    },
    "token_count": 392,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "6c3380a5e2d0bda8c097e0ff482733f2",
    "source_file": "corpus\\documentation\\storybook\\_docs_builders_vite.html",
    "source_type": "documentation",
    "title": "Vite | Storybook docs",
    "content": "Vite | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Builders » ViteDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQViteReactVueAngularWeb ComponentsMoreStorybook Vite builder bundles your components and stories with Vite, a fast ESM bundler For applications built with Vite: it allows reusing the existing configuration in Storybook For applications built with Webpack: it provides faster startup and refresh times, with the disadvantage that your component's execution environment differs from your application Setup\nIf you ran npx storybook@latest init to include Storybook in your Vite application, the builder is already installed and configured for you If you want, you can also opt into it manually Run the following command to install the builder npmnpm install @storybook/builder-vite --save-dev\nUpdate your Storybook configuration (in storybook/main js|ts) to include the builder storybook/main js|tsexport default {\nstories: [' /src/**/* mdx', ' /stories/**/* stories @(js|jsx|mjs|ts|tsx)'],\naddons: ['@storybook/addon-docs'],\ncore: {\nbuilder: '@storybook/builder-vite', // 👈 The builder enabled here",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 667726,
      "relative_path": "documentation\\storybook\\_docs_builders_vite.html",
      "source_type": "documentation"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "3a4835b32015ca82142cc97f08e11d90",
    "source_file": "corpus\\documentation\\storybook\\_docs_builders_vite.html",
    "source_type": "documentation",
    "title": "Vite | Storybook docs",
    "content": "npx storybook@latest init to include Storybook in your Vite application, the builder is already installed and configured for you If you want, you can also opt into it manually Run the following command to install the builder npmnpm install @storybook/builder-vite --save-dev Update your Storybook configuration (in storybook/main js|ts) to include the builder storybook/main js|tsexport default { stories: [' /src/**/* mdx', ' /stories/**/* stories @(js|jsx|mjs|ts|tsx)'], addons: ['@storybook/addon-docs'], core: { builder: '@storybook/builder-vite', // 👈 The builder enabled here},\n};\nConfiguration\nOut of the box, Storybook's Vite builder includes a set of configuration defaults for the supported frameworks, which are merged alongside your existing configuration file For an optimal experience when using the Vite builder, we recommend applying any configuration directly inside Vite's configuration file (i e , vite config js|ts) When Storybook loads, it automatically merges the configuration into its own However, since different projects may have specific requirements, you may need to provide a custom configuration for Storybook In such cases, you can modify your configuration file ( storybook/main js|ts) and add the viteFinal configuration function as follows: storybook/main js|tsexport default {\n// Replace your-framework with the framework you are using, e g react-vite, nextjs-vite, vue3-vite, etc framework: '@storybook/your-framework',\nstories: [' /src/**/* mdx', ' /stories/**/* stories @(js|jsx|mjs|ts|tsx)'],\naddons: ['@storybook/addon-docs'],\ncore: {\nbuilder: '@storybook/builder-vite',\n},\nasync viteFinal(config) {\n// Merge custom configuration into the default config\nconst { mergeConfig } = await import('vite');\nreturn mergeConfig(config, {\n// Add dependencies to pre-optimization\noptimizeDeps: {\ninclude: ['storybook-dark-mode'],\n},\n});\n},\n};\nThe asynchronous function viteFinal receives a config object with the default builder configuration and returns the updated configuration Environment-based configuration\nIf you need to customize the builder's configuration and apply specific options based on your environment, extend the viteFinal function as follows: storybook/main js|tsexport default {\n// Replace your-framework with the framework you are using, e g",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 667726,
      "relative_path": "documentation\\storybook\\_docs_builders_vite.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "c33219a2266804bcc7807b6dfb530788",
    "source_file": "corpus\\documentation\\storybook\\_docs_builders_vite.html",
    "source_type": "documentation",
    "title": "Vite | Storybook docs",
    "content": "= await import('vite'); return mergeConfig(config, { // Add dependencies to pre-optimization optimizeDeps: { include: ['storybook-dark-mode'], }, }); }, }; The asynchronous function viteFinal receives a config object with the default builder configuration and returns the updated configuration Environment-based configuration If you need to customize the builder's configuration and apply specific options based on your environment, extend the viteFinal function as follows: storybook/main js|tsexport default { // Replace your-framework with the framework you are using, e greact-vite, nextjs-vite, vue3-vite, etc framework: '@storybook/your-framework',\nstories: [' /src/**/* mdx', ' /stories/**/* stories @(js|jsx|mjs|ts|tsx)'],\ncore: {\nbuilder: '@storybook/builder-vite',\n},\nasync viteFinal(config, { configType }) {\nconst { mergeConfig } = await import('vite');\nif (configType === 'DEVELOPMENT') {\n// Your development configuration goes here\n}\nif (configType === 'PRODUCTION') {\n// Your production configuration goes here }\nreturn mergeConfig(config, {\n// Your environment configuration here\n});\n},\n};\nOverride the default configuration\nBy default, the Vite builder in Storybook searches for the Vite configuration file in the root directory of your Storybook project However, you can customize it to look for the configuration file in a different location For example: storybook/main js|tsexport default {\nstories: [' /src/**/* mdx', ' /src/**/* stories @(js|jsx|mjs|ts|tsx)'],\ncore: {\nbuilder: {\nname: '@storybook/builder-vite',\noptions: {\nviteConfigPath: ' /customVite config js',\n},\n},\n},\n};\n💡If you do not want Storybook to load the Vite configuration file automatically, you can use the viteConfigPath option to point to a non-existent file TypeScript\nIf you need, you can also configure Storybook's Vite builder using TypeScript Rename your storybook/main js to storybook/main ts and adjust it as follows: storybook/main ts// Replace your-framework with the framework you are using, e g react-vite, nextjs-vite, vue3-vite, etc import type { StorybookConfig } from '@storybook/your-framework';\nconst config: StorybookConfig = {\nframework: '@storybook/your-framework',\nstories: [' /src/**/* mdx', '",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 667726,
      "relative_path": "documentation\\storybook\\_docs_builders_vite.html",
      "source_type": "documentation"
    },
    "token_count": 507,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "77d068697e881d5466ff79d11dff5069",
    "source_file": "corpus\\documentation\\storybook\\_docs_builders_vite.html",
    "source_type": "documentation",
    "title": "Vite | Storybook docs",
    "content": "Vite configuration file automatically, you can use the viteConfigPath option to point to a non-existent file TypeScript If you need, you can also configure Storybook's Vite builder using TypeScript Rename your storybook/main js to storybook/main ts and adjust it as follows: storybook/main ts// Replace your-framework with the framework you are using, e g react-vite, nextjs-vite, vue3-vite, etc import type { StorybookConfig } from '@storybook/your-framework'; const config: StorybookConfig = { framework: '@storybook/your-framework', stories: [' /src/**/* mdx', '/src/**/* stories @(js|jsx|mjs|ts|tsx)'],\nasync viteFinal(config, options) {\n// Add your configuration here\nreturn config;\n},\n};\nexport default config;\nTroubleshooting\nMigrating from Webpack\nVite generally handles more use cases out of the box than Webpack For example, loading styles just works for most projects So, when migrating a Webpack-based project to Vite, you may find that you don't need all of your previous configuration We recommend starting with no Storybook-specific Vite configuration and only adding what you determine your project actually requires For reference, here is a Webpack configuration to handle loading graphql queries and its equivalent, using a plugin, in Vite:\nWith WebpackWith Vite storybook/main tsTypescript// Replace your-framework with the framework you are using (e g , react-webpack5, nextjs, angular)\nimport type { StorybookConfig } from '@storybook/your-framework';\nconst config: StorybookConfig = {\nframework: '@storybook/your-framework',\nstories: [' /src/**/* mdx', ' /stories/**/* stories @(js|jsx|mjs|ts|tsx)'],\nasync webpackFinal(config) {\nconfig module rules push({\ntest: /\\ (graphql|gql)$/,\ninclude: [path resolve(' /lib/emails')],\nexclude: /node_modules/,\nloader: 'graphql-tag/loader',\n});\nconfig module rules push({\ntest: /\\ (graphql|gql)$/,\ninclude: [path resolve(' /lib/schema')],\nexclude: /node_modules/,\nloader: 'raw-loader',\n});\nreturn config;\n},\n};\nexport default config;\nWorking directory not being detected\nBy default, the Vite builder enables Vite's server fs strict option for increased security, defining the project's root to Storybook's configuration directory",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 667726,
      "relative_path": "documentation\\storybook\\_docs_builders_vite.html",
      "source_type": "documentation"
    },
    "token_count": 495,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "40ac99a2a0a38db4645b3051951ac8c0",
    "source_file": "corpus\\documentation\\storybook\\_docs_builders_vite.html",
    "source_type": "documentation",
    "title": "Vite | Storybook docs",
    "content": "[' /src/**/* mdx', ' /stories/**/* stories @(js|jsx|mjs|ts|tsx)'], async webpackFinal(config) { config module rules push({ test: /\\ (graphql|gql)$/, include: [path resolve(' /lib/emails')], exclude: /node_modules/, loader: 'graphql-tag/loader', }); config module rules push({ test: /\\ (graphql|gql)$/, include: [path resolve(' /lib/schema')], exclude: /node_modules/, loader: 'raw-loader', }); return config; }, }; export default config; Working directory not being detected By default, the Vite builder enables Vite's server fs strict option for increased security, defining the project's root to Storybook's configuration directoryIf you need to override it, you can use the viteFinal function and adjust it ArgTypes are not generated automatically\nCurrently, automatic argType inference is only available for React, Vue 3, and Svelte (JSDocs only) With React, the Vite builder defaults to react-docgen, a faster alternative to react-docgen-typescript for parsing React components If you run into any issues, you can revert to react-docgen-typescript by updating your Storybook configuration file as follows: storybook/main js|tsexport default {\nstories: [' /src/**/* mdx', ' /stories/**/* stories @(js|jsx|mjs|ts|tsx)'],\naddons: ['@storybook/addon-docs'],\ncore: {\nbuilder: '@storybook/builder-vite',\n},\ntypescript: {\n// Enables the `react-docgen-typescript` parser // See https://storybook js org/docs/api/main-config/main-config-typescript for more information about this option reactDocgen: 'react-docgen-typescript',\n},\n};\nInteraction tests not working as expected\nIf you are migrating from a Webpack-based project, such as CRA, to Vite, and you are interaction testing, you may run into a situation where your tests fail to execute notifying you that the window object is not defined To resolve this issue, you can create a preview-head html file in your Storybook configuration directory and include the following: storybook/preview-head html<script>\nwindow global = window;\n</script>\nLearn more about builders\nVite builder for bundling with Vite\nWebpack builder for bundling with Webpack\nBuilder API for building a Storybook builder\nWas this page useful",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 667726,
      "relative_path": "documentation\\storybook\\_docs_builders_vite.html",
      "source_type": "documentation"
    },
    "token_count": 495,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "adc30caedf56edbb5f613a4d0c55408d",
    "source_file": "corpus\\documentation\\storybook\\_docs_builders_vite.html",
    "source_type": "documentation",
    "title": "Vite | Storybook docs",
    "content": "testing, you may run into a situation where your tests fail to execute notifying you that the window object is not defined To resolve this issue, you can create a preview-head html file in your Storybook configuration directory and include the following: storybook/preview-head html<script> window global = window; </script> Learn more about builders Vite builder for bundling with Vite Webpack builder for bundling with Webpack Builder API for building a Storybook builder Was this page useful👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 667726,
      "relative_path": "documentation\\storybook\\_docs_builders_vite.html",
      "source_type": "documentation"
    },
    "token_count": 164,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "d9189991fba2a0080e33b74c55c9979f",
    "source_file": "corpus\\documentation\\storybook\\_docs_builders_webpack.html",
    "source_type": "documentation",
    "title": "Webpack | Storybook docs",
    "content": "Webpack | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Builders » WebpackDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQWebpackReactVueAngularWeb ComponentsMoreStorybook Webpack builder is the default builder for Storybook This builder enables you to create a seamless development and testing experience for your components and provides an efficient way to develop UI components in isolation allowing you to leverage your existing Webpack configuration with Storybook Configure\nBy default, Storybook provides zero-config support for Webpack and automatically sets up a baseline configuration created to work with the most common use cases However, you can extend your Storybook configuration file (i e , storybook/main js|ts) and provide additional options to improve your Storybook's performance or customize it to your needs Listed below are the available options and examples of how to use them OptionDescriptionlazyCompilationEnables Webpack's experimental lazy compilationcore: { builder: { options: { lazyCompilation: true } } }fsCacheConfigures Webpack's filesystem caching feature core: { builder: { options: { fsCache: true } } } storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-webpack5, nextjs, angular, etc",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 717634,
      "relative_path": "documentation\\storybook\\_docs_builders_webpack.html",
      "source_type": "documentation"
    },
    "token_count": 480,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "6851fe2b961fe50193b8532006d7b311",
    "source_file": "corpus\\documentation\\storybook\\_docs_builders_webpack.html",
    "source_type": "documentation",
    "title": "Webpack | Storybook docs",
    "content": "storybook/main js|ts) and provide additional options to improve your Storybook's performance or customize it to your needs Listed below are the available options and examples of how to use them OptionDescriptionlazyCompilationEnables Webpack's experimental lazy compilationcore: { builder: { options: { lazyCompilation: true } } }fsCacheConfigures Webpack's filesystem caching feature core: { builder: { options: { fsCache: true } } } storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-webpack5, nextjs, angular, etcimport type { StorybookConfig } from '@storybook/your-framework';\nconst config: StorybookConfig = {\nframework: '@storybook/your-framework',\nstories: [' /src/**/* mdx', ' /src/**/* stories @(js|jsx|mjs|ts|tsx)'],\ncore: {\nbuilder: {\nname: '@storybook/builder-webpack5',\noptions: {\nfsCache: true,\nlazyCompilation: true,\n},\n},\n},\n};\nexport default config;\nOverride the default configuration\nStorybook's Webpack configuration is based on Webpack 5, allowing it to be extended to fit your project's needs If you need to add a loader or a plugin, you can provide the webpackFinal configuration element in your storybook/main js|ts file The configuration element should export a function that receives the baseline configuration as the first argument and Storybook's options object as the second argument For example: storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-webpack5, nextjs, angular, etc import type { StorybookConfig } from '@storybook/your-framework';\nconst config: StorybookConfig = {\nframework: '@storybook/your-framework',\nstories: [' /src/**/* mdx', ' /src/**/* stories @(js|jsx|mjs|ts|tsx)'],\nwebpackFinal: async (config, { configType }) => {\nif (configType === 'DEVELOPMENT') {\n// Modify config for development\n}\nif (configType === 'PRODUCTION') {\n// Modify config for production\n}\nreturn config;\n},\n};\nexport default config;\nWhen Storybook starts, it automatically merges the configuration into its own However, when providing the webpackFinal configuration element, you're responsible for merging the configuration yourself We recommend that you handle the changes to the config object responsibly, preserving both the entry and output properties",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 717634,
      "relative_path": "documentation\\storybook\\_docs_builders_webpack.html",
      "source_type": "documentation"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "3af448f2c6f5f5b89ac51f97cb744919",
    "source_file": "corpus\\documentation\\storybook\\_docs_builders_webpack.html",
    "source_type": "documentation",
    "title": "Webpack | Storybook docs",
    "content": "}) => { if (configType === 'DEVELOPMENT') { // Modify config for development } if (configType === 'PRODUCTION') { // Modify config for production } return config; }, }; export default config; When Storybook starts, it automatically merges the configuration into its own However, when providing the webpackFinal configuration element, you're responsible for merging the configuration yourself We recommend that you handle the changes to the config object responsibly, preserving both the entry and output propertiesWorking with Webpack plugins\nAnother way to customize your Storybook configuration is to add a custom plugin or loader to help with code optimization, asset management, or other tasks Nevertheless, since Storybook relies on the HtmlWebpackPlugin to generate the preview page, we recommend that you append the changes to the config plugins array rather than overwriting it For example: storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-webpack5, nextjs, angular, etc import type { StorybookConfig } from '@storybook/your-framework';\nconst config: StorybookConfig = {\nframework: '@storybook/your-framework',\nstories: [' /src/**/* mdx', ' /src/**/* stories @(js|jsx|mjs|ts|tsx)'],\nwebpackFinal: async (config) => {\nconfig plugins push(/* */);\nreturn config;\n},\n};\nexport default config;\nAdditionally, when working with Webpack loaders that don't explicitly include specific file extensions (i e , via the test property), you should exclude the ejs file extension for that loader Import a custom Webpack configuration\nIf you already have an existing Webpack configuration file that you need to reuse with Storybook, you can import it and merge it into the default configuration For example: storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-webpack5, nextjs, angular, etc import type { StorybookConfig } from '@storybook/your-framework';\nimport custom from ' /webpack config js'; // 👈 Custom Webpack configuration being imported const config: StorybookConfig = {\nframework: '@storybook/your-framework',\nstories: [' /src/**/* mdx', ' /src/**/* stories @(js|jsx|mjs|ts|tsx)'],\nwebpackFinal: async (config) => {\nreturn { config,\nmodule: { config module, rules: [ config module rules, custom module",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 717634,
      "relative_path": "documentation\\storybook\\_docs_builders_webpack.html",
      "source_type": "documentation"
    },
    "token_count": 483,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "621ed8a173ea3113b196fdb64b700da7",
    "source_file": "corpus\\documentation\\storybook\\_docs_builders_webpack.html",
    "source_type": "documentation",
    "title": "Webpack | Storybook docs",
    "content": "the default configuration For example: storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-webpack5, nextjs, angular, etc import type { StorybookConfig } from '@storybook/your-framework'; import custom from ' /webpack config js'; // 👈 Custom Webpack configuration being imported const config: StorybookConfig = { framework: '@storybook/your-framework', stories: [' /src/**/* mdx', ' /src/**/* stories @(js|jsx|mjs|ts|tsx)'], webpackFinal: async (config) => { return { config, module: { config module, rules: [ config module rules, custom modulerules] },\n};\n},\n};\nexport default config;\n💡Projects scaffolded based on generators may require that you import their specific Webpack configuration files We suggest reading your generator's documentation for more information Debug Webpack configuration\nIf you intend to debug the Webpack configuration used by Storybook, you can use the Storybook CLI to help you If you're running in development mode, you can use the following command:\nnpmnpm run storybook -- --debug-webpack\nAdditionally, if you're generating a static build of your Storybook, you can use the following command:\nnpmnpm run build-storybook -- --debug-webpack\nCompiler support\nStorybook takes a compiler-agnostic approach to bundling This allows you to bring your own application bundler (e g , Babel, SWC) and ensures compatibility within the vast ecosystem of Webpack 5-based projects SWC\nIf your project is built using SWC, use the @storybook/addon-webpack5-compiler-swc addon This addon increases ecosystem compatibility with Webpack 5 projects while maintaining high performance Run the following command to set up the addon automatically:\nnpmnpx storybook@latest add @storybook/addon-webpack5-compiler-swc\nℹ️Additional options can be provided to customize the SWC configuration See the SWC API documentation for more information When enabled, this addon adjusts the Webpack configuration to use the swc-loader for JavaScript and TypeScript files Additionally, it will detect and use your project's SWC configuration",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 717634,
      "relative_path": "documentation\\storybook\\_docs_builders_webpack.html",
      "source_type": "documentation"
    },
    "token_count": 440,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "3fad80175649bf330ee73e33e116b917",
    "source_file": "corpus\\documentation\\storybook\\_docs_builders_webpack.html",
    "source_type": "documentation",
    "title": "Webpack | Storybook docs",
    "content": "use the @storybook/addon-webpack5-compiler-swc addon This addon increases ecosystem compatibility with Webpack 5 projects while maintaining high performance Run the following command to set up the addon automatically: npmnpx storybook@latest add @storybook/addon-webpack5-compiler-swc ℹ️Additional options can be provided to customize the SWC configuration See the SWC API documentation for more information When enabled, this addon adjusts the Webpack configuration to use the swc-loader for JavaScript and TypeScript files Additionally, it will detect and use your project's SWC configurationBabel\nIf you're working with a project that relies on Babel's tooling to provide support for specific features, including TypeScript or other modern JavaScript features, you can use the @storybook/addon-webpack5-compiler-babel addon to allow you to include them in your Storybook to ensure compatibility with your project Run the following command to set up the addon automatically:\nnpmnpx storybook@latest add @storybook/addon-webpack5-compiler-babel\nℹ️Additional options can be provided to customize the Babel configuration See the babel API documentation for more information, or if you're working on an addon, the babelDefault documentation for more information When enabled, the addon will adjust the Webpack configuration to use the babel-loader as the default loader for JavaScript and TypeScript files Additionally, it will detect and use your project's Babel configuration Troubleshooting\nTypeScript modules are not resolved within Storybook\nStorybook's default Webpack configuration provides support for most project setups without the need for any additional configuration Nevertheless, depending on your project configuration, or the framework of choice, you may run into issues with TypeScript modules not being resolved within Storybook when aliased from your tsconfig file If you encounter this issue, you can use tsconfig-paths-webpack-plugin while extending Storybook's Webpack config as follows: storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-webpack5, nextjs, angular, etc import type { StorybookConfig } from '@storybook/your-framework';\nimport TsconfigPathsPlugin from 'tsconfig-paths-webpack-plugin';\nconst config: StorybookConfig = {\nframework: '@storybook/your-framework',\nstories: [' /src/**/* mdx', ' /src/**/* stories @(js|jsx|mjs|ts|tsx)'],\nwebpackFinal: async (config) => {\nif (config resolve) {\nconfig resolve plugins = [ (config resolve",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 717634,
      "relative_path": "documentation\\storybook\\_docs_builders_webpack.html",
      "source_type": "documentation"
    },
    "token_count": 504,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "d6dde6aa0c7139ab3bd0a00384c6ea2f",
    "source_file": "corpus\\documentation\\storybook\\_docs_builders_webpack.html",
    "source_type": "documentation",
    "title": "Webpack | Storybook docs",
    "content": "tsconfig file If you encounter this issue, you can use tsconfig-paths-webpack-plugin while extending Storybook's Webpack config as follows: storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-webpack5, nextjs, angular, etc import type { StorybookConfig } from '@storybook/your-framework'; import TsconfigPathsPlugin from 'tsconfig-paths-webpack-plugin'; const config: StorybookConfig = { framework: '@storybook/your-framework', stories: [' /src/**/* mdx', ' /src/**/* stories @(js|jsx|mjs|ts|tsx)'], webpackFinal: async (config) => { if (config resolve) { config resolve plugins = [ (config resolveplugins || []),\nnew TsconfigPathsPlugin({\nextensions: config resolve extensions,\n}),\n];\n}\nreturn config;\n},\n};\nexport default config;\nHowever, if you're working with a framework that provides a default aliasing configuration (e g , Next js, Nuxt) and you want to configure Storybook to use the same aliases, you may not need to install any additional packages Instead, you can extend the default configuration of Storybook to use the same aliases provided by the framework For example, to set up an alias for the @ import path, you can add the following to your storybook/main js|ts file: storybook/main tsTypescriptimport path from 'path';\n// Replace your-framework with the framework you are using, e g react-webpack5, nextjs, angular, etc import type { StorybookConfig } from '@storybook/your-framework';\nconst config: StorybookConfig = {\nframework: '@storybook/your-framework',\nstories: [' /src/**/* mdx', ' /src/**/* stories @(js|jsx|ts|tsx)'],\nwebpackFinal: async (config) => {\nif (config resolve) {\nconfig resolve alias = { config resolve alias,\n'@': path resolve(__dirname, ' /src'),\n};\n}\nreturn config;\n},\n};\nexport default config;\nPre-bundled assets do not show in the Storybook UI\nAs Storybook relies on esbuild to build its internal manager, support for bundling assets with the managerWebpack will no longer have an impact on the Storybook UI We recommend removing existing managerWebpack configuration elements from your Storybook configuration file and bundling assets other than images or CSS into JavaScript beforehand",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 717634,
      "relative_path": "documentation\\storybook\\_docs_builders_webpack.html",
      "source_type": "documentation"
    },
    "token_count": 487,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "a291b2e004e767e18b1126e5004019d6",
    "source_file": "corpus\\documentation\\storybook\\_docs_builders_webpack.html",
    "source_type": "documentation",
    "title": "Webpack | Storybook docs",
    "content": "config resolve alias, '@': path resolve(__dirname, ' /src'), }; } return config; }, }; export default config; Pre-bundled assets do not show in the Storybook UI As Storybook relies on esbuild to build its internal manager, support for bundling assets with the managerWebpack will no longer have an impact on the Storybook UI We recommend removing existing managerWebpack configuration elements from your Storybook configuration file and bundling assets other than images or CSS into JavaScript beforehandStorybook doesn't run with Webpack 4\nSupport for Webpack 4 has been removed and is no longer being maintained If you're upgrading your Storybook, it will automatically use Webpack 5 and attempt to migrate your configuration However, if you're working with a custom Webpack configuration, you may need to update it to work with Webpack 5 The migration process is necessary to ensure that your project runs smoothly with the latest version of Storybook You can follow the instructions provided on the Webpack website to update your configuration Learn more about builders\nVite builder for bundling with Vite\nWebpack builder for bundling with Webpack\nBuilder API for building a Storybook builder\nWas this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 717634,
      "relative_path": "documentation\\storybook\\_docs_builders_webpack.html",
      "source_type": "documentation"
    },
    "token_count": 309,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "7855eb2a858218d8cc942c8cab026c60",
    "source_file": "corpus\\documentation\\storybook\\_docs_configure.html",
    "source_type": "documentation",
    "title": "Configure Storybook | Storybook docs",
    "content": "Configure Storybook | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs ConfigureDocs » ConfigureDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQConfigure StorybookReactVueAngularWeb ComponentsMoreStorybook is configured via a folder called storybook, which contains various configuration files ℹ️Note that you can change the folder that Storybook uses by setting the -c flag to your storybook dev and storybook build CLI commands Configure your Storybook project\nStorybook's main configuration (i e , the main js|ts) defines your Storybook project's behavior, including the location of your stories, the addons you use, feature flags and other project-specific settings This file should be in the storybook folder in your project's root directory You can author this file in either JavaScript or TypeScript Listed below are the available options and examples of how to use them storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { StorybookConfig } from '@storybook/your-framework';\nconst config: StorybookConfig = {\n// Required\nframework: '@storybook/your-framework',\nstories: [' /src/**/* mdx', ' /src/**/* stories",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 625848,
      "relative_path": "documentation\\storybook\\_docs_configure.html",
      "source_type": "documentation"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "5ff86bbb0965ed4d9cd2ce87e5e2e1ed",
    "source_file": "corpus\\documentation\\storybook\\_docs_configure.html",
    "source_type": "documentation",
    "title": "Configure Storybook | Storybook docs",
    "content": "settings This file should be in the storybook folder in your project's root directory You can author this file in either JavaScript or TypeScript Listed below are the available options and examples of how to use them storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { StorybookConfig } from '@storybook/your-framework'; const config: StorybookConfig = { // Required framework: '@storybook/your-framework', stories: [' /src/**/* mdx', ' /src/**/* stories@(js|jsx|mjs|ts|tsx)'],\n// Optional\naddons: ['@storybook/addon-docs'],\ndocs: {\nautodocs: 'tag',\n},\nstaticDirs: [' /public'],\n};\nexport default config;\nℹ️This configuration file is a preset and, as such, has a powerful interface, which can be further customized Read our documentation on writing presets to learn more Configuration elementDescriptionstoriesThe array of globs that indicates the location of your story files, relative to main jsstaticDirsSets a list of directories of static files to be loaded by Storybook  staticDirs: [' /public']addonsSets the list of addons loaded by Storybook  addons: ['@storybook/addon-docs']typescriptConfigures how Storybook handles TypeScript files  typescript: { check: false, checkOptions: {} }frameworkConfigures Storybook based on a set of framework-specific settings  framework: { name: '@storybook/svelte-vite', options:{} }coreConfigures Storybook's internal features  core: { disableTelemetry: true, }docsConfigures Storybook's auto-generated documentation docs: { autodocs: 'tag' }featuresEnables Storybook's additional features See table below for a list of available featuresrefsConfigures Storybook composition  refs: { example: { title: 'ExampleStorybook', url:'https://your-url com' } }logLevelConfigures Storybook's logs in the browser terminal Useful for debugging  logLevel: 'debug'webpackFinalCustomize Storybook's Webpack setup  webpackFinal: async (config:any) => { return config; }viteFinalCustomize Storybook's Vite setup when using the vite builder  viteFinal: async (config: Vite InlineConfig, options: Options) => { return config; }envDefines custom Storybook environment variables",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 625848,
      "relative_path": "documentation\\storybook\\_docs_configure.html",
      "source_type": "documentation"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "4aed2daf2aee06ffd1136ce18f23068c",
    "source_file": "corpus\\documentation\\storybook\\_docs_configure.html",
    "source_type": "documentation",
    "title": "Configure Storybook | Storybook docs",
    "content": "documentation docs: { autodocs: 'tag' }featuresEnables Storybook's additional features See table below for a list of available featuresrefsConfigures Storybook composition refs: { example: { title: 'ExampleStorybook', url:'https://your-url com' } }logLevelConfigures Storybook's logs in the browser terminal Useful for debugging logLevel: 'debug'webpackFinalCustomize Storybook's Webpack setup webpackFinal: async (config:any) => { return config; }viteFinalCustomize Storybook's Vite setup when using the vite builder viteFinal: async (config: Vite InlineConfig, options: Options) => { return config; }envDefines custom Storybook environment variablesenv: (config) => ({ config, EXAMPLE_VAR: 'Example var' }),buildOptimizes Storybook's production build for performance by excluding specific features from the bundle Useful when decreased build times are a priority build: { test: {} }\nConfigure story loading\nBy default, Storybook will load stories from your project based on a glob (pattern matching string) in storybook/main js|ts that matches all files in your project with extension stories * The intention is for you to colocate a story file along with the component it documents •\n└── components\n├── Button js\n└── Button stories js\nIf you want to use a different naming convention, you can alter the glob using the syntax supported by picomatch For example, if you wanted to pull both md and js files from the my-project/src/components directory, you could write: storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { StorybookConfig } from '@storybook/your-framework';\nconst config: StorybookConfig = {\nframework: '@storybook/your-framework',\nstories: [' /my-project/src/components/* @(js|md)'],\n};\nexport default config;\nWith a configuration object\nAdditionally, you can customize your Storybook configuration to load your stories based on a configuration object For example, if you wanted to load your stories from a packages/components directory, you could adjust your stories configuration field into the following: storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 625848,
      "relative_path": "documentation\\storybook\\_docs_configure.html",
      "source_type": "documentation"
    },
    "token_count": 488,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "c6b304d34005c8448f14ce7609d0c50d",
    "source_file": "corpus\\documentation\\storybook\\_docs_configure.html",
    "source_type": "documentation",
    "title": "Configure Storybook | Storybook docs",
    "content": "from '@storybook/your-framework'; const config: StorybookConfig = { framework: '@storybook/your-framework', stories: [' /my-project/src/components/* @(js|md)'], }; export default config; With a configuration object Additionally, you can customize your Storybook configuration to load your stories based on a configuration object For example, if you wanted to load your stories from a packages/components directory, you could adjust your stories configuration field into the following: storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etcimport type { StorybookConfig } from '@storybook/your-framework';\nconst config: StorybookConfig = {\nframework: '@storybook/your-framework',\nstories: [\n{\n// 👇 Sets the directory containing your stories\ndirectory: ' /packages/components',\n// 👇 Storybook will load all files that match this glob\nfiles: '* stories *',\n// 👇 Used when generating automatic titles for your stories\ntitlePrefix: 'MyComponents',\n},\n],\n};\nexport default config;\nWhen Storybook starts, it will look for any file containing the stories extension inside the packages/components directory and generate the titles for your stories With a directory\nYou can also simplify your Storybook configuration and load the stories using a directory For example, if you want to load all the stories inside a packages/MyStories, you can adjust the configuration as such: storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { StorybookConfig } from '@storybook/your-framework';\nconst config: StorybookConfig = {\nframework: '@storybook/your-framework',\n// 👇 Storybook will load all existing stories within the MyStories folder\nstories: [' /packages/MyStories'],\n};\nexport default config;\nWith a custom implementation\nYou can also adjust your Storybook configuration and implement custom logic to load your stories For example, suppose you were working on a project that includes a particular pattern that the conventional ways of loading stories could not solve In that case, you could adjust your configuration as follows: storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 625848,
      "relative_path": "documentation\\storybook\\_docs_configure.html",
      "source_type": "documentation"
    },
    "token_count": 475,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "d17a4d3439bd94417ad3d0eb08a71cf0",
    "source_file": "corpus\\documentation\\storybook\\_docs_configure.html",
    "source_type": "documentation",
    "title": "Configure Storybook | Storybook docs",
    "content": "stories: [' /packages/MyStories'], }; export default config; With a custom implementation You can also adjust your Storybook configuration and implement custom logic to load your stories For example, suppose you were working on a project that includes a particular pattern that the conventional ways of loading stories could not solve In that case, you could adjust your configuration as follows: storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etcimport type { StorybookConfig } from '@storybook/your-framework';\nimport type { StoriesEntry } from 'storybook/internal/types';\nasync function findStories(): Promise<StoriesEntry[]> {\n// your custom logic returns a list of files\n}\nconst config: StorybookConfig = {\nframework: '@storybook/your-framework',\nstories: async (list: StoriesEntry[]) => [ list,\n// 👇 Add your found stories to the existing list of story files (await findStories()),\n],\n};\nexport default config;\nKnown limitations\nBecause of the way stories are currently indexed in Storybook, loading stories on demand has a couple of minor limitations at the moment:\nCSF formats from version 1 to version 3 are supported Custom storySort functions are allowed based on a restricted API Configure story rendering\nTo control the way stories are rendered and add global decorators and parameters, create a storybook/preview js file This is loaded in the Canvas UI, the “preview” iframe that renders your components in isolation Use preview js for global code (such as CSS imports or JavaScript mocks) that applies to all stories The preview js file can be an ES module and export the following keys:\ndecorators - an array of global decorators\nparameters - an object of global parameters\nglobalTypes - definition of globalTypes\nIf you’re looking to change how to order your stories, read about sorting stories Configure Storybook’s UI\nTo control the behavior of Storybook’s UI (the “manager”), you can create a storybook/manager js file This file does not have a specific API but is the place to set UI options and to configure Storybook’s theme Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 625848,
      "relative_path": "documentation\\storybook\\_docs_configure.html",
      "source_type": "documentation"
    },
    "token_count": 501,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "82d998796b3496e42739355b55b59cec",
    "source_file": "corpus\\documentation\\storybook\\_docs_configure_story-layout.html",
    "source_type": "documentation",
    "title": "Story layout | Storybook docs",
    "content": "Story layout | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Configure » Story layoutDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQStory layoutReactVueAngularWeb ComponentsMoreThe layout parameter allows you to configure how stories are positioned in Storybook's Canvas tab Global layout\nYou can add the parameter to your /storybook/preview js, like so: storybook/preview tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Preview } from '@storybook/your-framework';\nconst preview: Preview = {\nparameters: {\nlayout: 'centered',\n},\n};\nexport default preview;\nIn the example above, Storybook will center all stories in the UI layout accepts these options:\ncentered: center the component horizontally and vertically in the Canvas\nfullscreen: allow the component to expand to the full width and height of the Canvas\npadded: (default) Add extra padding around the component\nComponent layout\nYou can also set it at a component level like so:\nButton stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { Button } from '",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 606733,
      "relative_path": "documentation\\storybook\\_docs_configure_story-layout.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "8224f42c6dd627ec2f219a80d3a51c61",
    "source_file": "corpus\\documentation\\storybook\\_docs_configure_story-layout.html",
    "source_type": "documentation",
    "title": "Story layout | Storybook docs",
    "content": "centered: center the component horizontally and vertically in the Canvas fullscreen: allow the component to expand to the full width and height of the Canvas padded: (default) Add extra padding around the component Component layout You can also set it at a component level like so: Button stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework'; import { Button } from '/Button';\nconst meta = {\ncomponent: Button,\n// Sets the layout parameter component wide parameters: {\nlayout: 'centered',\n},\n} satisfies Meta<typeof Button>;\nexport default meta;\nStory layout\nOr even apply it to specific stories like so:\nButton stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { Button } from ' /Button';\nconst meta = {\ncomponent: Button,\n} satisfies Meta<typeof Button>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const WithLayout: Story = {\nparameters: {\nlayout: 'centered',\n},\n};\nWas this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 606733,
      "relative_path": "documentation\\storybook\\_docs_configure_story-layout.html",
      "source_type": "documentation"
    },
    "token_count": 326,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f8e0bae9d5f68feaf384f2f1ae566015",
    "source_file": "corpus\\documentation\\storybook\\_docs_configure_environment-variables.html",
    "source_type": "documentation",
    "title": "Environment variables | Storybook docs",
    "content": "Environment variables | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Configure » Environment variablesDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQEnvironment variablesReactVueAngularWeb ComponentsMoreYou can use environment variables in Storybook to change its behavior in different “modes” If you supply an environment variable prefixed with STORYBOOK_, it will be available in process env when using Webpack, or import meta env when using the Vite builder:\nSTORYBOOK_THEME=red STORYBOOK_DATA_KEY=12345 npm run storybook\n💡Do not store any secrets (e g , private API keys) or other types of sensitive information in your Storybook Environment variables are embedded into the build, meaning anyone can view them by inspecting your files Then we can access these environment variables anywhere inside our preview JavaScript code like below:\nnode-envvite-env console log(process env STORYBOOK_THEME);\nconsole log(process env STORYBOOK_DATA_KEY);\nYou can also access these variables in your custom <head>/<body> using the substitution %STORYBOOK_X%, for example: %STORYBOOK_THEME% will become red 💡If using the environment variables as attributes or values in JavaScript, you may need to add quotes, as the value will be inserted directly, for example: <link rel=\"stylesheet\" href=\"%STORYBOOK_STYLE_URL%\" />",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 728122,
      "relative_path": "documentation\\storybook\\_docs_configure_environment-variables.html",
      "source_type": "documentation"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "45c29368f08b4693bcc4cf22bc47fcb4",
    "source_file": "corpus\\documentation\\storybook\\_docs_configure_environment-variables.html",
    "source_type": "documentation",
    "title": "Environment variables | Storybook docs",
    "content": "your files Then we can access these environment variables anywhere inside our preview JavaScript code like below: node-envvite-env console log(process env STORYBOOK_THEME); console log(process env STORYBOOK_DATA_KEY); You can also access these variables in your custom <head>/<body> using the substitution %STORYBOOK_X%, for example: %STORYBOOK_THEME% will become red 💡If using the environment variables as attributes or values in JavaScript, you may need to add quotes, as the value will be inserted directly, for example: <link rel=\"stylesheet\" href=\"%STORYBOOK_STYLE_URL%\" />Using env files\nYou can also use env files to change Storybook's behavior in different modes For example, if you add a env file to your project with the following:\nSTORYBOOK_DATA_KEY=12345\nThen you can access this environment variable anywhere, even within your stories:\nMyComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { MyComponent } from ' /MyComponent';\nconst meta = {\ncomponent: MyComponent,\n} satisfies Meta<typeof MyComponent>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const ExampleStory: Story = {\nargs: {\npropertyA: process env STORYBOOK_DATA_KEY,\n},\n};\nWith ViteOut of the box, Storybook provides a Vite builder, which does not output Node js globals like process env To access environment variables in Storybook (e g , STORYBOOK_, VITE_), you can use import meta env For example: MyComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { MyComponent } from ' /MyComponent';\nconst meta = {\ncomponent: MyComponent,\n} satisfies Meta<typeof MyComponent>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const ExampleStory: Story = {\nargs: {\npropertyA: import meta env STORYBOOK_DATA_KEY,\npropertyB: import meta env VITE_CUSTOM_VAR,\n},\n};\nℹ️You can also use specific files for specific modes Add a env development or env production to apply different values to your environment variables",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 728122,
      "relative_path": "documentation\\storybook\\_docs_configure_environment-variables.html",
      "source_type": "documentation"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "9f9282eb5f9692b0e122117537c090af",
    "source_file": "corpus\\documentation\\storybook\\_docs_configure_environment-variables.html",
    "source_type": "documentation",
    "title": "Environment variables | Storybook docs",
    "content": "type { Meta, StoryObj } from '@storybook/your-framework'; import { MyComponent } from ' /MyComponent'; const meta = { component: MyComponent, } satisfies Meta<typeof MyComponent>; export default meta; type Story = StoryObj<typeof meta>; export const ExampleStory: Story = { args: { propertyA: import meta env STORYBOOK_DATA_KEY, propertyB: import meta env VITE_CUSTOM_VAR, }, }; ℹ️You can also use specific files for specific modes Add a env development or env production to apply different values to your environment variablesYou can also pass these environment variables when you are building your Storybook with build-storybook Then they'll be hardcoded to the static version of your Storybook Using Storybook configuration\nAdditionally, you can extend your Storybook configuration file (i e , storybook/main js| ts) and provide a configuration field that you can use to define specific variables (e g , API URLs) For example: storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { StorybookConfig } from '@storybook/your-framework';\nconst config: StorybookConfig = {\nframework: '@storybook/your-framework',\nstories: [' /src/**/* mdx', ' /src/**/* stories @(js|jsx|mjs|ts|tsx)'],\n/*\n* 👇 The `config` argument contains all the other existing environment variables * Either configured in an ` env` file or configured on the command line */\nenv: (config) => ({ config,\nEXAMPLE_VAR: 'An environment variable configured in Storybook',\n}),\n};\nexport default config;\nWhen Storybook loads, it will enable you to access them in your stories similar as you would do if you were working with an env file:\nMyComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { MyComponent } from ' /MyComponent';\nconst meta = {\ncomponent: MyComponent,\n} satisfies Meta<typeof MyComponent>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const Default: Story = {\nargs: {\nexampleProp: process env EXAMPLE_VAR,\n},\n};\nUsing environment variables to choose the browser\nStorybook allows you to choose the browser you want to preview your stories",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 728122,
      "relative_path": "documentation\\storybook\\_docs_configure_environment-variables.html",
      "source_type": "documentation"
    },
    "token_count": 502,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "7414329a0bcfe893c51420d90c9b92c5",
    "source_file": "corpus\\documentation\\storybook\\_docs_configure_environment-variables.html",
    "source_type": "documentation",
    "title": "Environment variables | Storybook docs",
    "content": "you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework'; import { MyComponent } from ' /MyComponent'; const meta = { component: MyComponent, } satisfies Meta<typeof MyComponent>; export default meta; type Story = StoryObj<typeof meta>; export const Default: Story = { args: { exampleProp: process env EXAMPLE_VAR, }, }; Using environment variables to choose the browser Storybook allows you to choose the browser you want to preview your storiesEither through a env file entry or directly in your storybook script The table below lists the available options:\nBrowserExampleSafariBROWSER=\"safari\"FirefoxBROWSER=\"firefox\"ChromiumBROWSER=\"chromium\"\n💡By default, Storybook will open a new Chrome window as part of its startup process If you don't have Chrome installed, make sure to include one of the following options, or set your default browser accordingly Troubleshooting\nEnvironment variables are not working\nIf you're trying to use framework-specific environment variables (e g ,VUE_APP_), you may run into issues primarily due to the fact that Storybook and your framework may have specific configurations and may not be able to recognize and use those environment variables If you run into a similar situation, you may need to adjust your framework configuration to make sure that it can recognize and use those environment variables For example, if you're working with a Vite-based framework, you can extend the configuration file and enable the envPrefix option Other frameworks may require a similar approach Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 728122,
      "relative_path": "documentation\\storybook\\_docs_configure_environment-variables.html",
      "source_type": "documentation"
    },
    "token_count": 394,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "115e9bf597db35d62c97eccf64e9b862",
    "source_file": "corpus\\documentation\\storybook\\_docs_configure_story-rendering.html",
    "source_type": "documentation",
    "title": "Story rendering | Storybook docs",
    "content": "Story rendering | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Configure » Story renderingDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQStory renderingReactVueAngularWeb ComponentsMoreIn Storybook, your stories render in a particular “preview” iframe (also called the Canvas) inside the larger Storybook web application The JavaScript build configuration of the preview is controlled by a builder config, but you also may want to run some code for every story or directly control the rendered HTML to help your stories render correctly Running code for every story\nCode executed in the preview file ( storybook/preview js|ts) runs for every story in your Storybook This is useful for setting up global styles, initializing libraries, or anything else required to render your components Here's an example of how you might use the preview file to initialize a library that must run before your components render: storybook/preview ts // Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Preview } from '@storybook/your-framework';\nimport { initialize } from ' /lib/your-library';\ninitialize();\nconst preview: Preview = {\n//",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 577082,
      "relative_path": "documentation\\storybook\\_docs_configure_story-rendering.html",
      "source_type": "documentation"
    },
    "token_count": 470,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "05f8780ccbc2a5a78d0b3d1773c88168",
    "source_file": "corpus\\documentation\\storybook\\_docs_configure_story-rendering.html",
    "source_type": "documentation",
    "title": "Story rendering | Storybook docs",
    "content": "useful for setting up global styles, initializing libraries, or anything else required to render your components Here's an example of how you might use the preview file to initialize a library that must run before your components render: storybook/preview ts // Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Preview } from '@storybook/your-framework'; import { initialize } from ' /lib/your-library'; initialize(); const preview: Preview = { //};\nexport default preview;\nAdding to <head>\nIf you need to add extra elements to the head of the preview iframe, for instance, to load static stylesheets, font files, or similar, you can create a file called storybook/preview-head html and add tags like this: storybook/preview-head html< --\nPull in static files served from your Static directory or the internet\nExample:\n`main js|ts` is configured with staticDirs: [' /public'] and your font is located in the `fonts`\ndirectory inside your `public` directory\n-->\n<link rel=\"preload\" href=\"/fonts/my-font woff2\" />\n< -- Or you can load custom head-tag JavaScript: -->\n<script src=\"https://use typekit net/xxxyyy js\"></script>\n<script>\ntry {\nTypekit load();\n} catch (e) {}\n</script>\nℹ️Storybook will inject these tags into the preview iframe where your components render, not the Storybook application UI However, it's also possible to modify the preview head HTML programmatically using a preset defined in the main js file Read the presets documentation for more information Adding to <body>\nSometimes, you may need to add different tags to the <body> Helpful for adding some custom content roots You can accomplish this by creating a file called preview-body html inside your storybook directory and adding tags like this: storybook/preview-body html<div id=\"custom-root\"></div>\nIf using relative sizing in your project (like rem or em), you may update the base font-size by adding a style tag to preview-body html: storybook/preview-body html<style>\nhtml {\nfont-size: 15px;\n}\n</style>\nℹ️Storybook will inject these tags into the preview iframe where your components render, not the Storybook application UI Just like how you have the ability to customize the preview head HTML tag, you can also follow the same steps to customize the preview body with a preset",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 577082,
      "relative_path": "documentation\\storybook\\_docs_configure_story-rendering.html",
      "source_type": "documentation"
    },
    "token_count": 506,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "abd0e9288da2822fa912d1f69432e6d2",
    "source_file": "corpus\\documentation\\storybook\\_docs_configure_story-rendering.html",
    "source_type": "documentation",
    "title": "Story rendering | Storybook docs",
    "content": "in your project (like rem or em), you may update the base font-size by adding a style tag to preview-body html: storybook/preview-body html<style> html { font-size: 15px; } </style> ℹ️Storybook will inject these tags into the preview iframe where your components render, not the Storybook application UI Just like how you have the ability to customize the preview head HTML tag, you can also follow the same steps to customize the preview body with a presetTo obtain more information on how to do this, refer to the presets documentation Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 577082,
      "relative_path": "documentation\\storybook\\_docs_configure_story-rendering.html",
      "source_type": "documentation"
    },
    "token_count": 186,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "9c6b183aac06c1f3f7f4eb938f05931f",
    "source_file": "corpus\\documentation\\storybook\\_docs_contribute.html",
    "source_type": "documentation",
    "title": "How to contribute | Storybook docs",
    "content": "How to contribute | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs ContributeDocs » ContributeDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQHow to contributeStorybook is a community-oriented open source project that welcomes contributions Some of our most popular features started with a developer wanting to solve a problem for themselves Contributor covenant\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation Continue reading our contributor covenant »\nWays to contribute\nRFC process for authoring feature requests\nCode for features and bug fixes\nFrameworks to get started with a new framework\nDocumentation for documentation improvements, typos, and clarifications\nExamples for new snippets and examples\nAddons for new addons\nNot sure how to get started Chat in Discord #contributing\nBrowse \"good first issues\" to fix\nSubmit a bug report or feature request\nWas this page useful",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 478578,
      "relative_path": "documentation\\storybook\\_docs_contribute.html",
      "source_type": "documentation"
    },
    "token_count": 459,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "3a0d556bd4a3278086222d688c38697a",
    "source_file": "corpus\\documentation\\storybook\\_docs_contribute.html",
    "source_type": "documentation",
    "title": "How to contribute | Storybook docs",
    "content": "identity and orientation Continue reading our contributor covenant » Ways to contribute RFC process for authoring feature requests Code for features and bug fixes Frameworks to get started with a new framework Documentation for documentation improvements, typos, and clarifications Examples for new snippets and examples Addons for new addons Not sure how to get started Chat in Discord #contributing Browse \"good first issues\" to fix Submit a bug report or feature request Was this page useful👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 478578,
      "relative_path": "documentation\\storybook\\_docs_contribute.html",
      "source_type": "documentation"
    },
    "token_count": 154,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "5a49bf235eba33ea975770bb8938c723",
    "source_file": "corpus\\documentation\\storybook\\_docs_configure_styling-and-css.html",
    "source_type": "documentation",
    "title": "Styling and CSS | Storybook docs",
    "content": "Styling and CSS | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Configure » Styling and CSSDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQStyling and CSSReactVueAngularWeb ComponentsMore\nThere are many ways to include CSS in a web application, and correspondingly there are many ways to include CSS in Storybook Usually, it is best to try and replicate what your application does with styling in Storybook’s configuration CSSStorybook supports importing CSS files in a few different ways Storybook will inject these tags into the preview iframe where your components render, not the Storybook Manager UI The best way to import CSS depends on your project's configuration and your preferences Import bundled CSS (Recommended)All Storybooks are pre-configured to recognize imports for CSS files To add global CSS for all your stories, import it in storybook/preview ts These files will be subject to HMR, so you can see your changes without restarting your Storybook server storybook/preview tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Preview } from '@storybook/your-framework';\nimport ' /src/styles/global css';\nconst preview: Preview = {\nparameters: {},\n};\nexport default preview;If your component files import their CSS files, this will work too",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 597096,
      "relative_path": "documentation\\storybook\\_docs_configure_styling-and-css.html",
      "source_type": "documentation"
    },
    "token_count": 505,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "8683557147ff1e2131111d35862b5a3c",
    "source_file": "corpus\\documentation\\storybook\\_docs_configure_styling-and-css.html",
    "source_type": "documentation",
    "title": "Styling and CSS | Storybook docs",
    "content": "for all your stories, import it in storybook/preview ts These files will be subject to HMR, so you can see your changes without restarting your Storybook server storybook/preview tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Preview } from '@storybook/your-framework'; import ' /src/styles/global css'; const preview: Preview = { parameters: {}, }; export default preview;If your component files import their CSS files, this will work tooHowever, if you're using CSS processor tools like Sass or Postcss, you may need some more configuration Include static CSSIf you have a global CSS file that you want to include in all your stories, you can import it in storybook/preview-head html However, these files will not be subject to HMR, so you'll need to restart your Storybook server to see your changes storybook/preview-head html< -- Loads a font from a CDN -->\n<link rel=\"preconnect\" href=\"https://fonts googleapis com\" />\n<link rel=\"preconnect\" href=\"https://fonts gstatic com\" crossorigin />\n<link\nhref=\"https://fonts googleapis com/css2 family=Inter:wght@100 900&display=swap\"\nrel=\"stylesheet\"\n/>\n< -- Load your CSS file -->\n<link rel=\"stylesheet\" href=\"path/to/your/styles css\" />CSS modulesViteVite comes with CSS modules support out-of-the-box If you have customized the CSS modules configuration in your vite config js this will automatically be applied to your Storybook as well Read more about Vite's CSS modules support Webpack📣Using @storybook/nextjs Storybook recreates your Next js configuration, so you can use CSS modules in your stories without any extra configuration If you're using Webpack and want to use CSS modules, you'll need some extra configuration We recommend installing @storybook/addon-styling-webpack to help you configure these tools PostCSSViteVite comes with PostCSS support out-of-the-box If you have customized the PostCSS configuration in your vite config js this will automatically be applied to your Storybook as well Read more about Vite's PostCSS support Webpack📣Using @storybook/nextjs Storybook recreates your Next js configuration, so you can use PostCSS in your stories without any extra configuration",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 597096,
      "relative_path": "documentation\\storybook\\_docs_configure_styling-and-css.html",
      "source_type": "documentation"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "e6316f45c238ba19447f38b701159104",
    "source_file": "corpus\\documentation\\storybook\\_docs_configure_styling-and-css.html",
    "source_type": "documentation",
    "title": "Styling and CSS | Storybook docs",
    "content": "Webpack and want to use CSS modules, you'll need some extra configuration We recommend installing @storybook/addon-styling-webpack to help you configure these tools PostCSSViteVite comes with PostCSS support out-of-the-box If you have customized the PostCSS configuration in your vite config js this will automatically be applied to your Storybook as well Read more about Vite's PostCSS support Webpack📣Using @storybook/nextjs Storybook recreates your Next js configuration, so you can use PostCSS in your stories without any extra configurationIf you're using Webpack and want to use PostCSS, you'll need some extra configuration We recommend installing @storybook/addon-styling-webpack to help you configure these tools CSS pre-processorsViteVite comes with Sass, Less, and Stylus support out-of-the-box Read more about Vite's CSS Pre-processor support Webpack📣Using @storybook/nextjs Storybook recreates your Next js configuration, so you can use Sass in your stories without any extra configuration If you're using Webpack and want to use Sass or less, you'll need some extra configuration We recommend installing @storybook/addon-styling-webpack to help you configure these tools Or if you'd prefer, you can customize Storybook's webpack configuration yourself to include the appropriate loader(s) CSS-in-JSCSS-in-JS libraries are designed to use basic JavaScript, and they often work in Storybook without any extra configuration Some libraries expect components to render in a specific rendering “context” (for example, to provide themes), which can be accomplished with @storybook/addon-themes's withThemeFromJSXProvider decorator Adding webfonts storybook/preview-head htmlIf you need webfonts to be available, you may need to add some code to the storybook/preview-head html file We recommend including any assets with your Storybook if possible, in which case you likely want to configure the static file location storybook/preview tsIf you're using something like fontsource for your fonts, you can import the needed css files in your storybook/preview ts file Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 597096,
      "relative_path": "documentation\\storybook\\_docs_configure_styling-and-css.html",
      "source_type": "documentation"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "2b93e7d0a391019c5edb7115de9234ff",
    "source_file": "corpus\\documentation\\storybook\\_docs_configure_telemetry.html",
    "source_type": "documentation",
    "title": "Telemetry | Storybook docs",
    "content": "Telemetry | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Configure » TelemetryDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQTelemetryStorybook collects completely anonymous data to help us improve user experience Participation in this anonymous program is optional, and you may opt-out if you'd not like to share any information Why is telemetry collected Hundreds of thousands of developers use Storybook daily to build, test, and document components Storybook is framework agnostic and integrates with the front-end ecosystem:\nJavaScript frameworks such as React, Vue 3, Svelte and Solid\nLibraries such as Styled-Components, Tailwind, Redux\nDesign tools such as Figma, Sketch, Zeplin and InVision\nWorkflow tools such as Notion, Confluence, and Jira\nIn the past, our improvement process relied on manually gathering feedback But with a growing userbase and the need to support a wide variety of integrations, we need a more accurate method for gauging Storybook usage and pain points These telemetry data help us (the maintainers) to prioritize the highest impact projects That allows us to keep up with trends in the front-end ecosystem and verify that our community's hard work achieves the intended result What is being collected We collect general usage details, including command invocation, Storybook version, addons, and the view layer",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 650728,
      "relative_path": "documentation\\storybook\\_docs_configure_telemetry.html",
      "source_type": "documentation"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "0bb3f9f67f9af6b66b9c98a3c4bf95af",
    "source_file": "corpus\\documentation\\storybook\\_docs_configure_telemetry.html",
    "source_type": "documentation",
    "title": "Telemetry | Storybook docs",
    "content": "need to support a wide variety of integrations, we need a more accurate method for gauging Storybook usage and pain points These telemetry data help us (the maintainers) to prioritize the highest impact projects That allows us to keep up with trends in the front-end ecosystem and verify that our community's hard work achieves the intended result What is being collected We collect general usage details, including command invocation, Storybook version, addons, and the view layerSpecifically, we track the following information in our telemetry events:\nTimestamp of the occurrence Command invoked (e g , init, upgrade, dev, build) Storybook unique identifier: One-way hash generated during Storybook installation process One way hash of the IP address where the event occurred for spam detection Story count Storybook version Storybook metadata:\nLanguage (e g , TypeScript, JavaScript) Supported view layers (e g , React, Vue 3, Angular, Svelte) Builder (e g , Webpack5, Vite) Meta framework (e g , Next, Gatsby, CRA) Addons (e g , Accessibility) Testing tools (e g Jest, Vitest, Playwright) Package manager information (e g , npm, yarn) Monorepo information (e g , NX, Turborepo) In-app events (e g , Storybook guided tour, UI test run) Access to the raw data is highly controlled, limited to select members of Storybook's core team who maintain the telemetry We cannot identify individual users from the dataset: it is anonymized and untraceable back to the user What about sensitive information We take your privacy and our security very seriously We perform additional steps to ensure that secure data (e g , environment variables or other forms of sensitive data) do not make their way into our analytics You can view all the information we collect by setting the STORYBOOK_TELEMETRY_DEBUG to 1 to print out the information gathered",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 650728,
      "relative_path": "documentation\\storybook\\_docs_configure_telemetry.html",
      "source_type": "documentation"
    },
    "token_count": 388,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "af4463d6343a3f4a12d2998ce1bf58af",
    "source_file": "corpus\\documentation\\storybook\\_docs_configure_telemetry.html",
    "source_type": "documentation",
    "title": "Telemetry | Storybook docs",
    "content": "identify individual users from the dataset: it is anonymized and untraceable back to the user What about sensitive information We take your privacy and our security very seriously We perform additional steps to ensure that secure data (e g , environment variables or other forms of sensitive data) do not make their way into our analytics You can view all the information we collect by setting the STORYBOOK_TELEMETRY_DEBUG to 1 to print out the information gatheredFor example:\nnpmSTORYBOOK_TELEMETRY_DEBUG=1 npm run storybook\nWill generate the following output:\n{\n\"anonymousId\": \"8bcfdfd5f9616a1923dd92adf89714331b2d18693c722e05152a47f8093392bb\",\n\"eventType\": \"dev\",\n\"payload\": {\n\"versionStatus\": \"cached\",\n\"storyIndex\": {\n\"storyCount\": 0,\n\"componentCount\": 0,\n\"pageStoryCount\": 0,\n\"playStoryCount\": 0,\n\"autodocsCount\": 0,\n\"mdxCount\": 0,\n\"exampleStoryCount\": 8,\n\"exampleDocsCount\": 3,\n\"onboardingStoryCount\": 0,\n\"onboardingDocsCount\": 0,\n\"version\": 5\n},\n\"storyStats\": {\n\"factory\": 0,\n\"play\": 0,\n\"render\": 1,\n\"loaders\": 0,\n\"beforeEach\": 0,\n\"globals\": 0,\n\"storyFn\": 5,\n\"mount\": 0,\n\"moduleMock\": 0,\n\"tags\": 0\n}\n},\n\"metadata\": {\n\"generatedAt\": 1689007841223,\n\"settingsCreatedAt\": 1689007841223,\n\"hasCustomBabel\": false,\n\"hasCustomWebpack\": false,\n\"hasStaticDirs\": false,\n\"hasStorybookEslint\": false,\n\"refCount\": 0,\n\"portableStoriesFileCount\": 0,\n\"packageManager\": {\n\"type\": \"yarn\",\n\"version\": \"3 1 1\"\n},\n\"monorepo\": \"Nx\",\n\"framework\": {\n\"name\": \"@storybook/react-vite\",\n\"options\": {}\n},\n\"builder\": \"@storybook/builder-vite\",\n\"renderer\": \"@storybook/react\",\n\"storybookVersion\": \"9 0 0\",\n\"storybookVersionSpecifier\": \"^9 0",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 650728,
      "relative_path": "documentation\\storybook\\_docs_configure_telemetry.html",
      "source_type": "documentation"
    },
    "token_count": 495,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "ca724d60cf202e522fd674774028879a",
    "source_file": "corpus\\documentation\\storybook\\_docs_configure_telemetry.html",
    "source_type": "documentation",
    "title": "Telemetry | Storybook docs",
    "content": "\"onboardingDocsCount\": 0, \"version\": 5 }, \"storyStats\": { \"factory\": 0, \"play\": 0, \"render\": 1, \"loaders\": 0, \"beforeEach\": 0, \"globals\": 0, \"storyFn\": 5, \"mount\": 0, \"moduleMock\": 0, \"tags\": 0 } }, \"metadata\": { \"generatedAt\": 1689007841223, \"settingsCreatedAt\": 1689007841223, \"hasCustomBabel\": false, \"hasCustomWebpack\": false, \"hasStaticDirs\": false, \"hasStorybookEslint\": false, \"refCount\": 0, \"portableStoriesFileCount\": 0, \"packageManager\": { \"type\": \"yarn\", \"version\": \"3 1 1\" }, \"monorepo\": \"Nx\", \"framework\": { \"name\": \"@storybook/react-vite\", \"options\": {} }, \"builder\": \"@storybook/builder-vite\", \"renderer\": \"@storybook/react\", \"storybookVersion\": \"9 0 0\", \"storybookVersionSpecifier\": \"^9 00\",\n\"language\": \"typescript\",\n\"storybookPackages\": {\n\"@storybook/addon-docs/blocks\": {\n\"version\": \"9 0 0\"\n},\n\"@storybook/react\": {\n\"version\": \"9 0 0\"\n},\n\"@storybook/react-vite\": {\n\"version\": \"9 0 0\"\n},\n\"storybook\": {\n\"version\": \"9 0 0\"\n}\n},\n\"addons\": {\n\"@storybook/addon-onboarding\": {\n\"version\": \"1 0 6\"\n}\n}\n}\n}\nAdditionally, if Storybook's guided tour is enabled, it will generate the following output:\n{\n\"eventType\": \"addon-onboarding\",\n\"payload\": {\n\"step\": \"1:Welcome\",\n\"addonVersion\": \"1 0 6\"\n},\n\"metadata\": {\n// See above for metadata that's collected }\n}\nWill this data be shared The data we collect is anonymous, not traceable to the source, and only meaningful in aggregate form No data we collect is personally identifiable In the future, we plan to share relevant data with the community through public dashboards (or similar data representation formats) How to opt-out\nYou may opt out of the telemetry within your Storybook configuration by setting the disableTelemetry configuration element to true storybook/main",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 650728,
      "relative_path": "documentation\\storybook\\_docs_configure_telemetry.html",
      "source_type": "documentation"
    },
    "token_count": 506,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "c680a58db865a28c06c5a2e222bddb6c",
    "source_file": "corpus\\documentation\\storybook\\_docs_configure_telemetry.html",
    "source_type": "documentation",
    "title": "Telemetry | Storybook docs",
    "content": "that's collected } } Will this data be shared The data we collect is anonymous, not traceable to the source, and only meaningful in aggregate form No data we collect is personally identifiable In the future, we plan to share relevant data with the community through public dashboards (or similar data representation formats) How to opt-out You may opt out of the telemetry within your Storybook configuration by setting the disableTelemetry configuration element to true storybook/maintsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { StorybookConfig } from '@storybook/your-framework';\nconst config: StorybookConfig = {\nframework: '@storybook/your-framework',\nstories: [' /src/**/* mdx', ' /src/**/* stories @(js|jsx|mjs|ts|tsx)'],\ncore: {\ndisableTelemetry: true, // 👈 Disables telemetry\n},\n};\nexport default config;\nIf necessary, you can also turn off telemetry via the command line with the --disable-telemetry flag npmnpm run storybook -- --disable-telemetry\nOr via the STORYBOOK_DISABLE_TELEMETRY environment variable STORYBOOK_DISABLE_TELEMETRY=1 yarn storybook\n💡There is a boot event containing no metadata (used to ensure the telemetry is working) It is sent prior to evaluating your Storybook configuration file (i e , main js|ts), so it is unaffected by the disableTelemetry option If you want to ensure that the event is not sent, use the STORYBOOK_DISABLE_TELEMETRY environment variable Crash reports (disabled by default)\nIn addition to general usage telemetry, you may also choose to share crash reports Storybook will then sanitize the error object (removing all user paths) and append it to the telemetry event To enable crash reporting, you can set the enableCrashReports configuration element to true storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { StorybookConfig } from '@storybook/your-framework';\nconst config: StorybookConfig = {\nframework: '@storybook/your-framework',\nstories: [' /src/**/* mdx', ' /src/**/* stories",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 650728,
      "relative_path": "documentation\\storybook\\_docs_configure_telemetry.html",
      "source_type": "documentation"
    },
    "token_count": 467,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "d31508e3fda21124e3f2424175715a5d",
    "source_file": "corpus\\documentation\\storybook\\_docs_configure_telemetry.html",
    "source_type": "documentation",
    "title": "Telemetry | Storybook docs",
    "content": "you may also choose to share crash reports Storybook will then sanitize the error object (removing all user paths) and append it to the telemetry event To enable crash reporting, you can set the enableCrashReports configuration element to true storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { StorybookConfig } from '@storybook/your-framework'; const config: StorybookConfig = { framework: '@storybook/your-framework', stories: [' /src/**/* mdx', ' /src/**/* stories@(js|jsx|mjs|ts|tsx)'],\ncore: {\nenableCrashReports: true, // 👈 Appends the crash reports to the telemetry events\n},\n};\nexport default config;\nYou can also enable crash reporting via the command line with the --enable-crash-reports flag npmnpm run storybook -- --enable-crash-reports\nOr by setting the STORYBOOK_ENABLE_CRASH_REPORTS environment variable to 1 STORYBOOK_ENABLE_CRASH_REPORTS=1 yarn storybook\nEnabling any of the options will generate the following item in the telemetry event:\n{\nstack: 'Error: Your button is not working\\n' +\n'    at Object <anonymous> ($SNIP/test js:39:27)\\n' +\n'    at Module _compile (node:internal/modules/cjs/loader:1103:14)\\n' +\n'    at Object Module _extensions js (node:internal/modules/cjs/loader:1157:10)\\n' +\n'    at Module load (node:internal/modules/cjs/loader:981:32)\\n' +\n'    at Function Module _load (node:internal/modules/cjs/loader:822:12)\\n' +\n'    at Function executeUserEntryPoint [as runMain] (node:internal/modules/run_main:77:12)\\n' +\n'    at node:internal/main/run_main_module:17:47',\nmessage: 'Your button is not working'\n}\nWas this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 650728,
      "relative_path": "documentation\\storybook\\_docs_configure_telemetry.html",
      "source_type": "documentation"
    },
    "token_count": 491,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "0f351bdf37fda193cbe766b11de09705",
    "source_file": "corpus\\documentation\\storybook\\_docs_contribute_code.html",
    "source_type": "documentation",
    "title": "Code contributions | Storybook docs",
    "content": "Code contributions | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Contribute » CodeDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQCode contributionsContribute a new feature or bug fix to Storybook's monorepo This page outlines how to get your environment set up to contribute code Prerequisites\nEnsure you have Node version 18 installed (suggestion: v18 16 0) If you're working with Windows, all commands should be run in a terminal with administrator privileges Initial setup\nStart by forking the Storybook monorepo and cloning it locally git clone https://github com/your-username/storybook git\ncd storybook\nStorybook uses the Yarn package manager Use Corepack to set up the correct version for use with Storybook corepack enable\nRun your first sandbox\nStorybook development happens in a set of sandboxes which are templated Storybook environments corresponding to different user setups Within each sandbox, we inject a set of generalized stories that allow us to test core features and addons in all such environments To run a sandbox locally, you can use the start command:\nyarn start\nIt will install the required prerequisites, build the code, create and link a starter example based on a Vite React setup and finally start the Storybook server If all goes well, you should see the sandbox running",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 630017,
      "relative_path": "documentation\\storybook\\_docs_contribute_code.html",
      "source_type": "documentation"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "51ad9375f1b2a86ca4f04b70788dcadc",
    "source_file": "corpus\\documentation\\storybook\\_docs_contribute_code.html",
    "source_type": "documentation",
    "title": "Code contributions | Storybook docs",
    "content": "different user setups Within each sandbox, we inject a set of generalized stories that allow us to test core features and addons in all such environments To run a sandbox locally, you can use the start command: yarn start It will install the required prerequisites, build the code, create and link a starter example based on a Vite React setup and finally start the Storybook server If all goes well, you should see the sandbox runningRunning a different sandbox template\nBy default, the start command is configured to initialize a Vite-based React template If you're planning on working on a different renderer instead, you can do so as well Start by running the task command as follows:\nyarn task\nWhen prompted, answer the questions as accurately as possible to allow Storybook to determine your goals After answering these questions, you should see the entire command with the options you've selected should you require to re-run it 💡The yarn task command takes a few development shortcuts that can catch you off guard when switching branches and may require you to re-run both the install and compile tasks You can speed up the process by running the command with the start-from=install flag Running tests\nAfter successfully running your first sandbox, you should have a fully functional Storybook version built on your local machine Before jumping onto any code changes, verifying everything is working is essential—specifically, the test suite Run the following command to execute the tests:\nyarn test\nStart developing\nNow that you've verified your setup, it's time to jump into code The simplest way is to run one of the sandboxes in one terminal window and the interactive build process in a separate terminal Assuming you're still running the Vite-based React sandbox initialized after running the yarn start command, open a new terminal window and navigate to the code directory of the Storybook monorepo Then, create a new branch for your contribution by running the following command:\ngit checkout -b my-first-storybook-contribution\nLastly, run the build process with the following:\nyarn build\nWhen prompted to start the build process in watch mode, answer yes to develop in interactive mode Afterward, choose which packages you want to build For example, if you're going to work on a feature for @storybook/addon-docs, you might want to select both @storybook/addon-docs and storybook 💡Build's watch mode is great for interactive development However, for performance reasons, it only transpiles your code and doesn't execute the TypeScript compiler",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 630017,
      "relative_path": "documentation\\storybook\\_docs_contribute_code.html",
      "source_type": "documentation"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "a760922a4a6c96933f31c69df6429732",
    "source_file": "corpus\\documentation\\storybook\\_docs_contribute_code.html",
    "source_type": "documentation",
    "title": "Code contributions | Storybook docs",
    "content": "build process with the following: yarn build When prompted to start the build process in watch mode, answer yes to develop in interactive mode Afterward, choose which packages you want to build For example, if you're going to work on a feature for @storybook/addon-docs, you might want to select both @storybook/addon-docs and storybook 💡Build's watch mode is great for interactive development However, for performance reasons, it only transpiles your code and doesn't execute the TypeScript compilerIf something isn't working as expected, try running the build command WITHOUT enabling watch mode: it will re-generate TypeScript types and perform automatic type checking for you If the work you'll be doing affects the Preview (the innermost Storybook iframe, where the stories are displayed), it will automatically refresh one to two seconds after you save Otherwise, if it affects the Manager (the outermost Storybook iframe where the addons are displayed), you'll need to refresh manually after saving Check your work\nWhen you're done coding, add documentation and tests as appropriate That simplifies the PR review process, which means your code will get merged faster Add stories\nAdding a story or set of generic stories to our suite helps you test your work Assuming you're working on one of the essential features, there's a chance that a complete set of stories already exists Check the addon's template/stories directory that documents how it's supposed to work and add your stories there If you're modifying something related to a specific renderer (e g , React, Vue 3, etc ), it will also have a similar template/stories directory in which you'll need to add your stories Add tests\nUnit tests ensure that Storybook doesn't break accidentally If your code can regress in non-obvious ways, include unit tests with your pull request Use the following naming convention:\n+-- parentFolder\n|   +-- [filename] ts\n|   +-- [filename] test ts\nEnd-to-end tests (e2e)\nStorybook's monorepo is set up to rely on end-to-end testing with Playwright during CI To help with testing, we encourage running this test suite before submitting your contribution",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 630017,
      "relative_path": "documentation\\storybook\\_docs_contribute_code.html",
      "source_type": "documentation"
    },
    "token_count": 439,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "23fb2da07e828a4a1ea993b946eceb4e",
    "source_file": "corpus\\documentation\\storybook\\_docs_contribute_code.html",
    "source_type": "documentation",
    "title": "Code contributions | Storybook docs",
    "content": "to add your stories Add tests Unit tests ensure that Storybook doesn't break accidentally If your code can regress in non-obvious ways, include unit tests with your pull request Use the following naming convention: +-- parentFolder | +-- [filename] ts | +-- [filename] test ts End-to-end tests (e2e) Storybook's monorepo is set up to rely on end-to-end testing with Playwright during CI To help with testing, we encourage running this test suite before submitting your contributionTo run an e2e test against a sandbox, you can use the e2e-tests task:\nyarn task --task e2e-tests --template=react-vite/default-ts --start-from=auto\nIf there are issues and you'd like to debug them, you can pass a DEBUG=1 environment variable, and Playwright will run in watch mode DEBUG=1 yarn task --task e2e-tests --template=react-vite/default-ts --start-from=auto\nSubmit a pull request\nBefore submitting your contribution, run the test suite one last time with the following:\nyarn test\n💡Storybook relies on Vitest as part of it's testing suite During the test run, if you spot that snapshot tests are failing, re-run the command with the -u flag to update them Doing this prevents last-minute bugs and is a great way to merge your contribution faster once you submit your pull request Failing to do so will lead to one of the maintainers mark the pull request with the Work in Progress label until all tests pass Target next branch\nOnce the test suite finishes, it's time to commit, push and open a pull request against Storybook's next (default) branch This branch is where all active development happens and is associated with the latest prerelease version (e g , 7 0 0-alpha 47) If your contribution focuses on a bugfix and you want it featured in the next stable release, mention it in the pull request description We'll try to patch it if it appears non-disruptive and fixes a critical bug Useful resources when working with forks\nSync a fork\nMerge an upstream repository into your fork\nReproducing job failures\nAfter creating your PR, if one of the CI jobs failed, when checking the logs of that job, you will see that it printed a message explaining how to reproduce the task locally",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 630017,
      "relative_path": "documentation\\storybook\\_docs_contribute_code.html",
      "source_type": "documentation"
    },
    "token_count": 485,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "9fcc602eb68a8fcbba297a27c5627115",
    "source_file": "corpus\\documentation\\storybook\\_docs_contribute_code.html",
    "source_type": "documentation",
    "title": "Code contributions | Storybook docs",
    "content": "next stable release, mention it in the pull request description We'll try to patch it if it appears non-disruptive and fixes a critical bug Useful resources when working with forks Sync a fork Merge an upstream repository into your fork Reproducing job failures After creating your PR, if one of the CI jobs failed, when checking the logs of that job, you will see that it printed a message explaining how to reproduce the task locallyTypically that involves running the task against the right template:\nyarn task --task e2e-tests --template=react-vite/default-ts --start-from=install\nTypically it is a good idea to start from the install task to ensure your local code is completely up to date If you reproduce the failure, you can try and make fixes, compile them with build, then rerun the task with --start-from=auto 💡The default instructions run the code in \"linked\" mode, meaning built changes to Storybook library code will be reflected in the sandbox immediately (the next time you run the task) However, CI runs in \"unlinked\" mode, which in rare cases, will behave differently If you are having trouble reproducing, try rerunning the command with the --no-link flag If you need to do that, you'll need to run it with --start-from=compile after each code change How to work with reproductions\nWe encourage bug reports to include reproductions In the same way that it's possible to develop interactively against example projects in the monorepo, it's also possible to develop against a reproduction repository To do so, run the following command in the root of the monorepo:\nnpx storybook@next link https://github com/your-username/your-project git\nThis command creates a project /storybook-repros/your-project, and automatically links it to your local Storybook code After connecting it, you should be able to run Storybook and develop as mentioned above If you already have a reproduction on your local machine, you can similarly link it to your monorepo dev setup with the --local flag:\nnpx storybook@next link --local /path/to/local-repro-directory\n💡The storybook link command relies on Yarn linking under the hood It requires your local reproduction to be using Yarn 2 or higher as well, which is the case if you've already enabled it with the storybook sandbox command per our contribution guidelines",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 630017,
      "relative_path": "documentation\\storybook\\_docs_contribute_code.html",
      "source_type": "documentation"
    },
    "token_count": 493,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "7aa1bafec467e9a06b56ed66574de5c5",
    "source_file": "corpus\\documentation\\storybook\\_docs_contribute_code.html",
    "source_type": "documentation",
    "title": "Code contributions | Storybook docs",
    "content": "develop as mentioned above If you already have a reproduction on your local machine, you can similarly link it to your monorepo dev setup with the --local flag: npx storybook@next link --local /path/to/local-repro-directory 💡The storybook link command relies on Yarn linking under the hood It requires your local reproduction to be using Yarn 2 or higher as well, which is the case if you've already enabled it with the storybook sandbox command per our contribution guidelinesThe process will fail if you're trying to link a non-Yarn 2 project Developing a template\nThe first step is to add an entry to code/lib/cli-storybook/src/sandbox-templates ts, which is the master list of all repro templates:\n'cra/default-js': {\nname: 'Create React App (Javascript)',\nscript: 'npx create-react-app ',\ninDevelopment: true,\nexpected: {\nframework: '@storybook/cra',\nrenderer: '@storybook/react',\nbuilder: '@storybook/builder-webpack5',\n},\n},\nAdd the inDevelopment flag until the PR is merged (you can fast-follow it with a second PR to remove the flag), as it'll make the development process much easier The key cra/default-js consists of two parts:\nThe prefix is the tool that was used to generate the repro app\nThe suffix is options that modify the default install, e g a specific version or options\nThe script field is what generates the application environment The argument is “the current working directory” which is auto-generated based on the key (e g repros/cra/default-js/before-storybook) The {{beforeDir}} key can also be used, which will be replaced by the path of that directory The rest of the fields are self-explanatory:\nThe skipTasks field exists because some sandboxes might not work properly in specific tasks temporarily, but we might still want to run the other tasks For instance, a bug was introduced outside of our control, which fails only in the test-runner task The name field should contain a human readable name/description of the template The expected field reflects what framework/renderer/builder we expect sb init to generate This is useful for assertions while generating sandboxes If the template is generated with a different expected framework, for instance, it will fail, serving as a way to detect regressions Running a sandbox\nIf your template has a inDevelopment flag, it will be generated (locally) as part of the sandbox process",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 630017,
      "relative_path": "documentation\\storybook\\_docs_contribute_code.html",
      "source_type": "documentation"
    },
    "token_count": 497,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "0ae8da07c309b776dcf4a15ec46729a5",
    "source_file": "corpus\\documentation\\storybook\\_docs_contribute_code.html",
    "source_type": "documentation",
    "title": "Code contributions | Storybook docs",
    "content": "task The name field should contain a human readable name/description of the template The expected field reflects what framework/renderer/builder we expect sb init to generate This is useful for assertions while generating sandboxes If the template is generated with a different expected framework, for instance, it will fail, serving as a way to detect regressions Running a sandbox If your template has a inDevelopment flag, it will be generated (locally) as part of the sandbox processYou can create the sandbox with the following command, where <template-key> is replaced by the id of the selected template e g cra/default-js:\nyarn task --task dev --template <template-key> --start-from=install\nTemplates with inDevelopment will automatically run with --no-link flag as it is required for the local template generation to work Once the PR is merged, the template will be generated on a nightly cadence and you can remove the inDevelopment flag and the sandbox will pull the code from our templates repository Troubleshooting\nyarn build --all --watch watches everything but is resource-intensiveIt's troublesome to know which packages you'll change ahead of time, and watching them can be highly demanding, even on modern machines If you're working on a powerful enough machine, you can use yarn build --all --watch instead of yarn build Learn more about contributing to Storybook\nRFC process for authoring feature requests\nCode for features and bug fixes\nFrameworks to get started with a new framework\nDocumentation for documentation improvements, typos, and clarifications\nExamples for new snippets\nWas this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 630017,
      "relative_path": "documentation\\storybook\\_docs_contribute_code.html",
      "source_type": "documentation"
    },
    "token_count": 382,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "4dd13df958d529e882f7136417007c40",
    "source_file": "corpus\\documentation\\storybook\\_docs_contribute_framework.html",
    "source_type": "documentation",
    "title": "Contributing a Storybook framework | Storybook docs",
    "content": "Contributing a Storybook framework | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Contribute » FrameworksDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQContributing a Storybook frameworkA Storybook framework is a node package that enables out-of-the-box support for either a metaframework (Next js, NuxtJS, SvelteKit) or a combination of builder (Webpack, Vite) plus renderer (React, Angular, Vue 3, web components, etc) For metaframeworks, the Storybook framework also takes care of additional configuration necessary to make Storybook behave similarly to apps generated by the metaframework For example, @storybook/nextjs recreates or mocks a number of features of Next js apps inside Storybook For your reference, you can view all of the official Storybook frameworks, including their full source code and documentation How to make a framework\n1 Decide on a package name\nThe name should start with storybook-framework- and then correspond to what your framework supports For example, a framework targeting SvelteKit would be storybook-framework-svelte-kit and a framework targeting Stencil with Vite would be storybook-framework-stencil-vite When not targeting a metaframework, the naming convention is storybook-framework-<renderer>-<builder> 2",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 569324,
      "relative_path": "documentation\\storybook\\_docs_contribute_framework.html",
      "source_type": "documentation"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "f014bec99648e7df37f268597ff2ad7d",
    "source_file": "corpus\\documentation\\storybook\\_docs_contribute_framework.html",
    "source_type": "documentation",
    "title": "Contributing a Storybook framework | Storybook docs",
    "content": "inside Storybook For your reference, you can view all of the official Storybook frameworks, including their full source code and documentation How to make a framework 1 Decide on a package name The name should start with storybook-framework- and then correspond to what your framework supports For example, a framework targeting SvelteKit would be storybook-framework-svelte-kit and a framework targeting Stencil with Vite would be storybook-framework-stencil-vite When not targeting a metaframework, the naming convention is storybook-framework-<renderer>-<builder> 2Consider what your framework will need to do\nThe goal is to make Storybook behave—out-of-the-box—as similarly as possible to the metaframework or builder-renderer combination you’re targeting For metaframeworks, this means attempting to recreate any builder or babel configuration provided by the metaframework You should try to do so in a way that respects the user's existing project configuration as much as possible The library or libraries your framework supports may have different major versions available Consider which versions of each library your framework will support You will need to account for the changes within those different versions or split your framework into different versions/packages itself to support each library version To speed up maintenance, please consider adding integration tests for the various library versions your framework supports 3 Write the documentation\nBefore writing any code, write a helpful README that contains installation instructions and a list of available features Use the README for @storybook/nextjs as a template Writing the documentation first helps guide your other work 4 Author the framework itself\nA framework can contain the following parts:\npackage json (example)\nBecause a framework is a node package, it must contain a package json file Here’s a template you can use to start:\npackage json templatepackage json {\n\"name\": \"<your-framework-name>\",\n\"version\": \"1 0 0\",\n\"description\": \"Storybook for <meta-framework-name> or <renderer> & <builder>\",\n\"keywords\": [\n\"Storybook\",\n\"<meta-framework-name>\",\n\"<renderer>\",\n\"<builder>\",\n\"<anything>\",\n\"<else>\",\n\"<relevant>\"\n],\n\"homepage\": \"<your package's homepage>\",\n\"bugs\": {\n\"url\": \"https://github com/<your-org>/<your-repo>/issues\"\n},\n\"repository\": {\n\"type\": \"git\",\n\"url\": \"https://github com/<your-org>/<your-repo> git\",\n\"directory\": \"<path/to/your/framework>\"\n},\n\"license\": \"MIT\",\n\"exports\": {\n\"",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 569324,
      "relative_path": "documentation\\storybook\\_docs_contribute_framework.html",
      "source_type": "documentation"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "c42d985ffcd7631270d1522a2cf1410f",
    "source_file": "corpus\\documentation\\storybook\\_docs_contribute_framework.html",
    "source_type": "documentation",
    "title": "Contributing a Storybook framework | Storybook docs",
    "content": "a framework is a node package, it must contain a package json file Here’s a template you can use to start: package json templatepackage json { \"name\": \"<your-framework-name>\", \"version\": \"1 0 0\", \"description\": \"Storybook for <meta-framework-name> or <renderer> & <builder>\", \"keywords\": [ \"Storybook\", \"<meta-framework-name>\", \"<renderer>\", \"<builder>\", \"<anything>\", \"<else>\", \"<relevant>\" ], \"homepage\": \"<your package's homepage>\", \"bugs\": { \"url\": \"https://github com/<your-org>/<your-repo>/issues\" }, \"repository\": { \"type\": \"git\", \"url\": \"https://github com/<your-org>/<your-repo> git\", \"directory\": \"<path/to/your/framework>\" }, \"license\": \"MIT\", \"exports\": { \"\": {\n\"types\": \" /dist/index d ts\",\n\"require\": \" /dist/index js\",\n\"import\": \" /dist/index mjs\"\n},\n\" /preset\": {\n\"types\": \" /dist/preset d ts\",\n\"require\": \" /dist/preset js\",\n\"import\": \" /dist/preset mjs\"\n},\n\" /preview js\": {\n\"types\": \" /dist/preview d ts\",\n\"require\": \" /dist/preview js\",\n\"import\": \" /dist/preview mjs\"\n},\n\" /package json\": \" /package json\"\n},\n\"main\": \"dist/index js\",\n\"module\": \"dist/index mjs\",\n\"types\": \"dist/index d ts\",\n\"files\": [\"dist/**/*\", \"types/**/*\", \"README md\", \"* js\", \"* d ts\"],\n\"scripts\": {\n\"check\": \"tsc --noEmit\",\n\"test\": \" \"\n},\n\"dependencies\": {\n\"storybook\": \"^9 0 0\",\n\"@storybook/<builder>\": \"^9 0 0\",\n\"@storybook/<renderer>\": \"^9 0 0\"\n},\n\"devDependencies\": {\n\"typescript\": \"x x x\",\n\"<meta-framework>\": \"^x x x\",\n\"<builder>\": \"^x x x\"\n},\n\"peerDependencies\": {\n\"<meta-framework>\": \"^x x x || ^x x x\",\n\"<renderer>\": \"^x x x || ^x x x\",\n\"<builder>\": \"^x x x\"\n},\n\"engines\": {\n\"node\": \">=20 0",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 569324,
      "relative_path": "documentation\\storybook\\_docs_contribute_framework.html",
      "source_type": "documentation"
    },
    "token_count": 501,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "762a0a27c7df162b4ecf184af7fea3c8",
    "source_file": "corpus\\documentation\\storybook\\_docs_contribute_framework.html",
    "source_type": "documentation",
    "title": "Contributing a Storybook framework | Storybook docs",
    "content": "[\"dist/**/*\", \"types/**/*\", \"README md\", \"* js\", \"* d ts\"], \"scripts\": { \"check\": \"tsc --noEmit\", \"test\": \" \" }, \"dependencies\": { \"storybook\": \"^9 0 0\", \"@storybook/<builder>\": \"^9 0 0\", \"@storybook/<renderer>\": \"^9 0 0\" }, \"devDependencies\": { \"typescript\": \"x x x\", \"<meta-framework>\": \"^x x x\", \"<builder>\": \"^x x x\" }, \"peerDependencies\": { \"<meta-framework>\": \"^x x x || ^x x x\", \"<renderer>\": \"^x x x || ^x x x\", \"<builder>\": \"^x x x\" }, \"engines\": { \"node\": \">=20 00\"\n},\n\"publishConfig\": {\n\"access\": \"public\"\n}\n}A few notes on some of those properties:\nexports: The root, /preset, and package json exports are required If your framework has a preview js, then that is required as well types: We strongly encourage you to author your framework in TypeScript and distribute the types dependencies and devDependencies: These are just examples Yours may look quite different peerDependencies: If your framework provides support for multiple versions of the libraries you’re targeting, be sure that is represented here preset js (example)\nThe preset API is where you will configure the Storybook core (which builder and renderer are used by your framework), the builder (via either the webpackFinal or viteFinal export), babel (via the babel export), any necessary addons, and any available options for your framework preview js (example)\nThe (optional) preview API is where you configure the rendering of stories, such as global decorators or initializing some runtime config needed for your framework to behave as expected If your framework requires this file, note that you also need to configure the previewAnnotations in preset js types ts (example)\nIf you author your framework in TypeScript (recommended), you should export the type for StorybookConfig which reflects the available options of your framework 5 Test your framework\nTest it in a fresh project using a Storybook set up as close as possible to your framework For example, for @storybook/nextjs, which uses React and Webpack5, start with a project that uses @storybook/react and @storybook/builder-webpack5 Follow the installation instructions from your README and ensure everything works as expected",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 569324,
      "relative_path": "documentation\\storybook\\_docs_contribute_framework.html",
      "source_type": "documentation"
    },
    "token_count": 499,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "324618148d1bb7e09ff64440d1edf9ae",
    "source_file": "corpus\\documentation\\storybook\\_docs_contribute_framework.html",
    "source_type": "documentation",
    "title": "Contributing a Storybook framework | Storybook docs",
    "content": "If you author your framework in TypeScript (recommended), you should export the type for StorybookConfig which reflects the available options of your framework 5 Test your framework Test it in a fresh project using a Storybook set up as close as possible to your framework For example, for @storybook/nextjs, which uses React and Webpack5, start with a project that uses @storybook/react and @storybook/builder-webpack5 Follow the installation instructions from your README and ensure everything works as expectedRemember to test the various versions, configs, and options for the libraries you’re supporting 6 Let us know Once it's fully tested and released, please let us know about your framework by either announcing it in the #showcase Discord channel or tweeting it and mentioning @storybookjs It's our hope that well-made community frameworks can eventually move into the Storybook codebase and be considered \"officially\" supported Learn more about contributing to Storybook\nRFC process for authoring feature requests\nCode for features and bug fixes\nFrameworks to get started with a new framework\nDocumentation for documentation improvements, typos, and clarifications\nExamples for new snippets\nWas this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 569324,
      "relative_path": "documentation\\storybook\\_docs_contribute_framework.html",
      "source_type": "documentation"
    },
    "token_count": 299,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "4219d5f149f98c8b15bcc1809299f727",
    "source_file": "corpus\\documentation\\storybook\\_docs_contribute_how-to-reproduce.html",
    "source_type": "documentation",
    "title": "Create a reproduction | Storybook docs",
    "content": "Create a reproduction | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Contribute » ReproduceDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQCreate a reproductionA reproducible test case lets you isolate the cause of a problem, which is the first step towards fixing it This page outlines how to get set up to create a reproduction Why should you create a reproduction A reproducible test case is a great way to share a specific set of conditions that causes a bug It allows both the maintainers and the community to verify, narrow down the cause of the problem and help you fix the issue Pre-requisites\nMake sure you have:\nInstalled Yarn on your local development machine A GitHub account for hosting the reproduction's code A Chromatic account for publishing your Storybook Initial setup\nFirst, open a terminal and run the following command:\nnpx storybook@next sandbox\n💡You can append a template name in the command to get filtered results (e g , npx storybook@next sandbox react) Next, choose the template you want to work with:\nFinally, enter a location for your reproduction:\n💡If you don't provide a full path for the reproduction it will be generated in the current directory If everything worked as it should, you should have a fully functional Storybook set up in your local environment",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 510540,
      "relative_path": "documentation\\storybook\\_docs_contribute_how-to-reproduce.html",
      "source_type": "documentation"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "50f7ce3bd97e55838d70e1d5f07a22f7",
    "source_file": "corpus\\documentation\\storybook\\_docs_contribute_how-to-reproduce.html",
    "source_type": "documentation",
    "title": "Create a reproduction | Storybook docs",
    "content": "npx storybook@next sandbox 💡You can append a template name in the command to get filtered results (e g , npx storybook@next sandbox react) Next, choose the template you want to work with: Finally, enter a location for your reproduction: 💡If you don't provide a full path for the reproduction it will be generated in the current directory If everything worked as it should, you should have a fully functional Storybook set up in your local environmentThird-party dependencies & addons\nBefore adding code, install and configure any necessary packages For example, if you run into a problem with a CSS framework (e g , Tailwind), you should install and configure it Install and configure any Storybook addons that relate to the issue (e g ,@storybook/addon-a11y) Add stories\nAny Storybook reproduction wouldn't be complete without stories To help fix your issue faster, we encourage you to include the minimum amount of stories that will replicate your issue Host\nWhen you've finished your work, you'll need to host your reproduction Start by signing into GitHub com and create a new repository Then, follow GitHub's instructions to set up the repository 💡Don't forget to replace your-username with your own account name Publish\nAn excellent way to check your reproduction is to have it deployed online We recommend Chromatic, a free publishing service created by the Storybook maintainers It allows you to deploy and host your reproduction safely and securely in the cloud Helpful resources when working with Chromatic\nPublish Storybook\nSetup Chromatic\nAutomate Chromatic with continuous integration\nSubmit the issue\nFinally, create your issue in the Storybook issue tracker, go through the required steps, and provide a detailed description of the problem Add the GitHub repository and deployed reproduction to help with the triage process Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 510540,
      "relative_path": "documentation\\storybook\\_docs_contribute_how-to-reproduce.html",
      "source_type": "documentation"
    },
    "token_count": 435,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c22467c35b3b666bc234ac4207f1a06d",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials.html",
    "source_type": "documentation",
    "title": "Essentials | Storybook docs",
    "content": "Essentials | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs EssentialsDocs » EssentialsDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQEssentialsStorybook essentials is a set of tools that help you build, test, and document your components within Storybook It includes the following:\nActions\nBackgrounds\nControls\nHighlight\nMeasure & outline\nToolbars & globals\nViewport\nConfiguration\nEssentials is \"zero-config” It comes with a recommended configuration out of the box Many of the features above can be configured via parameters See each feature's documentation (linked above) for more details Disabling features\nIf you need to disable any of the essential features, you can do it by changing your storybook/main js|ts file For example, if you wanted to disable the backgrounds feature, you would apply the following change to your Storybook configuration: storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { StorybookConfig } from '@storybook/your-framework';\nconst config: StorybookConfig = {\nframework: '@storybook/your-framework',\nstories: [' /src/**/* mdx', ' /src/**/* stories",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 495765,
      "relative_path": "documentation\\storybook\\_docs_essentials.html",
      "source_type": "documentation"
    },
    "token_count": 479,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "6c2178d8ad6b551460d30003c7cdfa4b",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials.html",
    "source_type": "documentation",
    "title": "Essentials | Storybook docs",
    "content": "you need to disable any of the essential features, you can do it by changing your storybook/main js|ts file For example, if you wanted to disable the backgrounds feature, you would apply the following change to your Storybook configuration: storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { StorybookConfig } from '@storybook/your-framework'; const config: StorybookConfig = { framework: '@storybook/your-framework', stories: [' /src/**/* mdx', ' /src/**/* stories@(js|jsx|mjs|ts|tsx)'],\nfeatures: {\nbackgrounds: false, // 👈 disable the backgrounds feature\n},\n};\nexport default config;\n💡You can use the following keys for each individual feature: actions, backgrounds, controls, highlight, measure, outline, toolbars, and viewport Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 495765,
      "relative_path": "documentation\\storybook\\_docs_essentials.html",
      "source_type": "documentation"
    },
    "token_count": 259,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "ff8252b494da3a7365a593d9cb6fc096",
    "source_file": "corpus\\documentation\\storybook\\_docs_contribute_RFC.html",
    "source_type": "documentation",
    "title": "RFC process | Storybook docs",
    "content": "RFC process | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Contribute » RFC processDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQRFC processThe RFC (Request for Comment) process is intended to provide a consistent and controlled path for new features to enter the project It helps ensure that new features are well-designed, well-implemented, and well-tested, and they do not conflict with the project's overall direction and scope Goal\nMany changes, such as bug fixes and documentation improvements, can be implemented and reviewed via the normal GitHub pull request workflow Some changes, however, are considered “substantial”, and we ask that these undergo a design process, solicit community input, and reach a consensus among the Storybook core team The purpose of the RFC (Request for Comment) process is to:\nProvide a transparent system for proposing new feature ideas Establish a reliable and well-regulated process for introducing new features into the project Provide a way for the community to participate in developing new features “Feature Request” vs “RFC”\nA feature request is a straightforward and relatively informal way for Storybook users to suggest a new feature or enhancement to the project While feature requests can provide valuable insights and ideas, they typically do not involve an in-depth design process or require consensus among the core team",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 498072,
      "relative_path": "documentation\\storybook\\_docs_contribute_RFC.html",
      "source_type": "documentation"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "d3b39f126f5f888249ac49e1426283b2",
    "source_file": "corpus\\documentation\\storybook\\_docs_contribute_RFC.html",
    "source_type": "documentation",
    "title": "RFC process | Storybook docs",
    "content": "a reliable and well-regulated process for introducing new features into the project Provide a way for the community to participate in developing new features “Feature Request” vs “RFC” A feature request is a straightforward and relatively informal way for Storybook users to suggest a new feature or enhancement to the project While feature requests can provide valuable insights and ideas, they typically do not involve an in-depth design process or require consensus among the core teamFeature requests are usually open to discussion and may or may not be implemented based on factors like popularity, feasibility, and alignment with the project's goals On the other hand, an RFC is a more formalized and structured process for proposing substantial changes or additions to the project It involves following a defined set of steps to ensure that the proposed feature or modification receives proper consideration, design, and feedback RFCs are typically used for changes that significantly impact the project, such as introducing new API functionality, removing existing features, or establishing new usage conventions The RFC process aims to foster discussions, gather feedback from a wider audience, and reach consensus among the core team before integrating the proposed change into the project Accepted RFCs are more likely to be implemented than regular feature requests The RFC lifecycle\n1 Status: Proposed\nOpen a new GitHub discussion in the “RFC” category Fill out the form as instructed Details matter: RFCs that do not present convincing motivation, demonstrate a lack of understanding of the design's impact, or are disingenuous about the drawbacks or alternatives tend to be poorly received 2 Status: In review\nRFCs tend to remain in this stage for a while, giving the community and core team members time to weigh in During this period, the author of an RFC should be prepared to revise the proposal, integrate feedback, and build consensus RFCs that have broad support are much more likely to make progress than those that don't receive any comments Every week, the Storybook core team conducts a triage meeting to review open RFCs as part of the meeting's agenda The event is publicly scheduled in the Storybook Discord and held in the Storybook Discord's Watercooler channel We invite the RFC author(s) and interested members of the community to participate and engage in a more detailed discussion of the RFC If a core team member deems it necessary, they will be assigned as the \"champion\" of the RFC The champion will collaborate with the RFC author and assist them throughout the RFC process 3",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 498072,
      "relative_path": "documentation\\storybook\\_docs_contribute_RFC.html",
      "source_type": "documentation"
    },
    "token_count": 484,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "e7a2f7be10ee5a07630633d0ac24235b",
    "source_file": "corpus\\documentation\\storybook\\_docs_contribute_RFC.html",
    "source_type": "documentation",
    "title": "RFC process | Storybook docs",
    "content": "meeting's agenda The event is publicly scheduled in the Storybook Discord and held in the Storybook Discord's Watercooler channel We invite the RFC author(s) and interested members of the community to participate and engage in a more detailed discussion of the RFC If a core team member deems it necessary, they will be assigned as the \"champion\" of the RFC The champion will collaborate with the RFC author and assist them throughout the RFC process 3Status: accepted/rejected\nEventually, the team will decide whether the RFC is a candidate for inclusion in Storybook On the other hand, an RFC may be rejected by the team after a public discussion has settled and comments have been made summarizing the rationale for rejection Implementing an accepted RFC\nThe author of an RFC is not obligated to implement it Of course, the RFC author (like any other developer) is welcome to post an implementation for review after the RFC has been accepted However, note that the “accepted” status does not indicate priority nor whether it’s being actively worked on If you are interested in implementing an \"active\" RFC, but cannot determine if someone else is already working on it, feel free to ask (e g , by leaving a comment on the associated issue) This RFC process took heavy inspiration from the RFC processes from Rust and Gatsby Learn more about contributing to Storybook\nRFC process for authoring feature requests\nCode for features and bug fixes\nFrameworks to get started with a new framework\nDocumentation for documentation improvements, typos, and clarifications\nExamples for new snippets\nWas this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 498072,
      "relative_path": "documentation\\storybook\\_docs_contribute_RFC.html",
      "source_type": "documentation"
    },
    "token_count": 382,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "70287416c382ae2180c5627ffecdc5ca",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_actions.html",
    "source_type": "documentation",
    "title": "Actions | Storybook docs",
    "content": "Actions | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Essentials » ActionsDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQActionsReactVueAngularWeb ComponentsMoreActions are used to display data received by event handler (callback) arguments in your stories Action args\nActions work via supplying special Storybook-generated “action” arguments (referred to as \"args\" for short) to your stories There are two ways to get an action arg:\nVia storybook/test fn spy function\nThe recommended way to write actions is to use the fn utility from storybook/test to mock and spy args This is very useful for writing interaction tests You can mock your component's methods by assigning them to the fn() function:\nButton stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { fn } from 'storybook/test';\nimport { Button } from '",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 687861,
      "relative_path": "documentation\\storybook\\_docs_essentials_actions.html",
      "source_type": "documentation"
    },
    "token_count": 434,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "5da8583832c05216db1ae8994b6b267a",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_actions.html",
    "source_type": "documentation",
    "title": "Actions | Storybook docs",
    "content": "The recommended way to write actions is to use the fn utility from storybook/test to mock and spy args This is very useful for writing interaction tests You can mock your component's methods by assigning them to the fn() function: Button stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework'; import { fn } from 'storybook/test'; import { Button } from '/Button';\nconst meta = {\ncomponent: Button,\n// 👇 Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked\nargs: { onClick: fn() },\n} satisfies Meta<typeof Button>;\nexport default meta;\nIf your component calls an arg (because of either the user's interaction or the play function) and that arg is spied on , the event will show up in the action panel:\nAutomatically matching args\nAnother option is to use a global parameter to match all argTypes that match a certain pattern The following configuration automatically creates actions for each on argType (which you can either specify manually or can be inferred automatically) This is quite useful when your component has dozens (or hundreds) of methods and you do not want to manually apply the fn utility for each of those methods However, this is not the recommended way of writing actions That's because automatically inferred args are not available as spies in your play function If you use argTypesRegex and your stories have play functions, you will need to also define args with the fn utility to test them in your play function storybook/preview tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Preview } from '@storybook/your-framework';\nconst preview: Preview = {\nparameters: {\nactions: { argTypesRegex: '^on *' },\n},\n};\nexport default preview;\nIf you need more granular control over which argTypes are matched, you can adjust your stories and include the argTypesRegex parameter For example:\nButton stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { Button } from '",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 687861,
      "relative_path": "documentation\\storybook\\_docs_essentials_actions.html",
      "source_type": "documentation"
    },
    "token_count": 481,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "e03076bd4172c2e9d7cbadaa043924d8",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_actions.html",
    "source_type": "documentation",
    "title": "Actions | Storybook docs",
    "content": "{ Preview } from '@storybook/your-framework'; const preview: Preview = { parameters: { actions: { argTypesRegex: '^on *' }, }, }; export default preview; If you need more granular control over which argTypes are matched, you can adjust your stories and include the argTypesRegex parameter For example: Button stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework'; import { Button } from '/Button';\nconst meta = {\ncomponent: Button,\nparameters: { actions: { argTypesRegex: '^on *' } },\n} satisfies Meta<typeof Button>;\nexport default meta;\nThis will bind a standard HTML event handler to the outermost HTML element rendered by your component and trigger an action when the event is called for a given selector The format is <eventname> <selector> The selector is optional; it defaults to all elements API\nParameters\nThis contributes the following parameters to Storybook, under the actions namespace:\nargTypesRegex\nType: string\nCreate actions for each arg that matches the regex Please note the significant limitations of this approach, as described above disable\nType: boolean\nDisable the action panel This parameter is most useful to allow overriding at more specific levels For example, if this parameter is set to true at the project level, it could then be re-enabled by setting it to false at the meta (component) or story level Exports\nimport { action } from 'storybook/actions';\naction\nType: (name : string) => void\nAllows you to create an action that appears in the actions panel of the Storybook UI when clicked The action function takes an optional name parameter, which is used to identify the action in the UI Button stories tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { action } from 'storybook/actions';\nimport Button from ' /Button';\nconst meta = {\ncomponent: Button,\nargs: {\n// 👇 Create an action that appears when the onClick event is fired\nonClick: action('on-click'),\n},\n} satisfies Meta<typeof Button>;\nexport default meta;\nWas this page useful",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 687861,
      "relative_path": "documentation\\storybook\\_docs_essentials_actions.html",
      "source_type": "documentation"
    },
    "token_count": 477,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "32f15c1b266fb844d36247bd883f2768",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_actions.html",
    "source_type": "documentation",
    "title": "Actions | Storybook docs",
    "content": "identify the action in the UI Button stories tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework'; import { action } from 'storybook/actions'; import Button from ' /Button'; const meta = { component: Button, args: { // 👇 Create an action that appears when the onClick event is fired onClick: action('on-click'), }, } satisfies Meta<typeof Button>; export default meta; Was this page useful👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 687861,
      "relative_path": "documentation\\storybook\\_docs_essentials_actions.html",
      "source_type": "documentation"
    },
    "token_count": 179,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "4489457bf28859ea8fcc02f219243fb7",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_backgrounds.html",
    "source_type": "documentation",
    "title": "Backgrounds | Storybook docs",
    "content": "Backgrounds | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Essentials » BackgroundsDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQBackgroundsReactVueAngularWeb ComponentsMoreThe backgrounds feature allows you to set the background color on which the story renders in the UI:\nConfiguration\nBy default, the backgrounds feature includes a light and dark background But you're not restricted to these backgrounds You can configure your own set of colors with the backgrounds parameter in your storybook/preview js|ts You can define the available background colors using the options property and set the initial background color using the initialGlobals property: storybook/preview tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 897926,
      "relative_path": "documentation\\storybook\\_docs_essentials_backgrounds.html",
      "source_type": "documentation"
    },
    "token_count": 386,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "73d25d19b501e56c68197161969deea2",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_backgrounds.html",
    "source_type": "documentation",
    "title": "Backgrounds | Storybook docs",
    "content": "renders in the UI: Configuration By default, the backgrounds feature includes a light and dark background But you're not restricted to these backgrounds You can configure your own set of colors with the backgrounds parameter in your storybook/preview js|ts You can define the available background colors using the options property and set the initial background color using the initialGlobals property: storybook/preview tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etcimport type { Preview } from '@storybook/your-framework';\nconst preview: Preview = {\nparameters: {\nbackgrounds: {\noptions: {\n// 👇 Default options\ndark: { name: 'Dark', value: '#333' },\nlight: { name: 'Light', value: '#F7F9F2' },\n// 👇 Add your own\nmaroon: { name: 'Maroon', value: '#400' },\n},\n},\n},\ninitialGlobals: {\n// 👇 Set the initial background color\nbackgrounds: { value: 'light' },\n},\n};\nexport default preview;\nDefining the background for a story\nThe backgrounds feature enables you to change the background color applied to a story by selecting from the list of predefined background colors in the toolbar If needed, you can set a story to default to a specific background color, by using the globals option:\nButton stories ts|tsxTypescript// Replace your-framework with the name of your framework (e g , react-vite, vue3-vite, etc )\nimport type { Meta, StoryObj } from '@storybook/your-framework';\nimport { Button } from ' /Button';\nconst meta = {\ncomponent: Button,\nglobals: {\n// 👇 Set background value for all component stories\nbackgrounds: { value: 'gray', grid: false },\n},\n} satisfies Meta<typeof Button>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const OnDark: Story = {\nglobals: {\n// 👇 Override background value for this story\nbackgrounds: { value: 'dark' },\n},\n};\nℹ️When you specify a background color for a story (or a component's stories) using globals, the color is applied and cannot be changed using the toolbar This is useful to ensure a story is always rendered on a specific background color Extending the configuration\nYou can also configure backgrounds on a per-component or per-story basis through parameter inheritance",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 897926,
      "relative_path": "documentation\\storybook\\_docs_essentials_backgrounds.html",
      "source_type": "documentation"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "5e04cacfb3e6355c2da2e383b80dc756",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_backgrounds.html",
    "source_type": "documentation",
    "title": "Backgrounds | Storybook docs",
    "content": "{ globals: { // 👇 Override background value for this story backgrounds: { value: 'dark' }, }, }; ℹ️When you specify a background color for a story (or a component's stories) using globals, the color is applied and cannot be changed using the toolbar This is useful to ensure a story is always rendered on a specific background color Extending the configuration You can also configure backgrounds on a per-component or per-story basis through parameter inheritanceTo set the available background colors, use the options property In this example, we'll adjust the colors for all of the Button component's stories:\nButton stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { Button } from ' /Button';\nconst meta = {\ncomponent: Button,\nparameters: {\nbackgrounds: {\noptions: {\n// 👇 Override the default `dark` option\ndark: { name: 'Dark', value: '#000' },\n// 👇 Add a new option\ngray: { name: 'Gray', value: '#CCC' },\n},\n},\n},\n} satisfies Meta<typeof Button>;\nexport default meta;\nDisable backgrounds\nIf you want to turn off backgrounds in a story, you can do so by configuring the backgrounds parameter like so:\nButton stories ts|tsxTypescript// Replace your-framework with svelte-vite or sveltekit\nimport type { Meta, StoryObj } from '@storybook/your-framework';\nimport Button from ' /Button svelte';\nconst meta = {\ncomponent: Button,\n} satisfies Meta<typeof Button>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const Large: Story = {\nparameters: {\nbackgrounds: { disable: true },\n},\n};\nGrid\nThe backgrounds feature also includes a Grid selector, which allows you to quickly see if your components are aligned You don't need additional configuration to get started But its properties are fully customizable; if you don't supply any value to any of its properties, they'll default to the following values:\nButton stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { Button } from '",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 897926,
      "relative_path": "documentation\\storybook\\_docs_essentials_backgrounds.html",
      "source_type": "documentation"
    },
    "token_count": 480,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "50fc3bd2e582e770aa7554b758058ef0",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_backgrounds.html",
    "source_type": "documentation",
    "title": "Backgrounds | Storybook docs",
    "content": "includes a Grid selector, which allows you to quickly see if your components are aligned You don't need additional configuration to get started But its properties are fully customizable; if you don't supply any value to any of its properties, they'll default to the following values: Button stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework'; import { Button } from '/Button';\n// To apply a set of backgrounds to all stories of Button:\nconst meta = {\ncomponent: Button,\nparameters: {\nbackgrounds: {\ngrid: {\ncellSize: 20,\nopacity: 0 5,\ncellAmount: 5,\noffsetX: 16, // Default is 0 if story has 'fullscreen' layout, 16 if layout is 'padded'\noffsetY: 16, // Default is 0 if story has 'fullscreen' layout, 16 if layout is 'padded'\n},\n},\n},\n} satisfies Meta<typeof Button>;\nexport default meta;\nAPI\nGlobals\nThis module contributes the following globals to Storybook, under the backgrounds namespace:\ngrid\nType: boolean\nWhether the grid is displayed value\nType: string\nWhen set, the background color is applied and cannot be changed using the toolbar Must match the key of one of the available colors Parameters\nThis module contributes the following parameters to Storybook, under the backgrounds namespace:\ndisable\nType: boolean\nDisable this feature's behavior If you wish to disable this feature for the entire Storybook, you should do so in your main configuration file This parameter is most useful to allow overriding at more specific levels For example, if this parameter is set to true at the project level, it could then be re-enabled by setting it to false at the meta (component) or story level grid\nType:\n{\ncellAmount : number;\ncellSize : number;\ndisable : boolean;\noffsetX : number;\noffsetY : number;\nopacity : number;\n}\nConfiguration for the background grid grid cellAmount\nType: number\nDefault: 5\nSpecify the size of the minor grid lines grid cellSize\nType: number\nDefault: 20\nSpecify the size of the major grid lines grid disable\nType: boolean\nTurn off the grid grid",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 897926,
      "relative_path": "documentation\\storybook\\_docs_essentials_backgrounds.html",
      "source_type": "documentation"
    },
    "token_count": 476,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "00c0dad917fbed04ecc7b91caccea113",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_backgrounds.html",
    "source_type": "documentation",
    "title": "Backgrounds | Storybook docs",
    "content": "by setting it to false at the meta (component) or story level grid Type: { cellAmount : number; cellSize : number; disable : boolean; offsetX : number; offsetY : number; opacity : number; } Configuration for the background grid grid cellAmount Type: number Default: 5 Specify the size of the minor grid lines grid cellSize Type: number Default: 20 Specify the size of the major grid lines grid disable Type: boolean Turn off the grid gridoffsetX\nType: number\nDefault: 0 if story layout is 'fullscreen'; 16 if story layout is 'padded'\nHorizontal offset of the grid grid offsetY\nType: number\nDefault: 0 if story layout is 'fullscreen'; 16 if story layout is 'padded'\nVertical offset of the grid grid opacity\nType: number\nDefault: 0 5\nThe opacity of the grid lines options\n(Required, see description)\nType:\n{\n[key: string]: {\nname: string;\nvalue: string;\n};\n}\nAvailable background colors See above for a usage example Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 897926,
      "relative_path": "documentation\\storybook\\_docs_essentials_backgrounds.html",
      "source_type": "documentation"
    },
    "token_count": 287,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "3e647000460f3ce62028f63a79645ae8",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_measure-and-outline.html",
    "source_type": "documentation",
    "title": "Measure & outline | Storybook docs",
    "content": "Measure & outline | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Essentials » Measure & outlineDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQMeasure & outlineReactVueAngularWeb ComponentsMoreStorybook's measure and outline features give you the necessary tooling to inspect and visually debug CSS layout and alignment issues within your stories It makes it easy to catch UI bugs early in development Measure\nWhile working with composite components or page layouts, dealing with whitespace (i e , margin, padding, border) and individual component measurements can be tedious It would require that you open up the browser's development tools and manually inspect the DOM tree for issues and UI bugs Instead, you can quickly visualize each component's measurements by clicking the measure button in the toolbar Now when you hover over an element in your story, that element's dimensions and any whitespace (i e , margin, padding, border) will be shown 💡Alternatively you can press the m key on your keyboard to toggle measure on and off Outline\nWhen building your layouts, checking the visual alignment of all components can be pretty complicated, especially if your components are spread apart or contain unique shapes Click the outline button in the toolbar to toggle the outlines associated with all your UI elements, allowing you to spot bugs and broken layouts instantly",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 488943,
      "relative_path": "documentation\\storybook\\_docs_essentials_measure-and-outline.html",
      "source_type": "documentation"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "7cf11033ecff64c570fc110052b2636f",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_measure-and-outline.html",
    "source_type": "documentation",
    "title": "Measure & outline | Storybook docs",
    "content": ", margin, padding, border) will be shown 💡Alternatively you can press the m key on your keyboard to toggle measure on and off Outline When building your layouts, checking the visual alignment of all components can be pretty complicated, especially if your components are spread apart or contain unique shapes Click the outline button in the toolbar to toggle the outlines associated with all your UI elements, allowing you to spot bugs and broken layouts instantlyAPI\nParameters\nThese features contribute the following parameters to Storybook, under the measure or outline namespace:\ndisable\nType: boolean\nDisable the feature's behavior If you wish to disable the feature for the entire Storybook, you should do so in your main configuration file This parameter is most useful to allow overriding at more specific levels For example, if this parameter is set to true at the project level, it could then be re-enabled by setting it to false at the meta (component) or story level Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 488943,
      "relative_path": "documentation\\storybook\\_docs_essentials_measure-and-outline.html",
      "source_type": "documentation"
    },
    "token_count": 255,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "86d449b689e9a1410807691c875c821f",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_highlight.html",
    "source_type": "documentation",
    "title": "Highlight | Storybook docs",
    "content": "Highlight | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Essentials » HighlightDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQHighlightReactVueAngularWeb ComponentsMoreStorybook's Highlight feature is a helpful tool for visually debugging your components It allows you to highlight specific DOM nodes within your story when used directly or enhancing addons such as the Accessibility addon to inform you of accessibility issues within your components Highlighting DOM Elements\nTo highlight DOM elements with the feature, you'll need to emit the HIGHLIGHT event from within a story or an addon The event payload must contain a selectors property assigned to an array of selectors matching the elements you want to highlight For example:\nMyComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { useChannel } from 'storybook/preview-api';\nimport { HIGHLIGHT } from 'storybook/highlight';\nimport { MyComponent } from '",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1588409,
      "relative_path": "documentation\\storybook\\_docs_essentials_highlight.html",
      "source_type": "documentation"
    },
    "token_count": 442,
    "chunk_index": 0,
    "total_chunks": 9
  },
  {
    "id": "decdbdd205c0f89826b20cdc5787f361",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_highlight.html",
    "source_type": "documentation",
    "title": "Highlight | Storybook docs",
    "content": "the HIGHLIGHT event from within a story or an addon The event payload must contain a selectors property assigned to an array of selectors matching the elements you want to highlight For example: MyComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework'; import { useChannel } from 'storybook/preview-api'; import { HIGHLIGHT } from 'storybook/highlight'; import { MyComponent } from '/MyComponent';\nconst meta = {\ncomponent: MyComponent,\n} satisfies Meta<typeof MyComponent>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const Highlighted: Story = {\ndecorators: [\n(storyFn) => {\nconst emit = useChannel({});\nemit(HIGHLIGHT, {\nselectors: ['h2', 'a', ' storybook-button'],\n});\nreturn storyFn();\n},\n],\n};\n💡We recommend choosing the most specific selector possible to avoid highlighting elements other addons use This is because the feature tries to match selectors against the entire DOM tree Customize style\nBy default, highlighted elements contain a standard outline style applied to the selected elements However, you can enable your custom style by extending the payload object with additional properties to customize the appearance of the highlighted elements For example:\nMyComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { useChannel } from 'storybook/preview-api';\nimport { HIGHLIGHT } from 'storybook/highlight';\nimport { MyComponent } from ' /MyComponent';\nconst meta = {\ncomponent: MyComponent,\n} satisfies Meta<typeof MyComponent>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const StyledHighlight: Story = {\ndecorators: [\n(storyFn) => {\nconst emit = useChannel({});\nemit(HIGHLIGHT, {\nselectors: ['h2', 'a', ' storybook-button'],\nstyles: {\nbackgroundColor: `color-mix(in srgb, hotpink, transparent 90%)`,\noutline: '3px solid hotpink',\nanimation: 'pulse 3s linear infinite',\ntransition: 'outline-offset 0",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1588409,
      "relative_path": "documentation\\storybook\\_docs_essentials_highlight.html",
      "source_type": "documentation"
    },
    "token_count": 471,
    "chunk_index": 1,
    "total_chunks": 9
  },
  {
    "id": "d50b29301c37114c1f8717902631fe34",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_highlight.html",
    "source_type": "documentation",
    "title": "Highlight | Storybook docs",
    "content": "} from 'storybook/preview-api'; import { HIGHLIGHT } from 'storybook/highlight'; import { MyComponent } from ' /MyComponent'; const meta = { component: MyComponent, } satisfies Meta<typeof MyComponent>; export default meta; type Story = StoryObj<typeof meta>; export const StyledHighlight: Story = { decorators: [ (storyFn) => { const emit = useChannel({}); emit(HIGHLIGHT, { selectors: ['h2', 'a', ' storybook-button'], styles: { backgroundColor: `color-mix(in srgb, hotpink, transparent 90%)`, outline: '3px solid hotpink', animation: 'pulse 3s linear infinite', transition: 'outline-offset 02s ease-in-out',\n},\nhoverStyles: {\noutlineOffset: '3px',\n},\nfocusStyles: {\nbackgroundColor: 'transparent',\n},\nkeyframes: `@keyframes pulse {\n0% { outline-color: rgba(255, 105, 180, 1); }\n50% { outline-color: rgba(255, 105, 180, 0 2); }\n100% { outline-color: rgba(255, 105, 180, 1); }\n}`,\n});\nreturn storyFn();\n},\n],\n};\nℹ️These properties are optional, and you can use them to customize the appearance of the highlighted elements The hoverStyles and focusStyles properties are recommended for use with the menu property Pseudo-classes and pseudo-elements are not supported Highlight menu\nThe Highlight feature includes a built-in debugging option, allowing you to select the highlighted elements when you click them This is particularly useful for inspecting the elements affected by the feature, as it lets you preview a list of elements matching the selector you provided To enable it, add a menu property in the payload object containing additional information about the elements or trigger actions Each item must include an id and a title, and you can also provide an optional selectors property to limit the menu item to specific highlighted elements MyComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { useChannel } from 'storybook/preview-api';\nimport { HIGHLIGHT } from 'storybook/highlight';\nimport { MyComponent } from '",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1588409,
      "relative_path": "documentation\\storybook\\_docs_essentials_highlight.html",
      "source_type": "documentation"
    },
    "token_count": 482,
    "chunk_index": 2,
    "total_chunks": 9
  },
  {
    "id": "58488c5bd7b73f828ee91dcc097ad8b5",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_highlight.html",
    "source_type": "documentation",
    "title": "Highlight | Storybook docs",
    "content": "about the elements or trigger actions Each item must include an id and a title, and you can also provide an optional selectors property to limit the menu item to specific highlighted elements MyComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework'; import { useChannel } from 'storybook/preview-api'; import { HIGHLIGHT } from 'storybook/highlight'; import { MyComponent } from '/MyComponent';\nconst meta = {\ncomponent: MyComponent,\n} satisfies Meta<typeof MyComponent>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const StyledHighlight: Story = {\ndecorators: [\n(storyFn) => {\nconst emit = useChannel({});\nemit(HIGHLIGHT, {\nselectors: ['h2', 'a', ' storybook-button'],\nmenu: [\n[\n{\nid: 'button-name',\ntitle: 'Login',\ndescription: 'Navigate to the login page',\nclickEvent: 'my-menu-click-event',\n},\n{\nid: 'h2-home',\ntitle: 'Acme',\ndescription: 'Navigate to the home page',\n},\n],\n],\n});\nreturn storyFn();\n},\n],\n};\nWhen enabled, the menu will be displayed when you click on the selected element matching your provided selectors However, if you don't want to show any information, you can omit the items or set the menu property to an empty array to show the default menu Remove highlights\nIf you need to remove a highlight from a specific element, you can do so by emitting the REMOVE_HIGHLIGHT event and providing the id of the highlight you want to remove For example:\nMyComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { useChannel } from 'storybook/preview-api';\nimport { HIGHLIGHT, REMOVE_HIGHLIGHT } from 'storybook/highlight';\nimport { MyComponent } from '",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1588409,
      "relative_path": "documentation\\storybook\\_docs_essentials_highlight.html",
      "source_type": "documentation"
    },
    "token_count": 428,
    "chunk_index": 3,
    "total_chunks": 9
  },
  {
    "id": "bafb42e1af92abe0f0c3924f0138d8c5",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_highlight.html",
    "source_type": "documentation",
    "title": "Highlight | Storybook docs",
    "content": "you need to remove a highlight from a specific element, you can do so by emitting the REMOVE_HIGHLIGHT event and providing the id of the highlight you want to remove For example: MyComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework'; import { useChannel } from 'storybook/preview-api'; import { HIGHLIGHT, REMOVE_HIGHLIGHT } from 'storybook/highlight'; import { MyComponent } from '/MyComponent';\nconst meta = {\ncomponent: MyComponent,\n} satisfies Meta<typeof MyComponent>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const RemoveHighlight: Story = {\ndecorators: [\n(storyFn) => {\nconst emit = useChannel({});\nemit(HIGHLIGHT, {\nid: 'my-unique-id',\nselectors: ['header', 'section', 'footer'],\n});\nemit(REMOVE_HIGHLIGHT, 'my-unique-id');\nreturn storyFn();\n},\n],\n};\nℹ️The emit function derived from the useChannel API hook creates a communication channel in Storybook's UI to listen for events and update the UI accordingly The Highlight feature uses this channel to listen to custom events and update the highlighted elements (if any) accordingly Reset highlighted elements\nOut of the box, Storybook automatically removes highlighted elements when transitioning between stories However, if you need to clear them manually, you can emit the RESET_HIGHLIGHT event from within a story or an addon This removes all highlights, even ones created by other addons For example:\nMyComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { useChannel } from 'storybook/preview-api';\nimport { HIGHLIGHT, RESET_HIGHLIGHT } from 'storybook/highlight';\nimport { MyComponent } from '",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1588409,
      "relative_path": "documentation\\storybook\\_docs_essentials_highlight.html",
      "source_type": "documentation"
    },
    "token_count": 410,
    "chunk_index": 4,
    "total_chunks": 9
  },
  {
    "id": "e1d4c6c974c1434b837268bf77c25913",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_highlight.html",
    "source_type": "documentation",
    "title": "Highlight | Storybook docs",
    "content": "if you need to clear them manually, you can emit the RESET_HIGHLIGHT event from within a story or an addon This removes all highlights, even ones created by other addons For example: MyComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework'; import { useChannel } from 'storybook/preview-api'; import { HIGHLIGHT, RESET_HIGHLIGHT } from 'storybook/highlight'; import { MyComponent } from '/MyComponent';\nconst meta = {\ncomponent: MyComponent,\n} satisfies Meta<typeof MyComponent>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const ResetHighlight: Story = {\ndecorators: [\n(storyFn) => {\nconst emit = useChannel({});\nemit(RESET_HIGHLIGHT); //👈 Remove previously highlighted elements\nemit(HIGHLIGHT, {\nselectors: ['header', 'section', 'footer'],\n});\nreturn storyFn();\n},\n],\n};\nScroll element into view\nThe Highlight feature allows you to scroll an element into view and highlight it To enable it, emit the SCROLL_INTO_VIEW event from within a story or an addon The event payload must contain a selector property to target the element you want to scroll into view When the element is visible, it will be highlighted for a brief moment MyComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { useChannel } from 'storybook/preview-api';\nimport { SCROLL_INTO_VIEW } from 'storybook/highlight';\nimport { MyComponent } from ' /MyComponent';\nconst meta = {\ncomponent: MyComponent,\n} satisfies Meta<typeof MyComponent>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const ScrollIntoView: Story = {\ndecorators: [\n(storyFn) => {\nconst emit = useChannel({});\nemit(SCROLL_INTO_VIEW, '#footer');\nreturn storyFn();\n},\n],\n};\nAPI\nParameters\nThis feature contributes the following parameters to Storybook, under the highlight namespace:\ndisable\nType: boolean\nDisable this feature's behavior If you wish to turn off this feature for the entire Storybook, you should do so in your main configuration file",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1588409,
      "relative_path": "documentation\\storybook\\_docs_essentials_highlight.html",
      "source_type": "documentation"
    },
    "token_count": 491,
    "chunk_index": 5,
    "total_chunks": 9
  },
  {
    "id": "049077af18e3ade3c988167d5dda5ad3",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_highlight.html",
    "source_type": "documentation",
    "title": "Highlight | Storybook docs",
    "content": "} satisfies Meta<typeof MyComponent>; export default meta; type Story = StoryObj<typeof meta>; export const ScrollIntoView: Story = { decorators: [ (storyFn) => { const emit = useChannel({}); emit(SCROLL_INTO_VIEW, '#footer'); return storyFn(); }, ], }; API Parameters This feature contributes the following parameters to Storybook, under the highlight namespace: disable Type: boolean Disable this feature's behavior If you wish to turn off this feature for the entire Storybook, you should do so in your main configuration fileThis parameter is most useful to allow overriding at more specific levels For example, if this parameter is set to true at the project level, it could be re-enabled by setting it to false at the meta (component) or story level Exports\nThis feature contributes the following exports to Storybook:\nimport { HIGHLIGHT, REMOVE_HIGHLIGHT, RESET_HIGHLIGHT, SCROLL_INTO_VIEW } from 'storybook/highlight';\nHIGHLIGHT\nAn event to highlight DOM elements The event payload must contain a selectors property assigned to an array of selectors matching the elements you want to highlight It can be extended with an optional object containing additional configuration options See the usage example above import { HIGHLIGHT, type HighlightOptions } from 'storybook/highlight';\nchannel emit(\nHIGHLIGHT,\noptions // The available configuration options inheriting from the HighlightOptions API\n);\nThe options object contains the following properties:\ninterface HighlightOptions {\n/** Unique identifier for the highlight, required if you want to remove the highlight later */\nid : string;\n/** HTML selectors of the elements */\nselectors: string[];\n/** Priority of the highlight, higher takes precedence, defaults to 0 */\npriority : number;\n/** CSS styles to apply to the highlight */\nstyles : Record<string, string>;\n/** CSS styles to apply to the highlight when it is hovered */\nhoverStyles : Record<string, string>;\n/** CSS styles to apply to the highlight when it is focused or selected */\nfocusStyles : Record<string, string>;\n/** Keyframes required for animations */\nkeyframes : string;\n/** Groups of menu items to show when the highlight is selected */\nmenu : HighlightMenuItem[][];\n}\ninterface HighlightMenuItem {\n/** Unique identifier for the menu item */\nid: string;\n/** Title of the menu item */\ntitle: string;\n/** Description of the menu item */\ndescription : string;\n/** Icon for the menu item, left side */\niconLeft",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1588409,
      "relative_path": "documentation\\storybook\\_docs_essentials_highlight.html",
      "source_type": "documentation"
    },
    "token_count": 482,
    "chunk_index": 6,
    "total_chunks": 9
  },
  {
    "id": "741b08472c70f7a75c241e7e980d8fc9",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_highlight.html",
    "source_type": "documentation",
    "title": "Highlight | Storybook docs",
    "content": "focused or selected */ focusStyles : Record<string, string>; /** Keyframes required for animations */ keyframes : string; /** Groups of menu items to show when the highlight is selected */ menu : HighlightMenuItem[][]; } interface HighlightMenuItem { /** Unique identifier for the menu item */ id: string; /** Title of the menu item */ title: string; /** Description of the menu item */ description : string; /** Icon for the menu item, left side */ iconLeft: \"chevronLeft\" | \"chevronRight\" | \"info\" | \"shareAlt\";\n/** Icon for the menu item, right side */\niconRight : \"chevronLeft\" | \"chevronRight\" | \"info\" | \"shareAlt\";\n/** Name for a channel event to trigger when the menu item is clicked */\nclickEvent : string;\n/** HTML selectors for which this menu item should show (subset of HighlightOptions['selectors']) */\nselectors : HighlightOptions['selectors'];\n}\nMenu items can specify a clickEvent to be emitted on the channel when the item is clicked The channel event will receive two arguments: the menu item id and a ClickEventDetails object with the following properties:\ninterface ClickEventDetails {\n// Position and dimensions of the element on the page\ntop: number;\nleft: number;\nwidth: number;\nheight: number;\n// Selector(s) which matched the element\nselectors: string[];\n// DOM element details\nelement: {\nattributes: Record<string, string>;\nlocalName: string;\ntagName: string;\nouterHTML: string;\n};\n}\nTo listen for this event (assuming clickEvent: 'MY_CLICK_EVENT'):\nimport type { ClickEventDetails } from 'storybook/highlight';\nconst handleClickEvent = (itemId: string, details: ClickEventDetails) => {\n// Handle the menu item click event\n}\n// When you have a channel instance:\nchannel on('MY_CLICK_EVENT', handleClickEvent)\n// Or from a decorator:\nuseChannel({\nMY_CLICK_EVENT: handleClickEvent,\n}, [handleClickEvent])\nREMOVE_HIGHLIGHT\nAn event that removes a previously created highlight The event payload must contain an id property assigned to the id of the highlight you want to remove See the usage example above import { REMOVE_HIGHLIGHT } from 'storybook/highlight';\nchannel emit(\nREMOVE_HIGHLIGHT,\nid // The id of the previously created highlight to be removed\n);\nRESET_HIGHLIGHT\nAn event to clear all highlights from highlighted elements See the usage example above",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1588409,
      "relative_path": "documentation\\storybook\\_docs_essentials_highlight.html",
      "source_type": "documentation"
    },
    "token_count": 493,
    "chunk_index": 7,
    "total_chunks": 9
  },
  {
    "id": "5f58dabec862e90488ece9751a1d8c75",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_highlight.html",
    "source_type": "documentation",
    "title": "Highlight | Storybook docs",
    "content": "decorator: useChannel({ MY_CLICK_EVENT: handleClickEvent, }, [handleClickEvent]) REMOVE_HIGHLIGHT An event that removes a previously created highlight The event payload must contain an id property assigned to the id of the highlight you want to remove See the usage example above import { REMOVE_HIGHLIGHT } from 'storybook/highlight'; channel emit( REMOVE_HIGHLIGHT, id // The id of the previously created highlight to be removed ); RESET_HIGHLIGHT An event to clear all highlights from highlighted elements See the usage example aboveimport { RESET_HIGHLIGHT } from 'storybook/highlight';\nchannel emit(RESET_HIGHLIGHT);\nSCROLL_INTO_VIEW\nAn event to scroll a DOM element into view and briefly highlight it The event payload must contain a selector property assigned to the selector of the element you want to scroll into view Optionally, you can provide a options object to customize the scroll behavior See the usage example above import { SCROLL_INTO_VIEW } from 'storybook/highlight';\nchannel emit(\nSCROLL_INTO_VIEW,\nselector // Element selector to scroll into view\noptions // An object inheriting from ScrollIntoViewOptions API to customize the scroll behavior\n);Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1588409,
      "relative_path": "documentation\\storybook\\_docs_essentials_highlight.html",
      "source_type": "documentation"
    },
    "token_count": 301,
    "chunk_index": 8,
    "total_chunks": 9
  },
  {
    "id": "6fe9465f3adad3a183c5d42df6795824",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_toolbars-and-globals.html",
    "source_type": "documentation",
    "title": "Toolbars & globals | Storybook docs",
    "content": "Toolbars & globals | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Essentials » Toolbars & globalsDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQToolbars & globalsReactVueAngularWeb ComponentsMoreStorybook ships with features to control the viewport and background the story renders in Similarly, you can use built-in features to create toolbar items which control special “globals” You can then read the global values to create decorators to control story rendering Globals\nGlobals in Storybook represent “global” (as in not story-specific) inputs to the rendering of the story As they aren’t specific to the story, they aren’t passed in the args argument to the story function (although they are accessible as context globals) Instead, they are typically used in decorators, which apply to all stories When the globals change, the story re-renders and the decorators rerun with the new values The easiest way to change globals is to create a toolbar item for them Global types and the toolbar annotation\nStorybook has a simple, declarative syntax for configuring toolbar menus In your storybook/preview js|ts, you can add your own toolbars by creating globalTypes with a toolbar annotation: storybook/preview tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1231950,
      "relative_path": "documentation\\storybook\\_docs_essentials_toolbars-and-globals.html",
      "source_type": "documentation"
    },
    "token_count": 502,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "dfd977f2aac6829cdef61df0cd8e6f53",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_toolbars-and-globals.html",
    "source_type": "documentation",
    "title": "Toolbars & globals | Storybook docs",
    "content": "globals change, the story re-renders and the decorators rerun with the new values The easiest way to change globals is to create a toolbar item for them Global types and the toolbar annotation Storybook has a simple, declarative syntax for configuring toolbar menus In your storybook/preview js|ts, you can add your own toolbars by creating globalTypes with a toolbar annotation: storybook/preview tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etcimport type { Preview } from '@storybook/your-framework';\nconst preview: Preview = {\nglobalTypes: {\ntheme: {\ndescription: 'Global theme for components',\ntoolbar: {\n// The label to show for this toolbar item\ntitle: 'Theme',\nicon: 'circlehollow',\n// Array of plain string values or MenuItem shape (see below)\nitems: ['light', 'dark'],\n// Change title based on selected value\ndynamicTitle: true,\n},\n},\n},\ninitialGlobals: {\ntheme: 'light',\n},\n};\nexport default preview;\n💡As globals are global you can only set globalTypes and initialGlobals in storybook/preview js|ts When you start your Storybook, your toolbar should have a new dropdown menu with the light and dark options Create a decorator\nWe have a global implemented Let's wire it up We can consume our new theme global in a decorator using the context globals theme value For example, suppose you are using styled-components You can add a theme provider decorator to your storybook/preview js|ts config: storybook/preview tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Preview } from '@storybook/your-framework';\nimport { MyThemes } from ' /my-theme-folder/my-theme-file';\nconst preview: Preview = {\ndecorators: [\n(story, context) => {\nconst selectedTheme = context globals theme || 'light';\nconst theme = MyThemes[selectedTheme];\n// Your theme provider and other context providers goes in the return statement\nreturn;\n},\n],\n};\nexport default preview;\nSetting globals on a story\nWhen a global value is changed with a toolbar menu in Storybook, that value continues to be used as you navigate between stories But sometimes a story requires a specific value to render correctly, e g , when testing against a particular environment",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1231950,
      "relative_path": "documentation\\storybook\\_docs_essentials_toolbars-and-globals.html",
      "source_type": "documentation"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "f0d5ce6bc252cd91877e84ec05a67e27",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_toolbars-and-globals.html",
    "source_type": "documentation",
    "title": "Toolbars & globals | Storybook docs",
    "content": "globals theme || 'light'; const theme = MyThemes[selectedTheme]; // Your theme provider and other context providers goes in the return statement return; }, ], }; export default preview; Setting globals on a story When a global value is changed with a toolbar menu in Storybook, that value continues to be used as you navigate between stories But sometimes a story requires a specific value to render correctly, e g , when testing against a particular environmentTo ensure that a story always uses a specific global value, regardless of what has been chosen in the toolbar, you can set the globals annotation on a story or component This overrides the global value for those stories and disables the toolbar menu for that global when viewing the stories Button stories ts|tsxTypescript// Replace your-framework with the name of your framework (e g , react-vite, vue3-vite, etc )\nimport type { Meta, StoryObj } from '@storybook/your-framework';\nimport { Button } from ' /Button';\nconst meta = {\ncomponent: Button,\nglobals: {\n// 👇 Set background value for all component stories\nbackgrounds: { value: 'gray', grid: false },\n},\n} satisfies Meta<typeof Button>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const OnDark: Story = {\nglobals: {\n// 👇 Override background value for this story\nbackgrounds: { value: 'dark' },\n},\n};\nIn the example above, Storybook will force all Button stories to use a gray background color, except the OnDark story, which will use the dark background For all Button stories, the toolbar menu will be disabled for the backgrounds global, with a tooltip explaining that the global is set at the story level 💡Configuring a story's globals annotation to override the project-level global settings is useful but should be used with moderation Globals that are not defined at the story level can be selected interactively in Storybook's UI, allowing users to explore every existing combination of values (e g , global values, args) Setting them at the story level will disable that control, preventing users from exploring the available options Advanced usage\nSo far, we've created and used a global inside Storybook Now, let's take a look at a more complex example Suppose we wanted to implement a new global called locale for internationalization, which shows a flag on the right side of the toolbar In your storybook/preview js|ts, add the following: storybook/preview",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1231950,
      "relative_path": "documentation\\storybook\\_docs_essentials_toolbars-and-globals.html",
      "source_type": "documentation"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "7f86bae1ce384521adbc2984055b2937",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_toolbars-and-globals.html",
    "source_type": "documentation",
    "title": "Toolbars & globals | Storybook docs",
    "content": "(e g , global values, args) Setting them at the story level will disable that control, preventing users from exploring the available options Advanced usage So far, we've created and used a global inside Storybook Now, let's take a look at a more complex example Suppose we wanted to implement a new global called locale for internationalization, which shows a flag on the right side of the toolbar In your storybook/preview js|ts, add the following: storybook/previewtsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Preview } from '@storybook/your-framework';\nconst preview: Preview = {\nglobalTypes: {\nlocale: {\ndescription: 'Internationalization locale',\ntoolbar: {\nicon: 'globe',\nitems: [\n{ value: 'en', right: '🇺🇸', title: 'English' },\n{ value: 'fr', right: '🇫🇷', title: 'Français' },\n{ value: 'es', right: '🇪🇸', title: 'Español' },\n{ value: 'zh', right: '🇨🇳', title: '中文' },\n{ value: 'kr', right: '🇰🇷', title: '한국어' },\n],\n},\n},\n},\ninitialGlobals: {\nlocale: 'en',\n},\n};\nexport default preview;\n💡The icon element used in the examples loads the icons from the @storybook/icons package See here for the list of available icons that you can use Adding the configuration element right will display the text on the right side in the toolbar menu once you connect it to a decorator Here's a list of the available configuration options MenuItemTypeDescriptionRequiredvalueStringThe string value of the menu that gets set in the globalsYestitleStringThe main text of the titleYesrightStringA string that gets displayed on the right side of the menuNoiconStringAn icon that gets shown in the toolbar if this item is selectedNo\nConsuming globals from within a story\nWe recommend consuming globals from within a decorator and defining a global setting for all stories But we're aware that sometimes it's more beneficial to use toolbar options on a per-story basis Using the example above, you can modify any story to retrieve the Locale global from the story context:\nMyComponent stories",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1231950,
      "relative_path": "documentation\\storybook\\_docs_essentials_toolbars-and-globals.html",
      "source_type": "documentation"
    },
    "token_count": 496,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "b308d55aaeebdb9886a732b20d608cd5",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_toolbars-and-globals.html",
    "source_type": "documentation",
    "title": "Toolbars & globals | Storybook docs",
    "content": "the right side of the menuNoiconStringAn icon that gets shown in the toolbar if this item is selectedNo Consuming globals from within a story We recommend consuming globals from within a decorator and defining a global setting for all stories But we're aware that sometimes it's more beneficial to use toolbar options on a per-story basis Using the example above, you can modify any story to retrieve the Locale global from the story context: MyComponent storiests|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { MyComponent } from ' /MyComponent';\nconst meta = {\ncomponent: MyComponent,\n} satisfies Meta<typeof MyComponent>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nconst getCaptionForLocale = (locale) => {\nswitch (locale) {\ncase 'es':\nreturn 'Hola ';\ncase 'fr':\nreturn 'Bonjour ';\ncase 'kr':\nreturn '안녕하세요 ';\ncase 'zh':\nreturn '你好 ';\ndefault:\nreturn 'Hello ';\n}\n};\nexport const StoryWithLocale = {\nrender: (args, { globals: { locale } }) => {\nconst caption = getCaptionForLocale(locale);\nreturn <p>{caption}</p>;\n},\n};\nConsuming globals from within an addon\nIf you're working on a Storybook addon and need to retrieve globals, you can do so The storybook/manager-api module provides a hook for this scenario You can use the useGlobals() hook to retrieve any globals you want Using the ThemeProvider example above, you could expand it to display which theme is active inside a panel as such:\nyour-addon-register-file jsimport React from 'react';\nimport { useGlobals } from 'storybook/manager-api';\nimport {\nAddonPanel,\nPlaceholder,\nSeparator,\nSource,\nSpaced,\nTitle,\n} from 'storybook/internal/components';\nimport { MyThemes } from ' /my-theme-folder/my-theme-file';\n// Function to obtain the intended theme\nconst getTheme = (themeName) => {\nreturn MyThemes[themeName];\n};\nconst ThemePanel = (props) => {\nconst [{ theme: themeName }] = useGlobals();\nconst selectedTheme = getTheme(themeName);\nreturn (\n<AddonPanel { props}>\n{selectedTheme (\n<Spaced row={3} outer={1}>\n<Title>{selectedTheme",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1231950,
      "relative_path": "documentation\\storybook\\_docs_essentials_toolbars-and-globals.html",
      "source_type": "documentation"
    },
    "token_count": 496,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "2afcb083b2ed02d97e803e98cf94bb96",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_toolbars-and-globals.html",
    "source_type": "documentation",
    "title": "Toolbars & globals | Storybook docs",
    "content": "panel as such: your-addon-register-file jsimport React from 'react'; import { useGlobals } from 'storybook/manager-api'; import { AddonPanel, Placeholder, Separator, Source, Spaced, Title, } from 'storybook/internal/components'; import { MyThemes } from ' /my-theme-folder/my-theme-file'; // Function to obtain the intended theme const getTheme = (themeName) => { return MyThemes[themeName]; }; const ThemePanel = (props) => { const [{ theme: themeName }] = useGlobals(); const selectedTheme = getTheme(themeName); return ( <AddonPanel { props}> {selectedTheme ( <Spaced row={3} outer={1}> <Title>{selectedThemename}</Title>\n<p>The full theme object</p>\n<Source\ncode={JSON stringify(selectedTheme, null, 2)}\nlanguage=\"js\"\ncopyable\npadded\nshowLineNumbers\n/>\n</Spaced>\n) : (\n<Placeholder>No theme selected</Placeholder>\n)}\n</AddonPanel>\n);\n};\nUpdating globals from within an addon\nIf you're working on a Storybook addon that needs to update the global and refresh the UI, you can do so As mentioned previously, the storybook/manager-api module provides the necessary hook for this scenario You can use the updateGlobals function to update any global values you need For example, if you were working on a toolbar addon, and you want to refresh the UI and update the global once the user clicks on a button:\nyour-addon-register-file jsimport React, { useCallback } from 'react';\nimport { OutlineIcon } from '@storybook/icons';\nimport { useGlobals } from 'storybook/manager-api';\nimport { addons } from 'storybook/preview-api';\nimport { IconButton } from 'storybook/internal/components';\nimport { FORCE_RE_RENDER } from 'storybook/internal/core-events';\nconst ExampleToolbar = () => {\nconst [globals, updateGlobals] = useGlobals();\nconst isActive = globals['my-param-key'] || false;\n// Function that will update the global value and trigger a UI refresh const refreshAndUpdateGlobal = () => {\n// Updates Storybook global value\nupdateGlobals({\n['my-param-key']: isActive,\n}),\n// Invokes Storybook's addon API method (with the FORCE_RE_RENDER) event to trigger a UI refresh\naddons getChannel()",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1231950,
      "relative_path": "documentation\\storybook\\_docs_essentials_toolbars-and-globals.html",
      "source_type": "documentation"
    },
    "token_count": 473,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "0305daf03d26048ddfcc0e21188c2e51",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_toolbars-and-globals.html",
    "source_type": "documentation",
    "title": "Toolbars & globals | Storybook docs",
    "content": "from 'storybook/preview-api'; import { IconButton } from 'storybook/internal/components'; import { FORCE_RE_RENDER } from 'storybook/internal/core-events'; const ExampleToolbar = () => { const [globals, updateGlobals] = useGlobals(); const isActive = globals['my-param-key'] || false; // Function that will update the global value and trigger a UI refresh const refreshAndUpdateGlobal = () => { // Updates Storybook global value updateGlobals({ ['my-param-key']: isActive, }), // Invokes Storybook's addon API method (with the FORCE_RE_RENDER) event to trigger a UI refresh addons getChannel()emit(FORCE_RE_RENDER);\n};\nconst toggleOutline = useCallback(() => refreshAndUpdateGlobal(), [isActive]);\nreturn (\n<IconButton\nkey=\"Example\"\nactive={isActive}\ntitle=\"Show a Storybook toolbar\"\nonClick={toggleOutline}\n>\n<OutlineIcon />\n</IconButton>\n);\n};\nWas this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1231950,
      "relative_path": "documentation\\storybook\\_docs_essentials_toolbars-and-globals.html",
      "source_type": "documentation"
    },
    "token_count": 252,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "df48213a900a05377bdfb8ac20cf595c",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_viewport.html",
    "source_type": "documentation",
    "title": "Viewport | Storybook docs",
    "content": "Viewport | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Essentials » ViewportDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQViewportReactVueAngularWeb ComponentsMoreThe viewport feature allows you to adjust the dimensions of the iframe your story is rendered in It makes it easy to develop responsive UIs Configuration\nOut of the box, the viewport feature offers you a standard set of viewports that you can use If you want to change the default set of viewports, you can configure your own viewports with the viewport parameter in your storybook/preview js|ts You can define the available viewports using the options property and set the initial viewport using the initialGlobals property: storybook/preview tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 850074,
      "relative_path": "documentation\\storybook\\_docs_essentials_viewport.html",
      "source_type": "documentation"
    },
    "token_count": 401,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "d06966bb47d6b0b088128b155022d19b",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_viewport.html",
    "source_type": "documentation",
    "title": "Viewport | Storybook docs",
    "content": "of the box, the viewport feature offers you a standard set of viewports that you can use If you want to change the default set of viewports, you can configure your own viewports with the viewport parameter in your storybook/preview js|ts You can define the available viewports using the options property and set the initial viewport using the initialGlobals property: storybook/preview tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etcimport type { Preview } from '@storybook/your-framework';\nimport { INITIAL_VIEWPORTS } from 'storybook/viewport';\nconst preview: Preview = {\nparameters: {\nviewport: {\noptions: INITIAL_VIEWPORTS,\n},\n},\ninitialGlobals: {\nviewport: { value: 'ipad', isRotated: false },\n},\n};\nexport default preview;\nUse a detailed set of devices\nBy default, the viewport feature will use a minimal set of viewports, which enables you to test your UI in common responsive scenarios",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 850074,
      "relative_path": "documentation\\storybook\\_docs_essentials_viewport.html",
      "source_type": "documentation"
    },
    "token_count": 210,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "ef3e29a7cab7bef378e0f217f51035ef",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_viewport.html",
    "source_type": "documentation",
    "title": "Viewport | Storybook docs",
    "content": "are using, e g react-vite, nextjs, vue3-vite, etcimport type { Preview } from '@storybook/your-framework'; import { INITIAL_VIEWPORTS } from 'storybook/viewport'; const preview: Preview = { parameters: { viewport: { options: INITIAL_VIEWPORTS, }, }, initialGlobals: { viewport: { value: 'ipad', isRotated: false }, }, }; export default preview; Use a detailed set of devices By default, the viewport feature will use a minimal set of viewports, which enables you to test your UI in common responsive scenariosThese are also available in the MINIMAL_VIEWPORTS export and include the following devices:\nKeyDescriptionDimensions(w×h, px)mobile1Small mobile320 × 568mobile2Large mobile414 × 896tabletTablet834 × 1112\nIf you need a more detailed set of devices, you can use the INITIAL_VIEWPORTS export, which includes the following devices:\nKeyDescriptionDimensions(w×h, px)iphone5iPhone 5320 × 568iphone6iPhone 6375 × 667iphone6piPhone 6 Plus414 × 736iphone8piPhone 8 Plus414 × 736iphonexiPhone X375 × 812iphonexriPhone XR414 × 896iphonexsmaxiPhone XS Max414 × 896iphonese2iPhone SE (2nd generation)375 × 667iphone12miniiPhone 12 mini375 × 812iphone12iPhone 12390 × 844iphone12promaxiPhone 12 Pro Max428 × 926iphoneSE3iPhone SE 3rd generation375 × 667iphone13iPhone 13390 × 844iphone13proiPhone 13 Pro390 × 844iphone13promaxiPhone 13 Pro Max428 × 926iphone14iPhone 14390 × 844iphone14proiPhone 14 Pro393 × 852iphone14promaxiPhone 14 Pro Max430 × 932galaxys5Galaxy S5360 × 640galaxys9Galaxy S9360 × 740nexus5xNexus 5X412 × 668nexus6pNexus 6P412 × 732pixelPixel540 × 960pixelxlPixel XL720 × 1280mobile1Small mobile(also in MINIMAL_VIEWPORTS)320 × 568mobile2Large mobile(also in MINIMAL_VIEWPORTS)414 × 896ipadiPad768 × 1024ipad10piPad Pro 10",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 850074,
      "relative_path": "documentation\\storybook\\_docs_essentials_viewport.html",
      "source_type": "documentation"
    },
    "token_count": 522,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "16da0893e7e2e45435b377199bc773ec",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_viewport.html",
    "source_type": "documentation",
    "title": "Viewport | Storybook docs",
    "content": "(2nd generation)375 × 667iphone12miniiPhone 12 mini375 × 812iphone12iPhone 12390 × 844iphone12promaxiPhone 12 Pro Max428 × 926iphoneSE3iPhone SE 3rd generation375 × 667iphone13iPhone 13390 × 844iphone13proiPhone 13 Pro390 × 844iphone13promaxiPhone 13 Pro Max428 × 926iphone14iPhone 14390 × 844iphone14proiPhone 14 Pro393 × 852iphone14promaxiPhone 14 Pro Max430 × 932galaxys5Galaxy S5360 × 640galaxys9Galaxy S9360 × 740nexus5xNexus 5X412 × 668nexus6pNexus 6P412 × 732pixelPixel540 × 960pixelxlPixel XL720 × 1280mobile1Small mobile(also in MINIMAL_VIEWPORTS)320 × 568mobile2Large mobile(also in MINIMAL_VIEWPORTS)414 × 896ipadiPad768 × 1024ipad10piPad Pro 105-in834 × 112ipad11piPad Pro 11-in834 × 1194ipad12piPad Pro 12 9-in1024 × 1366tabletTablet(also in MINIMAL_VIEWPORTS)834 × 1112\nTo use the detailed set of devices, you can adjust the options property in your configuration to include the INITIAL_VIEWPORTS export: storybook/preview tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Preview } from '@storybook/your-framework';\nimport { INITIAL_VIEWPORTS } from 'storybook/viewport';\nconst preview: Preview = {\nparameters: {\nviewport: {\noptions: INITIAL_VIEWPORTS,\n},\n},\ninitialGlobals: {\nviewport: { value: 'ipad', isRotated: false },\n},\n};\nexport default preview;\nAdd new devices\nIf the predefined viewports don't meet your needs, you can add new devices to the list of viewports For example, let's add two Kindle devices to the default set of minimal viewports: storybook/preview tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 850074,
      "relative_path": "documentation\\storybook\\_docs_essentials_viewport.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "fe3b7d506eccd25f5553e9f13ada653c",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_viewport.html",
    "source_type": "documentation",
    "title": "Viewport | Storybook docs",
    "content": "Preview = { parameters: { viewport: { options: INITIAL_VIEWPORTS, }, }, initialGlobals: { viewport: { value: 'ipad', isRotated: false }, }, }; export default preview; Add new devices If the predefined viewports don't meet your needs, you can add new devices to the list of viewports For example, let's add two Kindle devices to the default set of minimal viewports: storybook/preview tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etcimport type { Preview } from '@storybook/your-framework';\nimport { MINIMAL_VIEWPORTS } from 'storybook/viewport';\nconst kindleViewports = {\nkindleFire2: {\nname: 'Kindle Fire 2',\nstyles: {\nwidth: '600px',\nheight: '963px',\n},\n},\nkindleFireHD: {\nname: 'Kindle Fire HD',\nstyles: {\nwidth: '533px',\nheight: '801px',\n},\n},\n};\nconst preview: Preview = {\nparameters: {\nviewport: {\noptions: { MINIMAL_VIEWPORTS, kindleViewports,\n},\n},\n},\n};\nexport default preview;\nConfiguring per component or story\nIn some cases, it's not practical for you to use a specific visual viewport on a global scale, and you need to adjust it to an individual story or set of stories for a component Parameters can be applied at the project, component, and story levels, which allows you to specify the configuration where needed For example, you can set the available viewports for all of the stories for a component like so:\nMyComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { INITIAL_VIEWPORTS } from 'storybook/viewport';\nimport { MyComponent } from ' /MyComponent';\nconst meta = {\ncomponent: MyComponent,\nparameters: {\nviewport: {\n//👇 Set available viewports for every story in the file\noptions: INITIAL_VIEWPORTS,\n},\n},\n} satisfies Meta<typeof MyComponent>;\nexport default meta;\nDefining the viewport for a story\nThe Viewport module enables you to change the viewport applied to a story by selecting from the list of predefined viewports in the toolbar",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 850074,
      "relative_path": "documentation\\storybook\\_docs_essentials_viewport.html",
      "source_type": "documentation"
    },
    "token_count": 496,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "11408de3717656b7ced0568b929d893f",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_viewport.html",
    "source_type": "documentation",
    "title": "Viewport | Storybook docs",
    "content": "from '@storybook/your-framework'; import { INITIAL_VIEWPORTS } from 'storybook/viewport'; import { MyComponent } from ' /MyComponent'; const meta = { component: MyComponent, parameters: { viewport: { //👇 Set available viewports for every story in the file options: INITIAL_VIEWPORTS, }, }, } satisfies Meta<typeof MyComponent>; export default meta; Defining the viewport for a story The Viewport module enables you to change the viewport applied to a story by selecting from the list of predefined viewports in the toolbarIf needed, you can set a story to default to a specific viewport by using the globals option:\nButton stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { Button } from ' /Button';\nconst meta = {\ncomponent: Button,\nglobals: {\n// 👇 Set viewport for all component stories\nviewport: { value: 'tablet', isRotated: false },\n},\n} satisfies Meta<typeof Button>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const OnPhone: Story = {\nglobals: {\n// 👇 Override viewport for this story\nviewport: { value: 'mobile1', isRotated: false },\n},\n};\nℹ️When you specify a viewport for a story (or a component's stories) using globals, the viewport is applied and cannot be changed using the toolbar This is useful to ensure a story is always rendered on a specific viewport API\nKeyboard shortcuts\nIf you need, you can edit these on the shortcuts page Next viewport: alt + v\nPrevious viewport: alt + shift + v\nReset viewport: alt + control + v\nGlobals\nThis module contributes the following globals to Storybook, under the viewport namespace:\nvalue\nType: string\nWhen set, the viewport is applied and cannot be changed using the toolbar Must match the key of one of the available viewports isRotated\nType: boolean\nWhen true, the viewport applied will be rotated 90°, e g , from portrait to landscape orientation Parameters\nThis module contributes the following parameters to Storybook, under the viewport namespace:\ndisable\nType: boolean\nTurn off this module's behavior This parameter is most useful to allow overriding at more specific levels",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 850074,
      "relative_path": "documentation\\storybook\\_docs_essentials_viewport.html",
      "source_type": "documentation"
    },
    "token_count": 487,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "8d3d8f91214c367613dc630c45142525",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_viewport.html",
    "source_type": "documentation",
    "title": "Viewport | Storybook docs",
    "content": "When set, the viewport is applied and cannot be changed using the toolbar Must match the key of one of the available viewports isRotated Type: boolean When true, the viewport applied will be rotated 90°, e g , from portrait to landscape orientation Parameters This module contributes the following parameters to Storybook, under the viewport namespace: disable Type: boolean Turn off this module's behavior This parameter is most useful to allow overriding at more specific levelsFor example, if this parameter is set to true at the project level, it could be re-enabled by setting it to false at the meta (component) or story level options\nType:\n{\n[key: string]: {\nname: string;\nstyles: { height: string, width: string };\ntype: 'desktop' | 'mobile' | 'tablet' | 'other';\n};\n}\nSpecify the available viewports See usage example above The width and height values must include the unit, e g '320px' Exports\nThis module contributes the following exports to Storybook:\nimport { INITIAL_VIEWPORTS, MINIMAL_VIEWPORTS } from 'storybook/viewport';\nINITIAL_VIEWPORTS\nType: object\nThe full set of initial viewports provided by the Viewport module listed above MINIMAL_VIEWPORTS\nType: object\nA minimal set of viewports provided by the Viewport module listed above These are used by default Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 850074,
      "relative_path": "documentation\\storybook\\_docs_essentials_viewport.html",
      "source_type": "documentation"
    },
    "token_count": 349,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "50669d7c205c7bcb698809e080eda0ce",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started.html",
    "source_type": "documentation",
    "title": "Get started with Storybook | Storybook docs",
    "content": "Get started with Storybook | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Get StartedDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQGet started with StorybookWelcome to Storybook's documentation ✦ Learn how to get started with Storybook in your project Then, explore Storybook's main concepts and discover additional resources to help you grow and maintain your Storybook What is Storybook Storybook is a frontend workshop for building UI components and pages in isolation It helps you develop and share hard-to-reach states and edge cases without needing to run your whole app Thousands of teams use it for UI development, testing, and documentation It's open source and free Install Storybook\nStorybook is a standalone tool that runs alongside your app It's a zero-config environment that works with any modern frontend framework You can install Storybook into an existing project or create a new one from scratch npmnpm create storybook@latest\nNext jsReactwith ViteReactwith WebpackReact Native Webwith Vite (in browser)React Nativeon devicePreactwith ViteVuewith ViteAngularSvelteKitSveltewith ViteWeb Componentswith Vite\nWant to know more about installing Storybook Check out the installation guide Main concepts\nStorybook is a powerful tool that can help you with many aspects of your UI development workflow",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 516560,
      "relative_path": "documentation\\storybook\\_docs_get-started.html",
      "source_type": "documentation"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "f960859985a5d75436b6d1d30991acd1",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started.html",
    "source_type": "documentation",
    "title": "Get started with Storybook | Storybook docs",
    "content": "It's a zero-config environment that works with any modern frontend framework You can install Storybook into an existing project or create a new one from scratch npmnpm create storybook@latest Next jsReactwith ViteReactwith WebpackReact Native Webwith Vite (in browser)React Nativeon devicePreactwith ViteVuewith ViteAngularSvelteKitSveltewith ViteWeb Componentswith Vite Want to know more about installing Storybook Check out the installation guide Main concepts Storybook is a powerful tool that can help you with many aspects of your UI development workflowHere are some of the main concepts to get you started StoriesA story captures the rendered state of a UI component Each component can have multiple stories, where each story describes a different component state DocsStorybook can analyze your components to automatically create documentation alongside your stories This automatic documentation makes it easier for you to create UI library usage guidelines, design system sites, and more TestingStories are a pragmatic starting point for your UI testing strategy You already write stories as a natural part of UI development, so testing those stories is a low-effort way to prevent UI bugs over time SharingPublishing your Storybook allows you to share your work with others You can also embed your stories in places like Notion or Figma Additional resources\nOnce you've learned the basics, explore these other ways to get the most out of Storybook Essential addonsAddon catalogRecipesBuildersHow to contributeMigrate to 9 0FAQNeed some help Join a discussion on GitHubLatest product updatesSee changelogWas this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 516560,
      "relative_path": "documentation\\storybook\\_docs_get-started.html",
      "source_type": "documentation"
    },
    "token_count": 380,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "9b8888a9483248bf1c95becd8ba1c231",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_controls.html",
    "source_type": "documentation",
    "title": "Controls | Storybook docs",
    "content": "Controls | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Essentials » ControlsDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQControlsReactVueAngularWeb ComponentsMoreStorybook Controls gives you a graphical UI to interact with a component's arguments dynamically without needing to code Use the Controls panel to edit the inputs to your stories and see the results in real-time It's a great way to explore your components and test different states Controls do not require any modification to your components Stories for controls are:\nConvenient Auto-generate controls based on React/Vue/Angular/etc components Portable Reuse your interactive stories in documentation, tests, and even in designs Rich Customize the controls and interactive data to suit your exact needs To use Controls, you need to write your stories using args Storybook will automatically generate UI controls based on your args and what it can infer about your component Still, you can configure the controls further using argTypes, see below 💡If you have stories in the older pre-Storybook 6 style, check the args & controls migration guide to learn how to convert your existing stories for args Choosing the control type\nBy default, Storybook will choose a control for each arg based on its initial value This will work well with specific arg types (e g , boolean or string)",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 2506892,
      "relative_path": "documentation\\storybook\\_docs_essentials_controls.html",
      "source_type": "documentation"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 15
  },
  {
    "id": "ffa8e722d53dd009182de6c75150570e",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_controls.html",
    "source_type": "documentation",
    "title": "Controls | Storybook docs",
    "content": "can infer about your component Still, you can configure the controls further using argTypes, see below 💡If you have stories in the older pre-Storybook 6 style, check the args & controls migration guide to learn how to convert your existing stories for args Choosing the control type By default, Storybook will choose a control for each arg based on its initial value This will work well with specific arg types (e g , boolean or string)To enable them, add the component annotation to the default export of your story file, and it will be used to infer the controls and auto-generate the matching argTypes for your component using react-docgen, a documentation generator for React components that also includes first-class support for TypeScript Button stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { Button } from ' /Button';\nconst meta = {\ncomponent: Button,\n} satisfies Meta<typeof Button>;\nexport default meta;\nFor instance, suppose you have a variant arg on your story that should be primary or secondary:\nButton stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { Button } from ' /Button';\nconst meta = {\ncomponent: Button,\n} satisfies Meta<typeof Button>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const Primary: Story = {\nargs: {\nvariant: 'primary',\n},\n};\nBy default, Storybook will render a free text input for the variant arg:\nIt works as long as you type a valid string into the auto-generated text control Still, it's not the best UI for our scenario, given that the component only accepts primary or secondary as variants Let’s replace it with Storybook’s radio component We can specify which controls get used by declaring a custom argType for the variant property ArgTypes encode basic metadata for args, such as name, description, and defaultValue for an arg These get automatically filled in by Storybook Docs ArgTypes can also contain arbitrary annotations, which the user can override Since variant is a component property, let's put that annotation on the default export Button stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 2506892,
      "relative_path": "documentation\\storybook\\_docs_essentials_controls.html",
      "source_type": "documentation"
    },
    "token_count": 496,
    "chunk_index": 1,
    "total_chunks": 15
  },
  {
    "id": "15bbf2f3a7cefecbd86605ed64bc9e23",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_controls.html",
    "source_type": "documentation",
    "title": "Controls | Storybook docs",
    "content": "can specify which controls get used by declaring a custom argType for the variant property ArgTypes encode basic metadata for args, such as name, description, and defaultValue for an arg These get automatically filled in by Storybook Docs ArgTypes can also contain arbitrary annotations, which the user can override Since variant is a component property, let's put that annotation on the default export Button stories ts|tsxTypescript// Replace your-framework with the framework you are using, e greact-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { Button } from ' /Button';\nconst meta = {\ncomponent: Button,\nargTypes: {\nvariant: {\noptions: ['primary', 'secondary'],\ncontrol: { type: 'radio' },\n},\n},\n} satisfies Meta<typeof Button>;\nexport default meta;\n💡ArgTypes are a powerful feature that can be used to customize the controls for your stories For more information, see the documentation about customizing controls with argTypes annotation This replaces the input with a radio group for a more intuitive experience Custom control type matchers\nControls can automatically be inferred from arg's name with regex, but currently only for the color picker and date picker controls If you've used the Storybook CLI to setup your project, it should have automatically created the following defaults in storybook/preview js|ts:\nControlDefault regexDescriptioncolor/(background|color)$/iWill display a color picker UI for the args that match itdate/Date$/Will display a date picker UI for the args that match it\nIf you haven't used the CLI to set the configuration, or if you want to define your patterns, use the matchers property in the controls parameter: storybook/preview tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Preview } from '@storybook/your-framework';\nconst preview: Preview = {\nparameters: {\ncontrols: {\nmatchers: {\ncolor: /(background|color)$/i,\ndate: /Date$/,\n},\n},\n},\n};\nexport default preview;\nFully custom args\nUntil now, we only used auto-generated controls based on the component for which we're writing stories If we are writing complex stories, we may want to add controls for args that aren’t part of the component For example, here's how you could use a footer arg to populate a child component:\nPage stories",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 2506892,
      "relative_path": "documentation\\storybook\\_docs_essentials_controls.html",
      "source_type": "documentation"
    },
    "token_count": 496,
    "chunk_index": 2,
    "total_chunks": 15
  },
  {
    "id": "0272fadb1df95993b2e80665f7cf2d45",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_controls.html",
    "source_type": "documentation",
    "title": "Controls | Storybook docs",
    "content": "Preview = { parameters: { controls: { matchers: { color: /(background|color)$/i, date: /Date$/, }, }, }, }; export default preview; Fully custom args Until now, we only used auto-generated controls based on the component for which we're writing stories If we are writing complex stories, we may want to add controls for args that aren’t part of the component For example, here's how you could use a footer arg to populate a child component: Page storiests|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { Page } from ' /Page';\ntype PagePropsAndCustomArgs = React ComponentProps<typeof Page> & { footer : string };\nconst meta = {\ncomponent: Page,\nrender: ({ footer, args }) => (\n<Page { args}>\n<footer>{footer}</footer>\n</Page>\n),\n} satisfies Meta<PagePropsAndCustomArgs>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const CustomFooter = {\nargs: {\nfooter: 'Built with Storybook',\n},\n} satisfies Story;\nBy default, Storybook will add controls for all args that:\nIt infers from the component definition if your framework supports it Appear in the list of args for your story Using argTypes, you can change the display and behavior of each control Dealing with complex values\nWhen dealing with non-primitive values, you'll notice that you'll run into some limitations The most obvious issue is that not every value can be represented as part of the args param in the URL, losing the ability to share and deep link to such a state Beyond that, complex values such as JSX cannot be synchronized between the manager (e g , the Controls panel) and the preview (your story) One way to deal with this is to use primitive values (e g , strings) as arg values and add a custom render function to convert them to their complex counterpart before rendering It isn't the nicest way to do it (see below), but certainly the most flexible YourComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { YourComponent } from '",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 2506892,
      "relative_path": "documentation\\storybook\\_docs_essentials_controls.html",
      "source_type": "documentation"
    },
    "token_count": 496,
    "chunk_index": 3,
    "total_chunks": 15
  },
  {
    "id": "582996552d11a218b9d67eb2ad99bce8",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_controls.html",
    "source_type": "documentation",
    "title": "Controls | Storybook docs",
    "content": "deal with this is to use primitive values (e g , strings) as arg values and add a custom render function to convert them to their complex counterpart before rendering It isn't the nicest way to do it (see below), but certainly the most flexible YourComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework'; import { YourComponent } from '/your-component';\nconst meta = {\ncomponent: YourComponent,\n//👇 Creates specific argTypes with options\nargTypes: {\npropertyA: {\noptions: ['Item One', 'Item Two', 'Item Three'],\ncontrol: { type: 'select' }, // Automatically inferred when 'options' is defined\n},\npropertyB: {\noptions: ['Another Item One', 'Another Item Two', 'Another Item Three'],\n},\n},\n} satisfies Meta<typeof YourComponent>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nconst someFunction = (valuePropertyA, valuePropertyB) => {\n// Do some logic here\n};\nexport const ExampleStory: Story = {\nrender: (args) => {\nconst { propertyA, propertyB } = args;\n//👇 Assigns the function result to a variable\nconst someFunctionResult = someFunction(propertyA, propertyB);\nreturn <YourComponent { args} someProperty={someFunctionResult} />;\n},\nargs: {\npropertyA: 'Item One',\npropertyB: 'Another Item One',\n},\n};\nUnless you need the flexibility of a function, an easier way to map primitives to complex values before rendering is to define a mapping; additionally, you can specify control labels to configure custom labels for your checkbox, radio, or select input Button stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { Button } from ' /Button';\nimport { ArrowUp, ArrowDown, ArrowLeft, ArrowRight } from ' /icons';\nconst arrows = { ArrowUp, ArrowDown, ArrowLeft, ArrowRight };\nconst meta = {\ncomponent: Button,\nargTypes: {\narrow: {\noptions: Object",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 2506892,
      "relative_path": "documentation\\storybook\\_docs_essentials_controls.html",
      "source_type": "documentation"
    },
    "token_count": 477,
    "chunk_index": 4,
    "total_chunks": 15
  },
  {
    "id": "7b4a0783f16f825722036ed6908a192e",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_controls.html",
    "source_type": "documentation",
    "title": "Controls | Storybook docs",
    "content": "specify control labels to configure custom labels for your checkbox, radio, or select input Button stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework'; import { Button } from ' /Button'; import { ArrowUp, ArrowDown, ArrowLeft, ArrowRight } from ' /icons'; const arrows = { ArrowUp, ArrowDown, ArrowLeft, ArrowRight }; const meta = { component: Button, argTypes: { arrow: { options: Objectkeys(arrows), // An array of serializable values\nmapping: arrows, // Maps serializable option values to complex arg values\ncontrol: {\ntype: 'select', // Type 'select' is automatically inferred when 'options' is defined\nlabels: {\n// 'labels' maps option values to string labels\nArrowUp: 'Up',\nArrowDown: 'Down',\nArrowLeft: 'Left',\nArrowRight: 'Right',\n},\n},\n},\n},\n} satisfies Meta<typeof Button>;\nexport default meta;\nNote that both mapping and control labels don't have to be exhaustive If the currently selected option is not listed, it's used verbatim Creating and editing stories from controls\nYou can create or edit stories, directly from the Controls panel Create a new story\nOpen the Controls panel for a story and adjust the value of a control Then save those changes as a new story If you're working on a component that does not yet have any stories, you can click the ➕ button in the sidebar to search for your component and have a basic story created for you Edit a story\nYou can also update a control's value, then save the changes to the story The story file's code will be updated for you Disable creating and editing of stories\nIf you don't want to allow the creation or editing of stories from the Controls panel, you can disable this feature by setting the disableSaveFromUI parameter to true in the parameters controls parameter in your storybook/preview js|ts file Configuration\nControls can be configured in two ways:\nIndividual controls can be configured via control annotations The panel's appearance can be configured via parameters Annotation\nAs shown above, you can configure individual controls with the “control\" annotation in the argTypes field of either a component or story Below is a condensed example and table featuring all available controls",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 2506892,
      "relative_path": "documentation\\storybook\\_docs_essentials_controls.html",
      "source_type": "documentation"
    },
    "token_count": 488,
    "chunk_index": 5,
    "total_chunks": 15
  },
  {
    "id": "abc9dddfd114a57deec1e1697b04efaf",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_controls.html",
    "source_type": "documentation",
    "title": "Controls | Storybook docs",
    "content": "feature by setting the disableSaveFromUI parameter to true in the parameters controls parameter in your storybook/preview js|ts file Configuration Controls can be configured in two ways: Individual controls can be configured via control annotations The panel's appearance can be configured via parameters Annotation As shown above, you can configure individual controls with the “control\" annotation in the argTypes field of either a component or story Below is a condensed example and table featuring all available controlsData TypeControlDescriptionbooleanbooleanProvides a toggle for switching between possible states argTypes: { active: { control: 'boolean' }}numbernumberProvides a numeric input to include the range of all possible values argTypes: { even: { control: { type: 'number', min:1, max:30, step: 2 } }}rangeProvides a range slider component to include all possible values argTypes: { odd: { control: { type: 'range', min: 1, max: 30, step: 3 } }}objectobjectProvides a JSON-based editor component to handle the object's values Also allows edition in raw mode argTypes: { user: { control: 'object' }}arrayobjectProvides a JSON-based editor component to handle the array's values Also allows edition in raw mode argTypes: { odd: { control: 'object' }}fileProvides a file input component that returns an array of URLs Can be further customized to accept specific file types argTypes: { avatar: { control: { type: 'file', accept: ' png' } }}enumradioProvides a set of radio buttons based on the available options argTypes: { contact: { control: 'radio', options: ['email', 'phone', 'mail'] }}inline-radioProvides a set of inlined radio buttons based on the available options argTypes: { contact: { control: 'inline-radio', options: ['email', 'phone', 'mail'] }}checkProvides a set of checkbox components for selecting multiple options argTypes: { contact: { control: 'check', options: ['email', 'phone', 'mail'] }}inline-checkProvides a set of inlined checkbox components for selecting multiple options argTypes: { contact: { control: 'inline-check', options: ['email', 'phone', 'mail'] }}selectProvides a drop-down list component to handle single value selection",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 2506892,
      "relative_path": "documentation\\storybook\\_docs_essentials_controls.html",
      "source_type": "documentation"
    },
    "token_count": 474,
    "chunk_index": 6,
    "total_chunks": 15
  },
  {
    "id": "e64503a372898a6180d6e9518e6d2b43",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_controls.html",
    "source_type": "documentation",
    "title": "Controls | Storybook docs",
    "content": "['email', 'phone', 'mail'] }}inline-radioProvides a set of inlined radio buttons based on the available options argTypes: { contact: { control: 'inline-radio', options: ['email', 'phone', 'mail'] }}checkProvides a set of checkbox components for selecting multiple options argTypes: { contact: { control: 'check', options: ['email', 'phone', 'mail'] }}inline-checkProvides a set of inlined checkbox components for selecting multiple options argTypes: { contact: { control: 'inline-check', options: ['email', 'phone', 'mail'] }}selectProvides a drop-down list component to handle single value selectionargTypes: { age: { control: 'select', options: [20, 30, 40, 50] }}multi-selectProvides a drop-down list that allows multiple selected values argTypes: { countries: { control: 'multi-select', options: ['USA', 'Canada', 'Mexico'] }}stringtextProvides a freeform text input argTypes: { label: { control: 'text' }}colorProvides a color picker component to handle color values Can be additionally configured to include a set of color presets argTypes: { color: { control: { type: 'color', presetColors: ['red', 'green']} }}dateProvides a datepicker component to handle date selection argTypes: { startDate: { control: 'date' }}\n💡The date control will convert the date into a UNIX timestamp when the value changes It's a known limitation that will be fixed in a future release If you need to represent the actual date, you'll need to update the story's implementation and convert the value into a date object Gizmo stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { Gizmo } from '",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 2506892,
      "relative_path": "documentation\\storybook\\_docs_essentials_controls.html",
      "source_type": "documentation"
    },
    "token_count": 399,
    "chunk_index": 7,
    "total_chunks": 15
  },
  {
    "id": "a8747f917b97dd0bf63d4e99a53cd597",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_controls.html",
    "source_type": "documentation",
    "title": "Controls | Storybook docs",
    "content": "convert the date into a UNIX timestamp when the value changes It's a known limitation that will be fixed in a future release If you need to represent the actual date, you'll need to update the story's implementation and convert the value into a date object Gizmo stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework'; import { Gizmo } from '/Gizmo';\nconst meta = {\ncomponent: Gizmo,\nargTypes: {\ncanRotate: {\ncontrol: 'boolean',\n},\nwidth: {\ncontrol: { type: 'number', min: 400, max: 1200, step: 50 },\n},\nheight: {\ncontrol: { type: 'range', min: 200, max: 1500, step: 50 },\n},\nrawData: {\ncontrol: 'object',\n},\ncoordinates: {\ncontrol: 'object',\n},\ntexture: {\ncontrol: {\ntype: 'file',\naccept: ' png',\n},\n},\nposition: {\ncontrol: 'radio',\noptions: ['left', 'right', 'center'],\n},\nrotationAxis: {\ncontrol: 'check',\noptions: ['x', 'y', 'z'],\n},\nscaling: {\ncontrol: 'select',\noptions: [10, 50, 75, 100, 200],\n},\nlabel: {\ncontrol: 'text',\n},\nmeshColors: {\ncontrol: {\ntype: 'color',\npresetColors: ['#ff0000', '#00ff00', '#0000ff'],\n},\n},\nrevisionDate: {\ncontrol: 'date',\n},\n},\n} satisfies Meta<typeof Gizmo>;\nexport default meta;\n💡Numeric data types will default to a number control unless additional configuration is provided Parameters\nControls supports the following configuration parameters, either globally or on a per-story basis:\nShow full documentation for each property\nSince Controls is built on the same engine as Storybook Docs, it can also show property documentation alongside your controls using the expanded parameter (defaults to false) This means you embed a complete Controls doc block in the controls panel The description and default value rendering can be customized like the doc block To enable expanded mode globally, add the following to storybook/preview js|ts: storybook/preview tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 2506892,
      "relative_path": "documentation\\storybook\\_docs_essentials_controls.html",
      "source_type": "documentation"
    },
    "token_count": 502,
    "chunk_index": 8,
    "total_chunks": 15
  },
  {
    "id": "f8506b7d6e8b3f564382f7312ec8caea",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_controls.html",
    "source_type": "documentation",
    "title": "Controls | Storybook docs",
    "content": "on the same engine as Storybook Docs, it can also show property documentation alongside your controls using the expanded parameter (defaults to false) This means you embed a complete Controls doc block in the controls panel The description and default value rendering can be customized like the doc block To enable expanded mode globally, add the following to storybook/preview js|ts: storybook/preview tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etcimport type { Preview } from '@storybook/your-framework';\nconst preview: Preview = {\nparameters: {\ncontrols: { expanded: true },\n},\n};\nexport default preview;\nHere's what the resulting UI looks like:\nSpecify initial preset color swatches\nFor color controls, you can specify an array of presetColors, either on the control in argTypes, or as a parameter under the controls namespace: storybook/preview tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Preview } from '@storybook/your-framework';\nconst preview: Preview = {\nparameters: {\ncontrols: {\npresetColors: [{ color: '#ff4785', title: 'Coral' }, 'rgba(0, 159, 183, 1)', '#fe4a49'],\n},\n},\n};\nexport default preview;\nColor presets can be defined as an object with color and title or a simple CSS color string These will then be available as swatches in the color picker When you hover over the color swatch, you'll be able to see its title It will default to the nearest CSS color name if none is specified Filtering controls\nIn specific cases, you may be required to display only a limited number of controls in the controls panel or all except a particular set To make this possible, you can use optional include and exclude configuration fields in the controls parameter, which you can define as an array of strings or a regular expression Consider the following story snippets:\nYourComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { YourComponent } from '",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 2506892,
      "relative_path": "documentation\\storybook\\_docs_essentials_controls.html",
      "source_type": "documentation"
    },
    "token_count": 469,
    "chunk_index": 9,
    "total_chunks": 15
  },
  {
    "id": "912d5f4180b2fa8185901121daa2b2c9",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_controls.html",
    "source_type": "documentation",
    "title": "Controls | Storybook docs",
    "content": "in the controls panel or all except a particular set To make this possible, you can use optional include and exclude configuration fields in the controls parameter, which you can define as an array of strings or a regular expression Consider the following story snippets: YourComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework'; import { YourComponent } from '/YourComponent';\nconst meta = {\ncomponent: YourComponent,\n} satisfies Meta<typeof YourComponent>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const ArrayInclude: Story = {\nparameters: {\ncontrols: { include: ['foo', 'bar'] },\n},\n};\nexport const RegexInclude: Story = {\nparameters: {\ncontrols: { include: /^hello*/ },\n},\n};\nexport const ArrayExclude: Story = {\nparameters: {\ncontrols: { exclude: ['foo', 'bar'] },\n},\n};\nexport const RegexExclude: Story = {\nparameters: {\ncontrols: { exclude: /^hello*/ },\n},\n};\nSorting controls\nBy default, controls are unsorted and use whatever order the args data is processed in (none) Additionally, you can sort them alphabetically by the arg's name (alpha) or with the required args first (requiredFirst) Consider the following snippet to force required args first:\nYourComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { YourComponent } from ' /YourComponent';\nconst meta = {\ncomponent: YourComponent,\nparameters: { controls: { sort: 'requiredFirst' } },\n} satisfies Meta<typeof YourComponent>;\nexport default meta;\nDisable controls for specific properties\nAside from the features already documented here, Controls can also be disabled for individual properties Suppose you want to turn off Controls for a property called foo in a component's story The following example illustrates how:\nYourComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { YourComponent } from '",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 2506892,
      "relative_path": "documentation\\storybook\\_docs_essentials_controls.html",
      "source_type": "documentation"
    },
    "token_count": 477,
    "chunk_index": 10,
    "total_chunks": 15
  },
  {
    "id": "47d1fbc91d16cc03950eddf7936dd8d0",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_controls.html",
    "source_type": "documentation",
    "title": "Controls | Storybook docs",
    "content": "Meta<typeof YourComponent>; export default meta; Disable controls for specific properties Aside from the features already documented here, Controls can also be disabled for individual properties Suppose you want to turn off Controls for a property called foo in a component's story The following example illustrates how: YourComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework'; import { YourComponent } from '/YourComponent';\nconst meta = {\ncomponent: YourComponent,\nargTypes: {\n// foo is the property we want to remove from the UI\nfoo: {\ntable: {\ndisable: true,\n},\n},\n},\n} satisfies Meta<typeof YourComponent>;\nexport default meta;\nResulting in the following change in Storybook UI:\nThe previous example also removed the prop documentation from the table In some cases, this is fine However, sometimes you might want to render the prop documentation without a control The following example illustrates how:\nYourComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { YourComponent } from ' /YourComponent';\nconst meta = {\ncomponent: YourComponent,\nargTypes: {\n// foo is the property we want to remove from the UI\nfoo: {\ncontrol: false,\n},\n},\n} satisfies Meta<typeof YourComponent>;\nexport default meta;\n💡As with other Storybook properties, such as decorators, you can apply the same pattern at a story level for more granular cases Conditional controls\nIn some cases, it's useful to be able to conditionally exclude a control based on the value of another control Controls supports basic versions of these use cases with the if, which can take a simple query object to determine whether to include the control Consider a collection of \"advanced\" settings only visible when the user toggles an \"advanced\" toggle Button stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { Button } from '",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 2506892,
      "relative_path": "documentation\\storybook\\_docs_essentials_controls.html",
      "source_type": "documentation"
    },
    "token_count": 462,
    "chunk_index": 11,
    "total_chunks": 15
  },
  {
    "id": "d8b7bf40002be14dfddee339514949c3",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_controls.html",
    "source_type": "documentation",
    "title": "Controls | Storybook docs",
    "content": "on the value of another control Controls supports basic versions of these use cases with the if, which can take a simple query object to determine whether to include the control Consider a collection of \"advanced\" settings only visible when the user toggles an \"advanced\" toggle Button stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework'; import { Button } from '/Button';\nconst meta = {\ncomponent: Button,\nargTypes: {\nlabel: { control: 'text' }, // Always shows the control\nadvanced: { control: 'boolean' },\n// Only enabled if advanced is true\nmargin: { control: 'number', if: { arg: 'advanced' } },\npadding: { control: 'number', if: { arg: 'advanced' } },\ncornerRadius: { control: 'number', if: { arg: 'advanced' } },\n},\n} satisfies Meta<typeof Button>;\nexport default meta;\nOr consider a constraint where if the user sets one control value, it doesn't make sense for the user to be able to set another value Button stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { Button } from ' /Button';\nconst meta = {\ncomponent: Button,\nargTypes: {\n// Button can be passed a label or an image, not both\nlabel: {\ncontrol: 'text',\nif: { arg: 'image', truthy: false },\n},\nimage: {\ncontrol: { type: 'select', options: ['foo jpg', 'bar jpg'] },\nif: { arg: 'label', truthy: false },\n},\n},\n} satisfies Meta<typeof Button>;\nexport default meta;\nThe query object must contain either an arg or global target:\nfieldtypemeaningargstringThe ID of the arg to test globalstringThe ID of the global to test It may also contain at most one of the following operators:\noperatortypemeaningtruthybooleanIs the target value truthy existsbooleanIs the target value defined eqanyIs the target value equal to the provided value neqanyIs the target value NOT equal to the provided value If no operator is provided, that is equivalent to { truthy: true }",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 2506892,
      "relative_path": "documentation\\storybook\\_docs_essentials_controls.html",
      "source_type": "documentation"
    },
    "token_count": 500,
    "chunk_index": 12,
    "total_chunks": 15
  },
  {
    "id": "7db99d698bef390b1b508e85fba98f9c",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_controls.html",
    "source_type": "documentation",
    "title": "Controls | Storybook docs",
    "content": "object must contain either an arg or global target: fieldtypemeaningargstringThe ID of the arg to test globalstringThe ID of the global to test It may also contain at most one of the following operators: operatortypemeaningtruthybooleanIs the target value truthy existsbooleanIs the target value defined eqanyIs the target value equal to the provided value neqanyIs the target value NOT equal to the provided value If no operator is provided, that is equivalent to { truthy: true }Troubleshooting\nThe controls are not updating the story within the auto-generated documentation\nIf you turned off inline rendering for your stories via the inline configuration option, you would run into a situation where the associated controls are not updating the story within the documentation page This is a known limitation of the current implementation and will be addressed in a future release API\nParameters\nThis feature contributes the following parameters to Storybook, under the controls namespace:\ndisable\nType: boolean\nDisable this feature's behavior If you wish to disable this feature for the entire Storybook, you should do so in your main configuration file This parameter is most useful to allow overriding at more specific levels For example, if this parameter is set to true at the project level, it could then be re-enabled by setting it to false at the meta (component) or story level exclude\nType: string[] | RegExp\nSpecifies which properties to exclude from the Controls panel Any properties whose names match the regex or are part of the array will be left out See usage example, above expanded\nType: boolean\nShow the full documentation for each property in the Controls panel, including the description and default value See usage example, above include\nType: string[] | RegExp\nSpecifies which properties to include in the Controls panel Any properties whose names don't match the regex or are not part of the array will be left out See usage example, above presetColors\nType: (string | { color: string; title : string })[]\nSpecify preset color swatches for the color picker control The color value may be any valid CSS color See usage example, above sort\nType: 'none' | 'alpha' | 'requiredFirst'\nDefault: 'none'\nSpecifies how the controls are sorted",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 2506892,
      "relative_path": "documentation\\storybook\\_docs_essentials_controls.html",
      "source_type": "documentation"
    },
    "token_count": 454,
    "chunk_index": 13,
    "total_chunks": 15
  },
  {
    "id": "e92a387ba195975ba5380f8bfd73f71c",
    "source_file": "corpus\\documentation\\storybook\\_docs_essentials_controls.html",
    "source_type": "documentation",
    "title": "Controls | Storybook docs",
    "content": "include in the Controls panel Any properties whose names don't match the regex or are not part of the array will be left out See usage example, above presetColors Type: (string | { color: string; title : string })[] Specify preset color swatches for the color picker control The color value may be any valid CSS color See usage example, above sort Type: 'none' | 'alpha' | 'requiredFirst' Default: 'none' Specifies how the controls are sortednone: Unsorted, displayed in the same order the arg types are processed in\nalpha: Sorted alphabetically, by the arg type's name\nrequiredFirst: Same as alpha, with any required arg types displayed first\ndisableSaveFromUI\nType: boolean\nDefault: false\nDisable the ability to create or edit stories from the Controls panel Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 2506892,
      "relative_path": "documentation\\storybook\\_docs_essentials_controls.html",
      "source_type": "documentation"
    },
    "token_count": 237,
    "chunk_index": 14,
    "total_chunks": 15
  },
  {
    "id": "faf2434ae3123d91b7e6d1880109d9d6",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_browse-stories.html",
    "source_type": "documentation",
    "title": "Browse Stories | Storybook docs",
    "content": "Browse Stories | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Get Started » Browse storiesDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQBrowse StoriesLast chapter, we learned that stories correspond with discrete component states This chapter demonstrates how to use Storybook as a workshop for building components Sidebar and Canvas\nA * stories js|ts|svelte file defines all the stories for a component Each story has a corresponding sidebar item When you click on a story, it renders in the Canvas an isolated preview iframe Navigate between stories by clicking on them in the sidebar Try the sidebar search to find a story by name Or use keyboard shortcuts Click on the Storybook's menu to see the list of shortcuts available Toolbar\nStorybook ships with time-saving tools built-in The toolbar contains tools that allow you to adjust how the story renders in the Canvas:\n🔍 Zooming visually scales the component so you can check the details 🖼 Background changes the rendered background behind your component so you can verify how your component renders in different visual contexts 📐 Grid renders your component on top of a grid layout so you can verify if your component is aligned correctly 📏 Measure toggles a measurement overlay to help you inspect the dimensions of components 🎚️ Outline displays the component's bounding box so you can verify if your component is positioned correctly",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 494329,
      "relative_path": "documentation\\storybook\\_docs_get-started_browse-stories.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "e1e8f306a939c0a38bf7fd9ec93961df",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_browse-stories.html",
    "source_type": "documentation",
    "title": "Browse Stories | Storybook docs",
    "content": "check the details 🖼 Background changes the rendered background behind your component so you can verify how your component renders in different visual contexts 📐 Grid renders your component on top of a grid layout so you can verify if your component is aligned correctly 📏 Measure toggles a measurement overlay to help you inspect the dimensions of components 🎚️ Outline displays the component's bounding box so you can verify if your component is positioned correctly📱 Viewport renders the component in a variety of dimensions and orientations It’s ideal for checking the responsiveness of components The “Docs” page displays auto-generated documentation for components (inferred from the source code) Usage documentation is helpful when sharing reusable components with your team, for example, in an application The toolbar is customizable You can use globals to quickly toggle themes and languages Or install Storybook toolbar addons from the community to enable advanced workflows Addons\nAddons are plugins that extend Storybook's core functionality You can find them in the addons panel, a reserved place in the Storybook UI below the Canvas Each tab shows the generated metadata, logs, or static analysis for the selected story by the addon Controls allows you to interact with a component’s args (inputs) dynamically Experiment with alternate configurations of the component to discover edge cases Actions help you verify interactions produce the correct outputs via callbacks For instance, if you view the “Logged In” story of the Header component, we can verify that clicking the “Log out” button triggers the onLogout callback, which would be provided by the component that made use of the Header Interactions provides a helpful user interface for debugging interaction tests with the play function Accessibility helps you identify accessibility violations in your components Visual Tests lets you pinpoint UI bugs in your local development environment by providing instant feedback directly in Storybook Storybook is extensible Our rich ecosystem of addons helps you test, document, and optimize your stories You can also create an addon to satisfy your workflow requirements Read more in the addons section In the next chapter, we'll get your components rendering in Storybook so you can use it to supercharge component development Use stories to build UIs\nWhen building apps, one of the biggest challenges is to figure out if a piece of UI already exists in your codebase and how to use it for the new feature you're building Storybook catalogues all your components and their use cases Therefore, you can quickly browse it to find what you're looking for",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 494329,
      "relative_path": "documentation\\storybook\\_docs_get-started_browse-stories.html",
      "source_type": "documentation"
    },
    "token_count": 484,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "687e0d50d9dfcbc29396afa75d1f8786",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_browse-stories.html",
    "source_type": "documentation",
    "title": "Browse Stories | Storybook docs",
    "content": "chapter, we'll get your components rendering in Storybook so you can use it to supercharge component development Use stories to build UIs When building apps, one of the biggest challenges is to figure out if a piece of UI already exists in your codebase and how to use it for the new feature you're building Storybook catalogues all your components and their use cases Therefore, you can quickly browse it to find what you're looking forHere's what the workflow looks like:\n🗃 Use the sidebar to find a suitable component\n👀 Review its stories to pick a variant that suits your needs\n📝 Copy/paste the story definition into your app code and wire it up to data\nYou can access the story definition from the stories file or make it available in your published Storybook using the Docs addon Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 494329,
      "relative_path": "documentation\\storybook\\_docs_get-started_browse-stories.html",
      "source_type": "documentation"
    },
    "token_count": 236,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "1f55890a1ab2bb0bdf3075d3c45fc62a",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_conclusion.html",
    "source_type": "documentation",
    "title": "Conclusion | Storybook docs",
    "content": "Conclusion | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Get Started » ConclusionDocumentationAPITutorialsAddonsChangelogVersion 9.1Get StartedWhy Storybook?InstallFrameworksWhat's a story?Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9.0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain.js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQConclusionCongratulations! You learned the basics. Storybook is the most popular tool for UI component development and documentation. You’ll be able to transfer these skills to thousands of companies that use Storybook to build UIs including GitHub, Airbnb, and Stripe.\nIf you’d like to learn workflows for building app UIs with Storybook, check out our in-depth guides over at the tutorials page. Continue reading for detailed information on how to use Storybook APIs.\nHow to write stories\nHow to document components and design systems\nView example Storybooks from leading companies\nWas this page useful?👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 467218,
      "relative_path": "documentation\\storybook\\_docs_get-started_conclusion.html",
      "source_type": "documentation"
    },
    "token_count": 445,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4e1322f53e4e43d016c31dbe805f21e9",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_preact-vite.html",
    "source_type": "documentation",
    "title": "Storybook for Preact & Vite | Storybook docs",
    "content": "Storybook for Preact & Vite | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Get Started » Frameworks » Preact & ViteDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQStorybook for Preact & ViteStorybook for Preact & Vite is a framework that makes it easy to develop and test UI components in isolation for Preact applications built with Vite It includes:\n🏎️ Pre-bundled for performance\n🪄 Zero config\n💫 and more Requirements\nPreact 8 x || 10 x\nVite ≥ 5 0\nGetting started\nIn a project without Storybook\nFollow the prompts after running this command in your Preact project's root directory:\nnpmnpm create storybook@latest\nMore on getting started with Storybook In a project with Storybook\nThis framework is designed to work with Storybook 7+ If you’re not already using v7, upgrade with this command:\nnpmnpx storybook@latest upgrade\nAutomatic migration\nWhen running the upgrade command above, you should get a prompt asking you to migrate to @storybook/preact-vite, which should handle everything for you In case that auto-migration does not work for your project, refer to the manual migration below",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 542230,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_preact-vite.html",
      "source_type": "documentation"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ca2d37fa851bd1e4191a6c1f95412b27",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_preact-vite.html",
    "source_type": "documentation",
    "title": "Storybook for Preact & Vite | Storybook docs",
    "content": "create storybook@latest More on getting started with Storybook In a project with Storybook This framework is designed to work with Storybook 7+ If you’re not already using v7, upgrade with this command: npmnpx storybook@latest upgrade Automatic migration When running the upgrade command above, you should get a prompt asking you to migrate to @storybook/preact-vite, which should handle everything for you In case that auto-migration does not work for your project, refer to the manual migration belowManual migration\nFirst, install the framework:\nnpmnpm install --save-dev @storybook/preact-vite\nThen, update your storybook/main js|ts to change the framework property: storybook/main tsTypescriptimport type { StorybookConfig } from '@storybook/preact-vite';\nconst config: StorybookConfig = {\n// // framework: '@storybook/preact-webpack5', 👈 Remove this\nframework: '@storybook/preact-vite', // 👈 Add this\n};\nexport default config;\nAPI\nOptions\nYou can pass an options object for additional configuration if needed: storybook/main tsTypescriptimport type { StorybookConfig } from '@storybook/preact-vite';\nconst config: StorybookConfig = {\nframework: {\nname: '@storybook/preact-vite',\noptions: {\n// },\n},\n};\nexport default config;\nbuilder\nType: Record<string, any>\nConfigure options for the framework's builder For this framework, available options can be found in the Vite builder docs Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 542230,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_preact-vite.html",
      "source_type": "documentation"
    },
    "token_count": 375,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "49743bc8e7308b1c76b7a49e6fdefc66",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_angular.html",
    "source_type": "documentation",
    "title": "Storybook for Angular | Storybook docs",
    "content": "Storybook for Angular | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Get Started » Frameworks » AngularDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQStorybook for AngularStorybook for Angular is a framework that makes it easy to develop and test UI components in isolation for Angular applications It includes:\n🧱 Uses Angular builders\n🎛️ Compodoc integration\n💫 and more Requirements\nAngular ≥ 18 0 < 21 0\nWebpack ≥ 5 0\nGetting started\nIn a project without Storybook\nFollow the prompts after running this command in your Angular project's root directory:\nnpmnpm create storybook@latest\nMore on getting started with Storybook In a project with Storybook\nThis framework is designed to work with Storybook 7+ If you’re not already using v7, upgrade with this command:\nnpmnpx storybook@latest upgrade\nAutomatic migration\nWhen running the upgrade command above, you should get a prompt asking you to migrate to @storybook/angular, which should handle everything for you In case that auto-migration does not work for your project, refer to the manual migration below Manual migration\nFirst, install the framework:\nnpmnpm install --save-dev @storybook/angular\nThen, update your storybook/main js|ts to change the framework property: storybook/main",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 785702,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_angular.html",
      "source_type": "documentation"
    },
    "token_count": 504,
    "chunk_index": 0,
    "total_chunks": 9
  },
  {
    "id": "24738aa8000092c418ae4902087d47d9",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_angular.html",
    "source_type": "documentation",
    "title": "Storybook for Angular | Storybook docs",
    "content": "7+ If you’re not already using v7, upgrade with this command: npmnpx storybook@latest upgrade Automatic migration When running the upgrade command above, you should get a prompt asking you to migrate to @storybook/angular, which should handle everything for you In case that auto-migration does not work for your project, refer to the manual migration below Manual migration First, install the framework: npmnpm install --save-dev @storybook/angular Then, update your storybook/main js|ts to change the framework property: storybook/maintsTypescriptimport { StorybookConfig } from '@storybook/angular';\nconst config: StorybookConfig = {\n// framework: '@storybook/angular', // 👈 Add this\n};\nexport default config;\nFinally, update your angular json to include the Storybook builder:\nangular json {\n\"projects\": {\n\"your-project\": {\n\"architect\": {\n\"storybook\": {\n\"builder\": \"@storybook/angular:start-storybook\",\n\"options\": {\n// The path to the storybook config directory\n\"configDir\": \" storybook\",\n// The build target of your project\n\"browserTarget\": \"your-project:build\",\n// The port you want to start Storybook on\n\"port\": 6006\n// More options available, documented here:\n// https://github com/storybookjs/storybook/tree/next/code/frameworks/angular/src/builders/start-storybook/schema json\n}\n},\n\"build-storybook\": {\n\"builder\": \"@storybook/angular:build-storybook\",\n\"options\": {\n\"configDir\": \" storybook\",\n\"browserTarget\": \"your-project:build\",\n\"outputDir\": \"dist/storybook/your-project\"\n// More options available, documented here:\n// https://github com/storybookjs/storybook/tree/next/code/frameworks/angular/src/builders/build-storybook/schema json\n}\n}\n}\n}\n}\n}\nRun Storybook\nTo run Storybook for a particular project, please run the following:\nng run <your-project>:storybook\nTo build Storybook, run:\nng run <your-project>:build-storybook\nYou will find the output in the configured outputDir (default is dist/storybook/<your-project>) Setup Compodoc\nYou can include JSDoc comments above components, directives, and other parts of your Angular code to include documentation for those elements Compodoc uses these comments to generate documentation for your application",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 785702,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_angular.html",
      "source_type": "documentation"
    },
    "token_count": 484,
    "chunk_index": 1,
    "total_chunks": 9
  },
  {
    "id": "ef505d59045dd444eed3624ea7521b31",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_angular.html",
    "source_type": "documentation",
    "title": "Storybook for Angular | Storybook docs",
    "content": "com/storybookjs/storybook/tree/next/code/frameworks/angular/src/builders/build-storybook/schema json } } } } } } Run Storybook To run Storybook for a particular project, please run the following: ng run <your-project>:storybook To build Storybook, run: ng run <your-project>:build-storybook You will find the output in the configured outputDir (default is dist/storybook/<your-project>) Setup Compodoc You can include JSDoc comments above components, directives, and other parts of your Angular code to include documentation for those elements Compodoc uses these comments to generate documentation for your applicationIn Storybook, it is useful to add explanatory comments above @Inputs and @Outputs, since these are the main elements that Storybook displays in its user interface The @Inputs and @Outputs are elements you can interact with in Storybook, such as controls Automatic setup\nWhen installing Storybook via npx storybook@latest init, you can set up Compodoc automatically Manual setup\nIf you have already installed Storybook, you can set up Compodoc manually Install the following dependencies:\nnpm install --save-dev @compodoc/compodoc\nAdd the following option to your Storybook Builder:\nangular json {\n\"projects\": {\n\"your-project\": {\n\"architect\": {\n\"storybook\": {\n\"builder\": \"@storybook/angular:start-storybook\",\n\"options\": {\n// 👇 Add these\n\"compodoc\": true,\n\"compodocArgs\": [\n\"-e\",\n\"json\",\n\"-d\",\n// Where to store the generated documentation It's usually the root of your Angular project It's not necessarily the root of your Angular Workspace \" \"\n],\n}\n},\n\"build-storybook\": {\n\"builder\": \"@storybook/angular:build-storybook\",\n\"options\": {\n// 👇 Add these\n\"compodoc\": true,\n\"compodocArgs\": [\n\"-e\",\n\"json\",\n\"-d\",\n\" \"\n],\n}\n}\n}\n}\n}\n}\nGo to your storybook/preview ts and add the following: storybook/preview ts import type { Preview } from '@storybook/angular';\n// 👇 Add these\nimport { setCompodocJson } from '@storybook/addon-docs/angular';\nimport docJson from ' /documentation",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 785702,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_angular.html",
      "source_type": "documentation"
    },
    "token_count": 463,
    "chunk_index": 2,
    "total_chunks": 9
  },
  {
    "id": "c466d3579c8db3a38ea824a60e82a3ea",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_angular.html",
    "source_type": "documentation",
    "title": "Storybook for Angular | Storybook docs",
    "content": "your Angular project It's not necessarily the root of your Angular Workspace \" \" ], } }, \"build-storybook\": { \"builder\": \"@storybook/angular:build-storybook\", \"options\": { // 👇 Add these \"compodoc\": true, \"compodocArgs\": [ \"-e\", \"json\", \"-d\", \" \" ], } } } } } } Go to your storybook/preview ts and add the following: storybook/preview ts import type { Preview } from '@storybook/angular'; // 👇 Add these import { setCompodocJson } from '@storybook/addon-docs/angular'; import docJson from ' /documentationjson';\nsetCompodocJson(docJson);\nconst preview: Preview = {};\nexport default preview;\napplicationConfig decorator\nIf your component relies on application-wide providers, like the ones defined by BrowserAnimationsModule or any other modules that use the forRoot pattern to provide a ModuleWithProviders, you can apply the applicationConfig decorator to all stories for that component This will provide them with the bootstrapApplication function, used to bootstrap the component in Storybook ChipsModule stories ts import { Meta, applicationConfig, StoryObj } from '@storybook/angular';\nimport { BrowserAnimationsModule, provideAnimations } from '@angular/platform-browser/animations';\nimport { importProvidersFrom } from '@angular/core';\nimport { ChipsModule } from ' /angular-src/chips module';\nconst meta: Meta<ChipsModule> = {\ncomponent: ChipsModule,\ndecorators: [\n// Apply application config to all stories\napplicationConfig({\n// List of providers and environment providers that should be available to the root component and all its children providers: [ // Import application-wide providers from a module\nimportProvidersFrom(BrowserAnimationsModule)\n// Or use provide-style functions if available instead, e g provideAnimations()\n],\n}),\n],\n};\nexport default meta;\ntype Story = StoryObj<ChipsModule>;\nexport const WithCustomApplicationProvider: Story = {\nrender: () => ({\n// Apply application config to a specific story\napplicationConfig: {\n// The providers will be merged with the ones defined in the applicationConfig decorator's providers array of the global meta object\nproviders: [ ],\n}\n})\n}\nmoduleMetadata decorator\nIf your component has dependencies on other Angular directives and modules, these can be supplied using the moduleMetadata decorator either for all stories of a component or for individual stories YourComponent stories ts import { Meta, moduleMetadata, StoryObj } from '@storybook/angular';\nimport { YourComponent } from '",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 785702,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_angular.html",
      "source_type": "documentation"
    },
    "token_count": 500,
    "chunk_index": 3,
    "total_chunks": 9
  },
  {
    "id": "b7f2a42fe2b7e374853208aca2b62738",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_angular.html",
    "source_type": "documentation",
    "title": "Storybook for Angular | Storybook docs",
    "content": "// The providers will be merged with the ones defined in the applicationConfig decorator's providers array of the global meta object providers: [ ], } }) } moduleMetadata decorator If your component has dependencies on other Angular directives and modules, these can be supplied using the moduleMetadata decorator either for all stories of a component or for individual stories YourComponent stories ts import { Meta, moduleMetadata, StoryObj } from '@storybook/angular'; import { YourComponent } from '/your component';\nconst meta: Meta<YourComponent> = {\ncomponent: YourComponent,\ndecorators: [\n// Apply metadata to all stories\nmoduleMetadata({\n// import necessary ngModules or standalone components\nimports: [ ],\n// declare components that are used in the template\ndeclarations: [ ],\n// List of providers that should be available to the root component and all its children providers: [ ],\n}),\n],\n};\nexport default meta;\ntype Story = StoryObj<YourComponent>;\nexport const Base: Story = {};\nexport const WithCustomProvider: Story = {\ndecorators: [\n// Apply metadata to a specific story\nmoduleMetadata({\nimports: [ ],\ndeclarations: [ ],\nproviders: [ ],\n}),\n],\n};\nFAQ\nHow do I migrate to an Angular Storybook builder The Storybook Angular builder is a way to run Storybook in an Angular workspace It is a drop-in replacement for running storybook dev and storybook build directly You can run npx storybook@latest automigrate to try letting Storybook detect and automatically fix your configuration Otherwise, you can follow the next steps to adjust your configuration manually Do you have only one Angular project in your workspace First, go to your angular json and add storybook and build-storybook entries in your project's architect section, as shown above Second, adjust your package json script section Usually, it will look like this:\npackage json {\n\"scripts\": {\n\"storybook\": \"start-storybook -p 6006\", // or `storybook dev -p 6006`\n\"build-storybook\": \"build-storybook\" // or `storybook build`\n}\n}\nNow, you can run Storybook with ng run <your-project>:storybook and build it with ng run <your-project>:build-storybook Adjust the scripts in your package json accordingly package",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 785702,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_angular.html",
      "source_type": "documentation"
    },
    "token_count": 449,
    "chunk_index": 4,
    "total_chunks": 9
  },
  {
    "id": "807348d41a66d886202ccf5ada0c78e5",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_angular.html",
    "source_type": "documentation",
    "title": "Storybook for Angular | Storybook docs",
    "content": "json and add storybook and build-storybook entries in your project's architect section, as shown above Second, adjust your package json script section Usually, it will look like this: package json { \"scripts\": { \"storybook\": \"start-storybook -p 6006\", // or `storybook dev -p 6006` \"build-storybook\": \"build-storybook\" // or `storybook build` } } Now, you can run Storybook with ng run <your-project>:storybook and build it with ng run <your-project>:build-storybook Adjust the scripts in your package json accordingly packagejson {\n\"scripts\": {\n\"storybook\": \"ng run <project-name>:storybook\",\n\"build-storybook\": \"ng run <project-name>:build-storybook\"\n}\n}\nAlso, compodoc is now built into @storybook/angular; you don't have to call it explicitly If we're running compodoc in your package json scripts like this:\npackage json {\n\"scripts\": {\n\"docs:json\": \"compodoc -p tsconfig json -e json -d /documentation\",\n\"storybook\": \"npm run docs:json && start-storybook -p 6006\",\n\"build-storybook\": \"npm run docs:json && build-storybook\"\n}\n}\nChange it to:\npackage json {\n\"scripts\": {\n\"storybook\": \"ng run <project-name>:storybook\",\n\"build-storybook\": \"ng run <project-name>:build-storybook\"\n}\n}\nI have multiple projects in my Angular workspace\nIn this case, you have to adjust your angular json and package json as described above for each project you want to use Storybook Please note that each project should have a dedicated storybook folder placed at the project's root You can run npx storybook@latest init sequentially for each project to set up Storybook for each of them to automatically create the storybook folder and create the necessary configuration in your angular json You can then combine multiple Storybooks with Storybook composition How do I configure Angular's builder for Storybook These are common options you may need for the Angular builder:\nConfiguration elementDescription\"browserTarget\"Build target to be served using the following format \"example-project:builder:config\"\"debugWebpack\"Debug the Webpack configuration  \"debugWebpack\": true\"tsConfig\"Location of the TypeScript configuration file relative to the current workspace \"tsConfig\": \" /tsconfig json\" \"preserveSymlinks\"Do not use the real path when resolving modules",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 785702,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_angular.html",
      "source_type": "documentation"
    },
    "token_count": 503,
    "chunk_index": 5,
    "total_chunks": 9
  },
  {
    "id": "fd41fc3df6a81e8faa33072a9df9e0e9",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_angular.html",
    "source_type": "documentation",
    "title": "Storybook for Angular | Storybook docs",
    "content": "and create the necessary configuration in your angular json You can then combine multiple Storybooks with Storybook composition How do I configure Angular's builder for Storybook These are common options you may need for the Angular builder: Configuration elementDescription\"browserTarget\"Build target to be served using the following format \"example-project:builder:config\"\"debugWebpack\"Debug the Webpack configuration \"debugWebpack\": true\"tsConfig\"Location of the TypeScript configuration file relative to the current workspace \"tsConfig\": \" /tsconfig json\" \"preserveSymlinks\"Do not use the real path when resolving modulesIf true, symlinks are resolved to their real path; otherwise, they are resolved to their symlinked path \"preserveSymlinks\": true\"port\"Port used by Storybook \"port\": 6006\"host\"Set up a custom host for Storybook \"host\": \"http://my-custom-host\"\"configDir\"Storybook configuration directory location \"configDir\": \" storybook\"\"https\"Starts Storybook with HTTPS enabled \"https\": true  Requires custom certificate information \"sslCa\"Provides an SSL certificate authority \"sslCa\": \"your-custom-certificate-authority\"  Optional usage with \"https\"\"sslCert\"Provides an SSL certificate \"sslCert\": \"your-custom-certificate\"  Required for https\"sslKey\"Provides an SSL key to serve Storybook \"sslKey\": \"your-ssl-key\"\"smokeTest\"Exit Storybook after successful start \"smokeTest\": true\"ci\"Starts Storybook in CI mode (skips interactive prompts and will not open browser window) \"ci\": true\"open\"Whether to open Storybook automatically in the browser \"open\": true\"quiet\"Filters Storybook verbose build output \"quiet\": true\"enableProdMode\"Disable Angular's development mode, which turns off assertions and other checks within the framework \"enableProdMode\": true\"docs\"Starts Storybook in documentation mode \"docs\": true\"compodoc\"Execute compodoc before \"compodoc\": true\"compodocArgs\"Compodoc options Options -p with tsconfig path and -d with workspace root is always given \"compodocArgs\": [\"-e\", \"json\"]\"styles\"Provide the location of the application's styles to be used with Storybook \"styles\": [\"src/styles css\", \"src/styles",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 785702,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_angular.html",
      "source_type": "documentation"
    },
    "token_count": 483,
    "chunk_index": 6,
    "total_chunks": 9
  },
  {
    "id": "1e70ebcf135b056055cc214e78d02cfe",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_angular.html",
    "source_type": "documentation",
    "title": "Storybook for Angular | Storybook docs",
    "content": "browser window) \"ci\": true\"open\"Whether to open Storybook automatically in the browser \"open\": true\"quiet\"Filters Storybook verbose build output \"quiet\": true\"enableProdMode\"Disable Angular's development mode, which turns off assertions and other checks within the framework \"enableProdMode\": true\"docs\"Starts Storybook in documentation mode \"docs\": true\"compodoc\"Execute compodoc before \"compodoc\": true\"compodocArgs\"Compodoc options Options -p with tsconfig path and -d with workspace root is always given \"compodocArgs\": [\"-e\", \"json\"]\"styles\"Provide the location of the application's styles to be used with Storybook \"styles\": [\"src/styles css\", \"src/stylesscss\"]\"stylePreprocessorOptions\"Provides further customization for style preprocessors resolved to the workspace root \"stylePreprocessorOptions\": { \"includePaths\": [\"src/styles\"] }\"assets\"List of static application assets \"assets\": [\"src/assets\"]\"initialPath\"URL path to be appended when visiting Storybook for the first time \"initialPath\": \"docs/configure-your-project--docs\"\"webpackStatsJson\"Write Webpack Stats JSON to disk \"webpackStatsJson\": true\"previewUrl\"Disables the default storybook preview and lets you use your own \"previewUrl\": \"iframe html\"\"loglevel\"Controls level of logging during build Can be one of: [silly, verbose, info (default), warn, error, silent] \"loglevel\": \"info\"\"sourceMap\"Configure sourcemaps \"sourceMap\": true\nThe full list of options can be found in the Angular builder schemas:\nBuild Storybook\nStart Storybook\nAPI\nOptions\nYou can pass an options object for additional configuration if needed: storybook/main ts import type { StorybookConfig } from '@storybook/angular';\nconst config: StorybookConfig = {\nframework: {\nname: '@storybook/angular',\noptions: {\n// },\n},\n};\nThe available options are:\nbuilder\nType: Record<string, any>\nConfigure options for the framework's builder For this framework, available options can be found in the Webpack builder docs Was this page useful",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 785702,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_angular.html",
      "source_type": "documentation"
    },
    "token_count": 453,
    "chunk_index": 7,
    "total_chunks": 9
  },
  {
    "id": "fc8a337a45f72651eff3216aaaf93cfd",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_angular.html",
    "source_type": "documentation",
    "title": "Storybook for Angular | Storybook docs",
    "content": "the Angular builder schemas: Build Storybook Start Storybook API Options You can pass an options object for additional configuration if needed: storybook/main ts import type { StorybookConfig } from '@storybook/angular'; const config: StorybookConfig = { framework: { name: '@storybook/angular', options: { // }, }, }; The available options are: builder Type: Record<string, any> Configure options for the framework's builder For this framework, available options can be found in the Webpack builder docs Was this page useful👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 785702,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_angular.html",
      "source_type": "documentation"
    },
    "token_count": 171,
    "chunk_index": 8,
    "total_chunks": 9
  },
  {
    "id": "50a0c944350f4c985d809ba2c486e21f",
    "source_file": "corpus\\documentation\\storybook\\_docs_faq.html",
    "source_type": "documentation",
    "title": "Frequently Asked Questions | Storybook docs",
    "content": "Frequently Asked Questions | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs FAQDocs » FAQDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQFrequently Asked QuestionsReactVueAngularWeb ComponentsMoreHere are some answers to frequently asked questions If you have a question, you can ask it in our GitHub discussions Error: No angular json file found\nStorybook can be set up for both single-project and multi-project Angular workspaces To set up Storybook for a project, run the install command at the root of the workspace where the angular json file is located During initialization, the storybook folder will be created and the angular json file will be edited to add the Storybook configuration for the selected project It's important to run the command at the root level to ensure that Storybook detects all projects correctly How can I opt-out of Angular Ivy In case you are having trouble with Angular Ivy you can deactivate it in your main js|ts: storybook/main js|ts export default {\nstories: [\n/* */\n],\naddons: [\n/* */\n],\nframework: {\nname: '@storybook/angular',\noptions: {\nenableIvy: false,\n},\n},\n};\nHow can I opt-out of Angular ngcc In case you postinstall ngcc, you can disable it: storybook/main js|ts export default {\nstories: [\n/* */\n],\naddons: [\n/*",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 994222,
      "relative_path": "documentation\\storybook\\_docs_faq.html",
      "source_type": "documentation"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 14
  },
  {
    "id": "cf98508a1fb73719ad194aacd8705687",
    "source_file": "corpus\\documentation\\storybook\\_docs_faq.html",
    "source_type": "documentation",
    "title": "Frequently Asked Questions | Storybook docs",
    "content": "opt-out of Angular Ivy In case you are having trouble with Angular Ivy you can deactivate it in your main js|ts: storybook/main js|ts export default { stories: [ /* */ ], addons: [ /* */ ], framework: { name: '@storybook/angular', options: { enableIvy: false, }, }, }; How can I opt-out of Angular ngcc In case you postinstall ngcc, you can disable it: storybook/main js|ts export default { stories: [ /* */ ], addons: [ /**/\n],\nframework: {\nname: '@storybook/angular',\noptions: {\nenableNgcc: false,\n},\n},\n};\nPlease report any issues related to Ivy in our GitHub Issue Tracker as the support for View Engine will be dropped in a future release of Angular How can I run coverage tests with Create React App and leave out stories Create React App does not allow providing options to Jest in your package json, however you can run jest with commandline arguments:\nnpm test -- --coverage --collectCoverageFrom='[\"src/**/* {js,jsx}\",\" src/**/stories/*\"]'\n💡If you're using Yarn as a package manager, you'll need to adjust the command accordingly How do I setup Storybook to share Webpack configuration with Next js You can generally reuse Webpack rules by placing them in a file that is require()-ed from both your next config js and your storybook/main js|ts files For example: storybook/main js|ts export default {\nwebpackFinal: async (baseConfig) => {\nconst nextConfig = require('/path/to/next config js');\n// merge whatever from nextConfig into the webpack config storybook will use\nreturn { baseConfig, nextConfig };\n},\n};\nHow do I fix module resolution in special environments In case you are using Yarn Plug-n-Play or your project is set up within a mono repository environment, you might run into issues with module resolution similar to this when running Storybook:\nWARN   Failed to load preset: \"@storybook/react-webpack5/preset\"\nRequired package: @storybook/react-webpack5 (via \"@storybook/react-webpack5/preset\")\nTo fix this, you can wrap the package name inside your Storybook configuration file (i e , storybook/main js|ts) as follows: storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 994222,
      "relative_path": "documentation\\storybook\\_docs_faq.html",
      "source_type": "documentation"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 14
  },
  {
    "id": "86110f3233ff0b9e13d30454e7735dd9",
    "source_file": "corpus\\documentation\\storybook\\_docs_faq.html",
    "source_type": "documentation",
    "title": "Frequently Asked Questions | Storybook docs",
    "content": "using Yarn Plug-n-Play or your project is set up within a mono repository environment, you might run into issues with module resolution similar to this when running Storybook: WARN Failed to load preset: \"@storybook/react-webpack5/preset\" Required package: @storybook/react-webpack5 (via \"@storybook/react-webpack5/preset\") To fix this, you can wrap the package name inside your Storybook configuration file (i e , storybook/main js|ts) as follows: storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etcimport type { StorybookConfig } from '@storybook/your-framework';\nimport path from 'path';\nconst _require = typeof require === 'undefined' import meta : require;\nconst getAbsolutePath = (packageName: string): any =>\npath dirname(_require resolve(path join(packageName, 'package json'))) replace(/^file:\\/\\//, '');\nconst config: StorybookConfig = {\nframework: {\n// Replace your-framework with the same one you've imported above name: getAbsolutePath('@storybook/your-framework'),\noptions: {},\n},\nstories: [' /src/**/* mdx', ' /src/**/* stories @(js|jsx|mjs|ts|tsx)'],\naddons: [\n//👇 Use getAbsolutePath when referencing Storybook's addons and frameworks\ngetAbsolutePath('@storybook/addon-docs'),\n],\n};\nexport default config;\nHow do I setup the new React Context Root API with Storybook If your installed React Version equals or is higher than 18 0 0, the new React Root API is automatically used and the newest React concurrent features can be used You can opt-out from the new React Root API by setting the following property in your storybook/main js|ts file: storybook/main js|ts export default {\nframework: {\nname: '@storybook/react-webpack5',\noptions: {\nlegacyRootApi: true,\n},\n},\n};\nWhy is there no addons channel A common error is that an addon tries to access the \"channel\", but the channel is not set It can happen in a few different cases:\nYou're trying to access addon channel (e g , by calling setOptions) in a non-browser environment like Jest You may need to add a channel mock:\nimport { addons, mockChannel } from 'storybook/preview-api';\naddons",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 994222,
      "relative_path": "documentation\\storybook\\_docs_faq.html",
      "source_type": "documentation"
    },
    "token_count": 482,
    "chunk_index": 2,
    "total_chunks": 14
  },
  {
    "id": "0cfd6f26da63f0153434cd84642e846f",
    "source_file": "corpus\\documentation\\storybook\\_docs_faq.html",
    "source_type": "documentation",
    "title": "Frequently Asked Questions | Storybook docs",
    "content": "{ name: '@storybook/react-webpack5', options: { legacyRootApi: true, }, }, }; Why is there no addons channel A common error is that an addon tries to access the \"channel\", but the channel is not set It can happen in a few different cases: You're trying to access addon channel (e g , by calling setOptions) in a non-browser environment like Jest You may need to add a channel mock: import { addons, mockChannel } from 'storybook/preview-api'; addonssetChannel(mockChannel());\nIn React Native, it's a special case documented in #1192\nWhy aren't the addons working in a composed Storybook Composition is a new feature that we released with version 6 0, and there are still some limitations to it For now, the addons you're using in a composed Storybook will not work We're working on overcoming this limitation, and soon you'll be able to use them as if you are working with a non-composed Storybook Can I have a Storybook with no local stories Storybook does not work unless you have at least one local story (or docs page) defined in your project In this context, local means a stories * or mdx file that is referenced in your project's storybook/main js config If you're in a Storybook composition scenario, where you have multiple Storybooks, and want to have an extra Storybook with no stories of its own, that serves as a \"glue\" for all the other Storybooks in a project for demo/documentation purposes, you can do the following steps:\nIntroduce a single mdx docs page (addon-docs required), that serves as an Introduction page, like so:\nIntroduction mdx # Welcome\nSome description here\nAnd then refer to it in your Storybook config file: storybook/main js|ts const config = {\n// define at least one local story/page here\nstories: [' /Introduction mdx'],\n// define composed Storybooks here\nrefs: {\nfirstProject: { title: 'First', url: 'some-url' },\nsecondProject: { title: 'Second', url: 'other-url' },\n},\n// };\nexport default config;\nWhich community addons are compatible with the latest version of Storybook Starting with Storybook version 6 0, we've introduced some great features aimed at streamlining your development workflow",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 994222,
      "relative_path": "documentation\\storybook\\_docs_faq.html",
      "source_type": "documentation"
    },
    "token_count": 478,
    "chunk_index": 3,
    "total_chunks": 14
  },
  {
    "id": "92896934d9e9e6b8a13adc7fe3adc788",
    "source_file": "corpus\\documentation\\storybook\\_docs_faq.html",
    "source_type": "documentation",
    "title": "Frequently Asked Questions | Storybook docs",
    "content": "Storybook config file: storybook/main js|ts const config = { // define at least one local story/page here stories: [' /Introduction mdx'], // define composed Storybooks here refs: { firstProject: { title: 'First', url: 'some-url' }, secondProject: { title: 'Second', url: 'other-url' }, }, // }; export default config; Which community addons are compatible with the latest version of Storybook Starting with Storybook version 6 0, we've introduced some great features aimed at streamlining your development workflowWith this, we would like to point out that if you plan on using addons created by our fantastic community, you need to consider that some of those addons might be working with an outdated version of Storybook We're actively working to provide a better way to address this situation, but in the meantime, we'd like to ask for a bit of caution on your end so that you don't run into unexpected problems Let us know by leaving a comment in the following GitHub issue so that we can gather information and expand the current list of addons that need to be updated to work with the latest version of Storybook Is it possible to browse the documentation for past versions of Storybook With the release of version 6 0, we updated our documentation as well That doesn't mean that the old documentation was removed We kept it to help you with your Storybook migration process Use the content from the table below in conjunction with our migration guide We're only covering versions 5 3 and 5 0 as they were important milestones for Storybook If you want to go back in time a little more, you'll have to check the specific release in the monorepo SectionPageCurrent LocationVersion 5 3 locationVersion 5",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 994222,
      "relative_path": "documentation\\storybook\\_docs_faq.html",
      "source_type": "documentation"
    },
    "token_count": 360,
    "chunk_index": 4,
    "total_chunks": 14
  },
  {
    "id": "f9f09333bcc92b11ab68b509261e4f9f",
    "source_file": "corpus\\documentation\\storybook\\_docs_faq.html",
    "source_type": "documentation",
    "title": "Frequently Asked Questions | Storybook docs",
    "content": "That doesn't mean that the old documentation was removed We kept it to help you with your Storybook migration process Use the content from the table below in conjunction with our migration guide We're only covering versions 5 3 and 5 0 as they were important milestones for Storybook If you want to go back in time a little more, you'll have to check the specific release in the monorepo SectionPageCurrent LocationVersion 5 3 locationVersion 50 locationN/AWhy StorybookSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedGet startedInstallSee current documentationSee versioned documentationSee versioned documentationWhat's a storySee current documentationSee versioned documentation for your frameworkSee versioned documentation for your frameworkBrowse StoriesSee current documentationSee versioned documentation for your frameworkSee versioned documentation for your frameworkSetupSee current documentationSee versioned documentation for your frameworkSee versioned documentation for your frameworkWrite storiesIntroductionSee current documentationSee versioned documentationSee versioned documentationParametersSee current documentationSee versioned documentationNon existing feature or undocumentedDecoratorsSee current documentationSee versioned documentationSee versioned documentationNaming components and hierarchySee current documentationSee versioned documentationSee versioned documentationBuild pages and screensSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedStories for multiple componentsSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedWrite docsAutodocsSee current documentationSee versioned addon documentationNon existing feature or undocumentedMDXSee current documentationSee versioned addon documentationNon existing feature or undocumentedDoc BlocksSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedPreview and build docsSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedTestingVisual testsSee current documentationSee versioned documentationSee versioned documentationAccessibility testsSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedInteraction testsSee current documentationSee versioned documentationSee versioned documentationSnapshot testsSee current documentationSee versioned documentationSee versioned documentationImport stories in tests/Unit testsSee current documentationSee versioned documentationSee versioned documentationImport stories in tests/End-to-end testingSee current documentationSee versioned documentationSee versioned documentationSharingPublish StorybookSee current documentationSee versioned documentationSee versioned documentationEmbedSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedCompositionSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedPackage CompositionSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedEssentialsControlsSee current documentationControls are specific to version 6",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 994222,
      "relative_path": "documentation\\storybook\\_docs_faq.html",
      "source_type": "documentation"
    },
    "token_count": 504,
    "chunk_index": 5,
    "total_chunks": 14
  },
  {
    "id": "e15c262e7cb92f8066f2b26c08e894a9",
    "source_file": "corpus\\documentation\\storybook\\_docs_faq.html",
    "source_type": "documentation",
    "title": "Frequently Asked Questions | Storybook docs",
    "content": "versioned documentationSee versioned documentationSnapshot testsSee current documentationSee versioned documentationSee versioned documentationImport stories in tests/Unit testsSee current documentationSee versioned documentationSee versioned documentationImport stories in tests/End-to-end testingSee current documentationSee versioned documentationSee versioned documentationSharingPublish StorybookSee current documentationSee versioned documentationSee versioned documentationEmbedSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedCompositionSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedPackage CompositionSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedEssentialsControlsSee current documentationControls are specific to version 60 see Knobs versioned documentationControls are specific to version 6",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 994222,
      "relative_path": "documentation\\storybook\\_docs_faq.html",
      "source_type": "documentation"
    },
    "token_count": 142,
    "chunk_index": 6,
    "total_chunks": 14
  },
  {
    "id": "900f38c40416a4caf579dd71e5716dd8",
    "source_file": "corpus\\documentation\\storybook\\_docs_faq.html",
    "source_type": "documentation",
    "title": "Frequently Asked Questions | Storybook docs",
    "content": "versioned documentationImport stories in tests/Unit testsSee current documentationSee versioned documentationSee versioned documentationImport stories in tests/End-to-end testingSee current documentationSee versioned documentationSee versioned documentationSharingPublish StorybookSee current documentationSee versioned documentationSee versioned documentationEmbedSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedCompositionSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedPackage CompositionSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedEssentialsControlsSee current documentationControls are specific to version 60 see Knobs versioned documentationControls are specific to version 60 see Knobs versioned documentationActionsSee current documentationSee addon versioned documentationSee addon versioned documentationViewportSee current documentationSee addon versioned documentationSee addon versioned documentationBackgroundsSee current documentationSee addon versioned documentationSee addon versioned documentationToolbars and globalsSee current documentationSee versioned documentationNon existing feature or undocumentedConfigureOverviewSee current documentationSee versioned documentationSee versioned documentationIntegration/FrameworksSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedIntegration/Framework support for frameworksSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedIntegration/CompilersSee current documentationSee versioned documentation hereSee versioned documentation hereIntegration/TypescriptSee current documentationSee versioned documentationSee versioned documentationIntegration/Styling and CSSSee current documentationSee versioned documentationSee versioned documentationIntegration/Images and assetsSee current documentationSee versioned documentationSee versioned documentationStory renderingSee current documentationSee versioned documentation here and hereSee versioned documentation hereStory LayoutSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedUser Interface/Features and behaviorSee current documentationSee versioned documentationSee versioned documentationUser Interface/ThemingSee current documentationSee versioned documentationSee versioned documentationUser Interface/Sidebar & URLSSee current documentationSee versioned documentationSee versioned documentationEnvironment variablesSee current documentationSee versioned documentationSee versioned documentationBuildersIntroductionSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedViteSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedWebpackSee current documentationSee versioned documentationSee versioned documentationBuilder APISee current documentationNon existing feature or undocumentedNon existing feature or undocumentedAddonsIntroductionSee current documentationSee versioned documentationSee versioned documentationInstall addonsSee current documentationSee versioned documentationSee versioned documentationWriting AddonsSee current documentationSee versioned documentationSee versioned documentationWriting PresetsSee current documentationSee versioned documentationNon existing feature or undocumentedAddons Knowledge BaseSee current documentationSee versioned documentationSee versioned documentationTypes of addonsSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedAddons APISee current documentationSee versioned documentationSee versioned documentationAPI@storybook/addon-docs/blocks/ArgTypesSee current documentationNon existing feature or undocumentedNon existing feature or undocumented@storybook/addon-docs/blocks/CanvasSee current documentationNon existing feature or undocumentedNon existing feature or undocumented@storybook/addon-docs/blocks/ColorPaletteSee current documentationNon existing feature or undocumentedNon existing feature or undocumented@storybook/addon-docs/blocks/ControlsSee current documentationNon existing feature or undocumentedNon existing feature or undocumented@storybook/addon-docs/blocks/DescriptionSee current documentationNon existing feature or undocumentedNon existing feature or undocumented@storybook/addon-docs/blocks/IconGallerySee current documentationNon existing feature or undocumentedNon existing feature or undocumented@storybook/addon-docs/blocks/MarkdownSee current documentationNon existing feature or undocumentedNon existing feature or undocumented@storybook/addon-docs/blocks/MetaSee current documentationNon existing feature or undocumentedNon existing feature or undocumented@storybook/addon-docs/blocks/PrimarySee current documentationNon existing feature or undocumentedNon existing feature or undocumented@storybook/addon-docs/blocks/SourceSee current documentationNon existing feature or undocumentedNon existing feature or undocumented@storybook/addon-docs/blocks/StoriesSee current documentationNon existing feature or undocumentedNon existing feature or undocumented@storybook/addon-docs/blocks/StorySee current documentationNon existing feature or undocumentedNon existing feature or undocumented@storybook/addon-docs/blocks/SubtitleSee current documentationNon existing feature or undocumentedNon existing feature or undocumented@storybook/addon-docs/blocks/TitleSee current documentationNon existing feature or undocumentedNon existing feature or undocumented@storybook/addon-docs/blocks/TypesetSee current documentationNon existing feature or undocumentedNon existing feature or undocumented@storybook/addon-docs/blocks/UnstyledSee current documentationNon existing feature or undocumentedNon existing feature or undocumented@storybook/addon-docs/blocks/useOfSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedStories/Component Story Format (see note below)See current documentationSee versioned documentationNon existing feature or undocumentedArgTypesSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedmain",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 994222,
      "relative_path": "documentation\\storybook\\_docs_faq.html",
      "source_type": "documentation"
    },
    "token_count": 989,
    "chunk_index": 7,
    "total_chunks": 14
  },
  {
    "id": "30c82c68ecdb6bd363a50a7c1df09ced",
    "source_file": "corpus\\documentation\\storybook\\_docs_faq.html",
    "source_type": "documentation",
    "title": "Frequently Asked Questions | Storybook docs",
    "content": "feature or undocumented@storybook/addon-docs/blocks/SubtitleSee current documentationNon existing feature or undocumentedNon existing feature or undocumented@storybook/addon-docs/blocks/TitleSee current documentationNon existing feature or undocumentedNon existing feature or undocumented@storybook/addon-docs/blocks/TypesetSee current documentationNon existing feature or undocumentedNon existing feature or undocumented@storybook/addon-docs/blocks/UnstyledSee current documentationNon existing feature or undocumentedNon existing feature or undocumented@storybook/addon-docs/blocks/useOfSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedStories/Component Story Format (see note below)See current documentationSee versioned documentationNon existing feature or undocumentedArgTypesSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedmainjs configuration/OverviewSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedmain js configuration/frameworkSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedmain js configuration/storiesSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedmain js configuration/addonsSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedmain js configuration/babelSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedmain js configuration/babelDefaultSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedmain js configuration/buildSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedmain js configuration/coreSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedmain js configuration/docsSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedmain js configuration/envSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedmain js configuration/featuresSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedmain js configuration/indexersSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedmain js configuration/logLevelSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedmain js configuration/managerHeadSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedmain js configuration/previewAnnotationsSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedmain js configuration/previewBodySee current documentationNon existing feature or undocumentedNon existing feature or undocumentedmain js configuration/previewHeadSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedmain js configuration/refsSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedmain js configuration/staticDirsSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedmain",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 994222,
      "relative_path": "documentation\\storybook\\_docs_faq.html",
      "source_type": "documentation"
    },
    "token_count": 499,
    "chunk_index": 8,
    "total_chunks": 14
  },
  {
    "id": "91671cbcd383c93ed50d9f2a42d939cd",
    "source_file": "corpus\\documentation\\storybook\\_docs_faq.html",
    "source_type": "documentation",
    "title": "Frequently Asked Questions | Storybook docs",
    "content": "existing feature or undocumentedmain js configuration/managerHeadSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedmain js configuration/previewAnnotationsSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedmain js configuration/previewBodySee current documentationNon existing feature or undocumentedNon existing feature or undocumentedmain js configuration/previewHeadSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedmain js configuration/refsSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedmain js configuration/staticDirsSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedmainjs configuration/swcSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedmain js configuration/typescriptSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedmain js configuration/viteFinalSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedmain js configuration/webpackFinalSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedFrameworksSee current documentationNon existing feature or undocumentedNon existing feature or undocumentedCLI optionsSee current documentationSee versioned documentationSee versioned documentation\nℹ️If you have stories written with the older storiesOf format, it was removed in Storybook 8 0 and is no longer maintained We recommend that you migrate your stories to CSF See the migration guide for more information However, if you need, you can still access the old storiesOf documentation for reference What icons are available for my toolbar or my addon With the @storybook/icons package, you get a set of icons that you can use to customize your UI Go through the documentation to see how the icons look and use it as a reference when writing your addon or defining your Storybook global types I see a \"No Preview\" error with a Storybook production build\nIf you're using the serve package to verify your production build of Storybook, you'll get that error It relates to how serve handles rewrites For instance, /iframe html is rewritten into /iframe, and you'll get that error We recommend that you use http-server instead and use the following command to preview Storybook:\nnpx http-server storybook-static\nℹ️Suppose you don't want to run the command above frequently Add http-server as a development dependency and create a new script to preview your production build of Storybook Can I use Storybook with Vue 2 Vue 2 entered End of Life (EOL) on December 31, 2023, and is no longer supported by the Vue team",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 994222,
      "relative_path": "documentation\\storybook\\_docs_faq.html",
      "source_type": "documentation"
    },
    "token_count": 501,
    "chunk_index": 9,
    "total_chunks": 14
  },
  {
    "id": "5ceaa118233d107a0996236a74734634",
    "source_file": "corpus\\documentation\\storybook\\_docs_faq.html",
    "source_type": "documentation",
    "title": "Frequently Asked Questions | Storybook docs",
    "content": "get that error We recommend that you use http-server instead and use the following command to preview Storybook: npx http-server storybook-static ℹ️Suppose you don't want to run the command above frequently Add http-server as a development dependency and create a new script to preview your production build of Storybook Can I use Storybook with Vue 2 Vue 2 entered End of Life (EOL) on December 31, 2023, and is no longer supported by the Vue teamAs a result, we've stopped supporting Vue 2 in Storybook 8 and above and will not be releasing any new versions that support it We recommend upgrading your project to Vue 3, which Storybook fully supports If that's not an option, you can still use Storybook with Vue 2 by installing the latest version of Storybook 7 with the following command:\nnpmnpx storybook@^7 init\nWhy aren't my code blocks highlighted with Storybook MDX Out of the box, Storybook provides syntax highlighting for a set of languages (e g , Javascript, Markdown, CSS, HTML, Typescript, GraphQL) you can use with your code blocks Currently, there's a known limitation when you try to register a custom language to get syntax highlighting We're working on a fix for this and will update this section once it's available Why aren't my MDX styles working in Storybook Writing documentation with MDX can be troublesome, especially regarding how your code is formatted when using line breaks with code blocks For example, this will break:\nExample mdx <style>{` class1 { } class2 { }\n`}</style>\nBut this will work:\nExample mdx <style>\n{` class1 { } class2 { }\n`}\n</style>\nSee the following issue for more information Why are my mocked GraphQL queries failing with Storybook's MSW addon If you're working with Vue 3, you'll need to install @vue/apollo-composable With Svelte, you'll need to install @rollup/plugin-replace and update your rollup config file to the following:\nrollup config js // Boilerplate imports\nimport replace from '@rollup/plugin-replace';\nconst production = process env ROLLUP_WATCH;\n// Remainder rollup config implementation\nexport default {\ninput: 'src/main js',\noutput: {\nsourcemap: true,\nformat: 'iife',\nname: 'app',\nfile: 'public/build/bundle",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 994222,
      "relative_path": "documentation\\storybook\\_docs_faq.html",
      "source_type": "documentation"
    },
    "token_count": 501,
    "chunk_index": 10,
    "total_chunks": 14
  },
  {
    "id": "eed8276e499243f10166486fe08da488",
    "source_file": "corpus\\documentation\\storybook\\_docs_faq.html",
    "source_type": "documentation",
    "title": "Frequently Asked Questions | Storybook docs",
    "content": "information Why are my mocked GraphQL queries failing with Storybook's MSW addon If you're working with Vue 3, you'll need to install @vue/apollo-composable With Svelte, you'll need to install @rollup/plugin-replace and update your rollup config file to the following: rollup config js // Boilerplate imports import replace from '@rollup/plugin-replace'; const production = process env ROLLUP_WATCH; // Remainder rollup config implementation export default { input: 'src/main js', output: { sourcemap: true, format: 'iife', name: 'app', file: 'public/build/bundlejs',\n},\nplugins: [\n// Other plugins\n// Configures the replace plugin to allow GraphQL Queries to work properly\nreplace({\n'process env NODE_ENV': JSON stringify('development'),\n}),\n]\n};\nWith Angular, the most common issue is the placement of the mockServiceWorker js file Use this example as a point of reference Can I use other GraphQL providers with Storybook's MSW addon Yes, check the addon's examples to learn how to integrate different providers Can I mock GraphQL mutations with Storybook's MSW addon No, currently, the MSW addon only has support for GraphQL queries If you're interested in including this feature, open an issue in the MSW addon repository and follow up with the maintainer Why are my stories not showing up correctly when using certain characters Storybook allows you to use most characters while naming your stories Still, specific characters (e g , #) can lead to issues when Storybook generates the internal identifier for the story, leading to collisions and incorrectly outputting the correct story We recommend using such characters sparsely Why is Storybook's source loader returning undefined with curried functions This is a known issue with Storybook If you're interested in getting it fixed, open an issue with a working reproduction so that it can be triaged and fixed in future releases Why are my args no longer displaying the default values Before version 6 3, unset args were set to the argTypes defaultValue if specified or inferred from the component's properties (e g , React's prop types, Angular inputs, Vue props) Starting with version 6 3, Storybook no longer infers default values but instead defines the arg's value as undefined when unset, allowing the framework to supply its default value If you are using argTypes",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 994222,
      "relative_path": "documentation\\storybook\\_docs_faq.html",
      "source_type": "documentation"
    },
    "token_count": 484,
    "chunk_index": 11,
    "total_chunks": 14
  },
  {
    "id": "1078f19b9b87faad2c8f7364b03b4483",
    "source_file": "corpus\\documentation\\storybook\\_docs_faq.html",
    "source_type": "documentation",
    "title": "Frequently Asked Questions | Storybook docs",
    "content": "future releases Why are my args no longer displaying the default values Before version 6 3, unset args were set to the argTypes defaultValue if specified or inferred from the component's properties (e g , React's prop types, Angular inputs, Vue props) Starting with version 6 3, Storybook no longer infers default values but instead defines the arg's value as undefined when unset, allowing the framework to supply its default value If you are using argTypesdefaultValue to fix the above, you no longer need to, and you can safely remove it from your stories Additionally, suppose you were using argTypes defaultValue or relying on inference to set a default value for an arg In that case, you should define the arg's value at the component level instead:\nMyComponent stories js export default {\ncomponent: MyComponent,\nargs: {\n//👇 Defining the arg's value at the component level text: 'Something',\n},\n};\nFor Storybook's Docs, you can manually configure the displayed value by configuring the table defaultValue setting:\nMyComponent stories js export default {\ncomponent: MyComponent,\nargTypes: {\n//👇 Defining the arg's display value in docs text: {\ntable: { defaultValue: { summary: 'SomeType<T>' } },\n},\n},\n};\nWhy isn't Storybook's test runner working There's an issue with Storybook's test runner and the latest version of Jest (i e , version 28), which prevents it from running effectively As a workaround, you can downgrade Jest to the previous stable version (i e , version 27), and you'll be able to run it See the following issue for more information How does Storybook handle environment variables Storybook has built-in support for environment variables By default, environment variables are only available in Node js code and are not available in the browser as some variables should be kept secret (e g , API keys) and not exposed to anyone visiting the published Storybook To expose a variable, you must preface its name with STORYBOOK_ So STORYBOOK_API_URL will be available in browser code but API_KEY will not Additionally you can also customize which variables are exposed by setting the env field in the storybook/main js file Variables are set when JavaScript is compiled so when the development server is started or you build your Storybook Environment variable files should not be committed to Git as they often contain secrets which are not safe to add to Git Instead, add env * to your",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 994222,
      "relative_path": "documentation\\storybook\\_docs_faq.html",
      "source_type": "documentation"
    },
    "token_count": 494,
    "chunk_index": 12,
    "total_chunks": 14
  },
  {
    "id": "c122072a3bf5a7783045af1522e4f656",
    "source_file": "corpus\\documentation\\storybook\\_docs_faq.html",
    "source_type": "documentation",
    "title": "Frequently Asked Questions | Storybook docs",
    "content": "will be available in browser code but API_KEY will not Additionally you can also customize which variables are exposed by setting the env field in the storybook/main js file Variables are set when JavaScript is compiled so when the development server is started or you build your Storybook Environment variable files should not be committed to Git as they often contain secrets which are not safe to add to Git Instead, add env * to yourgitignore file and set up the environment variables manually on your hosting provider (e g , GitHub) Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 994222,
      "relative_path": "documentation\\storybook\\_docs_faq.html",
      "source_type": "documentation"
    },
    "token_count": 171,
    "chunk_index": 13,
    "total_chunks": 14
  },
  {
    "id": "82cafb3b03ff5116527cf6343f14f42a",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_react-native-web-vite.html",
    "source_type": "documentation",
    "title": "Storybook for React Native Web | Storybook docs",
    "content": "Storybook for React Native Web | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Get Started » Frameworks » React Native WebDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQStorybook for React Native WebStorybook for React Native Web is a framework that makes it easy to develop and test UI components in isolation for React Native applications It uses Vite to build your components for web browsers The framework includes:\n⚛️ React Native components\n🧑‍💻 Shareable on the web\n🪄 Zero config\n💫 and more ℹ️In addition to React Native Web, Storybook supports on-device React Native development If you're unsure what's right for you, read our comparison Requirements\nReact-Native ≥ 0 72\nReact-Native-Web ≥ 0 19\nVite ≥ 5 0\nGetting started\nIn a project without Storybook\nFollow the prompts after running this command in your React Native project's root directory:\nnpmnpm create storybook@latest\nMore on getting started with Storybook In a project with Storybook addon-react-native-web\nThe React Native Web addon was a Webpack-based precursor to the React Native Web Vite framework (i e , @storybook/react-native-web-vite)",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 633959,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_react-native-web-vite.html",
      "source_type": "documentation"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "c8c4210956408794fed70d02becaae5c",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_react-native-web-vite.html",
    "source_type": "documentation",
    "title": "Storybook for React Native Web | Storybook docs",
    "content": "what's right for you, read our comparison Requirements React-Native ≥ 0 72 React-Native-Web ≥ 0 19 Vite ≥ 5 0 Getting started In a project without Storybook Follow the prompts after running this command in your React Native project's root directory: npmnpm create storybook@latest More on getting started with Storybook In a project with Storybook addon-react-native-web The React Native Web addon was a Webpack-based precursor to the React Native Web Vite framework (i e , @storybook/react-native-web-vite)If you're using the addon, you should migrate to the framework, which is faster, more stable, maintained, and better documented To do so, follow the steps below Run the following command to upgrade Storybook to the latest version:\nnpmnpx storybook@latest upgrade\nℹ️This framework is designed to work with Storybook 8 5 and above for the best experience We won't be able to provide support if you're using an older Storybook version Install the framework and its peer dependencies:\nnpmThis snippet doesn't exist for react npm install --save-dev @storybook/react-native-web-vite vite\nUpdate your storybook/main js|ts to change the framework property and remove the @storybook/addon-react-native-web addon: storybook/main jsThis snippet doesn't exist for react export default {\naddons: [\n'@storybook/addon-react-native-web', // 👈 Remove the addon\n],\n// Replace @storybook/react-webpack5 with the Vite framework\nframework: '@storybook/react-native-web-vite',\n};\nFinally, remove the addon and similar packages (i e , @storybook/react-webpack5 and @storybook/addon-react-native-web) from your project In a project with Storybook react-native\nStorybook for React Native is a framework that runs in a simulator or on your mobile device It's possible to run React Native Web alongside React Native, but we are still working on a seamless integration In the meantime, we recommend running one or the other If you need help figuring out what's right for you, read our comparison Run the Setup Wizard\nIf all goes well, you should see a setup wizard that will help you get started with Storybook The wizard will introduce you to the main concepts and features, including how the UI is organized, how to write your first story, and how to test your components' response to various inputs utilizing controls",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 633959,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_react-native-web-vite.html",
      "source_type": "documentation"
    },
    "token_count": 490,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "03c73d22da34221bf849d41ced94af34",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_react-native-web-vite.html",
    "source_type": "documentation",
    "title": "Storybook for React Native Web | Storybook docs",
    "content": "recommend running one or the other If you need help figuring out what's right for you, read our comparison Run the Setup Wizard If all goes well, you should see a setup wizard that will help you get started with Storybook The wizard will introduce you to the main concepts and features, including how the UI is organized, how to write your first story, and how to test your components' response to various inputs utilizing controlsIf you skipped the wizard, you can always run it again by adding the path=/onboarding query parameter to the URL of your Storybook instance, provided that the example stories are still available React Native vs React Native Web\nIf you’re building React Native (RN) components, Storybook has two options: Native and Web Both options provide a catalog of your stories that hot refreshes as you edit the code in your favorite editor However, their implementations are quite different:\nNative - Runs inside your React Native application It’s high-fidelity but has a limited feature set Web - Displays your React Native components in the browser It’s based on Storybook for Web, which is feature-rich and mature Comparison\nSo, which option is right for you Native You should choose this option if you want:\nNative features - Your components rely on device-specific features like native modules It runs in your actual application, in-simulator, or on-device and provides full fidelity The web version uses react-native-web, which works for most components but has limitations Mobile publication - You want to share your Storybook on-device as part of a test build or embedded inside your application Web You should choose this option if you want:\nSharing - Publish to the web and share with your team or publicly Documentation - Auto-generated component docs or rich markdown docs in MDX Testing - Component, visual, and a11y tests for your components Addons - 500+ addons that improve development, documentation, testing, and integration with other tools Both It’s also possible to use both options together This increases Storybook’s install footprint but is a good option if you want native fidelity in addition to all of the web features Learn more below Using both React Native and React Native Web\nThe easiest way to use React Native and React Native Web is to select the \"Both\" option when installing Storybook This will install and create configurations for both environments, allowing you to run Storybook for both in the same project However, you can install them separately if one version is installed",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 633959,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_react-native-web-vite.html",
      "source_type": "documentation"
    },
    "token_count": 486,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "ea5769811383d6e94ac86be532a735ea",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_react-native-web-vite.html",
    "source_type": "documentation",
    "title": "Storybook for React Native Web | Storybook docs",
    "content": "option if you want native fidelity in addition to all of the web features Learn more below Using both React Native and React Native Web The easiest way to use React Native and React Native Web is to select the \"Both\" option when installing Storybook This will install and create configurations for both environments, allowing you to run Storybook for both in the same project However, you can install them separately if one version is installedYou can add a React Native Web Storybook alongside an existing React Native Storybook by running the install command and selecting \"React Native Web\" in the setup wizard, and vice versa API\nOptions\nYou can pass an options object for additional configuration if needed: storybook/main ts import type { StorybookConfig } from '@storybook/react-native-web-vite';\nconst config: StorybookConfig = {\nframework: {\nname: '@storybook/react-native-web-vite',\noptions: {\nmodulesToTranspile: ['my-library'], // add libraries that are not transpiled for web by default\n// You should apply babel plugins and presets here for your project that you want to apply to your code\n// for example put the reanimated preset here if you are using reanimated\n// or the nativewind jsxImportSource for example\npluginReactOptions: {\njsxRuntime: 'automatic' | 'classic', // default: 'automatic'\njsxImportSource: string, // default: 'react'\nbabel:{\nplugins: Array<string | [string, any]>,\npresets: Array<string | [string, any]>,\n// other compatible babel options\n}\ninclude: Array<string|RegExp>,\nexclude: Array<string|RegExp>,\n// other compatible @vitejs/plugin-react options\n}\n},\n},\n};\nexport default config;\nExample configuration for reanimated storybook/main ts const main: StorybookConfig = {\n// rest of config\nframework: {\nname: \"@storybook/react-native-web-vite\",\noptions: {\npluginReactOptions: {\nbabel: {\nplugins: [\n\"@babel/plugin-proposal-export-namespace-from\",\n\"react-native-reanimated/plugin\",\n],\n},\n},\n},\n},\n// rest of config\n}\nExample configuration for nativewind storybook/main ts\nconst main: StorybookConfig = {\n//",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 633959,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_react-native-web-vite.html",
      "source_type": "documentation"
    },
    "token_count": 447,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "7a387378f4c81b048618595fb4f08c38",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_react-native-web-vite.html",
    "source_type": "documentation",
    "title": "Storybook for React Native Web | Storybook docs",
    "content": "| [string, any]>, // other compatible babel options } include: Array<string|RegExp>, exclude: Array<string|RegExp>, // other compatible @vitejs/plugin-react options } }, }, }; export default config; Example configuration for reanimated storybook/main ts const main: StorybookConfig = { // rest of config framework: { name: \"@storybook/react-native-web-vite\", options: { pluginReactOptions: { babel: { plugins: [ \"@babel/plugin-proposal-export-namespace-from\", \"react-native-reanimated/plugin\", ], }, }, }, }, // rest of config } Example configuration for nativewind storybook/main ts const main: StorybookConfig = { //rest of config\nframework: {\nname: \"@storybook/react-native-web-vite\",\noptions: {\npluginReactOptions: {\njsxImportSource: \"nativewind\",\n},\n},\n},\n}\nExample configuration to transpile additional node_modules\nLet's say you need to transpile a library called my-library that is not transpiled for web by default You can add it to the modulesToTranspile option storybook/main ts const main: StorybookConfig = {\n// rest of config\nframework: {\nname: \"@storybook/react-native-web-vite\",\noptions: {\nmodulesToTranspile: ['my-library'],\n},\n},\n}\nbuilder\nType: Record<string, any>\nConfigure options for the framework's builder For this framework, available options can be found in the Vite builder docs Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 633959,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_react-native-web-vite.html",
      "source_type": "documentation"
    },
    "token_count": 368,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "385c42f81194e969003b8015d614f973",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_react-vite.html",
    "source_type": "documentation",
    "title": "Storybook for React & Vite | Storybook docs",
    "content": "Storybook for React & Vite | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Get Started » Frameworks » React & ViteDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQStorybook for React & ViteStorybook for React & Vite is a framework that makes it easy to develop and test UI components in isolation for React applications built with Vite It includes:\n🏎️ Pre-bundled for performance\n🪄 Zero config\n💫 and more Requirements\nReact ≥ 16 8\nVite ≥ 5 0\nGetting started\nIn a project without Storybook\nFollow the prompts after running this command in your React project's root directory:\nnpmnpm create storybook@latest\nMore on getting started with Storybook In a project with Storybook\nThis framework is designed to work with Storybook 7+ If you’re not already using v7, upgrade with this command:\nnpmnpx storybook@latest upgrade\nAutomatic migration\nWhen running the upgrade command above, you should get a prompt asking you to migrate to @storybook/react-vite, which should handle everything for you In case that auto-migration does not work for your project, refer to the manual migration below",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 547064,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_react-vite.html",
      "source_type": "documentation"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "bce50ea075a244fa074e20c2655e9c45",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_react-vite.html",
    "source_type": "documentation",
    "title": "Storybook for React & Vite | Storybook docs",
    "content": "create storybook@latest More on getting started with Storybook In a project with Storybook This framework is designed to work with Storybook 7+ If you’re not already using v7, upgrade with this command: npmnpx storybook@latest upgrade Automatic migration When running the upgrade command above, you should get a prompt asking you to migrate to @storybook/react-vite, which should handle everything for you In case that auto-migration does not work for your project, refer to the manual migration belowManual migration\nFirst, install the framework:\nnpmnpm install --save-dev @storybook/react-vite\nThen, update your storybook/main js|ts to change the framework property: storybook/main tsTypescriptimport type { StorybookConfig } from '@storybook/react-vite';\nconst config: StorybookConfig = {\n// // framework: '@storybook/react-webpack5', 👈 Remove this\nframework: '@storybook/react-vite', // 👈 Add this\n};\nexport default config;\nRun the Setup Wizard\nIf all goes well, you should see a setup wizard that will help you get started with Storybook introducing you to the main concepts and features, including how the UI is organized, how to write your first story, and how to test your components' response to various inputs utilizing controls If you skipped the wizard, you can always run it again by adding the path=/onboarding query parameter to the URL of your Storybook instance, provided that the example stories are still available API\nOptions\nYou can pass an options object for additional configuration if needed: storybook/main tsTypescriptimport type { StorybookConfig } from '@storybook/react-vite';\nconst config: StorybookConfig = {\nframework: {\nname: '@storybook/react-vite',\noptions: {\n// },\n},\n};\nexport default config;\nbuilder\nType: Record<string, any>\nConfigure options for the framework's builder For this framework, available options can be found in the Vite builder docs Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 547064,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_react-vite.html",
      "source_type": "documentation"
    },
    "token_count": 467,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "7cfdea51b211e72eb707e1dfdf9321de",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_react-webpack5.html",
    "source_type": "documentation",
    "title": "Storybook for React & Webpack | Storybook docs",
    "content": "Storybook for React & Webpack | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Get Started » Frameworks » React & WebpackDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQStorybook for React & WebpackStorybook for React & Webpack is a framework that makes it easy to develop and test UI components in isolation for React applications built with Webpack Requirements\nReact ≥ 16 8\nWebpack ≥ 5 0\nGetting started\nIn a project without Storybook\nFollow the prompts after running this command in your React project's root directory:\nnpmnpm create storybook@latest\nMore on getting started with Storybook In a project with Storybook\nThis framework is designed to work with Storybook 7+ If you’re not already using v7, upgrade with this command:\nnpmnpx storybook@latest upgrade\nAutomatic migration\nWhen running the upgrade command above, you should get a prompt asking you to migrate to @storybook/react-webpack5, which should handle everything for you In case that auto-migration does not work for your project, refer to the manual migration below",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 567610,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_react-webpack5.html",
      "source_type": "documentation"
    },
    "token_count": 456,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "0a0426bb38bb7e9fed07d71a16732d04",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_react-webpack5.html",
    "source_type": "documentation",
    "title": "Storybook for React & Webpack | Storybook docs",
    "content": "create storybook@latest More on getting started with Storybook In a project with Storybook This framework is designed to work with Storybook 7+ If you’re not already using v7, upgrade with this command: npmnpx storybook@latest upgrade Automatic migration When running the upgrade command above, you should get a prompt asking you to migrate to @storybook/react-webpack5, which should handle everything for you In case that auto-migration does not work for your project, refer to the manual migration belowManual migration\nFirst, install the framework:\nnpmnpm install --save-dev @storybook/react-webpack5\nNext, install and register your appropriate compiler addon, depending on whether you're using SWC (recommended) or Babel:\nℹ️If your project is using Create React App, you can skip this step npmnpx storybook@latest add @storybook/addon-webpack5-compiler-swc\nor\nnpmnpx storybook@latest add @storybook/addon-webpack5-compiler-babel\nMore details can be found in the Webpack builder docs Finally, update your storybook/main js|ts to change the framework property: storybook/main tsTypescriptimport type { StorybookConfig } from '@storybook/react-webpack5';\nconst config: StorybookConfig = {\n// framework: '@storybook/react-webpack5', // 👈 Add this\n};\nexport default config;\nRun the Setup Wizard\nIf all goes well, you should see a setup wizard that will help you get started with Storybook introducing you to the main concepts and features, including how the UI is organized, how to write your first story, and how to test your components' response to various inputs utilizing controls If you skipped the wizard, you can always run it again by adding the path=/onboarding query parameter to the URL of your Storybook instance, provided that the example stories are still available Create React App (CRA)\nSupport for Create React App is handled by @storybook/preset-create-react-app This preset enables support for all CRA features, including Sass/SCSS and TypeScript If you're working on an app that was initialized manually (i e , without the use of CRA), ensure that your app has react-dom included as a dependency Failing to do so can lead to unforeseen issues with Storybook and your project API\nOptions\nYou can pass an options object for additional configuration if needed: storybook/main",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 567610,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_react-webpack5.html",
      "source_type": "documentation"
    },
    "token_count": 485,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "945429c7bb4eed3802f4c5339a37f87c",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_react-webpack5.html",
    "source_type": "documentation",
    "title": "Storybook for React & Webpack | Storybook docs",
    "content": "for Create React App is handled by @storybook/preset-create-react-app This preset enables support for all CRA features, including Sass/SCSS and TypeScript If you're working on an app that was initialized manually (i e , without the use of CRA), ensure that your app has react-dom included as a dependency Failing to do so can lead to unforeseen issues with Storybook and your project API Options You can pass an options object for additional configuration if needed: storybook/maintsTypescriptimport type { StorybookConfig } from '@storybook/react-webpack5';\nconst config: StorybookConfig = {\nframework: {\nname: '@storybook/react-webpack5',\noptions: {\n// },\n},\n};\nexport default config;\nbuilder\nType: Record<string, any>\nConfigure options for the framework's builder For this framework, available options can be found in the Webpack builder docs Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 567610,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_react-webpack5.html",
      "source_type": "documentation"
    },
    "token_count": 245,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "eb801ec01285fa42d71eed5d27cb9ccd",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_svelte-vite.html",
    "source_type": "documentation",
    "title": "Storybook for Svelte & Vite | Storybook docs",
    "content": "Storybook for Svelte & Vite | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Get Started » Frameworks » Svelte & ViteDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQStorybook for Svelte & ViteStorybook for Svelte & Vite is a framework that makes it easy to develop and test UI components in isolation for applications using Svelte built with Vite Requirements\nSvelte ≥ 5 0\nVite ≥ 5 0\nGetting started\nIn a project without Storybook\nFollow the prompts after running this command in your Svelte project's root directory:\nnpmnpm create storybook@latest\nMore on getting started with Storybook In a project with Storybook\nThis framework is designed to work with Storybook 7+ If you’re not already using v7, upgrade with this command:\nnpmnpx storybook@latest upgrade\nAutomatic migration\nWhen running the upgrade command above, you should get a prompt asking you to migrate to @storybook/svelte-vite, which should handle everything for you In case that auto-migration does not work for your project, refer to the manual migration below Manual migration\nFirst, install the framework:\nnpmnpm install --save-dev @storybook/svelte-vite\nThen, update your storybook/main js|ts to change the framework property:",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 704787,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_svelte-vite.html",
      "source_type": "documentation"
    },
    "token_count": 504,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "ac5b975ac97223830f64de333bd88ff4",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_svelte-vite.html",
    "source_type": "documentation",
    "title": "Storybook for Svelte & Vite | Storybook docs",
    "content": "Storybook 7+ If you’re not already using v7, upgrade with this command: npmnpx storybook@latest upgrade Automatic migration When running the upgrade command above, you should get a prompt asking you to migrate to @storybook/svelte-vite, which should handle everything for you In case that auto-migration does not work for your project, refer to the manual migration below Manual migration First, install the framework: npmnpm install --save-dev @storybook/svelte-vite Then, update your storybook/main js|ts to change the framework property:storybook/main tsTypescriptimport type { StorybookConfig } from '@storybook/svelte-vite';\nconst config: StorybookConfig = {\n// framework: '@storybook/svelte-vite', // 👈 Add this\n};\nexport default config;\nWriting native Svelte stories\nStorybook provides a Svelte addon maintained by the community, enabling you to write stories for your Svelte components using the template syntax ℹ️The community actively maintains the Svelte CSF addon but still lacks some features currently available in the official Storybook Svelte framework support For more information, see the addon's documentation Setup\nIf you initialized your project with the Svelte framework, the addon has already been installed and configured for you However, if you're migrating from a previous version, you'll need to take additional steps to enable this feature Run the following command to install the addon npmnpx storybook@latest add @storybook/addon-svelte-csf\nℹ️The CLI's add command automates the addon's installation and setup To install it manually, see our documentation on how to install addons Update your Storybook configuration file (i e , storybook/main js|ts) to enable support for this format storybook/main tsTypescript// Replace your-framework with svelte-vite or sveltekit\nimport type { StorybookConfig } from '@storybook/your-framework';\nconst config: StorybookConfig = {\nstories: [' /src/**/* stories @(js|jsx|ts|tsx|svelte)'],\naddons: [\n// Other Storybook addons\n'@storybook/addon-svelte-csf',\n],\n};\nexport default config;\nConfigure\nBy default, the Svelte addon offers zero-config support for Storybook's Svelte framework However, you can extend your Storybook configuration file (i e , storybook/main js|ts) and provide additional addon options Listed below are the available options and examples of how to use them",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 704787,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_svelte-vite.html",
      "source_type": "documentation"
    },
    "token_count": 502,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "5372a71a5d21969d88f325e8405b6442",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_svelte-vite.html",
    "source_type": "documentation",
    "title": "Storybook for Svelte & Vite | Storybook docs",
    "content": "svelte-vite or sveltekit import type { StorybookConfig } from '@storybook/your-framework'; const config: StorybookConfig = { stories: [' /src/**/* stories @(js|jsx|ts|tsx|svelte)'], addons: [ // Other Storybook addons '@storybook/addon-svelte-csf', ], }; export default config; Configure By default, the Svelte addon offers zero-config support for Storybook's Svelte framework However, you can extend your Storybook configuration file (i e , storybook/main js|ts) and provide additional addon options Listed below are the available options and examples of how to use themstorybook/main tsTypescript// Replace your-framework with the name of your Svelte framework\nimport type { StorybookConfig } from '@storybook/your-framework';\nconst config: StorybookConfig = {\n// Other configuration\naddons: [\n{\nname: '@storybook/addon-svelte-csf',\noptions: {\nlegacyTemplate: true, // Enables the legacy template syntax\n},\n},\n],\n};\nexport default config;\nOptionsDescriptionlegacyTemplateEnables support for the Template component for backward compatibility options: { legacyTemplate: true }\nℹ️Enabling the legacyTemplate option can introduce a performance overhead and should be used cautiously For more information, refer to the addon's documentation Upgrade to Svelte CSF addon v5\nWith the Svelte 5 release, Storybook's Svelte CSF addon has been updated to support the new features This guide will help you migrate to the latest version of the addon Below is an overview of the major changes in version 5 0 and the steps needed to upgrade your project Simplified story API\nIf you are using the Meta component or the meta named export to define the story's metadata (e g , parameters), you'll need to update your stories to use the new defineMeta function This function returns an object with the required information, including a Story component that you must use to define your component stories BeforeAfter MyComponent stories svelte<script>\nimport { Meta, Story } from '@storybook/addon-svelte-csf';\nimport MyComponent from ' /MyComponent",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 704787,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_svelte-vite.html",
      "source_type": "documentation"
    },
    "token_count": 433,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "d4a97f9ff177f4abbbd82a2142339696",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_svelte-vite.html",
    "source_type": "documentation",
    "title": "Storybook for Svelte & Vite | Storybook docs",
    "content": "your project Simplified story API If you are using the Meta component or the meta named export to define the story's metadata (e g , parameters), you'll need to update your stories to use the new defineMeta function This function returns an object with the required information, including a Story component that you must use to define your component stories BeforeAfter MyComponent stories svelte<script> import { Meta, Story } from '@storybook/addon-svelte-csf'; import MyComponent from ' /MyComponentsvelte';\n</script>\n<Meta title=\"MyComponent\" component={MyComponent} />\n<Story name=\"Default\" />\nStory templates\nIf you used the Template component to control how the component renders in the Storybook, this feature was replaced with built-in children support in the Story component, enabling you to compose components and define the UI structure directly in the story BeforeAfter MyComponent stories svelte<script>\nimport { Meta, Template, Story } from '@storybook/addon-svelte-csf';\nimport OuterComponent from ' /OuterComponent svelte';\nimport MyComponent from ' /MyComponent svelte';\n</script>\n<Meta title=\"MyComponent\" component={MyComponent} />\n<Template let:args>\n<OuterComponent>\n<MyComponent />\n</OuterComponent>\n</Template>\n<Story name=\"Default\" />\nℹ️If you need support for the Template component, the addon provides a feature flag for backward compatibility For more information, see the configuration options Story slots to snippets\nWith Svelte's slot deprecation and the introduction of reusable snippets, the addon also introduced support for this feature allowing you to extend the Story component and provide a custom snippet to provide dynamic content to your stories Story accepts a template snippet, allowing you to create dynamic stories without losing reactivity MyComponent stories svelte <script>\nimport { defineMeta } from '@storybook/addon-svelte-csf';\nimport MyComponent from ' /MyComponent svelte';\nconst { Story } = defineMeta({\ncomponent: MyComponent,\n});\n</script>\n<Story name=\"Default\" args={{ exampleProperty: true }}>\n{#snippet template(args)}\n<MyComponent { args}>Reactive component</MyComponent>\n{/snippet}\n</Story>\nTags support\nIf you enabled automatic documentation generation with the autodocs story property, you must replace it with tags This property allows you to categorize and filter stories based on specific criteria and generate documentation based on the tags applied to the stories BeforeAfter MyComponent stories",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 704787,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_svelte-vite.html",
      "source_type": "documentation"
    },
    "token_count": 497,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "ed88210c7b55731d7b7db780b9b43b10",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_svelte-vite.html",
    "source_type": "documentation",
    "title": "Storybook for Svelte & Vite | Storybook docs",
    "content": "import MyComponent from ' /MyComponent svelte'; const { Story } = defineMeta({ component: MyComponent, }); </script> <Story name=\"Default\" args={{ exampleProperty: true }}> {#snippet template(args)} <MyComponent { args}>Reactive component</MyComponent> {/snippet} </Story> Tags support If you enabled automatic documentation generation with the autodocs story property, you must replace it with tags This property allows you to categorize and filter stories based on specific criteria and generate documentation based on the tags applied to the stories BeforeAfter MyComponent storiessvelte<script>\nimport { Meta, Template, Story } from '@storybook/addon-svelte-csf';\nimport MyComponent from ' /MyComponent svelte';\n</script>\n<Meta title=\"MyComponent\" component={MyComponent} />\n<Template let:args>\n<MyComponent { args} />\n</Template>\n<Story name=\"Default\" autodocs />\nAPI\nOptions\nYou can pass an options object for additional configuration if needed: storybook/main tsTypescriptimport type { StorybookConfig } from '@storybook/svelte-vite';\nconst config: StorybookConfig = {\n// framework: {\nname: '@storybook/svelte-vite',\noptions: {\n// },\n},\n};\nexport default config;\nThe available options are:\nbuilder\nType: Record<string, any>\nConfigure options for the framework's builder For this framework, available options can be found in the Vite builder docs Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 704787,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_svelte-vite.html",
      "source_type": "documentation"
    },
    "token_count": 369,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "8cbfe4a0e6914211cd5e6f4cb7cec58c",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_vue3-vite.html",
    "source_type": "documentation",
    "title": "Storybook for Vue & Vite | Storybook docs",
    "content": "Storybook for Vue & Vite | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Get Started » Frameworks » Vue & ViteDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQStorybook for Vue & ViteStorybook for Vue & Vite is a framework that makes it easy to develop and test UI components in isolation for Vue applications built with Vite It includes:\n🏎️ Pre-bundled for performance\n🪄 Zero config\n🧠 Comprehensive docgen\n💫 and more Requirements\nVue ≥ 3\nVite ≥ 5 0\nGetting started\nIn a project without Storybook\nFollow the prompts after running this command in your Vue project's root directory:\nnpmnpm create storybook@latest\nMore on getting started with Storybook In a project with Storybook\nThis framework is designed to work with Storybook 7+ If you’re not already using v7, upgrade with this command:\nnpmnpx storybook@latest upgrade\nAutomatic migration\nWhen running the upgrade command above, you should get a prompt asking you to migrate to @storybook/vue3-vite, which should handle everything for you In case that auto-migration does not work for your project, refer to the manual migration below",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 726522,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_vue3-vite.html",
      "source_type": "documentation"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "2307edaf518d5440f9b7f1de41a76dca",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_vue3-vite.html",
    "source_type": "documentation",
    "title": "Storybook for Vue & Vite | Storybook docs",
    "content": "create storybook@latest More on getting started with Storybook In a project with Storybook This framework is designed to work with Storybook 7+ If you’re not already using v7, upgrade with this command: npmnpx storybook@latest upgrade Automatic migration When running the upgrade command above, you should get a prompt asking you to migrate to @storybook/vue3-vite, which should handle everything for you In case that auto-migration does not work for your project, refer to the manual migration belowManual migration\nFirst, install the framework:\nnpmnpm install --save-dev @storybook/vue3-vite\nThen, update your storybook/main js|ts to change the framework property: storybook/main tsTypescriptimport type { StorybookConfig } from '@storybook/vue3-vite';\nconst config: StorybookConfig = {\n// framework: '@storybook/vue3-vite', // 👈 Add this\n};\nexport default config;\nExtending the Vue application\nStorybook creates a Vue 3 application for your component preview When using global custom components (app component), directives (app directive), extensions (app use), or other application methods, you will need to configure those in the /storybook/preview js|ts file Therefore, Storybook provides you with a setup function exported from this package This function receives your Storybook instance as a callback, which you can interact with and add your custom configuration storybook/preview js|ts import { setup } from '@storybook/vue3-vite';\nsetup((app) => {\napp use(MyPlugin);\napp component('my-component', MyComponent);\napp mixin({\n// My mixin\n});\n});\nUsing vue-component-meta\nℹ️vue-component-meta is only available in Storybook ≥ 8 It is currently an opt-in, but it will become the default in a future version of Storybook vue-component-meta is a tool maintained by the Vue team that extracts metadata from Vue components Storybook can use it to generate the controls for your stories and documentation It's a more full-featured alternative to vue-docgen-api and is recommended for most projects If you want to use vue-component-meta, you can configure it in your storybook/main js|ts file: storybook/main",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 726522,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_vue3-vite.html",
      "source_type": "documentation"
    },
    "token_count": 448,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "2d0e47a48e774388046831bb6479aaca",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_vue3-vite.html",
    "source_type": "documentation",
    "title": "Storybook for Vue & Vite | Storybook docs",
    "content": "≥ 8 It is currently an opt-in, but it will become the default in a future version of Storybook vue-component-meta is a tool maintained by the Vue team that extracts metadata from Vue components Storybook can use it to generate the controls for your stories and documentation It's a more full-featured alternative to vue-docgen-api and is recommended for most projects If you want to use vue-component-meta, you can configure it in your storybook/main js|ts file: storybook/maints import type { StorybookConfig } from '@storybook/vue3-vite';\nconst config: StorybookConfig = {\nframework: {\nname: '@storybook/vue3-vite',\noptions: {\ndocgen: 'vue-component-meta',\n},\n},\n};\nexport default config;\nvue-component-meta comes with many benefits and enables more documentation features, such as:\nSupport for multiple component types\nvue-component-meta supports all types of Vue components (including SFC, functional, composition/options API components) from vue, ts, tsx, js, and jsx files It also supports both default and named component exports Prop description and JSDoc tag annotations\nTo describe a prop, including tags, you can use JSDoc comments in your component's props definition:\nYourComponent vue <script setup lang=\"ts\">\ninterface MyComponentProps {\n/** The name of the user */\nname: string;\n/**\n* The category of the component\n*\n* @since 8 0 0\n*/\ncategory : string;\n}\nwithDefaults(defineProps<MyComponentProps>(), {\ncategory: 'Uncategorized',\n});\n</script>\nThe props definition above will generate the following controls:\nEvents types extraction\nTo provide a type for an emitted event, you can use TypeScript types (including JSDoc comments) in your component's defineEmits call:\nYourComponent vue <script setup lang=\"ts\">\ntype MyChangeEvent = 'change';\ninterface MyEvents {\n/** Fired when item is changed */\n(event: MyChangeEvent, item : Item): void;\n/** Fired when item is deleted */\n(event: 'delete', id: string): void;\n/** Fired when item is upserted into list */\n(e: 'upsert', id: string): void;\n}\nconst emit = defineEmits<MyEvents>();\n</script>\nWhich will generate the following controls:\nSlots types extraction\nThe slot types are automatically extracted from your component definition and displayed in the controls panel YourComponent",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 726522,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_vue3-vite.html",
      "source_type": "documentation"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "424396a173ad089e2884a5a67ef26a78",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_vue3-vite.html",
    "source_type": "documentation",
    "title": "Storybook for Vue & Vite | Storybook docs",
    "content": "= 'change'; interface MyEvents { /** Fired when item is changed */ (event: MyChangeEvent, item : Item): void; /** Fired when item is deleted */ (event: 'delete', id: string): void; /** Fired when item is upserted into list */ (e: 'upsert', id: string): void; } const emit = defineEmits<MyEvents>(); </script> Which will generate the following controls: Slots types extraction The slot types are automatically extracted from your component definition and displayed in the controls panel YourComponentvue <template>\n<slot :num=\"123\"></slot>\n<br />\n<slot name=\"named\" str=\"str\"></slot>\n<br />\n<slot name=\"no-bind\"></slot>\n<br />\n<slot name=\"vbind\" v-bind=\"{ num: 123, str: 'str' }\"></slot>\n</template>\n<script setup lang=\"ts\"></script>\nIf you use defineSlots, you can describe each slot using JSDoc comments in your component's slots definition:\ndefineSlots<{\n/** Example description for default */\ndefault(props: { num: number }): any;\n/** Example description for named */\nnamed(props: { str: string }): any;\n/** Example description for no-bind */\nnoBind(props: {}): any;\n/** Example description for vbind */\nvbind(props: { num: number; str: string }): any;\n}>();\nThe definition above will generate the following controls:\nExposed properties and methods\nThe properties and methods exposed by your component are automatically extracted and displayed in the Controls panel YourComponent vue <script setup lang=\"ts\">\nimport { ref } from 'vue';\nconst label = ref('Button');\nconst count = ref(100);\ndefineExpose({\n/** A label string */\nlabel,\n/** A count number */\ncount,\n});\n</script>\nThe definition above will generate the following controls:\nOverride the default configuration\nIf you're working with a project that relies on tsconfig references to link to other existing configuration files (e g , tsconfig app json, tsconfig node json), we recommend that you update your storybook/main js|ts configuration file and add the following: storybook/main ts import type { StorybookConfig } from '@storybook/vue3-vite';\nconst config: StorybookConfig = {\nframework: {\nname: '@storybook/vue3-vite',\noptions: {\ndocgen: {\nplugin: 'vue-component-meta',\ntsconfig: 'tsconfig app",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 726522,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_vue3-vite.html",
      "source_type": "documentation"
    },
    "token_count": 494,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "737254204a5d3f117314913bcb1b9642",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_vue3-vite.html",
    "source_type": "documentation",
    "title": "Storybook for Vue & Vite | Storybook docs",
    "content": "generate the following controls: Override the default configuration If you're working with a project that relies on tsconfig references to link to other existing configuration files (e g , tsconfig app json, tsconfig node json), we recommend that you update your storybook/main js|ts configuration file and add the following: storybook/main ts import type { StorybookConfig } from '@storybook/vue3-vite'; const config: StorybookConfig = { framework: { name: '@storybook/vue3-vite', options: { docgen: { plugin: 'vue-component-meta', tsconfig: 'tsconfig appjson',\n},\n},\n},\n};\nexport default config;\nℹ️This is not a limitation of Storybook, but how vue-component-meta works For more information, refer to the appropriate GitHub issue Otherwise, you might face missing component types/descriptions or unresolvable import aliases like @/some/import Troubleshooting\nStorybook doesn't work with my Vue 2 project\nVue 2 entered End of Life (EOL) on December 31st, 2023, and is no longer maintained by the Vue team As a result, Storybook no longer supports Vue 2 We recommend you upgrade your project to Vue 3, which Storybook fully supports If that's not an option, you can still use Storybook with Vue 2 by installing the latest version of Storybook 7 with the following command:\nnpmnpx storybook@^7 init\nAPI\nOptions\nYou can pass an options object for additional configuration if needed: storybook/main tsTypescriptimport type { StorybookConfig } from '@storybook/vue3-vite';\nconst config: StorybookConfig = {\nframework: {\nname: '@storybook/vue3-vite',\noptions: {\ndocgen: 'vue-component-meta',\n},\n},\n};\nexport default config;\nbuilder\nType: Record<string, any>\nConfigure options for the framework's builder For this framework, available options can be found in the Vite builder docs docgen\nType: 'vue-docgen-api' | 'vue-component-meta'\nDefault: 'vue-docgen-api'\nSince: 8 0\nChoose which docgen tool to use when generating controls for your components See Using vue-component-meta for more information Was this page useful",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 726522,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_vue3-vite.html",
      "source_type": "documentation"
    },
    "token_count": 461,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "a66eab366f15535a6648551bfdb03463",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_vue3-vite.html",
    "source_type": "documentation",
    "title": "Storybook for Vue & Vite | Storybook docs",
    "content": "from '@storybook/vue3-vite'; const config: StorybookConfig = { framework: { name: '@storybook/vue3-vite', options: { docgen: 'vue-component-meta', }, }, }; export default config; builder Type: Record<string, any> Configure options for the framework's builder For this framework, available options can be found in the Vite builder docs docgen Type: 'vue-docgen-api' | 'vue-component-meta' Default: 'vue-docgen-api' Since: 8 0 Choose which docgen tool to use when generating controls for your components See Using vue-component-meta for more information Was this page useful👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 726522,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_vue3-vite.html",
      "source_type": "documentation"
    },
    "token_count": 198,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "f146f8e708167b47d7825e5fd08d3085",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_web-components-vite.html",
    "source_type": "documentation",
    "title": "Storybook for Web components & Vite | Storybook docs",
    "content": "Storybook for Web components & Vite | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Get Started » Frameworks » Web components & ViteDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQStorybook for Web components & ViteStorybook for Web components & Vite is a framework that makes it easy to develop and test UI components in isolation for applications using Web components built with Vite Requirements\nVite ≥ 5 0\nGetting started\nIn a project without Storybook\nFollow the prompts after running this command in your Web components project's root directory:\nnpmnpm create storybook@latest\nMore on getting started with Storybook In a project with Storybook\nThis framework is designed to work with Storybook 7+ If you’re not already using v7, upgrade with this command:\nnpmnpx storybook@latest upgrade\nAutomatic migration\nWhen running the upgrade command above, you should get a prompt asking you to migrate to @storybook/web-components-vite, which should handle everything for you In case that auto-migration does not work for your project, refer to the manual migration below Manual migration\nFirst, install the framework:\nnpmnpm install --save-dev @storybook/web-components-vite\nThen, update your storybook/main js|ts to change the framework property: storybook/main",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 541072,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_web-components-vite.html",
      "source_type": "documentation"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "d39d5b4453a30d7e8ef8adeb9a12c17f",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_web-components-vite.html",
    "source_type": "documentation",
    "title": "Storybook for Web components & Vite | Storybook docs",
    "content": "7+ If you’re not already using v7, upgrade with this command: npmnpx storybook@latest upgrade Automatic migration When running the upgrade command above, you should get a prompt asking you to migrate to @storybook/web-components-vite, which should handle everything for you In case that auto-migration does not work for your project, refer to the manual migration below Manual migration First, install the framework: npmnpm install --save-dev @storybook/web-components-vite Then, update your storybook/main js|ts to change the framework property: storybook/maintsTypescriptimport type { StorybookConfig } from '@storybook/web-components-vite';\nconst config: StorybookConfig = {\n// framework: '@storybook/web-components-vite', // 👈 Add this\n};\nexport default config;\nAPI\nOptions\nYou can pass an options object for additional configuration if needed: storybook/main tsTypescriptimport type { StorybookConfig } from '@storybook/web-components-vite';\nconst config: StorybookConfig = {\nframework: {\nname: '@storybook/web-components-vite',\noptions: {\n// },\n},\n};\nexport default config;\nThe available options are:\nbuilder\nType: Record<string, any>\nConfigure options for the framework's builder For this framework, available options can be found in the Vite builder docs Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 541072,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_web-components-vite.html",
      "source_type": "documentation"
    },
    "token_count": 337,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "70d664fa1c4133314fb957be27aa462d",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_sveltekit.html",
    "source_type": "documentation",
    "title": "Storybook for SvelteKit | Storybook docs",
    "content": "Storybook for SvelteKit | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Get Started » Frameworks » SvelteKitDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQStorybook for SvelteKitStorybook for SvelteKit is a framework that makes it easy to develop and test UI components in isolation for SvelteKit applications It includes:\n🪄 Zero config\n🧩 Easily mock many SvelteKit modules\n🔗 Automatic link handling\n💫 and more Requirements\nSvelteKit ≥ 1 0\nGetting started\nIn a project without Storybook\nFollow the prompts after running this command in your Sveltekit project's root directory:\nnpmnpm create storybook@latest\nMore on getting started with Storybook In a project with Storybook\nThis framework is designed to work with Storybook 7+ If you’re not already using v7, upgrade with this command:\nnpmnpx storybook@latest upgrade\nAutomatic migration\nWhen running the upgrade command above, you should get a prompt asking you to migrate to @storybook/sveltekit, which should handle everything for you In case that auto-migration does not work for your project, refer to the manual migration below Manual migration\nFirst, install the framework:\nnpmnpm install --save-dev @storybook/sveltekit\nThen, update your",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 822974,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_sveltekit.html",
      "source_type": "documentation"
    },
    "token_count": 503,
    "chunk_index": 0,
    "total_chunks": 8
  },
  {
    "id": "50dad58f9838e5cb87aceedbec132efa",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_sveltekit.html",
    "source_type": "documentation",
    "title": "Storybook for SvelteKit | Storybook docs",
    "content": "This framework is designed to work with Storybook 7+ If you’re not already using v7, upgrade with this command: npmnpx storybook@latest upgrade Automatic migration When running the upgrade command above, you should get a prompt asking you to migrate to @storybook/sveltekit, which should handle everything for you In case that auto-migration does not work for your project, refer to the manual migration below Manual migration First, install the framework: npmnpm install --save-dev @storybook/sveltekit Then, update yourstorybook/main js|ts to change the framework property: storybook/main tsTypescriptimport type { StorybookConfig } from '@storybook/sveltekit';\nconst config: StorybookConfig = {\n// framework: '@storybook/sveltekit', // 👈 Add this\n// svelteOptions: { }, 👈 Remove this\n};\nexport default config;\nFinally, these packages are now either obsolete or part of @storybook/sveltekit, so you no longer need to depend on them directly You can remove them (npm uninstall, yarn remove, pnpm remove) from your project:\n@storybook/svelte-vite\nstorybook-builder-vite\n@storybook/builder-vite\nSupported features\nAll Svelte language features are supported out of the box, as the Storybook framework uses the Svelte compiler directly However, SvelteKit has some Kit-specific modules that aren't supported Here's a breakdown of what will and will not work within Storybook:\nModuleStatusNote$app/environment✅ Supportedversion is always empty in Storybook $app/forms⚠️ ExperimentalSee How to mock $app/navigation⚠️ ExperimentalSee How to mock $app/paths✅ SupportedRequires SvelteKit 1 4 0 or newer $app/stores⚠️ ExperimentalSee How to mock $env/dynamic/public🚧 Partially supportedOnly supported in development mode Storybook is built as a static app with no server-side API, so it cannot dynamically serve content $env/static/public✅ Supported$lib✅ Supported@sveltejs/kit/*✅ Supported$env/dynamic/private⛔ Not supportedThis is a server-side feature, and Storybook renders all components on the client $env/static/private⛔ Not supportedThis is a server-side feature, and Storybook renders all components on the client $service-worker⛔ Not supportedThis is a service worker feature, which does not apply to Storybook",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 822974,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_sveltekit.html",
      "source_type": "documentation"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 8
  },
  {
    "id": "b23d1df9a354b378c4dcac3918fd8e49",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_sveltekit.html",
    "source_type": "documentation",
    "title": "Storybook for SvelteKit | Storybook docs",
    "content": "$app/stores⚠️ ExperimentalSee How to mock $env/dynamic/public🚧 Partially supportedOnly supported in development mode Storybook is built as a static app with no server-side API, so it cannot dynamically serve content $env/static/public✅ Supported$lib✅ Supported@sveltejs/kit/*✅ Supported$env/dynamic/private⛔ Not supportedThis is a server-side feature, and Storybook renders all components on the client $env/static/private⛔ Not supportedThis is a server-side feature, and Storybook renders all components on the client $service-worker⛔ Not supportedThis is a service worker feature, which does not apply to StorybookHow to mock\nTo mock a SvelteKit import you can define it within parameters sveltekit_experimental:\nMyComponent stories js|ts export const MyStory = {\nparameters: {\nsveltekit_experimental: {\nstores: {\npage: {\ndata: {\ntest: 'passed',\n},\n},\nnavigating: {\nroute: {\nid: '/storybook',\n},\n},\nupdated: true,\n},\n},\n},\n};\nThe available parameters are documented in the API section, below Mocking links\nThe default link-handling behavior (e g , when clicking an <a href=\" \" /> element) is to log an action to the Actions panel You can override this by assigning an object to parameters sveltekit_experimental hrefs, where the keys are strings representing an href, and the values define your mock For example:\nMyComponent stories js|ts export const MyStory = {\nparameters: {\nsveltekit_experimental: {\nhrefs: {\n'/basic-href': (to, event) => {\nconsole log(to, event);\n},\n'/root *': {\ncallback: (to, event) => {\nconsole log(to, event);\n},\nasRegex: true,\n},\n},\n},\n},\n};\nSee the API reference for more information Writing native Svelte stories\nStorybook provides a Svelte addon maintained by the community, enabling you to write stories for your Svelte components using the template syntax ℹ️The community actively maintains the Svelte CSF addon but still lacks some features currently available in the official Storybook Svelte framework support For more information, see the addon's documentation Setup\nIf you initialized your project with the Sveltekit framework, the addon has already been installed and configured for you",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 822974,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_sveltekit.html",
      "source_type": "documentation"
    },
    "token_count": 484,
    "chunk_index": 2,
    "total_chunks": 8
  },
  {
    "id": "e4ee6aef770b677853967a5ce43c6cd2",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_sveltekit.html",
    "source_type": "documentation",
    "title": "Storybook for SvelteKit | Storybook docs",
    "content": "information Writing native Svelte stories Storybook provides a Svelte addon maintained by the community, enabling you to write stories for your Svelte components using the template syntax ℹ️The community actively maintains the Svelte CSF addon but still lacks some features currently available in the official Storybook Svelte framework support For more information, see the addon's documentation Setup If you initialized your project with the Sveltekit framework, the addon has already been installed and configured for youHowever, if you're migrating from a previous version, you'll need to take additional steps to enable this feature Run the following command to install the addon npmnpx storybook@latest add @storybook/addon-svelte-csf\nℹ️The CLI's add command automates the addon's installation and setup To install it manually, see our documentation on how to install addons Update your Storybook configuration file (i e , storybook/main js|ts) to enable support for this format storybook/main tsTypescript// Replace your-framework with svelte-vite or sveltekit\nimport type { StorybookConfig } from '@storybook/your-framework';\nconst config: StorybookConfig = {\nstories: [' /src/**/* stories @(js|jsx|ts|tsx|svelte)'],\naddons: [\n// Other Storybook addons\n'@storybook/addon-svelte-csf',\n],\n};\nexport default config;\nConfigure\nBy default, the Svelte addon addon offers zero-config support for Storybook's SvelteKit framework However, you can extend your Storybook configuration file (i e , storybook/main js|ts) and provide additional addon options Listed below are the available options and examples of how to use them storybook/main tsTypescript// Replace your-framework with the name of your Svelte framework\nimport type { StorybookConfig } from '@storybook/your-framework';\nconst config: StorybookConfig = {\n// Other configuration\naddons: [\n{\nname: '@storybook/addon-svelte-csf',\noptions: {\nlegacyTemplate: true, // Enables the legacy template syntax\n},\n},\n],\n};\nexport default config;\nOptionsDescriptionlegacyTemplateEnables support for the Template component for backward compatibility options: { legacyTemplate: true }\nℹ️Enabling the legacyTemplate option can introduce a performance overhead and should be used cautiously For more information, refer to the addon's documentation",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 822974,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_sveltekit.html",
      "source_type": "documentation"
    },
    "token_count": 474,
    "chunk_index": 3,
    "total_chunks": 8
  },
  {
    "id": "a97f8e2ab29ce5802032299860939b50",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_sveltekit.html",
    "source_type": "documentation",
    "title": "Storybook for SvelteKit | Storybook docs",
    "content": "your Svelte framework import type { StorybookConfig } from '@storybook/your-framework'; const config: StorybookConfig = { // Other configuration addons: [ { name: '@storybook/addon-svelte-csf', options: { legacyTemplate: true, // Enables the legacy template syntax }, }, ], }; export default config; OptionsDescriptionlegacyTemplateEnables support for the Template component for backward compatibility options: { legacyTemplate: true } ℹ️Enabling the legacyTemplate option can introduce a performance overhead and should be used cautiously For more information, refer to the addon's documentationUpgrade to Svelte CSF addon v5\nWith the Svelte 5 release, Storybook's Svelte CSF addon has been updated to support the new features This guide will help you migrate to the latest version of the addon Below is an overview of the major changes in version 5 0 and the steps needed to upgrade your project Simplified story API\nIf you are using the Meta component or the meta named export to define the story's metadata (e g , parameters), you'll need to update your stories to use the new defineMeta function This function returns an object with the required information, including a Story component that you must use to define your component stories BeforeAfter MyComponent stories svelte<script>\nimport { Meta, Story } from '@storybook/addon-svelte-csf';\nimport MyComponent from ' /MyComponent svelte';\n</script>\n<Meta title=\"MyComponent\" component={MyComponent} />\n<Story name=\"Default\" />\nStory templates\nIf you used the Template component to control how the component renders in the Storybook, this feature was replaced with built-in children support in the Story component, enabling you to compose components and define the UI structure directly in the story BeforeAfter MyComponent stories svelte<script>\nimport { Meta, Template, Story } from '@storybook/addon-svelte-csf';\nimport OuterComponent from ' /OuterComponent svelte';\nimport MyComponent from ' /MyComponent svelte';\n</script>\n<Meta title=\"MyComponent\" component={MyComponent} />\n<Template let:args>\n<OuterComponent>\n<MyComponent />\n</OuterComponent>\n</Template>\n<Story name=\"Default\" />\nℹ️If you need support for the Template component, the addon provides a feature flag for backward compatibility For more information, see the configuration options",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 822974,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_sveltekit.html",
      "source_type": "documentation"
    },
    "token_count": 480,
    "chunk_index": 4,
    "total_chunks": 8
  },
  {
    "id": "44c875fe8ff958ba7b40c2b2387354bd",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_sveltekit.html",
    "source_type": "documentation",
    "title": "Storybook for SvelteKit | Storybook docs",
    "content": "you to compose components and define the UI structure directly in the story BeforeAfter MyComponent stories svelte<script> import { Meta, Template, Story } from '@storybook/addon-svelte-csf'; import OuterComponent from ' /OuterComponent svelte'; import MyComponent from ' /MyComponent svelte'; </script> <Meta title=\"MyComponent\" component={MyComponent} /> <Template let:args> <OuterComponent> <MyComponent /> </OuterComponent> </Template> <Story name=\"Default\" /> ℹ️If you need support for the Template component, the addon provides a feature flag for backward compatibility For more information, see the configuration optionsStory slots to snippets\nWith Svelte's slot deprecation and the introduction of reusable snippets, the addon also introduced support for this feature allowing you to extend the Story component and provide a custom snippet to provide dynamic content to your stories Story accepts a template snippet, allowing you to create dynamic stories without losing reactivity MyComponent stories svelte <script>\nimport { defineMeta } from '@storybook/addon-svelte-csf';\nimport MyComponent from ' /MyComponent svelte';\nconst { Story } = defineMeta({\ncomponent: MyComponent,\n});\n</script>\n<Story name=\"Default\" args={{ exampleProperty: true }}>\n{#snippet template(args)}\n<MyComponent { args}>Reactive component</MyComponent>\n{/snippet}\n</Story>\nTags support\nIf you enabled automatic documentation generation with the autodocs story property, you must replace it with tags This property allows you to categorize and filter stories based on specific criteria and generate documentation based on the tags applied to the stories BeforeAfter MyComponent stories svelte<script>\nimport { Meta, Template, Story } from '@storybook/addon-svelte-csf';\nimport MyComponent from ' /MyComponent svelte';\n</script>\n<Meta title=\"MyComponent\" component={MyComponent} />\n<Template let:args>\n<MyComponent { args} />\n</Template>\n<Story name=\"Default\" autodocs />\nAPI\nParameters\nThis framework contributes the following parameters to Storybook, under the sveltekit_experimental namespace:\nforms\nType: { enhance: () => void }\nProvides mocks for the $app/forms module forms enhance\nType: () => void\nA callback that will be called when a form with use:enhance is submitted",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 822974,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_sveltekit.html",
      "source_type": "documentation"
    },
    "token_count": 479,
    "chunk_index": 5,
    "total_chunks": 8
  },
  {
    "id": "a909a0a786661887377cc11ecff61d9b",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_sveltekit.html",
    "source_type": "documentation",
    "title": "Storybook for SvelteKit | Storybook docs",
    "content": "{ Meta, Template, Story } from '@storybook/addon-svelte-csf'; import MyComponent from ' /MyComponent svelte'; </script> <Meta title=\"MyComponent\" component={MyComponent} /> <Template let:args> <MyComponent { args} /> </Template> <Story name=\"Default\" autodocs /> API Parameters This framework contributes the following parameters to Storybook, under the sveltekit_experimental namespace: forms Type: { enhance: () => void } Provides mocks for the $app/forms module forms enhance Type: () => void A callback that will be called when a form with use:enhance is submittedhrefs\nType: Record<[path: string], (to: string, event: MouseEvent) => void | { callback: (to: string, event: MouseEvent) => void, asRegex : boolean }>\nIf you have an <a /> tag inside your code with the href attribute that matches one or more of the links defined (treated as regex based if the asRegex property is true) the corresponding callback will be called If no matching hrefs are defined, an action will be logged to the Actions panel See Mocking links for an example navigation\nType: See SvelteKit docs\nProvides mocks for the $app/navigation module navigation goto\nType: See SvelteKit docs\nA callback that will be called whenever goto is called If no function is provided, an action will be logged to the Actions panel navigation pushState\nType: See SvelteKit docs\nA callback that will be called whenever pushState is called If no function is provided, an action will be logged to the Actions panel navigation replaceState\nType: See SvelteKit docs\nA callback that will be called whenever replaceState is called If no function is provided, an action will be logged to the Actions panel navigation invalidate\nType: See SvelteKit docs\nA callback that will be called whenever invalidate is called If no function is provided, an action will be logged to the Actions panel navigation invalidateAll\nType: See SvelteKit docs\nA callback that will be called whenever invalidateAll is called If no function is provided, an action will be logged to the Actions panel navigation afterNavigate\nType: See SvelteKit docs\nAn object that will be passed to the afterNavigate function, which will be invoked when the onMount event fires stores\nType: See SvelteKit docs\nProvides mocks for the $app/stores module",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 822974,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_sveltekit.html",
      "source_type": "documentation"
    },
    "token_count": 500,
    "chunk_index": 6,
    "total_chunks": 8
  },
  {
    "id": "110d85aa81de1c410ebccb14794649ff",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_sveltekit.html",
    "source_type": "documentation",
    "title": "Storybook for SvelteKit | Storybook docs",
    "content": "provided, an action will be logged to the Actions panel navigation invalidateAll Type: See SvelteKit docs A callback that will be called whenever invalidateAll is called If no function is provided, an action will be logged to the Actions panel navigation afterNavigate Type: See SvelteKit docs An object that will be passed to the afterNavigate function, which will be invoked when the onMount event fires stores Type: See SvelteKit docs Provides mocks for the $app/stores modulestores navigating\nType: See SvelteKit docs\nA partial version of the navigating store stores page\nType: See SvelteKit docs\nA partial version of the page store stores updated\nType: boolean\nA boolean representing the value of updated (you can also access updated check() which will be a no-op) Options\nYou can pass an options object for additional configuration if needed: storybook/main tsTypescriptimport type { StorybookConfig } from '@storybook/sveltekit';\nconst config: StorybookConfig = {\n// framework: {\nname: '@storybook/sveltekit',\noptions: {\n// },\n},\n};\nexport default config;\nThe available options are:\nbuilder\nType: Record<string, any>\nConfigure options for the framework's builder For Sveltekit, available options can be found in the Vite builder docs Troubleshooting\nError when starting Storybook\nWhen starting Storybook after upgrading to v7 0, it may quit with the following error:\nERR SyntaxError: Identifier '__esbuild_register_import_meta_url__' has already been declared\nThis can occur when manually upgrading from 6 5 to 7 0 To resolve it, you'll need to remove the svelteOptions property in storybook/main js, as that is not supported (and no longer necessary) in Storybook 7+ with SvelteKit Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 822974,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_sveltekit.html",
      "source_type": "documentation"
    },
    "token_count": 439,
    "chunk_index": 7,
    "total_chunks": 8
  },
  {
    "id": "d3b39da17375037cb165a71d293b9608",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
    "source_type": "documentation",
    "title": "Storybook for Next.js | Storybook docs",
    "content": "Storybook for Next js | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Get Started » Frameworks » Next jsDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQStorybook for Next jsStorybook for Next js is a framework that makes it easy to develop and test UI components in isolation for Next js applications It includes:\n🔀 Routing\n🖼 Image optimization\n⤵️ Absolute imports\n🎨 Styling\n🎛 Webpack & Babel config\n💫 and more Requirements\nNext js ≥ 14 1\nGetting started\nIn a project without Storybook\nFollow the prompts after running this command in your Next js project's root directory:\nnpmnpm create storybook@latest\nMore on getting started with Storybook In a project with Storybook\nThis framework is designed to work with Storybook 7+ If you’re not already using v7, upgrade with this command:\nnpmnpx storybook@latest upgrade\nAutomatic migration\nWhen running the upgrade command above, you should get a prompt asking you to migrate to @storybook/nextjs, which should handle everything for you In case that auto-migration does not work for your project, refer to the manual migration below",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1640776,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
      "source_type": "documentation"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 23
  },
  {
    "id": "996bbc130a9f4d62b4e5b9a3bf8b114d",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
    "source_type": "documentation",
    "title": "Storybook for Next.js | Storybook docs",
    "content": "create storybook@latest More on getting started with Storybook In a project with Storybook This framework is designed to work with Storybook 7+ If you’re not already using v7, upgrade with this command: npmnpx storybook@latest upgrade Automatic migration When running the upgrade command above, you should get a prompt asking you to migrate to @storybook/nextjs, which should handle everything for you In case that auto-migration does not work for your project, refer to the manual migration belowManual migration\nFirst, install the framework:\nnpmnpm install --save-dev @storybook/nextjs\nThen, update your storybook/main js|ts to change the framework property: storybook/main tsTypescriptimport type { StorybookConfig } from '@storybook/nextjs';\nconst config: StorybookConfig = {\n// // framework: '@storybook/react-webpack5', 👈 Remove this\nframework: '@storybook/nextjs', // 👈 Add this\n};\nexport default config;\nFinally, if you were using Storybook plugins to integrate with Next js, those are no longer necessary when using this framework and can be removed: storybook/main tsTypescriptimport type { StorybookConfig } from '@storybook/nextjs';\nconst config: StorybookConfig = {\n// addons: [\n// // 👇 These can both be removed\n// 'storybook-addon-next',\n// 'storybook-addon-next-router',\n],\n};\nexport default config;\nWith Vite\nStorybook recommends using the @storybook/nextjs-vite framework, which is based on Vite and removes the need for Webpack and Babel It supports all of the features documented here npmnpm install --save-dev @storybook/nextjs-vite\nThen, update your storybook/main js|ts to change the framework property: storybook/main tsTypescriptimport type { StorybookConfig } from '@storybook/nextjs-vite';\nconst config: StorybookConfig = {\n// // framework: '@storybook/react-webpack5', 👈 Remove this\nframework: '@storybook/nextjs-vite', // 👈 Add this\n};\nexport default config;\nℹ️If your Storybook configuration contains custom Webpack operations in webpackFinal, you will likely need to create equivalents in viteFinal For more information, see the Vite builder documentation Finally, if you were using Storybook plugins to integrate with Next js, those are no longer necessary when using this framework and can be removed: storybook/main",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1640776,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
      "source_type": "documentation"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 23
  },
  {
    "id": "bd23e5713c6c7e5ba9efbd687e3fae4e",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
    "source_type": "documentation",
    "title": "Storybook for Next.js | Storybook docs",
    "content": "'@storybook/nextjs-vite'; const config: StorybookConfig = { // // framework: '@storybook/react-webpack5', 👈 Remove this framework: '@storybook/nextjs-vite', // 👈 Add this }; export default config; ℹ️If your Storybook configuration contains custom Webpack operations in webpackFinal, you will likely need to create equivalents in viteFinal For more information, see the Vite builder documentation Finally, if you were using Storybook plugins to integrate with Next js, those are no longer necessary when using this framework and can be removed: storybook/maintsTypescriptimport type { StorybookConfig } from '@storybook/nextjs-vite';\nconst config: StorybookConfig = {\n// addons: [\n// // 👇 These can both be removed\n// 'storybook-addon-next',\n// 'storybook-addon-next-router',\n],\n};\nexport default config;\nRun the Setup Wizard\nIf all goes well, you should see a setup wizard that will help you get started with Storybook introducing you to the main concepts and features, including how the UI is organized, how to write your first story, and how to test your components' response to various inputs utilizing controls If you skipped the wizard, you can always run it again by adding the path=/onboarding query parameter to the URL of your Storybook instance, provided that the example stories are still available Next js's Image component\nThis framework allows you to use Next js's next/image with no configuration Local images\nLocal images are supported index jsx import Image from 'next/image';\nimport profilePic from ' /public/me png';\nfunction Home() {\nreturn (\n<>\n<h1>My Homepage</h1>\n<Image\nsrc={profilePic}\nalt=\"Picture of the author\"\n// width={500} automatically provided\n// height={500} automatically provided\n// blurDataURL=\" /public/me png\" set to equal the image itself (for this framework)\n// placeholder=\"blur\" // Optional blur-up while loading\n/>\n<p>Welcome to my homepage </p>\n</>\n);\n}\nRemote images\nRemote images are also supported index jsx import Image from 'next/image';\nexport default function Home() {\nreturn (\n<>\n<h1>My Homepage</h1>\n<Image src=\"/me png\" alt=\"Picture of the author\" width={500} height={500} />\n<p>Welcome to my homepage </p>\n</>\n);\n}\nNext js font optimization\nnext/font is partially supported in Storybook",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1640776,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
      "source_type": "documentation"
    },
    "token_count": 499,
    "chunk_index": 2,
    "total_chunks": 23
  },
  {
    "id": "c7fa138e8a9d25a8f84edfdf35620cad",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
    "source_type": "documentation",
    "title": "Storybook for Next.js | Storybook docs",
    "content": "set to equal the image itself (for this framework) // placeholder=\"blur\" // Optional blur-up while loading /> <p>Welcome to my homepage </p> </> ); } Remote images Remote images are also supported index jsx import Image from 'next/image'; export default function Home() { return ( <> <h1>My Homepage</h1> <Image src=\"/me png\" alt=\"Picture of the author\" width={500} height={500} /> <p>Welcome to my homepage </p> </> ); } Next js font optimization next/font is partially supported in StorybookThe packages next/font/google and next/font/local are supported next/font/google\nYou don't have to do anything next/font/google is supported out of the box next/font/local\nFor local fonts you have to define the src property The path is relative to the directory where the font loader function is called If the following component defines your localFont like this:\nsrc/components/MyComponent js import localFont from 'next/font/local';\nconst localRubikStorm = localFont({ src: ' /fonts/RubikStorm-Regular ttf' });\nstaticDir mapping\nℹ️You can safely skip this section if you are using @storybook/nextjs-vite instead of @storybook/nextjs The Vite-based framework takes care of the mapping automatically You have to tell Storybook where the fonts directory is located, via the staticDirs configuration The from value is relative to the storybook directory The to value is relative to the execution context of Storybook Very likely it is the root of your project storybook/main tsTypescript// Replace your-framework with nextjs or nextjs-vite\nimport type { StorybookConfig } from '@storybook/your-framework';\nconst config: StorybookConfig = {\n// staticDirs: [\n{\nfrom: ' /src/components/fonts',\nto: 'src/components/fonts',\n},\n],\n};\nexport default config;\nNot supported features of next/font\nThe following features are not supported (yet) Support for these features might be planned for the future:\nSupport font loaders configuration in next config js\nfallback option\nadjustFontFallback option\npreload option gets ignored Storybook handles Font loading its own way display option gets ignored All fonts are loaded with display set to \"block\" to make Storybook load the font properly Mocking fonts during testing\nOccasionally fetching fonts from Google may fail as part of your Storybook build step",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1640776,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
      "source_type": "documentation"
    },
    "token_count": 488,
    "chunk_index": 3,
    "total_chunks": 23
  },
  {
    "id": "1484b49609b9bebc589e142381149699",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
    "source_type": "documentation",
    "title": "Storybook for Next.js | Storybook docs",
    "content": "features are not supported (yet) Support for these features might be planned for the future: Support font loaders configuration in next config js fallback option adjustFontFallback option preload option gets ignored Storybook handles Font loading its own way display option gets ignored All fonts are loaded with display set to \"block\" to make Storybook load the font properly Mocking fonts during testing Occasionally fetching fonts from Google may fail as part of your Storybook build stepIt is highly recommended to mock these requests, as those failures can cause your pipeline to fail as well Next js supports mocking fonts via a JavaScript module located where the env var NEXT_FONT_GOOGLE_MOCKED_RESPONSES references For example, using GitHub Actions: github/workflows/ci yml - uses: chromaui/action@latest\nenv:\n#👇 the location of mocked fonts to use\nNEXT_FONT_GOOGLE_MOCKED_RESPONSES: ${{ github workspace }}/mocked-google-fonts js\nwith:\nprojectToken: ${{ secrets CHROMATIC_PROJECT_TOKEN }}\ntoken: ${{ secrets GITHUB_TOKEN }}\nYour mocked fonts will look something like this:\nmocked-google-fonts js //👇 Mocked responses of google fonts with the URL as the key\nmodule exports = {\n'https://fonts googleapis com/css family=Inter:wght@400;500;600;800&display=block': `\n/* cyrillic-ext */\n@font-face {\nfont-family: 'Inter';\nfont-style: normal;\nfont-weight: 400;\nfont-display: block;\nsrc: url(https://fonts gstatic com/s/inter/v12/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuLyfAZJhiJ-Ek-_EeAmM woff2) format('woff2');\nunicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n/* more font declarations go here */\n/* latin */\n@font-face {\nfont-family: 'Inter';\nfont-style: normal;\nfont-weight: 400;\nfont-display: block;\nsrc: url(https://fonts gstatic",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1640776,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
      "source_type": "documentation"
    },
    "token_count": 476,
    "chunk_index": 4,
    "total_chunks": 23
  },
  {
    "id": "2eafb4c411b83c49b4f8a32da75c4103",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
    "source_type": "documentation",
    "title": "Storybook for Next.js | Storybook docs",
    "content": "something like this: mocked-google-fonts js //👇 Mocked responses of google fonts with the URL as the key module exports = { 'https://fonts googleapis com/css family=Inter:wght@400;500;600;800&display=block': ` /* cyrillic-ext */ @font-face { font-family: 'Inter'; font-style: normal; font-weight: 400; font-display: block; src: url(https://fonts gstatic com/s/inter/v12/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuLyfAZJhiJ-Ek-_EeAmM woff2) format('woff2'); unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F; } /* more font declarations go here */ /* latin */ @font-face { font-family: 'Inter'; font-style: normal; font-weight: 400; font-display: block; src: url(https://fonts gstaticcom/s/inter/v12/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuLyfAZ9hiJ-Ek-_EeA woff2) format('woff2');\nunicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}`,\n};\nNext js routing\nNext js's router is automatically stubbed for you so that when the router is interacted with, all of its interactions are automatically logged to the Actions panel You should only use next/router in the pages directory In the app directory, it is necessary to use next/navigation",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1640776,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
      "source_type": "documentation"
    },
    "token_count": 490,
    "chunk_index": 5,
    "total_chunks": 23
  },
  {
    "id": "70d1b0dd58ef1a99a6caa43e5eb9146e",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
    "source_type": "documentation",
    "title": "Storybook for Next.js | Storybook docs",
    "content": "url(https://fonts gstaticcom/s/inter/v12/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuLyfAZ9hiJ-Ek-_EeA woff2) format('woff2'); unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }`, }; Next js routing Next js's router is automatically stubbed for you so that when the router is interacted with, all of its interactions are automatically logged to the Actions panel You should only use next/router in the pages directory In the app directory, it is necessary to use next/navigationOverriding defaults\nPer-story overrides can be done by adding a nextjs router property onto the story parameters The framework will shallowly merge whatever you put here into the router RouterBasedComponent stories tsTypescript// Replace your-framework with nextjs or nextjs-vite\nimport type { Meta, StoryObj } from '@storybook/your-framework';\nimport RouterBasedComponent from ' /RouterBasedComponent';\nconst meta = {\ncomponent: RouterBasedComponent,\n} satisfies Meta<typeof RouterBasedComponent>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n// Interact with the links to see the route change events in the Actions panel export const Example: Story = {\nparameters: {\nnextjs: {\nrouter: {\npathname: '/profile/[id]',\nasPath: '/profile/1',\nquery: {\nid: '1',\n},\n},\n},\n},\n};\nThese overrides can also be applied to all stories for a component or all stories in your project Standard parameter inheritance rules apply Default router\nThe default values on the stubbed router are as follows (see globals for more details on how globals work) // Default router\nconst defaultRouter = {\n// The locale should be configured globally: https://storybook js org/docs/essentials/toolbars-and-globals#globals\nlocale: globals",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1640776,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
      "source_type": "documentation"
    },
    "token_count": 497,
    "chunk_index": 6,
    "total_chunks": 23
  },
  {
    "id": "b2cf298764d3ad77e038f5c4980ab2b6",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
    "source_type": "documentation",
    "title": "Storybook for Next.js | Storybook docs",
    "content": "pathname: '/profile/[id]', asPath: '/profile/1', query: { id: '1', }, }, }, }, }; These overrides can also be applied to all stories for a component or all stories in your project Standard parameter inheritance rules apply Default router The default values on the stubbed router are as follows (see globals for more details on how globals work) // Default router const defaultRouter = { // The locale should be configured globally: https://storybook js org/docs/essentials/toolbars-and-globals#globals locale: globalslocale,\nasPath: '/',\nbasePath: '/',\nisFallback: false,\nisLocaleDomain: false,\nisReady: true,\nisPreview: false,\nroute: '/',\npathname: '/',\nquery: {},\n};\nAdditionally, the router object contains all of the original methods (such as push(), replace(), etc ) as mock functions that can be manipulated and asserted on using regular mock APIs To override these defaults, you can use parameters and beforeEach: storybook/preview js|ts // Replace your-framework with nextjs or nextjs-vite\nimport type { Preview } from '@storybook/your-framework';\n// 👇 Must include the ` mock` portion of filename to have mocks typed correctly\nimport { getRouter } from \"@storybook/your-framework/router mock\";\nconst preview: Preview = {\nparameters: {\nnextjs: {\n// 👇 Override the default router properties\nrouter: {\nbasePath: '/app/',\n},\n},\n},\nasync beforeEach() {\n// 👇 Manipulate the default router method mocks\ngetRouter() push mockImplementation(() => {\n/* */\n});\n},\n};\nNext js navigation\nPlease note that next/navigation can only be used in components/pages in the app directory Set nextjs appDirectory to true\nIf your story imports components that use next/navigation, you need to set the parameter nextjs appDirectory to true in for that component's stories:\nNavigationBasedComponent stories tsTypescript// Replace your-framework with nextjs or nextjs-vite\nimport type { Meta, StoryObj } from '@storybook/your-framework';\nimport NavigationBasedComponent from ' /NavigationBasedComponent';\nconst meta = {\ncomponent: NavigationBasedComponent,\nparameters: {\nnextjs: {\nappDirectory: true, // 👈 Set this\n},\n},\n} satisfies Meta<typeof NavigationBasedComponent>;\nexport default meta;\nIf your Next js project uses the app directory for every page (in other words, it does not have a pages directory), you can set the parameter nextjs",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1640776,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
      "source_type": "documentation"
    },
    "token_count": 499,
    "chunk_index": 7,
    "total_chunks": 23
  },
  {
    "id": "346c01626d69aabec1eb27c430629f97",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
    "source_type": "documentation",
    "title": "Storybook for Next.js | Storybook docs",
    "content": "stories: NavigationBasedComponent stories tsTypescript// Replace your-framework with nextjs or nextjs-vite import type { Meta, StoryObj } from '@storybook/your-framework'; import NavigationBasedComponent from ' /NavigationBasedComponent'; const meta = { component: NavigationBasedComponent, parameters: { nextjs: { appDirectory: true, // 👈 Set this }, }, } satisfies Meta<typeof NavigationBasedComponent>; export default meta; If your Next js project uses the app directory for every page (in other words, it does not have a pages directory), you can set the parameter nextjsappDirectory to true in the storybook/preview js|ts file to apply it to all stories storybook/preview tsTypescript// Replace your-framework with nextjs or nextjs-vite\nimport type { Preview } from '@storybook/your-framework';\nconst preview: Preview = {\n// parameters: {\n// nextjs: {\nappDirectory: true,\n},\n},\n};\nexport default preview;\nOverriding defaults\nPer-story overrides can be done by adding a nextjs navigation property onto the story parameters The framework will shallowly merge whatever you put here into the router NavigationBasedComponent stories tsTypescript// Replace your-framework with nextjs or nextjs-vite\nimport type { Meta, StoryObj } from '@storybook/your-framework';\nimport NavigationBasedComponent from ' /NavigationBasedComponent';\nconst meta = {\ncomponent: NavigationBasedComponent,\nparameters: {\nnextjs: {\nappDirectory: true,\n},\n},\n} satisfies Meta<typeof NavigationBasedComponent>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n// Interact with the links to see the route change events in the Actions panel export const Example: Story = {\nparameters: {\nnextjs: {\nnavigation: {\npathname: '/profile',\nquery: {\nuser: '1',\n},\n},\n},\n},\n};\nThese overrides can also be applied to all stories for a component or all stories in your project Standard parameter inheritance rules apply useSelectedLayoutSegment, useSelectedLayoutSegments, and useParams hooks\nThe useSelectedLayoutSegment, useSelectedLayoutSegments, and useParams hooks are supported in Storybook You have to set the nextjs navigation segments parameter to return the segments or the params you want to use NavigationBasedComponent stories tsTypescript// Replace your-framework with nextjs or nextjs-vite\nimport type { Meta, StoryObj } from '@storybook/your-framework';\nimport NavigationBasedComponent from '",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1640776,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
      "source_type": "documentation"
    },
    "token_count": 492,
    "chunk_index": 8,
    "total_chunks": 23
  },
  {
    "id": "619a439c730c3f571992988835450f2b",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
    "source_type": "documentation",
    "title": "Storybook for Next.js | Storybook docs",
    "content": "also be applied to all stories for a component or all stories in your project Standard parameter inheritance rules apply useSelectedLayoutSegment, useSelectedLayoutSegments, and useParams hooks The useSelectedLayoutSegment, useSelectedLayoutSegments, and useParams hooks are supported in Storybook You have to set the nextjs navigation segments parameter to return the segments or the params you want to use NavigationBasedComponent stories tsTypescript// Replace your-framework with nextjs or nextjs-vite import type { Meta, StoryObj } from '@storybook/your-framework'; import NavigationBasedComponent from '/NavigationBasedComponent';\nconst meta = {\ncomponent: NavigationBasedComponent,\nparameters: {\nnextjs: {\nappDirectory: true,\nnavigation: {\nsegments: ['dashboard', 'analytics'],\n},\n},\n},\n} satisfies Meta<typeof NavigationBasedComponent>;\nexport default meta;\nWith the above configuration, the component rendered in the stories would receive the following values from the hooks:\nNavigationBasedComponent js import { useSelectedLayoutSegment, useSelectedLayoutSegments, useParams } from 'next/navigation';\nexport default function NavigationBasedComponent() {\nconst segment = useSelectedLayoutSegment(); // dashboard\nconst segments = useSelectedLayoutSegments(); // [\"dashboard\", \"analytics\"]\nconst params = useParams(); // {}\n// }\nTo use useParams, you have to use a segments array where each element is an array containing two strings The first string is the param key and the second string is the param value NavigationBasedComponent stories tsTypescript// Replace your-framework with nextjs or nextjs-vite\nimport type { Meta, StoryObj } from '@storybook/your-framework';\nimport NavigationBasedComponent from ' /NavigationBasedComponent';\nconst meta = {\ncomponent: NavigationBasedComponent,\nparameters: {\nnextjs: {\nappDirectory: true,\nnavigation: {\nsegments: [\n['slug', 'hello'],\n['framework', 'nextjs'],\n],\n},\n},\n},\n} satisfies Meta<typeof NavigationBasedComponent>;\nexport default meta;\nWith the above configuration, the component rendered in the stories would receive the following values from the hooks:\nParamsBasedComponent js import { useSelectedLayoutSegment, useSelectedLayoutSegments, useParams } from 'next/navigation';\nexport default function ParamsBasedComponent() {\nconst segment = useSelectedLayoutSegment(); // hello\nconst segments = useSelectedLayoutSegments(); // [\"hello\", \"nextjs\"]\nconst params = useParams(); // { slug: \"hello\", framework: \"nextjs\" }",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1640776,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
      "source_type": "documentation"
    },
    "token_count": 486,
    "chunk_index": 9,
    "total_chunks": 23
  },
  {
    "id": "2b679edda080ce9c823bb595fe601c96",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
    "source_type": "documentation",
    "title": "Storybook for Next.js | Storybook docs",
    "content": "navigation: { segments: [ ['slug', 'hello'], ['framework', 'nextjs'], ], }, }, }, } satisfies Meta<typeof NavigationBasedComponent>; export default meta; With the above configuration, the component rendered in the stories would receive the following values from the hooks: ParamsBasedComponent js import { useSelectedLayoutSegment, useSelectedLayoutSegments, useParams } from 'next/navigation'; export default function ParamsBasedComponent() { const segment = useSelectedLayoutSegment(); // hello const segments = useSelectedLayoutSegments(); // [\"hello\", \"nextjs\"] const params = useParams(); // { slug: \"hello\", framework: \"nextjs\" }}\nThese overrides can also be applied to a single story or all stories in your project Standard parameter inheritance rules apply The default value of nextjs navigation segments is [] if not set Default navigation context\nThe default values on the stubbed navigation context are as follows:\n// Default navigation context\nconst defaultNavigationContext = {\npathname: '/',\nquery: {},\n};\nAdditionally, the router object contains all of the original methods (such as push(), replace(), etc ) as mock functions that can be manipulated and asserted on using regular mock APIs To override these defaults, you can use parameters and beforeEach: storybook/preview js|ts // Replace your-framework with nextjs or nextjs-vite\nimport type { Preview } from '@storybook/your-framework';\n// 👇 Must include the ` mock` portion of filename to have mocks typed correctly\nimport { getRouter } from '@storybook/your-framework/navigation mock';\nconst preview: Preview = {\nparameters: {\nnextjs: {\n// 👇 Override the default navigation properties\nnavigation: {\npathname: '/app/',\n},\n},\n},\nasync beforeEach() {\n// 👇 Manipulate the default navigation method mocks\ngetRouter() push mockImplementation(() => {\n/* */\n});\n},\n};\nNext js Head\nnext/head is supported out of the box You can use it in your stories like you would in your Next js application Please keep in mind, that the Head children are placed into the head element of the iframe that Storybook uses to render your stories Sass/Scss\nGlobal Sass/Scss stylesheets are supported without any additional configuration as well Just import them into storybook/preview js|ts storybook/preview js|ts import ' /styles/globals scss';\nThis will automatically include any of your custom Sass configurations in your next config js file next config",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1640776,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
      "source_type": "documentation"
    },
    "token_count": 490,
    "chunk_index": 10,
    "total_chunks": 23
  },
  {
    "id": "a774227347e666ae3f365ee538faf0b0",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
    "source_type": "documentation",
    "title": "Storybook for Next.js | Storybook docs",
    "content": "your stories like you would in your Next js application Please keep in mind, that the Head children are placed into the head element of the iframe that Storybook uses to render your stories Sass/Scss Global Sass/Scss stylesheets are supported without any additional configuration as well Just import them into storybook/preview js|ts storybook/preview js|ts import ' /styles/globals scss'; This will automatically include any of your custom Sass configurations in your next config js file next configjs import * as path from 'path';\nexport default {\n// Any options here are included in Sass compilation for your stories\nsassOptions: {\nincludePaths: [path join(__dirname, 'styles')],\n},\n};\nCSS/Sass/Scss Modules\nCSS modules work as expected src/components/Button jsx // This import will work in Storybook\nimport styles from ' /Button module css';\n// Sass/Scss is also supported\n// import styles from ' /Button module scss'\n// import styles from ' /Button module sass'\nexport function Button() {\nreturn (\n<button type=\"button\" className={styles error}>\nDestroy\n</button>\n);\n}\nStyled JSX\nThe built in CSS-in-JS solution for Next js is styled-jsx, and this framework supports that out of the box too, zero config src/components/HelloWorld jsx // This will work in Storybook\nfunction HelloWorld() {\nreturn (\n<div>\nHello world\n<p>scoped </p>\n<style jsx>{`\np {\ncolor: blue;\n}\ndiv {\nbackground: red;\n}\n@media (max-width: 600px) {\ndiv {\nbackground: blue;\n}\n}\n`}</style>\n<style global jsx>{`\nbody {\nbackground: black;\n}\n`}</style>\n</div>\n);\n}\nexport default HelloWorld;\nYou can use your own babel config too This is an example of how you can customize styled-jsx // babelrc (or whatever config file you use)\n{\n\"presets\": [\n[\n\"next/babel\",\n{\n\"styled-jsx\": {\n\"plugins\": [\"@styled-jsx/plugin-sass\"]\n}\n}\n]\n]\n}\nPostCSS\nNext js lets you customize PostCSS config Thus this framework will automatically handle your PostCSS config for you This allows for cool things like zero-config Tailwind (See Next js' example)\nAbsolute imports\nAbsolute imports from the root directory are supported index jsx|tsx // All good import Button from 'components/button';\n// Also good import styles from 'styles/HomePage module",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1640776,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
      "source_type": "documentation"
    },
    "token_count": 503,
    "chunk_index": 11,
    "total_chunks": 23
  },
  {
    "id": "9040a0170d6af11a5789b1742c28b36b",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
    "source_type": "documentation",
    "title": "Storybook for Next.js | Storybook docs",
    "content": "file you use) { \"presets\": [ [ \"next/babel\", { \"styled-jsx\": { \"plugins\": [\"@styled-jsx/plugin-sass\"] } } ] ] } PostCSS Next js lets you customize PostCSS config Thus this framework will automatically handle your PostCSS config for you This allows for cool things like zero-config Tailwind (See Next js' example) Absolute imports Absolute imports from the root directory are supported index jsx|tsx // All good import Button from 'components/button'; // Also good import styles from 'styles/HomePage modulecss';\nexport default function HomePage() {\nreturn (\n<>\n<h1 className={styles title}>Hello World</h1>\n<Button />\n</>\n);\n}\nAlso OK for global styles in storybook/preview js|ts storybook/preview js|ts import 'styles/globals scss';\n// ⚠️Absolute imports cannot be mocked in stories/tests See the Mocking modules section for more information Module aliases\nModule aliases are also supported index jsx|tsx // All good import Button from '@/components/button';\n// Also good import styles from '@/styles/HomePage module css';\nexport default function HomePage() {\nreturn (\n<>\n<h1 className={styles title}>Hello World</h1>\n<Button />\n</>\n);\n}\nSubpath imports\nAs an alternative to module aliases, you can use subpath imports to import modules This follows Node package standards and has benefits when mocking modules To configure subpath imports, you define the imports property in your project's package json file This property maps the subpath to the actual file path The example below configures subpath imports for all modules in the project:\npackage json {\n\"imports\": {\n\"#*\": [\" /*\", \" /* ts\", \" /* tsx\"]\n}\n}\nℹ️Because subpath imports replace module aliases, you can remove the path aliases from your TypeScript configuration Which can then be used like this:\nindex jsx|tsx import Button from '#components/button';\nimport styles from '#styles/HomePage module css';\nexport default function HomePage() {\nreturn (\n<>\n<h1 className={styles title}>Hello World</h1>\n<Button />\n</>\n);\n}\nMocking modules\nComponents often depend on modules that are imported into the component file These can be from external packages or internal to your project When rendering those components in Storybook or testing them, you may want to mock those modules to control and assert their behavior Built-in mocked modules\nThis framework provides mocks for many of Next",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1640776,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 12,
    "total_chunks": 23
  },
  {
    "id": "f735aa9cd6bcc5781b4ddd9bbfca2e01",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
    "source_type": "documentation",
    "title": "Storybook for Next.js | Storybook docs",
    "content": "css'; export default function HomePage() { return ( <> <h1 className={styles title}>Hello World</h1> <Button /> </> ); } Mocking modules Components often depend on modules that are imported into the component file These can be from external packages or internal to your project When rendering those components in Storybook or testing them, you may want to mock those modules to control and assert their behavior Built-in mocked modules This framework provides mocks for many of Nextjs' internal modules:\n@storybook/nextjs/cache mock\n@storybook/nextjs/headers mock\n@storybook/nextjs/navigation mock\n@storybook/nextjs/router mock\nMocking other modules\nTo mock other modules, use automocking or one of the alternative methods documented in the mocking modules guide Runtime config\nNext js allows for Runtime Configuration which lets you import a handy getConfig function to get certain configuration defined in your next config js file at runtime In the context of Storybook with this framework, you can expect Next js's Runtime Configuration feature to work just fine Note, because Storybook doesn't server render your components, your components will only see what they normally see on the client side (i e they won't see serverRuntimeConfig but will see publicRuntimeConfig) For example, consider the following Next js config:\nnext config js module exports = {\nserverRuntimeConfig: {\nmySecret: 'secret',\nsecondSecret: process env SECOND_SECRET, // Pass through env variables\n},\npublicRuntimeConfig: {\nstaticFolder: '/static',\n},\n};\nCalls to getConfig would return the following object when called within Storybook:\n// Runtime config\n{\n\"serverRuntimeConfig\": {},\n\"publicRuntimeConfig\": {\n\"staticFolder\": \"/static\"\n}\n}\nCustom Webpack config\nℹ️You can safely skip this section if you are using @storybook/nextjs-vite instead of @storybook/nextjs The Vite-based Next js framework does not support Webpack settings Next js comes with a lot of things for free out of the box like Sass support, but sometimes you add custom Webpack config modifications to Next js This framework takes care of most of the Webpack modifications you would want to add If Next js supports a feature out of the box, then that feature will work out of the box in Storybook If Next js doesn't support something out of the box, but makes it easy to configure, then this framework will do the same for that thing for Storybook",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1640776,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
      "source_type": "documentation"
    },
    "token_count": 494,
    "chunk_index": 13,
    "total_chunks": 23
  },
  {
    "id": "55adca1b5df5b60567b0586d15561048",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
    "source_type": "documentation",
    "title": "Storybook for Next.js | Storybook docs",
    "content": "support, but sometimes you add custom Webpack config modifications to Next js This framework takes care of most of the Webpack modifications you would want to add If Next js supports a feature out of the box, then that feature will work out of the box in Storybook If Next js doesn't support something out of the box, but makes it easy to configure, then this framework will do the same for that thing for StorybookAny Webpack modifications desired for Storybook should be made in storybook/main js|ts Note: Not all Webpack modifications are copy/paste-able between next config js and storybook/main js|ts It is recommended to do your research on how to properly make your modification to Storybook's Webpack config and on how Webpack works Below is an example of how to add SVGR support to Storybook with this framework storybook/main tsTypescriptimport type { StorybookConfig } from '@storybook/nextjs';\nconst config: StorybookConfig = {\n// webpackFinal: async (config) => {\nconfig module = config module || {};\nconfig module rules = config module rules || [];\n// This modifies the existing image rule to exclude svg files\n// since you want to handle those files with @svgr/webpack\nconst imageRule = config module rules find((rule) => rule ['test'] test(' svg'));\nif (imageRule) {\nimageRule['exclude'] = /\\ svg$/;\n}\n// Configure svg files to be loaded with @svgr/webpack\nconfig module rules push({\ntest: /\\ svg$/,\nuse: ['@svgr/webpack'],\n});\nreturn config;\n},\n};\nexport default config;\nTypescript\nStorybook handles most Typescript configurations, but this framework adds additional support for Next js's support for Absolute Imports and Module path aliases In short, it takes into account your tsconfig json's baseUrl and paths Thus, a tsconfig json like the one below would work out of the box tsconfig json {\n\"compilerOptions\": {\n\"baseUrl\": \" \",\n\"paths\": {\n\"@/components/*\": [\"components/*\"]\n}\n}\n}\nReact Server Components (RSC)\n(⚠️ Experimental)\nIf your app uses React Server Components (RSC), Storybook can render them in stories in the browser To enable this set the experimentalRSC feature flag in your storybook/main js|ts config: storybook/main",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1640776,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
      "source_type": "documentation"
    },
    "token_count": 480,
    "chunk_index": 14,
    "total_chunks": 23
  },
  {
    "id": "9ff88a5d125351bada1cac081c790af3",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
    "source_type": "documentation",
    "title": "Storybook for Next.js | Storybook docs",
    "content": "it takes into account your tsconfig json's baseUrl and paths Thus, a tsconfig json like the one below would work out of the box tsconfig json { \"compilerOptions\": { \"baseUrl\": \" \", \"paths\": { \"@/components/*\": [\"components/*\"] } } } React Server Components (RSC) (⚠️ Experimental) If your app uses React Server Components (RSC), Storybook can render them in stories in the browser To enable this set the experimentalRSC feature flag in your storybook/main js|ts config: storybook/maintsTypescript// Replace your-framework with nextjs or nextjs-vite\nimport type { StorybookConfig } from '@storybook/your-framework';\nconst config: StorybookConfig = {\n// features: {\nexperimentalRSC: true,\n},\n};\nexport default config;\nSetting this flag automatically wraps your story in a Suspense wrapper, which is able to render asynchronous components in NextJS's version of React If this wrapper causes problems in any of your existing stories, you can selectively disable it using the react rsc parameter at the global/component/story level:\nMyServerComponent stories tsTypescript// Replace your-framework with nextjs or nextjs-vite\nimport type { Meta, StoryObj } from '@storybook/your-framework';\nimport MyServerComponent from ' /MyServerComponent';\nconst meta = {\ncomponent: MyServerComponent,\nparameters: {\nreact: { rsc: false },\n},\n} satisfies Meta<typeof MyServerComponent>;\nexport default meta;\nNote that wrapping your server components in Suspense does not help if your server components access server-side resources like the file system or Node-specific libraries To work around this, you'll need to mock out your data access layer using Webpack aliases or an addon like storybook-addon-module-mock If your server components access data via the network, we recommend using the MSW Storybook Addon to mock network requests In the future we will provide better mocking support in Storybook and support for Server Actions Notes for Yarn v2 and v3 users\nIf you're using Yarn v2 or v3, you may run into issues where Storybook can't resolve style-loader or css-loader For example, you might get errors like:\nModule not found: Error: Can't resolve 'css-loader'\nModule not found: Error: Can't resolve 'style-loader'\nThis is because those versions of Yarn have different package resolution rules than Yarn v1 x",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1640776,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 15,
    "total_chunks": 23
  },
  {
    "id": "916dc8c119f3631ae43fdaab39f13cb0",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
    "source_type": "documentation",
    "title": "Storybook for Next.js | Storybook docs",
    "content": "we will provide better mocking support in Storybook and support for Server Actions Notes for Yarn v2 and v3 users If you're using Yarn v2 or v3, you may run into issues where Storybook can't resolve style-loader or css-loader For example, you might get errors like: Module not found: Error: Can't resolve 'css-loader' Module not found: Error: Can't resolve 'style-loader' This is because those versions of Yarn have different package resolution rules than Yarn v1 xIf this is the case for you, please install the package directly FAQ\nStories for pages/components which fetch data\nNext js pages can fetch data directly within server components in the app directory, which often include module imports that only run in a node environment This does not (currently) work within Storybook, because if you import from a Next js page file containing those node module imports in your stories, your Storybook's Webpack will crash because those modules will not run in a browser To get around this, you can extract the component in your page file into a separate file and import that pure component in your stories Or, if that's not feasible for some reason, you can polyfill those modules in your Storybook's webpackFinal configuration Before\napp/my-page/index jsx async function getData() {\nconst res = await fetch( );\n// }\n// Using this component in your stories will break the Storybook build\nexport default async function Page() {\nconst data = await getData();\nreturn // }\nAfter\napp/my-page/index jsx // Use this component in your stories\nimport MyPage from ' /components/MyPage';\nasync function getData() {\nconst res = await fetch( );\n// }\nexport default async function Page() {\nconst data = await getData();\nreturn <MyPage { data} />;\n}\nStatically imported images won't load\nMake sure you are treating image imports the same way you treat them when using next/image in normal development Before using this framework, image imports would import the raw path to the image (e g 'static/media/stories/assets/logo svg') Now image imports work the \"Next js way\", meaning that you now get an object when importing an image For example:\n// Image import object\n{\n\"src\": \"static/media/stories/assets/logo svg\",\n\"height\": 48,\n\"width\": 48,\n\"blurDataURL\": \"static/media/stories/assets/logo",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1640776,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
      "source_type": "documentation"
    },
    "token_count": 487,
    "chunk_index": 16,
    "total_chunks": 23
  },
  {
    "id": "a244bd25b4a19349731c6cd0c7b48e8f",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
    "source_type": "documentation",
    "title": "Storybook for Next.js | Storybook docs",
    "content": "imported images won't load Make sure you are treating image imports the same way you treat them when using next/image in normal development Before using this framework, image imports would import the raw path to the image (e g 'static/media/stories/assets/logo svg') Now image imports work the \"Next js way\", meaning that you now get an object when importing an image For example: // Image import object { \"src\": \"static/media/stories/assets/logo svg\", \"height\": 48, \"width\": 48, \"blurDataURL\": \"static/media/stories/assets/logosvg\"\n}\nTherefore, if something in Storybook isn't showing the image properly, make sure you expect the object to be returned from an import instead of only the asset path See local images for more detail on how Next js treats static image imports Module not found: Error: Can't resolve package name\nYou might get this if you're using Yarn v2 or v3 See Notes for Yarn v2 and v3 users for more details What if I'm using the Vite builder Storybook provides a Vite-based framework for Next js Follow the installation instructions and replace all instances of @storybook/nextjs with @storybook/nextjs-vite Error: You are importing avif images, but you don't have sharp installed You have to install sharp in order to use image optimization features in Next js sharp is a dependency of Next js's image optimization feature If you see this error, you need to install sharp in your project npm install sharp\nyarn add sharp\npnpm add sharp\nYou can refer to the Install sharp to Use Built-In Image Optimization in the Next js documentation for more information API\nModules\nThe @storybook/nextjs package exports several modules that enable you to mock Next js's internal behavior @storybook/nextjs/export-mocks\nType: { getPackageAliases: ({ useESM : boolean }) => void }\ngetPackageAliases is a helper for generating the aliases needed to set up portable stories jest config ts import type { Config } from 'jest';\nimport nextJest from 'next/jest js';\n// 👇 Import the utility function\nimport { getPackageAliases } from '@storybook/nextjs/export-mocks';\nconst createJestConfig = nextJest({\n// Provide the path to your Next js app to load next config js and env files in your test environment\ndir: '",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1640776,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
      "source_type": "documentation"
    },
    "token_count": 493,
    "chunk_index": 17,
    "total_chunks": 23
  },
  {
    "id": "cfa08773b3799d41573fb9d8d8ce91d3",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
    "source_type": "documentation",
    "title": "Storybook for Next.js | Storybook docs",
    "content": "({ useESM : boolean }) => void } getPackageAliases is a helper for generating the aliases needed to set up portable stories jest config ts import type { Config } from 'jest'; import nextJest from 'next/jest js'; // 👇 Import the utility function import { getPackageAliases } from '@storybook/nextjs/export-mocks'; const createJestConfig = nextJest({ // Provide the path to your Next js app to load next config js and env files in your test environment dir: '/',\n});\nconst config: Config = {\ntestEnvironment: 'jsdom',\n// rest of Jest config\nmoduleNameMapper: { getPackageAliases(), // 👈 Add the utility as mapped module names\n},\n};\nexport default createJestConfig(config);\n@storybook/nextjs/cache mock\nType: typeof import('next/cache')\nThis module exports mocked implementations of the next/cache module's exports You can use it to create your own mock implementations or assert on mock calls in a story's play function MyForm stories tsTypescript// Replace your-framework with nextjs or nextjs-vite\nimport type { Meta, StoryObj } from '@storybook/your-framework';\nimport { expect } from 'storybook/test';\n// 👇 Must include the ` mock` portion of filename to have mocks typed correctly\nimport { revalidatePath } from '@storybook/your-framework/cache mock';\nimport MyForm from ' /my-form';\nconst meta = {\ncomponent: MyForm,\n} satisfies Meta<typeof MyForm>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const Submitted: Story = {\nasync play({ canvas, userEvent }) {\nconst submitButton = canvas getByRole('button', { name: /submit/i });\nawait userEvent click(saveButton);\n// 👇 Use any mock assertions on the function\nawait expect(revalidatePath) toHaveBeenCalledWith('/');\n},\n};\n@storybook/nextjs/headers mock\nType: cookies, headers and draftMode from Next js\nThis module exports writable mocked implementations of the next/headers module's exports You can use it to set up cookies or headers that are read in your story, and to later assert that they have been called Next js's default headers() export is read-only, but this module exposes methods allowing you to write to the headers:\nheaders() append(name: string, value: string): Appends the value to the header if it exists already headers() delete(name: string): Deletes the header\nheaders()",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1640776,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
      "source_type": "documentation"
    },
    "token_count": 501,
    "chunk_index": 18,
    "total_chunks": 23
  },
  {
    "id": "70f6402cd132623323e070fc856d308d",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
    "source_type": "documentation",
    "title": "Storybook for Next.js | Storybook docs",
    "content": "module exports writable mocked implementations of the next/headers module's exports You can use it to set up cookies or headers that are read in your story, and to later assert that they have been called Next js's default headers() export is read-only, but this module exposes methods allowing you to write to the headers: headers() append(name: string, value: string): Appends the value to the header if it exists already headers() delete(name: string): Deletes the header headers()set(name: string, value: string): Sets the header to the value provided For cookies, you can use the existing API to write them E g , cookies() set('firstName', 'Jane') Because headers(), cookies() and their sub-functions are all mocks you can use any mock utilities in your stories, like headers() getAll mock calls MyForm stories tsTypescript// Replace your-framework with nextjs or nextjs-vite\nimport type { Meta, StoryObj } from '@storybook/your-framework';\nimport { expect } from 'storybook/test';\n// 👇 Must include the ` mock` portion of filename to have mocks typed correctly\nimport { cookies, headers } from '@storybook/your-framework/headers mock';\nimport MyForm from ' /my-form';\nconst meta = {\ncomponent: MyForm,\n} satisfies Meta<typeof MyForm>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const LoggedInEurope: Story = {\nasync beforeEach() {\n// 👇 Set mock cookies and headers ahead of rendering\ncookies() set('username', 'Sol');\nheaders() set('timezone', 'Central European Summer Time');\n},\nasync play() {\n// 👇 Assert that your component called the mocks\nawait expect(cookies() get) toHaveBeenCalledOnce();\nawait expect(cookies() get) toHaveBeenCalledWith('username');\nawait expect(headers() get) toHaveBeenCalledOnce();\nawait expect(cookies() get) toHaveBeenCalledWith('timezone');\n},\n};\n@storybook/nextjs/navigation mock\nType: typeof import('next/navigation') & getRouter: () => ReturnType<typeof import('next/navigation')['useRouter']>\nThis module exports mocked implementations of the next/navigation module's exports It also exports a getRouter function that returns a mocked version of Next js's router object from useRouter, allowing the properties to be manipulated and asserted on You can use it mock implementations or assert on mock calls in a story's play function MyForm stories",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1640776,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
      "source_type": "documentation"
    },
    "token_count": 489,
    "chunk_index": 19,
    "total_chunks": 23
  },
  {
    "id": "56c03328ad01b04a4a99b2576a5e3582",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
    "source_type": "documentation",
    "title": "Storybook for Next.js | Storybook docs",
    "content": "await expect(headers() get) toHaveBeenCalledOnce(); await expect(cookies() get) toHaveBeenCalledWith('timezone'); }, }; @storybook/nextjs/navigation mock Type: typeof import('next/navigation') & getRouter: () => ReturnType<typeof import('next/navigation')['useRouter']> This module exports mocked implementations of the next/navigation module's exports It also exports a getRouter function that returns a mocked version of Next js's router object from useRouter, allowing the properties to be manipulated and asserted on You can use it mock implementations or assert on mock calls in a story's play function MyForm storiestsTypescript// Replace your-framework with nextjs or nextjs-vite\nimport type { Meta, StoryObj } from '@storybook/your-framework';\nimport { expect } from 'storybook/test';\n// 👇 Must include the ` mock` portion of filename to have mocks typed correctly\nimport { redirect, getRouter } from '@storybook/your-framework/navigation mock';\nimport MyForm from ' /my-form';\nconst meta = {\ncomponent: MyForm,\nparameters: {\nnextjs: {\n// 👇 As in the Next js application, next/navigation only works using App Router\nappDirectory: true,\n},\n},\n} satisfies Meta<typeof MyForm>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const Unauthenticated: Story = {\nasync play() {\n// 👇 Assert that your component called redirect()\nawait expect(redirect) toHaveBeenCalledWith('/login', 'replace');\n},\n};\nexport const GoBack: Story = {\nasync play({ canvas, userEvent }) {\nconst backBtn = await canvas findByText('Go back');\nawait userEvent click(backBtn);\n// 👇 Assert that your component called back()\nawait expect(getRouter() back) toHaveBeenCalled();\n},\n};\n@storybook/nextjs/router mock\nType: typeof import('next/router') & getRouter: () => ReturnType<typeof import('next/router')['useRouter']>\nThis module exports mocked implementations of the next/router module's exports It also exports a getRouter function that returns a mocked version of Next js's router object from useRouter, allowing the properties to be manipulated and asserted on You can use it mock implementations or assert on mock calls in a story's play function MyForm stories tsTypescript// Replace your-framework with nextjs or nextjs-vite\nimport type { Meta, StoryObj } from '@storybook/your-framework';\nimport { expect } from 'storybook/test';\n// 👇 Must include the `",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1640776,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
      "source_type": "documentation"
    },
    "token_count": 504,
    "chunk_index": 20,
    "total_chunks": 23
  },
  {
    "id": "c3b6f1630b7de500029b67d74e94d8e5",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
    "source_type": "documentation",
    "title": "Storybook for Next.js | Storybook docs",
    "content": "the next/router module's exports It also exports a getRouter function that returns a mocked version of Next js's router object from useRouter, allowing the properties to be manipulated and asserted on You can use it mock implementations or assert on mock calls in a story's play function MyForm stories tsTypescript// Replace your-framework with nextjs or nextjs-vite import type { Meta, StoryObj } from '@storybook/your-framework'; import { expect } from 'storybook/test'; // 👇 Must include the `mock` portion of filename to have mocks typed correctly\nimport { getRouter } from '@storybook/your-framework/router mock';\nimport MyForm from ' /my-form';\nconst meta = {\ncomponent: MyForm,\n} satisfies Meta<typeof MyForm>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const GoBack: Story = {\nasync play({ canvas, userEvent }) {\nconst backBtn = await canvas findByText('Go back');\nawait userEvent click(backBtn);\n// 👇 Assert that your component called back()\nawait expect(getRouter() back) toHaveBeenCalled();\n},\n};\nOptions\nYou can pass an options object for additional configuration if needed: storybook/main js import * as path from 'path';\n// Replace your-framework with nextjs or nextjs-vite\nexport default {\n// framework: {\nname: '@storybook/your-framework',\noptions: {\nimage: {\nloading: 'eager',\n},\nnextConfigPath: path resolve(__dirname, ' /next config js'),\n},\n},\n};\nThe available options are:\nbuilder\nType: Record<string, any>\nConfigure options for the framework's builder For Next js, available options can be found in the Webpack builder docs image\nType: object\nProps to pass to every instance of next/image See next/image docs for more details nextConfigPath\nType: string\nThe absolute path to the next config js file This is necessary if you have a custom next config js file that is not in the root directory of your project Parameters\nThis framework contributes the following parameters to Storybook, under the nextjs namespace:\nappDirectory\nType: boolean\nDefault: false\nIf your story imports components that use next/navigation, you need to set the parameter nextjs appDirectory to true Because this is a parameter, you can apply it to a single story, all stories for a component, or every story in your Storybook See Next js Navigation for more details navigation\nType:\n{\nasPath : string;\npathname",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1640776,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
      "source_type": "documentation"
    },
    "token_count": 502,
    "chunk_index": 21,
    "total_chunks": 23
  },
  {
    "id": "d38bf7a14de1294169c629c85bdd7929",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
    "source_type": "documentation",
    "title": "Storybook for Next.js | Storybook docs",
    "content": "your project Parameters This framework contributes the following parameters to Storybook, under the nextjs namespace: appDirectory Type: boolean Default: false If your story imports components that use next/navigation, you need to set the parameter nextjs appDirectory to true Because this is a parameter, you can apply it to a single story, all stories for a component, or every story in your Storybook See Next js Navigation for more details navigation Type: { asPath : string; pathname: string;\nquery : Record<string, string>;\nsegments : (string | [string, string])[];\n}\nDefault value:\n{\nsegments: [];\n}\nThe router object that is passed to the next/navigation context See Next js's navigation docs for more details router\nType:\n{\nasPath : string;\npathname : string;\nquery : Record<string, string>;\n}\nThe router object that is passed to the next/router context See Next js's router docs for more details Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1640776,
      "relative_path": "documentation\\storybook\\_docs_get-started_frameworks_nextjs.html",
      "source_type": "documentation"
    },
    "token_count": 256,
    "chunk_index": 22,
    "total_chunks": 23
  },
  {
    "id": "3c00aadd8fc4234759e9ff07eaf44507",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_install.html",
    "source_type": "documentation",
    "title": "Install Storybook | Storybook docs",
    "content": "Install Storybook | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Get Started » InstallDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQInstall StorybookReactVueAngularWeb ComponentsMoreUse the Storybook CLI to install it in a single command Run this inside your project’s root directory:\nnpmnpm create storybook@latest\nInstall a specific versionFor installing Storybook 8 3 or newer, you can use the create command with a specific version: npmnpm create storybook@8 3To install a Storybook version prior to 8 3, you must use the init command: npmnpx storybook@8 2 initFor either command, you can specify either an npm tag such as latest or next, or a (partial) version number For example:\nstorybook@latest init will initialize the latest version\nstorybook@7 6 10 init will initialize 7 6 10\nstorybook@7 init will initialize the newest 7 x x version\nStorybook will look into your project's dependencies during its install process and provide you with the best configuration available The command above will make the following changes to your local environment:\n📦 Install the required dependencies 🛠 Setup the necessary scripts to run and build Storybook 🛠 Add the default Storybook configuration 📝 Add some boilerplate stories to get you started",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 623803,
      "relative_path": "documentation\\storybook\\_docs_get-started_install.html",
      "source_type": "documentation"
    },
    "token_count": 508,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "74533fc93faad27c76ad6490e76541bb",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_install.html",
    "source_type": "documentation",
    "title": "Install Storybook | Storybook docs",
    "content": "will initialize 7 6 10 storybook@7 init will initialize the newest 7 x x version Storybook will look into your project's dependencies during its install process and provide you with the best configuration available The command above will make the following changes to your local environment: 📦 Install the required dependencies 🛠 Setup the necessary scripts to run and build Storybook 🛠 Add the default Storybook configuration 📝 Add some boilerplate stories to get you started📡 Set up telemetry to help us improve Storybook Read more about it here Watch a video tutorial\nProject requirements\nStorybook is designed to work with a variety of frameworks and environments If your project is using one of the packages listed here, please ensure that you have the following versions installed:\nAngular 18+\nLit 3+\nNext js 14+\nNode js 20+\nnpm 10+\npnpm 9+\nPreact 8+\nReact Native 0 72+\nReact Native Web 0 19+\nSvelte 5+\nSvelteKit 1+\nTypeScript 4 9+\nVite 5+\nVitest 3+\nVue 3+\nWebpack 5+\nYarn 4+\nAdditionally, the Storybook app supports the following browsers:\nChrome 131+\nEdge 134+\nFirefox 136+\nSafari 18 3+\nOpera 117+\nHow do I use Storybook with older browsers You can use Storybook with older browsers in two ways:\nUse a version of Storybook prior to 9 0 0, which will have less strict requirements Develop or build your Storybook in \"preview-only\" mode, which can be used in older, unsupported browsers Run the Setup WizardIf all goes well, you should see a setup wizard that will help you get started with Storybook introducing you to the main concepts and features, including how the UI is organized, how to write your first story, and how to test your components' response to various inputs utilizing controls If you skipped the wizard, you can always run it again by adding the path=/onboarding query parameter to the URL of your Storybook instance, provided that the example stories are still available Start Storybook\nStorybook comes with a built-in development server featuring everything you need for project development Depending on your system configuration, running the storybook command will start the local development server, output the address for you, and automatically open the address in a new browser tab where a welcome screen greets you",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 623803,
      "relative_path": "documentation\\storybook\\_docs_get-started_install.html",
      "source_type": "documentation"
    },
    "token_count": 502,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "aae40564fdaf1718caff3ce414919a8a",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_install.html",
    "source_type": "documentation",
    "title": "Install Storybook | Storybook docs",
    "content": "run it again by adding the path=/onboarding query parameter to the URL of your Storybook instance, provided that the example stories are still available Start Storybook Storybook comes with a built-in development server featuring everything you need for project development Depending on your system configuration, running the storybook command will start the local development server, output the address for you, and automatically open the address in a new browser tab where a welcome screen greets younpmnpm run storybook\nℹ️Storybook collects completely anonymous data to help us improve user experience Participation is optional, and you may opt-out if you'd not like to share any information There are some noteworthy items here:\nA collection of useful links for more in-depth configuration and customization options you have at your disposal A second set of links for you to expand your Storybook knowledge and get involved with the ever-growing Storybook community A few example stories to get you started TroubleshootingRun Storybook with other package managersThe Storybook CLI includes support for the industry's popular package managers (e g , Yarn, npm, and pnpm) automatically detecting the one you are using when you initialize Storybook However, if you want to use a specific package manager as the default, add the --package-manager flag to the installation command For example: npmnpm create storybook@latest --package-manager=npmThe CLI doesn't detect my frameworkIf you're working with a custom environment setup or need to set up Storybook manually, you can use the --type flag to specify the framework you need to use Listed below are the supported frameworks and examples of how to use them:FrameworkTypeAngularangularEmberemberHTMLhtmlNext jsnextjsPreactpreactQwikqwikReactreactServerserverSolidsolidSveltesvelteVue 3vue3Web Componentsweb_components npmnpm create storybook@latest --type solidYarn Plug'n'Play (PnP) support with StorybookIf you've enabled Storybook in a project running on a new version of Yarn with Plug'n'Play (PnP) enabled, you may notice that it will generate node_modules with some additional files and folders This is a known constraint as Storybook relies on some directories (e g , cache) to store cache files and other data to improve performance and faster builds You can safely ignore these files and folders, adjusting your gitignore file to exclude them from the version control you're using",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 623803,
      "relative_path": "documentation\\storybook\\_docs_get-started_install.html",
      "source_type": "documentation"
    },
    "token_count": 491,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "a61cafbbbcf3adcadec515709de08cfc",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_install.html",
    "source_type": "documentation",
    "title": "Install Storybook | Storybook docs",
    "content": "a project running on a new version of Yarn with Plug'n'Play (PnP) enabled, you may notice that it will generate node_modules with some additional files and folders This is a known constraint as Storybook relies on some directories (e g , cache) to store cache files and other data to improve performance and faster builds You can safely ignore these files and folders, adjusting your gitignore file to exclude them from the version control you're usingRun Storybook with Webpack 4If you previously installed Storybook in a project that uses Webpack 4, it will no longer work This is because Storybook now uses Webpack 5 by default To solve this issue, we recommend you upgrade your project to Webpack 5 and then run the following command to migrate your project to the latest version of Storybook: npmnpx storybook@latest automigrateStorybook doesn't work with an empty directoryBy default, Storybook is configured to detect whether you're initializing it on an empty directory or an existing project However, if you attempt to initialize Storybook, select a Vite-based framework (e g , React) in a directory that only contains a package json file, you may run into issues with Yarn Modern This is due to how Yarn handles peer dependencies and how Storybook is set up to work with Vite-based frameworks, as it requires the Vite package to be installed To solve this issue, you must install Vite manually and initialize Storybook The installation process seems flaky and keeps failingIf you're still running into some issues during the installation process, we encourage you to check out the following resources:\nStorybook's React Vite framework documentation for more information on how to set up Storybook in your React project with Vite Storybook's React Webpack framework documentation for more information on how to set up Storybook in your React project with Webpack 5 Storybook's help documentation to contact the community and ask for help Now that you have successfully installed Storybook and understood how it works, let's continue where you left off in the setup wizard and delve deeper into writing stories Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 623803,
      "relative_path": "documentation\\storybook\\_docs_get-started_install.html",
      "source_type": "documentation"
    },
    "token_count": 497,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "2d5e5e0e20640e17f49933b6c27d8a71",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_whats-a-story.html",
    "source_type": "documentation",
    "title": "What's a story? | Storybook docs",
    "content": "What's a story | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Get Started » What's a story DocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQWhat's a story ReactVueAngularWeb ComponentsMoreA story captures the rendered state of a UI component Developers write multiple stories per component that describe all the “interesting” states a component can support When you installed Storybook, the CLI created example components that demonstrate the types of components you can build with Storybook: Button, Header, and Page Each example component has a set of stories that show the states it supports You can browse the stories in the UI and see the code behind them in files that end with stories js|ts The stories are written in Component Story Format (CSF), an ES6 modules-based standard for writing component examples Let’s start with the Button component A story is an object that describes how to render the component in question Here’s how to render Button in the “primary” state and export a story called Primary Button stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { Button } from '",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 634925,
      "relative_path": "documentation\\storybook\\_docs_get-started_whats-a-story.html",
      "source_type": "documentation"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "b32b35849614964504ef80e910a753f0",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_whats-a-story.html",
    "source_type": "documentation",
    "title": "What's a story? | Storybook docs",
    "content": "Format (CSF), an ES6 modules-based standard for writing component examples Let’s start with the Button component A story is an object that describes how to render the component in question Here’s how to render Button in the “primary” state and export a story called Primary Button stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework'; import { Button } from '/Button';\nconst meta = {\ncomponent: Button,\n} satisfies Meta<typeof Button>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const Primary: Story = {\nargs: {\nprimary: true,\nlabel: 'Button',\n},\n};\nView the rendered Button by clicking on it in the Storybook sidebar Note how the values specified in args are used to render the component and match those represented in the Controls panel Using args in your stories has additional benefits:\nButton's callbacks are logged into the Actions panel Click to try it Button's arguments are dynamically editable in the Controls panel Adjust the controls Working with stories\nStorybook makes it easy to work on one component in one state (aka a story) at a time When you edit a component's code or its stories, Storybook will instantly re-render in the browser No need to refresh manually Create a new story\nIf you're working on a component that does not yet have any stories, you can click the ➕ button in the sidebar to search for your component and have a basic story created for you You can also create a story file for your new story We recommend copy/pasting an existing story file next to the component source file, then adjusting it for your component If you're working on a component that already has other stories, you can use the Controls panel to adjust the value of a control and then save those changes as a new story Or, if you prefer, edit the story file's code to add a new named export for your story:\nEdit a story\nUsing the Controls panel, update a control's value for a story You can then save the changes to the story and the story file's code will be updated for you Of course, you can always update the story's code directly too:\nStories are also helpful for checking that UI continues to look correct as you make changes The Button component has four stories that show it in different use cases",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 634925,
      "relative_path": "documentation\\storybook\\_docs_get-started_whats-a-story.html",
      "source_type": "documentation"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "91fc1f5c28296950f964e31f6a7aad45",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_whats-a-story.html",
    "source_type": "documentation",
    "title": "What's a story? | Storybook docs",
    "content": "for your story: Edit a story Using the Controls panel, update a control's value for a story You can then save the changes to the story and the story file's code will be updated for you Of course, you can always update the story's code directly too: Stories are also helpful for checking that UI continues to look correct as you make changes The Button component has four stories that show it in different use casesView those stories now to confirm that your change to Primary didn’t introduce unintentional bugs in the other stories Checking component’s stories as you develop helps prevent accidental regressions Tools that integrate with Storybook can automate this for you Now that we’ve seen the basic anatomy of a story let’s see how we use Storybook’s UI to develop stories Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 634925,
      "relative_path": "documentation\\storybook\\_docs_get-started_whats-a-story.html",
      "source_type": "documentation"
    },
    "token_count": 221,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "1bda2fee459d254345729d0404a6c402",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_setup.html",
    "source_type": "documentation",
    "title": "Setup Storybook | Storybook docs",
    "content": "Setup Storybook | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Get Started » SetupDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQSetup StorybookReactVueAngularWeb ComponentsMoreNow that you’ve learned what stories are and how to browse them, let’s demo working on one of your components Pick a simple component from your project, like a Button, and write a stories js, stories ts, or stories svelte file to go along with it It might look something like this:\nYourComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { YourComponent } from ' /YourComponent';\n//👇 This default export determines where your story goes in the story list\nconst meta = {\ncomponent: YourComponent,\n} satisfies Meta<typeof YourComponent>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const FirstStory: Story = {\nargs: {\n//👇 The args you need here will depend on your component\n},\n};\nGo to your Storybook to view the rendered component It’s OK if it looks a bit unusual right now Depending on your technology stack, you also might need to configure the Storybook environment further",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 674111,
      "relative_path": "documentation\\storybook\\_docs_get-started_setup.html",
      "source_type": "documentation"
    },
    "token_count": 502,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "f7fccf1ff43186602688c908ac8660c1",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_setup.html",
    "source_type": "documentation",
    "title": "Setup Storybook | Storybook docs",
    "content": "the story list const meta = { component: YourComponent, } satisfies Meta<typeof YourComponent>; export default meta; type Story = StoryObj<typeof meta>; export const FirstStory: Story = { args: { //👇 The args you need here will depend on your component }, }; Go to your Storybook to view the rendered component It’s OK if it looks a bit unusual right now Depending on your technology stack, you also might need to configure the Storybook environment furtherRender component styles\nStorybook isn’t opinionated about how you generate or load CSS It renders whatever DOM elements you provide But sometimes, things won’t “look right” out of the box You may have to configure your CSS tooling for Storybook’s rendering environment Here are some setup guides for popular tools in the community Tailwind\nMaterial UI\nVuetify\nStyled Components\nEmotion\nSass\nBootstrap\nLess\nVanilla-extract\nDon't see the tool that you're looking for Check out the styling and css page for more details Configure Storybook for your stack\nStorybook comes with a permissive default configuration It attempts to customize itself to fit your setup But it’s not foolproof Your project may have additional requirements before components can be rendered in isolation This warrants customizing configuration further There are three broad categories of configuration you might need Build configuration like Webpack and BabelIf you see errors on the CLI when you run the yarn storybook command, you likely need to make changes to Storybook’s build configuration Here are some things to try:\nPresets bundle common configurations for various technologies into Storybook In particular, presets exist for Create React App and Ant Design Specify a custom Babel configuration for Storybook Storybook automatically tries to use your project’s config if it can Adjust the Webpack configuration that Storybook uses Try patching in your own configuration if needed Runtime configurationIf Storybook builds but you see an error immediately when connecting to it in the browser, in that case, chances are one of your input files is not compiling/transpiling correctly to be interpreted by the browser Storybook supports evergreen browsers, but you may need to check the Babel and Webpack settings (see above) to ensure your component code works correctly Component contextIf a particular story has a problem rendering, often it means your component expects a specific environment is available to the component",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 674111,
      "relative_path": "documentation\\storybook\\_docs_get-started_setup.html",
      "source_type": "documentation"
    },
    "token_count": 474,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "6ed2ea6972ca9ea28951ce8277bded59",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_setup.html",
    "source_type": "documentation",
    "title": "Setup Storybook | Storybook docs",
    "content": "error immediately when connecting to it in the browser, in that case, chances are one of your input files is not compiling/transpiling correctly to be interpreted by the browser Storybook supports evergreen browsers, but you may need to check the Babel and Webpack settings (see above) to ensure your component code works correctly Component contextIf a particular story has a problem rendering, often it means your component expects a specific environment is available to the componentA common frontend pattern is for components to assume that they render in a specific “context” with parent components higher up the rendering hierarchy (for instance, theme providers) Use decorators to “wrap” every story in the necessary context providers The storybook/preview js|ts file allows you to customize how components render in Canvas, the preview iframe See how you can wrap every component rendered in Storybook with Styled Components ThemeProvider, Vue's Fontawesome, or with an Angular theme provider component in the example below storybook/preview tsxTypescriptimport React from 'react';\n// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Preview } from '@storybook/your-framework';\nimport { ThemeProvider } from 'styled-components';\nconst preview: Preview = {\ndecorators: [\n(Story) => (\n<ThemeProvider theme=\"default\">\n{/* 👇 Decorators in Storybook also accept a function Replace <Story/> with Story() to enable it  */}\n<Story />\n</ThemeProvider>\n),\n],\n};\nexport default preview;\nLoad assets and resources\nWe recommend serving external resources and assets requested in your components statically with Storybook It ensures that assets are always available to your stories Read our documentation to learn how to host static files with Storybook Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 674111,
      "relative_path": "documentation\\storybook\\_docs_get-started_setup.html",
      "source_type": "documentation"
    },
    "token_count": 423,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "eb9bc147e0fa3570028e370d4eca912a",
    "source_file": "corpus\\documentation\\storybook\\_docs_releases.html",
    "source_type": "documentation",
    "title": "How we release Storybook | Storybook docs",
    "content": "How we release Storybook | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs ReleasesDocs » ReleasesDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQHow we release StorybookReactVueAngularWeb ComponentsMoreStorybook packages (storybook and everything under the @storybook organization) follow Semantic Versioning (semver) We have a structured release process to ensure stability, compatibility, and a smooth upgrade path for users This page outlines our release channels, supported versions, and the cadence of major, minor, patch, and pre releases Release Channels\nWe publish releases on two channels You can install a specific channel via npm tags:\nStable channel (latest): Installs the latest stable release npm create storybook@latest\nPre-release channel (next): Installs the latest pre-release npm create storybook@next\nSupported Versions\nWe actively maintain the latest major version of Storybook Within the current major, we patch only the latest minor version Most fixes and new work go into the next minor (or sometimes major) and are not backported Critical security fixes may be backported more broadly across the current major version, and in rare cases (such as for a short period immediately following a new major), to the previous major For example, if the latest version is 9 2 1:\nWe support 9 x x versions and release 9 2",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 511113,
      "relative_path": "documentation\\storybook\\_docs_releases.html",
      "source_type": "documentation"
    },
    "token_count": 502,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "7330902d4780dd54a5923a76719622d8",
    "source_file": "corpus\\documentation\\storybook\\_docs_releases.html",
    "source_type": "documentation",
    "title": "How we release Storybook | Storybook docs",
    "content": "we patch only the latest minor version Most fixes and new work go into the next minor (or sometimes major) and are not backported Critical security fixes may be backported more broadly across the current major version, and in rare cases (such as for a short period immediately following a new major), to the previous major For example, if the latest version is 9 2 1: We support 9 x x versions and release 9 2x patch versions\nMost fixes and new work will be released as 9 3 0-alpha x versions\nIf the next release is a major version, it would be 10 0 0-alpha x\nWe will backport critical security fixes to 9 1 x or 9 0 x\nRarely, we may backport critical fixes to 8 6 x as necessary\nFor compatibility with other libraries and tools in the JavaScript ecosystem, please refer to the compatibility tracker Release Cycle\nMajor Release\nCadence: Roughly once per year\nChannel: Stable (latest)\nMajor releases introduce breaking changes and significant new features We use major releases to keep up with ecosystem changes, evolve Storybook’s architecture and APIs, and make the tool faster, leaner, and easier to use Once we start working on a major release, we pause minor releases but continue to ship patch releases as needed Major releases go through a sequence of pre-releases—alpha, beta, and rc (release candidate)—before landing in the stable channel We aim to include automated migrations and provide a comprehensive migration guide when manual changes are necessary ℹ️Storybook versions prior to 7 had a very different architecture As a result, upgrading from v6 to newer versions can be more challenging Starting in v7, we’ve focused heavily on smoother migrations Upgrades from v7 to v8, and v8 to v9 (and beyond), should feel significantly easier thanks to automigrations and better tooling Minor Release\nCadence: Roughly every 8 weeks\nChannel: Stable (latest)\nMinor releases deliver new features, enhancements, and non-breaking improvements Each minor release may be preceded by an alpha pre-release (e g x y 0-alpha) Patch Release\nCadence: as needed (only for the current minor)\nChannel: Stable (latest)\nPatch releases include critical bug fixes and security updates These are issued only for the current minor version and are not pre-released",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 511113,
      "relative_path": "documentation\\storybook\\_docs_releases.html",
      "source_type": "documentation"
    },
    "token_count": 487,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "b6da1dff390c3db02fbee31294bf01a6",
    "source_file": "corpus\\documentation\\storybook\\_docs_releases.html",
    "source_type": "documentation",
    "title": "How we release Storybook | Storybook docs",
    "content": "easier thanks to automigrations and better tooling Minor Release Cadence: Roughly every 8 weeks Channel: Stable (latest) Minor releases deliver new features, enhancements, and non-breaking improvements Each minor release may be preceded by an alpha pre-release (e g x y 0-alpha) Patch Release Cadence: as needed (only for the current minor) Channel: Stable (latest) Patch releases include critical bug fixes and security updates These are issued only for the current minor version and are not pre-releasedPre-release\nCadence: Regularly\nChannel: Pre-release (next)\nPre-releases are created to gather early feedback and ensure stability before an official release Minor version stable releases are preceded by pre-releases with an alpha tag (e g x y 0-alpha), with no patch pre-releases Major version stable releases are preceded by a fuller cycle of alpha, beta, and rc pre-releases before the final release Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 511113,
      "relative_path": "documentation\\storybook\\_docs_releases.html",
      "source_type": "documentation"
    },
    "token_count": 258,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "fdf411fc7539a7fab4a3b1534e83d704",
    "source_file": "corpus\\documentation\\storybook\\_docs_releases_features.html",
    "source_type": "documentation",
    "title": "Features Lifecycle | Storybook docs",
    "content": "Features Lifecycle | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Releases » Feature LifecycleDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQFeatures LifecycleReactVueAngularWeb ComponentsMoreThis page explains how the Storybook team classifies features using four lifecycle labels: Experimental, Preview, Stable, and Deprecated These labels help users understand our level of commitment, the expected quality, likelihood of breaking changes, and anticipated timeline for each feature By making this process transparent, we aim to support better adoption decisions and build trust in how Storybook evolves Experimental\nThis stage marks the beginning of a feature’s development, where we’re validating ideas and shaping direction Experimental features are functional but still evolving, with room for iteration based on real-world use They’re ideal for trying out in prototypes or early integrations, not yet something to build critical paths around Each experimental feature comes with an RFC where we share the initial idea and report progress We strongly encourage feedback to help guide the next steps During this stage, we’re committed to fully exploring the concept As such, specific implementation details may change significantly before stabilization Preview\nPreview features are nearly production-ready and generally reliable, with documentation in place and most known issues addressed They should be fully functional for at least one supported framework, but may still be incomplete or less polished in others",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 484449,
      "relative_path": "documentation\\storybook\\_docs_releases_features.html",
      "source_type": "documentation"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "6d87fec8312feb92585c4ac632083476",
    "source_file": "corpus\\documentation\\storybook\\_docs_releases_features.html",
    "source_type": "documentation",
    "title": "Features Lifecycle | Storybook docs",
    "content": "share the initial idea and report progress We strongly encourage feedback to help guide the next steps During this stage, we’re committed to fully exploring the concept As such, specific implementation details may change significantly before stabilization Preview Preview features are nearly production-ready and generally reliable, with documentation in place and most known issues addressed They should be fully functional for at least one supported framework, but may still be incomplete or less polished in othersThese features are suitable for use in real projects, and we encourage teams to adopt them and share feedback While the feature is stable in direction, we may introduce minimal breaking changes in minor releases to address gaps or refine behavior In those cases, we provide automigrations where possible to ease the transition We aim to collect feedback and iterate for 1-2 minor releases before promoting to stable Stable\nStable features are fully supported and safe for production use across all projects They are well-documented, thoroughly tested in all of our core frameworks, and follow semantic versioning Users can expect long-term support, with any breaking changes reserved for major releases Deprecated\nDeprecated features are in the process of being phased out and will be removed in an upcoming major release Users should begin migrating to supported alternatives as soon as possible These features no longer receive active development or bug fixes, and their functionality may degrade over time While they may still work, they should not be used for new development Typically, a deprecated feature is removed within the next major release cycle (for example, if deprecated in 8 x, removal is expected in 9 0) Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 484449,
      "relative_path": "documentation\\storybook\\_docs_releases_features.html",
      "source_type": "documentation"
    },
    "token_count": 375,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "0849a192e33ea92c245a07c4c21915e1",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_why-storybook.html",
    "source_type": "documentation",
    "title": "Why Storybook? | Storybook docs",
    "content": "Why Storybook | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Get Started » Why Storybook DocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQWhy Storybook ReactVueAngularWeb ComponentsMoreThe problem\nThe web’s universality is pushing more complexity into the frontend It began with responsive web design, which turned every user interface from one to 10, 100, 1000 different user interfaces Over time, additional requirements piled on like devices, browsers, accessibility, performance, and async states Component-driven tools like React, Vue 3, and Angular help break down complex UIs into simple components but they’re not silver bullets As frontends grow, the number of components swells Mature projects can contain hundreds of components that yield thousands of discrete variations To complicate matters further, those UIs are painful to debug because they’re entangled in business logic, interactive states, and app context The breadth of modern frontends overwhelm existing workflows Developers must consider countless UI variations, yet aren’t equipped to develop or organize them all You end up in a situation where UIs are tougher to build, less satisfying to work on, and brittle The solution\nBuild UIs in isolation\nEvery piece of UI is now a component The superpower of components is that you don't need to spin up the whole app just to see how they render",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 660006,
      "relative_path": "documentation\\storybook\\_docs_get-started_why-storybook.html",
      "source_type": "documentation"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "f3dd9e07077a8c164efaa4c14db2c536",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_why-storybook.html",
    "source_type": "documentation",
    "title": "Why Storybook? | Storybook docs",
    "content": "breadth of modern frontends overwhelm existing workflows Developers must consider countless UI variations, yet aren’t equipped to develop or organize them all You end up in a situation where UIs are tougher to build, less satisfying to work on, and brittle The solution Build UIs in isolation Every piece of UI is now a component The superpower of components is that you don't need to spin up the whole app just to see how they renderYou can render a specific variation in isolation by passing in props, mocking data, or faking events Storybook is packaged as a small, development-only, workshop that lives alongside your app It provides an isolated iframe to render components without interference from app business logic and context That helps you focus development on each variation of a component, even the hard-to-reach edge cases Capture UI variations as “stories”\nWhen developing a component variation in isolation, save it as a story Stories are a declarative syntax for supplying props and mock data to simulate component variations Each component can have multiple stories Each story allows you to demonstrate a specific variation of that component to verify appearance and behavior You write stories for granular UI component variation and then use those stories in development, testing, and documentation Histogram stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { Histogram } from ' /Histogram';\nconst meta = {\ncomponent: Histogram,\n} satisfies Meta<typeof Histogram>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const Default: Story = {\nargs: {\ndataType: 'latency',\nshowHistogramLabels: true,\nhistogramAccentColor: '#1EA7FD',\nlabel: 'Latency distribution',\n},\n};\nStorybook keeps track of every story\nStorybook is an interactive directory of your UI components and their stories In the past, you'd have to spin up the app, navigate to a page, and contort the UI into the right state This is a huge waste of time and bogs down frontend development With Storybook, you can skip all those steps and jump straight to working on a UI component in a specific state Where does Storybook fit into my project Storybook is packaged as a small, development-only, workshop that lives alongside your app Install it by running a command During development, run it in a separate node process",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 660006,
      "relative_path": "documentation\\storybook\\_docs_get-started_why-storybook.html",
      "source_type": "documentation"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "0ca0bf257f0faaad9380f3fe28b5b01e",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_why-storybook.html",
    "source_type": "documentation",
    "title": "Why Storybook? | Storybook docs",
    "content": "and contort the UI into the right state This is a huge waste of time and bogs down frontend development With Storybook, you can skip all those steps and jump straight to working on a UI component in a specific state Where does Storybook fit into my project Storybook is packaged as a small, development-only, workshop that lives alongside your app Install it by running a command During development, run it in a separate node processIf you’re working on UI in isolation, the only thing you’ll need to run is Storybook Does Storybook work with my favorite libraries Storybook aims to integrate with industry-standard tools and platforms to simplify setup Thanks to our ambitious developer community, we’ve made significant progress There are hundreds of addons and tutorials that walk through how to set up Storybook in all types of projects If you’re using a niche framework or a recently launched tool, we might not have an integration for it yet Consider creating a proof of concept yourself first to lead the way for the rest of the community What’s the recommended Storybook workflow Every team is different and so is their workflow Storybook is designed to be incrementally adoptable Teams can gradually try features to see what works best for them Most community members choose a Component-Driven workflow UIs are developed in isolation from the “bottom up” starting with basic components then progressively combined to assemble pages Build each component in isolation and write stories for its variations Compose small components together to enable more complex functionality Assemble pages by combining composite components Integrate pages into your project by hooking up data and business logic Benefits\nWhen you write stories for components, you get a bunch of additional benefits for free 📝 Develop UIs that are more durable\nIsolate components and pages and track their use cases as stories Verify hard-to-reach edge cases of UI Use addons to mock everything a component needs—context, API requests, device features, etc ✅ Test UIs with less effort and no flakes\nStories are a pragmatic, reproducible way of tracking UI states Use them to spot-test the UI during development Storybook offers built-in workflows for automated Interaction, Accessibility, and Visual testing Or use stories as test cases by importing them into other JavaScript testing tools 📚 Document UI for your team to reuse\nStorybook is the single source of truth for your UI Stories index all your components and their various states, making it easy for your team to find and reuse existing UI patterns Storybook also auto-generates documentation from those stories",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 660006,
      "relative_path": "documentation\\storybook\\_docs_get-started_why-storybook.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "c08084182a698a79fe9f089d231de9a9",
    "source_file": "corpus\\documentation\\storybook\\_docs_get-started_why-storybook.html",
    "source_type": "documentation",
    "title": "Why Storybook? | Storybook docs",
    "content": "the UI during development Storybook offers built-in workflows for automated Interaction, Accessibility, and Visual testing Or use stories as test cases by importing them into other JavaScript testing tools 📚 Document UI for your team to reuse Storybook is the single source of truth for your UI Stories index all your components and their various states, making it easy for your team to find and reuse existing UI patterns Storybook also auto-generates documentation from those stories📤 Share how the UI actually works\nStories show how UIs actually work, not just a picture of how they're supposed to work That keeps everyone aligned on what's currently in production Publish Storybook to get sign-off from teammates Or embed them in wikis, Markdown, and Figma to streamline collaboration 🚦Automate UI workflows\nStorybook is compatible with your continuous integration workflow Add it as a CI step to automate user interface testing, review implementation with teammates, and get signoff from stakeholders Write stories once, reuse everywhere\nStorybook is powered by Component Story Format, an open standard based on JavaScript ES6 modules This enables stories to interoperate between development, testing, and design tools Each story is exported as a JavaScript function enabling you to reuse it with other tools No vendor lock-in Reuse stories with Jest or Vitest and Testing Library to verify interactions Put them in Chromatic for visual testing Audit story accessibility with Axe Or test user flows with Playwright and Cypress Reuse unlocks more workflows at no extra cost Storybook is purpose-built to help you develop complex UIs faster with greater durability and lower maintenance It’s used by 100s of leading companies and thousands of developers Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 660006,
      "relative_path": "documentation\\storybook\\_docs_get-started_why-storybook.html",
      "source_type": "documentation"
    },
    "token_count": 398,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "bbfdc481072c8c92b1efeeb06d634439",
    "source_file": "corpus\\documentation\\storybook\\_docs_releases_roadmap.html",
    "source_type": "documentation",
    "title": "Roadmap | Storybook docs",
    "content": "Roadmap | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Releases » RoadmapDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQRoadmapThe Storybook team maintains a public roadmap in the form of a GitHub project This page explains what's in the roadmap, how to interpret it, and how to contribute to it What's in the roadmap Each card represents a Storybook project The columns represent how larger changes make their way from idea to shipped feature Projects typically start as an Request for Comment (RFC), then evolve into a tracking issue once the team has fully scoped what it entails We ship a Storybook minor version every eight weeks, and a major version once per year, typically in Feb/Mar Candidates\nThese cards are ideas on our radar that we are considering for the current major release For example, if 8 0 is the most recent major version, these would be ideas for 8 x or 9 0 The ideas in this column are the fuzziest and may come and go depending on our priorities Under consideration\nThese are projects being discussed for the next dev cycle For example, if the most recent minor version is 8 1, and we are currently working on 8 2, the projects in this column would be under consideration for 8 3",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 499766,
      "relative_path": "documentation\\storybook\\_docs_releases_roadmap.html",
      "source_type": "documentation"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "80b1968f55026fe167e404a80e2d7b9e",
    "source_file": "corpus\\documentation\\storybook\\_docs_releases_roadmap.html",
    "source_type": "documentation",
    "title": "Roadmap | Storybook docs",
    "content": "is the most recent major version, these would be ideas for 8 x or 9 0 The ideas in this column are the fuzziest and may come and go depending on our priorities Under consideration These are projects being discussed for the next dev cycle For example, if the most recent minor version is 8 1, and we are currently working on 8 2, the projects in this column would be under consideration for 8 3Unlike the candidates column, which can contain any idea, the projects under consideration must be documented with an RFC In progress\nThese are projects that we are currently working on There are two kinds of projects in this column:\nTracking issues: Fully scoped projects expected to ship in the next minor release For example, if the most recent minor is 8 1, these should ship in 8 2, eight weeks after 8 1 Other projects: Community projects facilitated by the core team and side projects These don't have an ETA but we will push to have them ready as part of the current major For example, if 8 0 is the most recent major version, these should ship in 8 x or 9 0 Done\nThese projects are completed, documented, and released We follow a \"fixed time, variable scope\" policy for core projects, which means we scope a project into milestones to provide the most value to users as early as possible and cut scope if necessary to ship on time If a feature has been scoped out of a project, we might try to fit it into a follow-up project, treat it as general maintenance work, or forget about it Storybook is open source, so PR contributions are always welcome Frequently asked questions\nWhen will project X be available This roadmap is an estimation, not a commitment In general, every tracking issue \"in progress\" should be available in the next two months Everything else on the board has a decent chance of getting into the next major release For example, if 8 0 is the most recent major release, we will try to ship everything on the board as part of 8 x or 9 0 If we don't think a project is likely for the next major, we will kick it off the board What about issue Y or discussion Z The Storybook core team and our community members continuously contribute bug fix bugs and smaller product improvements The projects here are larger chunks of work In some cases they may close out certain issues, and when possible we will call those out in the RFC or project tracking issue",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 499766,
      "relative_path": "documentation\\storybook\\_docs_releases_roadmap.html",
      "source_type": "documentation"
    },
    "token_count": 505,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "02073dc2d9c1c7332eaa4dab91b8a6e9",
    "source_file": "corpus\\documentation\\storybook\\_docs_releases_roadmap.html",
    "source_type": "documentation",
    "title": "Roadmap | Storybook docs",
    "content": "0 If we don't think a project is likely for the next major, we will kick it off the board What about issue Y or discussion Z The Storybook core team and our community members continuously contribute bug fix bugs and smaller product improvements The projects here are larger chunks of work In some cases they may close out certain issues, and when possible we will call those out in the RFC or project tracking issueHow do I get something onto the board If there's a significant product improvement that you want to see, and there is currently an issue or an RFC for it, upvote that issue/discussion, and comment on it with more information about your need or use case if it's not currently captured If you don't see anything that's quite right, please feel free to submit an RFC We prioritize based on a combination of user/contributor interest (upvotes, comments, Discord conversations, etc ) and our own strategic ambitions for the project Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 499766,
      "relative_path": "documentation\\storybook\\_docs_releases_roadmap.html",
      "source_type": "documentation"
    },
    "token_count": 258,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "054f8be80cdce1bb72137e751ecaef51",
    "source_file": "corpus\\documentation\\storybook\\_docs_sharing.html",
    "source_type": "documentation",
    "title": "Sharing | Storybook docs",
    "content": "Sharing | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs SharingDocs » SharingDocumentationAPITutorialsAddonsChangelogVersion 9.1Get StartedWhy Storybook?InstallFrameworksWhat's a story?Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9.0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain.js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQSharingYou have your components ready and tested. That's great! Now you want to make your component library available to your team or community to help them understand how they work. There are multiple ways you can do that. You can publish your Storybook to services like Chromatic, embed some of your stories in your own website, or use third party services like Figma.\nPublish\nEmbed\nDesign integrations\nComposition\nPackage Composition\nWas this page useful?👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 467065,
      "relative_path": "documentation\\storybook\\_docs_sharing.html",
      "source_type": "documentation"
    },
    "token_count": 419,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7968b5797cb2ef239275f74c9b104526",
    "source_file": "corpus\\documentation\\storybook\\_docs_releases_migration-guide.html",
    "source_type": "documentation",
    "title": "Migration guide for Storybook 9 | Storybook docs",
    "content": "Migration guide for Storybook 9 | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Releases » Migrate to Storybook 9DocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQMigration guide for Storybook 9ReactVueAngularWeb ComponentsMoreStorybook 9 improves performance, compatibility, and stability Its key features include:\n🔋 Storybook Test, a batteries-included testing tool in your Storybook\n🧪 Component testing\n♿️ Accessibility testing\n🛡️ Test coverage\n🪶 48% lighter bundle\n⚛️ React Native for device and web\n🏷️ Tags-based story organization\nThis guide is meant to help you upgrade from Storybook 8 x to 9 successfully ℹ️Migrating from a Storybook version prior to 8 You'll first need to upgrade to Storybook 8 Then you can return to this guide Major breaking changes\nThe rest of this guide will help you upgrade successfully, either automatically or manually But first, there are some breaking changes in Storybook 9",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 579355,
      "relative_path": "documentation\\storybook\\_docs_releases_migration-guide.html",
      "source_type": "documentation"
    },
    "token_count": 448,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "9a3cc86714adfd1e0cd90ff082f66ba0",
    "source_file": "corpus\\documentation\\storybook\\_docs_releases_migration-guide.html",
    "source_type": "documentation",
    "title": "Migration guide for Storybook 9 | Storybook docs",
    "content": "⚛️ React Native for device and web 🏷️ Tags-based story organization This guide is meant to help you upgrade from Storybook 8 x to 9 successfully ℹ️Migrating from a Storybook version prior to 8 You'll first need to upgrade to Storybook 8 Then you can return to this guide Major breaking changes The rest of this guide will help you upgrade successfully, either automatically or manually But first, there are some breaking changes in Storybook 9Here are the most impactful changes you should know about before you go further:\nPackages have been consolidated/removed\nEssential addons moved to core\nTest addon renamed from experimental-addon-test to addon-vitest\nnextjs-vite framework stabilized\nRemoved Webpack builder support for Preact, Vue, and Web Components in favor of Vite\nManager builder removed alias for util, assert and process\nEcosystem updates\nNode 20+ is now required\nAngular 18+ is now required\nLit v3+ is now required\nNext js 14+ is now required\nSvelte 5+ is now required\nVite 5+ is now required\nVitest 3+ is now required\nnpm 10+ is now required\npnpm 9+ is now required\nyarn 4+ is now required\nTypeScript 4 9+ is now required\nIf any of these changes apply to your project, please read through the linked migration notes before continuing If any of these new requirements or changes are blockers for your project, we recommend to continue using Storybook 8 x You may wish to read the full migration notes before migrating Or you can run the upgrade command below and we’ll try to take care of everything for you",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 579355,
      "relative_path": "documentation\\storybook\\_docs_releases_migration-guide.html",
      "source_type": "documentation"
    },
    "token_count": 353,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "35ebeeeb0fb37fe6dd43c43a145ec663",
    "source_file": "corpus\\documentation\\storybook\\_docs_releases_migration-guide.html",
    "source_type": "documentation",
    "title": "Migration guide for Storybook 9 | Storybook docs",
    "content": "now required TypeScript 4 9+ is now required If any of these changes apply to your project, please read through the linked migration notes before continuing If any of these new requirements or changes are blockers for your project, we recommend to continue using Storybook 8 x You may wish to read the full migration notes before migrating Or you can run the upgrade command below and we’ll try to take care of everything for youAutomatic upgrade\nTo upgrade your Storybook, run the upgrade command in the root of your repository:\nnpmnpx storybook@latest upgrade\nThis will:\nFind all of the Storybook projects in your repository\nFor each project\nDetermine that none of the breaking changes apply to your project\nIf they do, you will receive instructions on how to resolve them before continuing\nUpgrade your Storybook dependencies to the latest version\nRun a collection of automigrations, which will:\nCheck for common upgrade tasks\nExplain the necessary changes with links to more information\nAsk for approval, then perform the task automatically on your behalf\nNew projects\nTo add Storybook to a project that isn’t currently using Storybook:\nnpmnpm create storybook@latest\nThis will:\nFigure out which renderer (React, Vue, Angular, Web Components), builder (Webpack, Vite), or meta-framework (Next js, SvelteKit) you’re using\nInstall Storybook 9 and auto-configure it to mirror project settings\nTroubleshooting\nThe automatic upgrade should get your Storybook into a working state If you encounter an error running Storybook after upgrading, here’s what to do:\nTry running the doctor command to check for common issues (such as duplicate dependencies, incompatible addons, or mismatched versions) and see suggestions for fixing them If you’re running storybook with the dev command, try using the build command instead Sometimes build errors are more legible than dev errors Check the full migration notes, which contains an exhaustive list of noteworthy changes in Storybook 9 Many of these are already handled by automigrations when you upgrade, but not all are It’s also possible that you’re experiencing a corner case that we’re not aware of Search Storybook issues on GitHub If you’re seeing a problem, there’s a good chance other people are too If so, upvote the issue, try out any workarounds described in the comments, and comment back if you have useful info to contribute",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 579355,
      "relative_path": "documentation\\storybook\\_docs_releases_migration-guide.html",
      "source_type": "documentation"
    },
    "token_count": 484,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "7f82670ff8146f90cba89b97c5aa8336",
    "source_file": "corpus\\documentation\\storybook\\_docs_releases_migration-guide.html",
    "source_type": "documentation",
    "title": "Migration guide for Storybook 9 | Storybook docs",
    "content": "of noteworthy changes in Storybook 9 Many of these are already handled by automigrations when you upgrade, but not all are It’s also possible that you’re experiencing a corner case that we’re not aware of Search Storybook issues on GitHub If you’re seeing a problem, there’s a good chance other people are too If so, upvote the issue, try out any workarounds described in the comments, and comment back if you have useful info to contributeIf there’s no existing issue, you can file one, ideally with a reproduction attached We’ll be on top of Storybook 9 issues as we’re stabilizing the release If you prefer to debug yourself, here are a few useful things you can do to help narrow down the problem:\nTry removing all addons that are not in the @storybook npm namespace (make sure you don't remove the storybook package) Community addons that work well with 8 x might not yet be compatible with 9 x, and this is the fastest way to isolate that possibility If you find an addon that needs to be upgraded to work with Storybook 9, please post an issue on the addon’s repository, or better yet, a pull request to upgrade it Another debugging technique is to bisect to older prerelease versions of Storybook to figure out which release broke your Storybook For example, assuming that the current prerelease of Storybook is 9 0 0-beta 56, you could set the version to 9 0 0-alpha 0 in your package json and reinstall to verify that it still works (alpha 0 should be nearly identical to 8 6 x) If it works, you could then try 9 0 0-beta 0, then 9 0 0-beta 28 and so forth Once you’ve isolated the bad release, read through its CHANGELOG entry and perhaps there’s a change that jumps out as the culprit If you find the problem, please submit an issue or pull request to the Storybook monorepo and we’ll do our best to take care of it quickly Package structure changes\nThe following packages are no longer published Instead they have been consolidated into Storybook's core package, storybook If a consolidated package had exports, those are available via the replacement path in the table below See the full migration notes for details",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 579355,
      "relative_path": "documentation\\storybook\\_docs_releases_migration-guide.html",
      "source_type": "documentation"
    },
    "token_count": 471,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "a79eed46b23682e2f488f01e7e33df58",
    "source_file": "corpus\\documentation\\storybook\\_docs_releases_migration-guide.html",
    "source_type": "documentation",
    "title": "Migration guide for Storybook 9 | Storybook docs",
    "content": "jumps out as the culprit If you find the problem, please submit an issue or pull request to the Storybook monorepo and we’ll do our best to take care of it quickly Package structure changes The following packages are no longer published Instead they have been consolidated into Storybook's core package, storybook If a consolidated package had exports, those are available via the replacement path in the table below See the full migration notes for detailsRemovalReplacement@storybook/addon-actionsstorybook/actions@storybook/addon-backgroundsN/A@storybook/addon-controlsN/A@storybook/addon-highlightstorybook/highlight@storybook/addon-interactionsN/A@storybook/addon-measureN/A@storybook/addon-outlineN/A@storybook/addon-toolbarsN/A@storybook/addon-viewportstorybook/viewport@storybook/manager-apistorybook/manager-api@storybook/preview-apistorybook/preview-api@storybook/teststorybook/test@storybook/themingstorybook/theming\nThe following packages have been consolidated and moved into an internal path to indicate that they are now for internal usage only They will continue to work in 9 x releases, but will likely be removed in 10 0 See the full migration notes for details DeprecationReplacement@storybook/builder-managerstorybook/internal/builder-manager@storybook/channelsstorybook/internal/channels@storybook/client-loggerstorybook/internal/client-logger@storybook/componentsstorybook/internal/components@storybook/core-commonstorybook/internal/common@storybook/core-eventsstorybook/internal/core-events@storybook/core-serverstorybook/internal/core-server@storybook/csf-toolsstorybook/internal/csf-tools@storybook/docs-toolsstorybook/internal/docs-tools@storybook/managerstorybook/internal/manager@storybook/node-loggerstorybook/internal/node-logger@storybook/previewstorybook/internal/preview@storybook/routerstorybook/internal/router@storybook/telemetrystorybook/internal/telemetry@storybook/typesstorybook/internal/types\nAddon authors may continue to use the internal packages, there is currently not yet any replacement Optional migrations\nIn addition to the automigrations and manual migrations above, there are also optional migrations that you should consider These are features that we’ve deprecated in Storybook 9 (but remain backwards compatible), or best practices that should help you be more productive in the future test-runner to addon-vitest\naddon-vitest and the rest of the Storybook Test experience is designed to supercede the test-runner It's faster and provides a better experience for writing and running tests",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 579355,
      "relative_path": "documentation\\storybook\\_docs_releases_migration-guide.html",
      "source_type": "documentation"
    },
    "token_count": 485,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "4f1d165921c46059f115b63bf262af02",
    "source_file": "corpus\\documentation\\storybook\\_docs_releases_migration-guide.html",
    "source_type": "documentation",
    "title": "Migration guide for Storybook 9 | Storybook docs",
    "content": "Optional migrations In addition to the automigrations and manual migrations above, there are also optional migrations that you should consider These are features that we’ve deprecated in Storybook 9 (but remain backwards compatible), or best practices that should help you be more productive in the future test-runner to addon-vitest addon-vitest and the rest of the Storybook Test experience is designed to supercede the test-runner It's faster and provides a better experience for writing and running testsIf your project uses React, Vue, or Svelte and is built with Vite, you should consider migrating to addon-vitest, by following the installation instructions CSF 2 to CSF 3\nThere are many good reasons to convert your stories from CSF 2 to CSF 3 We provide a codemod which, in most cases, should automatically make the code changes for you (make sure to update the glob to fit your files):\nnpm# Convert CSF 2 to CSF 3\nnpx storybook@latest migrate csf-2-to-3 --glob=\"**/* stories tsx\" --parser=tsx\nWas this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 579355,
      "relative_path": "documentation\\storybook\\_docs_releases_migration-guide.html",
      "source_type": "documentation"
    },
    "token_count": 296,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "828c401b75c5e37d7b115837163cbe9a",
    "source_file": "corpus\\documentation\\storybook\\_docs_releases_migration-guide-from-older-version.html",
    "source_type": "documentation",
    "title": "Migration guide from Storybook 7.x to 8.6 | Storybook docs",
    "content": "Migration guide from Storybook 7 x to 8 6 | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Releases » Migrate from 7 to 8DocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQMigration guide from Storybook 7 x to 8 6ReactVueAngularWeb ComponentsMoreStorybook 8 focuses on improving performance, compatibility, and stability Key features include:\n🩻 A new visual testing workflow via the Visual Tests addon\n💨 2-4x faster test builds, 25-50% faster React docgen, and SWC support for Webpack projects\n🧩 Improved framework support: you no longer need to install React as a peer dependency when using a non-React renderer\n🎛️ Strengthened control generation in React and Vue projects\n⚡️ Improved Vite architecture, Vitest testing, and Vite 5 support\n🌐 Support for React Server Components (RSC): our experimental solution renders async RSC in the browser and mocks Node code\n✨ A refreshed desktop UI & mobile UX\n➕ Much, much more\nThis guide is meant to help you upgrade from Storybook 7 x to 8 6 successfully ℹ️Migrating from Storybook 6 x",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 587276,
      "relative_path": "documentation\\storybook\\_docs_releases_migration-guide-from-older-version.html",
      "source_type": "documentation"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "f63d38bf937189dbd6dc23d5e34ee2f0",
    "source_file": "corpus\\documentation\\storybook\\_docs_releases_migration-guide-from-older-version.html",
    "source_type": "documentation",
    "title": "Migration guide from Storybook 7.x to 8.6 | Storybook docs",
    "content": "using a non-React renderer 🎛️ Strengthened control generation in React and Vue projects ⚡️ Improved Vite architecture, Vitest testing, and Vite 5 support 🌐 Support for React Server Components (RSC): our experimental solution renders async RSC in the browser and mocks Node code ✨ A refreshed desktop UI & mobile UX ➕ Much, much more This guide is meant to help you upgrade from Storybook 7 x to 8 6 successfully ℹ️Migrating from Storybook 6 xYou can reference our migration guide for Storybook 6 to 8 Major breaking changes\nThe rest of this guide will help you upgrade successfully, either automatically or manually But first, there are some breaking changes in Storybook 8 Here are the most impactful changes you should know about before you go further:\nstoriesOf API has been removed\n* stories mdx format has been removed\nPackages have been consolidated/removed\nImplicit actions (from argTypesRegex) can no longer be used during rendering (e g in a play function)\nreact-docgen (instead of react-docgen-typescript) is the default for component analysis\nStoryshots has been removed\nAddons API introduced in Storybook 7 is now required\nEcosystem updates\nNode 18+ is now required\nNext js 13 5+ is now required\nVue 3+ is now required\nAngular 15+ is now required\nSvelte 4+ is now required\nYarn 1 is no longer supported\nIf any of these changes apply to your project, please read through the linked migration notes before continuing If any of these new requirements or changes are blockers for your project, we recommend to continue using Storybook 7 x You may wish to read the full migration notes before migrating Or you can follow the instructions below and we’ll try to take care of everything for you",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 587276,
      "relative_path": "documentation\\storybook\\_docs_releases_migration-guide-from-older-version.html",
      "source_type": "documentation"
    },
    "token_count": 386,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "46b47d38b06b40822b72cb90877b740d",
    "source_file": "corpus\\documentation\\storybook\\_docs_releases_migration-guide-from-older-version.html",
    "source_type": "documentation",
    "title": "Migration guide from Storybook 7.x to 8.6 | Storybook docs",
    "content": "is now required Yarn 1 is no longer supported If any of these changes apply to your project, please read through the linked migration notes before continuing If any of these new requirements or changes are blockers for your project, we recommend to continue using Storybook 7 x You may wish to read the full migration notes before migrating Or you can follow the instructions below and we’ll try to take care of everything for youAutomatic upgrade\nTo upgrade your Storybook:\nnpmnpx storybook@latest upgrade\nThis will:\nDetermine that none of the breaking changes apply to your project\nIf they do, you will receive instructions on how to resolve them before continuing\nUpgrade your Storybook dependencies to the latest version\nRun a collection of automigrations, which will:\nCheck for common upgrade tasks\nExplain the necessary changes with links to more information\nAsk for approval, then perform the task on your behalf\nCommon upgrade issues\nWhile we'll do our best to upgrade your project automatically, there is one issue worth mentioning that you might encounter during the upgrade process:\nstoryStoreV7:false and storiesOf\nIf you have storyStoreV7: false in your storybook/main js, you will need to remove it before you're able to upgrade to Storybook 8 If you are using the storiesOf API (which requires storyStoreV7: false in Storybook 7), you will need to either migrate your stories to CSF or use the new indexer API to continue creating stories dynamically Missing vite config js file\nIf you are using Vite, you may now need to create a vite config js file in your project root to allow newer versions of Vite to work with Storybook Additionally, you may need to install and configure a Vite plugin for your framework More information is available in the full migration notes New projects\nTo add Storybook to a project that isn’t currently using Storybook:\nnpmnpm create storybook@latest\nThis will:\nFigure out which renderer (React, Vue, Angular, Web Components), builder (Webpack, Vite), or meta-framework (Next js, SvelteKit) you’re using\nInstall Storybook 8 and auto-configure it to mirror project settings\nManual migrations\nIn addition to the automated upgrades above, there are manual migrations that might be required to get Storybook 8 working in your project We’ve tried to minimize this list to make it easier to upgrade These include:\n* stories",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 587276,
      "relative_path": "documentation\\storybook\\_docs_releases_migration-guide-from-older-version.html",
      "source_type": "documentation"
    },
    "token_count": 492,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "d6105f1445c99f53d01cc7526db75bb4",
    "source_file": "corpus\\documentation\\storybook\\_docs_releases_migration-guide-from-older-version.html",
    "source_type": "documentation",
    "title": "Migration guide from Storybook 7.x to 8.6 | Storybook docs",
    "content": "Storybook: npmnpm create storybook@latest This will: Figure out which renderer (React, Vue, Angular, Web Components), builder (Webpack, Vite), or meta-framework (Next js, SvelteKit) you’re using Install Storybook 8 and auto-configure it to mirror project settings Manual migrations In addition to the automated upgrades above, there are manual migrations that might be required to get Storybook 8 working in your project We’ve tried to minimize this list to make it easier to upgrade These include: * storiesmdx to MDX+CSF\nStorybook now requires that MDX pages reference stories written in CSF, rather than the previous stories mdx hybrid approach You can automatically convert your files using the following codemod (make sure to update the glob to fit your files):\nnpm# Convert stories in MDX to CSF\nnpx storybook@latest migrate mdx-to-csf --glob \"src/**/* stories mdx\"\nYou’ll also need to update your stories glob in storybook/main js to include the newly created mdx and stories js files if it doesn’t already Known limitations\nThe codemod does not remove the extracted stories from the stories mdx files You will need to do this manually Note: this migration supports the Storybook 6 \"CSF stories with MDX docs\" recipe Troubleshooting\nThe automatic upgrade should get your Storybook into a working state If you encounter an error running Storybook after upgrading, here’s what to do:\nTry running the doctor command to check for common issues (such as duplicate dependencies, incompatible addons, or mismatched versions) and see suggestions for fixing them If you’re running storybook with the dev command, try using the build command instead Sometimes build errors are more legible than dev errors Check the full migration notes, which contains an exhaustive list of noteworthy changes in Storybook 8 Many of these are already handled by automigrations when you upgrade, but not all are It’s also possible that you’re experiencing a corner case that we’re not aware of Search Storybook issues on GitHub If you’re seeing a problem, there’s a good chance other people are too If so, upvote the issue, try out any workarounds described in the comments, and comment back if you have useful info to contribute If there’s no existing issue, you can file one, ideally with a reproduction attached",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 587276,
      "relative_path": "documentation\\storybook\\_docs_releases_migration-guide-from-older-version.html",
      "source_type": "documentation"
    },
    "token_count": 486,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "c45fe523e235c4262dec2b467c3e41f2",
    "source_file": "corpus\\documentation\\storybook\\_docs_releases_migration-guide-from-older-version.html",
    "source_type": "documentation",
    "title": "Migration guide from Storybook 7.x to 8.6 | Storybook docs",
    "content": "when you upgrade, but not all are It’s also possible that you’re experiencing a corner case that we’re not aware of Search Storybook issues on GitHub If you’re seeing a problem, there’s a good chance other people are too If so, upvote the issue, try out any workarounds described in the comments, and comment back if you have useful info to contribute If there’s no existing issue, you can file one, ideally with a reproduction attachedWe’ll be on top of Storybook 8 issues as we’re stabilizing the release If you prefer to debug yourself, here are a few useful things you can do to help narrow down the problem:\nTry removing all addons that are not in the @storybook npm namespace (make sure you don't remove the storybook package) Community addons that work well with 7 x might not yet be compatible with 8 0, and this is the fastest way to isolate that possibility If you find an addon that needs to be upgraded to work with Storybook 8, please post an issue on the addon’s repository, or better yet, a pull request to upgrade it Another debugging technique is to bisect to older prerelease versions of Storybook to figure out which release broke your Storybook For example, assuming that the current prerelease of Storybook is 8 0 0-beta 56, you could set the version to 8 0 0-alpha 0 in your package json and reinstall to verify that it still works (alpha 0 should be nearly identical to 7 6 x) If it works, you could then try 8 0 0-beta 0, then 8 0 0-beta 28 and so forth Once you’ve isolated the bad release, read through its CHANGELOG entry and perhaps there’s a change that jumps out as the culprit If you find the problem, please submit an issue or pull request to the Storybook monorepo and we’ll do our best to take care of it quickly Package structure changes\nThe following packages are removed See the full migration notes for details RemovalReplacement@storybook/addons@storybook/manager-api or @storyboook/preview-api@storybook/channel-postmessage@storybook/channels@storybook/channel-websocket@storybook/channels@storybook/client-api@storybook/preview-api@storybook/core-client@storybook/preview-api@storybook/preview-web@storybook/preview-api@storybook/store@storybook/preview-api@storybook/api@storybook/manager-api\nThe following packages are deprecated",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 587276,
      "relative_path": "documentation\\storybook\\_docs_releases_migration-guide-from-older-version.html",
      "source_type": "documentation"
    },
    "token_count": 508,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "c9680a504d2e1405b9ba4b28de4153a8",
    "source_file": "corpus\\documentation\\storybook\\_docs_releases_migration-guide-from-older-version.html",
    "source_type": "documentation",
    "title": "Migration guide from Storybook 7.x to 8.6 | Storybook docs",
    "content": "28 and so forth Once you’ve isolated the bad release, read through its CHANGELOG entry and perhaps there’s a change that jumps out as the culprit If you find the problem, please submit an issue or pull request to the Storybook monorepo and we’ll do our best to take care of it quickly Package structure changes The following packages are removed See the full migration notes for details RemovalReplacement@storybook/addons@storybook/manager-api or @storyboook/preview-api@storybook/channel-postmessage@storybook/channels@storybook/channel-websocket@storybook/channels@storybook/client-api@storybook/preview-api@storybook/core-client@storybook/preview-api@storybook/preview-web@storybook/preview-api@storybook/store@storybook/preview-api@storybook/api@storybook/manager-api The following packages are deprecatedSee the full migration notes for details DeprecationReplacement@storybook/testing-library@storybook/test\nOptional migrations\nIn addition to the automigrations and manual migrations above, there are also optional migrations that you should consider These are features that we’ve deprecated in Storybook 8 (but remain backwards compatible), or best practices that should help you be more productive in the future CSF 2 to CSF 3\nThere are many good reasons to convert your stories from CSF 2 to CSF 3 We provide a codemod which, in most cases, should automatically make the code changes for you (make sure to update the glob to fit your files):\nnpm# Convert CSF 2 to CSF 3\nnpx storybook@latest migrate csf-2-to-3 --glob=\"**/* stories tsx\" --parser=tsx\nWas this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 587276,
      "relative_path": "documentation\\storybook\\_docs_releases_migration-guide-from-older-version.html",
      "source_type": "documentation"
    },
    "token_count": 408,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "f6d1ea8cf7ffbb00066e191079d60e92",
    "source_file": "corpus\\documentation\\storybook\\_docs_releases_upgrading.html",
    "source_type": "documentation",
    "title": "Upgrading Storybook | Storybook docs",
    "content": "Upgrading Storybook | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Releases » UpgradingDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQUpgrading StorybookReactVueAngularWeb ComponentsMoreThe frontend ecosystem is a fast-moving place Regular dependency upgrades are a way of life, whether upgrading a framework, library, tooling, or all of the above Storybook provides a few resources to help ease the pain of upgrading Upgrade script\nThe most common upgrade is Storybook itself Storybook releases follow Semantic Versioning We publish patch releases with bug fixes continuously, minor versions of Storybook with new features every few months, and major versions of Storybook with breaking changes roughly once per year To help ease the pain of keeping Storybook up-to-date, we provide a command-line script that automatically detects all Storybook projects in your repository:\nnpmnpx storybook@latest upgrade\nℹ️Important: Always run the upgrade command from your repository root The script will automatically detect all Storybook projects in your repository, including in mono-repository setups The upgrade command will use whichever version you specify For example:\nstorybook@latest upgrade will upgrade to the latest version\nstorybook@8 6 1 upgrade will upgrade to 8 6 1\nstorybook@9 upgrade will upgrade to the newest 9 x",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 600913,
      "relative_path": "documentation\\storybook\\_docs_releases_upgrading.html",
      "source_type": "documentation"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "795bacf7b7d58fc095849256be6a5044",
    "source_file": "corpus\\documentation\\storybook\\_docs_releases_upgrading.html",
    "source_type": "documentation",
    "title": "Upgrading Storybook | Storybook docs",
    "content": "script that automatically detects all Storybook projects in your repository: npmnpx storybook@latest upgrade ℹ️Important: Always run the upgrade command from your repository root The script will automatically detect all Storybook projects in your repository, including in mono-repository setups The upgrade command will use whichever version you specify For example: storybook@latest upgrade will upgrade to the latest version storybook@8 6 1 upgrade will upgrade to 8 6 1 storybook@9 upgrade will upgrade to the newest 9 xx version\n⚠️The upgrade command is designed to upgrade from one major version to the next ✅ OK: Using Storybook 8 and running storybook@9 upgrade\n❌ Not OK: Using Storybook 7 and running storybook@9 upgrade\nIf you want to upgrade across more than major version, run the command multiple times For example, to upgrade from Storybook 7 to Storybook 9, you first need to upgrade to the latest version of Storybook 8 with storybook@8 upgrade, and then run storybook@9 upgrade to upgrade to the latest version of Storybook 9 The only exception to this is when upgrading from 6 to 8, where you can run storybook@8 upgrade directly to upgrade from 6 x x to 8 x x Mono-repository support\nThe upgrade script provides enhanced support for mono-repositories:\nAutomatic detection: The script automatically detects all Storybook projects in your repository\nSelective upgrades: If your Storybooks are truly encapsulated (meaning each Storybook project has its own independent Storybook dependencies in its own package json), you can select which Storybook project to upgrade\nBulk upgrades: If your Storybooks share dependencies, all detected projects will be upgraded together to ensure consistency\nLimiting scope in large mono-repositories\nFor large mono-repositories where you want to limit the upgrade to a specific directory, use the STORYBOOK_PROJECT_ROOT environment variable:\nSTORYBOOK_PROJECT_ROOT= /packages/frontend storybook@latest upgrade\nThis is especially helpful in huge mono-repositories with semi-encapsulated Storybooks",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 600913,
      "relative_path": "documentation\\storybook\\_docs_releases_upgrading.html",
      "source_type": "documentation"
    },
    "token_count": 430,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "f755de04b7b308595d4951e2e42c7250",
    "source_file": "corpus\\documentation\\storybook\\_docs_releases_upgrading.html",
    "source_type": "documentation",
    "title": "Upgrading Storybook | Storybook docs",
    "content": "Storybook project has its own independent Storybook dependencies in its own package json), you can select which Storybook project to upgrade Bulk upgrades: If your Storybooks share dependencies, all detected projects will be upgraded together to ensure consistency Limiting scope in large mono-repositories For large mono-repositories where you want to limit the upgrade to a specific directory, use the STORYBOOK_PROJECT_ROOT environment variable: STORYBOOK_PROJECT_ROOT= /packages/frontend storybook@latest upgrade This is especially helpful in huge mono-repositories with semi-encapsulated StorybooksUpgrade process\nAfter running the command, the script will:\nDetect all Storybook projects in your repository\nUpgrade all Storybook packages to the specified version\nRun the relevant automigrations factoring in the breaking changes between your current version and the specified version\nAutomatically run the doctor command to verify the upgrade\nℹ️In addition to running the command, we also recommend checking the MIGRATION md file, for the detailed log of relevant changes and deprecations that might affect your upgrade Automatic health check\nThe upgrade script automatically runs a health check on all detected Storybook projects after the upgrade This verifies that the upgrade was completed successfully and checks for common issues that might arise after an upgrade, such as duplicated dependencies, incompatible addons, or mismatched versions The health check runs automatically for all detected Storybooks You can also run it manually at any time using the storybook doctor command:\nnpmnpx storybook@latest doctor\nError handling and debugging\nIf you encounter issues during the upgrade:\nA debug-storybook log file will be created in the repository root containing all relevant logs\nFor more detailed information, set the log level to debug using the --loglevel debug flag\nCreate a GitHub issue with the logs if you need help resolving the problem\nCommand-line options\nThe upgrade command supports several flags to customize the upgrade process:\nstorybook@latest upgrade [options]\nAvailable flags\nFlagDescription-c, --config-dir <dir-name",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 600913,
      "relative_path": "documentation\\storybook\\_docs_releases_upgrading.html",
      "source_type": "documentation"
    },
    "token_count": 397,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "7b1b949a8827b8b80f8410d2bf7500be",
    "source_file": "corpus\\documentation\\storybook\\_docs_releases_upgrading.html",
    "source_type": "documentation",
    "title": "Upgrading Storybook | Storybook docs",
    "content": "Error handling and debugging If you encounter issues during the upgrade: A debug-storybook log file will be created in the repository root containing all relevant logs For more detailed information, set the log level to debug using the --loglevel debug flag Create a GitHub issue with the logs if you need help resolving the problem Command-line options The upgrade command supports several flags to customize the upgrade process: storybook@latest upgrade [options] Available flags FlagDescription-c, --config-dir <dir-name>Directory or directories to find Storybook configurations--debugEnable more logs for debugging (default: false)--disable-telemetryDisable sending telemetry data--enable-crash-reportsEnable sending crash reports to telemetry data-f, --forceForce the upgrade, skipping autoblockers--loglevel <level>Define log level: debug, error, info, silent, trace, or warn (default: info)--package-manager <manager>Force package manager: npm, pnpm, yarn1, yarn2, or bun-s, --skip-checkSkip postinstall version and automigration checks--write-logsWrite all debug logs to a file at the end of the run-y, --yesSkip prompting the user\nExample usage\n# Upgrade with logging for debugging\nstorybook@latest upgrade --loglevel debug --write-logs\n# Force upgrade without prompts\nstorybook@latest upgrade --force --yes\n# Upgrade specific config directories only\nstorybook@latest upgrade --config-dir storybook-app storybook-ui\nAutomigrate script\nStorybook upgrades are not the only thing to consider: changes in the ecosystem also present challenges For example well-known frontend frameworks, such as Angular, Next js or Svelte have been rolling out significant changes to their ecosystem, so even if you don't upgrade your Storybook version, you might need to update your configuration accordingly That's what Automigrate is for:\nnpmnpx storybook@latest automigrate\nIt runs a set of standard configuration checks, explains what is potentially out-of-date, and offers to fix it for you automatically It also points to the relevant documentation so you can learn more It runs automatically as part of storybook upgrade command, but it's also available on its own if you don't want to upgrade Storybook Prereleases\nIn addition to the above, Storybook is under constant development, and we publish pre-release versions almost daily",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 600913,
      "relative_path": "documentation\\storybook\\_docs_releases_upgrading.html",
      "source_type": "documentation"
    },
    "token_count": 472,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "1a1e34f594070aa50f21a60b8a814c09",
    "source_file": "corpus\\documentation\\storybook\\_docs_releases_upgrading.html",
    "source_type": "documentation",
    "title": "Upgrading Storybook | Storybook docs",
    "content": "storybook@latest automigrate It runs a set of standard configuration checks, explains what is potentially out-of-date, and offers to fix it for you automatically It also points to the relevant documentation so you can learn more It runs automatically as part of storybook upgrade command, but it's also available on its own if you don't want to upgrade Storybook Prereleases In addition to the above, Storybook is under constant development, and we publish pre-release versions almost dailyPre-releases are the best way to try out new features before they are generally available, and we do our best to keep them as stable as possible, although this is not always possible To upgrade to the latest pre-release:\nnpmnpx storybook@next upgrade\nThe upgrade command will use whichever version you specify For example:\nstorybook@next upgrade will upgrade to the newest pre-release version\nstorybook@8 0 0-beta 1 upgrade will upgrade to 8 0 0-beta 1\nstorybook@8 upgrade will upgrade to the newest 8 x version\nIf you'd like to downgrade to a stable version, manually edit the package version numbers in your package json and re-install ℹ️Storybook collects completely anonymous data to help us improve user experience Participation is optional, and you may opt-out if you'd not like to share any information Troubleshooting\nStorybook doesn't detect my Storybook project\nBy default, the upgrade script will attempt to find Storybook configuration in storybook directories in your repository If your Storybook configuration is located in a different directory, you can specify it using the --config-dir flag The --config-dir flag can accept multiple directories storybook@latest upgrade --config-dir storybook-app storybook-ui\nIf your project can be detected, but you get an error during the detection process, please check the debug-storybook log file in the root of your repository It will contain the full output of the detection process and will help you troubleshoot the issue Storybook doesn't automigrate non-Storybook files\nOur automigrations usually only transform and migrate files inside of your storybook directory and your story and mdx files, which are mentioned as part of the Storybook configuration If you have other files that contain Storybook-specific code, you might need to manually migrate them Was this page useful",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 600913,
      "relative_path": "documentation\\storybook\\_docs_releases_upgrading.html",
      "source_type": "documentation"
    },
    "token_count": 465,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "236808116c03dff0e8b2556d8684d195",
    "source_file": "corpus\\documentation\\storybook\\_docs_releases_upgrading.html",
    "source_type": "documentation",
    "title": "Upgrading Storybook | Storybook docs",
    "content": "in the root of your repository It will contain the full output of the detection process and will help you troubleshoot the issue Storybook doesn't automigrate non-Storybook files Our automigrations usually only transform and migrate files inside of your storybook directory and your story and mdx files, which are mentioned as part of the Storybook configuration If you have other files that contain Storybook-specific code, you might need to manually migrate them Was this page useful👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 600913,
      "relative_path": "documentation\\storybook\\_docs_releases_upgrading.html",
      "source_type": "documentation"
    },
    "token_count": 158,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "8195981143f5b016eb8fe946c63e3128",
    "source_file": "corpus\\documentation\\storybook\\_docs_sharing_embed.html",
    "source_type": "documentation",
    "title": "Embed stories | Storybook docs",
    "content": "Embed stories | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Sharing » EmbedDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQEmbed storiesReactVueAngularWeb ComponentsMoreEmbed stories to showcase your work to teammates and the developer community at large In order to use embeds, your Storybook must be published and publicly accessible Storybook supports <iframe> embeds out of the box If you use Chromatic to publish Storybook, you can also embed stories in Notion, Medium, and countless other platforms that support the oEmbed standard Embed a story with the toolbar\nEmbed a story with the toolbar, and paste the published story URL For example:\n// oEmbed\nhttps://5ccbc373887ca40020446347-wtuhidckxo chromatic com/ path=/story/shadowboxcta--default\n// iframe embed\n<iframe\nsrc=\"https://5ccbc373887ca40020446347-wtuhidckxo chromatic com/",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 517810,
      "relative_path": "documentation\\storybook\\_docs_sharing_embed.html",
      "source_type": "documentation"
    },
    "token_count": 430,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "40903204927b739692837c0bcd42b302",
    "source_file": "corpus\\documentation\\storybook\\_docs_sharing_embed.html",
    "source_type": "documentation",
    "title": "Embed stories | Storybook docs",
    "content": "to use embeds, your Storybook must be published and publicly accessible Storybook supports <iframe> embeds out of the box If you use Chromatic to publish Storybook, you can also embed stories in Notion, Medium, and countless other platforms that support the oEmbed standard Embed a story with the toolbar Embed a story with the toolbar, and paste the published story URL For example: // oEmbed https://5ccbc373887ca40020446347-wtuhidckxo chromatic com/ path=/story/shadowboxcta--default // iframe embed <iframe src=\"https://5ccbc373887ca40020446347-wtuhidckxo chromatic com/path=/story/shadowboxcta--default&full=1&shortcuts=false&singleStory=true\"\nwidth=\"800\"\nheight=\"260\"\n></iframe>\nEmbed a story without the toolbar\nTo embed a plain story without Storybook's toolbar, click the \"open canvas in new tab\" icon in the top-right corner of Storybook to get the canvas URL For example:\n// oEmbed\nhttps://5ccbc373887ca40020446347-wtuhidckxo chromatic com/iframe html id=/story/shadowboxcta--default&viewMode=story\n// iframe embed\n<iframe\nsrc=\"https://5ccbc373887ca40020446347-wtuhidckxo chromatic com/iframe html id=shadowboxcta--default&viewMode=story&shortcuts=false&singleStory=true\"\nwidth=\"800\"\nheight=\"200\"\n></iframe>\nEmbed documentation\nEmbed a documentation page by replacing viewMode=story with the uniquely auto-generated documentation entry for the story // oEmbed\nhttps://5ccbc373887ca40020446347-wtuhidckxo chromatic com/iframe html id=shadowboxcta--docs&viewMode=docs&shortcuts=false&singleStory=true\n// iframe embed\n<iframe\nsrc=\"https://5ccbc373887ca40020446347-wtuhidckxo chromatic com/iframe html id=shadowboxcta--docs&viewMode=docs&shortcuts=false&singleStory=true\"\nwidth=\"800\"\nheight=\"400\"\n></iframe>\nEmbed stories on other platforms\nEvery platform has different levels of embed support Check the documentation of your service to see how they recommend embedding external content",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 517810,
      "relative_path": "documentation\\storybook\\_docs_sharing_embed.html",
      "source_type": "documentation"
    },
    "token_count": 487,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "5bbce8f203ee66f1a08841d5d7969f00",
    "source_file": "corpus\\documentation\\storybook\\_docs_sharing_embed.html",
    "source_type": "documentation",
    "title": "Embed stories | Storybook docs",
    "content": "// iframe embed <iframe src=\"https://5ccbc373887ca40020446347-wtuhidckxo chromatic com/iframe html id=shadowboxcta--default&viewMode=story&shortcuts=false&singleStory=true\" width=\"800\" height=\"200\" ></iframe> Embed documentation Embed a documentation page by replacing viewMode=story with the uniquely auto-generated documentation entry for the story // oEmbed https://5ccbc373887ca40020446347-wtuhidckxo chromatic com/iframe html id=shadowboxcta--docs&viewMode=docs&shortcuts=false&singleStory=true // iframe embed <iframe src=\"https://5ccbc373887ca40020446347-wtuhidckxo chromatic com/iframe html id=shadowboxcta--docs&viewMode=docs&shortcuts=false&singleStory=true\" width=\"800\" height=\"400\" ></iframe> Embed stories on other platforms Every platform has different levels of embed support Check the documentation of your service to see how they recommend embedding external contentHow to embed in MediumPaste the Storybook URL into your Medium article, then press Enter The embed will automatically resize to fit the story's height While editing an article, Medium renders all embeds non-interactive Once your article is published, it will become interactive Preview a demo on Medium How to embed in NotionIn your Notion document, type /embed, press Enter, and paste the story URL as the embed link You can resize the embed as necessary How to embed in GhostType /html in your Ghost post, press Enter and paste the iframe URL You can resize the embed via the width and height properties as required Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 517810,
      "relative_path": "documentation\\storybook\\_docs_sharing_embed.html",
      "source_type": "documentation"
    },
    "token_count": 414,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "e7bc0239a12b24adcb76f8404f4d5e8c",
    "source_file": "corpus\\documentation\\storybook\\_docs_sharing_package-composition.html",
    "source_type": "documentation",
    "title": "Package Composition | Storybook docs",
    "content": "Package Composition | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Sharing » Package CompositionDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQPackage CompositionReactVueAngularWeb ComponentsMoreStorybook is widely used by component libraries and design systems Design system authors can automatically compose their design systems inside their consumer’s Storybooks For example, if you use a design system package, its stories can appear alongside your own That makes it convenient to cross reference usage documentation without leaving Storybook ℹ️Composition via a package requires a secure integration between the service where you publish Storybook and Storybook’s own APIs We recommend publishing Storybook to Chromatic for full support of these features For consumers\nComposition happens automatically if the package supports it When you install the package, Storybook will load its stories alongside your own Set up\nIf you want to configure how the composed Storybook behaves, you can disable the ref element in your storybook/main js storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { StorybookConfig } from '@storybook/your-framework';\nconst config: StorybookConfig = {\nframework: '@storybook/your-framework',\nstories: [' /src/**/* mdx', ' /src/**/* stories",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 525688,
      "relative_path": "documentation\\storybook\\_docs_sharing_package-composition.html",
      "source_type": "documentation"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "b0b75a001d77d309b4c5fc036df87acb",
    "source_file": "corpus\\documentation\\storybook\\_docs_sharing_package-composition.html",
    "source_type": "documentation",
    "title": "Package Composition | Storybook docs",
    "content": "the package supports it When you install the package, Storybook will load its stories alongside your own Set up If you want to configure how the composed Storybook behaves, you can disable the ref element in your storybook/main js storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { StorybookConfig } from '@storybook/your-framework'; const config: StorybookConfig = { framework: '@storybook/your-framework', stories: [' /src/**/* mdx', ' /src/**/* stories@(js|jsx|mjs|ts|tsx)'],\nrefs: {\n'package-name': { disable: true },\n},\n};\nexport default config;\nSwitching versions\nChange the version of the composed Storybook to see how the library evolves This requires configuration from the package author For authors\nComponent library authors can expand adoption by composing their components in their consumer’s Storybooks Add a storybook property in your published package json that contains an object with a url field Point the URL field to a published Storybook at the version you want package json {\n\"storybook\": {\n\"url\": \"https://host com/your-storybook-for-this-version\"\n}\n}\nAutomatic version selection\nIf you're using Chromatic, you can provide a single URL for your Storybook in the storybook url field You do not need to change the URL each time you publish a new version Storybook will automatically find the correct URL for your package For example:\npackage json {\n\"storybook\": {\n\"url\": \"https://master--xyz123 chromatic com\"\n}\n}\nIn this example xyz123 is your Chromatic project id Storybook will automatically compose in the Storybook published to that project corresponding to the version the user has installed Show a version selector\nIf you're using Chromatic, you can provide a list of versions for the user to choose from to experiment with other versions of your package Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 525688,
      "relative_path": "documentation\\storybook\\_docs_sharing_package-composition.html",
      "source_type": "documentation"
    },
    "token_count": 465,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f4e9936905f7966105f1eeee6413ba83",
    "source_file": "corpus\\documentation\\storybook\\_docs_sharing_design-integrations.html",
    "source_type": "documentation",
    "title": "Design integrations | Storybook docs",
    "content": "Design integrations | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Sharing » Design integrationsDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQDesign integrationsReactVueAngularWeb ComponentsMoreStorybook integrates with design tools to speed up your development workflow That helps you debug inconsistencies earlier in the design process, discover existing components to reuse, and compare designs to stories Figma\nFigma is a collaborative UI design tool that allows multiple people to work on the same design simultaneously in the browser There are two ways to integrate Storybook and Figma Embed Storybook in Figma\nEmbed Figma in Storybook\nEmbed Storybook in Figma with the plugin\nStorybook Connect is a Figma plugin that allows you to embed component stories in Figma It’s powered by Storybook embeds and Chromatic, a publishing tool created by the Storybook team Install plugin\nBefore we begin, you must have a Storybook published to Chromatic It provides the index, versions, and access control that back the plugin Go to Storybook Connect to install the plugin In Figma, open the command palette (in Mac OS, use Command + /, in Windows use Control + /) and type Storybook Connect to enable it Follow the instructions to connect and authenticate with Chromatic",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 649142,
      "relative_path": "documentation\\storybook\\_docs_sharing_design-integrations.html",
      "source_type": "documentation"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "960235c5bc346afc828a36a2a8cce591",
    "source_file": "corpus\\documentation\\storybook\\_docs_sharing_design-integrations.html",
    "source_type": "documentation",
    "title": "Design integrations | Storybook docs",
    "content": "a publishing tool created by the Storybook team Install plugin Before we begin, you must have a Storybook published to Chromatic It provides the index, versions, and access control that back the plugin Go to Storybook Connect to install the plugin In Figma, open the command palette (in Mac OS, use Command + /, in Windows use Control + /) and type Storybook Connect to enable it Follow the instructions to connect and authenticate with ChromaticLink stories to Figma components\nLink stories to Figma components, variants, and instances Go to a story in a Storybook published on Chromatic Make sure it’s on the branch you want to link Then copy the URL to the story In Figma, select the component, open the plugin, and paste the URL Chromatic will automatically update your linked stories to reflect the most recent Storybook published on the branch you linked That means the link persists even as you push new code 💡The plugin does not support linking stories to Figma layers View stories in Figma\nOnce they're connected, you'll be able to view the story by clicking the link in the sidebar Click \"View story\" Alternatively, open the plugin by using the command palette (in Mac OS, use Command + /, in Windows, use Control + /), then type Storybook Connect Embed Figma in Storybook with the addon\nDesigns addon allows you to embed Figma files and prototypes in Storybook Install design addon\nRun the following command to install the addon npmnpx storybook@latest add @storybook/addon-designs\nℹ️The CLI's add command automates the addon's installation and setup To install it manually, see our documentation on how to install addons Link Figma components to stories\nIn Figma, open the file you want to embed in Storybook You can embed files, prototypes, components, and frames Embed a file or prototype, click the \"Share\" button to generate a unique URL for the file then click \"Copy link\" Embed a component or frame check \"Link to selected frame\" in the Share dialog Or right click on the frame and go to \"Copy/Paste as\" » \"Copy link\" In Storybook, add a new parameter named design to your story and paste the Figma URL For example:\nMyComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 649142,
      "relative_path": "documentation\\storybook\\_docs_sharing_design-integrations.html",
      "source_type": "documentation"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "4a8dee5787d40a0707e9566b1197b6cd",
    "source_file": "corpus\\documentation\\storybook\\_docs_sharing_design-integrations.html",
    "source_type": "documentation",
    "title": "Design integrations | Storybook docs",
    "content": "button to generate a unique URL for the file then click \"Copy link\" Embed a component or frame check \"Link to selected frame\" in the Share dialog Or right click on the frame and go to \"Copy/Paste as\" » \"Copy link\" In Storybook, add a new parameter named design to your story and paste the Figma URL For example: MyComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etcimport type { Meta, StoryObj } from '@storybook/your-framework';\nimport { MyComponent } from ' /MyComponent';\n// More on default export: https://storybook js org/docs/writing-stories/#default-export\nconst meta = {\ncomponent: MyComponent,\n} satisfies Meta<typeof MyComponent>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const Example: Story = {\nparameters: {\ndesign: {\ntype: 'figma',\nurl: 'https://www figma com/file/Sample-File',\n},\n},\n};\nView designs in Storybook\nClick the \"Design\" tab in the addon panel to view the embedded Figma design Zeplin\nZeplin is a design tool that generates styleguides from Sketch, Figma, and Adobe XD Use the Zeplin addon to connect Storybook The addon displays designs from Zeplin alongside the currently selected story It includes convenient tooling to overlay the design image atop the live component Zeplin's native app also supports links to published Storybooks Zeroheight\nZeroheight is a collaborative styleguide generator for design systems It showcases design, code, brand, and copywriting documentation in one place Users can easily edit that documentation with a WYSIWYG editor Zeroheight integrates with Storybook, enabling you to embed stories alongside your design specs UXPin\nUXPin is an interactive design tool that uses production code to generate prototypes UXPin allows you to use interactive stories to design user flows InVision Design System Manager\nInVision DSM is a design system documentation tool It helps design teams consolidate UX principles, user interface design, and design tokens in a shared workspace InVision allows you to embed Storybook in your design system documentation Adobe XD\nAdobe XD is a UI and UX design tool for creating wireframes, interactive designs, and prototypes Integrate Adobe XD with Storybook using the design addon You can embed design specs alongside stories by following these instructions",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 649142,
      "relative_path": "documentation\\storybook\\_docs_sharing_design-integrations.html",
      "source_type": "documentation"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "13be6df053b329ad2595a27cb2f4eda9",
    "source_file": "corpus\\documentation\\storybook\\_docs_sharing_design-integrations.html",
    "source_type": "documentation",
    "title": "Design integrations | Storybook docs",
    "content": "System Manager InVision DSM is a design system documentation tool It helps design teams consolidate UX principles, user interface design, and design tokens in a shared workspace InVision allows you to embed Storybook in your design system documentation Adobe XD Adobe XD is a UI and UX design tool for creating wireframes, interactive designs, and prototypes Integrate Adobe XD with Storybook using the design addon You can embed design specs alongside stories by following these instructionsBuild your own integration\nExtend and customize Storybook by building an integration Integrate with lower-level Storybook APIs or bootstrap an addon to customize Storybook's UI and behavior Addon documentation\nCreate an addon tutorial\nWas this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 649142,
      "relative_path": "documentation\\storybook\\_docs_sharing_design-integrations.html",
      "source_type": "documentation"
    },
    "token_count": 199,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "a73b61cc092170b052fa0dc1247cea4d",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-docs.html",
    "source_type": "documentation",
    "title": "How to document components | Storybook docs",
    "content": "How to document components | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs DocsDocs » DocsDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQHow to document componentsWhen you write component stories during development, you also create basic documentation to revisit later Storybook gives you tools to expand this essential documentation with prose and layout that feature your components and stories prominently That allows you to create UI library usage guidelines, design system sites, and more If you're including Storybook in your project for the first time, we provide you with a documentation page (\"Autodocs\" for short), positioned near your stories It's a baseline template automatically generated, listing your existing stories and relevant metadata Additionally, you can customize this template if needed or create free-form pages for each component using MDX In both cases, you’ll use Doc Blocks as the building blocks to create full-featured documentation Docs is autoconfigured to work out of the box in most use cases In some cases, you may need or want to tweak the configuration Read more about it here Was this page useful",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 468810,
      "relative_path": "documentation\\storybook\\_docs_writing-docs.html",
      "source_type": "documentation"
    },
    "token_count": 440,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "76cf4266755376d5f0548ef5d091e605",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-docs.html",
    "source_type": "documentation",
    "title": "How to document components | Storybook docs",
    "content": "template automatically generated, listing your existing stories and relevant metadata Additionally, you can customize this template if needed or create free-form pages for each component using MDX In both cases, you’ll use Doc Blocks as the building blocks to create full-featured documentation Docs is autoconfigured to work out of the box in most use cases In some cases, you may need or want to tweak the configuration Read more about it here Was this page useful👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 468810,
      "relative_path": "documentation\\storybook\\_docs_writing-docs.html",
      "source_type": "documentation"
    },
    "token_count": 153,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c66f5a7f7b37196fd56dbad585bef9b2",
    "source_file": "corpus\\documentation\\storybook\\_docs_sharing_storybook-composition.html",
    "source_type": "documentation",
    "title": "Storybook Composition | Storybook docs",
    "content": "Storybook Composition | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Sharing » CompositionDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQStorybook CompositionReactVueAngularWeb ComponentsMoreComposition allows you to browse components from any Storybook accessible via URL inside your local Storybook You can compose any Storybook published online or running locally no matter the view layer, tech stack, or dependencies You’ll see the composed Storybook’s stories in the sidebar alongside your own This unlocks common workflows that teams often struggle with:\n👩‍💻 UI developers can quickly reference prior art without switching between Storybooks 🎨 Design systems can expand adoption by composing themselves into their users’ Storybooks 🛠 Frontend platform can audit how components are used across projects 📚 View multiple Storybooks with different tech stacks in one place\nCompose published Storybooks\nIn your storybook/main js|ts file add a refs field with information about the reference Storybook Pass in a URL to a statically built Storybook storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { StorybookConfig } from '@storybook/your-framework';\nconst config: StorybookConfig = {\nframework: '@storybook/your-framework',\nstories: [' /src/**/*",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 590827,
      "relative_path": "documentation\\storybook\\_docs_sharing_storybook-composition.html",
      "source_type": "documentation"
    },
    "token_count": 503,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "9d33ac1a539f8774b24e3039a1f597a3",
    "source_file": "corpus\\documentation\\storybook\\_docs_sharing_storybook-composition.html",
    "source_type": "documentation",
    "title": "Storybook Composition | Storybook docs",
    "content": "components are used across projects 📚 View multiple Storybooks with different tech stacks in one place Compose published Storybooks In your storybook/main js|ts file add a refs field with information about the reference Storybook Pass in a URL to a statically built Storybook storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { StorybookConfig } from '@storybook/your-framework'; const config: StorybookConfig = { framework: '@storybook/your-framework', stories: [' /src/**/*mdx', ' /src/**/* stories @(js|jsx|mjs|ts|tsx)'],\nrefs: {\n'design-system': {\ntitle: 'Storybook Design System',\nurl: 'https://master--5ccbc373887ca40020446347 chromatic com/',\nexpanded: false, // Optional, true by default,\nsourceUrl: 'https://github com/storybookjs/storybook', // Optional\n},\n},\n};\nexport default config;\n⚠️Addons in composed Storybooks will not work as they normally do in a non-composed Storybook Compose local Storybooks\nYou can also compose multiple Storybooks that are running locally For instance, if you have a React Storybook and an Angular Storybook running on different ports, you can update your configuration file (i e , storybook/main js|ts) and reference them as follows: storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { StorybookConfig } from '@storybook/your-framework';\nconst config: StorybookConfig = {\nframework: '@storybook/your-framework',\nstories: [' /src/**/* mdx', ' /src/**/* stories @(js|jsx|mjs|ts|tsx)'],\nrefs: {\nreact: {\ntitle: 'React',\nurl: 'http://localhost:7007',\n},\nangular: {\ntitle: 'Angular',\nurl: 'http://localhost:7008',\n},\n},\n};\nexport default config;\nAdding this configuration will combine React and Angular Storybooks into your current one You’ll see the changes being applied automatically when either of these changes Enabling you to develop both frameworks in sync Compose Storybooks per environment\nYou can also compose Storybooks based on the current development environment (e g , development, staging, production)",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 590827,
      "relative_path": "documentation\\storybook\\_docs_sharing_storybook-composition.html",
      "source_type": "documentation"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "cf8db9540c68a119215264bf3ba9298e",
    "source_file": "corpus\\documentation\\storybook\\_docs_sharing_storybook-composition.html",
    "source_type": "documentation",
    "title": "Storybook Composition | Storybook docs",
    "content": "@(js|jsx|mjs|ts|tsx)'], refs: { react: { title: 'React', url: 'http://localhost:7007', }, angular: { title: 'Angular', url: 'http://localhost:7008', }, }, }; export default config; Adding this configuration will combine React and Angular Storybooks into your current one You’ll see the changes being applied automatically when either of these changes Enabling you to develop both frameworks in sync Compose Storybooks per environment You can also compose Storybooks based on the current development environment (e g , development, staging, production)For instance, if the project you're working on already has a published Storybook but also includes a version with cutting-edge features not yet released, you can adjust the composition based on that For example: storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { StorybookConfig } from '@storybook/your-framework';\nconst config: StorybookConfig = {\nframework: '@storybook/your-framework',\nstories: [' /src/**/* mdx', ' /src/**/* stories @(js|jsx|mjs|ts|tsx)'],\n// 👇 Retrieve the current environment from the configType argument\nrefs: (config, { configType }) => {\nif (configType === 'DEVELOPMENT') {\nreturn {\nreact: {\ntitle: 'Composed React Storybook running in development mode',\nurl: 'http://localhost:7007',\n},\nangular: {\ntitle: 'Composed Angular Storybook running in development mode',\nurl: 'http://localhost:7008',\n},\n};\n}\nreturn {\nreact: {\ntitle: 'Composed React Storybook running in production',\nurl: 'https://your-production-react-storybook-url',\n},\nangular: {\ntitle: 'Composed Angular Storybook running in production',\nurl: 'https://your-production-angular-storybook-url',\n},\n};\n},\n};\nexport default config;\n💡Similar to other fields available in Storybook’s configuration file, the refs field can also be a function that accepts a config parameter containing Storybook’s configuration object See the API reference for more information",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 590827,
      "relative_path": "documentation\\storybook\\_docs_sharing_storybook-composition.html",
      "source_type": "documentation"
    },
    "token_count": 450,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "d005b1af2ffd50aaf1258090f6798822",
    "source_file": "corpus\\documentation\\storybook\\_docs_sharing_storybook-composition.html",
    "source_type": "documentation",
    "title": "Storybook Composition | Storybook docs",
    "content": "Angular Storybook running in development mode', url: 'http://localhost:7008', }, }; } return { react: { title: 'Composed React Storybook running in production', url: 'https://your-production-react-storybook-url', }, angular: { title: 'Composed Angular Storybook running in production', url: 'https://your-production-angular-storybook-url', }, }; }, }; export default config; 💡Similar to other fields available in Storybook’s configuration file, the refs field can also be a function that accepts a config parameter containing Storybook’s configuration object See the API reference for more informationTroubleshooting\nStorybook composition is not working with my project\nIf you're working with an outdated Storybook version or have a project-specific requirement that prevents you from updating your Storybook to the latest version, you can rely on the Storybook CLI to generate the index json file when you deploy your Storybook For example:\nnpmnpx storybook@7 5 3 extract\nℹ️The usage of a specific version of the CLI is intended as the extract command is not available in Storybook 8 0 or higher It also requires you to provide additional configuration to generate the index json file accurately See the previous documentation for more information Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 590827,
      "relative_path": "documentation\\storybook\\_docs_sharing_storybook-composition.html",
      "source_type": "documentation"
    },
    "token_count": 327,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "7caec9e0cb363476e33a9eac0bed2343",
    "source_file": "corpus\\documentation\\storybook\\_docs_sharing_publish-storybook.html",
    "source_type": "documentation",
    "title": "Publish Storybook | Storybook docs",
    "content": "Publish Storybook | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Sharing » PublishDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQPublish StorybookReactVueAngularWeb ComponentsMoreWatch a video tutorial\nTeams publish Storybook online to review and collaborate on works in progress That allows developers, designers, PMs, and other stakeholders to check if the UI looks right without touching code or requiring a local dev environment Build Storybook as a static web application\nFirst, we'll need to build Storybook as a static web application The functionality is already built-in and pre-configured for most supported frameworks Run the following command inside your project's root directory:\nnpmnpm run build-storybook\n💡You can provide additional flags to customize the command Read more about the flag options here Storybook will create a static web application capable of being served by any web server Preview it locally by running the following command:\nnpmnpx http-server /path/to/build\nCustomizing the build for performance\nBy default, Storybook's production build will encapsulate all stories and documentation into the production bundle This is ideal for small projects but can cause performance issues for larger projects or when decreased build times are a priority (e g , testing, CI/CD) If you need, you can customize the production build with the test option in your main",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 640112,
      "relative_path": "documentation\\storybook\\_docs_sharing_publish-storybook.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "d22a798676ff3603758eefcef59942f9",
    "source_file": "corpus\\documentation\\storybook\\_docs_sharing_publish-storybook.html",
    "source_type": "documentation",
    "title": "Publish Storybook | Storybook docs",
    "content": "web server Preview it locally by running the following command: npmnpx http-server /path/to/build Customizing the build for performance By default, Storybook's production build will encapsulate all stories and documentation into the production bundle This is ideal for small projects but can cause performance issues for larger projects or when decreased build times are a priority (e g , testing, CI/CD) If you need, you can customize the production build with the test option in your mainjs|ts configuration file and adjust your build script to enable the optimizations with the --test flag npmnpm run build-storybook -- --test\nBuild Storybook for older browsers\nThe Storybook app's UI supports modern browsers If you need to run the app in older, unsupported browsers, you can use the --preview-only CLI flag to build Storybook in \"preview-only\" mode This skips building the Storybook manager (the UI surrounding your stories) and only builds the preview (the iframe that contains your stories) That makes your Storybook builder and its configuration solely responsible for which browsers are supported When in \"preview-only\" mode, the normal entry point, /index html, will result in a 404, because the client-side router is not available To work around this, start from the /iframe html route and add the navigator=true query parameter to the URL This will render a basic, HTML-only sidebar inside the preview so that you can navigate to your stories For example, you can access the preview at http://localhost:6006/iframe html navigator=true (you may need to update the port number) This applies to both the build (for publishing) and dev (for local development) commands Publish Storybook with Chromatic\nOnce you've built your Storybook as a static web application, you can publish it to your web host We recommend Chromatic, a free publishing service made for Storybook that documents, versions, and indexes your UI components securely in the cloud To get started, sign up with your GitHub, GitLab, Bitbucket, or email and generate a unique project-token for your project Next, install the Chromatic CLI package from npm:\nnpmnpm install chromatic --save-dev\nRun the following command after the package finishes installing Make sure that you replace your-project-token with your own project token npx chromatic --project-token=<your-project-token>\nWhen Chromatic finishes, you should have successfully deployed your Storybook Preview it by clicking the link provided (i e",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 640112,
      "relative_path": "documentation\\storybook\\_docs_sharing_publish-storybook.html",
      "source_type": "documentation"
    },
    "token_count": 496,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "87da7dabf2641e57cd3a924754890a36",
    "source_file": "corpus\\documentation\\storybook\\_docs_sharing_publish-storybook.html",
    "source_type": "documentation",
    "title": "Publish Storybook | Storybook docs",
    "content": "the cloud To get started, sign up with your GitHub, GitLab, Bitbucket, or email and generate a unique project-token for your project Next, install the Chromatic CLI package from npm: npmnpm install chromatic --save-dev Run the following command after the package finishes installing Make sure that you replace your-project-token with your own project token npx chromatic --project-token=<your-project-token> When Chromatic finishes, you should have successfully deployed your Storybook Preview it by clicking the link provided (i e, https://random-uuid chromatic com) Build 1 published View it online at https://www chromatic com/build appId= &number=1 Setup CI to publish automatically\nConfigure your CI environment to publish your Storybook and run Chromatic whenever you push code to a repository Let's see how to set it up using GitHub Actions In your project's root directory, add a new file called chromatic yml inside the github/workflows directory: github/workflows/chromatic yml# Workflow name\nname: 'Chromatic Publish'\n# Event for the workflow\non: push\n# List of jobs\njobs:\ntest:\n# Operating System\nruns-on: ubuntu-latest\n# Job steps\nsteps:\n- uses: actions/checkout@v4\nwith:\nfetch-depth: 0\n- uses: actions/setup-node@v4\nwith:\nnode-version: 20\ncache: 'yarn'\n- run: yarn\n#👇 Adds Chromatic as a step in the workflow\n- uses: chromaui/action@latest\n# Options required for Chromatic's GitHub Action\nwith:\n#👇 Chromatic projectToken,\nprojectToken: ${{ secrets CHROMATIC_PROJECT_TOKEN }}\ntoken: ${{ secrets GITHUB_TOKEN }}\n💡Secrets are secure environment variables provided by GitHub so that you don't need to hard code your project-token Read the official documentation to learn how to configure them Commit and push the file Congratulations, you've successfully automated publishing your Storybook Now whenever you open a PR you’ll get a handy link to your published Storybook in your PR checks Review with your team\nPublishing Storybook as part of the development process makes it quick and easy to gather team feedback A common method to ask for review is to paste a link to the published Storybook in a pull request or Slack",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 640112,
      "relative_path": "documentation\\storybook\\_docs_sharing_publish-storybook.html",
      "source_type": "documentation"
    },
    "token_count": 480,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "9501c0714a0bd9b6895d0ead2d45b024",
    "source_file": "corpus\\documentation\\storybook\\_docs_sharing_publish-storybook.html",
    "source_type": "documentation",
    "title": "Publish Storybook | Storybook docs",
    "content": "configure them Commit and push the file Congratulations, you've successfully automated publishing your Storybook Now whenever you open a PR you’ll get a handy link to your published Storybook in your PR checks Review with your team Publishing Storybook as part of the development process makes it quick and easy to gather team feedback A common method to ask for review is to paste a link to the published Storybook in a pull request or SlackIf you publish your Storybook to Chromatic, you can use the UI Review feature to automatically scan your PRs for new and updated stories That makes it easy to identify what changed and give feedback Versioning and history\nWhen you publish Storybook, you also get component history and versioning down to the commit That's useful during implementation review for comparing components between branches/commits to past versions Publish Storybook to other services\nSince Storybook is built as a static web application, you can also publish it to any web host, including GitHub Pages, Netlify, AWS S3, and more However, features such as Composition, embedding stories, history, versioning, and assets may require tighter integration with Storybook APIs and secure authentication If you want to know more about headers, you can refer to the Migration guide Additionally, if you want to learn about the Component Publishing Protocol (CPP), you can find more information below GitHub Pages\nTo deploy Storybook on GitHub Pages, use the community-built Deploy Storybook to GitHub Pages Action To enable it, create a new workflow file inside your github/workflows directory with the following content: github/workflows/deploy-github-pages yml# Workflow name\nname: Build and Publish Storybook to GitHub Pages\non:\n# Event for the workflow to run on\npush:\nbranches:\n- 'your-branch-name' # Replace with the branch you want to deploy from\npermissions:\ncontents: read\npages: write\nid-token: write\n# List of jobs\njobs:\ndeploy:\nruns-on: ubuntu-latest\n# Job steps\nsteps:\n# Manual Checkout\n- uses: actions/checkout@v4\nwith:\nfetch-depth: 0\n# Set up Node\n- uses: actions/setup-node@v4\nwith:\nnode-version: '20'\n#👇 Add Storybook build and deploy to GitHub Pages as a step in the workflow\n- uses: bitovi/github-actions-storybook-to-github-pages@v1 0",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 640112,
      "relative_path": "documentation\\storybook\\_docs_sharing_publish-storybook.html",
      "source_type": "documentation"
    },
    "token_count": 488,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "d4d84e55d82d5bb6cb656de09f494483",
    "source_file": "corpus\\documentation\\storybook\\_docs_sharing_publish-storybook.html",
    "source_type": "documentation",
    "title": "Publish Storybook | Storybook docs",
    "content": "the workflow to run on push: branches: - 'your-branch-name' # Replace with the branch you want to deploy from permissions: contents: read pages: write id-token: write # List of jobs jobs: deploy: runs-on: ubuntu-latest # Job steps steps: # Manual Checkout - uses: actions/checkout@v4 with: fetch-depth: 0 # Set up Node - uses: actions/setup-node@v4 with: node-version: '20' #👇 Add Storybook build and deploy to GitHub Pages as a step in the workflow - uses: bitovi/github-actions-storybook-to-github-pages@v1 03\nwith:\ninstall_command: yarn install # default: npm ci\nbuild_command: yarn build-storybook # default: npm run build-storybook\npath: storybook-static # default: dist/storybook\ncheckout: false # default: true\nℹ️The GitHub Pages Action requires additional configuration options to customize the deployment process Refer to the official documentation for more information Component Publishing Protocol (CPP)Storybook can communicate with services that host built Storybooks online This enables features such as Composition We categorize services via compliance with the \"Component Publishing Protocol\" (CPP) with various levels of support in Storybook CPP level 1This level of service serves published Storybooks and makes the following available:\nVersioned endpoints, URLs that resolve to different published Storybooks depending on a version=x y z query parameter (where x y z is the released version of the package) Support for /index json (formerly /stories json) endpoint, which returns a list of stories and their metadata Support for /metadata json and the releases field Example: ChromaticCPP level 0This level of service can serve published Storybooks but has no further integration with Storybook’s APIs Examples: Netlify, S3\nSearch engine optimization (SEO)\nIf your Storybook is publicly viewable, you may wish to configure how it is represented in search engine result pages Description\nYou can provide a description for search engines to display in the results listing, by adding the following to the manager-head html file in your config directory: storybook/manager-head html<meta name=\"description\" content=\"Components for my awesome project\" key=\"desc\" />\nPreventing your Storybook from being crawled\nYou can prevent your published Storybook from appearing in search engine results by including a noindex meta tag, which you can do by adding the following to the manager-head",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 640112,
      "relative_path": "documentation\\storybook\\_docs_sharing_publish-storybook.html",
      "source_type": "documentation"
    },
    "token_count": 501,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "e654322aebe9c64daa0ba6f085887b70",
    "source_file": "corpus\\documentation\\storybook\\_docs_sharing_publish-storybook.html",
    "source_type": "documentation",
    "title": "Publish Storybook | Storybook docs",
    "content": "engine result pages Description You can provide a description for search engines to display in the results listing, by adding the following to the manager-head html file in your config directory: storybook/manager-head html<meta name=\"description\" content=\"Components for my awesome project\" key=\"desc\" /> Preventing your Storybook from being crawled You can prevent your published Storybook from appearing in search engine results by including a noindex meta tag, which you can do by adding the following to the manager-headhtml file in your config directory: storybook/manager-head html<meta name=\"robots\" content=\"noindex\" />\nWas this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 640112,
      "relative_path": "documentation\\storybook\\_docs_sharing_publish-storybook.html",
      "source_type": "documentation"
    },
    "token_count": 193,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "c6718fc0f2dc09a2cde4430c8b8a1eba",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-docs_build-documentation.html",
    "source_type": "documentation",
    "title": "Preview and build docs | Storybook docs",
    "content": "Preview and build docs | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Docs » Preview and build docsDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQPreview and build docsReactVueAngularWeb ComponentsMoreStorybook allows you to create rich and extensive documentation that will help you and any other stakeholder involved in the development process Out of the box you have the tooling required to not only write it but also to preview it and build it Preview Storybook's documentation\nAt any point during your development, you can preview the documentation you've written Storybook allows you to generate a preview of the final documentation when you use the --docs flag We recommend including it in your package json as a new script:\npackage json {\n\"scripts\": {\n\"storybook-docs\": \"storybook dev --docs\"\n}\n}\nDepending on your configuration, when you execute the storybook-docs script Storybook will be put into documentation mode and will generate a different build It will look for any stories available either in MDX or CSF and based on the documentation you've added it will display it There's some caveats to this build mode, as to the normal Storybook build:\nThe top level item refers to the primary story for your component Each individual story is now in a flattened display mode, with a different set of icons This allows focus on the documentation itself",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 498887,
      "relative_path": "documentation\\storybook\\_docs_writing-docs_build-documentation.html",
      "source_type": "documentation"
    },
    "token_count": 502,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "fbb7e99bf92de4b22a1cc840d28018ee",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-docs_build-documentation.html",
    "source_type": "documentation",
    "title": "Preview and build docs | Storybook docs",
    "content": "will generate a different build It will look for any stories available either in MDX or CSF and based on the documentation you've added it will display it There's some caveats to this build mode, as to the normal Storybook build: The top level item refers to the primary story for your component Each individual story is now in a flattened display mode, with a different set of icons This allows focus on the documentation itselfStorybook's layout is rendered differently The toolbar will not be displayed Publish Storybook's documentation\nYou can also publish your documentation the same you would publish your Storybook You can use the --docs flag with the storybook build command We recommend as well including it as a script in your package json file:\npackage json {\n\"scripts\": {\n\"build-storybook-docs\": \"storybook build --docs\"\n}\n}\nBased on the configuration you have, when the build-storybook-docs script is executed, Storybook once again will be put into documentation mode and will generate a different build and output the documentation into the storybook-static folder The same caveats mentioned above will apply You can use any hosting provider to deploy your documentation, for instance:\nVercel\nNetlify\nS3\nLearn more about Storybook documentation\nAutodocs for creating documentation for your stories\nMDX for customizing your documentation\nDoc Blocks for authoring your documentation\nPublishing docs to automate the process of publishing your documentation\nWas this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 498887,
      "relative_path": "documentation\\storybook\\_docs_writing-docs_build-documentation.html",
      "source_type": "documentation"
    },
    "token_count": 359,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "aef6f42ec84ef98690a68672be2a8ea0",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-docs_code-panel.html",
    "source_type": "documentation",
    "title": "Code panel | Storybook docs",
    "content": "Code panel | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Docs » Code panelDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQCode panelReactVueAngularWeb ComponentsMoreℹ️Code Panel is a replacement for the Storysource addon, which was discontinued in Storybook 9 The Code panel renders a story’s source code when viewing that story in the canvas Any args defined in the story are replaced with their values in the output Usage\nTo enable the Code panel, set parameters docs codePanel to true For most projects, this is best done in the storybook/preview js|ts file, to apply to all stories storybook/preview tsTypescript// Replace your-framework with the framework you are using (e g , react-vite, vue3-vite, angular, etc )\nimport type { Preview } from '@storybook/your-framework';\nconst preview: Preview = {\nparameters: {\ndocs: {\ncodePanel: true,\n},\n},\n};\nexport default preview;\nYou can also enable it at the component or story level:\nButton stories ts|tsxTypescriptimport type { Meta, StoryObj } from '@storybook/react-vite';\nimport { Button } from '",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 639148,
      "relative_path": "documentation\\storybook\\_docs_writing-docs_code-panel.html",
      "source_type": "documentation"
    },
    "token_count": 469,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "28f951d92bcebc52be6499eea45389c4",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-docs_code-panel.html",
    "source_type": "documentation",
    "title": "Code panel | Storybook docs",
    "content": "js|ts file, to apply to all stories storybook/preview tsTypescript// Replace your-framework with the framework you are using (e g , react-vite, vue3-vite, angular, etc ) import type { Preview } from '@storybook/your-framework'; const preview: Preview = { parameters: { docs: { codePanel: true, }, }, }; export default preview; You can also enable it at the component or story level: Button stories ts|tsxTypescriptimport type { Meta, StoryObj } from '@storybook/react-vite'; import { Button } from '/Button';\nconst meta = {\ncomponent: Button,\nparameters: {\ndocs: {\n// 👇 Enable Code panel for all stories in this file\ncodePanel: true,\n},\n},\n} satisfies Meta<typeof Button>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n// 👇 This story will display the Code panel\nconst Primary: Story = {\nargs: {\nchildren: 'Button',\n},\n};\nconst Secondary: Story = {\nargs: {\nchildren: 'Button',\nvariant: 'secondary',\n},\nparameters: {\ndocs: {\n// 👇 Disable Code panel for this specific story\ncodePanel: false,\n},\n},\n};\nConfiguration\nCode panel renders the same snippet as the Source docs block, which is also used in Autodocs pages The snippet is customizable and reuses the Source configuration parameters Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 639148,
      "relative_path": "documentation\\storybook\\_docs_writing-docs_code-panel.html",
      "source_type": "documentation"
    },
    "token_count": 350,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "0384abe1905168f89d9a153568fd1d8d",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-docs_doc-blocks.html",
    "source_type": "documentation",
    "title": "Doc blocks | Storybook docs",
    "content": "Doc blocks | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Docs » Doc blocksDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQDoc blocksReactVueAngularWeb ComponentsMoreStorybook offers several doc blocks to help document your components and other aspects of your project There are two common ways to use doc blocks in Storybook, within MDX and as part of the docs page template Within MDX\nThe blocks are most commonly used within Storybook's MDX documentation:\nButtonDocs mdx import { Meta, Primary, Controls, Story } from '@storybook/addon-docs/blocks';\nimport * as ButtonStories from ' /Button stories';\n<Meta of={ButtonStories} />\n# Button\nA button is <Primary />\n## Props\n<Controls />\n## Stories\n### Primary\nA button can be of primary importance <Story of={ButtonStories Primary} />\nA button can be of secondary importance <Story of={ButtonStories Secondary} />\n{/* */}\nCustomizing the automatic docs page\nThe blocks are also used to define the page template for automatics docs",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 686949,
      "relative_path": "documentation\\storybook\\_docs_writing-docs_doc-blocks.html",
      "source_type": "documentation"
    },
    "token_count": 446,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "e25380f336e63aa7c36f3442cbcd26c1",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-docs_doc-blocks.html",
    "source_type": "documentation",
    "title": "Doc blocks | Storybook docs",
    "content": "{ Meta, Primary, Controls, Story } from '@storybook/addon-docs/blocks'; import * as ButtonStories from ' /Button stories'; <Meta of={ButtonStories} /> # Button A button is <Primary /> ## Props <Controls /> ## Stories ### Primary A button can be of primary importance <Story of={ButtonStories Primary} /> A button can be of secondary importance <Story of={ButtonStories Secondary} /> {/* */} Customizing the automatic docs page The blocks are also used to define the page template for automatics docsFor example, here's the default template:\nimport { Title, Subtitle, Description, Primary, Controls, Stories } from '@storybook/addon-docs/blocks';\nexport const autoDocsTemplate = () => (\n<>\n<Title />\n<Subtitle />\n<Description />\n<Primary />\n<Controls />\n<Stories />\n</>\n);\nIf you override the default page template, you can similarly use Doc Blocks to build the perfect documentation page for your project Note that some doc blocks render other blocks For example, the <Stories /> block expands to:\n## Stories\n<Canvas>\n### Story name\n<Description />\n<Story />\n<Source />\n</Canvas>\n{/* repeat <Canvas> for each story */}\nAs a result, for example, customizing the Source block via parameters (see next section) will also affect the Source blocks rendered as part of Canvas blocks Customizing doc blocks\nIn both use cases (MDX and automatic docs), many of the doc blocks can be customized via parameters For example, you can filter out the style prop from all Controls tables through your Storybook: storybook/preview tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Preview } from '@storybook/your-framework';\nconst preview: Preview = {\nparameters: {\ndocs: {\ncontrols: { exclude: ['style'] },\n},\n},\n};\nexport default preview;\nℹ️Parameters can also be defined at the component (or meta) level or the story level, allowing you to customize Doc Blocks exactly as you need, where you need The blocks that accept customization via parameters are marked in the list of available blocks below When using a doc block in MDX, it can also be customized with its props:\n<Controls exclude={['style']}>\nAvailable blocks\nEach block has a dedicated API reference page detailing usage, available options, and technical details",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 686949,
      "relative_path": "documentation\\storybook\\_docs_writing-docs_doc-blocks.html",
      "source_type": "documentation"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "bee48324b3c3c6992793eb57a498990a",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-docs_doc-blocks.html",
    "source_type": "documentation",
    "title": "Doc blocks | Storybook docs",
    "content": "also be defined at the component (or meta) level or the story level, allowing you to customize Doc Blocks exactly as you need, where you need The blocks that accept customization via parameters are marked in the list of available blocks below When using a doc block in MDX, it can also be customized with its props: <Controls exclude={['style']}> Available blocks Each block has a dedicated API reference page detailing usage, available options, and technical detailsArgTypes\nℹ️Accepts parameters in the namespace parameters docs argTypes The ArgTypes block can be used to show a static table of arg types for a given component as a way to document its interface Canvas\nℹ️Accepts parameters in the namespace parameters docs canvas The Canvas block is a wrapper around a Story, featuring a toolbar that allows you to interact with its content while automatically providing the required Source snippets ColorPalette\nThe ColorPalette block allows you to document all color-related items (e g , swatches) used throughout your project Controls\nℹ️Accepts parameters in the namespace parameters docs controls The Controls block can be used to show a dynamic table of args for a given story, as a way to document its interface, and to allow you to change the args for a (separately) rendered story (via the Story or Canvas blocks) Description\nThe Description block displays the description for a component, story, or meta obtained from their respective JSDoc comments IconGallery\nThe IconGallery block lets you quickly document all icons associated with your project, displayed in a neat grid Markdown\nThe Markdown block allows you to import and include plain markdown in your MDX files Meta\nThe Meta block is used to attach a custom MDX docs page alongside a component’s list of stories It doesn’t render any content but serves two purposes in an MDX file:\nAttaches the MDX file to a component and its stories, or\nControls the location of the unattached docs entry in the sidebar Primary\nThe Primary block displays the primary (first defined in the stories file) story in a Story block It is typically rendered immediately under the title in a docs entry Source\nℹ️Accepts parameters in the namespace parameters docs source The Source block is used to render a snippet of source code directly Stories\nThe Stories block renders the full collection of stories in a stories file Story\nℹ️Accepts parameters in the namespace parameters docs story Stories are Storybook's fundamental building blocks",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 686949,
      "relative_path": "documentation\\storybook\\_docs_writing-docs_doc-blocks.html",
      "source_type": "documentation"
    },
    "token_count": 492,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "cf66ab6ee3028b39459fee5964ca6eea",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-docs_doc-blocks.html",
    "source_type": "documentation",
    "title": "Doc blocks | Storybook docs",
    "content": "the primary (first defined in the stories file) story in a Story block It is typically rendered immediately under the title in a docs entry Source ℹ️Accepts parameters in the namespace parameters docs source The Source block is used to render a snippet of source code directly Stories The Stories block renders the full collection of stories in a stories file Story ℹ️Accepts parameters in the namespace parameters docs story Stories are Storybook's fundamental building blocksIn Storybook Docs, you can render any of your stories from your CSF files in the context of an MDX file with all annotations (parameters, args, loaders, decorators, play function) applied using the Story block Subtitle\nThe Subtitle block can serve as a secondary heading for your docs entry Title\nThe Title block serves as the primary heading for your docs entry It is typically used to provide the component or page name Typeset\nThe Typeset block helps document the fonts used throughout your project Unstyled\nThe Unstyled block is a unique block that disables Storybook's default styling in MDX docs wherever it is added By default, most elements (like h1, p, etc ) in docs have a few default styles applied to ensure the docs look good However, sometimes you might want some of your content not to have these styles applied In those cases, wrap the content with the Unstyled block to remove the default styles Make your own Doc Blocks\nStorybook also provides a useOf hook to make it easier to create your own blocks that function like the built-in blocks Troubleshooting\nWhy can't I use the Doc Blocks inside my stories Storybook's Doc Blocks are highly customizable and helpful building blocks to assist you with building your custom documentation Although most of them enable you to customize them with parameters or globally to create custom documentation templates, they are primarily designed for MDX files For example, if you try to add the ColorPalette block to your stories as follows, you'll get an error message when the story loads in Storybook MyComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { ColorItem, ColorPalette } from '@storybook/addon-docs/blocks';\nimport { MyComponent } from '",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 686949,
      "relative_path": "documentation\\storybook\\_docs_writing-docs_doc-blocks.html",
      "source_type": "documentation"
    },
    "token_count": 471,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "640abe500370555ee9d57f4b5c96684a",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-docs_doc-blocks.html",
    "source_type": "documentation",
    "title": "Doc blocks | Storybook docs",
    "content": "globally to create custom documentation templates, they are primarily designed for MDX files For example, if you try to add the ColorPalette block to your stories as follows, you'll get an error message when the story loads in Storybook MyComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework'; import { ColorItem, ColorPalette } from '@storybook/addon-docs/blocks'; import { MyComponent } from '/MyComponent';\nconst meta = {\ncomponent: MyComponent,\n} satisfies Meta<typeof MyComponent>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nconst theme = {\ncolors: {\nprimaryDark: {\nvalue: '#1C1C1C',\n},\nprimaryRegular: {\nvalue: '#363636',\n},\nprimaryLight1: {\nvalue: '#4D4D4D',\n},\nprimaryLight2: {\nvalue: '#878787',\n},\nprimaryLight3: {\nvalue: '#D1D1D1',\n},\nprimaryLight4: {\nvalue: '#EDEDED',\n},\n},\n};\n// ❌ Don't use the Doc Blocks inside your stories It will break Storybook with a cryptic error export const Colors: Story = {\nrender: () => (\n<ColorPalette>\n{Object entries(theme colors) map(([key, { value }]) => (\n<ColorItem\ncolors={{\n[key]: value,\n}}\nkey={key}\nsubtitle={`theme colors ${key}`}\ntitle={key}\n/>\n))}\n</ColorPalette>\n),\n};\nLearn more about Storybook documentation\nAutodocs for creating documentation for your stories\nMDX for customizing your documentation\nDoc Blocks for authoring your documentation\nPublishing docs to automate the process of publishing your documentation\nWas this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 686949,
      "relative_path": "documentation\\storybook\\_docs_writing-docs_doc-blocks.html",
      "source_type": "documentation"
    },
    "token_count": 442,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "30ccd0ee652710040523bbd44a6e29cf",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-docs_autodocs.html",
    "source_type": "documentation",
    "title": "Automatic documentation and Storybook | Storybook docs",
    "content": "Automatic documentation and Storybook | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Docs » AutodocsDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQAutomatic documentation and StorybookReactVueAngularWeb ComponentsMoreStorybook Autodocs is a powerful tool that can help you quickly generate comprehensive documentation for your UI components By leveraging Autodocs, you're transforming your stories into living documentation which can be further extended with MDX and Doc Blocks to provide a clear and concise understanding of your components' functionality Storybook infers the relevant metadata (e g , args, argTypes, parameters) and automatically generates a documentation page with this information positioned at the root-level of your component tree in the sidebar Set up automated documentation\nAutodocs is configured through tags If a CSF file contains at least one story tagged with autodocs, then a documentation page will be generated for that component To enable automatic documentation for all stories in a project, add it to tags in your storybook/preview js|ts file: storybook/preview tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Preview } from '@storybook/your-framework';\nconst preview: Preview = {\n//",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1260317,
      "relative_path": "documentation\\storybook\\_docs_writing-docs_autodocs.html",
      "source_type": "documentation"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 13
  },
  {
    "id": "156d275a68ee67620397dc69cb18f0d9",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-docs_autodocs.html",
    "source_type": "documentation",
    "title": "Automatic documentation and Storybook | Storybook docs",
    "content": "documentation Autodocs is configured through tags If a CSF file contains at least one story tagged with autodocs, then a documentation page will be generated for that component To enable automatic documentation for all stories in a project, add it to tags in your storybook/preview js|ts file: storybook/preview tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Preview } from '@storybook/your-framework'; const preview: Preview = { //rest of preview\n//👇 Enables auto-generated documentation for all stories\ntags: ['autodocs'],\n};\nexport default preview;\nYou can also enable it at the component (or story) level:\nButton stories tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { Button } from ' /Button';\nconst meta = {\ncomponent: Button,\n//👇 Enables auto-generated documentation for this component and includes all stories in this file\ntags: ['autodocs'],\n} satisfies Meta<typeof Button>;\nexport default meta;\nYou can disable auto docs for a particular component by removing the tag:\nPage stories tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { Page } from ' /Page';\nconst meta = {\ncomponent: Page,\n// 👇 Disable auto-generated documentation for this component\ntags: [' autodocs'],\n} satisfies Meta<typeof Page>;\nexport default meta;\nSimilarly, you can exclude a particular story from the auto docs page, by removing the tag:\nButton stories tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { Button } from ' /Button';\nconst meta = {\ncomponent: Button,\n//👇 Enables auto-generated documentation for this component and includes all stories in this file\ntags: ['autodocs'],\n} satisfies Meta<typeof Button>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const UndocumentedStory: Story = {\n// 👇 Removes this story from auto-generated documentation\ntags: ['",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1260317,
      "relative_path": "documentation\\storybook\\_docs_writing-docs_autodocs.html",
      "source_type": "documentation"
    },
    "token_count": 501,
    "chunk_index": 1,
    "total_chunks": 13
  },
  {
    "id": "e26fa639b5556f9c6e80ff91d0c4906e",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-docs_autodocs.html",
    "source_type": "documentation",
    "title": "Automatic documentation and Storybook | Storybook docs",
    "content": "the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework'; import { Button } from ' /Button'; const meta = { component: Button, //👇 Enables auto-generated documentation for this component and includes all stories in this file tags: ['autodocs'], } satisfies Meta<typeof Button>; export default meta; type Story = StoryObj<typeof meta>; export const UndocumentedStory: Story = { // 👇 Removes this story from auto-generated documentation tags: ['autodocs'],\n};\nConfigure\nIn addition to enabling the feature with tags, you can extend your Storybook configuration file (i e , storybook/main js|ts|cjs) and provide additional options to control how documentation gets created Listed below are the available options and examples of how to use them storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { StorybookConfig } from '@storybook/your-framework';\nconst config: StorybookConfig = {\nframework: '@storybook/your-framework',\nstories: [' /src/**/* mdx', ' /src/**/* stories @(js|jsx|mjs|ts|tsx)'],\naddons: ['@storybook/addon-docs'],\ndocs: {\n//👇 See the table below for the list of supported options\ndefaultName: 'Documentation',\n},\n};\nexport default config;\nOptionDescriptiondefaultNameRenames the auto-generated documentation page Default: docs: { defaultName: 'Documentation' }\nWrite a custom template\nTo replace the default documentation template used by Storybook, you can extend your UI configuration file (i e , storybook/preview js|ts) and introduce a docs parameter This parameter accepts a page function that returns a React component, which you can use to generate the required template For example: storybook/preview tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1260317,
      "relative_path": "documentation\\storybook\\_docs_writing-docs_autodocs.html",
      "source_type": "documentation"
    },
    "token_count": 429,
    "chunk_index": 2,
    "total_chunks": 13
  },
  {
    "id": "599acb5a668ac6a75c1ff3622c56d9dd",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-docs_autodocs.html",
    "source_type": "documentation",
    "title": "Automatic documentation and Storybook | Storybook docs",
    "content": "documentation page Default: docs: { defaultName: 'Documentation' } Write a custom template To replace the default documentation template used by Storybook, you can extend your UI configuration file (i e , storybook/preview js|ts) and introduce a docs parameter This parameter accepts a page function that returns a React component, which you can use to generate the required template For example: storybook/preview tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etcimport type { Preview } from '@storybook/your-framework';\nimport {\nTitle,\nSubtitle,\nDescription,\nPrimary,\nControls,\nStories,\n} from '@storybook/addon-docs/blocks';\nconst preview: Preview = {\nparameters: {\ncontrols: {\nmatchers: {\ncolor: /(background|color)$/i,\ndate: /Date$/,\n},\n},\ndocs: {\npage: () => (\n<>\n<Title />\n<Subtitle />\n<Description />\n<Primary />\n<Controls />\n<Stories />\n</>\n),\n},\n},\n};\nexport default preview;\n💡Internally, Storybook uses a similar implementation to generate the default template See the Doc Blocks API reference to learn more about how Doc Blocks work Going over the code snippet in more detail When Storybook starts up, it will override the default template with the custom one composed of the following:\nA header with the component's metadata retrieved by the Title, Subtitle, and Description Doc Blocks The first story defined in the file via the Primary Doc Block with a handy set of UI controls to zoom in and out of the component An interactive table with all the relevant args and argTypes defined in the story via the Controls Doc Block A overview of the remaining stories via the Stories Doc Block With MDX\nYou can also use MDX to generate the documentation template This is useful in non-React projects where JSX-handling is not configured Normally, when you create an MDX file in your project, it is treated as normal documentation To indicate that an MDX file is a documentation template, supply the isTemplate property to its Meta Doc Block For example:\nDocumentationTemplate mdximport { Meta, Title, Primary, Controls, Stories } from '@storybook/addon-docs/blocks';\n{/*\n* 👇 The isTemplate property is required to tell Storybook that this is a template\n* See https://storybook js",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1260317,
      "relative_path": "documentation\\storybook\\_docs_writing-docs_autodocs.html",
      "source_type": "documentation"
    },
    "token_count": 480,
    "chunk_index": 3,
    "total_chunks": 13
  },
  {
    "id": "43a3c2a297e4839646f7c836186f4a76",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-docs_autodocs.html",
    "source_type": "documentation",
    "title": "Automatic documentation and Storybook | Storybook docs",
    "content": "in non-React projects where JSX-handling is not configured Normally, when you create an MDX file in your project, it is treated as normal documentation To indicate that an MDX file is a documentation template, supply the isTemplate property to its Meta Doc Block For example: DocumentationTemplate mdximport { Meta, Title, Primary, Controls, Stories } from '@storybook/addon-docs/blocks'; {/* * 👇 The isTemplate property is required to tell Storybook that this is a template * See https://storybook jsorg/docs/api/doc-blocks/doc-block-meta\n* to learn how to use\n*/}\n<Meta isTemplate />\n<Title />\n# Default implementation\n<Primary />\n## Inputs\nThe component accepts the following inputs (props):\n<Controls />\n---\n## Additional variations\nListed below are additional variations of the component <Stories />\nThen you can use it in your storybook/preview js|ts or an individual story file by importing it: storybook/preview jsximport DocumentationTemplate from ' /DocumentationTemplate mdx';\nexport default {\nparameters: {\ndocs: {\npage: DocumentationTemplate,\n},\n},\n};\n💡If you only need to override the documentation page for a single component, we recommend creating an MDX file and referencing it directly via the <Meta of={} /> Doc Block Generate a table of contents\nStorybook's auto-generated documentation pages can be quite long and difficult to navigate To help with this, you can enable the table of contents feature to provide a quick overview of the documentation page and allow users to jump to a specific section To enable it, extend your Storybook UI configuration file (i e , storybook/preview js|ts) and provide a docs parameter with a toc property storybook/preview tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Preview } from '@storybook/your-framework';\nconst preview: Preview = {\nparameters: {\ndocs: {\ntoc: true, // 👈 Enables the table of contents\n},\n},\n};\nexport default preview;\nConfigure the table of contents\nBy default, the table of contents on the documentation page will only show the h3 headings that are automatically generated However, if you want to customize the table of contents, you can add more parameters to the toc property The following options and examples of how to use them are available",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1260317,
      "relative_path": "documentation\\storybook\\_docs_writing-docs_autodocs.html",
      "source_type": "documentation"
    },
    "token_count": 486,
    "chunk_index": 4,
    "total_chunks": 13
  },
  {
    "id": "3c569cc7ee3b1486ee6795184617e116",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-docs_autodocs.html",
    "source_type": "documentation",
    "title": "Automatic documentation and Storybook | Storybook docs",
    "content": "{ parameters: { docs: { toc: true, // 👈 Enables the table of contents }, }, }; export default preview; Configure the table of contents By default, the table of contents on the documentation page will only show the h3 headings that are automatically generated However, if you want to customize the table of contents, you can add more parameters to the toc property The following options and examples of how to use them are availableOptionDescriptioncontentsSelectorDefines the container's CSS selector for search for the headings  toc: { contentsSelector: ' sbdocs-content' }disableHides the table of contents for the documentation pages  toc: { disable: true }headingSelectorDefines the list of headings to feature in the table of contents  toc: { headingSelector: 'h1, h2, h3' }ignoreSelectorConfigures the table of contents to ignore specific headings or stories By default, the table of contents will ignore all content placed within Story blocks  toc: { ignoreSelector: ' docs-story h2' }titleDefines a title caption for the table of contents Accepts one of: string, null, React element  toc: { title: 'Table of Contents' }unsafeTocbotOptionsProvides additional TocBot configuration options  toc: { unsafeTocbotOptions: { orderedList: true } }\nℹ️The contentsSelector, headingSelector, and ignoreSelector properties allow additional customization For more information on using them, see the Tocbot documentation storybook/preview tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Preview } from '@storybook/your-framework';\nconst preview: Preview = {\nparameters: {\ndocs: {\ntoc: {\ncontentsSelector: ' sbdocs-content',\nheadingSelector: 'h1, h2, h3',\nignoreSelector: '#primary',\ntitle: 'Table of Contents',\ndisable: false,\nunsafeTocbotOptions: {\norderedList: false,\n},\n},\n},\n},\n};\nexport default preview;\nComponent-level configuration\nIf you want to customize the table of contents for a specific story, you can include a toc property in the story's default export and provide the required configuration For example, if you need to hide the table of contents for a specific story, adjust your story as follows:\nMyComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1260317,
      "relative_path": "documentation\\storybook\\_docs_writing-docs_autodocs.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 5,
    "total_chunks": 13
  },
  {
    "id": "7825819e9927b677db0c74e286ea9b42",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-docs_autodocs.html",
    "source_type": "documentation",
    "title": "Automatic documentation and Storybook | Storybook docs",
    "content": "unsafeTocbotOptions: { orderedList: false, }, }, }, }, }; export default preview; Component-level configuration If you want to customize the table of contents for a specific story, you can include a toc property in the story's default export and provide the required configuration For example, if you need to hide the table of contents for a specific story, adjust your story as follows: MyComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e greact-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { MyComponent } from ' /MyComponent';\nconst meta = {\ncomponent: MyComponent,\ntags: ['autodocs'],\nparameters: {\ndocs: {\ntoc: {\ndisable: true, // 👈 Disables the table of contents\n},\n},\n},\n} satisfies Meta<typeof MyComponent>;\nexport default meta;\nCustomize component documentation\nCreating automated documentation with Storybook's Autodocs provides you with the starting point to build a sustainable documentation pattern Nevertheless, it may not be suited for every case, and you may want to extend it and provide additional information We recommend combining MDX alongside Storybook's Doc Blocks for such cases to author your documentation Advanced configuration\nDocumenting multiple components\nSometimes it's helpful to document multiple components together For example, a component library’s ButtonGroup and Button components might not make sense without one another Autodocs allows you to document your \"main\" component, defined by the component property, as well as one or more subcomponents related to it List stories ts|tsxTypescriptimport React from 'react';\n// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { List } from ' /List';\nimport { ListItem } from ' /ListItem';\nconst meta = {\ncomponent: List,\nsubcomponents: { ListItem }, //👈 Adds the ListItem component as a subcomponent\n} satisfies Meta<typeof List>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const Empty: Story = {};\nexport const OneItem: Story = {\nrender: (args) => (\n<List { args}>\n<ListItem />\n</List>\n),\n};\nThe main component and its subcomponents will show up in a tabbed version of the ArgTypes doc block",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1260317,
      "relative_path": "documentation\\storybook\\_docs_writing-docs_autodocs.html",
      "source_type": "documentation"
    },
    "token_count": 493,
    "chunk_index": 6,
    "total_chunks": 13
  },
  {
    "id": "25c14e77fd3a5b61bec81391c6c1304d",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-docs_autodocs.html",
    "source_type": "documentation",
    "title": "Automatic documentation and Storybook | Storybook docs",
    "content": "} from ' /ListItem'; const meta = { component: List, subcomponents: { ListItem }, //👈 Adds the ListItem component as a subcomponent } satisfies Meta<typeof List>; export default meta; type Story = StoryObj<typeof meta>; export const Empty: Story = {}; export const OneItem: Story = { render: (args) => ( <List { args}> <ListItem /> </List> ), }; The main component and its subcomponents will show up in a tabbed version of the ArgTypes doc blockThe tab titles will correspond to the keys of the subcomponents object If you want to organize your documentation differently for component groups, we recommend using MDX It gives you complete control over how your components are displayed and supports any configuration Customize the Docs Container\nThe Docs Container is the component that wraps up the documentation page It's responsible for rendering the documentation page in Storybook's UI You can customize it by creating your own component and updating your Storybook UI configuration file (i e , storybook/preview js|ts) to reference it storybook/preview tsTypescriptimport * as React from 'react';\n// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Preview } from '@storybook/your-framework';\nimport { DocsContainer } from '@storybook/addon-docs/blocks';\nconst ExampleContainer = ({ children, props }) => {\nreturn <DocsContainer { props}>{children}</DocsContainer>;\n};\nconst preview: Preview = {\nparameters: {\ncontrols: {\nmatchers: {\ncolor: /(background|color)$/i,\ndate: /Date$/,\n},\n},\ndocs: {\ncontainer: ExampleContainer,\n},\n},\n};\nexport default preview;\nOverride the default theme\nBy default, Storybook provides two themes for the UI: light and dark If you need to customize the theme used by the documentation to match the existing one, you can update your Storybook UI configuration file (i e , storybook/preview js|ts) and apply it storybook/preview tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1260317,
      "relative_path": "documentation\\storybook\\_docs_writing-docs_autodocs.html",
      "source_type": "documentation"
    },
    "token_count": 446,
    "chunk_index": 7,
    "total_chunks": 13
  },
  {
    "id": "82b2309253a312fe3cd9b25a2ab5cf5b",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-docs_autodocs.html",
    "source_type": "documentation",
    "title": "Automatic documentation and Storybook | Storybook docs",
    "content": "}, }, docs: { container: ExampleContainer, }, }, }; export default preview; Override the default theme By default, Storybook provides two themes for the UI: light and dark If you need to customize the theme used by the documentation to match the existing one, you can update your Storybook UI configuration file (i e , storybook/preview js|ts) and apply it storybook/preview tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etcimport type { Preview } from '@storybook/your-framework';\nimport { themes, ensure } from 'storybook/theming';\nconst preview: Preview = {\nparameters: {\ncontrols: {\nmatchers: {\ncolor: /(background|color)$/i,\ndate: /Date$/,\n},\n},\ndocs: {\ntheme: ensure(themes dark), // The replacement theme to use\n},\n},\n};\nexport default preview;\nWorking with custom MDX components\nOut of the box, Storybook has a set of components that you can use to customize your documentation page If you're working with a design system or component library and wish to add them to your documentation page, you can override the MDXProvider component inherited from @mdx-js/react with your own However, there's a caveat to this, the component replacement will only have an impact if you're writing documentation using Markdown syntax (e g , # for headings) Native HTML elements, such as <h1>, will not be replaced with your custom implementation storybook/preview tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Preview } from '@storybook/your-framework';\nimport { MDXProvider } from '@mdx-js/react';\nimport { DocsContainer } from '@storybook/addon-docs/blocks';\nimport * as DesignSystem from 'your-design-system';\nexport const MyDocsContainer = (props) => (\n<MDXProvider\ncomponents={{\nh1: DesignSystem H1,\nh2: DesignSystem H2,\n}}\n>\n<DocsContainer {",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1260317,
      "relative_path": "documentation\\storybook\\_docs_writing-docs_autodocs.html",
      "source_type": "documentation"
    },
    "token_count": 432,
    "chunk_index": 8,
    "total_chunks": 13
  },
  {
    "id": "7f3f440baf4a073d9412feb622ae49cd",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-docs_autodocs.html",
    "source_type": "documentation",
    "title": "Automatic documentation and Storybook | Storybook docs",
    "content": "for headings) Native HTML elements, such as <h1>, will not be replaced with your custom implementation storybook/preview tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Preview } from '@storybook/your-framework'; import { MDXProvider } from '@mdx-js/react'; import { DocsContainer } from '@storybook/addon-docs/blocks'; import * as DesignSystem from 'your-design-system'; export const MyDocsContainer = (props) => ( <MDXProvider components={{ h1: DesignSystem H1, h2: DesignSystem H2, }} > <DocsContainer {props} />\n</MDXProvider>\n);\nconst preview: Preview = {\nparameters: {\ncontrols: {\nmatchers: {\ncolor: /(background|color)$/i,\ndate: /Date$/,\n},\n},\ndocs: {\ncontainer: MyDocsContainer,\n},\n},\n};\nexport default preview;\n💡This is not a Storybook issue but a detail of how MDX works From their migration guide:“We now ‘sandbox’ components, for lack of a better name It means that when you pass a component for h1, it does get used for # hi but not for <h1>hi</h1>”\nAddon options\nThe docs addon accepts options to customize the behavior of the documentation page You can add them to your Storybook UI configuration file (i e , storybook/main js|ts), as part of registering the addon The following options are available:\nOptionDescriptioncsfPluginOptionsProvides additional configuration for Storybook's CSF plugin Can be disabled with null mdxPluginOptionsProvides additional configuration options and plugin configuration for MDX documentation This example demonstrates how to apply these options storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { StorybookConfig } from '@storybook/your-framework';\nconst config: StorybookConfig = {\nframework: '@storybook/your-framework',\nstories: [' /src/**/* mdx', ' /src/**/* stories",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1260317,
      "relative_path": "documentation\\storybook\\_docs_writing-docs_autodocs.html",
      "source_type": "documentation"
    },
    "token_count": 441,
    "chunk_index": 9,
    "total_chunks": 13
  },
  {
    "id": "69a6f51ff2106d5e7121f05e672856b7",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-docs_autodocs.html",
    "source_type": "documentation",
    "title": "Automatic documentation and Storybook | Storybook docs",
    "content": "of registering the addon The following options are available: OptionDescriptioncsfPluginOptionsProvides additional configuration for Storybook's CSF plugin Can be disabled with null mdxPluginOptionsProvides additional configuration options and plugin configuration for MDX documentation This example demonstrates how to apply these options storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { StorybookConfig } from '@storybook/your-framework'; const config: StorybookConfig = { framework: '@storybook/your-framework', stories: [' /src/**/* mdx', ' /src/**/* stories@(js|jsx|mjs|ts|tsx)'],\naddons: [\n{\nname: '@storybook/addon-docs',\noptions: {\ncsfPluginOptions: null,\nmdxPluginOptions: {\nmdxCompileOptions: {\nremarkPlugins: [],\n},\n},\n},\n},\n],\n};\nexport default config;\nTroubleshooting\nThe table of contents doesn't render as expected\nWhen using Autodocs's table of contents, you may encounter situations where it appears differently than expected To help you resolve these problems, we have compiled a list of possible scenarios that may cause issues With simple documentation pages\nIf you have a documentation page with only one matching heading and create a table of contents for it, the table of contents will not be hidden by default A potential solution for this issue would be to add a second heading or turn it off entirely With small screens\nIf the screen width is less than 1200px, the table of contents will be hidden by default Currently, there's no built-in solution for this issue that doesn't impact the documentation page's style compatibility With MDX\nIf you're writing unattached documentation using MDX, you cannot customize the table of contents primarily due to the lack of support for defining parameters based on the current implementation As a result, the table of contents will always revert to the default configuration provided globally The auto-generated documentation is not showing up in a monorepo setup\nOut of the box, Storybook's Autodocs feature is built to generate documentation for your stories automatically Nevertheless, if you're working with a monorepo setup (e g , Yarn Workspaces, pnpm Workspaces), you may run into issues where part of the documentation may not be generated for you To help you troubleshoot those issues, we've prepared some recommendations that might help you",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1260317,
      "relative_path": "documentation\\storybook\\_docs_writing-docs_autodocs.html",
      "source_type": "documentation"
    },
    "token_count": 493,
    "chunk_index": 10,
    "total_chunks": 13
  },
  {
    "id": "f5879a2fb88a3a77c8f9f5d126ce732e",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-docs_autodocs.html",
    "source_type": "documentation",
    "title": "Automatic documentation and Storybook | Storybook docs",
    "content": "default configuration provided globally The auto-generated documentation is not showing up in a monorepo setup Out of the box, Storybook's Autodocs feature is built to generate documentation for your stories automatically Nevertheless, if you're working with a monorepo setup (e g , Yarn Workspaces, pnpm Workspaces), you may run into issues where part of the documentation may not be generated for you To help you troubleshoot those issues, we've prepared some recommendations that might help youUpdate your import statements to reference the component directly instead of the package's root For example:\nMyComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework';\n// ❌ Don't use the package's index file to import the component // import { MyComponent } from '@component-package';\n// ✅ Use the component's export to import it directly import { MyComponent } from '@component-package/src/MyComponent';\nconst meta = {\n/* 👇 The title prop is optional * See https://storybook js org/docs/configure/#configure-story-loading\n* to learn how to generate automatic titles\n*/\ntitle: 'MyComponent',\ncomponent: MyComponent,\n} satisfies Meta<typeof MyComponent>;\nexport default meta;\nAdditionally, if you're developing using TypeScript, you may need to update Storybook's configuration file (i e , storybook/main js|ts) to include the following: storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { StorybookConfig } from '@storybook/your-framework';\nconst config: StorybookConfig = {\nframework: '@storybook/your-framework',\nstories: [' /src/**/* mdx', ' /src/**/* stories @(js|jsx|mjs|ts|tsx)'],\ntypescript: {\n// Overrides the default Typescript configuration to allow multi-package components to be documented via Autodocs reactDocgen: 'react-docgen',\ncheck: false,\n},\n};\nexport default config;\nIf you're still encountering issues, we recommend reaching out to the community using the default communication channels (e g , GitHub discussions)",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1260317,
      "relative_path": "documentation\\storybook\\_docs_writing-docs_autodocs.html",
      "source_type": "documentation"
    },
    "token_count": 464,
    "chunk_index": 11,
    "total_chunks": 13
  },
  {
    "id": "274b9d9bf584e1cfa399253fb6c07588",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-docs_autodocs.html",
    "source_type": "documentation",
    "title": "Automatic documentation and Storybook | Storybook docs",
    "content": "e g react-vite, nextjs, vue3-vite, etc import type { StorybookConfig } from '@storybook/your-framework'; const config: StorybookConfig = { framework: '@storybook/your-framework', stories: [' /src/**/* mdx', ' /src/**/* stories @(js|jsx|mjs|ts|tsx)'], typescript: { // Overrides the default Typescript configuration to allow multi-package components to be documented via Autodocs reactDocgen: 'react-docgen', check: false, }, }; export default config; If you're still encountering issues, we recommend reaching out to the community using the default communication channels (e g , GitHub discussions)The controls are not updating the story within the auto-generated documentation\nIf you turned off inline rendering for your stories via the inline configuration option, you would run into a situation where the associated controls are not updating the story within the documentation page This is a known limitation of the current implementation and will be addressed in a future release Learn more about Storybook documentation\nAutodocs for creating documentation for your stories\nMDX for customizing your documentation\nDoc Blocks for authoring your documentation\nPublishing docs to automate the process of publishing your documentation\nWas this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1260317,
      "relative_path": "documentation\\storybook\\_docs_writing-docs_autodocs.html",
      "source_type": "documentation"
    },
    "token_count": 320,
    "chunk_index": 12,
    "total_chunks": 13
  },
  {
    "id": "68ae55bb2789f7b2f1b38662796d0c49",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-stories.html",
    "source_type": "documentation",
    "title": "How to write stories | Storybook docs",
    "content": "How to write stories | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs StoriesDocs » StoriesDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQHow to write storiesReactVueAngularWeb ComponentsMore\nA story captures the rendered state of a UI component It's an object with annotations that describe the component's behavior and appearance given a set of arguments Storybook uses the generic term arguments (args for short) when talking about React’s props, Vue’s props, Angular’s @Input, and other similar concepts Where to put stories\nA component’s stories are defined in a story file that lives alongside the component file The story file is for development-only, and it won't be included in your production bundle In your filesystem, it looks something like this:\ncomponents/\n├─ Button/\n│  ├─ Button js | ts | jsx | tsx | vue | svelte\n│  ├─ Button stories js | ts | jsx | tsx | svelte\nComponent Story Format\nWe define stories according to the Component Story Format (CSF), an ES6 module-based standard that is easy to write and portable between tools The key ingredients are the default export that describes the component, and named exports that describe the stories Default export\nThe default export metadata controls how Storybook lists your stories and provides information used by addons",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 2543546,
      "relative_path": "documentation\\storybook\\_docs_writing-stories.html",
      "source_type": "documentation"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 8
  },
  {
    "id": "87afe7e32649b02eaf38301003acdf78",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-stories.html",
    "source_type": "documentation",
    "title": "How to write stories | Storybook docs",
    "content": "svelte │ ├─ Button stories js | ts | jsx | tsx | svelte Component Story Format We define stories according to the Component Story Format (CSF), an ES6 module-based standard that is easy to write and portable between tools The key ingredients are the default export that describes the component, and named exports that describe the stories Default export The default export metadata controls how Storybook lists your stories and provides information used by addonsFor example, here’s the default export for a story file Button stories js|ts: Button stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { Button } from ' /Button';\nconst meta = {\ncomponent: Button,\n} satisfies Meta<typeof Button>;\nexport default meta;ℹ️Starting with Storybook version 7 0, story titles are analyzed statically as part of the build process The default export must contain a title property that can be read statically or a component property from which an automatic title can be computed Using the id property to customize your story URL must also be statically readable Defining stories\nUse the named exports of a CSF file to define your component’s stories We recommend you use UpperCamelCase for your story exports Here’s how to render Button in the “primary” state and export a story called Primary Button stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { Button } from ' /Button';\nconst meta = {\ncomponent: Button,\n} satisfies Meta<typeof Button>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const Primary: Story = {\nargs: {\nprimary: true,\nlabel: 'Button',\n},\n};\nWorking with React HooksReact Hooks are convenient helper methods to create components using a more streamlined approach You can use them while creating your component's stories if you need them, although you should treat them as an advanced use case We recommend args as much as possible when writing your own stories As an example, here’s a story that uses React Hooks to change the button's state: Button stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 2543546,
      "relative_path": "documentation\\storybook\\_docs_writing-stories.html",
      "source_type": "documentation"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 8
  },
  {
    "id": "f0f0b472a8eaebedb98ef64750d99855",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-stories.html",
    "source_type": "documentation",
    "title": "How to write stories | Storybook docs",
    "content": "methods to create components using a more streamlined approach You can use them while creating your component's stories if you need them, although you should treat them as an advanced use case We recommend args as much as possible when writing your own stories As an example, here’s a story that uses React Hooks to change the button's state: Button stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etcimport type { Meta, StoryObj } from '@storybook/your-framework';\nimport { Button } from ' /Button';\nconst meta = {\ncomponent: Button,\n} satisfies Meta<typeof Button>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n/*\n*👇 Render functions are a framework specific feature to allow you control on how the component renders * See https://storybook js org/docs/api/csf\n* to learn how to use render functions */\nexport const Primary: Story = {\nrender: () => <Button primary label=\"Button\" />,\n};\nRename stories\nYou can rename any particular story you need For instance, to give it a more accurate name Here's how you can change the name of the Primary story:\nButton stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { Button } from ' /Button';\nconst meta = {\ncomponent: Button,\n} satisfies Meta<typeof Button>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const Primary: Story = {\n// 👇 Rename this story\nname: 'I am the primary',\nargs: {\nlabel: 'Button',\nprimary: true,\n},\n};\nYour story will now be shown in the sidebar with the given text How to write stories\nA story is an object that describes how to render a component You can have multiple stories per component, and those stories can build upon one another For example, we can add Secondary and Tertiary stories based on our Primary story from above Button stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { Button } from '",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 2543546,
      "relative_path": "documentation\\storybook\\_docs_writing-stories.html",
      "source_type": "documentation"
    },
    "token_count": 481,
    "chunk_index": 2,
    "total_chunks": 8
  },
  {
    "id": "e71a9c73ba55d8c511defca6c67027c0",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-stories.html",
    "source_type": "documentation",
    "title": "How to write stories | Storybook docs",
    "content": "write stories A story is an object that describes how to render a component You can have multiple stories per component, and those stories can build upon one another For example, we can add Secondary and Tertiary stories based on our Primary story from above Button stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework'; import { Button } from '/Button';\nconst meta = {\ncomponent: Button,\n} satisfies Meta<typeof Button>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const Primary: Story = {\nargs: {\nbackgroundColor: '#ff0',\nlabel: 'Button',\n},\n};\nexport const Secondary: Story = {\nargs: { Primary args,\nlabel: '😄👍😍💯',\n},\n};\nexport const Tertiary: Story = {\nargs: { Primary args,\nlabel: '📚📕📈🤓',\n},\n};\nWhat’s more, you can import args to reuse when writing stories for other components, and it's helpful when you’re building composite components For example, if we make a ButtonGroup story, we might remix two stories from its child component Button ButtonGroup stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { ButtonGroup } from ' /ButtonGroup';\n//👇 Imports the Button stories\nimport * as ButtonStories from ' /Button stories';\nconst meta = {\ncomponent: ButtonGroup,\n} satisfies Meta<typeof ButtonGroup>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const Pair: Story = {\nargs: {\nbuttons: [{ ButtonStories Primary args }, { ButtonStories Secondary args }],\norientation: 'horizontal',\n},\n};\nWhen Button’s signature changes, you only need to change Button’s stories to reflect the new schema, and ButtonGroup’s stories will automatically be updated This pattern allows you to reuse your data definitions across the component hierarchy, making your stories more maintainable That’s not all Each of the args from the story function are live editable using Storybook’s Controls panel It means your team can dynamically change components in Storybook to stress test and find edge cases",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 2543546,
      "relative_path": "documentation\\storybook\\_docs_writing-stories.html",
      "source_type": "documentation"
    },
    "token_count": 488,
    "chunk_index": 3,
    "total_chunks": 8
  },
  {
    "id": "686e9f986b1402f64543d4b8f01bd4b7",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-stories.html",
    "source_type": "documentation",
    "title": "How to write stories | Storybook docs",
    "content": "When Button’s signature changes, you only need to change Button’s stories to reflect the new schema, and ButtonGroup’s stories will automatically be updated This pattern allows you to reuse your data definitions across the component hierarchy, making your stories more maintainable That’s not all Each of the args from the story function are live editable using Storybook’s Controls panel It means your team can dynamically change components in Storybook to stress test and find edge casesYou can also use the Controls panel to edit or save a new story after adjusting its control values Addons can enhance args For instance, Actions auto-detects which args are callbacks and appends a logging function to them That way, interactions (like clicks) get logged in the actions panel Using the play function\nStorybook's play function is a convenient helper methods to test component scenarios that otherwise require user intervention They're small code snippets that execute once your story renders For example, suppose you wanted to validate a form component, you could write the following story using the play function to check how the component responds when filling in the inputs with information:\nLoginForm stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { expect } from 'storybook/test';\nimport { LoginForm } from ' /LoginForm';\nconst meta = {\ncomponent: LoginForm,\n} satisfies Meta<typeof LoginForm>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const EmptyForm: Story = {};\nexport const FilledForm: Story = {\nplay: async ({ canvas, userEvent }) => {\n// 👇 Simulate interactions with the component\nawait userEvent type(canvas getByTestId('email'), 'email@provider com');\nawait userEvent type(canvas getByTestId('password'), 'a-random-password');\n// See https://storybook js org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\nawait userEvent click(canvas getByRole('button'));\n// 👇 Assert DOM structure\nawait expect(\ncanvas getByText(\n'Everything is perfect Your account is ready and we should probably get you started '\n)\n) toBeInTheDocument();\n},\n};\nYou can interact with and debug your story's play function in the interactions panel Using parameters\nParameters are Storybook’s method of defining static metadata for stories",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 2543546,
      "relative_path": "documentation\\storybook\\_docs_writing-stories.html",
      "source_type": "documentation"
    },
    "token_count": 486,
    "chunk_index": 4,
    "total_chunks": 8
  },
  {
    "id": "ae0e6c932804b06159af7a1e30fc6854",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-stories.html",
    "source_type": "documentation",
    "title": "How to write stories | Storybook docs",
    "content": "getByTestId('password'), 'a-random-password'); // See https://storybook js org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel await userEvent click(canvas getByRole('button')); // 👇 Assert DOM structure await expect( canvas getByText( 'Everything is perfect Your account is ready and we should probably get you started ' ) ) toBeInTheDocument(); }, }; You can interact with and debug your story's play function in the interactions panel Using parameters Parameters are Storybook’s method of defining static metadata for storiesA story’s parameters can be used to provide configuration to various addons at the level of a story or group of stories For instance, suppose you wanted to test your Button component against a different set of backgrounds than the other components in your app You might add a component-level backgrounds parameter:\nButton stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { Button } from ' /Button';\nconst meta = {\ncomponent: Button,\n//👇 Creates specific parameters at the component level\nparameters: {\nbackgrounds: {\noptions: {},\n},\n},\n} satisfies Meta<typeof Button>;\nexport default meta;\nThis parameter would instruct the backgrounds feature to reconfigure itself whenever a Button story is selected Most features and addons are configured via a parameter-based API and can be influenced at a global, component, and story level Using decorators\nDecorators are a mechanism to wrap a component in arbitrary markup when rendering a story Components are often created with assumptions about ‘where’ they render Your styles might expect a theme or layout wrapper, or your UI might expect specific context or data providers A simple example is adding padding to a component’s stories Accomplish this using a decorator that wraps the stories in a div with padding, like so:\nButton stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { Button } from ' /Button';\nconst meta = {\ncomponent: Button,\ndecorators: [\n(Story) => (\n<div style={{ margin: '3em' }}>\n{/* 👇 Decorators in Storybook also accept a function",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 2543546,
      "relative_path": "documentation\\storybook\\_docs_writing-stories.html",
      "source_type": "documentation"
    },
    "token_count": 486,
    "chunk_index": 5,
    "total_chunks": 8
  },
  {
    "id": "26b3f401eed5ab63368d8b24ae10b11f",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-stories.html",
    "source_type": "documentation",
    "title": "How to write stories | Storybook docs",
    "content": "a component’s stories Accomplish this using a decorator that wraps the stories in a div with padding, like so: Button stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework'; import { Button } from ' /Button'; const meta = { component: Button, decorators: [ (Story) => ( <div style={{ margin: '3em' }}> {/* 👇 Decorators in Storybook also accept a functionReplace <Story/> with Story() to enable it  */}\n<Story />\n</div>\n),\n],\n} satisfies Meta<typeof Button>;\nexport default meta;\nDecorators can be more complex and are often provided by addons You can also configure decorators at the story, component and global level Stories for two or more components\nSometimes you may have two or more components created to work together For instance, if you have a parent List component, it may require child ListItem components List stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { List } from ' /List';\nconst meta = {\ncomponent: List,\n} satisfies Meta<typeof List>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n// Always an empty list, not super interesting\nexport const Empty: Story = {};\nIn such cases, it makes sense to render a different function for each story:\nList stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { List } from ' /List';\nimport { ListItem } from ' /ListItem';\nconst meta = {\ncomponent: List,\n} satisfies Meta<typeof List>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const Empty: Story = {};\n/*\n*👇 Render functions are a framework specific feature to allow you control on how the component renders * See https://storybook js org/docs/api/csf\n* to learn how to use render functions */\nexport const OneItem: Story = {\nrender: (args) => (\n<List {",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 2543546,
      "relative_path": "documentation\\storybook\\_docs_writing-stories.html",
      "source_type": "documentation"
    },
    "token_count": 485,
    "chunk_index": 6,
    "total_chunks": 8
  },
  {
    "id": "eb33541ad367b452c52cd81a08190fd2",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-stories.html",
    "source_type": "documentation",
    "title": "How to write stories | Storybook docs",
    "content": "/List'; import { ListItem } from ' /ListItem'; const meta = { component: List, } satisfies Meta<typeof List>; export default meta; type Story = StoryObj<typeof meta>; export const Empty: Story = {}; /* *👇 Render functions are a framework specific feature to allow you control on how the component renders * See https://storybook js org/docs/api/csf * to learn how to use render functions */ export const OneItem: Story = { render: (args) => ( <List {args}>\n<ListItem />\n</List>\n),\n};\nexport const ManyItems: Story = {\nrender: (args) => (\n<List { args}>\n<ListItem />\n<ListItem />\n<ListItem />\n</List>\n),\n};\nYou can also reuse story data from the child ListItem in your List component That’s easier to maintain because you don’t have to update it in multiple places List stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { List } from ' /List';\nimport { ListItem } from ' /ListItem';\n//👇 We're importing the necessary stories from ListItem\nimport { Selected, Unselected } from ' /ListItem stories';\nconst meta = {\ncomponent: List,\n} satisfies Meta<typeof List>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const ManyItems: Story = {\nrender: (args) => (\n<List { args}>\n<ListItem { Selected args} />\n<ListItem { Unselected args} />\n<ListItem { Unselected args} />\n</List>\n),\n};\n💡Note that there are disadvantages in writing stories like this as you cannot take full advantage of the args mechanism and composing args as you build even more complex composite components For more discussion, see the multi component stories workflow documentation Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 2543546,
      "relative_path": "documentation\\storybook\\_docs_writing-stories.html",
      "source_type": "documentation"
    },
    "token_count": 455,
    "chunk_index": 7,
    "total_chunks": 8
  },
  {
    "id": "694810c10b986280d17e8dd35cb1cfc8",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-stories_build-pages-with-storybook.html",
    "source_type": "documentation",
    "title": "Building pages with Storybook | Storybook docs",
    "content": "Building pages with Storybook | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Stories » Building pages and screensDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQBuilding pages with StorybookReactVueAngularWeb ComponentsMoreStorybook helps you build any component, from small “atomic” components to composed pages But as you move up the component hierarchy toward the page level, you deal with more complexity There are many ways to build pages in Storybook Here are common patterns and solutions Pure presentational pages Connected components (e g , network requests, context, browser environment) Pure presentational pages\nTeams at the BBC, The Guardian, and the Storybook maintainers themselves build pure presentational pages If you take this approach, you don't need to do anything special to render your pages in Storybook It's straightforward to write components to be fully presentational up to the screen level That makes it easy to show in Storybook The idea is that you do all the messy “connected” logic in a single wrapper component in your app outside of Storybook You can see an example of this approach in the Data chapter of the Intro to Storybook tutorial The benefits:\nEasy to write stories once components are in this form All the data for the story is encoded in the args of the story, which works well with other parts of Storybook's tooling (e",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 915694,
      "relative_path": "documentation\\storybook\\_docs_writing-stories_build-pages-with-storybook.html",
      "source_type": "documentation"
    },
    "token_count": 502,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "28c3857d1b41eaad1e943024b9e31e1a",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-stories_build-pages-with-storybook.html",
    "source_type": "documentation",
    "title": "Building pages with Storybook | Storybook docs",
    "content": "The idea is that you do all the messy “connected” logic in a single wrapper component in your app outside of Storybook You can see an example of this approach in the Data chapter of the Intro to Storybook tutorial The benefits: Easy to write stories once components are in this form All the data for the story is encoded in the args of the story, which works well with other parts of Storybook's tooling (eg controls) The downsides:\nYour existing app may not be structured in this way, and it may be difficult to change it Fetching data in one place means that you need to drill it down to the components that use it This can be natural in a page that composes one big GraphQL query (for instance), but other data fetching approaches may make this less appropriate It's less flexible if you want to load data incrementally in different places on the screen Args composition for presentational screens\nWhen you are building screens in this way, it is typical that the inputs of a composite component are a combination of the inputs of the various sub-components it renders For instance, if your screen renders a page layout (containing details of the current user), a header (describing the document you are looking at), and a list (of the subdocuments), the inputs of the screen may consist of the user, document and subdocuments YourPage ts|tsxTypescriptimport PageLayout from ' /PageLayout';\nimport Document from ' /Document';\nimport SubDocuments from ' /SubDocuments';\nimport DocumentHeader from ' /DocumentHeader';\nimport DocumentList from ' /DocumentList';\nexport interface DocumentScreenProps {\nuser : {};\ndocument : Document;\nsubdocuments : SubDocuments[];\n}\nexport function DocumentScreen({ user, document, subdocuments }: DocumentScreenProps) {\nreturn (\n<PageLayout user={user}>\n<DocumentHeader document={document} />\n<DocumentList documents={subdocuments} />\n</PageLayout>\n);\n}\nIn such cases, it is natural to use args composition to build the stories for the page based on the stories of the sub-components:\nYourPage stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { DocumentScreen } from ' /YourPage';\n// 👇 Imports the required stories\nimport * as PageLayout from ' /PageLayout stories';\nimport * as DocumentHeader from '",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 915694,
      "relative_path": "documentation\\storybook\\_docs_writing-stories_build-pages-with-storybook.html",
      "source_type": "documentation"
    },
    "token_count": 502,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "7ceb29c5db8d5f864ed36d74bbd9e9a0",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-stories_build-pages-with-storybook.html",
    "source_type": "documentation",
    "title": "Building pages with Storybook | Storybook docs",
    "content": "In such cases, it is natural to use args composition to build the stories for the page based on the stories of the sub-components: YourPage stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework'; import { DocumentScreen } from ' /YourPage'; // 👇 Imports the required stories import * as PageLayout from ' /PageLayout stories'; import * as DocumentHeader from '/DocumentHeader stories';\nimport * as DocumentList from ' /DocumentList stories';\nconst meta = {\ncomponent: DocumentScreen,\n} satisfies Meta<typeof DocumentScreen>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const Simple: Story = {\nargs: {\nuser: PageLayout Simple args user,\ndocument: DocumentHeader Simple args document,\nsubdocuments: DocumentList Simple args documents,\n},\n};\nThis approach is beneficial when the various subcomponents export a complex list of different stories You can pick and choose to build realistic scenarios for your screen-level stories without repeating yourself Your story maintenance burden is minimal by reusing the data and taking a Don't-Repeat-Yourself(DRY) philosophy Mocking connected components\nConnected components are components that depend on external data or services For example, a full page component is often a connected component When you render a connected component in Storybook, you need to mock the data or modules that the component depends on There are various layers in which you can do that Mocking imports\nComponents can depend on modules that are imported into the component file These can be from external packages or internal to your project When rendering those components in Storybook or testing them, you may want to mock those modules to control their behavior Mocking API Services\nFor components that make network requests (e g , fetching data from a REST or GraphQL API), you can mock those requests in your stories Mocking providers\nComponents can receive data or configuration from context providers For example, a styled component might access its theme from a ThemeProvider or Redux uses React context to provide components access to app data You can mock a provider and the value it's providing and wrap your component with it in your stories Avoiding mocking dependenciesIt's possible to avoid mocking the dependencies of connected \"container\" components entirely by passing them around via props or React context However, it requires a strict split of the container and presentational component logic",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 915694,
      "relative_path": "documentation\\storybook\\_docs_writing-stories_build-pages-with-storybook.html",
      "source_type": "documentation"
    },
    "token_count": 496,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "0273830bc0d533939acbea9bc3422db5",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-stories_build-pages-with-storybook.html",
    "source_type": "documentation",
    "title": "Building pages with Storybook | Storybook docs",
    "content": "styled component might access its theme from a ThemeProvider or Redux uses React context to provide components access to app data You can mock a provider and the value it's providing and wrap your component with it in your stories Avoiding mocking dependenciesIt's possible to avoid mocking the dependencies of connected \"container\" components entirely by passing them around via props or React context However, it requires a strict split of the container and presentational component logicFor example, if you have a component responsible for data fetching logic and rendering DOM, it will need to be mocked as previously described It’s common to import and embed container components amongst presentational components However, as we discovered earlier, we’ll likely have to mock their dependencies or the imports to render them within Storybook Not only can this quickly grow to become a tedious task, but it’s also challenging to mock container components that use local states So, instead of importing containers directly, a solution to this problem is to create a React context that provides the container components It allows you to freely embed container components as usual, at any level in the component hierarchy without worrying about subsequently mocking their dependencies; since we can swap out the containers themselves with their mocked presentational counterpart We recommend dividing context containers up over specific pages or views in your app For example, if you had a ProfilePage component, you might set up a file structure as follows: ProfilePage js\nProfilePage stories js\nProfilePageContainer js\nProfilePageContext js\n💡It’s also often helpful to set up a “global” container context (perhaps named GlobalContainerContext) for container components that may be rendered on every page of your app and add them to the top level of your application While it’s possible to place every container within this global context, it should only provide globally required containers Let’s look at an example implementation of this approach First, create a React context, and name it ProfilePageContext It does nothing more than export a React context: ProfilePageContext js|jsximport { createContext } from 'react';\nconst ProfilePageContext = createContext();\nexport default ProfilePageContext;ProfilePage is our presentational component It will use the useContext hook to retrieve the container components from ProfilePageContext: ProfilePage js|jsximport { useContext } from 'react';\nimport ProfilePageContext from '",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 915694,
      "relative_path": "documentation\\storybook\\_docs_writing-stories_build-pages-with-storybook.html",
      "source_type": "documentation"
    },
    "token_count": 459,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "625cd47afb9581e552411c8eb5db1af5",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-stories_build-pages-with-storybook.html",
    "source_type": "documentation",
    "title": "Building pages with Storybook | Storybook docs",
    "content": "it should only provide globally required containers Let’s look at an example implementation of this approach First, create a React context, and name it ProfilePageContext It does nothing more than export a React context: ProfilePageContext js|jsximport { createContext } from 'react'; const ProfilePageContext = createContext(); export default ProfilePageContext;ProfilePage is our presentational component It will use the useContext hook to retrieve the container components from ProfilePageContext: ProfilePage js|jsximport { useContext } from 'react'; import ProfilePageContext from '/ProfilePageContext';\nexport const ProfilePage = ({ name, userId }) => {\nconst { UserPostsContainer, UserFriendsContainer } = useContext(ProfilePageContext);\nreturn (\n<div>\n<h1>{name}</h1>\n<UserPostsContainer userId={userId} />\n<UserFriendsContainer userId={userId} />\n</div>\n);\n};Mocking containers in StorybookIn the context of Storybook, instead of providing container components through context, we’ll instead provide their mocked counterparts In most cases, the mocked versions of these components can often be borrowed directly from their associated stories ProfilePage stories js|jsximport React from 'react';\nimport { ProfilePage } from ' /ProfilePage';\nimport { UserPosts } from ' /UserPosts';\n//👇 Imports a specific story from a story file\nimport { Normal as UserFriendsNormal } from ' /UserFriends stories';\nexport default {\ncomponent: ProfilePage,\n};\nconst ProfilePageProps = {\nname: 'Jimi Hendrix',\nuserId: '1',\n};\nconst context = {\n//👇 We can access the `userId` prop here if required:\nUserPostsContainer({ userId }) {\nreturn <UserPosts { UserPostsProps} />;\n},\n// Most of the time we can simply pass in a story // In this case we're passing in the `normal` story export\n// from the `UserFriends` component stories UserFriendsContainer: UserFriendsNormal,\n};\nexport const Normal = {\nrender: () => (\n<ProfilePageContext Provider value={context}>\n<ProfilePage { ProfilePageProps} />\n</ProfilePageContext Provider>\n),\n};ℹ️If the same context applies to all ProfilePage stories, we can use a decorator Providing containers to your applicationNow, in the context of your application, you’ll need to provide ProfilePage with all of the container components it requires by wrapping it with ProfilePageContext Provider:For example, in Next js, this would be your pages/profile",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 915694,
      "relative_path": "documentation\\storybook\\_docs_writing-stories_build-pages-with-storybook.html",
      "source_type": "documentation"
    },
    "token_count": 501,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "d1dc5157c3f49b3df87fae1f2b0ae46a",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-stories_build-pages-with-storybook.html",
    "source_type": "documentation",
    "title": "Building pages with Storybook | Storybook docs",
    "content": "stories UserFriendsContainer: UserFriendsNormal, }; export const Normal = { render: () => ( <ProfilePageContext Provider value={context}> <ProfilePage { ProfilePageProps} /> </ProfilePageContext Provider> ), };ℹ️If the same context applies to all ProfilePage stories, we can use a decorator Providing containers to your applicationNow, in the context of your application, you’ll need to provide ProfilePage with all of the container components it requires by wrapping it with ProfilePageContext Provider:For example, in Next js, this would be your pages/profilejs component pages/profile js|jsximport React from 'react';\nimport ProfilePageContext from ' /ProfilePageContext';\nimport { ProfilePageContainer } from ' /ProfilePageContainer';\nimport { UserPostsContainer } from ' /UserPostsContainer';\nimport { UserFriendsContainer } from ' /UserFriendsContainer';\n//👇 Ensure that your context value remains referentially equal between each render const context = {\nUserPostsContainer,\nUserFriendsContainer,\n};\nexport const AppProfilePage = () => {\nreturn (\n<ProfilePageContext Provider value={context}>\n<ProfilePageContainer />\n</ProfilePageContext Provider>\n);\n};Mocking global containers in StorybookIf you’ve set up GlobalContainerContext, you’ll need to set up a decorator within Storybook’s preview js to provide context to all stories For example: storybook/preview tsTypescriptimport React from 'react';\n// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { normal as NavigationNormal } from ' /components/Navigation stories';\nimport GlobalContainerContext from ' /components/lib/GlobalContainerContext';\nconst context = {\nNavigationContainer: NavigationNormal,\n};\nconst AppDecorator = (storyFn) => {\nreturn (\n<GlobalContainerContext Provider value={context}>{storyFn()}</GlobalContainerContext Provider>\n);\n};\nconst preview: Preview = {\ndecorators: [AppDecorator],\n};\nexport default preview;Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 915694,
      "relative_path": "documentation\\storybook\\_docs_writing-stories_build-pages-with-storybook.html",
      "source_type": "documentation"
    },
    "token_count": 492,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "eb37537023f8d83218eda974d9cea740",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-stories_args.html",
    "source_type": "documentation",
    "title": "Args | Storybook docs",
    "content": "Args | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Stories » ArgsDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQArgsReactVueAngularWeb ComponentsMoreWatch a video tutorial\nA story is a component with a set of arguments that define how the component should render “Args” are Storybook’s mechanism for defining those arguments in a single JavaScript object Args can be used to dynamically change props, slots, styles, inputs, etc It allows Storybook and its addons to live edit components You do not need to modify your underlying component code to use args When an arg’s value changes, the component re-renders, allowing you to interact with components in Storybook’s UI via addons that affect args Learn how and why to write stories in the introduction For details on how args work, read on Args object\nThe args object can be defined at the story, component and global level It is a JSON serializable object composed of string keys with matching valid value types that can be passed into a component for your framework Story args\nTo define the args of a single story, use the args CSF story key:\nButton stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1343930,
      "relative_path": "documentation\\storybook\\_docs_writing-stories_args.html",
      "source_type": "documentation"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "478864c224033fcfd377d858913db0ee",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-stories_args.html",
    "source_type": "documentation",
    "title": "Args | Storybook docs",
    "content": "work, read on Args object The args object can be defined at the story, component and global level It is a JSON serializable object composed of string keys with matching valid value types that can be passed into a component for your framework Story args To define the args of a single story, use the args CSF story key: Button stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etcimport type { Meta, StoryObj } from '@storybook/your-framework';\nimport { Button } from ' /Button';\nconst meta = {\ncomponent: Button,\n} satisfies Meta<typeof Button>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const Primary: Story = {\nargs: {\nprimary: true,\nlabel: 'Button',\n},\n};\nThese args will only apply to the story for which they are attached, although you can reuse them via JavaScript object reuse:\nButton stories ts|tsxTypescript// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\nimport { Button } from ' /Button';\nconst meta = {\ncomponent: Button,\n} satisfies Meta<typeof Button>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const Primary: Story = {\nargs: {\nprimary: true,\nlabel: 'Button',\n},\n};\nexport const PrimaryLongName: Story = {\nargs: { Primary args,\nlabel: 'Primary with a really long name',\n},\n};\nIn the above example, we use the object spread feature of ES 2015 Component args\nYou can also define args at the component level; they will apply to all the component's stories unless you overwrite them To do so, use the args key on the default CSF export:\nButton stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { Button } from ' /Button';\nconst meta = {\ncomponent: Button,\n//👇 Creates specific argTypes\nargTypes: {\nbackgroundColor: { control: 'color' },\n},\nargs: {\n//👇 Now all Button stories will be primary",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1343930,
      "relative_path": "documentation\\storybook\\_docs_writing-stories_args.html",
      "source_type": "documentation"
    },
    "token_count": 465,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "4a7ebb95553ee8bccb9efed3854805da",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-stories_args.html",
    "source_type": "documentation",
    "title": "Args | Storybook docs",
    "content": "stories unless you overwrite them To do so, use the args key on the default CSF export: Button stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta } from '@storybook/your-framework'; import { Button } from ' /Button'; const meta = { component: Button, //👇 Creates specific argTypes argTypes: { backgroundColor: { control: 'color' }, }, args: { //👇 Now all Button stories will be primaryprimary: true,\n},\n} satisfies Meta<typeof Button>;\nexport default meta;\nGlobal args\nYou can also define args at the global level; they will apply to every component's stories unless you overwrite them To do so, define the args property in the default export of preview js|ts: storybook/preview tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Preview } from '@storybook/your-framework';\nconst preview: Preview = {\n// The default value of the theme arg for all stories\nargs: { theme: 'light' },\n};\nexport default preview;\n💡For most uses of global args, globals are a better tool for defining globally-applied settings, such as a theme Using globals enables users to change the value with the toolbar menu Args composition\nYou can separate the arguments to a story to compose in other stories Here's how you can combine args for multiple stories of the same component Button stories ts|tsxTypescript// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\nimport { Button } from ' /Button';\nconst meta = {\ncomponent: Button,\n} satisfies Meta<typeof Button>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const Primary: Story = {\nargs: {\nprimary: true,\nlabel: 'Button',\n},\n};\nexport const Secondary: Story = {\nargs: { Primary args,\nprimary: false,\n},\n};\n💡If you find yourself re-using the same args for most of a component's stories, you should consider using component-level args Args are useful when writing stories for composite components that are assembled from other components Composite components often pass their arguments unchanged to their child components, and similarly, their stories can be compositions of their child components stories",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1343930,
      "relative_path": "documentation\\storybook\\_docs_writing-stories_args.html",
      "source_type": "documentation"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "3c4cb680cd908246cd28cb719065f349",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-stories_args.html",
    "source_type": "documentation",
    "title": "Args | Storybook docs",
    "content": "label: 'Button', }, }; export const Secondary: Story = { args: { Primary args, primary: false, }, }; 💡If you find yourself re-using the same args for most of a component's stories, you should consider using component-level args Args are useful when writing stories for composite components that are assembled from other components Composite components often pass their arguments unchanged to their child components, and similarly, their stories can be compositions of their child components storiesWith args, you can directly compose the arguments:\nPage stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { Page } from ' /Page';\n//👇 Imports all Header stories\nimport * as HeaderStories from ' /Header stories';\nconst meta = {\ncomponent: Page,\n} satisfies Meta<typeof Page>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const LoggedIn: Story = {\nargs: { HeaderStories LoggedIn args,\n},\n};\nArgs can modify any aspect of your component\nYou can use args in your stories to configure the component's appearance, similar to what you would do in an application For example, here's how you could use a footer arg to populate a child component:\nPage stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { Page } from ' /Page';\ntype PagePropsAndCustomArgs = React ComponentProps<typeof Page> & { footer : string };\nconst meta = {\ncomponent: Page,\nrender: ({ footer, args }) => (\n<Page { args}>\n<footer>{footer}</footer>\n</Page>\n),\n} satisfies Meta<PagePropsAndCustomArgs>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const CustomFooter = {\nargs: {\nfooter: 'Built with Storybook',\n},\n} satisfies Story;\nSetting args through the URL\nYou can also override the set of initial args for the active story by adding an args query parameter to the URL Typically, you would use Controls to handle this For example, here's how you could set a size and style arg in the Storybook's URL:",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1343930,
      "relative_path": "documentation\\storybook\\_docs_writing-stories_args.html",
      "source_type": "documentation"
    },
    "token_count": 484,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "8b9271a3ec0f683f1e616963eebf84e5",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-stories_args.html",
    "source_type": "documentation",
    "title": "Args | Storybook docs",
    "content": "satisfies Meta<PagePropsAndCustomArgs>; export default meta; type Story = StoryObj<typeof meta>; export const CustomFooter = { args: { footer: 'Built with Storybook', }, } satisfies Story; Setting args through the URL You can also override the set of initial args for the active story by adding an args query parameter to the URL Typically, you would use Controls to handle this For example, here's how you could set a size and style arg in the Storybook's URL:path=/story/avatar--default&args=style:rounded;size:100\nAs a safeguard against XSS attacks, the arg's keys and values provided in the URL are limited to alphanumeric characters, spaces, underscores, and dashes Any other types will be ignored and removed from the URL, but you can still use them with the Controls panel and within your story The args param is always a set of key: value pairs delimited with a semicolon ; Values will be coerced (cast) to their respective argTypes (which may have been automatically inferred) Objects and arrays are supported Special values null and undefined can be set by prefixing with a bang For example, args=obj key:val;arr[0]:one;arr[1]:two;nil: null will be interpreted as:\n{\nobj: { key: 'val' },\narr: ['one', 'two'],\nnil: null\n}\nSimilarly, special formats are available for dates and colors Date objects will be encoded as date(value) with value represented as an ISO date string Colors are encoded as hex(value), rgba(value) or hsla(value) Note that rgb(a) and hsl(a) should not contain spaces or percentage signs in the URL Args specified through the URL will extend and override any default values of args set on the story Setting args from within a storyInteractive components often need to be controlled by their containing component or page to respond to events, modify their state and reflect those changes in the UI For example, when a user toggles a switch component, the switch should be checked, and the arg shown in Storybook should reflect the change To enable this, you can use the useArgs API exported by storybook/preview-api: my-component/component stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1343930,
      "relative_path": "documentation\\storybook\\_docs_writing-stories_args.html",
      "source_type": "documentation"
    },
    "token_count": 480,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "284aa75e720fcb7807ed1ddf13b2813e",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-stories_args.html",
    "source_type": "documentation",
    "title": "Args | Storybook docs",
    "content": "to be controlled by their containing component or page to respond to events, modify their state and reflect those changes in the UI For example, when a user toggles a switch component, the switch should be checked, and the arg shown in Storybook should reflect the change To enable this, you can use the useArgs API exported by storybook/preview-api: my-component/component stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etcimport type { Meta, StoryObj } from '@storybook/your-framework';\nimport { useArgs } from 'storybook/preview-api';\nimport { Checkbox } from ' /checkbox';\nconst meta = {\ntitle: 'Inputs/Checkbox',\ncomponent: Checkbox,\n} satisfies Meta<typeof Checkbox>;\nexport default meta;\ntype Story = StoryObj<typeof Checkbox>;\nexport const Example = {\nargs: {\nisChecked: false,\nlabel: 'Try Me ',\n},\n/**\n* 👇 To avoid linting issues, it is recommended to use a function with a capitalized name * If you are not concerned with linting, you may use an arrow function */\nrender: function Render(args) {\nconst [{ isChecked }, updateArgs] = useArgs();\nfunction onChange() {\nupdateArgs({ isChecked: isChecked });\n}\nreturn <Checkbox { args} onChange={onChange} isChecked={isChecked} />;\n},\n} satisfies Story;\nMapping to complex arg values\nComplex values such as JSX elements cannot be serialized to the manager (e g , the Controls panel) or synced with the URL Arg values can be \"mapped\" from a simple string to a complex type using the mapping property in argTypes to work around this limitation It works in any arg but makes the most sense when used with the select control type Example stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { Example } from ' /Example';\nconst meta = {\ncomponent: Example,\nargTypes: {\nlabel: {\ncontrol: { type: 'select' },\noptions: ['Normal', 'Bold', 'Italic'],\nmapping: {\nBold: <b>Bold</b>,\nItalic: <i>Italic</i>,\n},\n},\n},\n} satisfies Meta<typeof Example>;\nexport default meta;\nNote that mapping does not have to be exhaustive",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1343930,
      "relative_path": "documentation\\storybook\\_docs_writing-stories_args.html",
      "source_type": "documentation"
    },
    "token_count": 490,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "0bdb6ce16ebc7b72206e772c161987ff",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-stories_args.html",
    "source_type": "documentation",
    "title": "Args | Storybook docs",
    "content": "type Example stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework'; import { Example } from ' /Example'; const meta = { component: Example, argTypes: { label: { control: { type: 'select' }, options: ['Normal', 'Bold', 'Italic'], mapping: { Bold: <b>Bold</b>, Italic: <i>Italic</i>, }, }, }, } satisfies Meta<typeof Example>; export default meta; Note that mapping does not have to be exhaustiveIf the arg value is not a property of mapping, the value will be used directly Keys in mapping always correspond to arg values, not their index in the options array Using args in addonsIf you are writing an addon that wants to read or update args, use the useArgs hook exported by storybook/manager-api: my-addon/src/manager js|tsimport { useArgs } from 'storybook/manager-api';\nconst [args, updateArgs, resetArgs] = useArgs();\n// To update one or more args:\nupdateArgs({ key: 'value' });\n// To reset one (or more) args:\nresetArgs((argNames: ['key']));\n// To reset all args\nresetArgs();Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1343930,
      "relative_path": "documentation\\storybook\\_docs_writing-stories_args.html",
      "source_type": "documentation"
    },
    "token_count": 347,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "d33b3d3de751e30feca3f0fbaa6b6ef3",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-stories_decorators.html",
    "source_type": "documentation",
    "title": "Decorators | Storybook docs",
    "content": "Decorators | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Stories » DecoratorsDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQDecoratorsReactVueAngularWeb ComponentsMoreA decorator is a way to wrap a story in extra “rendering” functionality Many addons define decorators to augment your stories with extra rendering or gather details about how your story renders When writing stories, decorators are typically used to wrap stories with extra markup or context mocking Wrap stories with extra markup\nSome components require a “harness” to render in a useful way For instance, if a component runs right up to its edges, you might want to space it inside Storybook Use a decorator to add spacing for all stories of the component YourComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { YourComponent } from ' /YourComponent';\nconst meta = {\ncomponent: YourComponent,\ndecorators: [\n(Story) => (\n<div style={{ margin: '3em' }}>\n{/* 👇 Decorators in Storybook also accept a function",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1073824,
      "relative_path": "documentation\\storybook\\_docs_writing-stories_decorators.html",
      "source_type": "documentation"
    },
    "token_count": 470,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "6cd6469d3ad4ee273735d16f40b4482b",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-stories_decorators.html",
    "source_type": "documentation",
    "title": "Decorators | Storybook docs",
    "content": "you might want to space it inside Storybook Use a decorator to add spacing for all stories of the component YourComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta } from '@storybook/your-framework'; import { YourComponent } from ' /YourComponent'; const meta = { component: YourComponent, decorators: [ (Story) => ( <div style={{ margin: '3em' }}> {/* 👇 Decorators in Storybook also accept a functionReplace <Story/> with Story() to enable it  */}\n<Story />\n</div>\n),\n],\n} satisfies Meta<typeof YourComponent>;\nexport default meta;\n“Context” for mocking\nThe second argument to a decorator function is the story context which contains the properties:\nargs - the story arguments You can use some args in your decorators and drop them in the story implementation itself argTypes- Storybook's argTypes allow you to customize and fine-tune your stories args globals - Storybook-wide globals In particular you can use the toolbars feature to allow you to change these values using Storybook’s UI hooks - Storybook's API hooks (e g , useArgs) parameters- the story's static metadata, most commonly used to control Storybook's behavior of features and addons viewMode- Storybook's current active window (e g , canvas, docs) This context can be used to adjust the behavior of your decorator based on the story's arguments or other metadata For example, you could create a decorator that allows you to optionally apply a layout to the story, by defining parameters pageLayout = 'page' (or 'page-mobile'):\n: storybook/preview tsxTypescriptimport React from 'react';\n// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1073824,
      "relative_path": "documentation\\storybook\\_docs_writing-stories_decorators.html",
      "source_type": "documentation"
    },
    "token_count": 387,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "a0ecca727e13ea867e42ab3140c4e62f",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-stories_decorators.html",
    "source_type": "documentation",
    "title": "Decorators | Storybook docs",
    "content": "Storybook's current active window (e g , canvas, docs) This context can be used to adjust the behavior of your decorator based on the story's arguments or other metadata For example, you could create a decorator that allows you to optionally apply a layout to the story, by defining parameters pageLayout = 'page' (or 'page-mobile'): : storybook/preview tsxTypescriptimport React from 'react'; // Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etcimport type { Preview } from '@storybook/your-framework';\nconst preview: Preview = {\ndecorators: [\n// 👇 Defining the decorator in the preview file applies it to all stories\n(Story, { parameters }) => {\n// 👇 Make it configurable by reading from parameters\nconst { pageLayout } = parameters;\nswitch (pageLayout) {\ncase 'page':\nreturn (\n// Your page layout is probably a little more complex than this ;)\n<div className=\"page-layout\">\n<Story />\n</div>\n);\ncase 'page-mobile':\nreturn (\n<div className=\"page-mobile-layout\">\n<Story />\n</div>\n);\ndefault:\n// In the default case, don't apply a layout\nreturn <Story />;\n}\n},\n],\n};\nexport default preview;\n💡For another example, see the section on configuring the mock provider, which demonstrates how to use the same technique to change which theme is provided to the component Using decorators to provide data\nIf your components are “connected” and require side-loaded data to render, you can use decorators to provide that data in a mocked way without having to refactor your components to take that data as an arg There are several techniques to achieve this Depending on exactly how you are loading that data Read more in the building pages in Storybook section Story decorators\nTo define a decorator for a single story, use the decorators key on a named export:\nButton stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { Button } from '",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1073824,
      "relative_path": "documentation\\storybook\\_docs_writing-stories_decorators.html",
      "source_type": "documentation"
    },
    "token_count": 441,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "d46ac5891287e48b03d3a689ed0774f0",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-stories_decorators.html",
    "source_type": "documentation",
    "title": "Decorators | Storybook docs",
    "content": "an arg There are several techniques to achieve this Depending on exactly how you are loading that data Read more in the building pages in Storybook section Story decorators To define a decorator for a single story, use the decorators key on a named export: Button stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework'; import { Button } from '/Button';\nconst meta = {\ncomponent: Button,\n} satisfies Meta<typeof Button>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const Primary: Story = {\ndecorators: [\n(Story) => (\n<div style={{ margin: '3em' }}>\n{/* 👇 Decorators in Storybook also accept a function Replace <Story/> with Story() to enable it  */}\n<Story />\n</div>\n),\n],\n};\nIt is useful to ensure that the story remains a “pure” rendering of the component under test and that any extra HTML or components are used only as decorators In particular the Source Doc Block works best when you do this Component decorators\nTo define a decorator for all stories of a component, use the decorators key of the default CSF export:\nButton stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { Button } from ' /Button';\nconst meta = {\ncomponent: Button,\ndecorators: [\n(Story) => (\n<div style={{ margin: '3em' }}>\n{/* 👇 Decorators in Storybook also accept a function Replace <Story/> with Story() to enable it  */}\n<Story />\n</div>\n),\n],\n} satisfies Meta<typeof Button>;\nexport default meta;\nGlobal decorators\nWe can also set a decorator for all stories via the decorators export of your storybook/preview js|ts file (this is the file where you configure all stories): storybook/preview tsxTypescriptimport React from 'react';\n// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1073824,
      "relative_path": "documentation\\storybook\\_docs_writing-stories_decorators.html",
      "source_type": "documentation"
    },
    "token_count": 458,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "de501389aa262e4dd5e5f686411a942e",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-stories_decorators.html",
    "source_type": "documentation",
    "title": "Decorators | Storybook docs",
    "content": "Decorators in Storybook also accept a function Replace <Story/> with Story() to enable it */} <Story /> </div> ), ], } satisfies Meta<typeof Button>; export default meta; Global decorators We can also set a decorator for all stories via the decorators export of your storybook/preview js|ts file (this is the file where you configure all stories): storybook/preview tsxTypescriptimport React from 'react'; // Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etcimport type { Preview } from '@storybook/your-framework';\nconst preview: Preview = {\ndecorators: [\n(Story) => (\n<div style={{ margin: '3em' }}>\n{/* 👇 Decorators in Storybook also accept a function Replace <Story/> with Story() to enable it  */}\n<Story />\n</div>\n),\n],\n};\nexport default preview;\nDecorator inheritance\nLike parameters, decorators can be defined globally, at the component level, and for a single story (as we’ve seen) All decorators relevant to a story will run in the following order once the story renders:\nGlobal decorators, in the order they are defined\nComponent decorators, in the order they are defined\nStory decorators, in the order they are defined, starting from the innermost decorator and working outwards and up the hierarchy in the same order\nWas this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 1073824,
      "relative_path": "documentation\\storybook\\_docs_writing-stories_decorators.html",
      "source_type": "documentation"
    },
    "token_count": 352,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "94d76616c7b0ccf8882cc921c1dea3a2",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-docs_mdx.html",
    "source_type": "documentation",
    "title": "MDX | Storybook docs",
    "content": "MDX | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Docs » MDXDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQMDXReactVueAngularWeb ComponentsMoreMDX files mix Markdown and Javascript/JSX to create rich interactive documentation You can use Markdown’s readable syntax (such as # heading) for your documentation, include stories defined in Component Story Format (CSF), and freely embed JSX component blocks at any point in the file All at once In addition, you can write pure documentation pages in MDX and add them to Storybook alongside your stories Basic example\nLet's start with an example, Checkbox mdx, combining Markdown with a single story Checkbox mdximport { Canvas, Meta } from '@storybook/addon-docs/blocks';\nimport * as CheckboxStories from ' /Checkbox stories';\n<Meta of={CheckboxStories} />\n# Checkbox\nA checkbox is a square box that can be activated or deactivated when ticked Use checkboxes to select one or more options from a list of choices <Canvas of={CheckboxStories Unchecked} />\nThis MDX file references a story file, Checkbox stories js|ts, that is written in Component Story Format (CSF):\nCheckbox stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 969519,
      "relative_path": "documentation\\storybook\\_docs_writing-docs_mdx.html",
      "source_type": "documentation"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 12
  },
  {
    "id": "4d61a512fae97788cfffb07a5612d698",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-docs_mdx.html",
    "source_type": "documentation",
    "title": "MDX | Storybook docs",
    "content": "'@storybook/addon-docs/blocks'; import * as CheckboxStories from ' /Checkbox stories'; <Meta of={CheckboxStories} /> # Checkbox A checkbox is a square box that can be activated or deactivated when ticked Use checkboxes to select one or more options from a list of choices <Canvas of={CheckboxStories Unchecked} /> This MDX file references a story file, Checkbox stories js|ts, that is written in Component Story Format (CSF): Checkbox stories ts|tsxTypescript// Replace your-framework with the framework you are using, e greact-vite, nextjs, vue3-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { Checkbox } from ' /Checkbox';\nconst meta = {\ncomponent: Checkbox,\n} satisfies Meta<typeof Checkbox>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const Unchecked: Story = {\nargs: {\nlabel: 'Unchecked',\n},\n};\nAnd here's how that's rendered in Storybook:\nThere’s a lot going on here We're writing Markdown, we're writing JSX, and we're also defining and referencing Storybook stories that are drop-in compatible with the entire Storybook ecosystem Let’s break it down MDX and CSF\nThe first thing you'll notice is that the component documentation is divided into distinct formats: one for writing component stories describing each possible component state and the second one for documenting how to use them This split leverages the best qualities of each format:\nCSF is great for succinctly defining stories (component examples) If you use TypeScript, it also provides type safety and auto-completion MDX is great for writing structured documentation and composing it with interactive JSX elements Anatomy of MDX\nAssuming you’re already familiar with writing stories with CSF, we can dissect the MDX side of things in greater detail The document consists of a number of blocks separated by blank lines Since MDX mixes a few different languages together, it uses those blank lines to help distinguish where one starts, and the next begins Failing to separate blocks by whitespace can cause (sometimes cryptic) parse errors Going through the code blocks in sequence:\n{ /* Checkbox mdx */ }\nComments in MDX are JSX blocks that contain JS comments Checkbox mdximport { Canvas, Meta } from '@storybook/addon-docs/blocks';\nimport * as CheckboxStories from ' /Checkbox",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 969519,
      "relative_path": "documentation\\storybook\\_docs_writing-docs_mdx.html",
      "source_type": "documentation"
    },
    "token_count": 484,
    "chunk_index": 1,
    "total_chunks": 12
  },
  {
    "id": "e4766921a46a3156f633c7cb9a101315",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-docs_mdx.html",
    "source_type": "documentation",
    "title": "MDX | Storybook docs",
    "content": "by blank lines Since MDX mixes a few different languages together, it uses those blank lines to help distinguish where one starts, and the next begins Failing to separate blocks by whitespace can cause (sometimes cryptic) parse errors Going through the code blocks in sequence: { /* Checkbox mdx */ } Comments in MDX are JSX blocks that contain JS comments Checkbox mdximport { Canvas, Meta } from '@storybook/addon-docs/blocks'; import * as CheckboxStories from ' /Checkboxstories';\nImports the components and stories that will be used in the JSX throughout the rest of the file Checkbox mdximport { Meta } from '@storybook/addon-docs/blocks';\nimport * as CheckboxStories from ' /Checkbox stories';\n<Meta of={CheckboxStories} />\nℹ️When providing the of prop to the Meta block, make sure that you're referencing the default export of the story file and not the component itself to prevent render issues with the generated documentation The Meta block defines where the document will be placed in the sidebar In this case, it is adjacent to the Checkbox’s stories By default, the docs sidebar node is titled \"Docs\", but this can be customized by passing a name prop (e g , <Meta of={CheckboxStories} name=\"Info\" />) If you want to place a docs node at an arbitrary point in the navigation hierarchy, you can use the title prop (e g , <Meta title=\"path/to/node\" />) # Checkbox\nA checkbox is a square box that can be activated or deactivated when ticked Use checkboxes to select one or more options from a list of choices MDX supports standard markdown (\"commonmark\") by default and can be extended to support GitHub Flavored Markdown (GFM) and other extensions (see the Troubleshooting section to learn more about some of the current limitations) Checkbox mdximport { Canvas } from '@storybook/addon-docs/blocks';\nimport * as CheckboxStories from ' /Checkbox stories';\n<Canvas of={CheckboxStories Unchecked} />\nFinally, MDX supports blocks of arbitrary JSX In this case, we are leveraging “Doc Blocks”, a library of documentation components designed to work with Storybook stories to show your stories, your component APIs & controls for interacting with your components inside your documentation, among other utilities In addition to Doc Blocks, MDX can incorporate arbitrary React components, making it a very flexible documentation system",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 969519,
      "relative_path": "documentation\\storybook\\_docs_writing-docs_mdx.html",
      "source_type": "documentation"
    },
    "token_count": 484,
    "chunk_index": 2,
    "total_chunks": 12
  },
  {
    "id": "a3d077448841ccbe2e00448acfcb2daf",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-docs_mdx.html",
    "source_type": "documentation",
    "title": "MDX | Storybook docs",
    "content": "import * as CheckboxStories from ' /Checkbox stories'; <Canvas of={CheckboxStories Unchecked} /> Finally, MDX supports blocks of arbitrary JSX In this case, we are leveraging “Doc Blocks”, a library of documentation components designed to work with Storybook stories to show your stories, your component APIs & controls for interacting with your components inside your documentation, among other utilities In addition to Doc Blocks, MDX can incorporate arbitrary React components, making it a very flexible documentation systemSuppose you want a stylized list of “dos and don’ts” for your component; you can use off-the-shelf components or write your own Guideline mdx<Guidelines>\n<Dos>\n- Use buttons for the main actions on your page\n- Identify the primary action and make it `primary`\n</Dos>\n<Donts>\n- Use a button when a link will do (e g , for navigation-only actions)\n- Use multiple `primary` buttons in a single UI state\n</Donts>\n</Guidelines>\nKnown limitations\nWhile MDX supports a variety of runtimes (React, Preact, Vue), Storybook’s implementation is React-only That means your documentation is rendered in React, while your stories render in the runtime of your choice (React, Vue, Angular, Web Components, Svelte, etc ) Setup custom documentation\nIn addition, to document your components with MDX, you can also extend it to write other types of content, such as guidelines or best practices on how to use them To enable custom documentation for your stories with this format, start by updating your Storybook configuration file (i e , storybook/main js|ts|cjs) storybook/main tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { StorybookConfig } from '@storybook/your-framework';\nconst config: StorybookConfig = {\n// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc framework: '@storybook/your-framework',\nstories: [\n//👇 Your documentation written in MDX along with your stories goes here\n' /src/**/* mdx',\n' /src/**/* stories @(js|jsx|mjs|ts|tsx)',\n],\naddons: ['@storybook/addon-docs'],\n};\nexport default config;\nCreate an MDX file to add your custom documentation",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 969519,
      "relative_path": "documentation\\storybook\\_docs_writing-docs_mdx.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 3,
    "total_chunks": 12
  },
  {
    "id": "82fcaad37587d18806a06d224669c13d",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-docs_mdx.html",
    "source_type": "documentation",
    "title": "MDX | Storybook docs",
    "content": "framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { StorybookConfig } from '@storybook/your-framework'; const config: StorybookConfig = { // Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc framework: '@storybook/your-framework', stories: [ //👇 Your documentation written in MDX along with your stories goes here ' /src/**/* mdx', ' /src/**/* stories @(js|jsx|mjs|ts|tsx)', ], addons: ['@storybook/addon-docs'], }; export default config; Create an MDX file to add your custom documentationDepending on how you want your documentation to render in the UI, you'll need to consider the following use cases Using the Meta Doc Block\nIf you need to match the component documentation to an existing story, you can configure the Meta Doc Block to control how the documentation gets rendered Out of the box, it allows you to define a custom title or a reference to the story you need to document (i e , via the of prop) For example:\ncustom-titleof-prop Button mdximport { Meta, Controls } from '@storybook/addon-docs/blocks';\n<Meta title=\"Button\" />\n# Definition\nButton is a clickable interactive element that triggers a response You can place text and icons inside of a button Buttons are often used for form submissions and to toggle elements into view ## Usage\nThe component comes in different variants such as `primary`, `secondary`, `large` and `small` which you can use to alter the look and feel of the button ## Inputs\nButton has the following properties:\n<Controls />\nWriting unattached documentation\nSuppose you're documenting an existing component and only provide the Meta Doc Block without additional props or other blocks In that case, Storybook will consider it as \"unattached\" documentation, or in other words, a \"documentation-only\" page, and it will render it differently in the sidebar navigation menu:\nExampleDocumentation mdximport { Meta } from '@storybook/addon-docs/blocks';\nimport * as ExampleComponentStories from ' /ExampleComponent",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 969519,
      "relative_path": "documentation\\storybook\\_docs_writing-docs_mdx.html",
      "source_type": "documentation"
    },
    "token_count": 446,
    "chunk_index": 4,
    "total_chunks": 12
  },
  {
    "id": "9ae471be89044d2a7e09bcd03a8ef6fa",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-docs_mdx.html",
    "source_type": "documentation",
    "title": "MDX | Storybook docs",
    "content": "of the button ## Inputs Button has the following properties: <Controls /> Writing unattached documentation Suppose you're documenting an existing component and only provide the Meta Doc Block without additional props or other blocks In that case, Storybook will consider it as \"unattached\" documentation, or in other words, a \"documentation-only\" page, and it will render it differently in the sidebar navigation menu: ExampleDocumentation mdximport { Meta } from '@storybook/addon-docs/blocks'; import * as ExampleComponentStories from ' /ExampleComponentstories';\n{/* 👇 Documentation-only page */}\n<Meta title=\"Documentation\" />\n{/* 👇 Component documentation page */}\n<Meta of={ExampleComponentStories} />\nUsing the File System\nHowever, providing the Meta Doc Block may not be required for certain use cases, such as standalone pages or even as guidelines for testing your components In that case, you can safely omit it Storybook will instead rely on the file's physical location to place the documentation in the sidebar, overriding any pre-existent auto-generated documentation with your own For example:\nsrc/components/Select mdx# Select\nSelect is a type of input that allows users to choose one or more options from a list of choices The options are hidden by default and revealed when a user interacts with an element It shows the currently selected option in its default collapsed state ## Design implementation\nTo help users get acquainted with the existing UI elements, it is recommended to use check the Figma file to see how the select input is implemented ### When to use In a select input where there are less than 3-4 items, consider using radio boxes, or radio inputs instead ### How to use To help users understand the options available in a select input, include a default option that is unselectable and acts as a label 💡If you're overriding an existing auto-generated documentation page enabled via tags configuration property, we recommend removing it to avoid errors Once the custom MDX documentation is loaded, Storybook will infer the title and location using the same heuristic rules to generate auto-title stories and render it in the sidebar as a Docs entry Working with standalone documentation pages\nWriting standalone documentation pages is a common use case that applies not only on a per-component but also on a per-project basis For example, you might want to document your project's onboarding process with instructions on using it To do so, you can create a new MDX file containing your documentation using a similar structure and content:\nsrc/GettingStarted",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 969519,
      "relative_path": "documentation\\storybook\\_docs_writing-docs_mdx.html",
      "source_type": "documentation"
    },
    "token_count": 496,
    "chunk_index": 5,
    "total_chunks": 12
  },
  {
    "id": "f3b81bae7916405336ad2e6f5664437e",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-docs_mdx.html",
    "source_type": "documentation",
    "title": "MDX | Storybook docs",
    "content": "generate auto-title stories and render it in the sidebar as a Docs entry Working with standalone documentation pages Writing standalone documentation pages is a common use case that applies not only on a per-component but also on a per-project basis For example, you might want to document your project's onboarding process with instructions on using it To do so, you can create a new MDX file containing your documentation using a similar structure and content: src/GettingStartedmdx# Getting Started\nWelcome Whether you're a designer or a developer, this guide will help you get started and connect you to the essential resources you need ## Table of Contents\n- [Design Resources](#design-resources)\n- [Figma](#figma)\n- [UI/UX Design Guidelines](#uiux-design-guidelines)\n- [Design Assets](#design-assets)\n- [Development Resources](#development-resources)\n- [Coding Standards](#coding-standards)\n- [Version Control](#version-control)\n- [Development Tools](#development-tools)\n---\n## Design Resources\n### Figma\n[Figma](https://www figma com/) is a collaborative design and prototyping tool It's the heart of the design process, allowing designers to work together seamlessly - **Get Access**: If you're not already part of the Figma project, request access from the project lead or manager ### UI/UX Design Guidelines\nBefore you dive into designing, familiarize yourself with our UI/UX design guidelines They provide valuable insights into our design philosophy and standards - [UI/UX Guidelines Document](https://your-design-guidelines-link com)\n### Design Assets\nAll the essential design assets like logos, icons, and brand guidelines can be found in the Figma project Ensure you have access and familiarize yourself with these assets for consistency ---\n## Development Resources\n### Coding Standards\nMaintaining a consistent code style is essential for collaborative development Our coding standards document will guide you on best practices - [Coding Standards Document](https://your-coding-standards-link com)\n### Version Control\nWe use Git for version control Make sure you have Git installed and are familiar with its basics ### Development Tools\nYour development environment is critical Here are some tools and resources to help you set up your workspace:\n- **Code Editor**: We recommend using [Visual Studio Code](https://code visualstudio com/) for development It's highly customizable and supports a wide range of extensions - **Package Manager**: [npm](https://www npmjs",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 969519,
      "relative_path": "documentation\\storybook\\_docs_writing-docs_mdx.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 6,
    "total_chunks": 12
  },
  {
    "id": "7f5ef85ae030e8034f4d1a788b5e1d0b",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-docs_mdx.html",
    "source_type": "documentation",
    "title": "MDX | Storybook docs",
    "content": "practices - [Coding Standards Document](https://your-coding-standards-link com) ### Version Control We use Git for version control Make sure you have Git installed and are familiar with its basics ### Development Tools Your development environment is critical Here are some tools and resources to help you set up your workspace: - **Code Editor**: We recommend using [Visual Studio Code](https://code visualstudio com/) for development It's highly customizable and supports a wide range of extensions - **Package Manager**: [npm](https://www npmjscom/) is the package manager we use for JavaScript projects Install it to manage project dependencies ---\nWhen Storybook loads the documentation, it will infer the placement of the page in the sidebar navigation menu using the file's physical location and render it as a Docs entry Fully control custom documentation\nDocumentation can be expensive to maintain and keep up to date when applied to every project component To help simplify this process, Storybook provides a set of useful UI components (i e , Doc Blocks) to help cover more advanced cases If you need additional content, use them to help create your custom documentation Button mdximport { Meta, Story } from '@storybook/addon-docs/blocks';\nimport * as ButtonStories from ' /Button stories';\n<Meta of={ButtonStories} />\n# Button\nButton is a clickable interactive element that triggers a response You can place text and icons inside of a button Buttons are often used for form submissions and to toggle elements into view ## Usage\n<Story of={ButtonStories Basic} />\nWorking with multiple components\nIf you need to document multiple components in a single documentation page, you can reference them directly inside your MDX file Internally, Storybook looks for the story metadata and composes it alongside your existing documentation For example:\nPage mdximport { Canvas, Meta, Story } from '@storybook/addon-docs/blocks';\nimport * as ListStories from ' /List stories';\nimport * as ListItemStories from ' /ListItem stories';\nimport * as PageStories from ' /Page stories';\n<Meta of={PageStories} />\n# Page\nPage is a layout container that is used to position children in predetermined areas It's often used to apply consistent positioning for content across pages in an application\n## Usage\n<Canvas of={PageStories Basic} />\n# List\nList is a grouping of related items List can be ordered with multiple levels of nesting ## Usage\n<Story of={ListStories",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 969519,
      "relative_path": "documentation\\storybook\\_docs_writing-docs_mdx.html",
      "source_type": "documentation"
    },
    "token_count": 493,
    "chunk_index": 7,
    "total_chunks": 12
  },
  {
    "id": "62a6e696f78615841acb52b1189967eb",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-docs_mdx.html",
    "source_type": "documentation",
    "title": "MDX | Storybook docs",
    "content": "* as ListItemStories from ' /ListItem stories'; import * as PageStories from ' /Page stories'; <Meta of={PageStories} /> # Page Page is a layout container that is used to position children in predetermined areas It's often used to apply consistent positioning for content across pages in an application ## Usage <Canvas of={PageStories Basic} /> # List List is a grouping of related items List can be ordered with multiple levels of nesting ## Usage <Story of={ListStoriesFilled} />\n# List Item\nList items are used to group related content in a list They must be nested within a List component ## Usage\n<Story of={ListItemStories Starter} meta={ListItemStories} />\nGenerate documentation from Markdown\nIf you need to extend your documentation with additional content written in Markdown, you can use the Markdown Doc Block to import the available content, and Storybook will render it alongside your existing documentation For example, if you have a CHANGELOG md file, you can import it and render it in your documentation page as follows:\nChangelog mdximport { Meta, Markdown } from '@storybook/addon-docs/blocks';\nimport Readme from ' / /Changelog md raw';\n<Meta title=\"Changelog\" />\n# Changelog\n<Markdown>{Readme}</Markdown>\nℹ️The Markdown Doc Block provides additional configuration options to customize the rendering of your documentation For more information, refer to the API documentation Linking to other stories and pages\nAnother way to improve documentation is by linking to other stories and pages Suppose you already have a component story with the following unique identifier, some--id, and you want to link it to your documentation page In that case, you can use the path query string to redirect to the documentation entry related to the story:\n[Go to specific documentation page]( path=/docs/some--id)\nInstead, if you need to target a specific documentation section, you can adjust the link to point at it For example:\n[Go to the conclusion of the documentation page]( path=/docs/some--id#conclusion)\nHowever, cross-linking documentation isn't restricted to documentation pages You can adjust the path query and supply the story's unique identifier if you need to reference a specific one For example:\n[Go to specific story canvas]( path=/story/some--id)\n💡Applying this pattern with the Controls feature, all anchors will be ignored in Canvas based on how Storybook handles URLs to track the args values",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 969519,
      "relative_path": "documentation\\storybook\\_docs_writing-docs_mdx.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 8,
    "total_chunks": 12
  },
  {
    "id": "c320bedeb3c9a089ed5e7e0877e18056",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-docs_mdx.html",
    "source_type": "documentation",
    "title": "MDX | Storybook docs",
    "content": "to point at it For example: [Go to the conclusion of the documentation page]( path=/docs/some--id#conclusion) However, cross-linking documentation isn't restricted to documentation pages You can adjust the path query and supply the story's unique identifier if you need to reference a specific one For example: [Go to specific story canvas]( path=/story/some--id) 💡Applying this pattern with the Controls feature, all anchors will be ignored in Canvas based on how Storybook handles URLs to track the args valuesTroubleshooting\nMarkdown tables aren't rendering correctly\nIf you're extending your documentation to include specific features (e g , tables, footnotes), you may run into some issues rendering them correctly using the current MDX version supported by Storybook We recommend enabling the remark-gfm plugin in your configuration file (i e , storybook/main js|ts) to render them correctly storybook/main tsTypescriptimport remarkGfm from 'remark-gfm';\n// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { StorybookConfig } from '@storybook/your-framework';\nconst config: StorybookConfig = {\nframework: '@storybook/your-framework',\nstories: [' /src/**/* mdx', ' /src/**/* stories @(js|jsx|mjs|ts|tsx)'],\naddons: [\n// Other addons go here\n{\nname: '@storybook/addon-docs',\noptions: {\nmdxPluginOptions: {\nmdxCompileOptions: {\nremarkPlugins: [remarkGfm],\n},\n},\n},\n},\n],\n};\nexport default config;\n💡The remark-gfm package is not included by default with Storybook and must be installed separately as a development dependency To learn more about how to use it and the other breaking changes introduced by MDX, refer to the GFM guide and the migration guide provided by the MDX team for more information The MDX documentation doesn't render in my environment\nAs Storybook relies on MDX 3 to render documentation, some technical limitations may prevent you from migrating to this version If that's the case, we've prepared a set of instructions to help you transition to this new version Storybook doesn't create documentation for my component stories\nIf you run into a situation where Storybook is not able to detect and render the documentation for your component stories, it may be due to a misconfiguration in your Storybook",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 969519,
      "relative_path": "documentation\\storybook\\_docs_writing-docs_mdx.html",
      "source_type": "documentation"
    },
    "token_count": 499,
    "chunk_index": 9,
    "total_chunks": 12
  },
  {
    "id": "e1b2ee127a709ec13fbcd17295df51b0",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-docs_mdx.html",
    "source_type": "documentation",
    "title": "MDX | Storybook docs",
    "content": "Storybook relies on MDX 3 to render documentation, some technical limitations may prevent you from migrating to this version If that's the case, we've prepared a set of instructions to help you transition to this new version Storybook doesn't create documentation for my component stories If you run into a situation where Storybook is not able to detect and render the documentation for your component stories, it may be due to a misconfiguration in your StorybookCheck your configuration file (i e , storybook/main js|ts) and ensure the stories configuration element provides the correct path to your stories location (e g , /src/**/* stories @(js|jsx|mjs|ts|tsx)) The migration seems flaky and keeps failing\nBy default, running the migration command will prompt you to update the existing MDX files in your project according to the MDX version supported by Storybook However, this might be a disruptive process, specifically if you're upgrading from a previous version of Storybook where you were using the legacy MDX format To help you troubleshoot those issues, we've prepared some recommendations that might help you Start by running the following command inside your project directory:\nnpx @hipster/mdx2-issue-checker\n💡Depending on the volume, you may be required to run the command multiple times to fix all the issues When it finishes, it will output the list of files causing issues You can then use this information to fix the problems manually Additionally, if you're working with VSCode, you can add the MDX extension and enable MDX experimental support for linting, type checking, and auto-completion by adding the following to your user settings:\n{\n\"mdx server enable\": true\n}\nIf you're still encountering issues, we recommend reaching out to the community using the default communication channels (e g , GitHub discussions) The controls are not updating the story within the MDX documentation page\nIf you turned off inline rendering for your stories via the inline configuration option, you would run into a situation where the associated controls are not updating the story within the documentation page This is a known limitation of the current implementation and will be addressed in a future release The React version used is unexpected\nFor most projects, Storybook's addon-docs uses the React version listed in your project's dependencies If it does not find one, it will use React 18 2 0 There are two exceptions to this:\nPreact projects will always use React 17\nNext",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 969519,
      "relative_path": "documentation\\storybook\\_docs_writing-docs_mdx.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 10,
    "total_chunks": 12
  },
  {
    "id": "7fc23e9ed03e604bfde4fce805957026",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-docs_mdx.html",
    "source_type": "documentation",
    "title": "MDX | Storybook docs",
    "content": "the associated controls are not updating the story within the documentation page This is a known limitation of the current implementation and will be addressed in a future release The React version used is unexpected For most projects, Storybook's addon-docs uses the React version listed in your project's dependencies If it does not find one, it will use React 18 2 0 There are two exceptions to this: Preact projects will always use React 17 Nextjs projects will always use the canary version that comes with the Next js version installed, regardless of which React version is listed in the project’s dependencies If you're having issues with the React version used, you may need to re-create your project's node_modules folder to ensure the correct version is used Learn more about Storybook documentation\nAutodocs for creating documentation for your stories\nMDX for customizing your documentation\nDoc Blocks for authoring your documentation\nPublishing docs to automate the process of publishing your documentation\nWas this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 969519,
      "relative_path": "documentation\\storybook\\_docs_writing-docs_mdx.html",
      "source_type": "documentation"
    },
    "token_count": 264,
    "chunk_index": 11,
    "total_chunks": 12
  },
  {
    "id": "ba4201827397973b6f55d034dc358d71",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-stories_loaders.html",
    "source_type": "documentation",
    "title": "Loaders | Storybook docs",
    "content": "Loaders | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Stories » LoadersDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQLoadersReactVueAngularWeb ComponentsMoreLoaders are asynchronous functions that load data for a story and its decorators A story's loaders run before the story renders, and the loaded data injected into the story via its render context Loaders can be used to load any asset, lazy load components, or fetch data from a remote API This feature was designed as a performance optimization to handle large story imports However, args is the recommended way to manage story data We're building up an ecosystem of tools and techniques around Args that might not be compatible with loaded data They are an advanced feature (i e , escape hatch), and we only recommend using them if you have a specific need that other means can't fulfill Fetching API data\nStories are isolated component examples that render internal data defined as part of the story or alongside the story as args Loaders are helpful when you need to load story data externally (e g , from a remote API) Consider the following example that fetches a todo item to display in a todo list:\nMyComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etc",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 671639,
      "relative_path": "documentation\\storybook\\_docs_writing-stories_loaders.html",
      "source_type": "documentation"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "843264b3df26ddf2a7c2cf9b7fac3953",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-stories_loaders.html",
    "source_type": "documentation",
    "title": "Loaders | Storybook docs",
    "content": "can't fulfill Fetching API data Stories are isolated component examples that render internal data defined as part of the story or alongside the story as args Loaders are helpful when you need to load story data externally (e g , from a remote API) Consider the following example that fetches a todo item to display in a todo list: MyComponent stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, nextjs-vite, etcimport type { Meta, StoryObj } from '@storybook/your-framework';\nimport { TodoItem } from ' /TodoItem';\n/*\n*👇 Render functions are a framework specific feature to allow you control on how the component renders * See https://storybook js org/docs/api/csf\n* to learn how to use render functions */\nconst meta = {\ncomponent: TodoItem,\nrender: (args, { loaded: { todo } }) => <TodoItem { args} { todo} />,\n} satisfies Meta<typeof TodoItem>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const Primary: Story = {\nloaders: [\nasync () => ({\ntodo: await (await fetch('https://jsonplaceholder typicode com/todos/1')) json(),\n}),\n],\n};\nThe response obtained from the remote API call is combined into a loaded field on the story context, which is the second argument to a story function For example, in React, the story's args were spread first to prioritize them over the static data provided by the loader With other frameworks (e g , Angular), you can write your stories as you'd usually do Global loaders\nWe can also set a loader for all stories via the loaders export of your storybook/preview js file (this is the file where you configure all stories): storybook/preview tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Preview } from '@storybook/your-framework';\nconst preview: Preview = {\nloaders: [\nasync () => ({\ncurrentUser: await (await fetch('https://jsonplaceholder typicode com/users/1')) json(),\n}),\n],\n};\nexport default preview;\nIn this example, we load a \"current user\" available as loaded currentUser for all stories Loader inheritance\nLike parameters, loaders can be defined globally, at the component level, and for a single story (as we’ve seen)",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 671639,
      "relative_path": "documentation\\storybook\\_docs_writing-stories_loaders.html",
      "source_type": "documentation"
    },
    "token_count": 496,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "11147506f2eac9b0da727b62caa2053d",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-stories_loaders.html",
    "source_type": "documentation",
    "title": "Loaders | Storybook docs",
    "content": "you are using, e g react-vite, nextjs, vue3-vite, etc import type { Preview } from '@storybook/your-framework'; const preview: Preview = { loaders: [ async () => ({ currentUser: await (await fetch('https://jsonplaceholder typicode com/users/1')) json(), }), ], }; export default preview; In this example, we load a \"current user\" available as loaded currentUser for all stories Loader inheritance Like parameters, loaders can be defined globally, at the component level, and for a single story (as we’ve seen)All loaders, defined at all levels that apply to a story, run before the story renders in Storybook's canvas All loaders run in parallel\nAll results are the loaded field in the story context\nIf there are keys that overlap, \"later\" loaders take precedence (from lowest to highest):\nGlobal loaders, in the order they are defined\nComponent loaders, in the order they are defined\nStory loaders, in the order they are defined\nWas this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 671639,
      "relative_path": "documentation\\storybook\\_docs_writing-stories_loaders.html",
      "source_type": "documentation"
    },
    "token_count": 275,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "bdd7fc33b376cdda6a59a37847165db8",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-stories_parameters.html",
    "source_type": "documentation",
    "title": "Parameters | Storybook docs",
    "content": "Parameters | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Stories » ParametersDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQParametersReactVueAngularWeb ComponentsMoreParameters are a set of static, named metadata about a story, typically used to control the behavior of Storybook features and addons ℹ️Available parameters are listed in the parameters API reference For example, let’s customize the backgrounds feature via a parameter We’ll use parameters backgrounds to define which backgrounds appear in the backgrounds toolbar when a story is selected Story parameters\nWe can set a parameter for a single story with the parameters key on a CSF export:\nButton stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework';\nimport { Button } from '",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 673522,
      "relative_path": "documentation\\storybook\\_docs_writing-stories_parameters.html",
      "source_type": "documentation"
    },
    "token_count": 409,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "8ff2194bf2dc474c14ac9a62fe6e58b6",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-stories_parameters.html",
    "source_type": "documentation",
    "title": "Parameters | Storybook docs",
    "content": "let’s customize the backgrounds feature via a parameter We’ll use parameters backgrounds to define which backgrounds appear in the backgrounds toolbar when a story is selected Story parameters We can set a parameter for a single story with the parameters key on a CSF export: Button stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta, StoryObj } from '@storybook/your-framework'; import { Button } from '/Button';\nconst meta = {\ncomponent: Button,\n} satisfies Meta<typeof Button>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const Primary: Story = {\n// 👇 Story-level parameters\nparameters: {\nbackgrounds: {\noptions: {\nred: { name: 'Red', value: '#f00' },\ngreen: { name: 'Green', value: '#0f0' },\nblue: { name: 'Blue', value: '#00f' },\n},\n},\n},\n};\nComponent parameters\nWe can set the parameters for all stories of a component using the parameters key on the default CSF export:\nButton stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { Button } from ' /Button';\nconst meta = {\ncomponent: Button,\n//👇 Creates specific parameters at the component level\nparameters: {\nbackgrounds: {\noptions: {},\n},\n},\n} satisfies Meta<typeof Button>;\nexport default meta;\nGlobal parameters\nWe can also set the parameters for all stories via the parameters export of your storybook/preview js|ts file (this is the file where you configure all stories): storybook/preview tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Preview } from '@storybook/your-framework';\nconst preview: Preview = {\nparameters: {\nbackgrounds: {\noptions: {\nlight: { name: 'Light', value: '#fff' },\ndark: { name: 'Dark', value: '#333' },\n},\n},\n},\n};\nexport default preview;\nSetting a global parameter is a common way to configure addons With backgrounds, you configure the list of backgrounds that every story can render in",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 673522,
      "relative_path": "documentation\\storybook\\_docs_writing-stories_parameters.html",
      "source_type": "documentation"
    },
    "token_count": 486,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "c7501655bca2cdcf478b75cc5554c910",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-stories_parameters.html",
    "source_type": "documentation",
    "title": "Parameters | Storybook docs",
    "content": "with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Preview } from '@storybook/your-framework'; const preview: Preview = { parameters: { backgrounds: { options: { light: { name: 'Light', value: '#fff' }, dark: { name: 'Dark', value: '#333' }, }, }, }, }; export default preview; Setting a global parameter is a common way to configure addons With backgrounds, you configure the list of backgrounds that every story can render inRules of parameter inheritance\nThe way the global, component and story parameters are combined is:\nMore specific parameters take precedence (so a story parameter overwrites a component parameter which overwrites a global parameter) Parameters are merged, so keys are only ever overwritten and never dropped The merging of parameters is important This means it is possible to override a single specific sub-parameter on a per-story basis while retaining most of the parameters defined globally If you are defining an API that relies on parameters (e g , an addon) it is a good idea to take this behavior into account Was this page useful 👍👎✍️ Edit on GithubOn this pageJoin the communitySubscribe7,044 developers and countingWhyWhy StorybookComponent driven UIDocsGuidesTutorialsChangelogTelemetryCommunityAddonsGet involvedBlogShowcaseExploreAboutOpen source softwareMaintained byChromaticSpecial thanks to Netlify and CircleCI",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 673522,
      "relative_path": "documentation\\storybook\\_docs_writing-stories_parameters.html",
      "source_type": "documentation"
    },
    "token_count": 293,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "d293a2d0ce1c50e60a94308bd799e255",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-stories_naming-components-and-hierarchy.html",
    "source_type": "documentation",
    "title": "Naming components and hierarchy | Storybook docs",
    "content": "Naming components and hierarchy | Storybook docsJoin us live: AI that knows (and uses) your design systemDocsAddonsShowcaseBlogVisual TestEnterprise87,560Search docsDocs Docs » Stories » Naming components and hierarchyDocumentationAPITutorialsAddonsChangelogVersion 9 1Get StartedWhy Storybook InstallFrameworksWhat's a story Browse storiesSetupConclusionStoriesArgsParametersDecoratorsPlay functionLoadersTagsNaming components and hierarchyMocking data and modulesBuilding pages and screensStories for multiple componentsWriting stories in TypeScriptTestingInteraction testsAccessibility testsVisual testsSnapshot testsTest coverageIn CIIntegrationsDocsAutodocsMDXDoc blocksCode panelPreview and build docsSharingPublishEmbedDesign integrationsCompositionPackage CompositionEssentialsActionsBackgroundsControlsHighlightMeasure & outlineToolbars & globalsViewportAddonsInstallWriteConfigure addonsWrite a presetAdd to catalogTypes of addonsKnowledge baseAddon APIMigrate addons to 9 0ConfigureStyling and CSSTelemetryIntegrationStory renderingStory layoutUser InterfaceEnvironment variablesBuildersViteWebpackAPIAPImain js|ts configurationComponent Story Format (CSF)ArgTypesParametersDoc BlocksPortable StoriesFrameworksCLI optionsReleasesMigrate to Storybook 9Migrate from 7 to 8UpgradingFeature LifecycleRoadmapContributeRFC processCodeDocumentationFrameworksReproduceFAQNaming components and hierarchyReactVueAngularWeb ComponentsMoreWatch a video tutorial\nStorybook provides a powerful way to organize your stories, giving you the necessary tools to categorize, search, and filter your stories based on your organization's needs and preferences Structure and hierarchy\nWhen organizing your Storybook, there are two methods of structuring your stories: implicit and explicit The implicit method involves relying upon the physical location of your stories to position them in the sidebar, while the explicit method involves utilizing the title parameter to place the story Based on how you structure your Storybook, you can see that the story hierarchy is made up of various parts:\nCategory: The top-level grouping of stories and documentation pages generated by Storybook\nFolder: A mid-level organizational unit that groups components and stories in the sidebar, representing a feature or section of your application\nComponent: A low-level organizational unit representing the component that the story is testing\nDocs: The automatically generated documentation page for the component\nStory: The individual story testing a specific component state\nNaming stories\nWhen creating your stories, you can explicitly use the title parameter to define the story's position in the sidebar",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 812752,
      "relative_path": "documentation\\storybook\\_docs_writing-stories_naming-components-and-hierarchy.html",
      "source_type": "documentation"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "e3f8d547c35223033b3e8a8394b0bbc7",
    "source_file": "corpus\\documentation\\storybook\\_docs_writing-stories_naming-components-and-hierarchy.html",
    "source_type": "documentation",
    "title": "Naming components and hierarchy | Storybook docs",
    "content": "generated by Storybook Folder: A mid-level organizational unit that groups components and stories in the sidebar, representing a feature or section of your application Component: A low-level organizational unit representing the component that the story is testing Docs: The automatically generated documentation page for the component Story: The individual story testing a specific component state Naming stories When creating your stories, you can explicitly use the title parameter to define the story's position in the sidebarIt can also be used to group related components together in an expandable interface to help with Storybook organization providing a more intuitive experience for your users For example:\nButton stories tsTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { Button } from ' /Button';\nconst meta = {\n/* 👇 The title prop is optional * See https://storybook js org/docs/configure/#configure-story-loading\n* to learn how to generate automatic titles\n*/\ntitle: 'Button',\ncomponent: Button,\n} satisfies Meta<typeof Button>;\nexport default meta;\nYields this:\nGrouping\nIt is also possible to group related components in an expandable interface to help with Storybook organization To do so, use the / as a separator:\nButton stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { Button } from ' /Button';\nconst meta = {\n/* 👇 The title prop is optional * See https://storybook js org/docs/configure/#configure-story-loading\n* to learn how to generate automatic titles\n*/\ntitle: 'Design System/Atoms/Button',\ncomponent: Button,\n} satisfies Meta<typeof Button>;\nexport default meta;\nCheckBox stories ts|tsxTypescript// Replace your-framework with the framework you are using, e g react-vite, nextjs, vue3-vite, etc import type { Meta } from '@storybook/your-framework';\nimport { CheckBox } from ' /Checkbox';\nconst meta = {\n/* 👇 The title prop is optional * See https://storybook js",
    "metadata": {
      "file_extension": ".html",
      "file_type": "html",
      "file_size": 812752,
      "relative_path": "documentation\\storybook\\_docs_writing-stories_naming-components-and-hierarchy.html",
      "source_type": "documentation"
    },
    "token_count": 449,
    "chunk_index": 1,
    "total_chunks": 6
  }
]